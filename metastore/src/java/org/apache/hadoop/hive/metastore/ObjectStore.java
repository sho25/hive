begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOHelper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOObjectNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|datastore
operator|.
name|DataStoreCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|CharStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|CommonTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MSerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MStorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|FilterLexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|FilterParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|ANTLRNoCaseStringStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * This class is the interface between the application logic and the database  * store that contains the objects. Refrain putting any logic in mode.M* objects  * or in this file as former could be auto generated and this class would need  * to be made into a interface that can read both from a database and a  * filestore.  */
end_comment

begin_class
specifier|public
class|class
name|ObjectStore
implements|implements
name|RawStore
implements|,
name|Configurable
block|{
specifier|private
specifier|static
name|Properties
name|prop
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|PersistenceManagerFactory
name|pmf
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Lock
name|pmfPropLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ObjectStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|TXN_STATUS
block|{
name|NO_STATE
block|,
name|OPEN
block|,
name|COMMITED
block|,
name|ROLLBACK
block|}
specifier|private
name|boolean
name|isInitialized
init|=
literal|false
decl_stmt|;
specifier|private
name|PersistenceManager
name|pm
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|hiveConf
decl_stmt|;
name|int
name|openTrasactionCalls
init|=
literal|0
decl_stmt|;
specifier|private
name|Transaction
name|currentTransaction
init|=
literal|null
decl_stmt|;
specifier|private
name|TXN_STATUS
name|transactionStatus
init|=
name|TXN_STATUS
operator|.
name|NO_STATE
decl_stmt|;
specifier|public
name|ObjectStore
parameter_list|()
block|{   }
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|hiveConf
return|;
block|}
comment|/**    * Called whenever this object is instantiated using ReflectionUils, and also    * on connection retries. In cases of connection retries, conf will usually    * contain modified values.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Although an instance of ObjectStore is accessed by one thread, there may
comment|// be many threads with ObjectStore instances. So the static variables
comment|// pmf and prop need to be protected with locks.
name|pmfPropLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|isInitialized
operator|=
literal|false
expr_stmt|;
name|hiveConf
operator|=
name|conf
expr_stmt|;
name|Properties
name|propsFromConf
init|=
name|getDataSourceProps
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|propsChanged
init|=
operator|!
name|propsFromConf
operator|.
name|equals
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|propsChanged
condition|)
block|{
name|pmf
operator|=
literal|null
expr_stmt|;
name|prop
operator|=
literal|null
expr_stmt|;
block|}
assert|assert
operator|(
operator|!
name|isActiveTransaction
argument_list|()
operator|)
assert|;
name|shutdown
argument_list|()
expr_stmt|;
comment|// Always want to re-create pm as we don't know if it were created by the
comment|// most recent instance of the pmf
name|pm
operator|=
literal|null
expr_stmt|;
name|openTrasactionCalls
operator|=
literal|0
expr_stmt|;
name|currentTransaction
operator|=
literal|null
expr_stmt|;
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|NO_STATE
expr_stmt|;
name|initialize
argument_list|(
name|propsFromConf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isInitialized
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to create persistence manager. Check dss.log for details"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized ObjectStore"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pmfPropLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
block|{
name|classLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
name|classLoader
operator|=
name|ObjectStore
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
name|void
name|initialize
parameter_list|(
name|Properties
name|dsProps
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ObjectStore, initialize called"
argument_list|)
expr_stmt|;
name|prop
operator|=
name|dsProps
expr_stmt|;
name|pm
operator|=
name|getPersistenceManager
argument_list|()
expr_stmt|;
name|isInitialized
operator|=
name|pm
operator|!=
literal|null
expr_stmt|;
return|return;
block|}
comment|/**    * Properties specified in hive-default.xml override the properties specified    * in jpox.properties.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
specifier|static
name|Properties
name|getDataSourceProps
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iter
init|=
name|conf
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|"datanucleus"
argument_list|)
operator|||
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jdo"
argument_list|)
condition|)
block|{
name|Object
name|prevVal
init|=
name|prop
operator|.
name|setProperty
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
operator|!
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREPWD
operator|.
name|varname
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Overriding "
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|" value "
operator|+
name|prevVal
operator|+
literal|" from  jpox.properties with "
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|prop
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREPWD
operator|.
name|varname
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|" = "
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|prop
return|;
block|}
specifier|private
specifier|static
name|PersistenceManagerFactory
name|getPMF
parameter_list|()
block|{
if|if
condition|(
name|pmf
operator|==
literal|null
condition|)
block|{
name|pmf
operator|=
name|JDOHelper
operator|.
name|getPersistenceManagerFactory
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|DataStoreCache
name|dsc
init|=
name|pmf
operator|.
name|getDataStoreCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|dsc
operator|!=
literal|null
condition|)
block|{
name|dsc
operator|.
name|pinAll
argument_list|(
literal|true
argument_list|,
name|MTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|dsc
operator|.
name|pinAll
argument_list|(
literal|true
argument_list|,
name|MStorageDescriptor
operator|.
name|class
argument_list|)
expr_stmt|;
name|dsc
operator|.
name|pinAll
argument_list|(
literal|true
argument_list|,
name|MSerDeInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|dsc
operator|.
name|pinAll
argument_list|(
literal|true
argument_list|,
name|MPartition
operator|.
name|class
argument_list|)
expr_stmt|;
name|dsc
operator|.
name|pinAll
argument_list|(
literal|true
argument_list|,
name|MDatabase
operator|.
name|class
argument_list|)
expr_stmt|;
name|dsc
operator|.
name|pinAll
argument_list|(
literal|true
argument_list|,
name|MType
operator|.
name|class
argument_list|)
expr_stmt|;
name|dsc
operator|.
name|pinAll
argument_list|(
literal|true
argument_list|,
name|MFieldSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|dsc
operator|.
name|pinAll
argument_list|(
literal|true
argument_list|,
name|MOrder
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pmf
return|;
block|}
specifier|private
name|PersistenceManager
name|getPersistenceManager
parameter_list|()
block|{
return|return
name|getPMF
argument_list|()
operator|.
name|getPersistenceManager
argument_list|()
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|pm
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Opens a new one or the one already created Every call of this function must    * have corresponding commit or rollback function call    *    * @return an active transaction    */
specifier|public
name|boolean
name|openTransaction
parameter_list|()
block|{
name|openTrasactionCalls
operator|++
expr_stmt|;
if|if
condition|(
name|openTrasactionCalls
operator|==
literal|1
condition|)
block|{
name|currentTransaction
operator|=
name|pm
operator|.
name|currentTransaction
argument_list|()
expr_stmt|;
name|currentTransaction
operator|.
name|begin
argument_list|()
expr_stmt|;
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|OPEN
expr_stmt|;
block|}
else|else
block|{
comment|// something is wrong since openTransactionCalls is greater than 1 but
comment|// currentTransaction is not active
assert|assert
operator|(
operator|(
name|currentTransaction
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|currentTransaction
operator|.
name|isActive
argument_list|()
operator|)
operator|)
assert|;
block|}
return|return
name|currentTransaction
operator|.
name|isActive
argument_list|()
return|;
block|}
comment|/**    * if this is the commit of the first open call then an actual commit is    * called.    *    * @return Always returns true    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
block|{
if|if
condition|(
name|TXN_STATUS
operator|.
name|ROLLBACK
operator|==
name|transactionStatus
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|openTrasactionCalls
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"commitTransaction was called but openTransactionCalls = "
operator|+
name|openTrasactionCalls
operator|+
literal|". This probably indicates that there are unbalanced "
operator|+
literal|"calls to openTransaction/commitTransaction"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|currentTransaction
operator|.
name|isActive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Commit is called, but transaction is not active. Either there are"
operator|+
literal|" mismatching open and close calls or rollback was called in the same trasaction"
argument_list|)
throw|;
block|}
name|openTrasactionCalls
operator|--
expr_stmt|;
if|if
condition|(
operator|(
name|openTrasactionCalls
operator|==
literal|0
operator|)
operator|&&
name|currentTransaction
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|COMMITED
expr_stmt|;
name|currentTransaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @return true if there is an active transaction. If the current transaction    *         is either committed or rolled back it returns false    */
specifier|public
name|boolean
name|isActiveTransaction
parameter_list|()
block|{
if|if
condition|(
name|currentTransaction
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|currentTransaction
operator|.
name|isActive
argument_list|()
return|;
block|}
comment|/**    * Rolls back the current transaction if it is active    */
specifier|public
name|void
name|rollbackTransaction
parameter_list|()
block|{
if|if
condition|(
name|openTrasactionCalls
operator|<
literal|1
condition|)
block|{
return|return;
block|}
name|openTrasactionCalls
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|currentTransaction
operator|.
name|isActive
argument_list|()
operator|&&
name|transactionStatus
operator|!=
name|TXN_STATUS
operator|.
name|ROLLBACK
condition|)
block|{
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|ROLLBACK
expr_stmt|;
comment|// could already be rolled back
name|currentTransaction
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|MDatabase
name|mdb
init|=
operator|new
name|MDatabase
argument_list|()
decl_stmt|;
name|mdb
operator|.
name|setName
argument_list|(
name|db
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|mdb
operator|.
name|setLocationUri
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|mdb
operator|.
name|setDescription
argument_list|(
name|db
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mdb
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
name|MDatabase
name|getMDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDatabase
operator|.
name|class
argument_list|,
literal|"name == dbname"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String dbname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mdb
operator|=
operator|(
name|MDatabase
operator|)
name|query
operator|.
name|execute
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mdb
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mdb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"There is no database named "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|mdb
return|;
block|}
specifier|public
name|Database
name|getDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|mdb
operator|=
name|getMDatabase
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|mdb
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|setDescription
argument_list|(
name|mdb
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|setLocationUri
argument_list|(
name|mdb
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|db
return|;
block|}
specifier|public
name|boolean
name|dropDatabase
parameter_list|(
name|String
name|dbname
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dropping database "
operator|+
name|dbname
operator|+
literal|" along with all tables"
argument_list|)
expr_stmt|;
name|dbname
operator|=
name|dbname
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
comment|// first drop tables
for|for
control|(
name|String
name|tableName
range|:
name|getAllTables
argument_list|(
name|dbname
argument_list|)
control|)
block|{
name|dropTable
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// then drop the database
name|MDatabase
name|db
init|=
name|getMDatabase
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
comment|// Take the pattern and split it on the | to get all the composing
comment|// patterns
name|String
index|[]
name|subpatterns
init|=
name|pattern
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"select name from org.apache.hadoop.hive.metastore.model.MDatabase where ("
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|subpattern
range|:
name|subpatterns
control|)
block|{
name|subpattern
operator|=
literal|"(?i)"
operator|+
name|subpattern
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|query
operator|=
name|query
operator|+
literal|" || "
expr_stmt|;
block|}
name|query
operator|=
name|query
operator|+
literal|" name.matches(\""
operator|+
name|subpattern
operator|+
literal|"\")"
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|query
operator|=
name|query
operator|+
literal|")"
expr_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|q
operator|.
name|setResult
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setOrdering
argument_list|(
literal|"name ascending"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|databases
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|databases
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|databases
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|getDatabases
argument_list|(
literal|".*"
argument_list|)
return|;
block|}
specifier|private
name|MType
name|getMType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|MFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FieldSchema
name|field
range|:
name|type
operator|.
name|getFields
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|MFieldSchema
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MType
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|type
operator|.
name|getType1
argument_list|()
argument_list|,
name|type
operator|.
name|getType2
argument_list|()
argument_list|,
name|fields
argument_list|)
return|;
block|}
specifier|private
name|Type
name|getType
parameter_list|(
name|MType
name|mtype
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|mtype
operator|.
name|getFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MFieldSchema
name|field
range|:
name|mtype
operator|.
name|getFields
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Type
argument_list|(
name|mtype
operator|.
name|getName
argument_list|()
argument_list|,
name|mtype
operator|.
name|getType1
argument_list|()
argument_list|,
name|mtype
operator|.
name|getType2
argument_list|()
argument_list|,
name|fields
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|createType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|MType
name|mtype
init|=
name|getMType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mtype
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|Type
name|getType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|Type
name|type
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MType
operator|.
name|class
argument_list|,
literal|"name == typeName"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String typeName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MType
name|mtype
init|=
operator|(
name|MType
operator|)
name|query
operator|.
name|execute
argument_list|(
name|typeName
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|mtype
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|getType
argument_list|(
name|mtype
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|type
return|;
block|}
specifier|public
name|boolean
name|dropType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MType
operator|.
name|class
argument_list|,
literal|"name == typeName"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String typeName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MType
name|type
init|=
operator|(
name|MType
operator|)
name|query
operator|.
name|execute
argument_list|(
name|typeName
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|pm
operator|.
name|deletePersistent
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOObjectNotFoundException
name|e
parameter_list|)
block|{
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"type not found "
operator|+
name|typeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTable
name|mtbl
init|=
name|convertToMTable
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mtbl
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|dropTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTable
name|tbl
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|!=
literal|null
condition|)
block|{
comment|// first remove all the partitions
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|listMPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// then remove the table
name|pm
operator|.
name|deletePersistent
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|convertToTable
argument_list|(
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tbl
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tbls
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Take the pattern and split it on the | to get all the composing
comment|// patterns
name|String
index|[]
name|subpatterns
init|=
name|pattern
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"select tableName from org.apache.hadoop.hive.metastore.model.MTable "
operator|+
literal|"where database.name == dbName&& ("
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|subpattern
range|:
name|subpatterns
control|)
block|{
name|subpattern
operator|=
literal|"(?i)"
operator|+
name|subpattern
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|query
operator|=
name|query
operator|+
literal|" || "
expr_stmt|;
block|}
name|query
operator|=
name|query
operator|+
literal|" tableName.matches(\""
operator|+
name|subpattern
operator|+
literal|"\")"
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|query
operator|=
name|query
operator|+
literal|")"
expr_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|q
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String dbName"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setResult
argument_list|(
literal|"tableName"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setOrdering
argument_list|(
literal|"tableName ascending"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|q
operator|.
name|execute
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|tbls
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|tbls
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tbls
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getTables
argument_list|(
name|dbName
argument_list|,
literal|".*"
argument_list|)
return|;
block|}
specifier|private
name|MTable
name|getMTable
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|)
block|{
name|MTable
name|mtbl
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|db
operator|=
name|db
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|table
operator|=
name|table
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|,
literal|"tableName == table&& database.name == db"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String table, java.lang.String db"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mtbl
operator|=
operator|(
name|MTable
operator|)
name|query
operator|.
name|execute
argument_list|(
name|table
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mtbl
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mtbl
return|;
block|}
specifier|private
name|Table
name|convertToTable
parameter_list|(
name|MTable
name|mtbl
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mtbl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|tableType
init|=
name|mtbl
operator|.
name|getTableType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableType
operator|==
literal|null
condition|)
block|{
comment|// for backwards compatibility with old metastore persistence
if|if
condition|(
name|mtbl
operator|.
name|getViewOriginalText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"TRUE"
operator|.
name|equals
argument_list|(
name|mtbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tableType
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Table
argument_list|(
name|mtbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getOwner
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getRetention
argument_list|()
argument_list|,
name|convertToStorageDescriptor
argument_list|(
name|mtbl
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|mtbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getViewOriginalText
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getViewExpandedText
argument_list|()
argument_list|,
name|tableType
argument_list|)
return|;
block|}
specifier|private
name|MTable
name|convertToMTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mdb
operator|=
name|getMDatabase
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Database "
operator|+
name|tbl
operator|.
name|getDbName
argument_list|()
operator|+
literal|" doesn't exist."
argument_list|)
throw|;
block|}
comment|// If the table has property EXTERNAL set, update table type
comment|// accordingly
name|String
name|tableType
init|=
name|tbl
operator|.
name|getTableType
argument_list|()
decl_stmt|;
name|boolean
name|isExternal
init|=
literal|"TRUE"
operator|.
name|equals
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MTable
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|mdb
argument_list|,
name|convertToMStorageDescriptor
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|tbl
operator|.
name|getOwner
argument_list|()
argument_list|,
name|tbl
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|tbl
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|tbl
operator|.
name|getRetention
argument_list|()
argument_list|,
name|convertToMFieldSchemas
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tbl
operator|.
name|getViewOriginalText
argument_list|()
argument_list|,
name|tbl
operator|.
name|getViewExpandedText
argument_list|()
argument_list|,
name|tableType
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|convertToMFieldSchemas
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|keys
parameter_list|)
block|{
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|mkeys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
name|mkeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|MFieldSchema
argument_list|>
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|part
range|:
name|keys
control|)
block|{
name|mkeys
operator|.
name|add
argument_list|(
operator|new
name|MFieldSchema
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|part
operator|.
name|getType
argument_list|()
argument_list|,
name|part
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mkeys
return|;
block|}
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|convertToFieldSchemas
parameter_list|(
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|mkeys
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|keys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mkeys
operator|!=
literal|null
condition|)
block|{
name|keys
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|mkeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MFieldSchema
name|part
range|:
name|mkeys
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getType
argument_list|()
argument_list|,
name|part
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|keys
return|;
block|}
specifier|private
name|List
argument_list|<
name|MOrder
argument_list|>
name|convertToMOrders
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|keys
parameter_list|)
block|{
name|List
argument_list|<
name|MOrder
argument_list|>
name|mkeys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
name|mkeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|MOrder
argument_list|>
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Order
name|part
range|:
name|keys
control|)
block|{
name|mkeys
operator|.
name|add
argument_list|(
operator|new
name|MOrder
argument_list|(
name|part
operator|.
name|getCol
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|part
operator|.
name|getOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mkeys
return|;
block|}
specifier|private
name|List
argument_list|<
name|Order
argument_list|>
name|convertToOrders
parameter_list|(
name|List
argument_list|<
name|MOrder
argument_list|>
name|mkeys
parameter_list|)
block|{
name|List
argument_list|<
name|Order
argument_list|>
name|keys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mkeys
operator|!=
literal|null
condition|)
block|{
name|keys
operator|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|MOrder
name|part
range|:
name|mkeys
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
name|part
operator|.
name|getCol
argument_list|()
argument_list|,
name|part
operator|.
name|getOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|keys
return|;
block|}
specifier|private
name|SerDeInfo
name|converToSerDeInfo
parameter_list|(
name|MSerDeInfo
name|ms
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Invalid SerDeInfo object"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SerDeInfo
argument_list|(
name|ms
operator|.
name|getName
argument_list|()
argument_list|,
name|ms
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
name|ms
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|MSerDeInfo
name|converToMSerDeInfo
parameter_list|(
name|SerDeInfo
name|ms
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Invalid SerDeInfo object"
argument_list|)
throw|;
block|}
return|return
operator|new
name|MSerDeInfo
argument_list|(
name|ms
operator|.
name|getName
argument_list|()
argument_list|,
name|ms
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
name|ms
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
comment|// MSD and SD should be same objects. Not sure how to make then same right now
comment|// MSerdeInfo *& SerdeInfo should be same as well
specifier|private
name|StorageDescriptor
name|convertToStorageDescriptor
parameter_list|(
name|MStorageDescriptor
name|msd
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|msd
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|StorageDescriptor
argument_list|(
name|convertToFieldSchemas
argument_list|(
name|msd
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|,
name|msd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|msd
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|msd
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|msd
operator|.
name|isCompressed
argument_list|()
argument_list|,
name|msd
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
name|converToSerDeInfo
argument_list|(
name|msd
operator|.
name|getSerDeInfo
argument_list|()
argument_list|)
argument_list|,
name|msd
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|convertToOrders
argument_list|(
name|msd
operator|.
name|getSortCols
argument_list|()
argument_list|)
argument_list|,
name|msd
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|MStorageDescriptor
name|convertToMStorageDescriptor
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|sd
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MStorageDescriptor
argument_list|(
name|convertToMFieldSchemas
argument_list|(
name|sd
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|sd
operator|.
name|isCompressed
argument_list|()
argument_list|,
name|sd
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
name|converToMSerDeInfo
argument_list|(
name|sd
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
argument_list|,
name|sd
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|convertToMOrders
argument_list|(
name|sd
operator|.
name|getSortCols
argument_list|()
argument_list|)
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|addPartition
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MPartition
name|mpart
init|=
name|convertToMPart
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mpart
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Partition
name|part
init|=
name|convertToPart
argument_list|(
name|getMPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
argument_list|)
decl_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|()
throw|;
block|}
return|return
name|part
return|;
block|}
specifier|private
name|MPartition
name|getMPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
block|{
name|MPartition
name|mpart
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|MTable
name|mtbl
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtbl
operator|==
literal|null
condition|)
block|{
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Change the query to use part_vals instead of the name which is
comment|// redundant
name|String
name|name
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|,
literal|"table.tableName == t1&& table.database.name == t2&& partitionName == t3"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpart
operator|=
operator|(
name|MPartition
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mpart
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mpart
return|;
block|}
specifier|private
name|MPartition
name|convertToMPart
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MTable
name|mt
init|=
name|getMTable
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Partition doesn't have a valid table or database name"
argument_list|)
throw|;
block|}
return|return
operator|new
name|MPartition
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|convertToFieldSchemas
argument_list|(
name|mt
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|,
name|mt
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|part
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|part
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|convertToMStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Partition
name|convertToPart
parameter_list|(
name|MPartition
name|mpart
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mpart
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Partition
argument_list|(
name|mpart
operator|.
name|getValues
argument_list|()
argument_list|,
name|mpart
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mpart
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|mpart
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mpart
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|convertToStorageDescriptor
argument_list|(
name|mpart
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|mpart
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MPartition
name|part
init|=
name|getMPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|convertToParts
argument_list|(
name|listMPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|max
argument_list|)
argument_list|)
decl_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|parts
return|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|convertToParts
parameter_list|(
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|mparts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MPartition
name|mp
range|:
name|mparts
control|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|convertToPart
argument_list|(
name|mp
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
comment|// TODO:pc implement max
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing getPartitionNames"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select partitionName from org.apache.hadoop.hive.metastore.model.MPartition "
operator|+
literal|"where table.database.name == t1&& table.tableName == t2 "
operator|+
literal|"order by partitionName asc"
argument_list|)
decl_stmt|;
name|q
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setResult
argument_list|(
literal|"partitionName"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|q
operator|.
name|execute
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|pns
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|pns
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|pns
return|;
block|}
comment|// TODO:pc implement max
specifier|private
name|List
argument_list|<
name|MPartition
argument_list|>
name|listMPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMPartitions"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|,
literal|"table.tableName == t1&& table.database.name == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mparts
operator|=
operator|(
name|List
argument_list|<
name|MPartition
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMPartitions"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mparts
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMPartitions"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mparts
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|convertToParts
argument_list|(
name|listMPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|,
name|maxParts
argument_list|)
argument_list|)
decl_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|parts
return|;
block|}
specifier|private
name|String
name|makeQueryFilterString
parameter_list|(
name|MTable
name|mtable
parameter_list|,
name|String
name|filter
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|MetaException
block|{
name|StringBuilder
name|queryBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"table.tableName == t1&& table.database.name == t2"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Table
name|table
init|=
name|convertToTable
argument_list|(
name|mtable
argument_list|)
decl_stmt|;
name|CharStream
name|cs
init|=
operator|new
name|ANTLRNoCaseStringStream
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|FilterLexer
name|lexer
init|=
operator|new
name|FilterLexer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|CommonTokenStream
name|tokens
init|=
operator|new
name|CommonTokenStream
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|setTokenSource
argument_list|(
name|lexer
argument_list|)
expr_stmt|;
name|FilterParser
name|parser
init|=
operator|new
name|FilterParser
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|filter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Error parsing partition filter : "
operator|+
name|re
argument_list|)
throw|;
block|}
name|String
name|jdoFilter
init|=
name|parser
operator|.
name|tree
operator|.
name|generateJDOFilter
argument_list|(
name|table
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|jdoFilter
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|queryBuilder
operator|.
name|append
argument_list|(
literal|"&& ( "
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|append
argument_list|(
name|jdoFilter
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|append
argument_list|(
literal|" )"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|queryBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|makeParameterDeclarationString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
comment|//Create the parameter declaration string
name|StringBuilder
name|paramDecl
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|params
operator|.
name|keySet
argument_list|()
control|)
block|{
name|paramDecl
operator|.
name|append
argument_list|(
literal|", java.lang.String  "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|paramDecl
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|MPartition
argument_list|>
name|listMPartitionsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMPartitionsByFilter"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|MTable
name|mtable
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Specified database/table does not exist : "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|queryFilterString
init|=
name|makeQueryFilterString
argument_list|(
name|mtable
argument_list|,
name|filter
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|,
name|queryFilterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxParts
operator|>=
literal|0
condition|)
block|{
comment|//User specified a row limit, set it on the Query
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|maxParts
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Filter specified is "
operator|+
name|filter
operator|+
literal|","
operator|+
literal|" JDOQL filter is "
operator|+
name|queryFilterString
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t1"
argument_list|,
name|tableName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t2"
argument_list|,
name|dbName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|parameterDeclaration
init|=
name|makeParameterDeclarationString
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameterDeclaration
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName ascending"
argument_list|)
expr_stmt|;
name|mparts
operator|=
operator|(
name|List
argument_list|<
name|MPartition
argument_list|>
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMPartitionsByFilter"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mparts
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMPartitionsByFilter"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mparts
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMPartitionsByFilter"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|MTable
name|mtable
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtable
operator|==
literal|null
condition|)
block|{
comment|// To be consistent with the behavior of listPartitionNames, if the
comment|// table or db does not exist, we return an empty list
return|return
name|partNames
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|queryFilterString
init|=
name|makeQueryFilterString
argument_list|(
name|mtable
argument_list|,
name|filter
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select partitionName from org.apache.hadoop.hive.metastore.model.MPartition "
operator|+
literal|"where "
operator|+
name|queryFilterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxParts
operator|>=
literal|0
condition|)
block|{
comment|//User specified a row limit, set it on the Query
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|maxParts
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Filter specified is "
operator|+
name|filter
operator|+
literal|","
operator|+
literal|" JDOQL filter is "
operator|+
name|queryFilterString
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parms is "
operator|+
name|params
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t1"
argument_list|,
name|tableName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t2"
argument_list|,
name|dbName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|parameterDeclaration
init|=
name|makeParameterDeclarationString
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameterDeclaration
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName ascending"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"partitionName"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|partNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMPartitionNamesByFilter"
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMPartitionNamesByFilter"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|partNames
return|;
block|}
specifier|public
name|void
name|alterTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Table
name|newTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|dbname
operator|=
name|dbname
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|MTable
name|newt
init|=
name|convertToMTable
argument_list|(
name|newTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|newt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"new table is invalid"
argument_list|)
throw|;
block|}
name|MTable
name|oldt
init|=
name|getMTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"table "
operator|+
name|name
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
comment|// For now only alter name, owner, paramters, cols, bucketcols are allowed
name|oldt
operator|.
name|setTableName
argument_list|(
name|newt
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setParameters
argument_list|(
name|newt
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setOwner
argument_list|(
name|newt
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setSd
argument_list|(
name|newt
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setDatabase
argument_list|(
name|newt
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setRetention
argument_list|(
name|newt
operator|.
name|getRetention
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setPartitionKeys
argument_list|(
name|newt
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setTableType
argument_list|(
name|newt
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
comment|// commit the changes
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|alterPartition
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|dbname
operator|=
name|dbname
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|MPartition
name|oldp
init|=
name|getMPartition
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|newPart
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|MPartition
name|newp
init|=
name|convertToMPart
argument_list|(
name|newPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldp
operator|==
literal|null
operator|||
name|newp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"partition does not exist."
argument_list|)
throw|;
block|}
name|oldp
operator|.
name|setParameters
argument_list|(
name|newPart
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|copyMSD
argument_list|(
name|newp
operator|.
name|getSd
argument_list|()
argument_list|,
name|oldp
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|newp
operator|.
name|getCreateTime
argument_list|()
operator|!=
name|oldp
operator|.
name|getCreateTime
argument_list|()
condition|)
block|{
name|oldp
operator|.
name|setCreateTime
argument_list|(
name|newp
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newp
operator|.
name|getLastAccessTime
argument_list|()
operator|!=
name|oldp
operator|.
name|getLastAccessTime
argument_list|()
condition|)
block|{
name|oldp
operator|.
name|setLastAccessTime
argument_list|(
name|newp
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// commit the changes
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|copyMSD
parameter_list|(
name|MStorageDescriptor
name|newSd
parameter_list|,
name|MStorageDescriptor
name|oldSd
parameter_list|)
block|{
name|oldSd
operator|.
name|setLocation
argument_list|(
name|newSd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setCols
argument_list|(
name|newSd
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setBucketCols
argument_list|(
name|newSd
operator|.
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setCompressed
argument_list|(
name|newSd
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setInputFormat
argument_list|(
name|newSd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setOutputFormat
argument_list|(
name|newSd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setNumBuckets
argument_list|(
name|newSd
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|newSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|newSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
name|newSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addIndex
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MIndex
name|idx
init|=
name|convertToMIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
name|MIndex
name|convertToMIndex
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|StorageDescriptor
name|sd
init|=
name|index
operator|.
name|getSd
argument_list|()
decl_stmt|;
if|if
condition|(
name|sd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Storage descriptor is not defined for index."
argument_list|)
throw|;
block|}
name|MStorageDescriptor
name|msd
init|=
name|this
operator|.
name|convertToMStorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|MTable
name|origTable
init|=
name|getMTable
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|origTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Original table does not exist for the given index."
argument_list|)
throw|;
block|}
name|MTable
name|indexTable
init|=
name|getMTable
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getIndexTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Underlying index table does not exist for the given index."
argument_list|)
throw|;
block|}
return|return
operator|new
name|MIndex
argument_list|(
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|origTable
argument_list|,
name|index
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|index
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|index
operator|.
name|getParameters
argument_list|()
argument_list|,
name|indexTable
argument_list|,
name|msd
argument_list|,
name|index
operator|.
name|getIndexHandlerClass
argument_list|()
argument_list|,
name|index
operator|.
name|isDeferredRebuild
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MIndex
name|index
init|=
name|getMIndex
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|private
name|MIndex
name|getMIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|originalTblName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
name|MIndex
name|midx
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|originalTblName
operator|=
name|originalTblName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|MTable
name|mtbl
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|originalTblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtbl
operator|==
literal|null
condition|)
block|{
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MIndex
operator|.
name|class
argument_list|,
literal|"origTable.tableName == t1&& origTable.database.name == t2&& indexName == t3"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|midx
operator|=
operator|(
name|MIndex
operator|)
name|query
operator|.
name|execute
argument_list|(
name|originalTblName
argument_list|,
name|dbName
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|midx
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|midx
return|;
block|}
annotation|@
name|Override
specifier|public
name|Index
name|getIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MIndex
name|mIndex
init|=
name|this
operator|.
name|getMIndex
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
name|Index
name|ret
init|=
name|convertToIndex
argument_list|(
name|mIndex
argument_list|)
decl_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|Index
name|convertToIndex
parameter_list|(
name|MIndex
name|mIndex
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mIndex
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Index
argument_list|(
name|mIndex
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getIndexHandlerClass
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getOrigTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getOrigTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getIndexTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|this
operator|.
name|convertToStorageDescriptor
argument_list|(
name|mIndex
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|mIndex
operator|.
name|getParameters
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getDeferredRebuild
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|getIndexes
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MIndex
argument_list|>
name|mIndexList
init|=
name|listMIndexes
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<
name|Index
argument_list|>
argument_list|(
name|mIndexList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MIndex
name|midx
range|:
name|mIndexList
control|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|this
operator|.
name|convertToIndex
argument_list|(
name|midx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|indexes
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|MIndex
argument_list|>
name|listMIndexes
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MIndex
argument_list|>
name|mindexes
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMIndexes"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|origTableName
operator|=
name|origTableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MIndex
operator|.
name|class
argument_list|,
literal|"origTable.tableName == t1&& origTable.database.name == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mindexes
operator|=
operator|(
name|List
argument_list|<
name|MIndex
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|origTableName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMIndexes"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mindexes
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMIndexes"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mindexes
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listIndexNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listIndexNames"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|origTableName
operator|=
name|origTableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select indexName from org.apache.hadoop.hive.metastore.model.MIndex "
operator|+
literal|"where origTable.database.name == t1&& origTable.tableName == t2 "
operator|+
literal|"order by indexName asc"
argument_list|)
decl_stmt|;
name|q
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setResult
argument_list|(
literal|"indexName"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|q
operator|.
name|execute
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|)
decl_stmt|;
name|pns
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|pns
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|pns
return|;
block|}
block|}
end_class

end_unit

