begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDODataStoreException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOHelper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOObjectNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|PersistenceManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|datastore
operator|.
name|DataStoreCache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|identity
operator|.
name|IntIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|CharStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|CommonTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BinaryColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DoubleColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MDBPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MDelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MFieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MGlobalPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MMasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartitionColumnPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartitionColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartitionPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MRoleMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MSerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MStorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MStringList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTableColumnPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTableColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTablePrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MVersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|ANTLRNoCaseStringStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|FilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|LeafNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|TreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|TreeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|FilterLexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|FilterParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datanucleus
operator|.
name|store
operator|.
name|rdbms
operator|.
name|exceptions
operator|.
name|MissingTableException
import|;
end_import

begin_comment
comment|/**  * This class is the interface between the application logic and the database  * store that contains the objects. Refrain putting any logic in mode.M* objects  * or in this file as former could be auto generated and this class would need  * to be made into a interface that can read both from a database and a  * filestore.  */
end_comment

begin_class
specifier|public
class|class
name|ObjectStore
implements|implements
name|RawStore
implements|,
name|Configurable
block|{
specifier|private
specifier|static
name|Properties
name|prop
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|PersistenceManagerFactory
name|pmf
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Lock
name|pmfPropLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ObjectStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|TXN_STATUS
block|{
name|NO_STATE
block|,
name|OPEN
block|,
name|COMMITED
block|,
name|ROLLBACK
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|PINCLASSMAP
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|MTable
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"storagedescriptor"
argument_list|,
name|MStorageDescriptor
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"serdeinfo"
argument_list|,
name|MSerDeInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"partition"
argument_list|,
name|MPartition
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|MDatabase
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|MType
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"fieldschema"
argument_list|,
name|MFieldSchema
operator|.
name|class
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"order"
argument_list|,
name|MOrder
operator|.
name|class
argument_list|)
expr_stmt|;
name|PINCLASSMAP
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isInitialized
init|=
literal|false
decl_stmt|;
specifier|private
name|PersistenceManager
name|pm
init|=
literal|null
decl_stmt|;
specifier|private
name|MetaStoreDirectSql
name|directSql
init|=
literal|null
decl_stmt|;
specifier|private
name|PartitionExpressionProxy
name|expressionProxy
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|hiveConf
decl_stmt|;
name|int
name|openTrasactionCalls
init|=
literal|0
decl_stmt|;
specifier|private
name|Transaction
name|currentTransaction
init|=
literal|null
decl_stmt|;
specifier|private
name|TXN_STATUS
name|transactionStatus
init|=
name|TXN_STATUS
operator|.
name|NO_STATE
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isSchemaVerified
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|ObjectStore
parameter_list|()
block|{   }
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|hiveConf
return|;
block|}
comment|/**    * Called whenever this object is instantiated using ReflectionUils, and also    * on connection retries. In cases of connection retries, conf will usually    * contain modified values.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Although an instance of ObjectStore is accessed by one thread, there may
comment|// be many threads with ObjectStore instances. So the static variables
comment|// pmf and prop need to be protected with locks.
name|pmfPropLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|isInitialized
operator|=
literal|false
expr_stmt|;
name|hiveConf
operator|=
name|conf
expr_stmt|;
name|Properties
name|propsFromConf
init|=
name|getDataSourceProps
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|boolean
name|propsChanged
init|=
operator|!
name|propsFromConf
operator|.
name|equals
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|propsChanged
condition|)
block|{
name|pmf
operator|=
literal|null
expr_stmt|;
name|prop
operator|=
literal|null
expr_stmt|;
block|}
assert|assert
operator|(
operator|!
name|isActiveTransaction
argument_list|()
operator|)
assert|;
name|shutdown
argument_list|()
expr_stmt|;
comment|// Always want to re-create pm as we don't know if it were created by the
comment|// most recent instance of the pmf
name|pm
operator|=
literal|null
expr_stmt|;
name|directSql
operator|=
literal|null
expr_stmt|;
name|expressionProxy
operator|=
literal|null
expr_stmt|;
name|openTrasactionCalls
operator|=
literal|0
expr_stmt|;
name|currentTransaction
operator|=
literal|null
expr_stmt|;
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|NO_STATE
expr_stmt|;
name|initialize
argument_list|(
name|propsFromConf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isInitialized
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to create persistence manager. Check dss.log for details"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized ObjectStore"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pmfPropLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
block|{
name|classLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
name|classLoader
operator|=
name|ObjectStore
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
name|void
name|initialize
parameter_list|(
name|Properties
name|dsProps
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ObjectStore, initialize called"
argument_list|)
expr_stmt|;
name|prop
operator|=
name|dsProps
expr_stmt|;
name|pm
operator|=
name|getPersistenceManager
argument_list|()
expr_stmt|;
name|isInitialized
operator|=
name|pm
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|isInitialized
condition|)
block|{
name|expressionProxy
operator|=
name|createExpressionProxy
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|directSql
operator|=
operator|new
name|MetaStoreDirectSql
argument_list|(
name|pm
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates the proxy used to evaluate expressions. This is here to prevent circular    * dependency - ql -&gt; metastore client&lt;-&gt metastore server -&gt ql. If server and    * client are split, this can be removed.    * @param conf Configuration.    * @return The partition expression proxy.    */
specifier|private
specifier|static
name|PartitionExpressionProxy
name|createExpressionProxy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|className
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_EXPRESSION_PROXY_CLASS
argument_list|)
decl_stmt|;
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|PartitionExpressionProxy
argument_list|>
name|clazz
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|PartitionExpressionProxy
argument_list|>
operator|)
name|MetaStoreUtils
operator|.
name|getClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
return|return
operator|(
name|PartitionExpressionProxy
operator|)
name|MetaStoreUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
literal|0
index|]
operator|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error loading PartitionExpressionProxy"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error loading PartitionExpressionProxy: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Properties specified in hive-default.xml override the properties specified    * in jpox.properties.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
specifier|static
name|Properties
name|getDataSourceProps
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iter
init|=
name|conf
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|"datanucleus"
argument_list|)
operator|||
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jdo"
argument_list|)
condition|)
block|{
name|Object
name|prevVal
init|=
name|prop
operator|.
name|setProperty
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
operator|!
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREPWD
operator|.
name|varname
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Overriding "
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|" value "
operator|+
name|prevVal
operator|+
literal|" from  jpox.properties with "
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|prop
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREPWD
operator|.
name|varname
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|" = "
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|prop
return|;
block|}
specifier|private
specifier|static
specifier|synchronized
name|PersistenceManagerFactory
name|getPMF
parameter_list|()
block|{
if|if
condition|(
name|pmf
operator|==
literal|null
condition|)
block|{
name|pmf
operator|=
name|JDOHelper
operator|.
name|getPersistenceManagerFactory
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|DataStoreCache
name|dsc
init|=
name|pmf
operator|.
name|getDataStoreCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|dsc
operator|!=
literal|null
condition|)
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|ObjectStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|objTypes
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_CACHE_PINOBJTYPES
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting MetaStore object pin classes with hive.metastore.cache.pinobjtypes=\""
operator|+
name|objTypes
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|objTypes
operator|!=
literal|null
operator|&&
name|objTypes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|objTypes
operator|=
name|objTypes
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|String
index|[]
name|typeTokens
init|=
name|objTypes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|typeTokens
control|)
block|{
name|type
operator|=
name|type
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|PINCLASSMAP
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|dsc
operator|.
name|pinAll
argument_list|(
literal|true
argument_list|,
name|PINCLASSMAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|type
operator|+
literal|" is not one of the pinnable object types: "
operator|+
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
argument_list|(
name|PINCLASSMAP
operator|.
name|keySet
argument_list|()
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"PersistenceManagerFactory returned null DataStoreCache object. Unable to initialize object pin types defined by hive.metastore.cache.pinobjtypes"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pmf
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCATALOG"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
name|PersistenceManager
name|getPersistenceManager
parameter_list|()
block|{
return|return
name|getPMF
argument_list|()
operator|.
name|getPersistenceManager
argument_list|()
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|pm
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Opens a new one or the one already created Every call of this function must    * have corresponding commit or rollback function call    *    * @return an active transaction    */
specifier|public
name|boolean
name|openTransaction
parameter_list|()
block|{
name|openTrasactionCalls
operator|++
expr_stmt|;
if|if
condition|(
name|openTrasactionCalls
operator|==
literal|1
condition|)
block|{
name|currentTransaction
operator|=
name|pm
operator|.
name|currentTransaction
argument_list|()
expr_stmt|;
name|currentTransaction
operator|.
name|begin
argument_list|()
expr_stmt|;
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|OPEN
expr_stmt|;
block|}
else|else
block|{
comment|// something is wrong since openTransactionCalls is greater than 1 but
comment|// currentTransaction is not active
assert|assert
operator|(
operator|(
name|currentTransaction
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|currentTransaction
operator|.
name|isActive
argument_list|()
operator|)
operator|)
assert|;
block|}
return|return
name|currentTransaction
operator|.
name|isActive
argument_list|()
return|;
block|}
comment|/**    * if this is the commit of the first open call then an actual commit is    * called.    *    * @return Always returns true    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
block|{
if|if
condition|(
name|TXN_STATUS
operator|.
name|ROLLBACK
operator|==
name|transactionStatus
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|openTrasactionCalls
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"commitTransaction was called but openTransactionCalls = "
operator|+
name|openTrasactionCalls
operator|+
literal|". This probably indicates that there are unbalanced "
operator|+
literal|"calls to openTransaction/commitTransaction"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|currentTransaction
operator|.
name|isActive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Commit is called, but transaction is not active. Either there are"
operator|+
literal|" mismatching open and close calls or rollback was called in the same trasaction"
argument_list|)
throw|;
block|}
name|openTrasactionCalls
operator|--
expr_stmt|;
if|if
condition|(
operator|(
name|openTrasactionCalls
operator|==
literal|0
operator|)
operator|&&
name|currentTransaction
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|COMMITED
expr_stmt|;
name|currentTransaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @return true if there is an active transaction. If the current transaction    *         is either committed or rolled back it returns false    */
specifier|public
name|boolean
name|isActiveTransaction
parameter_list|()
block|{
if|if
condition|(
name|currentTransaction
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|currentTransaction
operator|.
name|isActive
argument_list|()
return|;
block|}
comment|/**    * Rolls back the current transaction if it is active    */
specifier|public
name|void
name|rollbackTransaction
parameter_list|()
block|{
if|if
condition|(
name|openTrasactionCalls
operator|<
literal|1
condition|)
block|{
return|return;
block|}
name|openTrasactionCalls
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|currentTransaction
operator|.
name|isActive
argument_list|()
operator|&&
name|transactionStatus
operator|!=
name|TXN_STATUS
operator|.
name|ROLLBACK
condition|)
block|{
name|transactionStatus
operator|=
name|TXN_STATUS
operator|.
name|ROLLBACK
expr_stmt|;
comment|// could already be rolled back
name|currentTransaction
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// remove all detached objects from the cache, since the transaction is
comment|// being rolled back they are no longer relevant, and this prevents them
comment|// from reattaching in future transactions
name|pm
operator|.
name|evictAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|MDatabase
name|mdb
init|=
operator|new
name|MDatabase
argument_list|()
decl_stmt|;
name|mdb
operator|.
name|setName
argument_list|(
name|db
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|mdb
operator|.
name|setLocationUri
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|mdb
operator|.
name|setDescription
argument_list|(
name|db
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|mdb
operator|.
name|setParameters
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mdb
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|private
name|MDatabase
name|getMDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDatabase
operator|.
name|class
argument_list|,
literal|"name == dbname"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String dbname"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mdb
operator|=
operator|(
name|MDatabase
operator|)
name|query
operator|.
name|execute
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mdb
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mdb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"There is no database named "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|mdb
return|;
block|}
specifier|public
name|Database
name|getDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|mdb
operator|=
name|getMDatabase
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|mdb
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|setDescription
argument_list|(
name|mdb
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|setLocationUri
argument_list|(
name|mdb
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|setParameters
argument_list|(
name|mdb
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|db
return|;
block|}
comment|/**    * Alter the database object in metastore. Currently only the parameters    * of the database can be changed.    * @param dbName the database name    * @param db the Hive Database object    * @throws MetaException    * @throws NoSuchObjectException    */
specifier|public
name|boolean
name|alterDatabase
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|mdb
operator|=
name|getMDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
comment|// currently only allow changing database parameters
name|mdb
operator|.
name|setParameters
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mdb
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|dropDatabase
parameter_list|(
name|String
name|dbname
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Dropping database "
operator|+
name|dbname
operator|+
literal|" along with all tables"
argument_list|)
expr_stmt|;
name|dbname
operator|=
name|dbname
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
comment|// then drop the database
name|MDatabase
name|db
init|=
name|getMDatabase
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|dbGrants
init|=
name|this
operator|.
name|listDatabaseGrants
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbGrants
operator|!=
literal|null
operator|&&
name|dbGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|dbGrants
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|deletePersistent
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
comment|// Take the pattern and split it on the | to get all the composing
comment|// patterns
name|String
index|[]
name|subpatterns
init|=
name|pattern
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"select name from org.apache.hadoop.hive.metastore.model.MDatabase where ("
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|subpattern
range|:
name|subpatterns
control|)
block|{
name|subpattern
operator|=
literal|"(?i)"
operator|+
name|subpattern
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|query
operator|=
name|query
operator|+
literal|" || "
expr_stmt|;
block|}
name|query
operator|=
name|query
operator|+
literal|" name.matches(\""
operator|+
name|subpattern
operator|+
literal|"\")"
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|query
operator|=
name|query
operator|+
literal|")"
expr_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|q
operator|.
name|setResult
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setOrdering
argument_list|(
literal|"name ascending"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
name|databases
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|databases
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|databases
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|getDatabases
argument_list|(
literal|".*"
argument_list|)
return|;
block|}
specifier|private
name|MType
name|getMType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|MFieldSchema
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FieldSchema
name|field
range|:
name|type
operator|.
name|getFields
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|MFieldSchema
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MType
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|type
operator|.
name|getType1
argument_list|()
argument_list|,
name|type
operator|.
name|getType2
argument_list|()
argument_list|,
name|fields
argument_list|)
return|;
block|}
specifier|private
name|Type
name|getType
parameter_list|(
name|MType
name|mtype
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|mtype
operator|.
name|getFields
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MFieldSchema
name|field
range|:
name|mtype
operator|.
name|getFields
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|,
name|field
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Type
name|ret
init|=
operator|new
name|Type
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|mtype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setType1
argument_list|(
name|mtype
operator|.
name|getType1
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setType2
argument_list|(
name|mtype
operator|.
name|getType2
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setFields
argument_list|(
name|fields
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|createType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|MType
name|mtype
init|=
name|getMType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mtype
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|Type
name|getType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|Type
name|type
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MType
operator|.
name|class
argument_list|,
literal|"name == typeName"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String typeName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MType
name|mtype
init|=
operator|(
name|MType
operator|)
name|query
operator|.
name|execute
argument_list|(
name|typeName
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|mtype
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|getType
argument_list|(
name|mtype
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|type
return|;
block|}
specifier|public
name|boolean
name|dropType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MType
operator|.
name|class
argument_list|,
literal|"name == typeName"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String typeName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MType
name|type
init|=
operator|(
name|MType
operator|)
name|query
operator|.
name|execute
argument_list|(
name|typeName
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOObjectNotFoundException
name|e
parameter_list|)
block|{
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"type not found "
operator|+
name|typeName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTable
name|mtbl
init|=
name|convertToMTable
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mtbl
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|principalPrivs
init|=
name|tbl
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|toPersistPrivObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|principalPrivs
operator|!=
literal|null
condition|)
block|{
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|userPrivs
init|=
name|principalPrivs
operator|.
name|getUserPrivileges
argument_list|()
decl_stmt|;
name|putPersistentPrivObjects
argument_list|(
name|mtbl
argument_list|,
name|toPersistPrivObjs
argument_list|,
name|now
argument_list|,
name|userPrivs
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|groupPrivs
init|=
name|principalPrivs
operator|.
name|getGroupPrivileges
argument_list|()
decl_stmt|;
name|putPersistentPrivObjects
argument_list|(
name|mtbl
argument_list|,
name|toPersistPrivObjs
argument_list|,
name|now
argument_list|,
name|groupPrivs
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|rolePrivs
init|=
name|principalPrivs
operator|.
name|getRolePrivileges
argument_list|()
decl_stmt|;
name|putPersistentPrivObjects
argument_list|(
name|mtbl
argument_list|,
name|toPersistPrivObjs
argument_list|,
name|now
argument_list|,
name|rolePrivs
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|toPersistPrivObjs
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Convert PrivilegeGrantInfo from privMap to MTablePrivilege, and add all of    * them to the toPersistPrivObjs. These privilege objects will be persisted as    * part of createTable.    *    * @param mtbl    * @param toPersistPrivObjs    * @param now    * @param privMap    * @param type    */
specifier|private
name|void
name|putPersistentPrivObjects
parameter_list|(
name|MTable
name|mtbl
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|toPersistPrivObjs
parameter_list|,
name|int
name|now
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|privMap
parameter_list|,
name|PrincipalType
name|type
parameter_list|)
block|{
if|if
condition|(
name|privMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|entry
range|:
name|privMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|principalName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|privs
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|privs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PrivilegeGrantInfo
name|priv
init|=
name|privs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|priv
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|MTablePrivilege
name|mTblSec
init|=
operator|new
name|MTablePrivilege
argument_list|(
name|principalName
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|mtbl
argument_list|,
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|now
argument_list|,
name|priv
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|priv
operator|.
name|getGrantorType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|priv
operator|.
name|isGrantOption
argument_list|()
argument_list|)
decl_stmt|;
name|toPersistPrivObjs
operator|.
name|add
argument_list|(
name|mTblSec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|dropTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTable
name|tbl
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|!=
literal|null
condition|)
block|{
comment|// first remove all the grants
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tabGrants
init|=
name|listAllTableGrants
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabGrants
operator|!=
literal|null
operator|&&
name|tabGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tabGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|tblColGrants
init|=
name|listTableAllColumnGrants
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblColGrants
operator|!=
literal|null
operator|&&
name|tblColGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tblColGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|partGrants
init|=
name|this
operator|.
name|listTableAllPartitionGrants
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|partGrants
operator|!=
literal|null
operator|&&
name|partGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|partColGrants
init|=
name|listTableAllPartitionColumnGrants
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|partColGrants
operator|!=
literal|null
operator|&&
name|partColGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partColGrants
argument_list|)
expr_stmt|;
block|}
comment|// delete column statistics if present
try|try
block|{
name|deleteTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found no table level column statistics associated with db "
operator|+
name|dbName
operator|+
literal|" table "
operator|+
name|tableName
operator|+
literal|" record to delete"
argument_list|)
expr_stmt|;
block|}
name|preDropStorageDescriptor
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
comment|// then remove the table
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|convertToTable
argument_list|(
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tbl
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tbls
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Take the pattern and split it on the | to get all the composing
comment|// patterns
name|String
index|[]
name|subpatterns
init|=
name|pattern
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"select tableName from org.apache.hadoop.hive.metastore.model.MTable "
operator|+
literal|"where database.name == dbName&& ("
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|subpattern
range|:
name|subpatterns
control|)
block|{
name|subpattern
operator|=
literal|"(?i)"
operator|+
name|subpattern
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|query
operator|=
name|query
operator|+
literal|" || "
expr_stmt|;
block|}
name|query
operator|=
name|query
operator|+
literal|" tableName.matches(\""
operator|+
name|subpattern
operator|+
literal|"\")"
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|query
operator|=
name|query
operator|+
literal|")"
expr_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|q
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String dbName"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setResult
argument_list|(
literal|"tableName"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setOrdering
argument_list|(
literal|"tableName ascending"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|q
operator|.
name|execute
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|tbls
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|tbls
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tbls
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getTables
argument_list|(
name|dbName
argument_list|,
literal|".*"
argument_list|)
return|;
block|}
specifier|private
name|MTable
name|getMTable
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|)
block|{
name|MTable
name|mtbl
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|db
operator|=
name|db
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|table
operator|=
name|table
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|,
literal|"tableName == table&& database.name == db"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String table, java.lang.String db"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mtbl
operator|=
operator|(
name|MTable
operator|)
name|query
operator|.
name|execute
argument_list|(
name|table
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mtbl
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mtbl
return|;
block|}
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|db
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tbl_names
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<
name|Table
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|db
operator|=
name|db
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|dbExistsQuery
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDatabase
operator|.
name|class
argument_list|,
literal|"name == db"
argument_list|)
decl_stmt|;
name|dbExistsQuery
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String db"
argument_list|)
expr_stmt|;
name|dbExistsQuery
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbExistsQuery
operator|.
name|setResult
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|String
name|dbNameIfExists
init|=
operator|(
name|String
operator|)
name|dbExistsQuery
operator|.
name|execute
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbNameIfExists
operator|==
literal|null
operator|||
name|dbNameIfExists
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnknownDBException
argument_list|(
literal|"Could not find database "
operator|+
name|db
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|lowered_tbl_names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tbl_names
control|)
block|{
name|lowered_tbl_names
operator|.
name|add
argument_list|(
name|t
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFilter
argument_list|(
literal|"database.name == db&& tbl_names.contains(tableName)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String db, java.util.Collection tbl_names"
argument_list|)
expr_stmt|;
name|Collection
name|mtables
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|execute
argument_list|(
name|db
argument_list|,
name|lowered_tbl_names
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|mtables
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|convertToTable
argument_list|(
operator|(
name|MTable
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tables
return|;
block|}
specifier|private
name|Table
name|convertToTable
parameter_list|(
name|MTable
name|mtbl
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mtbl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|tableType
init|=
name|mtbl
operator|.
name|getTableType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableType
operator|==
literal|null
condition|)
block|{
comment|// for backwards compatibility with old metastore persistence
if|if
condition|(
name|mtbl
operator|.
name|getViewOriginalText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"TRUE"
operator|.
name|equals
argument_list|(
name|mtbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tableType
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Table
argument_list|(
name|mtbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getOwner
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getRetention
argument_list|()
argument_list|,
name|convertToStorageDescriptor
argument_list|(
name|mtbl
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|mtbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getViewOriginalText
argument_list|()
argument_list|,
name|mtbl
operator|.
name|getViewExpandedText
argument_list|()
argument_list|,
name|tableType
argument_list|)
return|;
block|}
specifier|private
name|MTable
name|convertToMTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MDatabase
name|mdb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mdb
operator|=
name|getMDatabase
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Database "
operator|+
name|tbl
operator|.
name|getDbName
argument_list|()
operator|+
literal|" doesn't exist."
argument_list|)
throw|;
block|}
comment|// If the table has property EXTERNAL set, update table type
comment|// accordingly
name|String
name|tableType
init|=
name|tbl
operator|.
name|getTableType
argument_list|()
decl_stmt|;
name|boolean
name|isExternal
init|=
literal|"TRUE"
operator|.
name|equals
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
comment|// A new table is always created with a new column descriptor
return|return
operator|new
name|MTable
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|mdb
argument_list|,
name|convertToMStorageDescriptor
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|tbl
operator|.
name|getOwner
argument_list|()
argument_list|,
name|tbl
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|tbl
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|tbl
operator|.
name|getRetention
argument_list|()
argument_list|,
name|convertToMFieldSchemas
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tbl
operator|.
name|getViewOriginalText
argument_list|()
argument_list|,
name|tbl
operator|.
name|getViewExpandedText
argument_list|()
argument_list|,
name|tableType
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|convertToMFieldSchemas
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|keys
parameter_list|)
block|{
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|mkeys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
name|mkeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|MFieldSchema
argument_list|>
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|part
range|:
name|keys
control|)
block|{
name|mkeys
operator|.
name|add
argument_list|(
operator|new
name|MFieldSchema
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|part
operator|.
name|getType
argument_list|()
argument_list|,
name|part
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mkeys
return|;
block|}
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|convertToFieldSchemas
parameter_list|(
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|mkeys
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|keys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mkeys
operator|!=
literal|null
condition|)
block|{
name|keys
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|mkeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MFieldSchema
name|part
range|:
name|mkeys
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getType
argument_list|()
argument_list|,
name|part
operator|.
name|getComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|keys
return|;
block|}
specifier|private
name|List
argument_list|<
name|MOrder
argument_list|>
name|convertToMOrders
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|keys
parameter_list|)
block|{
name|List
argument_list|<
name|MOrder
argument_list|>
name|mkeys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
name|mkeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|MOrder
argument_list|>
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Order
name|part
range|:
name|keys
control|)
block|{
name|mkeys
operator|.
name|add
argument_list|(
operator|new
name|MOrder
argument_list|(
name|part
operator|.
name|getCol
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|part
operator|.
name|getOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mkeys
return|;
block|}
specifier|private
name|List
argument_list|<
name|Order
argument_list|>
name|convertToOrders
parameter_list|(
name|List
argument_list|<
name|MOrder
argument_list|>
name|mkeys
parameter_list|)
block|{
name|List
argument_list|<
name|Order
argument_list|>
name|keys
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mkeys
operator|!=
literal|null
condition|)
block|{
name|keys
operator|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|(
name|mkeys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MOrder
name|part
range|:
name|mkeys
control|)
block|{
name|keys
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
name|part
operator|.
name|getCol
argument_list|()
argument_list|,
name|part
operator|.
name|getOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|keys
return|;
block|}
specifier|private
name|SerDeInfo
name|converToSerDeInfo
parameter_list|(
name|MSerDeInfo
name|ms
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Invalid SerDeInfo object"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SerDeInfo
argument_list|(
name|ms
operator|.
name|getName
argument_list|()
argument_list|,
name|ms
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
name|ms
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|MSerDeInfo
name|converToMSerDeInfo
parameter_list|(
name|SerDeInfo
name|ms
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Invalid SerDeInfo object"
argument_list|)
throw|;
block|}
return|return
operator|new
name|MSerDeInfo
argument_list|(
name|ms
operator|.
name|getName
argument_list|()
argument_list|,
name|ms
operator|.
name|getSerializationLib
argument_list|()
argument_list|,
name|ms
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Given a list of model field schemas, create a new model column descriptor.    * @param cols the columns the column descriptor contains    * @return a new column descriptor db-backed object    */
specifier|private
name|MColumnDescriptor
name|createNewMColumnDescriptor
parameter_list|(
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
if|if
condition|(
name|cols
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MColumnDescriptor
argument_list|(
name|cols
argument_list|)
return|;
block|}
comment|// MSD and SD should be same objects. Not sure how to make then same right now
comment|// MSerdeInfo *& SerdeInfo should be same as well
specifier|private
name|StorageDescriptor
name|convertToStorageDescriptor
parameter_list|(
name|MStorageDescriptor
name|msd
parameter_list|,
name|boolean
name|noFS
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|msd
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|mFieldSchemas
init|=
name|msd
operator|.
name|getCD
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|msd
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|noFS
condition|?
literal|null
else|:
name|convertToFieldSchemas
argument_list|(
name|mFieldSchemas
argument_list|)
argument_list|,
name|msd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|msd
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|msd
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|msd
operator|.
name|isCompressed
argument_list|()
argument_list|,
name|msd
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
name|converToSerDeInfo
argument_list|(
name|msd
operator|.
name|getSerDeInfo
argument_list|()
argument_list|)
argument_list|,
name|msd
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|convertToOrders
argument_list|(
name|msd
operator|.
name|getSortCols
argument_list|()
argument_list|)
argument_list|,
name|msd
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|SkewedInfo
name|skewedInfo
init|=
operator|new
name|SkewedInfo
argument_list|(
name|msd
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
name|convertToSkewedValues
argument_list|(
name|msd
operator|.
name|getSkewedColValues
argument_list|()
argument_list|)
argument_list|,
name|covertToSkewedMap
argument_list|(
name|msd
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setSkewedInfo
argument_list|(
name|skewedInfo
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|msd
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sd
return|;
block|}
specifier|private
name|StorageDescriptor
name|convertToStorageDescriptor
parameter_list|(
name|MStorageDescriptor
name|msd
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|convertToStorageDescriptor
argument_list|(
name|msd
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Convert a list of MStringList to a list of list string    *    * @param mLists    * @return    */
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|convertToSkewedValues
parameter_list|(
name|List
argument_list|<
name|MStringList
argument_list|>
name|mLists
parameter_list|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|lists
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mLists
operator|!=
literal|null
condition|)
block|{
name|lists
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|mLists
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MStringList
name|element
range|:
name|mLists
control|)
block|{
name|lists
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|element
operator|.
name|getInternalList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lists
return|;
block|}
specifier|private
name|List
argument_list|<
name|MStringList
argument_list|>
name|convertToMStringLists
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mLists
parameter_list|)
block|{
name|List
argument_list|<
name|MStringList
argument_list|>
name|lists
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|mLists
condition|)
block|{
name|lists
operator|=
operator|new
name|ArrayList
argument_list|<
name|MStringList
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|mList
range|:
name|mLists
control|)
block|{
name|lists
operator|.
name|add
argument_list|(
operator|new
name|MStringList
argument_list|(
name|mList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lists
return|;
block|}
comment|/**    * Convert a MStringList Map to a Map    * @param mMap    * @return    */
specifier|private
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|covertToSkewedMap
parameter_list|(
name|Map
argument_list|<
name|MStringList
argument_list|,
name|String
argument_list|>
name|mMap
parameter_list|)
block|{
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mMap
operator|!=
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|(
name|mMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|MStringList
argument_list|>
name|keys
init|=
name|mMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|MStringList
name|key
range|:
name|keys
control|)
block|{
name|map
operator|.
name|put
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|key
operator|.
name|getInternalList
argument_list|()
argument_list|)
argument_list|,
name|mMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|/**    * Covert a Map to a MStringList Map    * @param mMap    * @return    */
specifier|private
name|Map
argument_list|<
name|MStringList
argument_list|,
name|String
argument_list|>
name|covertToMapMStringList
parameter_list|(
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|mMap
parameter_list|)
block|{
name|Map
argument_list|<
name|MStringList
argument_list|,
name|String
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mMap
operator|!=
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|MStringList
argument_list|,
name|String
argument_list|>
argument_list|(
name|mMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|keys
init|=
name|mMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|key
range|:
name|keys
control|)
block|{
name|map
operator|.
name|put
argument_list|(
operator|new
name|MStringList
argument_list|(
name|key
argument_list|)
argument_list|,
name|mMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|/**    * Converts a storage descriptor to a db-backed storage descriptor.  Creates a    *   new db-backed column descriptor object for this SD.    * @param sd the storage descriptor to wrap in a db-backed object    * @return the storage descriptor db-backed object    * @throws MetaException    */
specifier|private
name|MStorageDescriptor
name|convertToMStorageDescriptor
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|sd
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MColumnDescriptor
name|mcd
init|=
name|createNewMColumnDescriptor
argument_list|(
name|convertToMFieldSchemas
argument_list|(
name|sd
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|convertToMStorageDescriptor
argument_list|(
name|sd
argument_list|,
name|mcd
argument_list|)
return|;
block|}
comment|/**    * Converts a storage descriptor to a db-backed storage descriptor.  It points the    * storage descriptor's column descriptor to the one passed as an argument,    * so it does not create a new mcolumn descriptor object.    * @param sd the storage descriptor to wrap in a db-backed object    * @param mcd the db-backed column descriptor    * @return the db-backed storage descriptor object    * @throws MetaException    */
specifier|private
name|MStorageDescriptor
name|convertToMStorageDescriptor
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|MColumnDescriptor
name|mcd
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|sd
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|MStorageDescriptor
argument_list|(
name|mcd
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|,
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|,
name|sd
operator|.
name|isCompressed
argument_list|()
argument_list|,
name|sd
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
name|converToMSerDeInfo
argument_list|(
name|sd
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
argument_list|,
name|sd
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|convertToMOrders
argument_list|(
name|sd
operator|.
name|getSortCols
argument_list|()
argument_list|)
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
argument_list|,
operator|(
literal|null
operator|==
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|)
condition|?
literal|null
else|:
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
name|convertToMStringLists
argument_list|(
operator|(
literal|null
operator|==
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|)
condition|?
literal|null
else|:
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValues
argument_list|()
argument_list|)
argument_list|,
name|covertToMapMStringList
argument_list|(
operator|(
literal|null
operator|==
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|)
condition|?
literal|null
else|:
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|)
argument_list|,
name|sd
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|addPartition
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|MTable
name|table
init|=
name|this
operator|.
name|getMTable
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tabGrants
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|tabColumnGrants
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
condition|)
block|{
name|tabGrants
operator|=
name|this
operator|.
name|listAllTableGrants
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|tabColumnGrants
operator|=
name|this
operator|.
name|listTableAllColumnGrants
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|openTransaction
argument_list|()
expr_stmt|;
name|MPartition
name|mpart
init|=
name|convertToMPart
argument_list|(
name|part
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mpart
argument_list|)
expr_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|toPersist
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabGrants
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTablePrivilege
name|tab
range|:
name|tabGrants
control|)
block|{
name|MPartitionPrivilege
name|partGrant
init|=
operator|new
name|MPartitionPrivilege
argument_list|(
name|tab
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|tab
operator|.
name|getPrincipalType
argument_list|()
argument_list|,
name|mpart
argument_list|,
name|tab
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|now
argument_list|,
name|tab
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|tab
operator|.
name|getGrantorType
argument_list|()
argument_list|,
name|tab
operator|.
name|getGrantOption
argument_list|()
argument_list|)
decl_stmt|;
name|toPersist
operator|.
name|add
argument_list|(
name|partGrant
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tabColumnGrants
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTableColumnPrivilege
name|col
range|:
name|tabColumnGrants
control|)
block|{
name|MPartitionColumnPrivilege
name|partColumn
init|=
operator|new
name|MPartitionColumnPrivilege
argument_list|(
name|col
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|col
operator|.
name|getPrincipalType
argument_list|()
argument_list|,
name|mpart
argument_list|,
name|col
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|col
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|now
argument_list|,
name|col
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|col
operator|.
name|getGrantorType
argument_list|()
argument_list|,
name|col
operator|.
name|getGrantOption
argument_list|()
argument_list|)
decl_stmt|;
name|toPersist
operator|.
name|add
argument_list|(
name|partColumn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|toPersist
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|toPersist
argument_list|)
expr_stmt|;
block|}
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Partition
name|part
init|=
name|convertToPart
argument_list|(
name|getMPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
argument_list|)
decl_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"partition values="
operator|+
name|part_vals
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|part
operator|.
name|setValues
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
return|return
name|part
return|;
block|}
specifier|private
name|MPartition
name|getMPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
block|{
name|MPartition
name|mpart
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|MTable
name|mtbl
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtbl
operator|==
literal|null
condition|)
block|{
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Change the query to use part_vals instead of the name which is
comment|// redundant
name|String
name|name
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|,
literal|"table.tableName == t1&& table.database.name == t2&& partitionName == t3"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpart
operator|=
operator|(
name|MPartition
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mpart
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mpart
return|;
block|}
comment|/**    * Convert a Partition object into an MPartition, which is an object backed by the db    * If the Partition's set of columns is the same as the parent table's AND useTableCD    * is true, then this partition's storage descriptor's column descriptor will point    * to the same one as the table's storage descriptor.    * @param part the partition to convert    * @param useTableCD whether to try to use the parent table's column descriptor.    * @return the model partition object    * @throws InvalidObjectException    * @throws MetaException    */
specifier|private
name|MPartition
name|convertToMPart
parameter_list|(
name|Partition
name|part
parameter_list|,
name|boolean
name|useTableCD
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MTable
name|mt
init|=
name|getMTable
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Partition doesn't have a valid table or database name"
argument_list|)
throw|;
block|}
comment|// If this partition's set of columns is the same as the parent table's,
comment|// use the parent table's, so we do not create a duplicate column descriptor,
comment|// thereby saving space
name|MStorageDescriptor
name|msd
decl_stmt|;
if|if
condition|(
name|useTableCD
operator|&&
name|mt
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
operator|&&
name|mt
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
operator|!=
literal|null
operator|&&
name|mt
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
operator|!=
literal|null
operator|&&
name|part
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
operator|&&
name|convertToFieldSchemas
argument_list|(
name|mt
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
condition|)
block|{
name|msd
operator|=
name|convertToMStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|,
name|mt
operator|.
name|getSd
argument_list|()
operator|.
name|getCD
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msd
operator|=
name|convertToMStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MPartition
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|convertToFieldSchemas
argument_list|(
name|mt
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|,
name|mt
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|part
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|part
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|msd
argument_list|,
name|part
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Partition
name|convertToPart
parameter_list|(
name|MPartition
name|mpart
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mpart
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Partition
argument_list|(
name|mpart
operator|.
name|getValues
argument_list|()
argument_list|,
name|mpart
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mpart
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|mpart
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mpart
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|convertToStorageDescriptor
argument_list|(
name|mpart
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|mpart
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Partition
name|convertToPart
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|MPartition
name|mpart
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mpart
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Partition
argument_list|(
name|mpart
operator|.
name|getValues
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|mpart
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mpart
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|convertToStorageDescriptor
argument_list|(
name|mpart
operator|.
name|getSd
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
name|mpart
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MPartition
name|part
init|=
name|getMPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
name|dropPartitionCommon
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
comment|/**    * Drop an MPartition and cascade deletes (e.g., delete partition privilege grants,    *   drop the storage descriptor cleanly, etc.)    * @param part - the MPartition to drop    * @return whether the transaction committed successfully    * @throws InvalidInputException    * @throws InvalidObjectException    * @throws MetaException    * @throws NoSuchObjectException    */
specifier|private
name|boolean
name|dropPartitionCommon
parameter_list|(
name|MPartition
name|part
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|schemas
init|=
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MFieldSchema
name|col
range|:
name|schemas
control|)
block|{
name|colNames
operator|.
name|add
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|partName
init|=
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|colNames
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|partGrants
init|=
name|listPartitionGrants
argument_list|(
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partName
argument_list|)
decl_stmt|;
if|if
condition|(
name|partGrants
operator|!=
literal|null
operator|&&
name|partGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|partColumnGrants
init|=
name|listPartitionAllColumnGrants
argument_list|(
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partName
argument_list|)
decl_stmt|;
if|if
condition|(
name|partColumnGrants
operator|!=
literal|null
operator|&&
name|partColumnGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partColumnGrants
argument_list|)
expr_stmt|;
block|}
name|String
name|dbName
init|=
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|part
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// delete partition level column stats if it exists
try|try
block|{
name|deletePartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No column statistics records found to delete"
argument_list|)
expr_stmt|;
block|}
name|preDropStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|deletePersistent
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|maxParts
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getPartitionsInternal
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|maxParts
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsInternal
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|maxParts
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
block|{
assert|assert
name|allowSql
operator|||
name|allowJdo
assert|;
name|boolean
name|doTrace
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
name|boolean
name|doUseDirectSql
init|=
name|canUseDirectSql
argument_list|(
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|long
name|start
init|=
name|doTrace
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|doUseDirectSql
condition|)
block|{
try|try
block|{
name|Integer
name|max
init|=
operator|(
name|maxParts
operator|<
literal|0
operator|)
condition|?
literal|null
else|:
name|maxParts
decl_stmt|;
name|parts
operator|=
name|directSql
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|handleDirectSqlError
argument_list|(
name|allowJdo
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|doUseDirectSql
operator|=
literal|false
expr_stmt|;
name|start
operator|=
name|doTrace
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|doUseDirectSql
condition|)
block|{
name|parts
operator|=
name|convertToParts
argument_list|(
name|listMPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|maxParts
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|doTrace
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|parts
operator|.
name|size
argument_list|()
operator|+
literal|" partition retrieved using "
operator|+
operator|(
name|doUseDirectSql
condition|?
literal|"SQL"
else|:
literal|"ORM"
operator|)
operator|+
literal|" in "
operator|+
operator|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000000.0
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsWithAuth
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
init|=
name|listMPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|mparts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mparts
operator|!=
literal|null
operator|&&
name|mparts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|MPartition
name|mpart
range|:
name|mparts
control|)
block|{
name|MTable
name|mtbl
init|=
name|mpart
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Partition
name|part
init|=
name|convertToPart
argument_list|(
name|mpart
argument_list|)
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mtbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|this
operator|.
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|partAuth
init|=
name|this
operator|.
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|partAuth
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|parts
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartitionWithAuth
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MPartition
name|mpart
init|=
name|getMPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpart
operator|==
literal|null
condition|)
block|{
name|commitTransaction
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"partition values="
operator|+
name|partVals
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Partition
name|part
init|=
literal|null
decl_stmt|;
name|MTable
name|mtbl
init|=
name|mpart
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|part
operator|=
name|convertToPart
argument_list|(
name|mpart
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mtbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|this
operator|.
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|partAuth
init|=
name|this
operator|.
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|user_name
argument_list|,
name|group_names
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|partAuth
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|part
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|convertToParts
parameter_list|(
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|convertToParts
argument_list|(
name|mparts
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|convertToParts
parameter_list|(
name|List
argument_list|<
name|MPartition
argument_list|>
name|src
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|dest
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|src
operator|==
literal|null
condition|)
block|{
return|return
name|dest
return|;
block|}
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|dest
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|src
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MPartition
name|mp
range|:
name|src
control|)
block|{
name|dest
operator|.
name|add
argument_list|(
name|convertToPart
argument_list|(
name|mp
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|convertToParts
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|mparts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MPartition
name|mp
range|:
name|mparts
control|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|convertToPart
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|mp
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
comment|// TODO:pc implement max
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pns
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing getPartitionNames"
argument_list|)
expr_stmt|;
name|pns
operator|=
name|getPartitionNamesNoTxn
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|pns
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPartitionNamesNoTxn
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|short
name|max
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select partitionName from org.apache.hadoop.hive.metastore.model.MPartition "
operator|+
literal|"where table.database.name == t1&& table.tableName == t2 "
operator|+
literal|"order by partitionName asc"
argument_list|)
decl_stmt|;
name|q
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setResult
argument_list|(
literal|"partitionName"
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
operator|>
literal|0
condition|)
block|{
name|q
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|q
operator|.
name|execute
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|pns
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pns
return|;
block|}
comment|/**    * Retrieves a Collection of partition-related results from the database that match    *  the partial specification given for a specific table.    * @param dbName the name of the database    * @param tableName the name of the table    * @param part_vals the partial specification values    * @param max_parts the maximum number of partitions to return    * @param resultsCol the metadata column of the data to return, e.g. partitionName, etc.    *        if resultsCol is empty or null, a collection of MPartition objects is returned    * @throws NoSuchObjectException    * @results A Collection of partition-related items from the db that match the partial spec    *          for a table.  The type of each item in the collection corresponds to the column    *          you want results for.  E.g., if resultsCol is partitionName, the Collection    *          has types of String, and if resultsCol is null, the types are MPartition.    */
specifier|private
name|Collection
name|getPartitionPsQueryResults
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|String
name|resultsCol
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Table
name|table
init|=
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|dbName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" table not found"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|int
name|numPartKeys
init|=
name|partCols
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|part_vals
operator|.
name|size
argument_list|()
operator|>
name|numPartKeys
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Incorrect number of partition values"
argument_list|)
throw|;
block|}
name|partCols
operator|=
name|partCols
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|part_vals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Construct a pattern of the form: partKey=partVal/partKey2=partVal2/...
comment|// where partVal is either the escaped partition value given as input,
comment|// or a regex of the form ".*"
comment|//This works because the "=" and "/" separating key names and partition key/values
comment|// are not escaped.
name|String
name|partNameMatcher
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|partCols
argument_list|,
name|part_vals
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
comment|//add ".*" to the regex to match anything else afterwards the partial spec.
if|if
condition|(
name|part_vals
operator|.
name|size
argument_list|()
operator|<
name|numPartKeys
condition|)
block|{
name|partNameMatcher
operator|+=
literal|".*"
expr_stmt|;
block|}
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringBuilder
name|queryFilter
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"table.database.name == dbName"
argument_list|)
decl_stmt|;
name|queryFilter
operator|.
name|append
argument_list|(
literal|"&& table.tableName == tableName"
argument_list|)
expr_stmt|;
name|queryFilter
operator|.
name|append
argument_list|(
literal|"&& partitionName.matches(partialRegex)"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setFilter
argument_list|(
name|queryFilter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String dbName, "
operator|+
literal|"java.lang.String tableName, java.lang.String partialRegex"
argument_list|)
expr_stmt|;
if|if
condition|(
name|max_parts
operator|>=
literal|0
condition|)
block|{
comment|//User specified a row limit, set it on the Query
name|q
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resultsCol
operator|!=
literal|null
operator|&&
operator|!
name|resultsCol
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|q
operator|.
name|setResult
argument_list|(
name|resultsCol
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Collection
operator|)
name|q
operator|.
name|execute
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNameMatcher
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsPsWithAuth
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"executing listPartitionNamesPsWithAuth"
argument_list|)
expr_stmt|;
name|Collection
name|parts
init|=
name|getPartitionPsQueryResults
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MTable
name|mtbl
init|=
name|getMTable
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|parts
control|)
block|{
name|Partition
name|part
init|=
name|convertToPart
argument_list|(
operator|(
name|MPartition
operator|)
name|o
argument_list|)
decl_stmt|;
comment|//set auth privileges
if|if
condition|(
literal|null
operator|!=
name|userName
operator|&&
literal|null
operator|!=
name|groupNames
operator|&&
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|mtbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"PARTITION_LEVEL_PRIVILEGE"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|this
operator|.
name|convertToFieldSchemas
argument_list|(
name|mtbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|partAuth
init|=
name|getPartitionPrivilegeSet
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|partAuth
argument_list|)
expr_stmt|;
block|}
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesPs
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPartitionNamesPs"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
name|getPartitionPsQueryResults
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
literal|"partitionName"
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|names
control|)
block|{
name|partitionNames
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|partitionNames
return|;
block|}
comment|// TODO:pc implement max
specifier|private
name|List
argument_list|<
name|MPartition
argument_list|>
name|listMPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMPartitions"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|,
literal|"table.tableName == t1&& table.database.name == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName ascending"
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
operator|>
literal|0
condition|)
block|{
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
name|mparts
operator|=
operator|(
name|List
argument_list|<
name|MPartition
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMPartitions"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mparts
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMPartitions "
operator|+
name|mparts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mparts
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getPartitionsByNamesInternal
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNamesInternal
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
assert|assert
name|allowSql
operator|||
name|allowJdo
assert|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tblName
operator|=
name|tblName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|boolean
name|doTrace
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
name|boolean
name|doUseDirectSql
init|=
name|canUseDirectSql
argument_list|(
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|long
name|start
init|=
name|doTrace
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|doUseDirectSql
condition|)
block|{
try|try
block|{
name|results
operator|=
name|directSql
operator|.
name|getPartitionsViaSqlFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|handleDirectSqlError
argument_list|(
name|allowJdo
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|doUseDirectSql
operator|=
literal|false
expr_stmt|;
name|start
operator|=
name|doTrace
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|doUseDirectSql
condition|)
block|{
name|results
operator|=
name|getPartitionsViaOrmFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|doTrace
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" partition retrieved using "
operator|+
operator|(
name|doUseDirectSql
condition|?
literal|"SQL"
else|:
literal|"ORM"
operator|)
operator|+
literal|" in "
operator|+
operator|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000000.0
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getPartitionsByExpr
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|Set
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|getPartitionsByExprInternal
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|result
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|getPartitionsByExprInternal
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|Set
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|TException
block|{
assert|assert
name|allowSql
operator|||
name|allowJdo
assert|;
assert|assert
name|result
operator|!=
literal|null
assert|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tblName
operator|=
name|tblName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|// We will try pushdown first, so make the filter. This will also validate the expression,
comment|// if serialization fails we will throw incompatible metastore error to the client.
name|String
name|filter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|filter
operator|=
name|expressionProxy
operator|.
name|convertExprToFilter
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IMetaStoreClient
operator|.
name|IncompatibleMetastoreException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|// Make a tree out of the filter.
comment|// TODO: this is all pretty ugly. The only reason we need all these transformations
comment|//       is to maintain support for simple filters for HCat users that query metastore.
comment|//       If forcing everyone to use thick client is out of the question, maybe we could
comment|//       parse the filter into standard hive expressions and not all this separate tree
comment|//       Filter.g stuff. That way this method and ...ByFilter would just be merged.
name|ExpressionTree
name|exprTree
init|=
name|makeExpressionTree
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|boolean
name|doUseDirectSql
init|=
name|canUseDirectSql
argument_list|(
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
decl_stmt|;
name|boolean
name|doTrace
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
literal|null
decl_stmt|;
name|boolean
name|hasUnknownPartitions
init|=
literal|false
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|long
name|start
init|=
name|doTrace
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|Table
name|table
init|=
name|ensureGetTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|doUseDirectSql
condition|)
block|{
try|try
block|{
if|if
condition|(
name|exprTree
operator|!=
literal|null
condition|)
block|{
comment|// We have some sort of expression tree, try SQL filter pushdown.
name|partitions
operator|=
name|directSql
operator|.
name|getPartitionsViaSqlFilter
argument_list|(
name|table
argument_list|,
name|exprTree
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partitions
operator|==
literal|null
condition|)
block|{
comment|// We couldn't do SQL filter pushdown. Get names via normal means.
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hasUnknownPartitions
operator|=
name|getPartitionNamesPrunedByExprNoTxn
argument_list|(
name|table
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|directSql
operator|.
name|getPartitionsViaSqlFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|handleDirectSqlError
argument_list|(
name|allowJdo
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|doUseDirectSql
operator|=
literal|false
expr_stmt|;
name|table
operator|=
name|ensureGetTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Get again, detached on rollback.
block|}
block|}
if|if
condition|(
operator|!
name|doUseDirectSql
condition|)
block|{
assert|assert
name|partitions
operator|==
literal|null
assert|;
if|if
condition|(
name|exprTree
operator|!=
literal|null
condition|)
block|{
comment|// We have some sort of expression tree, try JDOQL filter pushdown.
name|partitions
operator|=
name|getPartitionsViaOrmFilter
argument_list|(
name|table
argument_list|,
name|exprTree
argument_list|,
name|maxParts
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partitions
operator|==
literal|null
condition|)
block|{
comment|// We couldn't do JDOQL filter pushdown. Get names via normal means.
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hasUnknownPartitions
operator|=
name|getPartitionNamesPrunedByExprNoTxn
argument_list|(
name|table
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
name|partitions
operator|=
name|getPartitionsViaOrmFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
block|}
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|doTrace
condition|)
block|{
name|double
name|time
init|=
operator|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000000.0
operator|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|partitions
operator|.
name|size
argument_list|()
operator|+
literal|" partition retrieved using "
operator|+
operator|(
name|doUseDirectSql
condition|?
literal|"SQL"
else|:
literal|"ORM"
operator|)
operator|+
literal|" in "
operator|+
name|time
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|result
operator|.
name|addAll
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
return|return
name|hasUnknownPartitions
return|;
block|}
specifier|private
class|class
name|LikeChecker
extends|extends
name|ExpressionTree
operator|.
name|TreeVisitor
block|{
specifier|private
name|boolean
name|hasLike
decl_stmt|;
specifier|public
name|boolean
name|hasLike
parameter_list|()
block|{
return|return
name|hasLike
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldStop
parameter_list|()
block|{
return|return
name|hasLike
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|visit
parameter_list|(
name|LeafNode
name|node
parameter_list|)
throws|throws
name|MetaException
block|{
name|hasLike
operator|=
name|hasLike
operator|||
operator|(
name|node
operator|.
name|operator
operator|==
name|Operator
operator|.
name|LIKE
operator|)
expr_stmt|;
block|}
block|}
comment|/**    * Makes expression tree out of expr.    * @param filter Filter.    * @return Expression tree. Null if there was an error.    */
specifier|private
name|ExpressionTree
name|makeExpressionTree
parameter_list|(
name|String
name|filter
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO: ExprNodeDesc is an expression tree, we could just use that and be rid of Filter.g.
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ExpressionTree
operator|.
name|EMPTY_TREE
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Filter specified is "
operator|+
name|filter
argument_list|)
expr_stmt|;
name|ExpressionTree
name|tree
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tree
operator|=
name|getFilterParser
argument_list|(
name|filter
argument_list|)
operator|.
name|tree
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to make the expression tree from expression string ["
operator|+
name|filter
operator|+
literal|"]"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't log the stack, this is normal.
block|}
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// We suspect that LIKE pushdown into JDO is invalid; see HIVE-5134. Check for like here.
name|LikeChecker
name|lc
init|=
operator|new
name|LikeChecker
argument_list|()
decl_stmt|;
name|tree
operator|.
name|accept
argument_list|(
name|lc
argument_list|)
expr_stmt|;
return|return
name|lc
operator|.
name|hasLike
argument_list|()
condition|?
literal|null
else|:
name|tree
return|;
block|}
comment|/**    * Gets the partition names from a table, pruned using an expression.    * @param table Table.    * @param expr Expression.    * @param defaultPartName Default partition name from job config, if any.    * @param maxParts Maximum number of partition names to return.    * @param result The resulting names.    * @return Whether the result contains any unknown partitions.    */
specifier|private
name|boolean
name|getPartitionNamesPrunedByExprNoTxn
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|result
parameter_list|)
throws|throws
name|MetaException
block|{
name|result
operator|.
name|addAll
argument_list|(
name|getPartitionNamesNoTxn
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|maxParts
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultPartName
operator|==
literal|null
operator|||
name|defaultPartName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|defaultPartName
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
expr_stmt|;
block|}
return|return
name|expressionProxy
operator|.
name|filterPartitionsByExpr
argument_list|(
name|columnNames
argument_list|,
name|expr
argument_list|,
name|defaultPartName
argument_list|,
name|result
argument_list|)
return|;
block|}
comment|/**    * Gets partition names from the table via ORM (JDOQL) filter pushdown.    * @param table The table.    * @param tree The expression tree from which JDOQL filter will be made.    * @param maxParts Maximum number of partitions to return.    * @param isValidatedFilter Whether the filter was pre-validated for JDOQL pushdown by a client    *   (old hive client or non-hive one); if it was and we fail to create a filter, we will throw.    * @return Resulting partitions. Can be null if isValidatedFilter is false, and    *         there was error deriving the JDO filter.    */
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsViaOrmFilter
parameter_list|(
name|Table
name|table
parameter_list|,
name|ExpressionTree
name|tree
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|boolean
name|isValidatedFilter
parameter_list|)
throws|throws
name|MetaException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|jdoFilter
init|=
name|makeQueryFilterString
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
argument_list|,
name|tree
argument_list|,
name|params
argument_list|,
name|isValidatedFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|jdoFilter
operator|==
literal|null
condition|)
block|{
assert|assert
operator|!
name|isValidatedFilter
assert|;
return|return
literal|null
return|;
block|}
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|,
name|jdoFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxParts
operator|>=
literal|0
condition|)
block|{
comment|// User specified a row limit, set it on the Query
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|maxParts
argument_list|)
expr_stmt|;
block|}
name|String
name|parameterDeclaration
init|=
name|makeParameterDeclarationStringObj
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameterDeclaration
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName ascending"
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
init|=
operator|(
name|List
argument_list|<
name|MPartition
argument_list|>
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for getPartitionsViaOrmFilter"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mparts
argument_list|)
expr_stmt|;
comment|// TODO: why is this inconsistent with what we get by names?
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for getPartitionsViaOrmFilter"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|results
init|=
name|convertToParts
argument_list|(
name|mparts
argument_list|)
decl_stmt|;
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
return|return
name|results
return|;
block|}
specifier|private
name|void
name|handleDirectSqlError
parameter_list|(
name|boolean
name|allowJdo
parameter_list|,
name|Exception
name|ex
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Direct SQL failed"
operator|+
operator|(
name|allowJdo
condition|?
literal|", falling back to ORM"
else|:
literal|""
operator|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|allowJdo
condition|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|ex
throw|;
block|}
throw|throw
operator|new
name|MetaException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|rollbackTransaction
argument_list|()
expr_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets partition names from the table via ORM (JDOQL) name filter.    * @param dbName Database name.    * @param tblName Table name.    * @param partNames Partition names to get the objects for.    * @return Resulting partitions.    */
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsViaOrmFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|partNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"table.tableName == t1&& table.database.name == t2&& ("
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|itr
init|=
name|partNames
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pn
init|=
literal|"p"
operator|+
name|n
decl_stmt|;
name|n
operator|++
expr_stmt|;
name|String
name|part
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|pn
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"partitionName == "
argument_list|)
operator|.
name|append
argument_list|(
name|pn
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" || "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
comment|// remove the last " || "
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartition
operator|.
name|class
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|" JDOQL filter is "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t1"
argument_list|,
name|tblName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t2"
argument_list|,
name|dbName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|parameterDeclaration
init|=
name|makeParameterDeclarationString
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameterDeclaration
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName ascending"
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|MPartition
argument_list|>
name|mparts
init|=
operator|(
name|List
argument_list|<
name|MPartition
argument_list|>
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|params
argument_list|)
decl_stmt|;
comment|// pm.retrieveAll(mparts); // retrieveAll is pessimistic. some fields may not be needed
name|List
argument_list|<
name|Partition
argument_list|>
name|results
init|=
name|convertToParts
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|mparts
argument_list|)
decl_stmt|;
comment|// pm.makeTransientAll(mparts); // makeTransient will prohibit future access of unfetched fields
name|query
operator|.
name|closeAll
argument_list|()
expr_stmt|;
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getPartitionsByFilterInternal
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|,
name|maxParts
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByFilterInternal
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
assert|assert
name|allowSql
operator|||
name|allowJdo
assert|;
name|boolean
name|doTrace
init|=
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
name|boolean
name|doUseDirectSql
init|=
name|canUseDirectSql
argument_list|(
name|allowSql
argument_list|,
name|allowJdo
argument_list|)
decl_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tblName
operator|=
name|tblName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|ExpressionTree
name|tree
init|=
operator|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|getFilterParser
argument_list|(
name|filter
argument_list|)
operator|.
name|tree
else|:
name|ExpressionTree
operator|.
name|EMPTY_TREE
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|long
name|start
init|=
name|doTrace
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
name|Table
name|table
init|=
name|ensureGetTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|doUseDirectSql
condition|)
block|{
try|try
block|{
name|Integer
name|max
init|=
operator|(
name|maxParts
operator|<
literal|0
operator|)
condition|?
literal|null
else|:
operator|(
name|int
operator|)
name|maxParts
decl_stmt|;
name|results
operator|=
name|directSql
operator|.
name|getPartitionsViaSqlFilter
argument_list|(
name|table
argument_list|,
name|tree
argument_list|,
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
comment|// Cannot push down SQL filter. The message has been logged internally.
comment|// This is not an error so don't roll back, just go to JDO.
name|doUseDirectSql
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|handleDirectSqlError
argument_list|(
name|allowJdo
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|doUseDirectSql
operator|=
literal|false
expr_stmt|;
name|start
operator|=
name|doTrace
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
expr_stmt|;
name|table
operator|=
name|ensureGetTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// detached on rollback, get again
block|}
block|}
if|if
condition|(
operator|!
name|doUseDirectSql
condition|)
block|{
name|results
operator|=
name|getPartitionsViaOrmFilter
argument_list|(
name|table
argument_list|,
name|tree
argument_list|,
name|maxParts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|doTrace
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" partition retrieved using "
operator|+
operator|(
name|doUseDirectSql
condition|?
literal|"SQL"
else|:
literal|"ORM"
operator|)
operator|+
literal|" in "
operator|+
operator|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000000.0
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param allowSql Whether SQL usage is allowed (always true outside test).    * @param allowJdo Whether JDO usage is allowed (always true outside test).    * @return Whether we can use direct SQL.    */
specifier|private
name|boolean
name|canUseDirectSql
parameter_list|(
name|boolean
name|allowSql
parameter_list|,
name|boolean
name|allowJdo
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// We don't allow direct SQL usage if we are inside a larger transaction (e.g. droptable).
comment|// That is because some databases (e.g. Postgres) abort the entire transaction when
comment|// any query fails, so the fallback from failed SQL to JDO is not possible.
comment|// TODO: Drop table can be very slow on large tables, we might want to address this.
name|boolean
name|isEnabled
init|=
operator|!
name|isActiveTransaction
argument_list|()
operator|&&
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|METASTORE_TRY_DIRECT_SQL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allowJdo
operator|&&
name|isEnabled
operator|&&
operator|!
name|directSql
operator|.
name|isCompatibleDatastore
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"SQL is not operational"
argument_list|)
throw|;
comment|// test path; SQL is enabled and broken.
block|}
return|return
name|allowSql
operator|&&
name|isEnabled
operator|&&
name|directSql
operator|.
name|isCompatibleDatastore
argument_list|()
return|;
block|}
comment|/**    * Gets the table object for a given table, throws if anything goes wrong.    * @param dbName Database name.    * @param tblName Table name.    * @return Table object.    */
specifier|private
name|Table
name|ensureGetTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|MTable
name|mtable
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Specified database/table does not exist : "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
argument_list|)
throw|;
block|}
return|return
name|convertToTable
argument_list|(
name|mtable
argument_list|)
return|;
block|}
specifier|private
name|FilterParser
name|getFilterParser
parameter_list|(
name|String
name|filter
parameter_list|)
throws|throws
name|MetaException
block|{
name|CharStream
name|cs
init|=
operator|new
name|ANTLRNoCaseStringStream
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|FilterLexer
name|lexer
init|=
operator|new
name|FilterLexer
argument_list|(
name|cs
argument_list|)
decl_stmt|;
name|CommonTokenStream
name|tokens
init|=
operator|new
name|CommonTokenStream
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|setTokenSource
argument_list|(
name|lexer
argument_list|)
expr_stmt|;
name|FilterParser
name|parser
init|=
operator|new
name|FilterParser
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|filter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|re
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Error parsing partition filter : "
operator|+
name|re
argument_list|)
throw|;
block|}
if|if
condition|(
name|lexer
operator|.
name|errorMsg
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Error parsing partition filter : "
operator|+
name|lexer
operator|.
name|errorMsg
argument_list|)
throw|;
block|}
return|return
name|parser
return|;
block|}
comment|/**    * Makes a JDO query filter string.    * Makes a JDO query filter string for tables or partitions.    * @param dbName Database name.    * @param table Table. If null, the query returned is over tables in a database.    *   If not null, the query returned is over partitions in a table.    * @param filter The filter from which JDOQL filter will be made.    * @param params Parameters for the filter. Some parameters may be added here.    * @return Resulting filter.    */
specifier|private
name|String
name|makeQueryFilterString
parameter_list|(
name|String
name|dbName
parameter_list|,
name|MTable
name|mtable
parameter_list|,
name|String
name|filter
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|MetaException
block|{
name|ExpressionTree
name|tree
init|=
operator|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|getFilterParser
argument_list|(
name|filter
argument_list|)
operator|.
name|tree
else|:
name|ExpressionTree
operator|.
name|EMPTY_TREE
decl_stmt|;
return|return
name|makeQueryFilterString
argument_list|(
name|dbName
argument_list|,
name|convertToTable
argument_list|(
name|mtable
argument_list|)
argument_list|,
name|tree
argument_list|,
name|params
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Makes a JDO query filter string for tables or partitions.    * @param dbName Database name.    * @param table Table. If null, the query returned is over tables in a database.    *   If not null, the query returned is over partitions in a table.    * @param tree The expression tree from which JDOQL filter will be made.    * @param params Parameters for the filter. Some parameters may be added here.    * @param isValidatedFilter Whether the filter was pre-validated for JDOQL pushdown    *   by the client; if it was and we fail to create a filter, we will throw.    * @return Resulting filter. Can be null if isValidatedFilter is false, and there was error.    */
specifier|private
name|String
name|makeQueryFilterString
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Table
name|table
parameter_list|,
name|ExpressionTree
name|tree
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
name|boolean
name|isValidatedFilter
parameter_list|)
throws|throws
name|MetaException
block|{
assert|assert
name|tree
operator|!=
literal|null
assert|;
name|FilterBuilder
name|queryBuilder
init|=
operator|new
name|FilterBuilder
argument_list|(
name|isValidatedFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|queryBuilder
operator|.
name|append
argument_list|(
literal|"table.tableName == t1&& table.database.name == t2"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t1"
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"t2"
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryBuilder
operator|.
name|append
argument_list|(
literal|"database.name == dbName"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"dbName"
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
name|tree
operator|.
name|generateJDOFilterFragment
argument_list|(
name|table
argument_list|,
name|params
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryBuilder
operator|.
name|hasError
argument_list|()
condition|)
block|{
assert|assert
operator|!
name|isValidatedFilter
assert|;
name|LOG
operator|.
name|info
argument_list|(
literal|"JDO filter pushdown cannot be used: "
operator|+
name|queryBuilder
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|jdoFilter
init|=
name|queryBuilder
operator|.
name|getFilter
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"jdoFilter = "
operator|+
name|jdoFilter
argument_list|)
expr_stmt|;
return|return
name|jdoFilter
return|;
block|}
specifier|private
name|String
name|makeParameterDeclarationString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
comment|//Create the parameter declaration string
name|StringBuilder
name|paramDecl
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|params
operator|.
name|keySet
argument_list|()
control|)
block|{
name|paramDecl
operator|.
name|append
argument_list|(
literal|", java.lang.String "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|paramDecl
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|makeParameterDeclarationStringObj
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
comment|//Create the parameter declaration string
name|StringBuilder
name|paramDecl
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|paramDecl
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|paramDecl
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|paramDecl
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|paramDecl
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|paramDecl
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxTables
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listTableNamesByFilter"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|queryFilterString
init|=
name|makeQueryFilterString
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
name|filter
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTable
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareImports
argument_list|(
literal|"import java.lang.String"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"tableName"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResultClass
argument_list|(
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxTables
operator|>=
literal|0
condition|)
block|{
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|maxTables
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"filter specified is "
operator|+
name|filter
operator|+
literal|","
operator|+
literal|" JDOQL filter is "
operator|+
name|queryFilterString
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"key: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" value: "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|" class: "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|parameterDeclaration
init|=
name|makeParameterDeclarationStringObj
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameterDeclaration
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFilter
argument_list|(
name|queryFilterString
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|params
argument_list|)
decl_stmt|;
comment|//have to emulate "distinct", otherwise tables with the same name may be returned
name|Set
argument_list|<
name|String
argument_list|>
name|tableNamesSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|tableNamesSet
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tableNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|tableNamesSet
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listTableNamesByFilter"
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listTableNamesByFilter"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMPartitionNamesByFilter"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|MTable
name|mtable
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtable
operator|==
literal|null
condition|)
block|{
comment|// To be consistent with the behavior of listPartitionNames, if the
comment|// table or db does not exist, we return an empty list
return|return
name|partNames
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|queryFilterString
init|=
name|makeQueryFilterString
argument_list|(
name|dbName
argument_list|,
name|mtable
argument_list|,
name|filter
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select partitionName from org.apache.hadoop.hive.metastore.model.MPartition "
operator|+
literal|"where "
operator|+
name|queryFilterString
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxParts
operator|>=
literal|0
condition|)
block|{
comment|//User specified a row limit, set it on the Query
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|maxParts
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Filter specified is "
operator|+
name|filter
operator|+
literal|","
operator|+
literal|" JDOQL filter is "
operator|+
name|queryFilterString
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parms is "
operator|+
name|params
argument_list|)
expr_stmt|;
name|String
name|parameterDeclaration
init|=
name|makeParameterDeclarationStringObj
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameterDeclaration
argument_list|)
expr_stmt|;
name|query
operator|.
name|setOrdering
argument_list|(
literal|"partitionName ascending"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"partitionName"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|executeWithMap
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|partNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMPartitionNamesByFilter"
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMPartitionNamesByFilter"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|partNames
return|;
block|}
specifier|public
name|void
name|alterTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Table
name|newTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|dbname
operator|=
name|dbname
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|MTable
name|newt
init|=
name|convertToMTable
argument_list|(
name|newTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|newt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"new table is invalid"
argument_list|)
throw|;
block|}
name|MTable
name|oldt
init|=
name|getMTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"table "
operator|+
name|name
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
comment|// For now only alter name, owner, paramters, cols, bucketcols are allowed
name|oldt
operator|.
name|setTableName
argument_list|(
name|newt
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setParameters
argument_list|(
name|newt
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setOwner
argument_list|(
name|newt
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fully copy over the contents of the new SD into the old SD,
comment|// so we don't create an extra SD in the metastore db that has no references.
name|copyMSD
argument_list|(
name|newt
operator|.
name|getSd
argument_list|()
argument_list|,
name|oldt
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setDatabase
argument_list|(
name|newt
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setRetention
argument_list|(
name|newt
operator|.
name|getRetention
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setPartitionKeys
argument_list|(
name|newt
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setTableType
argument_list|(
name|newt
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setLastAccessTime
argument_list|(
name|newt
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setViewOriginalText
argument_list|(
name|newt
operator|.
name|getViewOriginalText
argument_list|()
argument_list|)
expr_stmt|;
name|oldt
operator|.
name|setViewExpandedText
argument_list|(
name|newt
operator|.
name|getViewExpandedText
argument_list|()
argument_list|)
expr_stmt|;
comment|// commit the changes
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|alterIndex
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|baseTblName
parameter_list|,
name|String
name|name
parameter_list|,
name|Index
name|newIndex
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|baseTblName
operator|=
name|baseTblName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|dbname
operator|=
name|dbname
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|MIndex
name|newi
init|=
name|convertToMIndex
argument_list|(
name|newIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|newi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"new index is invalid"
argument_list|)
throw|;
block|}
name|MIndex
name|oldi
init|=
name|getMIndex
argument_list|(
name|dbname
argument_list|,
name|baseTblName
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"index "
operator|+
name|name
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
comment|// For now only alter paramters are allowed
name|oldi
operator|.
name|setParameters
argument_list|(
name|newi
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
comment|// commit the changes
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|alterPartitionNoTxn
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|dbname
operator|=
name|dbname
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|MPartition
name|oldp
init|=
name|getMPartition
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
name|MPartition
name|newp
init|=
name|convertToMPart
argument_list|(
name|newPart
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldp
operator|==
literal|null
operator|||
name|newp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"partition does not exist."
argument_list|)
throw|;
block|}
name|oldp
operator|.
name|setValues
argument_list|(
name|newp
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|oldp
operator|.
name|setPartitionName
argument_list|(
name|newp
operator|.
name|getPartitionName
argument_list|()
argument_list|)
expr_stmt|;
name|oldp
operator|.
name|setParameters
argument_list|(
name|newPart
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|oldp
operator|.
name|getTable
argument_list|()
operator|.
name|getTableType
argument_list|()
argument_list|)
condition|)
block|{
name|copyMSD
argument_list|(
name|newp
operator|.
name|getSd
argument_list|()
argument_list|,
name|oldp
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newp
operator|.
name|getCreateTime
argument_list|()
operator|!=
name|oldp
operator|.
name|getCreateTime
argument_list|()
condition|)
block|{
name|oldp
operator|.
name|setCreateTime
argument_list|(
name|newp
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newp
operator|.
name|getLastAccessTime
argument_list|()
operator|!=
name|oldp
operator|.
name|getLastAccessTime
argument_list|()
condition|)
block|{
name|oldp
operator|.
name|setLastAccessTime
argument_list|(
name|newp
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|alterPartition
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|alterPartitionNoTxn
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|part_vals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
comment|// commit the changes
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|e
operator|=
name|exception
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
name|MetaException
name|metaException
init|=
operator|new
name|MetaException
argument_list|(
literal|"The transaction for alter partition did not commit successfully."
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|metaException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|metaException
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|alterPartitions
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|part_vals
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|e
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|part_val_itr
init|=
name|part_vals
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|tmpPart
range|:
name|newParts
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tmpPartVals
init|=
name|part_val_itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|alterPartitionNoTxn
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|tmpPartVals
argument_list|,
name|tmpPart
argument_list|)
expr_stmt|;
block|}
comment|// commit the changes
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|e
operator|=
name|exception
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
name|MetaException
name|metaException
init|=
operator|new
name|MetaException
argument_list|(
literal|"The transaction for alter partition did not commit successfully."
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|metaException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
name|metaException
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|copyMSD
parameter_list|(
name|MStorageDescriptor
name|newSd
parameter_list|,
name|MStorageDescriptor
name|oldSd
parameter_list|)
block|{
name|oldSd
operator|.
name|setLocation
argument_list|(
name|newSd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|MColumnDescriptor
name|oldCD
init|=
name|oldSd
operator|.
name|getCD
argument_list|()
decl_stmt|;
comment|// If the columns of the old column descriptor != the columns of the new one,
comment|// then change the old storage descriptor's column descriptor.
comment|// Convert the MFieldSchema's to their thrift object counterparts, because we maintain
comment|// datastore identity (i.e., identity of the model objects are managed by JDO,
comment|// not the application).
if|if
condition|(
operator|!
operator|(
name|oldSd
operator|!=
literal|null
operator|&&
name|oldSd
operator|.
name|getCD
argument_list|()
operator|!=
literal|null
operator|&&
name|oldSd
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
operator|!=
literal|null
operator|&&
name|newSd
operator|!=
literal|null
operator|&&
name|newSd
operator|.
name|getCD
argument_list|()
operator|!=
literal|null
operator|&&
name|newSd
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
operator|!=
literal|null
operator|&&
name|convertToFieldSchemas
argument_list|(
name|newSd
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|convertToFieldSchemas
argument_list|(
name|oldSd
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|oldSd
operator|.
name|setCD
argument_list|(
name|newSd
operator|.
name|getCD
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//If oldCd does not have any more references, then we should delete it
comment|// from the backend db
name|removeUnusedColumnDescriptor
argument_list|(
name|oldCD
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setBucketCols
argument_list|(
name|newSd
operator|.
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setCompressed
argument_list|(
name|newSd
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setInputFormat
argument_list|(
name|newSd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setOutputFormat
argument_list|(
name|newSd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setNumBuckets
argument_list|(
name|newSd
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|newSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|newSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
name|newSd
operator|.
name|getSerDeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setSkewedColNames
argument_list|(
name|newSd
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setSkewedColValues
argument_list|(
name|newSd
operator|.
name|getSkewedColValues
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setSkewedColValueLocationMaps
argument_list|(
name|newSd
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setSortCols
argument_list|(
name|newSd
operator|.
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setParameters
argument_list|(
name|newSd
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|oldSd
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|newSd
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if a column descriptor has any remaining references by storage descriptors    * in the db.  If it does not, then delete the CD.  If it does, then do nothing.    * @param oldCD the column descriptor to delete if it is no longer referenced anywhere    */
specifier|private
name|void
name|removeUnusedColumnDescriptor
parameter_list|(
name|MColumnDescriptor
name|oldCD
parameter_list|)
block|{
if|if
condition|(
name|oldCD
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"execute removeUnusedColumnDescriptor"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
name|referencedSDs
init|=
name|listStorageDescriptorsWithCD
argument_list|(
name|oldCD
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//if no other SD references this CD, we can throw it out.
if|if
condition|(
name|referencedSDs
operator|!=
literal|null
operator|&&
name|referencedSDs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pm
operator|.
name|retrieve
argument_list|(
name|oldCD
argument_list|)
expr_stmt|;
name|pm
operator|.
name|deletePersistent
argument_list|(
name|oldCD
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"successfully deleted a CD in removeUnusedColumnDescriptor"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Called right before an action that would drop a storage descriptor.    * This function makes the SD's reference to a CD null, and then deletes the CD    * if it no longer is referenced in the table.    * @param msd the storage descriptor to drop    */
specifier|private
name|void
name|preDropStorageDescriptor
parameter_list|(
name|MStorageDescriptor
name|msd
parameter_list|)
block|{
if|if
condition|(
name|msd
operator|==
literal|null
operator|||
name|msd
operator|.
name|getCD
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|MColumnDescriptor
name|mcd
init|=
name|msd
operator|.
name|getCD
argument_list|()
decl_stmt|;
comment|// Because there is a 1-N relationship between CDs and SDs,
comment|// we must set the SD's CD to null first before dropping the storage descriptor
comment|// to satisfy foriegn key constraints.
name|msd
operator|.
name|setCD
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|removeUnusedColumnDescriptor
argument_list|(
name|mcd
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a list of storage descriptors that reference a particular Column Descriptor    * @param oldCD the column descriptor to get storage descriptors for    * @param maxSDs the maximum number of SDs to return    * @return a list of storage descriptors    */
specifier|private
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
name|listStorageDescriptorsWithCD
parameter_list|(
name|MColumnDescriptor
name|oldCD
parameter_list|,
name|long
name|maxSDs
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
name|sds
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listStorageDescriptorsWithCD"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MStorageDescriptor
operator|.
name|class
argument_list|,
literal|"this.cd == inCD"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"MColumnDescriptor inCD"
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxSDs
operator|>=
literal|0
condition|)
block|{
comment|//User specified a row limit, set it on the Query
name|query
operator|.
name|setRange
argument_list|(
literal|0
argument_list|,
name|maxSDs
argument_list|)
expr_stmt|;
block|}
name|sds
operator|=
operator|(
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|oldCD
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listStorageDescriptorsWithCD"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|sds
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listStorageDescriptorsWithCD"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|sds
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addIndex
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MIndex
name|idx
init|=
name|convertToMIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
specifier|private
name|MIndex
name|convertToMIndex
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|StorageDescriptor
name|sd
init|=
name|index
operator|.
name|getSd
argument_list|()
decl_stmt|;
if|if
condition|(
name|sd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Storage descriptor is not defined for index."
argument_list|)
throw|;
block|}
name|MStorageDescriptor
name|msd
init|=
name|this
operator|.
name|convertToMStorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|MTable
name|origTable
init|=
name|getMTable
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|origTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Original table does not exist for the given index."
argument_list|)
throw|;
block|}
name|MTable
name|indexTable
init|=
name|getMTable
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getIndexTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Underlying index table does not exist for the given index."
argument_list|)
throw|;
block|}
return|return
operator|new
name|MIndex
argument_list|(
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|origTable
argument_list|,
name|index
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|index
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|index
operator|.
name|getParameters
argument_list|()
argument_list|,
name|indexTable
argument_list|,
name|msd
argument_list|,
name|index
operator|.
name|getIndexHandlerClass
argument_list|()
argument_list|,
name|index
operator|.
name|isDeferredRebuild
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MIndex
name|index
init|=
name|getMIndex
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|private
name|MIndex
name|getMIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|originalTblName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
name|MIndex
name|midx
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|originalTblName
operator|=
name|originalTblName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|MTable
name|mtbl
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|originalTblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtbl
operator|==
literal|null
condition|)
block|{
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MIndex
operator|.
name|class
argument_list|,
literal|"origTable.tableName == t1&& origTable.database.name == t2&& indexName == t3"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|midx
operator|=
operator|(
name|MIndex
operator|)
name|query
operator|.
name|execute
argument_list|(
name|originalTblName
argument_list|,
name|dbName
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|midx
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|midx
return|;
block|}
annotation|@
name|Override
specifier|public
name|Index
name|getIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MIndex
name|mIndex
init|=
name|this
operator|.
name|getMIndex
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
name|Index
name|ret
init|=
name|convertToIndex
argument_list|(
name|mIndex
argument_list|)
decl_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|Index
name|convertToIndex
parameter_list|(
name|MIndex
name|mIndex
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mIndex
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Index
argument_list|(
name|mIndex
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getIndexHandlerClass
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getOrigTable
argument_list|()
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getOrigTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getIndexTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|this
operator|.
name|convertToStorageDescriptor
argument_list|(
name|mIndex
operator|.
name|getSd
argument_list|()
argument_list|)
argument_list|,
name|mIndex
operator|.
name|getParameters
argument_list|()
argument_list|,
name|mIndex
operator|.
name|getDeferredRebuild
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|getIndexes
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MIndex
argument_list|>
name|mIndexList
init|=
name|listMIndexes
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<
name|Index
argument_list|>
argument_list|(
name|mIndexList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MIndex
name|midx
range|:
name|mIndexList
control|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|this
operator|.
name|convertToIndex
argument_list|(
name|midx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|indexes
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|MIndex
argument_list|>
name|listMIndexes
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MIndex
argument_list|>
name|mindexes
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMIndexes"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|origTableName
operator|=
name|origTableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MIndex
operator|.
name|class
argument_list|,
literal|"origTable.tableName == t1&& origTable.database.name == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mindexes
operator|=
operator|(
name|List
argument_list|<
name|MIndex
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|origTableName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMIndexes"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mindexes
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMIndexes"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mindexes
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listIndexNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listIndexNames"
argument_list|)
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|origTableName
operator|=
name|origTableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select indexName from org.apache.hadoop.hive.metastore.model.MIndex "
operator|+
literal|"where origTable.database.name == t1&& origTable.tableName == t2 "
operator|+
literal|"order by indexName asc"
argument_list|)
decl_stmt|;
name|q
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|q
operator|.
name|setResult
argument_list|(
literal|"indexName"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|q
operator|.
name|execute
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|pns
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|pns
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addRole
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|ownerName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MRole
name|nameCheck
init|=
name|this
operator|.
name|getMRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameCheck
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Role "
operator|+
name|roleName
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|MRole
name|mRole
init|=
operator|new
name|MRole
argument_list|(
name|roleName
argument_list|,
name|now
argument_list|,
name|ownerName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mRole
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|MRoleMap
name|roleMap
init|=
literal|null
decl_stmt|;
try|try
block|{
name|roleMap
operator|=
name|this
operator|.
name|getMSecurityUserRoleMap
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
if|if
condition|(
name|roleMap
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Principal "
operator|+
name|userName
operator|+
literal|" already has the role "
operator|+
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
throw|;
block|}
name|openTransaction
argument_list|()
expr_stmt|;
name|MRole
name|mRole
init|=
name|getMRole
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|MRoleMap
name|roleMember
init|=
operator|new
name|MRoleMap
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|mRole
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
operator|.
name|toString
argument_list|()
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|roleMember
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokeRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MRoleMap
name|roleMember
init|=
name|getMSecurityUserRoleMap
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
decl_stmt|;
name|pm
operator|.
name|deletePersistent
argument_list|(
name|roleMember
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|private
name|MRoleMap
name|getMSecurityUserRoleMap
parameter_list|(
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|roleName
parameter_list|)
block|{
name|MRoleMap
name|mRoleMember
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRoleMap
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& role.roleName == t3"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mRoleMember
operator|=
operator|(
name|MRoleMap
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|roleName
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mRoleMember
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mRoleMember
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MRole
name|mRol
init|=
name|getMRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mRol
argument_list|)
expr_stmt|;
if|if
condition|(
name|mRol
operator|!=
literal|null
condition|)
block|{
comment|// first remove all the membership, the membership that this role has
comment|// been granted
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roleMap
init|=
name|listRoleMembers
argument_list|(
name|mRol
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleMap
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|roleMap
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roleMember
init|=
name|listMSecurityPrincipalMembershipRole
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleMember
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|roleMember
argument_list|)
expr_stmt|;
block|}
comment|// then remove all the grants
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|userGrants
init|=
name|listPrincipalGlobalGrants
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|userGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|userGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|dbGrants
init|=
name|listPrincipalAllDBGrant
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|dbGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tabPartGrants
init|=
name|listPrincipalAllTableGrants
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabPartGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tabPartGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|partGrants
init|=
name|listPrincipalAllPartitionGrants
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|partGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|tblColumnGrants
init|=
name|listPrincipalAllTableColumnGrants
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblColumnGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|tblColumnGrants
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|partColumnGrants
init|=
name|listPrincipalAllPartitionColumnGrants
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblColumnGrants
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|partColumnGrants
argument_list|)
expr_stmt|;
block|}
comment|// finally remove the role
name|pm
operator|.
name|deletePersistent
argument_list|(
name|mRol
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|private
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|listRoles
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
block|{
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|MRoleMap
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|listRoles
argument_list|(
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupNames
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|listRoles
argument_list|(
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|listRoles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|mRoleMember
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listRoles"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRoleMap
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mRoleMember
operator|=
operator|(
name|List
argument_list|<
name|MRoleMap
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMSecurityUserRoleMap"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mRoleMember
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMSecurityUserRoleMap"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mRoleMember
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|listMSecurityPrincipalMembershipRole
parameter_list|(
specifier|final
name|String
name|roleName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|mRoleMemebership
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMSecurityPrincipalMembershipRole"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRoleMap
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mRoleMemebership
operator|=
operator|(
name|List
argument_list|<
name|MRoleMap
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|roleName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMSecurityPrincipalMembershipRole"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mRoleMemebership
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMSecurityPrincipalMembershipRole"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mRoleMemebership
return|;
block|}
specifier|public
name|Role
name|getRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|MRole
name|mRole
init|=
name|this
operator|.
name|getMRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mRole
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|roleName
operator|+
literal|" role can not be found."
argument_list|)
throw|;
block|}
name|Role
name|ret
init|=
operator|new
name|Role
argument_list|(
name|mRole
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|mRole
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|mRole
operator|.
name|getOwnerName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|MRole
name|getMRole
parameter_list|(
name|String
name|roleName
parameter_list|)
block|{
name|MRole
name|mrole
init|=
literal|null
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRole
operator|.
name|class
argument_list|,
literal|"roleName == t1"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mrole
operator|=
operator|(
name|MRole
operator|)
name|query
operator|.
name|execute
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mrole
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mrole
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listRoleNames
parameter_list|()
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listAllRoleNames"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
literal|"select roleName from org.apache.hadoop.hive.metastore.model.MRole"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setResult
argument_list|(
literal|"roleName"
argument_list|)
expr_stmt|;
name|Collection
name|names
init|=
operator|(
name|Collection
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|roleNames
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|roleNames
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getUserPrivilegeSet
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|user
init|=
name|this
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|userPriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|user
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|user
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MGlobalPrivilege
name|item
init|=
name|user
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|userPriv
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|grantInfos
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUserPrivileges
argument_list|(
name|userPriv
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|groupNames
operator|!=
literal|null
operator|&&
name|groupNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|groupPriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|group
init|=
name|this
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|group
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|group
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MGlobalPrivilege
name|item
init|=
name|group
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|groupPriv
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|grantInfos
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setGroupPrivileges
argument_list|(
name|groupPriv
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|getDBPrivilege
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|userNameDbPriv
init|=
name|this
operator|.
name|listPrincipalDBGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|userNameDbPriv
operator|!=
literal|null
operator|&&
name|userNameDbPriv
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|userNameDbPriv
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userNameDbPriv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MDBPrivilege
name|item
init|=
name|userNameDbPriv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|grantInfos
return|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getDBPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|dbUserPriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|dbUserPriv
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|getDBPrivilege
argument_list|(
name|dbName
argument_list|,
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUserPrivileges
argument_list|(
name|dbUserPriv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupNames
operator|!=
literal|null
operator|&&
name|groupNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|dbGroupPriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|dbGroupPriv
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|getDBPrivilege
argument_list|(
name|dbName
argument_list|,
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setGroupPrivileges
argument_list|(
name|dbGroupPriv
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roles
init|=
name|listRoles
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
operator|&&
name|roles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|dbRolePriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MRoleMap
name|role
range|:
name|roles
control|)
block|{
name|String
name|name
init|=
name|role
operator|.
name|getRole
argument_list|()
operator|.
name|getRoleName
argument_list|()
decl_stmt|;
name|dbRolePriv
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|getDBPrivilege
argument_list|(
name|dbName
argument_list|,
name|name
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setRolePrivileges
argument_list|(
name|dbRolePriv
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getPartitionPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partition
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|partUserPriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|partUserPriv
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|getPartitionPrivilege
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
argument_list|,
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUserPrivileges
argument_list|(
name|partUserPriv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupNames
operator|!=
literal|null
operator|&&
name|groupNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|partGroupPriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|partGroupPriv
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|getPartitionPrivilege
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
argument_list|,
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setGroupPrivileges
argument_list|(
name|partGroupPriv
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roles
init|=
name|listRoles
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
operator|&&
name|roles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|partRolePriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MRoleMap
name|role
range|:
name|roles
control|)
block|{
name|String
name|roleName
init|=
name|role
operator|.
name|getRole
argument_list|()
operator|.
name|getRoleName
argument_list|()
decl_stmt|;
name|partRolePriv
operator|.
name|put
argument_list|(
name|roleName
argument_list|,
name|getPartitionPrivilege
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
argument_list|,
name|roleName
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setRolePrivileges
argument_list|(
name|partRolePriv
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getTablePrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|tableUserPriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|tableUserPriv
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|getTablePrivilege
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUserPrivileges
argument_list|(
name|tableUserPriv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupNames
operator|!=
literal|null
operator|&&
name|groupNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|tableGroupPriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|tableGroupPriv
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|getTablePrivilege
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setGroupPrivileges
argument_list|(
name|tableGroupPriv
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roles
init|=
name|listRoles
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
operator|&&
name|roles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|tableRolePriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MRoleMap
name|role
range|:
name|roles
control|)
block|{
name|String
name|roleName
init|=
name|role
operator|.
name|getRole
argument_list|()
operator|.
name|getRoleName
argument_list|()
decl_stmt|;
name|tableRolePriv
operator|.
name|put
argument_list|(
name|roleName
argument_list|,
name|getTablePrivilege
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|roleName
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setRolePrivileges
argument_list|(
name|tableRolePriv
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getColumnPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|columnName
operator|=
name|columnName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|columnUserPriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|columnUserPriv
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|getColumnPrivilege
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
name|partitionName
argument_list|,
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUserPrivileges
argument_list|(
name|columnUserPriv
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupNames
operator|!=
literal|null
operator|&&
name|groupNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|columnGroupPriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|groupName
range|:
name|groupNames
control|)
block|{
name|columnGroupPriv
operator|.
name|put
argument_list|(
name|groupName
argument_list|,
name|getColumnPrivilege
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
name|partitionName
argument_list|,
name|groupName
argument_list|,
name|PrincipalType
operator|.
name|GROUP
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setGroupPrivileges
argument_list|(
name|columnGroupPriv
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roles
init|=
name|listRoles
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
operator|&&
name|roles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|columnRolePriv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MRoleMap
name|role
range|:
name|roles
control|)
block|{
name|String
name|roleName
init|=
name|role
operator|.
name|getRole
argument_list|()
operator|.
name|getRoleName
argument_list|()
decl_stmt|;
name|columnRolePriv
operator|.
name|put
argument_list|(
name|roleName
argument_list|,
name|getColumnPrivilege
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|,
name|partitionName
argument_list|,
name|roleName
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setRolePrivileges
argument_list|(
name|columnRolePriv
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|getPartitionPrivilege
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|userNameTabPartPriv
init|=
name|this
operator|.
name|listPrincipalPartitionGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
if|if
condition|(
name|userNameTabPartPriv
operator|!=
literal|null
operator|&&
name|userNameTabPartPriv
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|userNameTabPartPriv
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userNameTabPartPriv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MPartitionPrivilege
name|item
init|=
name|userNameTabPartPriv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|grantInfos
return|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|PrincipalType
name|getPrincipalTypeFromStr
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|==
literal|null
condition|?
literal|null
else|:
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|str
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|getTablePrivilege
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|userNameTabPartPriv
init|=
name|this
operator|.
name|listAllTableGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|userNameTabPartPriv
operator|!=
literal|null
operator|&&
name|userNameTabPartPriv
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|userNameTabPartPriv
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userNameTabPartPriv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MTablePrivilege
name|item
init|=
name|userNameTabPartPriv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|grantInfos
return|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|getColumnPrivilege
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|columnName
operator|=
name|columnName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|partitionName
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|userNameColumnPriv
init|=
name|this
operator|.
name|listPrincipalTableColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|userNameColumnPriv
operator|!=
literal|null
operator|&&
name|userNameColumnPriv
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|userNameColumnPriv
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userNameColumnPriv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MTableColumnPrivilege
name|item
init|=
name|userNameColumnPriv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|grantInfos
return|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|userNameColumnPriv
init|=
name|this
operator|.
name|listPrincipalPartitionColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|userNameColumnPriv
operator|!=
literal|null
operator|&&
name|userNameColumnPriv
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grantInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|userNameColumnPriv
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userNameColumnPriv
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MPartitionColumnPrivilege
name|item
init|=
name|userNameColumnPriv
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|grantInfos
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|item
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|item
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|item
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|getPrincipalTypeFromStr
argument_list|(
name|item
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|item
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|grantInfos
return|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantPrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|persistentObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privilegeList
init|=
name|privileges
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegeList
operator|!=
literal|null
operator|&&
name|privilegeList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privIter
init|=
name|privilegeList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|privSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|privIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HiveObjectPrivilege
name|privDef
init|=
name|privIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|hiveObject
init|=
name|privDef
operator|.
name|getHiveObject
argument_list|()
decl_stmt|;
name|String
name|privilegeStr
init|=
name|privDef
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
name|String
index|[]
name|privs
init|=
name|privilegeStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|privDef
operator|.
name|getPrincipalName
argument_list|()
decl_stmt|;
name|PrincipalType
name|principalType
init|=
name|privDef
operator|.
name|getPrincipalType
argument_list|()
decl_stmt|;
name|String
name|grantor
init|=
name|privDef
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getGrantor
argument_list|()
decl_stmt|;
name|String
name|grantorType
init|=
name|privDef
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getGrantorType
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|grantOption
init|=
name|privDef
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|isGrantOption
argument_list|()
decl_stmt|;
name|privSet
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|GLOBAL
condition|)
block|{
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|globalPrivs
init|=
name|this
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
if|if
condition|(
name|globalPrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MGlobalPrivilege
name|priv
range|:
name|globalPrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MGlobalPrivilege
name|mGlobalPrivs
init|=
operator|new
name|MGlobalPrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mGlobalPrivs
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|DATABASE
condition|)
block|{
name|MDatabase
name|dbObj
init|=
name|getMDatabase
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbObj
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|dbPrivs
init|=
name|this
operator|.
name|listPrincipalDBGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbPrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MDBPrivilege
name|priv
range|:
name|dbPrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted on database "
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
operator|+
literal|" by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MDBPrivilege
name|mDb
init|=
operator|new
name|MDBPrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|dbObj
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mDb
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|TABLE
condition|)
block|{
name|MTable
name|tblObj
init|=
name|getMTable
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblObj
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tablePrivs
init|=
name|this
operator|.
name|listAllTableGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablePrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTablePrivilege
name|priv
range|:
name|tablePrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|!=
literal|null
operator|&&
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted on table ["
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
operator|+
literal|","
operator|+
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|+
literal|"] by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MTablePrivilege
name|mTab
init|=
operator|new
name|MTablePrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tblObj
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mTab
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|PARTITION
condition|)
block|{
name|MPartition
name|partObj
init|=
name|this
operator|.
name|getMPartition
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|partObj
operator|!=
literal|null
condition|)
block|{
name|partName
operator|=
name|partObj
operator|.
name|getPartitionName
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|partPrivs
init|=
name|this
operator|.
name|listPrincipalPartitionGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partObj
operator|.
name|getPartitionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|partPrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MPartitionPrivilege
name|priv
range|:
name|partPrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted on partition ["
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
operator|+
literal|","
operator|+
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|+
literal|","
operator|+
name|partName
operator|+
literal|"] by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MPartitionPrivilege
name|mTab
init|=
operator|new
name|MPartitionPrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|partObj
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mTab
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|COLUMN
condition|)
block|{
name|MTable
name|tblObj
init|=
name|getMTable
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblObj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hiveObject
operator|.
name|getPartValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|MPartition
name|partObj
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|colPrivs
init|=
literal|null
decl_stmt|;
name|partObj
operator|=
name|this
operator|.
name|getMPartition
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|partObj
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|colPrivs
operator|=
name|this
operator|.
name|listPrincipalPartitionColumnGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partObj
operator|.
name|getPartitionName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|colPrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MPartitionColumnPrivilege
name|priv
range|:
name|colPrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted on column "
operator|+
name|hiveObject
operator|.
name|getColumnName
argument_list|()
operator|+
literal|" ["
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
operator|+
literal|","
operator|+
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|+
literal|","
operator|+
name|partObj
operator|.
name|getPartitionName
argument_list|()
operator|+
literal|"] by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MPartitionColumnPrivilege
name|mCol
init|=
operator|new
name|MPartitionColumnPrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|partObj
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mCol
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|colPrivs
init|=
literal|null
decl_stmt|;
name|colPrivs
operator|=
name|this
operator|.
name|listPrincipalTableColumnGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|colPrivs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MTableColumnPrivilege
name|priv
range|:
name|colPrivs
control|)
block|{
if|if
condition|(
name|priv
operator|.
name|getGrantor
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|grantor
argument_list|)
condition|)
block|{
name|privSet
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
if|if
condition|(
name|privSet
operator|.
name|contains
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|privilege
operator|+
literal|" is already granted on column "
operator|+
name|hiveObject
operator|.
name|getColumnName
argument_list|()
operator|+
literal|" ["
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
operator|+
literal|","
operator|+
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|+
literal|"] by "
operator|+
name|grantor
argument_list|)
throw|;
block|}
name|MTableColumnPrivilege
name|mCol
init|=
operator|new
name|MTableColumnPrivilege
argument_list|(
name|userName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tblObj
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|privilege
argument_list|,
name|now
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|mCol
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|persistentObjs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|makePersistentAll
argument_list|(
name|persistentObjs
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|committed
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokePrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|persistentObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privilegeList
init|=
name|privileges
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegeList
operator|!=
literal|null
operator|&&
name|privilegeList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privIter
init|=
name|privilegeList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|privIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HiveObjectPrivilege
name|privDef
init|=
name|privIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|HiveObjectRef
name|hiveObject
init|=
name|privDef
operator|.
name|getHiveObject
argument_list|()
decl_stmt|;
name|String
name|privilegeStr
init|=
name|privDef
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegeStr
operator|==
literal|null
operator|||
name|privilegeStr
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|privs
init|=
name|privilegeStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|privDef
operator|.
name|getPrincipalName
argument_list|()
decl_stmt|;
name|PrincipalType
name|principalType
init|=
name|privDef
operator|.
name|getPrincipalType
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|GLOBAL
condition|)
block|{
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|mSecUser
init|=
name|this
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mSecUser
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MGlobalPrivilege
name|userGrant
range|:
name|mSecUser
control|)
block|{
name|String
name|userGrantPrivs
init|=
name|userGrant
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilege
operator|.
name|equals
argument_list|(
name|userGrantPrivs
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|userGrant
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No user grant found for privileges "
operator|+
name|privilege
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|DATABASE
condition|)
block|{
name|MDatabase
name|dbObj
init|=
name|getMDatabase
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbObj
operator|!=
literal|null
condition|)
block|{
name|String
name|db
init|=
name|hiveObject
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|dbGrants
init|=
name|this
operator|.
name|listPrincipalDBGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|db
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MDBPrivilege
name|dbGrant
range|:
name|dbGrants
control|)
block|{
name|String
name|dbGrantPriv
init|=
name|dbGrant
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilege
operator|.
name|equals
argument_list|(
name|dbGrantPriv
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|dbGrant
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No database grant found for privileges "
operator|+
name|privilege
operator|+
literal|" on database "
operator|+
name|db
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|TABLE
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|tableGrants
init|=
name|this
operator|.
name|listAllTableGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MTablePrivilege
name|tabGrant
range|:
name|tableGrants
control|)
block|{
name|String
name|tableGrantPriv
init|=
name|tabGrant
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilege
operator|.
name|equalsIgnoreCase
argument_list|(
name|tableGrantPriv
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|tabGrant
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No grant ("
operator|+
name|privilege
operator|+
literal|") found "
operator|+
literal|" on table "
operator|+
name|hiveObject
operator|.
name|getObjectName
argument_list|()
operator|+
literal|", database is "
operator|+
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|PARTITION
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Table
name|tabObj
init|=
name|this
operator|.
name|getTable
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hiveObject
operator|.
name|getPartValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partName
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tabObj
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|partitionGrants
init|=
name|this
operator|.
name|listPrincipalPartitionGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MPartitionPrivilege
name|partGrant
range|:
name|partitionGrants
control|)
block|{
name|String
name|partPriv
init|=
name|partGrant
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|partPriv
operator|.
name|equalsIgnoreCase
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|partGrant
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No grant ("
operator|+
name|privilege
operator|+
literal|") found "
operator|+
literal|" on table "
operator|+
name|tabObj
operator|.
name|getTableName
argument_list|()
operator|+
literal|", partition is "
operator|+
name|partName
operator|+
literal|", database is "
operator|+
name|tabObj
operator|.
name|getDbName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|COLUMN
condition|)
block|{
name|Table
name|tabObj
init|=
name|this
operator|.
name|getTable
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hiveObject
operator|.
name|getPartValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partName
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tabObj
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecCol
init|=
name|listPrincipalPartitionColumnGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partName
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mSecCol
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MPartitionColumnPrivilege
name|col
range|:
name|mSecCol
control|)
block|{
name|String
name|colPriv
init|=
name|col
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|colPriv
operator|.
name|equalsIgnoreCase
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No grant ("
operator|+
name|privilege
operator|+
literal|") found "
operator|+
literal|" on table "
operator|+
name|tabObj
operator|.
name|getTableName
argument_list|()
operator|+
literal|", partition is "
operator|+
name|partName
operator|+
literal|", column name = "
operator|+
name|hiveObject
operator|.
name|getColumnName
argument_list|()
operator|+
literal|", database is "
operator|+
name|tabObj
operator|.
name|getDbName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mSecCol
init|=
name|listPrincipalTableColumnGrants
argument_list|(
name|userName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mSecCol
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|privilege
range|:
name|privs
control|)
block|{
for|for
control|(
name|MTableColumnPrivilege
name|col
range|:
name|mSecCol
control|)
block|{
name|String
name|colPriv
init|=
name|col
operator|.
name|getPrivilege
argument_list|()
decl_stmt|;
if|if
condition|(
name|colPriv
operator|.
name|equalsIgnoreCase
argument_list|(
name|privilege
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|persistentObjs
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"No grant ("
operator|+
name|privilege
operator|+
literal|") found "
operator|+
literal|" on table "
operator|+
name|tabObj
operator|.
name|getTableName
argument_list|()
operator|+
literal|", column name = "
operator|+
name|hiveObject
operator|.
name|getColumnName
argument_list|()
operator|+
literal|", database is "
operator|+
name|tabObj
operator|.
name|getDbName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|persistentObjs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|persistentObjs
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|committed
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|listRoleMembers
parameter_list|(
name|MRole
name|mRol
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|mRoleMemeberList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMSecurityUserRoleMember"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MRoleMap
operator|.
name|class
argument_list|,
literal|"role.roleName == t1"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mRoleMemeberList
operator|=
operator|(
name|List
argument_list|<
name|MRoleMap
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|mRol
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMSecurityUserRoleMember"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mRoleMemeberList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMSecurityUserRoleMember"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mRoleMemeberList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|listPrincipalGlobalGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|userNameDbPriv
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|principalName
operator|!=
literal|null
condition|)
block|{
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MGlobalPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2 "
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|userNameDbPriv
operator|=
operator|(
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|userNameDbPriv
argument_list|)
expr_stmt|;
block|}
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|userNameDbPriv
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|listPrincipalDBGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|mSecurityDBList
init|=
literal|null
decl_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalDBGrants"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDBPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& database.name == t3"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|mSecurityDBList
operator|=
operator|(
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalDBGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityDBList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalDBGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityDBList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|listPrincipalAllDBGrant
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|mSecurityDBList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalAllDBGrant"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDBPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityDBList
operator|=
operator|(
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalAllDBGrant"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityDBList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllDBGrant"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityDBList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|listAllTableGrants
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mSecurityTabList
init|=
literal|null
decl_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listAllTableGrants"
argument_list|)
expr_stmt|;
name|String
name|queryStr
init|=
literal|"table.tableName == t1&& table.database.name == t2"
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTablePrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityTabList
operator|=
operator|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listAllTableGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listAllTableGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityTabList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|listTableAllPartitionGrants
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mSecurityTabPartList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listTableAllPartitionGrants"
argument_list|)
expr_stmt|;
name|String
name|queryStr
init|=
literal|"partition.table.tableName == t1&& partition.table.database.name == t2"
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listTableAllPartitionGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listTableAllPartitionGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|listTableAllColumnGrants
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mTblColPrivilegeList
init|=
literal|null
decl_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listTableAllColumnGrants"
argument_list|)
expr_stmt|;
name|String
name|queryStr
init|=
literal|"table.tableName == t1&& table.database.name == t2"
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnPrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mTblColPrivilegeList
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listTableAllColumnGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mTblColPrivilegeList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listTableAllColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mTblColPrivilegeList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|listTableAllPartitionColumnGrants
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecurityColList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listTableAllPartitionColumnGrants"
argument_list|)
expr_stmt|;
name|String
name|queryStr
init|=
literal|"partition.table.tableName == t1&& partition.table.database.name == t2"
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityColList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listTableAllPartitionColumnGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityColList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listTableAllPartitionColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityColList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|listPartitionAllColumnGrants
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecurityColList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPartitionAllColumnGrants"
argument_list|)
expr_stmt|;
name|String
name|queryStr
init|=
literal|"partition.table.tableName == t1&& partition.table.database.name == t2&& partition.partitionName == t3"
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|mSecurityColList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|partName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPartitionAllColumnGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityColList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPartitionAllColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityColList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|listDatabaseGrants
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listDatabaseGrants"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDBPrivilege
operator|.
name|class
argument_list|,
literal|"database.name == t1"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|mSecurityDBList
init|=
operator|(
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listDatabaseGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityDBList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listDatabaseGrants"
argument_list|)
expr_stmt|;
return|return
name|mSecurityDBList
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|listPartitionGrants
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mSecurityTabPartList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPartitionGrants"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
literal|"partition.table.tableName == t1&& partition.table.database.name == t2&& partition.partitionName == t3"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
name|partName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPartitionGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPartitionGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|listAllTableGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mSecurityTabPartList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listAllTableGrants"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTablePrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& table.tableName == t3&& table.database.name == t4"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, java.lang.String t4"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listAllTableGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listAllTableGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|listPrincipalPartitionGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mSecurityTabPartList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listMSecurityPrincipalPartitionGrant"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& partition.table.tableName == t3 "
operator|+
literal|"&& partition.table.database.name == t4&& partition.partitionName == t5"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, java.lang.String t4, "
operator|+
literal|"java.lang.String t5"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|partName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listMSecurityPrincipalPartitionGrant"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listMSecurityPrincipalPartitionGrant"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|listPrincipalTableColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|columnName
operator|=
name|columnName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mSecurityColList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalTableColumnGrants"
argument_list|)
expr_stmt|;
name|String
name|queryStr
init|=
literal|"principalName == t1&& principalType == t2&& "
operator|+
literal|"table.tableName == t3&& table.database.name == t4&&  columnName == t5 "
decl_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnPrivilege
operator|.
name|class
argument_list|,
name|queryStr
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, "
operator|+
literal|"java.lang.String t4, java.lang.String t5"
argument_list|)
expr_stmt|;
name|mSecurityColList
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|columnName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalTableColumnGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityColList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalTableColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityColList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|columnName
operator|=
name|columnName
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecurityColList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalPartitionColumnGrants"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2&& partition.table.tableName == t3 "
operator|+
literal|"&& partition.table.database.name == t4&& partition.partitionName == t5&& columnName == t6"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, "
operator|+
literal|"java.lang.String t4, java.lang.String t5, java.lang.String t6"
argument_list|)
expr_stmt|;
name|mSecurityColList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|dbName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalPartitionColumnGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityColList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalPartitionColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityColList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|listPrincipalAllTableGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mSecurityTabPartList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalAllTableGrants"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTablePrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalAllTableGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllTableGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|listPrincipalAllPartitionGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mSecurityTabPartList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalAllPartitionGrants"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityTabPartList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalAllPartitionGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityTabPartList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllPartitionGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityTabPartList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|listPrincipalAllTableColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mSecurityColumnList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalAllTableColumnGrants"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityColumnList
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalAllTableColumnGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityColumnList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllTableColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityColumnList
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|listPrincipalAllPartitionColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mSecurityColumnList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Executing listPrincipalAllTableColumnGrants"
argument_list|)
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnPrivilege
operator|.
name|class
argument_list|,
literal|"principalName == t1&& principalType == t2"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2"
argument_list|)
expr_stmt|;
name|mSecurityColumnList
operator|=
operator|(
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|principalName
argument_list|,
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing query for listPrincipalAllTableColumnGrants"
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSecurityColumnList
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done retrieving all objects for listPrincipalAllTableColumnGrants"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mSecurityColumnList
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|UnknownTableException
throws|,
name|MetaException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
name|Collection
argument_list|<
name|MPartitionEvent
argument_list|>
name|partEvents
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin Executing isPartitionMarkedForEvent"
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionEvent
operator|.
name|class
argument_list|,
literal|"dbName == t1&& tblName == t2&& partName == t3&& eventType == t4"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3, int t4"
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
comment|// Make sure dbName and tblName are valid.
if|if
condition|(
literal|null
operator|==
name|tbl
condition|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
literal|"Table: "
operator|+
name|tblName
operator|+
literal|" is not found."
argument_list|)
throw|;
block|}
name|partEvents
operator|=
operator|(
name|Collection
argument_list|<
name|MPartitionEvent
argument_list|>
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|getPartitionStr
argument_list|(
name|tbl
argument_list|,
name|partName
argument_list|)
argument_list|,
name|evtType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|partEvents
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing isPartitionMarkedForEvent"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
name|partEvents
operator|!=
literal|null
operator|&&
operator|!
name|partEvents
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|markPartitionForEvent
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing markPartitionForEvent"
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Make sure dbName and tblName are valid.
if|if
condition|(
literal|null
operator|==
name|tbl
condition|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
literal|"Table: "
operator|+
name|tblName
operator|+
literal|" is not found."
argument_list|)
throw|;
block|}
name|pm
operator|.
name|makePersistent
argument_list|(
operator|new
name|MPartitionEvent
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|getPartitionStr
argument_list|(
name|tbl
argument_list|,
name|partName
argument_list|)
argument_list|,
name|evtType
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing markPartitionForEvent"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tbl
return|;
block|}
specifier|private
name|String
name|getPartitionStr
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|)
throws|throws
name|InvalidPartitionException
block|{
if|if
condition|(
name|tbl
operator|.
name|getPartitionKeysSize
argument_list|()
operator|!=
name|partName
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidPartitionException
argument_list|(
literal|"Number of partition columns in table: "
operator|+
name|tbl
operator|.
name|getPartitionKeysSize
argument_list|()
operator|+
literal|" doesn't match with number of supplied partition values: "
operator|+
name|partName
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|storedVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|tbl
operator|.
name|getPartitionKeysSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|partKey
range|:
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|String
name|partVal
init|=
name|partName
operator|.
name|get
argument_list|(
name|partKey
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|partVal
condition|)
block|{
throw|throw
operator|new
name|InvalidPartitionException
argument_list|(
literal|"No value found for partition column: "
operator|+
name|partKey
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|storedVals
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
block|}
return|return
name|join
argument_list|(
name|storedVals
argument_list|,
literal|','
argument_list|)
return|;
block|}
comment|/** The following API    *    *  - executeJDOQLSelect    *    * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.    *    */
specifier|public
name|Collection
argument_list|<
name|?
argument_list|>
name|executeJDOQLSelect
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|result
operator|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|q
operator|.
name|execute
argument_list|()
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** The following API   *   *  - executeJDOQLUpdate   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
specifier|public
name|long
name|executeJDOQLUpdate
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|long
name|numUpdated
init|=
literal|0
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|numUpdated
operator|=
operator|(
name|Long
operator|)
name|q
operator|.
name|execute
argument_list|()
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
return|return
name|numUpdated
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** The following API   *   *  - listFSRoots   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|listFSRoots
parameter_list|()
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fsRoots
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDatabase
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MDatabase
argument_list|>
name|mDBs
init|=
operator|(
name|List
argument_list|<
name|MDatabase
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mDBs
argument_list|)
expr_stmt|;
for|for
control|(
name|MDatabase
name|mDB
range|:
name|mDBs
control|)
block|{
name|fsRoots
operator|.
name|add
argument_list|(
name|mDB
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
return|return
name|fsRoots
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|shouldUpdateURI
parameter_list|(
name|URI
name|onDiskUri
parameter_list|,
name|URI
name|inputUri
parameter_list|)
block|{
name|String
name|onDiskHost
init|=
name|onDiskUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|inputHost
init|=
name|inputUri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|onDiskPort
init|=
name|onDiskUri
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|int
name|inputPort
init|=
name|inputUri
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|String
name|onDiskScheme
init|=
name|onDiskUri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|inputScheme
init|=
name|inputUri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
comment|//compare ports
if|if
condition|(
name|inputPort
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|inputPort
operator|!=
name|onDiskPort
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|//compare schemes
if|if
condition|(
name|inputScheme
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|onDiskScheme
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|inputScheme
operator|.
name|equalsIgnoreCase
argument_list|(
name|onDiskScheme
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|//compare hosts
if|if
condition|(
name|onDiskHost
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|inputHost
operator|.
name|equalsIgnoreCase
argument_list|(
name|onDiskHost
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
class|class
name|UpdateMDatabaseURIRetVal
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
decl_stmt|;
name|UpdateMDatabaseURIRetVal
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBadRecords
parameter_list|()
block|{
return|return
name|badRecords
return|;
block|}
specifier|public
name|void
name|setBadRecords
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUpdateLocations
parameter_list|()
block|{
return|return
name|updateLocations
return|;
block|}
specifier|public
name|void
name|setUpdateLocations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
block|}
comment|/** The following APIs   *   *  - updateMDatabaseURI   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
specifier|public
name|UpdateMDatabaseURIRetVal
name|updateMDatabaseURI
parameter_list|(
name|URI
name|oldLoc
parameter_list|,
name|URI
name|newLoc
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|UpdateMDatabaseURIRetVal
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDatabase
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MDatabase
argument_list|>
name|mDBs
init|=
operator|(
name|List
argument_list|<
name|MDatabase
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mDBs
argument_list|)
expr_stmt|;
for|for
control|(
name|MDatabase
name|mDB
range|:
name|mDBs
control|)
block|{
name|URI
name|locationURI
init|=
literal|null
decl_stmt|;
name|String
name|location
init|=
name|mDB
operator|.
name|getLocationUri
argument_list|()
decl_stmt|;
try|try
block|{
name|locationURI
operator|=
operator|new
name|URI
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locationURI
operator|==
literal|null
condition|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shouldUpdateURI
argument_list|(
name|locationURI
argument_list|,
name|oldLoc
argument_list|)
condition|)
block|{
name|String
name|dbLoc
init|=
name|mDB
operator|.
name|getLocationUri
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|oldLoc
operator|.
name|toString
argument_list|()
argument_list|,
name|newLoc
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|updateLocations
operator|.
name|put
argument_list|(
name|locationURI
operator|.
name|toString
argument_list|()
argument_list|,
name|dbLoc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|mDB
operator|.
name|setLocationUri
argument_list|(
name|dbLoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
name|retVal
operator|=
operator|new
name|UpdateMDatabaseURIRetVal
argument_list|(
name|badRecords
argument_list|,
name|updateLocations
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|UpdateMStorageDescriptorTblPropURIRetVal
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
decl_stmt|;
name|UpdateMStorageDescriptorTblPropURIRetVal
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBadRecords
parameter_list|()
block|{
return|return
name|badRecords
return|;
block|}
specifier|public
name|void
name|setBadRecords
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUpdateLocations
parameter_list|()
block|{
return|return
name|updateLocations
return|;
block|}
specifier|public
name|void
name|setUpdateLocations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
block|}
comment|/** The following APIs   *   *  - updateMStorageDescriptorTblPropURI   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
specifier|public
name|UpdateMStorageDescriptorTblPropURIRetVal
name|updateMStorageDescriptorTblPropURI
parameter_list|(
name|URI
name|oldLoc
parameter_list|,
name|URI
name|newLoc
parameter_list|,
name|String
name|tblPropKey
parameter_list|,
name|boolean
name|isDryRun
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|UpdateMStorageDescriptorTblPropURIRetVal
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MStorageDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
name|mSDSs
init|=
operator|(
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSDSs
argument_list|)
expr_stmt|;
for|for
control|(
name|MStorageDescriptor
name|mSDS
range|:
name|mSDSs
control|)
block|{
name|URI
name|tablePropLocationURI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mSDS
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|tblPropKey
argument_list|)
condition|)
block|{
name|String
name|tablePropLocation
init|=
name|mSDS
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|tblPropKey
argument_list|)
decl_stmt|;
try|try
block|{
name|tablePropLocationURI
operator|=
operator|new
name|URI
argument_list|(
name|tablePropLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|tablePropLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|tablePropLocation
argument_list|)
expr_stmt|;
block|}
comment|// if tablePropKey that was passed in lead to a valid URI resolution, update it if
comment|//parts of it match the old-NN-loc, else add to badRecords
if|if
condition|(
name|tablePropLocationURI
operator|==
literal|null
condition|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|tablePropLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shouldUpdateURI
argument_list|(
name|tablePropLocationURI
argument_list|,
name|oldLoc
argument_list|)
condition|)
block|{
name|String
name|tblPropLoc
init|=
name|mSDS
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|tblPropKey
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|oldLoc
operator|.
name|toString
argument_list|()
argument_list|,
name|newLoc
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|updateLocations
operator|.
name|put
argument_list|(
name|tablePropLocationURI
operator|.
name|toString
argument_list|()
argument_list|,
name|tblPropLoc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDryRun
condition|)
block|{
name|mSDS
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|tblPropKey
argument_list|,
name|tblPropLoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
name|retVal
operator|=
operator|new
name|UpdateMStorageDescriptorTblPropURIRetVal
argument_list|(
name|badRecords
argument_list|,
name|updateLocations
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|UpdateMStorageDescriptorTblURIRetVal
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
decl_stmt|;
name|UpdateMStorageDescriptorTblURIRetVal
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBadRecords
parameter_list|()
block|{
return|return
name|badRecords
return|;
block|}
specifier|public
name|void
name|setBadRecords
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUpdateLocations
parameter_list|()
block|{
return|return
name|updateLocations
return|;
block|}
specifier|public
name|void
name|setUpdateLocations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
block|}
comment|/** The following APIs   *   *  - updateMStorageDescriptorTblURI   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
specifier|public
name|UpdateMStorageDescriptorTblURIRetVal
name|updateMStorageDescriptorTblURI
parameter_list|(
name|URI
name|oldLoc
parameter_list|,
name|URI
name|newLoc
parameter_list|,
name|boolean
name|isDryRun
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|UpdateMStorageDescriptorTblURIRetVal
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MStorageDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
name|mSDSs
init|=
operator|(
name|List
argument_list|<
name|MStorageDescriptor
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSDSs
argument_list|)
expr_stmt|;
for|for
control|(
name|MStorageDescriptor
name|mSDS
range|:
name|mSDSs
control|)
block|{
name|URI
name|locationURI
init|=
literal|null
decl_stmt|;
name|String
name|location
init|=
name|mSDS
operator|.
name|getLocation
argument_list|()
decl_stmt|;
try|try
block|{
name|locationURI
operator|=
operator|new
name|URI
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|locationURI
operator|==
literal|null
condition|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shouldUpdateURI
argument_list|(
name|locationURI
argument_list|,
name|oldLoc
argument_list|)
condition|)
block|{
name|String
name|tblLoc
init|=
name|mSDS
operator|.
name|getLocation
argument_list|()
operator|.
name|replaceAll
argument_list|(
name|oldLoc
operator|.
name|toString
argument_list|()
argument_list|,
name|newLoc
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|updateLocations
operator|.
name|put
argument_list|(
name|locationURI
operator|.
name|toString
argument_list|()
argument_list|,
name|tblLoc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDryRun
condition|)
block|{
name|mSDS
operator|.
name|setLocation
argument_list|(
name|tblLoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
name|retVal
operator|=
operator|new
name|UpdateMStorageDescriptorTblURIRetVal
argument_list|(
name|badRecords
argument_list|,
name|updateLocations
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|UpdateSerdeURIRetVal
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
decl_stmt|;
name|UpdateSerdeURIRetVal
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBadRecords
parameter_list|()
block|{
return|return
name|badRecords
return|;
block|}
specifier|public
name|void
name|setBadRecords
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
parameter_list|)
block|{
name|this
operator|.
name|badRecords
operator|=
name|badRecords
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUpdateLocations
parameter_list|()
block|{
return|return
name|updateLocations
return|;
block|}
specifier|public
name|void
name|setUpdateLocations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|this
operator|.
name|updateLocations
operator|=
name|updateLocations
expr_stmt|;
block|}
block|}
comment|/** The following APIs   *   *  - updateSerdeURI   *   * is used by HiveMetaTool. This API **shouldn't** be exposed via Thrift.   *   */
specifier|public
name|UpdateSerdeURIRetVal
name|updateSerdeURI
parameter_list|(
name|URI
name|oldLoc
parameter_list|,
name|URI
name|newLoc
parameter_list|,
name|String
name|serdeProp
parameter_list|,
name|boolean
name|isDryRun
parameter_list|)
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|UpdateSerdeURIRetVal
name|retVal
init|=
literal|null
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MSerDeInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MSerDeInfo
argument_list|>
name|mSerdes
init|=
operator|(
name|List
argument_list|<
name|MSerDeInfo
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
decl_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mSerdes
argument_list|)
expr_stmt|;
for|for
control|(
name|MSerDeInfo
name|mSerde
range|:
name|mSerdes
control|)
block|{
if|if
condition|(
name|mSerde
operator|.
name|getParameters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|serdeProp
argument_list|)
condition|)
block|{
name|String
name|schemaLoc
init|=
name|mSerde
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|serdeProp
argument_list|)
decl_stmt|;
name|URI
name|schemaLocURI
init|=
literal|null
decl_stmt|;
try|try
block|{
name|schemaLocURI
operator|=
operator|new
name|URI
argument_list|(
name|schemaLoc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|schemaLoc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|schemaLoc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaLocURI
operator|==
literal|null
condition|)
block|{
name|badRecords
operator|.
name|add
argument_list|(
name|schemaLoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|shouldUpdateURI
argument_list|(
name|schemaLocURI
argument_list|,
name|oldLoc
argument_list|)
condition|)
block|{
name|String
name|newSchemaLoc
init|=
name|schemaLoc
operator|.
name|replaceAll
argument_list|(
name|oldLoc
operator|.
name|toString
argument_list|()
argument_list|,
name|newLoc
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|updateLocations
operator|.
name|put
argument_list|(
name|schemaLocURI
operator|.
name|toString
argument_list|()
argument_list|,
name|newSchemaLoc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDryRun
condition|)
block|{
name|mSerde
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|serdeProp
argument_list|,
name|newSchemaLoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
name|retVal
operator|=
operator|new
name|UpdateSerdeURIRetVal
argument_list|(
name|badRecords
argument_list|,
name|updateLocations
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Methods to persist, maintain and retrieve Column Statistics
specifier|private
name|MTableColumnStatistics
name|convertToMTableColumnStatistics
parameter_list|(
name|ColumnStatisticsDesc
name|statsDesc
parameter_list|,
name|ColumnStatisticsObj
name|statsObj
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
if|if
condition|(
name|statsObj
operator|==
literal|null
operator|||
name|statsDesc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Invalid column stats object"
argument_list|)
throw|;
block|}
name|String
name|dbName
init|=
name|statsDesc
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|statsDesc
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|MTable
name|table
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" for which stats is gathered doesn't exist."
argument_list|)
throw|;
block|}
name|MTableColumnStatistics
name|mColStats
init|=
operator|new
name|MTableColumnStatistics
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|mColStats
operator|.
name|setDbName
argument_list|(
name|statsDesc
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|mColStats
operator|.
name|setTableName
argument_list|(
name|statsDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|mColStats
operator|.
name|setLastAnalyzed
argument_list|(
name|statsDesc
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|mColStats
operator|.
name|setColName
argument_list|(
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|mColStats
operator|.
name|setColType
argument_list|(
name|statsObj
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetBooleanStats
argument_list|()
condition|)
block|{
name|BooleanColumnStatsData
name|boolStats
init|=
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setBooleanStats
argument_list|(
name|boolStats
operator|.
name|getNumTrues
argument_list|()
argument_list|,
name|boolStats
operator|.
name|getNumFalses
argument_list|()
argument_list|,
name|boolStats
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetLongStats
argument_list|()
condition|)
block|{
name|LongColumnStatsData
name|longStats
init|=
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setLongStats
argument_list|(
name|longStats
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|longStats
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|longStats
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|longStats
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetDoubleStats
argument_list|()
condition|)
block|{
name|DoubleColumnStatsData
name|doubleStats
init|=
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setDoubleStats
argument_list|(
name|doubleStats
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|doubleStats
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|doubleStats
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|doubleStats
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetStringStats
argument_list|()
condition|)
block|{
name|StringColumnStatsData
name|stringStats
init|=
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setStringStats
argument_list|(
name|stringStats
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|stringStats
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|stringStats
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
name|stringStats
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetBinaryStats
argument_list|()
condition|)
block|{
name|BinaryColumnStatsData
name|binaryStats
init|=
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBinaryStats
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setBinaryStats
argument_list|(
name|binaryStats
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|binaryStats
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
name|binaryStats
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mColStats
return|;
block|}
specifier|private
name|ColumnStatisticsObj
name|getTableColumnStatisticsObj
parameter_list|(
name|MTableColumnStatistics
name|mStatsObj
parameter_list|)
block|{
name|ColumnStatisticsObj
name|statsObj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|statsObj
operator|.
name|setColType
argument_list|(
name|mStatsObj
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setColName
argument_list|(
name|mStatsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|colType
init|=
name|mStatsObj
operator|.
name|getColType
argument_list|()
decl_stmt|;
name|ColumnStatisticsData
name|colStatsData
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|BooleanColumnStatsData
name|boolStats
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|boolStats
operator|.
name|setNumFalses
argument_list|(
name|mStatsObj
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|boolStats
operator|.
name|setNumTrues
argument_list|(
name|mStatsObj
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|boolStats
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|colStatsData
operator|.
name|setBooleanStats
argument_list|(
name|boolStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|StringColumnStatsData
name|stringStats
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|stringStats
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setAvgColLen
argument_list|(
name|mStatsObj
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setMaxColLen
argument_list|(
name|mStatsObj
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setNumDVs
argument_list|(
name|mStatsObj
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|colStatsData
operator|.
name|setStringStats
argument_list|(
name|stringStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
name|BinaryColumnStatsData
name|binaryStats
init|=
operator|new
name|BinaryColumnStatsData
argument_list|()
decl_stmt|;
name|binaryStats
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|binaryStats
operator|.
name|setAvgColLen
argument_list|(
name|mStatsObj
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
name|binaryStats
operator|.
name|setMaxColLen
argument_list|(
name|mStatsObj
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|colStatsData
operator|.
name|setBinaryStats
argument_list|(
name|binaryStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"bigint"
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"int"
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"smallint"
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"tinyint"
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"timestamp"
argument_list|)
condition|)
block|{
name|LongColumnStatsData
name|longStats
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|longStats
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setHighValue
argument_list|(
name|mStatsObj
operator|.
name|getLongHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setLowValue
argument_list|(
name|mStatsObj
operator|.
name|getLongLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
name|mStatsObj
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|colStatsData
operator|.
name|setLongStats
argument_list|(
name|longStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
name|DoubleColumnStatsData
name|doubleStats
init|=
operator|new
name|DoubleColumnStatsData
argument_list|()
decl_stmt|;
name|doubleStats
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setHighValue
argument_list|(
name|mStatsObj
operator|.
name|getDoubleHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setLowValue
argument_list|(
name|mStatsObj
operator|.
name|getDoubleLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setNumDVs
argument_list|(
name|mStatsObj
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|colStatsData
operator|.
name|setDoubleStats
argument_list|(
name|doubleStats
argument_list|)
expr_stmt|;
block|}
name|statsObj
operator|.
name|setStatsData
argument_list|(
name|colStatsData
argument_list|)
expr_stmt|;
return|return
name|statsObj
return|;
block|}
specifier|private
name|ColumnStatisticsDesc
name|getTableColumnStatisticsDesc
parameter_list|(
name|MTableColumnStatistics
name|mStatsObj
parameter_list|)
block|{
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|statsDesc
operator|.
name|setIsTblLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|mStatsObj
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|mStatsObj
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setLastAnalyzed
argument_list|(
name|mStatsObj
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|statsDesc
return|;
block|}
specifier|private
name|ColumnStatistics
name|convertToTableColumnStatistics
parameter_list|(
name|MTableColumnStatistics
name|mStatsObj
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|mStatsObj
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ColumnStatisticsDesc
name|statsDesc
init|=
name|getTableColumnStatisticsDesc
argument_list|(
name|mStatsObj
argument_list|)
decl_stmt|;
name|ColumnStatisticsObj
name|statsObj
init|=
name|getTableColumnStatisticsObj
argument_list|(
name|mStatsObj
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
name|statsObjs
operator|.
name|add
argument_list|(
name|statsObj
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|colStats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|colStats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|statsObjs
argument_list|)
expr_stmt|;
return|return
name|colStats
return|;
block|}
specifier|private
name|MPartitionColumnStatistics
name|convertToMPartitionColumnStatistics
parameter_list|(
name|ColumnStatisticsDesc
name|statsDesc
parameter_list|,
name|ColumnStatisticsObj
name|statsObj
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVal
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
name|statsDesc
operator|==
literal|null
operator|||
name|statsObj
operator|==
literal|null
operator|||
name|partVal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MPartition
name|partition
init|=
name|getMPartition
argument_list|(
name|statsDesc
operator|.
name|getDbName
argument_list|()
argument_list|,
name|statsDesc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|partition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition for which stats is gathered doesn't exist."
argument_list|)
throw|;
block|}
name|MPartitionColumnStatistics
name|mColStats
init|=
operator|new
name|MPartitionColumnStatistics
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setPartition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|mColStats
operator|.
name|setDbName
argument_list|(
name|statsDesc
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|mColStats
operator|.
name|setTableName
argument_list|(
name|statsDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|mColStats
operator|.
name|setPartitionName
argument_list|(
name|statsDesc
operator|.
name|getPartName
argument_list|()
argument_list|)
expr_stmt|;
name|mColStats
operator|.
name|setLastAnalyzed
argument_list|(
name|statsDesc
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|mColStats
operator|.
name|setColName
argument_list|(
name|statsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|mColStats
operator|.
name|setColType
argument_list|(
name|statsObj
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetBooleanStats
argument_list|()
condition|)
block|{
name|BooleanColumnStatsData
name|boolStats
init|=
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBooleanStats
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setBooleanStats
argument_list|(
name|boolStats
operator|.
name|getNumTrues
argument_list|()
argument_list|,
name|boolStats
operator|.
name|getNumFalses
argument_list|()
argument_list|,
name|boolStats
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetLongStats
argument_list|()
condition|)
block|{
name|LongColumnStatsData
name|longStats
init|=
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setLongStats
argument_list|(
name|longStats
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|longStats
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|longStats
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|longStats
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetDoubleStats
argument_list|()
condition|)
block|{
name|DoubleColumnStatsData
name|doubleStats
init|=
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setDoubleStats
argument_list|(
name|doubleStats
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|doubleStats
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|doubleStats
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|doubleStats
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetStringStats
argument_list|()
condition|)
block|{
name|StringColumnStatsData
name|stringStats
init|=
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setStringStats
argument_list|(
name|stringStats
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|stringStats
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|stringStats
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
name|stringStats
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|isSetBinaryStats
argument_list|()
condition|)
block|{
name|BinaryColumnStatsData
name|binaryStats
init|=
name|statsObj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getBinaryStats
argument_list|()
decl_stmt|;
name|mColStats
operator|.
name|setBinaryStats
argument_list|(
name|binaryStats
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|binaryStats
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
name|binaryStats
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mColStats
return|;
block|}
specifier|private
name|void
name|writeMTableColumnStatistics
parameter_list|(
name|MTableColumnStatistics
name|mStatsObj
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|String
name|dbName
init|=
name|mStatsObj
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|mStatsObj
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|colName
init|=
name|mStatsObj
operator|.
name|getColName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating table level column statistics for db="
operator|+
name|dbName
operator|+
literal|" tableName="
operator|+
name|tableName
operator|+
literal|" colName="
operator|+
name|colName
argument_list|)
expr_stmt|;
name|MTable
name|mTable
init|=
name|getMTable
argument_list|(
name|mStatsObj
operator|.
name|getDbName
argument_list|()
argument_list|,
name|mStatsObj
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|foundCol
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" for which stats gathering is requested doesn't exist."
argument_list|)
throw|;
block|}
name|MStorageDescriptor
name|mSDS
init|=
name|mTable
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|colList
init|=
name|mSDS
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|MFieldSchema
name|mCol
range|:
name|colList
control|)
block|{
if|if
condition|(
name|mCol
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|mStatsObj
operator|.
name|getColName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|foundCol
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundCol
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column "
operator|+
name|colName
operator|+
literal|" for which stats gathering is requested doesn't exist."
argument_list|)
throw|;
block|}
name|MTableColumnStatistics
name|oldStatsObj
init|=
name|getMTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStatsObj
operator|!=
literal|null
condition|)
block|{
name|oldStatsObj
operator|.
name|setAvgColLen
argument_list|(
name|mStatsObj
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setLongHighValue
argument_list|(
name|mStatsObj
operator|.
name|getLongHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setDoubleHighValue
argument_list|(
name|mStatsObj
operator|.
name|getDoubleHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setLastAnalyzed
argument_list|(
name|mStatsObj
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setLongLowValue
argument_list|(
name|mStatsObj
operator|.
name|getLongLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setDoubleLowValue
argument_list|(
name|mStatsObj
operator|.
name|getDoubleLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setMaxColLen
argument_list|(
name|mStatsObj
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setNumDVs
argument_list|(
name|mStatsObj
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setNumFalses
argument_list|(
name|mStatsObj
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setNumTrues
argument_list|(
name|mStatsObj
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pm
operator|.
name|makePersistent
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ColumnStatisticsObj
name|getPartitionColumnStatisticsObj
parameter_list|(
name|MPartitionColumnStatistics
name|mStatsObj
parameter_list|)
block|{
name|ColumnStatisticsObj
name|statsObj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|statsObj
operator|.
name|setColType
argument_list|(
name|mStatsObj
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|statsObj
operator|.
name|setColName
argument_list|(
name|mStatsObj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|colType
init|=
name|mStatsObj
operator|.
name|getColType
argument_list|()
decl_stmt|;
name|ColumnStatisticsData
name|colStatsData
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|BooleanColumnStatsData
name|boolStats
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|boolStats
operator|.
name|setNumFalses
argument_list|(
name|mStatsObj
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|boolStats
operator|.
name|setNumTrues
argument_list|(
name|mStatsObj
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|boolStats
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|colStatsData
operator|.
name|setBooleanStats
argument_list|(
name|boolStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|StringColumnStatsData
name|stringStats
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|stringStats
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setAvgColLen
argument_list|(
name|mStatsObj
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setMaxColLen
argument_list|(
name|mStatsObj
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setNumDVs
argument_list|(
name|mStatsObj
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|colStatsData
operator|.
name|setStringStats
argument_list|(
name|stringStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
name|BinaryColumnStatsData
name|binaryStats
init|=
operator|new
name|BinaryColumnStatsData
argument_list|()
decl_stmt|;
name|binaryStats
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|binaryStats
operator|.
name|setAvgColLen
argument_list|(
name|mStatsObj
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
name|binaryStats
operator|.
name|setMaxColLen
argument_list|(
name|mStatsObj
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|colStatsData
operator|.
name|setBinaryStats
argument_list|(
name|binaryStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"tinyint"
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"smallint"
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"int"
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"bigint"
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"timestamp"
argument_list|)
condition|)
block|{
name|LongColumnStatsData
name|longStats
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|longStats
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setHighValue
argument_list|(
name|mStatsObj
operator|.
name|getLongHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setLowValue
argument_list|(
name|mStatsObj
operator|.
name|getLongLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
name|mStatsObj
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|colStatsData
operator|.
name|setLongStats
argument_list|(
name|longStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"double"
argument_list|)
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
name|DoubleColumnStatsData
name|doubleStats
init|=
operator|new
name|DoubleColumnStatsData
argument_list|()
decl_stmt|;
name|doubleStats
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setHighValue
argument_list|(
name|mStatsObj
operator|.
name|getDoubleHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setLowValue
argument_list|(
name|mStatsObj
operator|.
name|getDoubleLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setNumDVs
argument_list|(
name|mStatsObj
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|colStatsData
operator|.
name|setDoubleStats
argument_list|(
name|doubleStats
argument_list|)
expr_stmt|;
block|}
name|statsObj
operator|.
name|setStatsData
argument_list|(
name|colStatsData
argument_list|)
expr_stmt|;
return|return
name|statsObj
return|;
block|}
specifier|private
name|ColumnStatisticsDesc
name|getPartitionColumnStatisticsDesc
parameter_list|(
name|MPartitionColumnStatistics
name|mStatsObj
parameter_list|)
block|{
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|statsDesc
operator|.
name|setIsTblLevel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|mStatsObj
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|mStatsObj
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
name|mStatsObj
operator|.
name|getPartitionName
argument_list|()
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setLastAnalyzed
argument_list|(
name|mStatsObj
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|statsDesc
return|;
block|}
specifier|private
name|void
name|writeMPartitionColumnStatistics
parameter_list|(
name|MPartitionColumnStatistics
name|mStatsObj
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVal
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|String
name|dbName
init|=
name|mStatsObj
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|mStatsObj
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|String
name|partName
init|=
name|mStatsObj
operator|.
name|getPartitionName
argument_list|()
decl_stmt|;
name|String
name|colName
init|=
name|mStatsObj
operator|.
name|getColName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating partition level column statistics for db="
operator|+
name|dbName
operator|+
literal|" tableName="
operator|+
name|tableName
operator|+
literal|" partName="
operator|+
name|partName
operator|+
literal|" colName="
operator|+
name|colName
argument_list|)
expr_stmt|;
name|MTable
name|mTable
init|=
name|getMTable
argument_list|(
name|mStatsObj
operator|.
name|getDbName
argument_list|()
argument_list|,
name|mStatsObj
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|foundCol
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" for which stats gathering is requested doesn't exist."
argument_list|)
throw|;
block|}
name|MPartition
name|mPartition
init|=
name|getMPartition
argument_list|(
name|mStatsObj
operator|.
name|getDbName
argument_list|()
argument_list|,
name|mStatsObj
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|mPartition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition "
operator|+
name|partName
operator|+
literal|" for which stats gathering is requested doesn't exist"
argument_list|)
throw|;
block|}
name|MStorageDescriptor
name|mSDS
init|=
name|mPartition
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|colList
init|=
name|mSDS
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|MFieldSchema
name|mCol
range|:
name|colList
control|)
block|{
if|if
condition|(
name|mCol
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|mStatsObj
operator|.
name|getColName
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|foundCol
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundCol
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column "
operator|+
name|colName
operator|+
literal|" for which stats gathering is requested doesn't exist."
argument_list|)
throw|;
block|}
name|MPartitionColumnStatistics
name|oldStatsObj
init|=
name|getMPartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|partVal
argument_list|,
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStatsObj
operator|!=
literal|null
condition|)
block|{
name|oldStatsObj
operator|.
name|setAvgColLen
argument_list|(
name|mStatsObj
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setLongHighValue
argument_list|(
name|mStatsObj
operator|.
name|getLongHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setDoubleHighValue
argument_list|(
name|mStatsObj
operator|.
name|getDoubleHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setLastAnalyzed
argument_list|(
name|mStatsObj
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setLongLowValue
argument_list|(
name|mStatsObj
operator|.
name|getLongLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setDoubleLowValue
argument_list|(
name|mStatsObj
operator|.
name|getDoubleLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setMaxColLen
argument_list|(
name|mStatsObj
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setNumDVs
argument_list|(
name|mStatsObj
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setNumFalses
argument_list|(
name|mStatsObj
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setNumTrues
argument_list|(
name|mStatsObj
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|oldStatsObj
operator|.
name|setNumNulls
argument_list|(
name|mStatsObj
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pm
operator|.
name|makePersistent
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|updateTableColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
name|colStats
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
name|colStats
operator|.
name|getStatsDesc
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
name|MTableColumnStatistics
name|mStatsObj
init|=
name|convertToMTableColumnStatistics
argument_list|(
name|statsDesc
argument_list|,
name|statsObj
argument_list|)
decl_stmt|;
name|writeMTableColumnStatistics
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|committed
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|updatePartitionColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
name|colStats
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
name|colStats
operator|.
name|getStatsDesc
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
name|MPartitionColumnStatistics
name|mStatsObj
init|=
name|convertToMPartitionColumnStatistics
argument_list|(
name|statsDesc
argument_list|,
name|statsObj
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|writeMPartitionColumnStatistics
argument_list|(
name|mStatsObj
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|committed
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|MTableColumnStatistics
name|getMTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidInputException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
name|dbName
operator|=
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
name|colName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidInputException
argument_list|(
literal|"TableName/ColName passed to get_table_column_statistics "
operator|+
literal|"is null"
argument_list|)
throw|;
block|}
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTableColumnStatistics
name|mStatsObj
init|=
literal|null
decl_stmt|;
name|MTable
name|mTable
init|=
name|getMTable
argument_list|(
name|dbName
operator|.
name|trim
argument_list|()
argument_list|,
name|tableName
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|foundCol
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" for which stats is requested doesn't exist."
argument_list|)
throw|;
block|}
name|MStorageDescriptor
name|mSDS
init|=
name|mTable
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|colList
init|=
name|mSDS
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|MFieldSchema
name|mCol
range|:
name|colList
control|)
block|{
if|if
condition|(
name|mCol
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|colName
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|foundCol
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundCol
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column "
operator|+
name|colName
operator|+
literal|" for which stats is requested doesn't exist."
argument_list|)
throw|;
block|}
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnStatistics
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFilter
argument_list|(
literal|"table.tableName == t1&& "
operator|+
literal|"dbName == t2&& "
operator|+
literal|"colName == t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mStatsObj
operator|=
operator|(
name|MTableColumnStatistics
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tableName
operator|.
name|trim
argument_list|()
argument_list|,
name|dbName
operator|.
name|trim
argument_list|()
argument_list|,
name|colName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|mStatsObj
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|public
name|ColumnStatistics
name|getTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidInputException
block|{
name|ColumnStatistics
name|statsObj
decl_stmt|;
name|MTableColumnStatistics
name|mStatsObj
init|=
name|getMTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mStatsObj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Statistics for dbName="
operator|+
name|dbName
operator|+
literal|" tableName="
operator|+
name|tableName
operator|+
literal|" columnName="
operator|+
name|colName
operator|+
literal|" doesn't exist."
argument_list|)
throw|;
block|}
name|statsObj
operator|=
name|convertToTableColumnStatistics
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
return|return
name|statsObj
return|;
block|}
specifier|public
name|ColumnStatistics
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVal
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidInputException
block|{
name|ColumnStatistics
name|statsObj
decl_stmt|;
name|MPartitionColumnStatistics
name|mStatsObj
init|=
name|getMPartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|partVal
argument_list|,
name|colName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mStatsObj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Statistics for dbName="
operator|+
name|dbName
operator|+
literal|" tableName="
operator|+
name|tableName
operator|+
literal|" partName= "
operator|+
name|partName
operator|+
literal|" columnName="
operator|+
name|colName
operator|+
literal|" doesn't exist."
argument_list|)
throw|;
block|}
name|statsObj
operator|=
name|convertToPartColumnStatistics
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
return|return
name|statsObj
return|;
block|}
specifier|private
name|ColumnStatistics
name|convertToPartColumnStatistics
parameter_list|(
name|MPartitionColumnStatistics
name|mStatsObj
parameter_list|)
block|{
if|if
condition|(
name|mStatsObj
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ColumnStatisticsDesc
name|statsDesc
init|=
name|getPartitionColumnStatisticsDesc
argument_list|(
name|mStatsObj
argument_list|)
decl_stmt|;
name|ColumnStatisticsObj
name|statsObj
init|=
name|getPartitionColumnStatisticsObj
argument_list|(
name|mStatsObj
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
name|statsObjs
operator|.
name|add
argument_list|(
name|statsObj
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|colStats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|colStats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|statsObjs
argument_list|)
expr_stmt|;
return|return
name|colStats
return|;
block|}
specifier|private
name|MPartitionColumnStatistics
name|getMPartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVal
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidInputException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MPartitionColumnStatistics
name|mStatsObj
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
name|dbName
operator|=
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
if|if
condition|(
name|tableName
operator|==
literal|null
operator|||
name|partVal
operator|==
literal|null
operator|||
name|colName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidInputException
argument_list|(
literal|"TableName/PartName/ColName passed to "
operator|+
literal|" get_partition_column_statistics is null"
argument_list|)
throw|;
block|}
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTable
name|mTable
init|=
name|getMTable
argument_list|(
name|dbName
operator|.
name|trim
argument_list|()
argument_list|,
name|tableName
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|foundCol
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" for which stats is requested doesn't exist."
argument_list|)
throw|;
block|}
name|MPartition
name|mPartition
init|=
name|getMPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partVal
argument_list|)
decl_stmt|;
if|if
condition|(
name|mPartition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition "
operator|+
name|partName
operator|+
literal|" for which stats is requested doesn't exist"
argument_list|)
throw|;
block|}
name|MStorageDescriptor
name|mSDS
init|=
name|mPartition
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MFieldSchema
argument_list|>
name|colList
init|=
name|mSDS
operator|.
name|getCD
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
for|for
control|(
name|MFieldSchema
name|mCol
range|:
name|colList
control|)
block|{
if|if
condition|(
name|mCol
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|colName
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|foundCol
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundCol
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column "
operator|+
name|colName
operator|+
literal|" for which stats is requested doesn't exist."
argument_list|)
throw|;
block|}
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnStatistics
operator|.
name|class
argument_list|)
decl_stmt|;
name|query
operator|.
name|setFilter
argument_list|(
literal|"partition.partitionName == t1&& "
operator|+
literal|"dbName == t2&& "
operator|+
literal|"tableName == t3&& "
operator|+
literal|"colName == t4"
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String t1, java.lang.String t2, "
operator|+
literal|"java.lang.String t3, java.lang.String t4"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mStatsObj
operator|=
operator|(
name|MPartitionColumnStatistics
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|partName
operator|.
name|trim
argument_list|()
argument_list|,
name|dbName
operator|.
name|trim
argument_list|()
argument_list|,
name|tableName
operator|.
name|trim
argument_list|()
argument_list|,
name|colName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|mStatsObj
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|deletePartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
name|dbName
operator|=
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidInputException
argument_list|(
literal|"Table name is null."
argument_list|)
throw|;
block|}
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTable
name|mTable
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|MPartitionColumnStatistics
name|mStatsObj
decl_stmt|;
name|List
argument_list|<
name|MPartitionColumnStatistics
argument_list|>
name|mStatsObjColl
decl_stmt|;
if|if
condition|(
name|mTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|"  for which stats deletion is requested doesn't exist"
argument_list|)
throw|;
block|}
name|MPartition
name|mPartition
init|=
name|getMPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|mPartition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition "
operator|+
name|partName
operator|+
literal|" for which stats deletion is requested doesn't exist"
argument_list|)
throw|;
block|}
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionColumnStatistics
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|filter
decl_stmt|;
name|String
name|parameters
decl_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|filter
operator|=
literal|"partition.partitionName == t1&& dbName == t2&& tableName == t3&& "
operator|+
literal|"colName == t4"
expr_stmt|;
name|parameters
operator|=
literal|"java.lang.String t1, java.lang.String t2, "
operator|+
literal|"java.lang.String t3, java.lang.String t4"
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
literal|"partition.partitionName == t1&& dbName == t2&& tableName == t3"
expr_stmt|;
name|parameters
operator|=
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
expr_stmt|;
block|}
name|query
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mStatsObj
operator|=
operator|(
name|MPartitionColumnStatistics
operator|)
name|query
operator|.
name|executeWithArray
argument_list|(
name|partName
operator|.
name|trim
argument_list|()
argument_list|,
name|dbName
operator|.
name|trim
argument_list|()
argument_list|,
name|tableName
operator|.
name|trim
argument_list|()
argument_list|,
name|colName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
if|if
condition|(
name|mStatsObj
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column stats doesn't exist for db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
operator|+
literal|" partition="
operator|+
name|partName
operator|+
literal|" col="
operator|+
name|colName
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|mStatsObjColl
operator|=
operator|(
name|List
argument_list|<
name|MPartitionColumnStatistics
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|partName
operator|.
name|trim
argument_list|()
argument_list|,
name|dbName
operator|.
name|trim
argument_list|()
argument_list|,
name|tableName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mStatsObjColl
argument_list|)
expr_stmt|;
if|if
condition|(
name|mStatsObjColl
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|mStatsObjColl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column stats doesn't exist for db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
operator|+
literal|" partition"
operator|+
name|partName
argument_list|)
throw|;
block|}
block|}
name|ret
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|ret
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
name|dbName
operator|=
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
expr_stmt|;
block|}
if|if
condition|(
name|tableName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidInputException
argument_list|(
literal|"Table name is null."
argument_list|)
throw|;
block|}
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|MTable
name|mTable
init|=
name|getMTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|MTableColumnStatistics
name|mStatsObj
decl_stmt|;
name|List
argument_list|<
name|MTableColumnStatistics
argument_list|>
name|mStatsObjColl
decl_stmt|;
if|if
condition|(
name|mTable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|"  for which stats deletion is requested doesn't exist"
argument_list|)
throw|;
block|}
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MTableColumnStatistics
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|filter
decl_stmt|;
name|String
name|parameters
decl_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|filter
operator|=
literal|"table.tableName == t1&& dbName == t2&& colName == t3"
expr_stmt|;
name|parameters
operator|=
literal|"java.lang.String t1, java.lang.String t2, java.lang.String t3"
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
literal|"table.tableName == t1&& dbName == t2"
expr_stmt|;
name|parameters
operator|=
literal|"java.lang.String t1, java.lang.String t2"
expr_stmt|;
block|}
name|query
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mStatsObj
operator|=
operator|(
name|MTableColumnStatistics
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tableName
operator|.
name|trim
argument_list|()
argument_list|,
name|dbName
operator|.
name|trim
argument_list|()
argument_list|,
name|colName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieve
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
if|if
condition|(
name|mStatsObj
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|mStatsObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column stats doesn't exist for db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
operator|+
literal|" col="
operator|+
name|colName
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|mStatsObjColl
operator|=
operator|(
name|List
argument_list|<
name|MTableColumnStatistics
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tableName
operator|.
name|trim
argument_list|()
argument_list|,
name|dbName
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mStatsObjColl
argument_list|)
expr_stmt|;
if|if
condition|(
name|mStatsObjColl
operator|!=
literal|null
condition|)
block|{
name|pm
operator|.
name|deletePersistentAll
argument_list|(
name|mStatsObjColl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Column stats doesn't exist for db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
argument_list|)
throw|;
block|}
block|}
name|ret
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|ret
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cleanupEvents
parameter_list|()
block|{
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
name|long
name|delCnt
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing cleanupEvents"
argument_list|)
expr_stmt|;
name|Long
name|expiryTime
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|METASTORE_EVENT_EXPIRY_DURATION
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|Long
name|curTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MPartitionEvent
operator|.
name|class
argument_list|,
literal|"curTime - eventTime> expiryTime"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.Long curTime, java.lang.Long expiryTime"
argument_list|)
expr_stmt|;
name|delCnt
operator|=
name|query
operator|.
name|deletePersistentAll
argument_list|(
name|curTime
argument_list|,
name|expiryTime
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing cleanupEvents"
argument_list|)
expr_stmt|;
block|}
return|return
name|delCnt
return|;
block|}
specifier|private
name|MDelegationToken
name|getTokenFrom
parameter_list|(
name|String
name|tokenId
parameter_list|)
block|{
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDelegationToken
operator|.
name|class
argument_list|,
literal|"tokenIdentifier == tokenId"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.String tokenId"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|MDelegationToken
operator|)
name|query
operator|.
name|execute
argument_list|(
name|tokenId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addToken
parameter_list|(
name|String
name|tokenId
parameter_list|,
name|String
name|delegationToken
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing addToken"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MDelegationToken
name|token
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|token
operator|=
name|getTokenFrom
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
comment|// add Token, only if it already doesn't exist
name|pm
operator|.
name|makePersistent
argument_list|(
operator|new
name|MDelegationToken
argument_list|(
name|tokenId
argument_list|,
name|delegationToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing addToken with status : "
operator|+
name|committed
argument_list|)
expr_stmt|;
return|return
name|committed
operator|&&
operator|(
name|token
operator|==
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeToken
parameter_list|(
name|String
name|tokenId
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing removeToken"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MDelegationToken
name|token
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|token
operator|=
name|getTokenFrom
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|token
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing removeToken with status : "
operator|+
name|committed
argument_list|)
expr_stmt|;
return|return
name|committed
operator|&&
operator|(
name|token
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getToken
parameter_list|(
name|String
name|tokenId
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing getToken"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MDelegationToken
name|token
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|token
operator|=
name|getTokenFrom
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|token
condition|)
block|{
name|pm
operator|.
name|retrieve
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing getToken with status : "
operator|+
name|committed
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|==
name|token
operator|)
condition|?
literal|null
else|:
name|token
operator|.
name|getTokenStr
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTokenIdentifiers
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing getAllTokenIdentifiers"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MDelegationToken
argument_list|>
name|tokens
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MDelegationToken
operator|.
name|class
argument_list|)
decl_stmt|;
name|tokens
operator|=
operator|(
name|List
argument_list|<
name|MDelegationToken
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing getAllTokenIdentifers with status : "
operator|+
name|committed
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tokenIdents
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MDelegationToken
name|token
range|:
name|tokens
control|)
block|{
name|tokenIdents
operator|.
name|add
argument_list|(
name|token
operator|.
name|getTokenIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenIdents
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|addMasterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing addMasterKey"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MMasterKey
name|masterKey
init|=
operator|new
name|MMasterKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing addMasterKey with status : "
operator|+
name|committed
argument_list|)
expr_stmt|;
if|if
condition|(
name|committed
condition|)
block|{
return|return
operator|(
operator|(
name|IntIdentity
operator|)
name|pm
operator|.
name|getObjectId
argument_list|(
name|masterKey
argument_list|)
operator|)
operator|.
name|getKey
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Failed to add master key."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMasterKey
parameter_list|(
name|Integer
name|id
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing updateMasterKey"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|MMasterKey
name|masterKey
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MMasterKey
operator|.
name|class
argument_list|,
literal|"keyId == id"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.Integer id"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|masterKey
operator|=
operator|(
name|MMasterKey
operator|)
name|query
operator|.
name|execute
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|masterKey
condition|)
block|{
name|masterKey
operator|.
name|setMasterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing updateMasterKey with status : "
operator|+
name|committed
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|masterKey
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"No key found with keyId: "
operator|+
name|id
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|committed
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Though key is found, failed to update it. "
operator|+
name|id
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeMasterKey
parameter_list|(
name|Integer
name|id
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing removeMasterKey"
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|MMasterKey
name|masterKey
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MMasterKey
operator|.
name|class
argument_list|,
literal|"keyId == id"
argument_list|)
decl_stmt|;
name|query
operator|.
name|declareParameters
argument_list|(
literal|"java.lang.Integer id"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|masterKey
operator|=
operator|(
name|MMasterKey
operator|)
name|query
operator|.
name|execute
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|masterKey
condition|)
block|{
name|pm
operator|.
name|deletePersistent
argument_list|(
name|masterKey
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing removeMasterKey with status : "
operator|+
name|success
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|!=
name|masterKey
operator|)
operator|&&
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getMasterKeys
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin executing getMasterKeys"
argument_list|)
expr_stmt|;
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MMasterKey
argument_list|>
name|keys
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MMasterKey
operator|.
name|class
argument_list|)
decl_stmt|;
name|keys
operator|=
operator|(
name|List
argument_list|<
name|MMasterKey
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done executing getMasterKeys with status : "
operator|+
name|committed
argument_list|)
expr_stmt|;
name|String
index|[]
name|masterKeys
init|=
operator|new
name|String
index|[
name|keys
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|masterKeys
index|[
name|i
index|]
operator|=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getMasterKey
argument_list|()
expr_stmt|;
block|}
return|return
name|masterKeys
return|;
block|}
comment|// compare hive version and metastore version
annotation|@
name|Override
specifier|public
name|void
name|verifySchema
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// If the schema version is already checked, then go ahead and use this metastore
if|if
condition|(
name|isSchemaVerified
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|checkSchema
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|checkSchema
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// recheck if it got verified by another thread while we were waiting
if|if
condition|(
name|isSchemaVerified
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|strictValidation
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_SCHEMA_VERIFICATION
argument_list|)
decl_stmt|;
comment|// read the schema version stored in metastore db
name|String
name|schemaVer
init|=
name|getMetaStoreSchemaVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|schemaVer
operator|==
literal|null
condition|)
block|{
comment|// metastore has no schema version information
if|if
condition|(
name|strictValidation
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Version information not found in metastore. "
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Version information not found in metastore. "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_SCHEMA_VERIFICATION
operator|.
name|toString
argument_list|()
operator|+
literal|" is not enabled so recording the schema version "
operator|+
name|MetaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|)
expr_stmt|;
name|setMetaStoreSchemaVersion
argument_list|(
name|MetaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|,
literal|"Set by MetaStore"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// metastore schema version is different than Hive distribution needs
if|if
condition|(
name|strictValidation
condition|)
block|{
if|if
condition|(
operator|!
name|schemaVer
operator|.
name|equalsIgnoreCase
argument_list|(
name|MetaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Hive Schema version "
operator|+
name|MetaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
operator|+
literal|" does not match metastore's schema version "
operator|+
name|schemaVer
operator|+
literal|" Metastore is not upgraded or corrupt"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Metastore version was "
operator|+
name|schemaVer
operator|+
literal|" "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_SCHEMA_VERIFICATION
operator|.
name|toString
argument_list|()
operator|+
literal|" is not enabled so recording the new schema version "
operator|+
name|MetaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|)
expr_stmt|;
name|setMetaStoreSchemaVersion
argument_list|(
name|MetaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|,
literal|"Set by MetaStore"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|isSchemaVerified
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// load the schema version stored in metastore db
annotation|@
name|Override
specifier|public
name|String
name|getMetaStoreSchemaVersion
parameter_list|()
throws|throws
name|MetaException
block|{
name|MVersionTable
name|mSchemaVer
decl_stmt|;
try|try
block|{
name|mSchemaVer
operator|=
name|getMSchemaVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|mSchemaVer
operator|.
name|getSchemaVersion
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|MVersionTable
name|getMSchemaVersion
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|committed
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MVersionTable
argument_list|>
name|mVerTables
init|=
operator|new
name|ArrayList
argument_list|<
name|MVersionTable
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|Query
name|query
init|=
name|pm
operator|.
name|newQuery
argument_list|(
name|MVersionTable
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|mVerTables
operator|=
operator|(
name|List
argument_list|<
name|MVersionTable
argument_list|>
operator|)
name|query
operator|.
name|execute
argument_list|()
expr_stmt|;
name|pm
operator|.
name|retrieveAll
argument_list|(
name|mVerTables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDODataStoreException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|MissingTableException
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Version table not found. "
operator|+
literal|"The metastore is not upgraded to "
operator|+
name|MetaStoreSchemaInfo
operator|.
name|getHiveSchemaVersion
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|committed
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|committed
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mVerTables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"No matching version found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mVerTables
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Metastore contains multiple versions"
argument_list|)
throw|;
block|}
return|return
name|mVerTables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMetaStoreSchemaVersion
parameter_list|(
name|String
name|schemaVersion
parameter_list|,
name|String
name|comment
parameter_list|)
throws|throws
name|MetaException
block|{
name|MVersionTable
name|mSchemaVer
decl_stmt|;
name|boolean
name|commited
init|=
literal|false
decl_stmt|;
try|try
block|{
name|mSchemaVer
operator|=
name|getMSchemaVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// if the version doesn't exist, then create it
name|mSchemaVer
operator|=
operator|new
name|MVersionTable
argument_list|()
expr_stmt|;
block|}
name|mSchemaVer
operator|.
name|setSchemaVersion
argument_list|(
name|schemaVersion
argument_list|)
expr_stmt|;
name|mSchemaVer
operator|.
name|setVersionComment
argument_list|(
name|comment
argument_list|)
expr_stmt|;
try|try
block|{
name|openTransaction
argument_list|()
expr_stmt|;
name|pm
operator|.
name|makePersistent
argument_list|(
name|mSchemaVer
argument_list|)
expr_stmt|;
name|commited
operator|=
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|commited
condition|)
block|{
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

