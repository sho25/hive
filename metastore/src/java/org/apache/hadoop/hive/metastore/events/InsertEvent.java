begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ClientCapabilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetTableRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
operator|.
name|HMSHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|InsertEvent
extends|extends
name|ListenerEvent
block|{
comment|// Note that this event is fired from the client, so rather than having full metastore objects
comment|// we have just the string names, but that's fine for what we need.
specifier|private
specifier|final
name|String
name|db
decl_stmt|;
specifier|private
specifier|final
name|String
name|table
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|keyValues
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|files
decl_stmt|;
comment|/**    *    * @param db name of the database the table is in    * @param table name of the table being inserted into    * @param partVals list of partition values, can be null    * @param status status of insert, true = success, false = failure    * @param handler handler that is firing the event    */
specifier|public
name|InsertEvent
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|,
name|boolean
name|status
parameter_list|,
name|HMSHandler
name|handler
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|super
argument_list|(
name|status
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
comment|// TODO: why does this use the handler directly?
name|GetTableRequest
name|req
init|=
operator|new
name|GetTableRequest
argument_list|(
name|db
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|req
operator|.
name|setCapabilities
argument_list|(
name|HiveMetaStoreClient
operator|.
name|TEST_VERSION
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|handler
operator|.
name|get_table_req
argument_list|(
name|req
argument_list|)
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|keyValues
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|partVals
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partVals
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|keyValues
operator|.
name|put
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getDb
parameter_list|()
block|{
return|return
name|db
return|;
block|}
comment|/**    * @return The table.    */
specifier|public
name|String
name|getTable
parameter_list|()
block|{
return|return
name|table
return|;
block|}
comment|/**    * @return List of values for the partition keys.    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartitionKeyValues
parameter_list|()
block|{
return|return
name|keyValues
return|;
block|}
comment|/**    * Get list of files created as a result of this DML operation    * @return list of new files    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFiles
parameter_list|()
block|{
return|return
name|files
return|;
block|}
block|}
end_class

end_unit

