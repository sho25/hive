begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|LinearExtrapolatePartStatus
implements|implements
name|IExtrapolatePartStatus
block|{
annotation|@
name|Override
specifier|public
name|Object
name|extrapolate
parameter_list|(
name|Object
index|[]
name|min
parameter_list|,
name|Object
index|[]
name|max
parameter_list|,
name|int
name|colStatIndex
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|indexMap
parameter_list|)
block|{
name|int
name|rightBorderInd
init|=
name|indexMap
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|minInd
init|=
name|indexMap
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|min
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|maxInd
init|=
name|indexMap
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|max
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|minInd
operator|==
name|maxInd
condition|)
block|{
return|return
name|min
index|[
literal|0
index|]
return|;
block|}
comment|//note that recent metastore stores decimal in string.
name|double
name|decimalmin
init|=
literal|0
decl_stmt|;
name|double
name|decimalmax
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|colStatTypes
index|[
name|colStatIndex
index|]
operator|==
name|ColStatType
operator|.
name|Decimal
condition|)
block|{
name|BigDecimal
name|bdmin
init|=
operator|new
name|BigDecimal
argument_list|(
name|min
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|decimalmin
operator|=
name|bdmin
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
name|BigDecimal
name|bdmax
init|=
operator|new
name|BigDecimal
argument_list|(
name|max
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|decimalmax
operator|=
name|bdmax
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|aggrTypes
index|[
name|colStatIndex
index|]
operator|==
name|AggrType
operator|.
name|Max
condition|)
block|{
if|if
condition|(
name|minInd
operator|<
name|maxInd
condition|)
block|{
comment|// right border is the max
if|if
condition|(
name|colStatTypes
index|[
name|colStatIndex
index|]
operator|==
name|ColStatType
operator|.
name|Long
condition|)
block|{
return|return
call|(
name|Long
call|)
argument_list|(
operator|(
name|Long
operator|)
name|min
index|[
literal|0
index|]
operator|+
operator|(
operator|(
operator|(
name|Long
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
name|Long
operator|)
name|min
index|[
literal|0
index|]
operator|)
operator|*
operator|(
name|rightBorderInd
operator|-
name|minInd
operator|)
operator|/
operator|(
name|maxInd
operator|-
name|minInd
operator|)
operator|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|colStatTypes
index|[
name|colStatIndex
index|]
operator|==
name|ColStatType
operator|.
name|Double
condition|)
block|{
return|return
call|(
name|Double
call|)
argument_list|(
operator|(
name|Double
operator|)
name|min
index|[
literal|0
index|]
operator|+
operator|(
operator|(
operator|(
name|Double
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
name|Double
operator|)
name|min
index|[
literal|0
index|]
operator|)
operator|*
operator|(
name|rightBorderInd
operator|-
name|minInd
operator|)
operator|/
operator|(
name|maxInd
operator|-
name|minInd
operator|)
operator|)
argument_list|)
return|;
block|}
else|else
block|{
name|double
name|ret
init|=
name|decimalmin
operator|+
operator|(
name|decimalmax
operator|-
name|decimalmin
operator|)
operator|*
operator|(
name|rightBorderInd
operator|-
name|minInd
operator|)
operator|/
operator|(
name|maxInd
operator|-
name|minInd
operator|)
decl_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|ret
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// left border is the max
if|if
condition|(
name|colStatTypes
index|[
name|colStatIndex
index|]
operator|==
name|ColStatType
operator|.
name|Long
condition|)
block|{
return|return
call|(
name|Long
call|)
argument_list|(
operator|(
name|Long
operator|)
name|min
index|[
literal|0
index|]
operator|+
operator|(
operator|(
name|Long
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
name|Long
operator|)
name|min
index|[
literal|0
index|]
operator|)
operator|*
name|minInd
operator|/
operator|(
name|minInd
operator|-
name|maxInd
operator|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|colStatTypes
index|[
name|colStatIndex
index|]
operator|==
name|ColStatType
operator|.
name|Double
condition|)
block|{
return|return
call|(
name|Double
call|)
argument_list|(
operator|(
name|Double
operator|)
name|min
index|[
literal|0
index|]
operator|+
operator|(
operator|(
name|Double
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
name|Double
operator|)
name|min
index|[
literal|0
index|]
operator|)
operator|*
name|minInd
operator|/
operator|(
name|minInd
operator|-
name|maxInd
operator|)
argument_list|)
return|;
block|}
else|else
block|{
name|double
name|ret
init|=
name|decimalmin
operator|+
operator|(
name|decimalmax
operator|-
name|decimalmin
operator|)
operator|*
name|minInd
operator|/
operator|(
name|minInd
operator|-
name|maxInd
operator|)
decl_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|ret
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|minInd
operator|<
name|maxInd
condition|)
block|{
comment|// left border is the min
if|if
condition|(
name|colStatTypes
index|[
name|colStatIndex
index|]
operator|==
name|ColStatType
operator|.
name|Long
condition|)
block|{
name|Long
name|ret
init|=
operator|(
name|Long
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
operator|(
name|Long
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
name|Long
operator|)
name|min
index|[
literal|0
index|]
operator|)
operator|*
name|maxInd
operator|/
operator|(
name|maxInd
operator|-
name|minInd
operator|)
decl_stmt|;
return|return
name|ret
return|;
block|}
elseif|else
if|if
condition|(
name|colStatTypes
index|[
name|colStatIndex
index|]
operator|==
name|ColStatType
operator|.
name|Double
condition|)
block|{
name|Double
name|ret
init|=
operator|(
name|Double
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
operator|(
name|Double
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
name|Double
operator|)
name|min
index|[
literal|0
index|]
operator|)
operator|*
name|maxInd
operator|/
operator|(
name|maxInd
operator|-
name|minInd
operator|)
decl_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
name|double
name|ret
init|=
name|decimalmax
operator|-
operator|(
name|decimalmax
operator|-
name|decimalmin
operator|)
operator|*
name|maxInd
operator|/
operator|(
name|maxInd
operator|-
name|minInd
operator|)
decl_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|ret
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// right border is the min
if|if
condition|(
name|colStatTypes
index|[
name|colStatIndex
index|]
operator|==
name|ColStatType
operator|.
name|Long
condition|)
block|{
name|Long
name|ret
init|=
operator|(
name|Long
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
operator|(
name|Long
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
name|Long
operator|)
name|min
index|[
literal|0
index|]
operator|)
operator|*
operator|(
name|rightBorderInd
operator|-
name|maxInd
operator|)
operator|/
operator|(
name|minInd
operator|-
name|maxInd
operator|)
decl_stmt|;
return|return
name|ret
return|;
block|}
elseif|else
if|if
condition|(
name|colStatTypes
index|[
name|colStatIndex
index|]
operator|==
name|ColStatType
operator|.
name|Double
condition|)
block|{
name|Double
name|ret
init|=
operator|(
name|Double
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
operator|(
name|Double
operator|)
name|max
index|[
literal|0
index|]
operator|-
operator|(
name|Double
operator|)
name|min
index|[
literal|0
index|]
operator|)
operator|*
operator|(
name|rightBorderInd
operator|-
name|maxInd
operator|)
operator|/
operator|(
name|minInd
operator|-
name|maxInd
operator|)
decl_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
name|double
name|ret
init|=
name|decimalmax
operator|-
operator|(
name|decimalmax
operator|-
name|decimalmin
operator|)
operator|*
operator|(
name|rightBorderInd
operator|-
name|maxInd
operator|)
operator|/
operator|(
name|minInd
operator|-
name|maxInd
operator|)
decl_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|ret
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

