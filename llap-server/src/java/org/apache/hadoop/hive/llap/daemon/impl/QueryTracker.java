begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|log
operator|.
name|Log4jQueryCompleteMarker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|log
operator|.
name|LogHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|slf4j
operator|.
name|Log4jMarker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|CallableWithNdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|LlapTokenChecker
operator|.
name|LlapTokenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SignableVertexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|shufflehandler
operator|.
name|ShuffleHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ObjectCacheFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Marker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * Tracks queries running within a daemon  */
end_comment

begin_class
specifier|public
class|class
name|QueryTracker
extends|extends
name|AbstractService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryTracker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Marker
name|QUERY_COMPLETE_MARKER
init|=
operator|new
name|Log4jMarker
argument_list|(
operator|new
name|Log4jQueryCompleteMarker
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ScheduledExecutorService
name|executorService
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|QueryIdentifier
argument_list|,
name|QueryInfo
argument_list|>
name|queryInfoMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|localDirsBase
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|localFs
decl_stmt|;
specifier|private
specifier|final
name|String
name|clusterId
decl_stmt|;
specifier|private
specifier|final
name|long
name|defaultDeleteDelaySeconds
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|routeBasedLoggingEnabled
decl_stmt|;
comment|// TODO At the moment there's no way of knowing whether a query is running or not.
comment|// A race is possible between dagComplete and registerFragment - where the registerFragment
comment|// is processed after a dagCompletes.
comment|// May need to keep track of completed dags for a certain time duration to avoid this.
comment|// Alternately - send in an explicit dag start message before any other message is processed.
comment|// Multiple threads communicating from a single AM gets in the way of this.
comment|// Keeps track of completed DAGS. QueryIdentifiers need to be unique across applications.
specifier|private
specifier|final
name|Set
argument_list|<
name|QueryIdentifier
argument_list|>
name|completedDagMap
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|QueryIdentifier
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|QueryIdentifier
argument_list|,
name|ReentrantReadWriteLock
argument_list|>
name|dagSpecificLocks
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Tracks various maps for dagCompletions. This is setup here since stateChange messages
comment|// may be processed by a thread which ends up executing before a task.
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|QueryIdentifier
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
argument_list|>
name|sourceCompletionMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Tracks HiveQueryId by QueryIdentifier. This can only be set when config is parsed in TezProcessor.
comment|// all the other existing code passes queryId equal to 0 everywhere.
comment|// If we switch the runtime and move to parsing the payload in the AM - the actual hive queryId could
comment|// be sent over the wire from the AM, and will take the place of AppId+dagId in QueryIdentifier.
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|QueryIdentifier
argument_list|,
name|String
argument_list|>
name|queryIdentifierToHiveQueryId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|QueryTracker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
index|[]
name|localDirsBase
parameter_list|,
name|String
name|clusterId
parameter_list|)
block|{
name|super
argument_list|(
literal|"QueryTracker"
argument_list|)
expr_stmt|;
name|this
operator|.
name|localDirsBase
operator|=
name|localDirsBase
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to setup local filesystem instance"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|defaultDeleteDelaySeconds
operator|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_FILE_CLEANUP_DELAY_SECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|int
name|numCleanerThreads
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_NUM_FILE_CLEANER_THREADS
argument_list|)
decl_stmt|;
name|this
operator|.
name|executorService
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|numCleanerThreads
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"QueryCompletionThread %d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|logger
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_LOGGER
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|!=
literal|null
operator|&&
operator|(
name|logger
operator|.
name|equalsIgnoreCase
argument_list|(
name|LogHelpers
operator|.
name|LLAP_LOGGER_NAME_QUERY_ROUTING
argument_list|)
operator|)
condition|)
block|{
name|routeBasedLoggingEnabled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|routeBasedLoggingEnabled
operator|=
literal|false
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"QueryTracker setup with numCleanerThreads={}, defaultCleanupDelay(s)={}, routeBasedLogging={}"
argument_list|,
name|numCleanerThreads
argument_list|,
name|defaultDeleteDelaySeconds
argument_list|,
name|routeBasedLoggingEnabled
argument_list|)
expr_stmt|;
block|}
comment|/**    * Register a new fragment for a specific query    */
name|QueryFragmentInfo
name|registerFragment
parameter_list|(
name|QueryIdentifier
name|queryIdentifier
parameter_list|,
name|String
name|appIdString
parameter_list|,
name|String
name|dagIdString
parameter_list|,
name|String
name|dagName
parameter_list|,
name|String
name|hiveQueryIdString
parameter_list|,
name|int
name|dagIdentifier
parameter_list|,
name|String
name|vertexName
parameter_list|,
name|int
name|fragmentNumber
parameter_list|,
name|int
name|attemptNumber
parameter_list|,
name|String
name|user
parameter_list|,
name|SignableVertexSpec
name|vertex
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|appToken
parameter_list|,
name|String
name|fragmentIdString
parameter_list|,
name|LlapTokenInfo
name|tokenInfo
parameter_list|,
specifier|final
name|LlapNodeId
name|amNodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|ReadWriteLock
name|dagLock
init|=
name|getDagLock
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
comment|// Note: This is a readLock to prevent a race with queryComplete. Operations
comment|// and mutations within this lock need to be on concurrent structures.
name|dagLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|completedDagMap
operator|.
name|contains
argument_list|(
name|queryIdentifier
argument_list|)
condition|)
block|{
comment|// Cleanup the dag lock here, since it may have been created after the query completed
name|dagSpecificLocks
operator|.
name|remove
argument_list|(
name|queryIdentifier
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"Dag "
operator|+
name|dagName
operator|+
literal|" already complete. Rejecting fragment ["
operator|+
name|vertexName
operator|+
literal|", "
operator|+
name|fragmentNumber
operator|+
literal|", "
operator|+
name|attemptNumber
operator|+
literal|"]"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// TODO: for now, we get the secure username out of UGI... after signing, we can take it
comment|//       out of the request provided that it's signed.
if|if
condition|(
name|tokenInfo
operator|==
literal|null
condition|)
block|{
name|tokenInfo
operator|=
name|LlapTokenChecker
operator|.
name|getTokenInfo
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isExistingQueryInfo
init|=
literal|true
decl_stmt|;
name|QueryInfo
name|queryInfo
init|=
name|queryInfoMap
operator|.
name|get
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryInfo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|tokenInfo
operator|.
name|userName
argument_list|)
expr_stmt|;
block|}
name|queryInfo
operator|=
operator|new
name|QueryInfo
argument_list|(
name|queryIdentifier
argument_list|,
name|appIdString
argument_list|,
name|dagIdString
argument_list|,
name|dagName
argument_list|,
name|hiveQueryIdString
argument_list|,
name|dagIdentifier
argument_list|,
name|user
argument_list|,
name|getSourceCompletionMap
argument_list|(
name|queryIdentifier
argument_list|)
argument_list|,
name|localDirsBase
argument_list|,
name|localFs
argument_list|,
name|tokenInfo
operator|.
name|userName
argument_list|,
name|tokenInfo
operator|.
name|appId
argument_list|,
name|amNodeId
argument_list|,
name|vertex
operator|.
name|getTokenIdentifier
argument_list|()
argument_list|,
name|appToken
argument_list|,
name|vertex
operator|.
name|getIsExternalSubmission
argument_list|()
argument_list|)
expr_stmt|;
name|QueryInfo
name|old
init|=
name|queryInfoMap
operator|.
name|putIfAbsent
argument_list|(
name|queryIdentifier
argument_list|,
name|queryInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|queryInfo
operator|=
name|old
expr_stmt|;
block|}
else|else
block|{
name|isExistingQueryInfo
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isExistingQueryInfo
condition|)
block|{
comment|// We already retrieved the incoming info, check without UGI.
name|LlapTokenChecker
operator|.
name|checkPermissions
argument_list|(
name|tokenInfo
argument_list|,
name|queryInfo
operator|.
name|getTokenUserName
argument_list|()
argument_list|,
name|queryInfo
operator|.
name|getTokenAppId
argument_list|()
argument_list|,
name|queryInfo
operator|.
name|getQueryIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|queryIdentifierToHiveQueryId
operator|.
name|putIfAbsent
argument_list|(
name|queryIdentifier
argument_list|,
name|hiveQueryIdString
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering request for {} with the ShuffleHandler"
argument_list|,
name|queryIdentifier
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|vertex
operator|.
name|getIsExternalSubmission
argument_list|()
condition|)
block|{
name|ShuffleHandler
operator|.
name|get
argument_list|()
operator|.
name|registerDag
argument_list|(
name|appIdString
argument_list|,
name|dagIdentifier
argument_list|,
name|appToken
argument_list|,
name|user
argument_list|,
name|queryInfo
operator|.
name|getLocalDirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|queryInfo
operator|.
name|registerFragment
argument_list|(
name|vertexName
argument_list|,
name|fragmentNumber
argument_list|,
name|attemptNumber
argument_list|,
name|vertex
argument_list|,
name|fragmentIdString
argument_list|)
return|;
block|}
finally|finally
block|{
name|dagLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|registerDag
parameter_list|(
name|String
name|applicationId
parameter_list|,
name|int
name|dagId
parameter_list|,
name|String
name|user
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
block|{
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
init|=
name|TokenCache
operator|.
name|getSessionToken
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
name|QueryIdentifier
name|queryIdentifier
init|=
operator|new
name|QueryIdentifier
argument_list|(
name|applicationId
argument_list|,
name|dagId
argument_list|)
decl_stmt|;
name|ReadWriteLock
name|dagLock
init|=
name|getDagLock
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
name|dagLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ShuffleHandler
operator|.
name|get
argument_list|()
operator|.
name|registerDag
argument_list|(
name|applicationId
argument_list|,
name|dagId
argument_list|,
name|jobToken
argument_list|,
name|user
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dagLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Indicate to the tracker that a fragment is complete. This is from internal execution within the daemon    * @param fragmentInfo    */
name|void
name|fragmentComplete
parameter_list|(
name|QueryFragmentInfo
name|fragmentInfo
parameter_list|)
block|{
name|QueryIdentifier
name|qId
init|=
name|fragmentInfo
operator|.
name|getQueryInfo
argument_list|()
operator|.
name|getQueryIdentifier
argument_list|()
decl_stmt|;
name|QueryInfo
name|queryInfo
init|=
name|queryInfoMap
operator|.
name|get
argument_list|(
name|qId
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryInfo
operator|==
literal|null
condition|)
block|{
comment|// Possible because a queryComplete message from the AM can come in first - KILL / SUCCESSFUL,
comment|// before the fragmentComplete is reported
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring fragmentComplete message for unknown query: {}"
argument_list|,
name|qId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryInfo
operator|.
name|unregisterFragment
argument_list|(
name|fragmentInfo
argument_list|)
expr_stmt|;
comment|// Try marking the query as complete if this is an external submission
name|handleFragmentCompleteExternalQuery
argument_list|(
name|queryInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|QueryFragmentInfo
argument_list|>
name|getRegisteredFragments
parameter_list|(
name|QueryIdentifier
name|queryIdentifier
parameter_list|)
block|{
name|ReadWriteLock
name|dagLock
init|=
name|getDagLock
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
name|dagLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|QueryInfo
name|queryInfo
init|=
name|queryInfoMap
operator|.
name|get
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryInfo
operator|==
literal|null
condition|)
block|{
comment|// Race with queryComplete
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown query: Returning an empty list of fragments"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|queryInfo
operator|.
name|getRegisteredFragments
argument_list|()
return|;
block|}
finally|finally
block|{
name|dagLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Register completion for a query    * @param queryIdentifier    * @param deleteDelay    */
name|QueryInfo
name|queryComplete
parameter_list|(
name|QueryIdentifier
name|queryIdentifier
parameter_list|,
name|long
name|deleteDelay
parameter_list|,
name|boolean
name|isExternalQuery
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|deleteDelay
operator|==
operator|-
literal|1
condition|)
block|{
name|deleteDelay
operator|=
name|defaultDeleteDelaySeconds
expr_stmt|;
block|}
name|ReadWriteLock
name|dagLock
init|=
name|getDagLock
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
name|dagLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// If isExternalQuery -> the call is from within hte daemon, so no permission check required
comment|// to get access to the queryInfo instance.
name|QueryInfo
name|queryInfo
init|=
name|isExternalQuery
condition|?
name|queryInfoMap
operator|.
name|get
argument_list|(
name|queryIdentifier
argument_list|)
else|:
name|checkPermissionsAndGetQuery
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryInfo
operator|==
literal|null
condition|)
block|{
comment|// Should not happen.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring query complete for unknown dag: {}"
argument_list|,
name|queryIdentifier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing queryComplete for queryIdentifier={}, isExternalQuery={}, with deleteDelay={} seconds"
argument_list|,
name|queryIdentifier
argument_list|,
name|isExternalQuery
argument_list|,
name|deleteDelay
argument_list|)
expr_stmt|;
name|queryInfoMap
operator|.
name|remove
argument_list|(
name|queryIdentifier
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isExternalQuery
condition|)
block|{
name|rememberCompletedDag
argument_list|(
name|queryIdentifier
argument_list|)
expr_stmt|;
name|cleanupLocalDirs
argument_list|(
name|queryInfo
argument_list|,
name|deleteDelay
argument_list|)
expr_stmt|;
name|handleLogOnQueryCompletion
argument_list|(
name|queryInfo
operator|.
name|getHiveQueryIdString
argument_list|()
argument_list|,
name|queryInfo
operator|.
name|getDagIdString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If there's no pending fragments, queue some of the cleanup for a later point - locks, log rolling.
if|if
condition|(
name|queryInfo
operator|.
name|getRegisteredFragments
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Queueing future cleanup for external queryId: {}"
argument_list|,
name|queryInfo
operator|.
name|getHiveQueryIdString
argument_list|()
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|schedule
argument_list|(
operator|new
name|ExternalQueryCleanerCallable
argument_list|(
name|queryInfo
operator|.
name|getHiveQueryIdString
argument_list|()
argument_list|,
name|queryInfo
operator|.
name|getDagIdString
argument_list|()
argument_list|,
name|queryInfo
operator|.
name|getQueryIdentifier
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"NumRegisterFragments={}, Not queuing cleanup for external queryId={}"
argument_list|,
name|queryInfo
operator|.
name|getRegisteredFragments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|queryInfo
operator|.
name|getHiveQueryIdString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Clearing this before sending a kill is OK, since canFinish will change to false.
comment|// Ideally this should be a state machine where kills are issued to the executor,
comment|// and the structures are cleaned up once all tasks complete. New requests, however,
comment|// should not be allowed after a query complete is received.
name|sourceCompletionMap
operator|.
name|remove
argument_list|(
name|queryIdentifier
argument_list|)
expr_stmt|;
name|String
name|savedQueryId
init|=
name|queryIdentifierToHiveQueryId
operator|.
name|remove
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isExternalQuery
condition|)
block|{
name|removeQuerySpecificLock
argument_list|(
name|queryIdentifier
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|savedQueryId
operator|!=
literal|null
condition|)
block|{
name|ObjectCacheFactory
operator|.
name|removeLlapQueryCache
argument_list|(
name|savedQueryId
argument_list|)
expr_stmt|;
block|}
return|return
name|queryInfo
return|;
block|}
finally|finally
block|{
name|dagLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|cleanupLocalDirs
parameter_list|(
name|QueryInfo
name|queryInfo
parameter_list|,
name|long
name|deleteDelay
parameter_list|)
block|{
name|String
index|[]
name|localDirs
init|=
name|queryInfo
operator|.
name|getLocalDirsNoCreate
argument_list|()
decl_stmt|;
if|if
condition|(
name|localDirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|localDir
range|:
name|localDirs
control|)
block|{
name|cleanupDir
argument_list|(
name|localDir
argument_list|,
name|deleteDelay
argument_list|)
expr_stmt|;
name|ShuffleHandler
operator|.
name|get
argument_list|()
operator|.
name|unregisterDag
argument_list|(
name|localDir
argument_list|,
name|queryInfo
operator|.
name|getAppIdString
argument_list|()
argument_list|,
name|queryInfo
operator|.
name|getDagIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handleLogOnQueryCompletion
parameter_list|(
name|String
name|queryIdString
parameter_list|,
name|String
name|dagIdString
parameter_list|)
block|{
if|if
condition|(
name|routeBasedLoggingEnabled
condition|)
block|{
comment|// Inform the routing purgePolicy.
comment|// Send out a fake log message at the ERROR level with the MDC for this query setup. With an
comment|// LLAP custom appender this message will not be logged.
name|MDC
operator|.
name|put
argument_list|(
literal|"dagId"
argument_list|,
name|dagIdString
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
literal|"queryId"
argument_list|,
name|queryIdString
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|error
argument_list|(
name|QUERY_COMPLETE_MARKER
argument_list|,
literal|"Ignore this. Log line to interact with logger."
operator|+
literal|" Query complete: "
operator|+
name|queryIdString
operator|+
literal|", "
operator|+
name|dagIdString
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|MDC
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|removeQuerySpecificLock
parameter_list|(
name|QueryIdentifier
name|queryIdentifier
parameter_list|)
block|{
name|dagSpecificLocks
operator|.
name|remove
argument_list|(
name|queryIdentifier
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rememberCompletedDag
parameter_list|(
name|QueryIdentifier
name|queryIdentifier
parameter_list|)
block|{
if|if
condition|(
name|completedDagMap
operator|.
name|add
argument_list|(
name|queryIdentifier
argument_list|)
condition|)
block|{
comment|// We will remember completed DAG for an hour to avoid execution out-of-order fragments.
name|executorService
operator|.
name|schedule
argument_list|(
operator|new
name|DagMapCleanerCallable
argument_list|(
name|queryIdentifier
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't add {} to completed dag set"
argument_list|,
name|queryIdentifier
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Register an update to a source within an executing dag    * @param queryIdentifier    * @param sourceName    * @param sourceState    */
name|void
name|registerSourceStateChange
parameter_list|(
name|QueryIdentifier
name|queryIdentifier
parameter_list|,
name|String
name|sourceName
parameter_list|,
name|SourceStateProto
name|sourceState
parameter_list|)
throws|throws
name|IOException
block|{
name|getSourceCompletionMap
argument_list|(
name|queryIdentifier
argument_list|)
operator|.
name|put
argument_list|(
name|sourceName
argument_list|,
name|sourceState
argument_list|)
expr_stmt|;
name|QueryInfo
name|queryInfo
init|=
name|checkPermissionsAndGetQuery
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryInfo
operator|!=
literal|null
condition|)
block|{
name|queryInfo
operator|.
name|sourceStateUpdated
argument_list|(
name|sourceName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Could be null if there's a race between the threads processing requests, with a
comment|// dag finish processed earlier.
block|}
block|}
specifier|private
name|ReentrantReadWriteLock
name|getDagLockNoCreate
parameter_list|(
name|QueryIdentifier
name|queryIdentifier
parameter_list|)
block|{
return|return
name|dagSpecificLocks
operator|.
name|get
argument_list|(
name|queryIdentifier
argument_list|)
return|;
block|}
specifier|private
name|ReentrantReadWriteLock
name|getDagLock
parameter_list|(
name|QueryIdentifier
name|queryIdentifier
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ReentrantReadWriteLock
name|dagLock
init|=
name|dagSpecificLocks
operator|.
name|get
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|dagLock
operator|==
literal|null
condition|)
block|{
name|dagLock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
name|dagSpecificLocks
operator|.
name|put
argument_list|(
name|queryIdentifier
argument_list|,
name|dagLock
argument_list|)
expr_stmt|;
block|}
return|return
name|dagLock
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|getSourceCompletionMap
parameter_list|(
name|QueryIdentifier
name|queryIdentifier
parameter_list|)
block|{
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|dagMap
init|=
name|sourceCompletionMap
operator|.
name|get
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|dagMap
operator|==
literal|null
condition|)
block|{
name|dagMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|old
init|=
name|sourceCompletionMap
operator|.
name|putIfAbsent
argument_list|(
name|queryIdentifier
argument_list|,
name|dagMap
argument_list|)
decl_stmt|;
name|dagMap
operator|=
operator|(
name|old
operator|!=
literal|null
operator|)
condition|?
name|old
else|:
name|dagMap
expr_stmt|;
block|}
return|return
name|dagMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStart
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|" started"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStop
parameter_list|()
block|{
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|getName
argument_list|()
operator|+
literal|" stopped"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|cleanupDir
parameter_list|(
name|String
name|dir
parameter_list|,
name|long
name|deleteDelay
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduling deletion of {} after {} seconds"
argument_list|,
name|dir
argument_list|,
name|deleteDelay
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|schedule
argument_list|(
operator|new
name|FileCleanerCallable
argument_list|(
name|dir
argument_list|)
argument_list|,
name|deleteDelay
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|FileCleanerCallable
extends|extends
name|CallableWithNdc
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|dirToDelete
decl_stmt|;
specifier|private
name|FileCleanerCallable
parameter_list|(
name|String
name|dirToDelete
parameter_list|)
block|{
name|this
operator|.
name|dirToDelete
operator|=
name|dirToDelete
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|callInternal
parameter_list|()
block|{
name|Path
name|pathToDelete
init|=
operator|new
name|Path
argument_list|(
name|dirToDelete
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting path: "
operator|+
name|pathToDelete
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|localFs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|dirToDelete
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring exception while cleaning up path: "
operator|+
name|pathToDelete
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
class|class
name|DagMapCleanerCallable
extends|extends
name|CallableWithNdc
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|QueryIdentifier
name|queryIdentifier
decl_stmt|;
specifier|private
name|DagMapCleanerCallable
parameter_list|(
name|QueryIdentifier
name|queryIdentifier
parameter_list|)
block|{
name|this
operator|.
name|queryIdentifier
operator|=
name|queryIdentifier
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|callInternal
parameter_list|()
block|{
name|completedDagMap
operator|.
name|remove
argument_list|(
name|queryIdentifier
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
class|class
name|ExternalQueryCleanerCallable
extends|extends
name|CallableWithNdc
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|queryIdString
decl_stmt|;
specifier|private
specifier|final
name|String
name|dagIdString
decl_stmt|;
specifier|private
specifier|final
name|QueryIdentifier
name|queryIdentifier
decl_stmt|;
specifier|public
name|ExternalQueryCleanerCallable
parameter_list|(
name|String
name|queryIdString
parameter_list|,
name|String
name|dagIdString
parameter_list|,
name|QueryIdentifier
name|queryIdentifier
parameter_list|)
block|{
name|this
operator|.
name|queryIdString
operator|=
name|queryIdString
expr_stmt|;
name|this
operator|.
name|dagIdString
operator|=
name|dagIdString
expr_stmt|;
name|this
operator|.
name|queryIdentifier
operator|=
name|queryIdentifier
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|callInternal
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"External cleanup callable for {}"
argument_list|,
name|queryIdentifier
argument_list|)
expr_stmt|;
name|ReentrantReadWriteLock
name|dagLock
init|=
name|getDagLockNoCreate
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|dagLock
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"null dagLock. No cleanup required at the moment for {}"
argument_list|,
name|queryIdString
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|boolean
name|locked
init|=
name|dagLock
operator|.
name|writeLock
argument_list|()
operator|.
name|tryLock
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|locked
condition|)
block|{
comment|// Something else holds the lock at the moment. Don't bother cleaning up.
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Lock not obtained. Skipping cleanup for {}"
argument_list|,
name|queryIdString
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
try|try
block|{
comment|// See if there are additional knownFragments. If there are, more fragments came in
comment|// after this cleanup was scheduled, and there's nothing to be done.
name|QueryInfo
name|queryInfo
init|=
name|queryInfoMap
operator|.
name|get
argument_list|(
name|queryIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryInfo
operator|!=
literal|null
condition|)
block|{
comment|// QueryInfo will only exist if more work came in, after this was scheduled.
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"QueryInfo found for {}. Expecting future cleanup"
argument_list|,
name|queryIdString
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing cleanup for {}"
argument_list|,
name|queryIdString
argument_list|)
expr_stmt|;
name|handleLogOnQueryCompletion
argument_list|(
name|queryIdString
argument_list|,
name|dagIdString
argument_list|)
expr_stmt|;
name|removeQuerySpecificLock
argument_list|(
name|queryIdentifier
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dagLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|QueryInfo
name|checkPermissionsAndGetQuery
parameter_list|(
name|QueryIdentifier
name|queryId
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryInfo
name|queryInfo
init|=
name|queryInfoMap
operator|.
name|get
argument_list|(
name|queryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryInfo
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|LlapTokenChecker
operator|.
name|checkPermissions
argument_list|(
name|clusterId
argument_list|,
name|queryInfo
operator|.
name|getTokenUserName
argument_list|()
argument_list|,
name|queryInfo
operator|.
name|getTokenAppId
argument_list|()
argument_list|,
name|queryInfo
operator|.
name|getQueryIdentifier
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|queryInfo
return|;
block|}
specifier|public
name|boolean
name|checkPermissionsForQuery
parameter_list|(
name|QueryIdentifier
name|queryId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|checkPermissionsAndGetQuery
argument_list|(
name|queryId
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|private
name|void
name|handleFragmentCompleteExternalQuery
parameter_list|(
name|QueryInfo
name|queryInfo
parameter_list|)
block|{
if|if
condition|(
name|queryInfo
operator|.
name|isExternalQuery
argument_list|()
condition|)
block|{
name|ReentrantReadWriteLock
name|dagLock
init|=
name|getDagLock
argument_list|(
name|queryInfo
operator|.
name|getQueryIdentifier
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dagLock
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring fragment completion for unknown query: {}"
argument_list|,
name|queryInfo
operator|.
name|getQueryIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|locked
init|=
name|dagLock
operator|.
name|writeLock
argument_list|()
operator|.
name|tryLock
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|locked
condition|)
block|{
comment|// Some other operation in progress using the same lock.
comment|// A subsequent fragmentComplete is expected to come in.
return|return;
block|}
try|try
block|{
if|if
condition|(
name|queryInfo
operator|.
name|getRegisteredFragments
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|queryComplete
argument_list|(
name|queryInfo
operator|.
name|getQueryIdentifier
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Not invoking queryComplete on fragmentComplete for {}, since there are known fragments. count={}"
argument_list|,
name|queryInfo
operator|.
name|getHiveQueryIdString
argument_list|()
argument_list|,
name|queryInfo
operator|.
name|getRegisteredFragments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to process query complete for external submission: {}"
argument_list|,
name|queryInfo
operator|.
name|getQueryIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dagLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

