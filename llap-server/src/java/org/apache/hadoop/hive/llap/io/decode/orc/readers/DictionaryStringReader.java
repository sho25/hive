begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|decode
operator|.
name|orc
operator|.
name|readers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|DynamicByteArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|InStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|IntegerReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|PositionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|DictionaryStringReader
implements|implements
name|StringReader
block|{
specifier|private
name|DynamicByteArray
name|dictionaryBuffer
decl_stmt|;
specifier|private
name|IntegerReader
name|data
decl_stmt|;
specifier|private
name|IntegerReader
name|lengths
decl_stmt|;
specifier|private
name|InStream
name|dictStream
decl_stmt|;
specifier|private
name|int
index|[]
name|dictionaryOffsets
decl_stmt|;
specifier|private
name|byte
index|[]
name|dictionaryBufferInBytesCache
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|LongColumnVector
name|scratchlcv
decl_stmt|;
specifier|private
name|int
name|dictionarySize
decl_stmt|;
specifier|public
name|DictionaryStringReader
parameter_list|(
name|IntegerReader
name|lengths
parameter_list|,
name|IntegerReader
name|data
parameter_list|,
name|InStream
name|dictionary
parameter_list|,
name|int
name|dictionarySize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|lengths
operator|=
name|lengths
expr_stmt|;
name|this
operator|.
name|dictionaryBuffer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dictStream
operator|=
name|dictionary
expr_stmt|;
name|this
operator|.
name|dictionaryOffsets
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dictionarySize
operator|=
name|dictionarySize
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|scratchlcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|readDictionary
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|readDictionary
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dictionaryBuffer
operator|==
literal|null
condition|)
block|{
name|dictionaryBuffer
operator|=
operator|new
name|DynamicByteArray
argument_list|(
literal|64
argument_list|,
name|dictStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|dictionaryBuffer
operator|.
name|readAll
argument_list|(
name|dictStream
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dictionaryOffsets
operator|==
literal|null
operator|||
name|dictionaryOffsets
operator|.
name|length
operator|<
name|dictionarySize
operator|+
literal|1
condition|)
block|{
name|dictionaryOffsets
operator|=
operator|new
name|int
index|[
name|dictionarySize
operator|+
literal|1
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dictionarySize
condition|;
operator|++
name|i
control|)
block|{
name|dictionaryOffsets
index|[
name|i
index|]
operator|=
name|offset
expr_stmt|;
name|offset
operator|+=
operator|(
name|int
operator|)
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|dictionaryOffsets
index|[
name|dictionarySize
index|]
operator|=
name|offset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented yet"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|skip
parameter_list|(
name|long
name|numValues
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not implemented yet"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|data
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Text
name|next
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|entry
init|=
operator|(
name|int
operator|)
name|data
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|dictionaryOffsets
index|[
name|entry
index|]
decl_stmt|;
name|int
name|length
init|=
name|getDictionaryEntryLength
argument_list|(
name|entry
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|Text
name|result
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|dictionaryBuffer
operator|.
name|setText
argument_list|(
name|result
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|int
name|getDictionaryEntryLength
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|length
init|=
literal|0
decl_stmt|;
comment|// if it isn't the last entry, subtract the offsets otherwise use
comment|// the buffer length.
if|if
condition|(
name|entry
operator|<
name|dictionaryOffsets
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|length
operator|=
name|dictionaryOffsets
index|[
name|entry
operator|+
literal|1
index|]
operator|-
name|offset
expr_stmt|;
block|}
else|else
block|{
name|length
operator|=
name|dictionaryBuffer
operator|.
name|size
argument_list|()
operator|-
name|offset
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnVector
name|nextVector
parameter_list|(
name|ColumnVector
name|previous
parameter_list|,
name|long
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesColumnVector
name|result
init|=
literal|null
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|,
name|length
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previous
expr_stmt|;
block|}
if|if
condition|(
name|dictionaryBuffer
operator|!=
literal|null
condition|)
block|{
comment|// Load dictionaryBuffer into cache.
if|if
condition|(
name|dictionaryBufferInBytesCache
operator|==
literal|null
condition|)
block|{
name|dictionaryBufferInBytesCache
operator|=
name|dictionaryBuffer
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Read string offsets
name|scratchlcv
operator|.
name|isNull
operator|=
name|result
operator|.
name|isNull
expr_stmt|;
name|lengths
operator|.
name|nextVector
argument_list|(
name|scratchlcv
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isRepeating
condition|)
block|{
comment|// The vector has non-repeating strings. Iterate thru the batch
comment|// and set strings one by one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|offset
operator|=
name|dictionaryOffsets
index|[
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
index|]
expr_stmt|;
name|length
operator|=
name|getDictionaryEntryLength
argument_list|(
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is null then set offset and length to zero (null string)
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// If the value is repeating then just set the first value in the
comment|// vector and set the isRepeating flag to true. No need to iterate thru and
comment|// set all the elements to the same value
name|offset
operator|=
name|dictionaryOffsets
index|[
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
index|]
expr_stmt|;
name|length
operator|=
name|getDictionaryEntryLength
argument_list|(
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|isRepeating
operator|=
name|scratchlcv
operator|.
name|isRepeating
expr_stmt|;
block|}
else|else
block|{
comment|// Entire stripe contains null strings.
name|result
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|result
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
literal|""
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

