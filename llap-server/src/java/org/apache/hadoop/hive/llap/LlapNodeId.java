begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_class
specifier|public
class|class
name|LlapNodeId
block|{
specifier|private
specifier|static
specifier|final
name|LoadingCache
argument_list|<
name|LlapNodeId
argument_list|,
name|LlapNodeId
argument_list|>
name|CACHE
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|softValues
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|LlapNodeId
argument_list|,
name|LlapNodeId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LlapNodeId
name|load
parameter_list|(
name|LlapNodeId
name|key
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|key
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|LlapNodeId
name|getInstance
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
name|CACHE
operator|.
name|getUnchecked
argument_list|(
operator|new
name|LlapNodeId
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|String
name|hostname
decl_stmt|;
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
name|LlapNodeId
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LlapNodeId
name|that
init|=
operator|(
name|LlapNodeId
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|port
operator|!=
name|that
operator|.
name|port
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|hostname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|hostname
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|hostname
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|1009
operator|*
name|result
operator|+
name|port
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|hostname
operator|+
literal|":"
operator|+
name|port
return|;
block|}
block|}
end_class

end_unit

