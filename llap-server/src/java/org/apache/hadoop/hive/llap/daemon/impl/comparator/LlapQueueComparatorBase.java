begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|comparator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskRunnerCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorService
operator|.
name|TaskWrapper
import|;
end_import

begin_comment
comment|/**  * The base class for LLAP queue comparators that checks the criteria that always apply for task  * priorities, and then lets the specific implementations deal with heuristics, etc.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|LlapQueueComparatorBase
implements|implements
name|Comparator
argument_list|<
name|TaskWrapper
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TaskWrapper
name|t1
parameter_list|,
name|TaskWrapper
name|t2
parameter_list|)
block|{
name|TaskRunnerCallable
name|o1
init|=
name|t1
operator|.
name|getTaskRunnerCallable
argument_list|()
decl_stmt|;
name|TaskRunnerCallable
name|o2
init|=
name|t2
operator|.
name|getTaskRunnerCallable
argument_list|()
decl_stmt|;
comment|// Regardless of other criteria, ducks are always more important than non-ducks.
name|boolean
name|v1
init|=
name|o1
operator|.
name|isGuaranteed
argument_list|()
decl_stmt|,
name|v2
init|=
name|o2
operator|.
name|isGuaranteed
argument_list|()
decl_stmt|;
if|if
condition|(
name|v1
operator|!=
name|v2
condition|)
return|return
name|v1
condition|?
operator|-
literal|1
else|:
literal|1
return|;
comment|// Then, finishable must always precede non-finishable.
name|v1
operator|=
name|o1
operator|.
name|canFinishForPriority
argument_list|()
expr_stmt|;
name|v2
operator|=
name|o2
operator|.
name|canFinishForPriority
argument_list|()
expr_stmt|;
if|if
condition|(
name|v1
operator|!=
name|v2
condition|)
return|return
name|v1
condition|?
operator|-
literal|1
else|:
literal|1
return|;
comment|// Note: query priorities, if we add them, might go here.
comment|// After that, a heuristic is used to decide.
return|return
name|compareInternal
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
return|;
block|}
specifier|public
specifier|abstract
name|int
name|compareInternal
parameter_list|(
name|TaskRunnerCallable
name|o1
parameter_list|,
name|TaskRunnerCallable
name|o2
parameter_list|)
function_decl|;
block|}
end_class

end_unit

