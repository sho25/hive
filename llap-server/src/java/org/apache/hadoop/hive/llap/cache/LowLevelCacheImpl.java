begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|RecordReaderUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|Allocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DataCache
operator|.
name|BooleanRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DataCache
operator|.
name|DiskRangeListFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRangeList
operator|.
name|MutateHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonCacheMetrics
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
specifier|public
class|class
name|LowLevelCacheImpl
implements|implements
name|LowLevelCache
implements|,
name|BufferUsageManager
implements|,
name|LlapOomDebugDump
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CLEANUP_INTERVAL
init|=
literal|600
decl_stmt|;
specifier|private
specifier|final
name|EvictionAwareAllocator
name|allocator
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|newEvictions
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|Thread
name|cleanupThread
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|FileCache
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|FileCache
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LowLevelCachePolicy
name|cachePolicy
decl_stmt|;
specifier|private
specifier|final
name|long
name|cleanupInterval
decl_stmt|;
specifier|private
specifier|final
name|LlapDaemonCacheMetrics
name|metrics
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|doAssumeGranularBlocks
decl_stmt|;
specifier|public
name|LowLevelCacheImpl
parameter_list|(
name|LlapDaemonCacheMetrics
name|metrics
parameter_list|,
name|LowLevelCachePolicy
name|cachePolicy
parameter_list|,
name|EvictionAwareAllocator
name|allocator
parameter_list|,
name|boolean
name|doAssumeGranularBlocks
parameter_list|)
block|{
name|this
argument_list|(
name|metrics
argument_list|,
name|cachePolicy
argument_list|,
name|allocator
argument_list|,
name|doAssumeGranularBlocks
argument_list|,
name|DEFAULT_CLEANUP_INTERVAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|LowLevelCacheImpl
parameter_list|(
name|LlapDaemonCacheMetrics
name|metrics
parameter_list|,
name|LowLevelCachePolicy
name|cachePolicy
parameter_list|,
name|EvictionAwareAllocator
name|allocator
parameter_list|,
name|boolean
name|doAssumeGranularBlocks
parameter_list|,
name|long
name|cleanupInterval
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Low level cache; cleanup interval {} sec"
argument_list|,
name|cleanupInterval
argument_list|)
expr_stmt|;
name|this
operator|.
name|cachePolicy
operator|=
name|cachePolicy
expr_stmt|;
name|this
operator|.
name|allocator
operator|=
name|allocator
expr_stmt|;
name|this
operator|.
name|cleanupInterval
operator|=
name|cleanupInterval
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|doAssumeGranularBlocks
operator|=
name|doAssumeGranularBlocks
expr_stmt|;
block|}
specifier|public
name|void
name|startThreads
parameter_list|()
block|{
if|if
condition|(
name|cleanupInterval
operator|<
literal|0
condition|)
return|return;
name|cleanupThread
operator|=
operator|new
name|CleanupThread
argument_list|(
name|cleanupInterval
argument_list|)
expr_stmt|;
name|cleanupThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DiskRangeList
name|getFileData
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|DiskRangeList
name|ranges
parameter_list|,
name|long
name|baseOffset
parameter_list|,
name|DiskRangeListFactory
name|factory
parameter_list|,
name|LowLevelCacheCounters
name|qfCounters
parameter_list|,
name|BooleanRef
name|gotAllData
parameter_list|)
block|{
if|if
condition|(
name|ranges
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DiskRangeList
name|prev
init|=
name|ranges
operator|.
name|prev
decl_stmt|;
name|FileCache
name|subCache
init|=
name|cache
operator|.
name|get
argument_list|(
name|fileKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|subCache
operator|==
literal|null
operator|||
operator|!
name|subCache
operator|.
name|incRef
argument_list|()
condition|)
block|{
name|long
name|totalMissed
init|=
name|ranges
operator|.
name|getTotalLength
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|incrCacheRequestedBytes
argument_list|(
name|totalMissed
argument_list|)
expr_stmt|;
if|if
condition|(
name|qfCounters
operator|!=
literal|null
condition|)
block|{
name|qfCounters
operator|.
name|recordCacheMiss
argument_list|(
name|totalMissed
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
name|gotAllData
operator|!=
literal|null
condition|)
block|{
name|gotAllData
operator|.
name|value
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|ranges
return|;
block|}
try|try
block|{
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|prev
operator|=
operator|new
name|MutateHelper
argument_list|(
name|ranges
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gotAllData
operator|!=
literal|null
condition|)
block|{
name|gotAllData
operator|.
name|value
operator|=
literal|true
expr_stmt|;
block|}
name|DiskRangeList
name|current
init|=
name|ranges
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrCacheRequestedBytes
argument_list|(
name|current
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// We assume ranges in "ranges" are non-overlapping; thus, we will save next in advance.
name|DiskRangeList
name|next
init|=
name|current
operator|.
name|next
decl_stmt|;
name|getOverlappingRanges
argument_list|(
name|baseOffset
argument_list|,
name|current
argument_list|,
name|subCache
operator|.
name|cache
argument_list|,
name|factory
argument_list|,
name|gotAllData
argument_list|)
expr_stmt|;
name|current
operator|=
name|next
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|subCache
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isInvalid
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|qfCounters
operator|!=
literal|null
condition|)
block|{
name|DiskRangeList
name|current
init|=
name|prev
operator|.
name|next
decl_stmt|;
name|long
name|bytesHit
init|=
literal|0
decl_stmt|,
name|bytesMissed
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
comment|// This assumes no ranges passed to cache to fetch have data beforehand.
if|if
condition|(
name|current
operator|.
name|hasData
argument_list|()
condition|)
block|{
name|bytesHit
operator|+=
name|current
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|gotAllData
operator|.
name|value
condition|)
block|{
name|isInvalid
operator|=
literal|true
expr_stmt|;
block|}
name|bytesMissed
operator|+=
name|current
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|current
operator|=
name|current
operator|.
name|next
expr_stmt|;
block|}
name|qfCounters
operator|.
name|recordCacheHit
argument_list|(
name|bytesHit
argument_list|)
expr_stmt|;
name|qfCounters
operator|.
name|recordCacheMiss
argument_list|(
name|bytesMissed
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gotAllData
operator|.
name|value
condition|)
block|{
name|DiskRangeList
name|current
init|=
name|prev
operator|.
name|next
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|hasData
argument_list|()
condition|)
block|{
name|isInvalid
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|current
operator|=
name|current
operator|.
name|next
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isInvalid
condition|)
block|{
name|StringBuilder
name|invalidMsg
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Internal error - gotAllData=true but the resulting ranges are "
argument_list|)
operator|.
name|append
argument_list|(
name|RecordReaderUtils
operator|.
name|stringifyDiskRanges
argument_list|(
name|prev
operator|.
name|next
argument_list|)
argument_list|)
decl_stmt|;
name|subCache
operator|=
name|cache
operator|.
name|get
argument_list|(
name|fileKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|subCache
operator|!=
literal|null
operator|&&
name|subCache
operator|.
name|incRef
argument_list|()
condition|)
block|{
try|try
block|{
name|invalidMsg
operator|.
name|append
argument_list|(
literal|"; cache ranges (not necessarily consistent) are "
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|LlapDataBuffer
argument_list|>
name|e
range|:
name|subCache
operator|.
name|cache
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|start
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|,
name|end
init|=
name|start
operator|+
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|declaredCachedLength
decl_stmt|;
name|invalidMsg
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|start
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|end
argument_list|)
operator|.
name|append
argument_list|(
literal|"), "
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|subCache
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|invalidMsg
operator|.
name|append
argument_list|(
literal|"; cache ranges can no longer be determined"
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|invalidMsg
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|s
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|s
argument_list|)
throw|;
block|}
return|return
name|prev
operator|.
name|next
return|;
block|}
specifier|private
name|void
name|getOverlappingRanges
parameter_list|(
name|long
name|baseOffset
parameter_list|,
name|DiskRangeList
name|currentNotCached
parameter_list|,
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|LlapDataBuffer
argument_list|>
name|cache
parameter_list|,
name|DiskRangeListFactory
name|factory
parameter_list|,
name|BooleanRef
name|gotAllData
parameter_list|)
block|{
name|long
name|absOffset
init|=
name|currentNotCached
operator|.
name|getOffset
argument_list|()
operator|+
name|baseOffset
decl_stmt|;
if|if
condition|(
operator|!
name|doAssumeGranularBlocks
condition|)
block|{
comment|// This currently only happens in tests. See getFileData comment on the interface.
name|Long
name|prevOffset
init|=
name|cache
operator|.
name|floorKey
argument_list|(
name|absOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevOffset
operator|!=
literal|null
condition|)
block|{
name|absOffset
operator|=
name|prevOffset
expr_stmt|;
block|}
block|}
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|LlapDataBuffer
argument_list|>
argument_list|>
name|matches
init|=
name|cache
operator|.
name|subMap
argument_list|(
name|absOffset
argument_list|,
name|currentNotCached
operator|.
name|getEnd
argument_list|()
operator|+
name|baseOffset
argument_list|)
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|cacheEnd
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|matches
operator|.
name|hasNext
argument_list|()
condition|)
block|{
assert|assert
name|currentNotCached
operator|!=
literal|null
assert|;
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|LlapDataBuffer
argument_list|>
name|e
init|=
name|matches
operator|.
name|next
argument_list|()
decl_stmt|;
name|LlapDataBuffer
name|buffer
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|requestedLength
init|=
name|currentNotCached
operator|.
name|getLength
argument_list|()
decl_stmt|;
comment|// Lock the buffer, validate it and add to results.
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|trace
argument_list|(
literal|"Locking {} during get"
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|lockBuffer
argument_list|(
name|buffer
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// If we cannot lock, remove this from cache and continue.
name|matches
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|gotAllData
operator|!=
literal|null
condition|)
block|{
name|gotAllData
operator|.
name|value
operator|=
literal|false
expr_stmt|;
block|}
continue|continue;
block|}
name|long
name|cacheOffset
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|cacheEnd
operator|>
name|cacheOffset
condition|)
block|{
comment|// compare with old cacheEnd
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cache has overlapping buffers: "
operator|+
name|cacheEnd
operator|+
literal|") and ["
operator|+
name|cacheOffset
operator|+
literal|", "
operator|+
operator|(
name|cacheOffset
operator|+
name|buffer
operator|.
name|declaredCachedLength
operator|)
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|cacheEnd
operator|=
name|cacheOffset
operator|+
name|buffer
operator|.
name|declaredCachedLength
expr_stmt|;
name|DiskRangeList
name|currentCached
init|=
name|factory
operator|.
name|createCacheChunk
argument_list|(
name|buffer
argument_list|,
name|cacheOffset
operator|-
name|baseOffset
argument_list|,
name|cacheEnd
operator|-
name|baseOffset
argument_list|)
decl_stmt|;
name|currentNotCached
operator|=
name|addCachedBufferToIter
argument_list|(
name|currentNotCached
argument_list|,
name|currentCached
argument_list|,
name|gotAllData
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrCacheHitBytes
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|requestedLength
argument_list|,
name|currentCached
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentNotCached
operator|!=
literal|null
condition|)
block|{
assert|assert
operator|!
name|currentNotCached
operator|.
name|hasData
argument_list|()
assert|;
comment|// Assumes no ranges passed to cache to read have data.
if|if
condition|(
name|gotAllData
operator|!=
literal|null
condition|)
block|{
name|gotAllData
operator|.
name|value
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Adds cached buffer to buffer list.    * @param currentNotCached Pointer to the list node where we are inserting.    * @param currentCached The cached buffer found for this node, to insert.    * @return The new currentNotCached pointer, following the cached buffer insertion.    */
specifier|private
name|DiskRangeList
name|addCachedBufferToIter
parameter_list|(
name|DiskRangeList
name|currentNotCached
parameter_list|,
name|DiskRangeList
name|currentCached
parameter_list|,
name|BooleanRef
name|gotAllData
parameter_list|)
block|{
if|if
condition|(
name|currentNotCached
operator|.
name|getOffset
argument_list|()
operator|>=
name|currentCached
operator|.
name|getOffset
argument_list|()
condition|)
block|{
if|if
condition|(
name|currentNotCached
operator|.
name|getEnd
argument_list|()
operator|<=
name|currentCached
operator|.
name|getEnd
argument_list|()
condition|)
block|{
comment|// we assume it's always "==" now
comment|// Replace the entire current DiskRange with new cached range.
name|currentNotCached
operator|.
name|replaceSelfWith
argument_list|(
name|currentCached
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
comment|// Insert the new cache range before the disk range.
name|currentNotCached
operator|.
name|insertPartBefore
argument_list|(
name|currentCached
argument_list|)
expr_stmt|;
return|return
name|currentNotCached
return|;
block|}
block|}
else|else
block|{
comment|// There's some part of current buffer that is not cached.
if|if
condition|(
name|gotAllData
operator|!=
literal|null
condition|)
block|{
name|gotAllData
operator|.
name|value
operator|=
literal|false
expr_stmt|;
block|}
assert|assert
name|currentNotCached
operator|.
name|getOffset
argument_list|()
operator|<
name|currentCached
operator|.
name|getOffset
argument_list|()
operator|||
name|currentNotCached
operator|.
name|prev
operator|==
literal|null
operator|||
name|currentNotCached
operator|.
name|prev
operator|.
name|getEnd
argument_list|()
operator|<=
name|currentCached
operator|.
name|getOffset
argument_list|()
assert|;
name|long
name|endOffset
init|=
name|currentNotCached
operator|.
name|getEnd
argument_list|()
decl_stmt|;
name|currentNotCached
operator|.
name|insertPartAfter
argument_list|(
name|currentCached
argument_list|)
expr_stmt|;
if|if
condition|(
name|endOffset
operator|<=
name|currentCached
operator|.
name|getEnd
argument_list|()
condition|)
block|{
comment|// we assume it's always "==" now
return|return
literal|null
return|;
comment|// No more matches expected...
block|}
else|else
block|{
comment|// Insert the new disk range after the cache range. TODO: not strictly necessary yet?
name|currentNotCached
operator|=
operator|new
name|DiskRangeList
argument_list|(
name|currentCached
operator|.
name|getEnd
argument_list|()
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
name|currentCached
operator|.
name|insertAfter
argument_list|(
name|currentNotCached
argument_list|)
expr_stmt|;
return|return
name|currentNotCached
return|;
block|}
block|}
block|}
specifier|private
name|boolean
name|lockBuffer
parameter_list|(
name|LlapDataBuffer
name|buffer
parameter_list|,
name|boolean
name|doNotifyPolicy
parameter_list|)
block|{
name|int
name|rc
init|=
name|buffer
operator|.
name|incRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|>
literal|0
condition|)
block|{
name|metrics
operator|.
name|incrCacheNumLockedBuffers
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doNotifyPolicy
operator|&&
name|rc
operator|==
literal|1
condition|)
block|{
comment|// We have just locked a buffer that wasn't previously locked.
name|cachePolicy
operator|.
name|notifyLock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|putFileData
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|DiskRange
index|[]
name|ranges
parameter_list|,
name|MemoryBuffer
index|[]
name|buffers
parameter_list|,
name|long
name|baseOffset
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|LowLevelCacheCounters
name|qfCounters
parameter_list|)
block|{
name|long
index|[]
name|result
init|=
literal|null
decl_stmt|;
assert|assert
name|buffers
operator|.
name|length
operator|==
name|ranges
operator|.
name|length
assert|;
name|FileCache
name|subCache
init|=
name|getOrAddFileSubCache
argument_list|(
name|fileKey
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|buffers
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|trace
argument_list|(
literal|"Locking {} at put time"
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
name|boolean
name|canLock
init|=
name|lockBuffer
argument_list|(
name|buffer
argument_list|,
literal|false
argument_list|)
decl_stmt|;
assert|assert
name|canLock
assert|;
name|long
name|offset
init|=
name|ranges
index|[
name|i
index|]
operator|.
name|getOffset
argument_list|()
operator|+
name|baseOffset
decl_stmt|;
assert|assert
name|buffer
operator|.
name|declaredCachedLength
operator|==
name|LlapDataBuffer
operator|.
name|UNKNOWN_CACHED_LENGTH
assert|;
name|buffer
operator|.
name|declaredCachedLength
operator|=
name|ranges
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Overwhelmingly executes once, or maybe twice (replacing stale value).
name|LlapDataBuffer
name|oldVal
init|=
name|subCache
operator|.
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|offset
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldVal
operator|==
literal|null
condition|)
block|{
comment|// Cached successfully, add to policy.
name|cachePolicy
operator|.
name|cache
argument_list|(
name|buffer
argument_list|,
name|priority
argument_list|)
expr_stmt|;
if|if
condition|(
name|qfCounters
operator|!=
literal|null
condition|)
block|{
name|qfCounters
operator|.
name|recordAllocBytes
argument_list|(
name|buffer
operator|.
name|byteBuffer
operator|.
name|remaining
argument_list|()
argument_list|,
name|buffer
operator|.
name|allocSize
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|LlapIoImpl
operator|.
name|CACHE_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|CACHE_LOGGER
operator|.
name|trace
argument_list|(
literal|"Trying to cache when the chunk is already cached for"
operator|+
literal|" {}@{} (base {}); old {}, new {}"
argument_list|,
name|fileKey
argument_list|,
name|offset
argument_list|,
name|baseOffset
argument_list|,
name|oldVal
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|trace
argument_list|(
literal|"Locking {} due to cache collision"
argument_list|,
name|oldVal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockBuffer
argument_list|(
name|oldVal
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// We don't do proper overlap checking because it would cost cycles and we
comment|// think it will never happen. We do perform the most basic check here.
if|if
condition|(
name|oldVal
operator|.
name|declaredCachedLength
operator|!=
name|buffer
operator|.
name|declaredCachedLength
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Found a block with different length at the same offset: "
operator|+
name|oldVal
operator|.
name|declaredCachedLength
operator|+
literal|" vs "
operator|+
name|buffer
operator|.
name|declaredCachedLength
operator|+
literal|" @"
operator|+
name|offset
operator|+
literal|" (base "
operator|+
name|baseOffset
operator|+
literal|")"
argument_list|)
throw|;
block|}
comment|// We found an old, valid block for this key in the cache.
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|trace
argument_list|(
literal|"Unlocking {} due to cache collision with {}"
argument_list|,
name|buffer
argument_list|,
name|oldVal
argument_list|)
expr_stmt|;
block|}
name|unlockBuffer
argument_list|(
name|buffer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|buffers
index|[
name|i
index|]
operator|=
name|oldVal
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|long
index|[
name|align64
argument_list|(
name|buffers
operator|.
name|length
argument_list|)
operator|>>>
literal|6
index|]
expr_stmt|;
block|}
name|result
index|[
name|i
operator|>>>
literal|6
index|]
operator||=
operator|(
literal|1
operator|<<
operator|(
name|i
operator|&
literal|63
operator|)
operator|)
expr_stmt|;
comment|// indicate that we've replaced the value
break|break;
block|}
comment|// We found some old value but couldn't incRef it; remove it.
name|subCache
operator|.
name|cache
operator|.
name|remove
argument_list|(
name|offset
argument_list|,
name|oldVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|subCache
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * All this mess is necessary because we want to be able to remove sub-caches for fully    * evicted files. It may actually be better to have non-nested map with object keys?    */
specifier|private
name|FileCache
name|getOrAddFileSubCache
parameter_list|(
name|Object
name|fileKey
parameter_list|)
block|{
name|FileCache
name|newSubCache
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Overwhelmingly executes once.
name|FileCache
name|subCache
init|=
name|cache
operator|.
name|get
argument_list|(
name|fileKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|subCache
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|subCache
operator|.
name|incRef
argument_list|()
condition|)
return|return
name|subCache
return|;
comment|// Main path - found it, incRef-ed it.
if|if
condition|(
name|newSubCache
operator|==
literal|null
condition|)
block|{
name|newSubCache
operator|=
operator|new
name|FileCache
argument_list|()
expr_stmt|;
name|newSubCache
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
comment|// Found a stale value we cannot incRef; try to replace it with new value.
if|if
condition|(
name|cache
operator|.
name|replace
argument_list|(
name|fileKey
argument_list|,
name|subCache
argument_list|,
name|newSubCache
argument_list|)
condition|)
return|return
name|newSubCache
return|;
continue|continue;
comment|// Someone else replaced/removed a stale value, try again.
block|}
comment|// No value found.
if|if
condition|(
name|newSubCache
operator|==
literal|null
condition|)
block|{
name|newSubCache
operator|=
operator|new
name|FileCache
argument_list|()
expr_stmt|;
name|newSubCache
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
name|FileCache
name|oldSubCache
init|=
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|fileKey
argument_list|,
name|newSubCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldSubCache
operator|==
literal|null
condition|)
return|return
name|newSubCache
return|;
comment|// Main path 2 - created a new file cache.
if|if
condition|(
name|oldSubCache
operator|.
name|incRef
argument_list|()
condition|)
return|return
name|oldSubCache
return|;
comment|// Someone created one in parallel.
comment|// Someone created one in parallel and then it went stale.
if|if
condition|(
name|cache
operator|.
name|replace
argument_list|(
name|fileKey
argument_list|,
name|oldSubCache
argument_list|,
name|newSubCache
argument_list|)
condition|)
return|return
name|newSubCache
return|;
comment|// Someone else replaced/removed a parallel-added stale value, try again. Max confusion.
block|}
block|}
specifier|private
specifier|static
name|int
name|align64
parameter_list|(
name|int
name|number
parameter_list|)
block|{
return|return
operator|(
operator|(
name|number
operator|+
literal|63
operator|)
operator|&
operator|~
literal|63
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decRefBuffer
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
name|unlockBuffer
argument_list|(
operator|(
name|LlapDataBuffer
operator|)
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decRefBuffers
parameter_list|(
name|List
argument_list|<
name|MemoryBuffer
argument_list|>
name|cacheBuffers
parameter_list|)
block|{
for|for
control|(
name|MemoryBuffer
name|b
range|:
name|cacheBuffers
control|)
block|{
name|unlockBuffer
argument_list|(
operator|(
name|LlapDataBuffer
operator|)
name|b
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|unlockBuffer
parameter_list|(
name|LlapDataBuffer
name|buffer
parameter_list|,
name|boolean
name|handleLastDecRef
parameter_list|)
block|{
name|boolean
name|isLastDecref
init|=
operator|(
name|buffer
operator|.
name|decRef
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|handleLastDecRef
operator|&&
name|isLastDecref
condition|)
block|{
comment|// This is kind of not pretty, but this is how we detect whether buffer was cached.
comment|// We would always set this for lookups at put time.
if|if
condition|(
name|buffer
operator|.
name|declaredCachedLength
operator|!=
name|LlapDataBuffer
operator|.
name|UNKNOWN_CACHED_LENGTH
condition|)
block|{
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LlapIoImpl
operator|.
name|CACHE_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|CACHE_LOGGER
operator|.
name|trace
argument_list|(
literal|"Deallocating {} that was not cached"
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|deallocate
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
name|metrics
operator|.
name|decrCacheNumLockedBuffers
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|ByteBuffer
name|fakeBuf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|LlapDataBuffer
name|allocateFake
parameter_list|()
block|{
name|LlapDataBuffer
name|fake
init|=
operator|new
name|LlapDataBuffer
argument_list|()
decl_stmt|;
name|fake
operator|.
name|initialize
argument_list|(
operator|-
literal|1
argument_list|,
name|fakeBuf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|fake
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|notifyEvicted
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
name|allocator
operator|.
name|deallocateEvicted
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|newEvictions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|FileCache
block|{
specifier|private
specifier|static
specifier|final
name|int
name|EVICTED_REFCOUNT
init|=
operator|-
literal|1
decl_stmt|,
name|EVICTING_REFCOUNT
init|=
operator|-
literal|2
decl_stmt|;
comment|// TODO: given the specific data and lookups, perhaps the nested thing should not be a map
comment|//       In fact, CSLM has slow single-threaded operation, and one file is probably often read
comment|//       by just one (or few) threads, so a much more simple DS with locking might be better.
comment|//       Let's use CSLM for now, since it's available.
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|LlapDataBuffer
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|Long
argument_list|,
name|LlapDataBuffer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|refCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|incRef
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|value
init|=
name|refCount
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|EVICTED_REFCOUNT
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|value
operator|==
name|EVICTING_REFCOUNT
condition|)
continue|continue;
comment|// spin until it resolves; extremely rare
assert|assert
name|value
operator|>=
literal|0
assert|;
if|if
condition|(
name|refCount
operator|.
name|compareAndSet
argument_list|(
name|value
argument_list|,
name|value
operator|+
literal|1
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
name|void
name|decRef
parameter_list|()
block|{
name|int
name|value
init|=
name|refCount
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected refCount "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
name|boolean
name|startEvicting
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|value
init|=
name|refCount
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|1
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|refCount
operator|.
name|compareAndSet
argument_list|(
name|value
argument_list|,
name|EVICTING_REFCOUNT
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
name|void
name|commitEvicting
parameter_list|()
block|{
name|boolean
name|result
init|=
name|refCount
operator|.
name|compareAndSet
argument_list|(
name|EVICTING_REFCOUNT
argument_list|,
name|EVICTED_REFCOUNT
argument_list|)
decl_stmt|;
assert|assert
name|result
assert|;
block|}
name|void
name|abortEvicting
parameter_list|()
block|{
name|boolean
name|result
init|=
name|refCount
operator|.
name|compareAndSet
argument_list|(
name|EVICTING_REFCOUNT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|result
assert|;
block|}
block|}
specifier|private
specifier|final
class|class
name|CleanupThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|long
name|approxCleanupIntervalSec
decl_stmt|;
specifier|public
name|CleanupThread
parameter_list|(
name|long
name|cleanupInterval
parameter_list|)
block|{
name|super
argument_list|(
literal|"Llap low level cache cleanup thread"
argument_list|)
expr_stmt|;
name|this
operator|.
name|approxCleanupIntervalSec
operator|=
name|cleanupInterval
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setPriority
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|doOneCleanupRound
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cleanup thread has been interrupted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Cleanup has failed; the thread will now exit"
argument_list|,
name|t
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|doOneCleanupRound
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|evictionsSinceLast
init|=
name|newEvictions
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|evictionsSinceLast
operator|>
literal|0
condition|)
break|break;
synchronized|synchronized
init|(
name|newEvictions
init|)
block|{
name|newEvictions
operator|.
name|wait
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Duration is an estimate; if the size of the map changes, it can be very different.
name|long
name|endTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|approxCleanupIntervalSec
operator|*
literal|1000000000L
decl_stmt|;
name|int
name|leftToCheck
init|=
literal|0
decl_stmt|;
comment|// approximate
for|for
control|(
name|FileCache
name|fc
range|:
name|cache
operator|.
name|values
argument_list|()
control|)
block|{
name|leftToCheck
operator|+=
name|fc
operator|.
name|cache
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// Iterate thru all the filecaches. This is best-effort.
comment|// If these super-long-lived iterators affect the map in some bad way,
comment|// we'd need to sleep once per round instead.
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|FileCache
argument_list|>
argument_list|>
name|iter
init|=
name|cache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|isPastEndTime
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileCache
name|fc
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fc
operator|.
name|incRef
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Something other than cleanup is removing elements from map"
argument_list|)
throw|;
block|}
comment|// Iterate thru the file cache. This is best-effort.
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|LlapDataBuffer
argument_list|>
argument_list|>
name|subIter
init|=
name|fc
operator|.
name|cache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|isEmpty
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|subIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|long
name|time
init|=
operator|-
literal|1
decl_stmt|;
name|isPastEndTime
operator|=
name|isPastEndTime
operator|||
operator|(
operator|(
name|time
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|)
operator|>=
name|endTime
operator|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
operator|(
name|leftToCheck
operator|<=
literal|0
operator|)
operator|||
name|isPastEndTime
operator|)
condition|?
literal|1
else|:
operator|(
name|endTime
operator|-
name|time
operator|)
operator|/
operator|(
literal|1000000L
operator|*
name|leftToCheck
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|subIter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isInvalid
argument_list|()
condition|)
block|{
name|subIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|isEmpty
operator|=
literal|false
expr_stmt|;
block|}
operator|--
name|leftToCheck
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isEmpty
condition|)
block|{
name|fc
operator|.
name|decRef
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// FileCache might be empty; see if we can remove it. "tryWriteLock"
if|if
condition|(
operator|!
name|fc
operator|.
name|startEvicting
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|fc
operator|.
name|cache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fc
operator|.
name|commitEvicting
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fc
operator|.
name|abortEvicting
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|incRefBuffer
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
comment|// notifyReused implies that buffer is already locked; it's also called once for new
comment|// buffers that are not cached yet. Don't notify cache policy.
return|return
name|lockBuffer
argument_list|(
operator|(
operator|(
name|LlapDataBuffer
operator|)
name|buffer
operator|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Allocator
name|getAllocator
parameter_list|()
block|{
return|return
name|allocator
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|debugDumpForOom
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"File cache state "
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|FileCache
argument_list|>
name|e
range|:
name|cache
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|incRef
argument_list|()
condition|)
continue|continue;
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n  file "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|LlapDataBuffer
argument_list|>
name|e2
range|:
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|cache
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|incRef
argument_list|()
operator|<
literal|0
condition|)
continue|continue;
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n    ["
argument_list|)
operator|.
name|append
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
operator|+
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|declaredCachedLength
argument_list|)
operator|.
name|append
argument_list|(
literal|") => "
argument_list|)
operator|.
name|append
argument_list|(
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" alloc "
argument_list|)
operator|.
name|append
argument_list|(
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|byteBuffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

