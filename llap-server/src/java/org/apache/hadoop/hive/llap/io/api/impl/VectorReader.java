begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|ConsumerFeedback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|decode
operator|.
name|ColumnVectorProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_comment
comment|/** This used to be the main LLAP interface (next and close). However, since inputformat  * is used instead at present time, this class is just an extra layer. It could be merged  * into RecordReader of LlapInputFormat. */
end_comment

begin_class
specifier|public
class|class
name|VectorReader
implements|implements
name|Consumer
argument_list|<
name|ColumnVectorBatch
argument_list|>
block|{
specifier|private
specifier|final
name|InputSplit
name|split
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
decl_stmt|;
specifier|private
specifier|final
name|SearchArgument
name|sarg
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|columnNames
decl_stmt|;
specifier|private
specifier|final
name|ColumnVectorProducer
argument_list|<
name|?
argument_list|>
name|cvp
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|ColumnVectorBatch
argument_list|>
name|pendingData
init|=
operator|new
name|LinkedList
argument_list|<
name|ColumnVectorBatch
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Throwable
name|pendingError
init|=
literal|null
decl_stmt|;
comment|/** Vector that is currently being processed by our user. */
specifier|private
name|boolean
name|isDone
init|=
literal|false
decl_stmt|,
name|isClosed
init|=
literal|false
decl_stmt|;
specifier|private
name|ConsumerFeedback
argument_list|<
name|ColumnVectorBatch
argument_list|>
name|feedback
decl_stmt|;
specifier|public
name|VectorReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
parameter_list|,
name|SearchArgument
name|sarg
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|ColumnVectorProducer
argument_list|<
name|?
argument_list|>
name|cvp
parameter_list|)
block|{
name|this
operator|.
name|split
operator|=
name|split
expr_stmt|;
name|this
operator|.
name|columnIds
operator|=
name|columnIds
expr_stmt|;
name|this
operator|.
name|sarg
operator|=
name|sarg
expr_stmt|;
name|this
operator|.
name|columnNames
operator|=
name|columnNames
expr_stmt|;
name|this
operator|.
name|cvp
operator|=
name|cvp
expr_stmt|;
block|}
specifier|public
name|ColumnVectorBatch
name|next
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// TODO: if some collection is needed, return previous ColumnVectorBatch here
name|ColumnVectorBatch
name|current
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|feedback
operator|==
literal|null
condition|)
block|{
name|feedback
operator|=
name|cvp
operator|.
name|read
argument_list|(
name|split
argument_list|,
name|columnIds
argument_list|,
name|sarg
argument_list|,
name|columnNames
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"next called after close"
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
comment|// We are waiting for next block. Either we will get it, or be told we are done.
name|boolean
name|willBlock
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceMttEnabled
argument_list|()
condition|)
block|{
name|willBlock
operator|=
operator|!
name|isDone
operator|&&
name|pendingData
operator|.
name|isEmpty
argument_list|()
operator|&&
name|pendingError
operator|==
literal|null
expr_stmt|;
if|if
condition|(
name|willBlock
condition|)
block|{
comment|// TODO: separate log objects
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"next will block"
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
operator|!
name|isDone
operator|&&
name|pendingData
operator|.
name|isEmpty
argument_list|()
operator|&&
name|pendingError
operator|==
literal|null
condition|)
block|{
name|pendingData
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|willBlock
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"next is unblocked"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pendingError
operator|!=
literal|null
condition|)
block|{
name|rethrowErrorIfAny
argument_list|()
expr_stmt|;
block|}
name|current
operator|=
name|pendingData
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceMttEnabled
argument_list|()
operator|&&
name|current
operator|!=
literal|null
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing will receive vector "
operator|+
name|current
argument_list|)
expr_stmt|;
block|}
return|return
name|current
return|;
block|}
specifier|private
name|void
name|rethrowErrorIfAny
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pendingError
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|pendingError
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|pendingError
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|pendingError
argument_list|)
throw|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"close called; closed "
operator|+
name|isClosed
operator|+
literal|", done "
operator|+
name|isDone
operator|+
literal|", err "
operator|+
name|pendingError
operator|+
literal|", pending "
operator|+
name|pendingData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|feedback
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rethrowErrorIfAny
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDone
parameter_list|()
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"setDone called; cclosed "
operator|+
name|isClosed
operator|+
literal|", done "
operator|+
name|isDone
operator|+
literal|", err "
operator|+
name|pendingError
operator|+
literal|", pending "
operator|+
name|pendingData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
name|isDone
operator|=
literal|true
expr_stmt|;
name|pendingData
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|consumeData
parameter_list|(
name|ColumnVectorBatch
name|data
parameter_list|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"consume called; closed "
operator|+
name|isClosed
operator|+
literal|", done "
operator|+
name|isDone
operator|+
literal|", err "
operator|+
name|pendingError
operator|+
literal|", pending "
operator|+
name|pendingData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
return|return;
block|}
name|pendingData
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|pendingData
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"setError called; closed "
operator|+
name|isClosed
operator|+
literal|", done "
operator|+
name|isDone
operator|+
literal|", err "
operator|+
name|pendingError
operator|+
literal|", pending "
operator|+
name|pendingData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|t
operator|!=
literal|null
assert|;
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
name|pendingError
operator|=
name|t
expr_stmt|;
name|pendingData
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

