begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|FileMetadataCache
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBufferOrBuffers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DataCache
operator|.
name|BooleanRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|EvictionAwareAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|EvictionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LlapAllocatorBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LlapOomDebugDump
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCachePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|MemoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCache
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonCacheMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
operator|.
name|OrcBatchKey
import|;
end_import

begin_class
specifier|public
class|class
name|MetadataCache
implements|implements
name|LlapOomDebugDump
implements|,
name|FileMetadataCache
block|{
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|LlapBufferOrBuffers
argument_list|>
name|metadata
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|OrcFileEstimateErrors
argument_list|>
name|estimateErrors
decl_stmt|;
specifier|private
specifier|final
name|MemoryManager
name|memoryManager
decl_stmt|;
specifier|private
specifier|final
name|LowLevelCachePolicy
name|policy
decl_stmt|;
specifier|private
specifier|final
name|EvictionAwareAllocator
name|allocator
decl_stmt|;
specifier|private
specifier|final
name|LlapDaemonCacheMetrics
name|metrics
decl_stmt|;
specifier|public
name|MetadataCache
parameter_list|(
name|EvictionAwareAllocator
name|allocator
parameter_list|,
name|MemoryManager
name|memoryManager
parameter_list|,
name|LowLevelCachePolicy
name|policy
parameter_list|,
name|boolean
name|useEstimateCache
parameter_list|,
name|LlapDaemonCacheMetrics
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|memoryManager
operator|=
name|memoryManager
expr_stmt|;
name|this
operator|.
name|allocator
operator|=
name|allocator
expr_stmt|;
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|this
operator|.
name|estimateErrors
operator|=
name|useEstimateCache
condition|?
operator|new
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|OrcFileEstimateErrors
argument_list|>
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|putIncompleteCbs
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|DiskRange
index|[]
name|ranges
parameter_list|,
name|long
name|baseOffset
parameter_list|)
block|{
if|if
condition|(
name|estimateErrors
operator|==
literal|null
condition|)
return|return;
name|OrcFileEstimateErrors
name|errorData
init|=
name|estimateErrors
operator|.
name|get
argument_list|(
name|fileKey
argument_list|)
decl_stmt|;
name|boolean
name|isNew
init|=
literal|false
decl_stmt|;
comment|// We should technically update memory usage if updating the old object, but we don't do it
comment|// for now; there is no mechanism to properly notify the cache policy/etc. wrt parallel evicts.
if|if
condition|(
name|errorData
operator|==
literal|null
condition|)
block|{
name|errorData
operator|=
operator|new
name|OrcFileEstimateErrors
argument_list|(
name|fileKey
argument_list|)
expr_stmt|;
for|for
control|(
name|DiskRange
name|range
range|:
name|ranges
control|)
block|{
name|errorData
operator|.
name|addError
argument_list|(
name|range
operator|.
name|getOffset
argument_list|()
argument_list|,
name|range
operator|.
name|getLength
argument_list|()
argument_list|,
name|baseOffset
argument_list|)
expr_stmt|;
block|}
name|long
name|memUsage
init|=
name|errorData
operator|.
name|estimateMemoryUsage
argument_list|()
decl_stmt|;
name|memoryManager
operator|.
name|reserveMemory
argument_list|(
name|memUsage
argument_list|)
expr_stmt|;
name|OrcFileEstimateErrors
name|old
init|=
name|estimateErrors
operator|.
name|putIfAbsent
argument_list|(
name|fileKey
argument_list|,
name|errorData
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|errorData
operator|=
name|old
expr_stmt|;
name|memoryManager
operator|.
name|releaseMemory
argument_list|(
name|memUsage
argument_list|)
expr_stmt|;
name|policy
operator|.
name|notifyLock
argument_list|(
name|errorData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isNew
operator|=
literal|true
expr_stmt|;
name|policy
operator|.
name|cache
argument_list|(
name|errorData
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|policy
operator|.
name|notifyLock
argument_list|(
name|errorData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isNew
condition|)
block|{
for|for
control|(
name|DiskRange
name|range
range|:
name|ranges
control|)
block|{
name|errorData
operator|.
name|addError
argument_list|(
name|range
operator|.
name|getOffset
argument_list|()
argument_list|,
name|range
operator|.
name|getLength
argument_list|()
argument_list|,
name|baseOffset
argument_list|)
expr_stmt|;
block|}
block|}
name|policy
operator|.
name|notifyUnlock
argument_list|(
name|errorData
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DiskRangeList
name|getIncompleteCbs
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|DiskRangeList
name|ranges
parameter_list|,
name|long
name|baseOffset
parameter_list|,
name|BooleanRef
name|gotAllData
parameter_list|)
block|{
if|if
condition|(
name|estimateErrors
operator|==
literal|null
condition|)
return|return
name|ranges
return|;
name|OrcFileEstimateErrors
name|errors
init|=
name|estimateErrors
operator|.
name|get
argument_list|(
name|fileKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|==
literal|null
condition|)
return|return
name|ranges
return|;
name|policy
operator|.
name|notifyLock
argument_list|(
name|errors
argument_list|)
expr_stmt|;
name|policy
operator|.
name|notifyUnlock
argument_list|(
name|errors
argument_list|)
expr_stmt|;
comment|// Never locked for eviction; Java object.
return|return
name|errors
operator|.
name|getIncompleteCbs
argument_list|(
name|ranges
argument_list|,
name|baseOffset
argument_list|,
name|gotAllData
argument_list|)
return|;
block|}
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|LlapMetadataBuffer
argument_list|<
name|?
argument_list|>
name|buffer
parameter_list|)
block|{
name|LlapBufferOrBuffers
name|removed
init|=
name|metadata
operator|.
name|remove
argument_list|(
name|buffer
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|removed
operator|.
name|getSingleBuffer
argument_list|()
operator|!=
literal|null
condition|)
block|{
assert|assert
name|removed
operator|.
name|getSingleBuffer
argument_list|()
operator|==
name|buffer
assert|;
return|return;
block|}
name|discardMultiBuffer
argument_list|(
name|removed
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|OrcFileEstimateErrors
name|buffer
parameter_list|)
block|{
name|estimateErrors
operator|.
name|remove
argument_list|(
name|buffer
operator|.
name|getFileKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|debugDumpForOom
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|debugDumpShort
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|debugDumpShort
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
comment|// TODO: perhaps add counters for separate things and multiple buffer cases.
name|sb
operator|.
name|append
argument_list|(
literal|"\nMetadata cache state: "
argument_list|)
operator|.
name|append
argument_list|(
name|metadata
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" files and stripes, "
argument_list|)
operator|.
name|append
argument_list|(
name|estimateErrors
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" files w/ORC estimate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|LlapBufferOrBuffers
name|getFileMetadata
parameter_list|(
name|Object
name|fileKey
parameter_list|)
block|{
return|return
name|getInternal
argument_list|(
name|fileKey
argument_list|)
return|;
block|}
specifier|public
name|LlapBufferOrBuffers
name|getStripeTail
parameter_list|(
name|OrcBatchKey
name|stripeKey
parameter_list|)
block|{
return|return
name|getInternal
argument_list|(
operator|new
name|StripeKey
argument_list|(
name|stripeKey
operator|.
name|fileKey
argument_list|,
name|stripeKey
operator|.
name|stripeIx
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|LlapBufferOrBuffers
name|getInternal
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|LlapBufferOrBuffers
name|result
init|=
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|lockBuffer
argument_list|(
name|result
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// No need to discard the buffer we cannot lock - eviction takes care of that.
name|metadata
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapBufferOrBuffers
name|putFileMetadata
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|ByteBuffer
name|tailBuffer
parameter_list|)
block|{
return|return
name|putInternal
argument_list|(
name|fileKey
argument_list|,
name|tailBuffer
argument_list|)
return|;
block|}
specifier|public
name|LlapBufferOrBuffers
name|putStripeTail
parameter_list|(
name|OrcBatchKey
name|stripeKey
parameter_list|,
name|ByteBuffer
name|tailBuffer
parameter_list|)
block|{
return|return
name|putInternal
argument_list|(
operator|new
name|StripeKey
argument_list|(
name|stripeKey
operator|.
name|fileKey
argument_list|,
name|stripeKey
operator|.
name|stripeIx
argument_list|)
argument_list|,
name|tailBuffer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapBufferOrBuffers
name|putFileMetadata
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|int
name|length
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|LlapBufferOrBuffers
name|result
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Overwhelmingly executes once, or maybe twice (replacing stale value).
name|LlapBufferOrBuffers
name|oldVal
init|=
name|metadata
operator|.
name|get
argument_list|(
name|fileKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldVal
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|wrapBbForFile
argument_list|(
name|result
argument_list|,
name|fileKey
argument_list|,
name|length
argument_list|,
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lockBuffer
argument_list|(
name|result
argument_list|,
literal|false
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cannot lock a newly created value "
operator|+
name|result
argument_list|)
throw|;
block|}
name|oldVal
operator|=
name|metadata
operator|.
name|putIfAbsent
argument_list|(
name|fileKey
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldVal
operator|==
literal|null
condition|)
block|{
name|cacheInPolicy
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Cached successfully, add to policy.
return|return
name|result
return|;
block|}
block|}
if|if
condition|(
name|lockOldVal
argument_list|(
name|fileKey
argument_list|,
name|result
argument_list|,
name|oldVal
argument_list|)
condition|)
block|{
return|return
name|oldVal
return|;
block|}
comment|// We found some old value but couldn't incRef it; remove it.
name|metadata
operator|.
name|remove
argument_list|(
name|fileKey
argument_list|,
name|oldVal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|private
name|LlapBufferOrBuffers
name|wrapBbForFile
parameter_list|(
name|LlapBufferOrBuffers
name|result
parameter_list|,
name|Object
name|fileKey
parameter_list|,
name|int
name|length
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
return|return
name|result
return|;
name|int
name|maxAlloc
init|=
name|allocator
operator|.
name|getMaxAllocation
argument_list|()
decl_stmt|;
name|LlapMetadataBuffer
argument_list|<
name|Object
argument_list|>
index|[]
name|largeBuffers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|maxAlloc
operator|<
name|length
condition|)
block|{
name|largeBuffers
operator|=
operator|new
name|LlapMetadataBuffer
index|[
name|length
operator|/
name|maxAlloc
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|largeBuffers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|largeBuffers
index|[
name|i
index|]
operator|=
operator|new
name|LlapMetadataBuffer
argument_list|<
name|Object
argument_list|>
argument_list|(
name|fileKey
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|largeBuffers
argument_list|,
name|maxAlloc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|largeBuffers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|readIntoCacheBuffer
argument_list|(
name|stream
argument_list|,
name|maxAlloc
argument_list|,
name|largeBuffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|smallSize
init|=
name|length
operator|%
name|maxAlloc
decl_stmt|;
if|if
condition|(
name|smallSize
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|LlapMetadataBuffers
argument_list|(
name|largeBuffers
argument_list|)
return|;
block|}
else|else
block|{
name|LlapMetadataBuffer
argument_list|<
name|Object
argument_list|>
index|[]
name|smallBuffer
init|=
operator|new
name|LlapMetadataBuffer
index|[
literal|1
index|]
decl_stmt|;
name|smallBuffer
index|[
literal|0
index|]
operator|=
operator|new
name|LlapMetadataBuffer
argument_list|(
name|fileKey
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|smallBuffer
argument_list|,
name|length
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|readIntoCacheBuffer
argument_list|(
name|stream
argument_list|,
name|smallSize
argument_list|,
name|smallBuffer
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|largeBuffers
operator|==
literal|null
condition|)
block|{
return|return
name|smallBuffer
index|[
literal|0
index|]
return|;
comment|// This is the overwhelmingly common case.
block|}
else|else
block|{
name|LlapMetadataBuffer
argument_list|<
name|Object
argument_list|>
index|[]
name|cacheData
init|=
operator|new
name|LlapMetadataBuffer
index|[
name|largeBuffers
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|largeBuffers
argument_list|,
literal|0
argument_list|,
name|cacheData
argument_list|,
literal|0
argument_list|,
name|largeBuffers
operator|.
name|length
argument_list|)
expr_stmt|;
name|cacheData
index|[
name|largeBuffers
operator|.
name|length
index|]
operator|=
name|smallBuffer
index|[
literal|0
index|]
expr_stmt|;
return|return
operator|new
name|LlapMetadataBuffers
argument_list|<
name|Object
argument_list|>
argument_list|(
name|cacheData
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|readIntoCacheBuffer
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|int
name|length
parameter_list|,
name|MemoryBuffer
name|dest
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|bb
init|=
name|dest
operator|.
name|getByteBufferRaw
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|bb
operator|.
name|position
argument_list|()
decl_stmt|;
name|bb
operator|.
name|limit
argument_list|(
name|pos
operator|+
name|length
argument_list|)
expr_stmt|;
comment|// TODO: SeekableInputStream.readFully eventually calls a Hadoop method that used to be
comment|//       buggy in 2.7 and also anyway just does a copy for a direct buffer. Do a copy here.
comment|// ((SeekableInputStream)stream).readFully(bb);
name|FileUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|length
argument_list|,
name|bb
argument_list|)
expr_stmt|;
name|bb
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|LlapBufferOrBuffers
name|putInternal
parameter_list|(
name|T
name|key
parameter_list|,
name|ByteBuffer
name|tailBuffer
parameter_list|)
block|{
name|LlapBufferOrBuffers
name|result
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Overwhelmingly executes once, or maybe twice (replacing stale value).
name|LlapBufferOrBuffers
name|oldVal
init|=
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldVal
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|wrapBb
argument_list|(
name|result
argument_list|,
name|key
argument_list|,
name|tailBuffer
argument_list|)
expr_stmt|;
name|oldVal
operator|=
name|metadata
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldVal
operator|==
literal|null
condition|)
block|{
name|cacheInPolicy
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Cached successfully, add to policy.
return|return
name|result
return|;
block|}
block|}
if|if
condition|(
name|lockOldVal
argument_list|(
name|key
argument_list|,
name|result
argument_list|,
name|oldVal
argument_list|)
condition|)
block|{
return|return
name|oldVal
return|;
block|}
comment|// We found some old value but couldn't incRef it; remove it.
name|metadata
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|oldVal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|cacheInPolicy
parameter_list|(
name|LlapBufferOrBuffers
name|buffers
parameter_list|)
block|{
name|LlapAllocatorBuffer
name|singleBuffer
init|=
name|buffers
operator|.
name|getSingleLlapBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|singleBuffer
operator|!=
literal|null
condition|)
block|{
name|policy
operator|.
name|cache
argument_list|(
name|singleBuffer
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|LlapAllocatorBuffer
name|buffer
range|:
name|buffers
operator|.
name|getMultipleLlapBuffers
argument_list|()
control|)
block|{
name|policy
operator|.
name|cache
argument_list|(
name|buffer
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|LlapBufferOrBuffers
parameter_list|>
name|boolean
name|lockOldVal
parameter_list|(
name|Object
name|key
parameter_list|,
name|T
name|newVal
parameter_list|,
name|T
name|oldVal
parameter_list|)
block|{
if|if
condition|(
name|LlapIoImpl
operator|.
name|CACHE_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|CACHE_LOGGER
operator|.
name|trace
argument_list|(
literal|"Trying to cache when metadata is already cached for"
operator|+
literal|" {}; old {}, new {}"
argument_list|,
name|key
argument_list|,
name|oldVal
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|trace
argument_list|(
literal|"Locking {} due to cache collision"
argument_list|,
name|oldVal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockBuffer
argument_list|(
name|oldVal
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// We found an old, valid block for this key in the cache.
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|trace
argument_list|(
literal|"Unlocking {} due to cache collision with {}"
argument_list|,
name|newVal
argument_list|,
name|oldVal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newVal
operator|!=
literal|null
condition|)
block|{
name|unlockBuffer
argument_list|(
name|newVal
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decRefBuffer
parameter_list|(
name|MemoryBufferOrBuffers
name|buffer
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|buffer
operator|instanceof
name|LlapBufferOrBuffers
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|buffer
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
name|unlockBuffer
argument_list|(
operator|(
name|LlapBufferOrBuffers
operator|)
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|LlapBufferOrBuffers
name|wrapBb
parameter_list|(
name|LlapBufferOrBuffers
name|result
parameter_list|,
name|T
name|key
parameter_list|,
name|ByteBuffer
name|tailBuffer
parameter_list|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
return|return
name|result
return|;
if|if
condition|(
name|tailBuffer
operator|.
name|remaining
argument_list|()
operator|<=
name|allocator
operator|.
name|getMaxAllocation
argument_list|()
condition|)
block|{
comment|// The common case by far.
return|return
name|wrapSmallBb
argument_list|(
operator|new
name|LlapMetadataBuffer
argument_list|<
name|T
argument_list|>
argument_list|(
name|key
argument_list|)
argument_list|,
name|tailBuffer
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|allocCount
init|=
name|determineAllocCount
argument_list|(
name|tailBuffer
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|LlapMetadataBuffer
argument_list|<
name|T
argument_list|>
index|[]
name|results
init|=
operator|new
name|LlapMetadataBuffer
index|[
name|allocCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allocCount
condition|;
operator|++
name|i
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
operator|new
name|LlapMetadataBuffer
argument_list|<
name|T
argument_list|>
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|wrapLargeBb
argument_list|(
name|results
argument_list|,
name|tailBuffer
argument_list|)
expr_stmt|;
return|return
operator|new
name|LlapMetadataBuffers
argument_list|<
name|T
argument_list|>
argument_list|(
name|results
argument_list|)
return|;
block|}
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|LlapAllocatorBuffer
parameter_list|>
name|T
name|wrapSmallBb
parameter_list|(
name|T
name|result
parameter_list|,
name|ByteBuffer
name|tailBuffer
parameter_list|)
block|{
comment|// Note: we pass in null factory because we allocate objects here. We could also pass a
comment|//       per-call factory that would set fileKey; or set it after put.
name|allocator
operator|.
name|allocateMultiple
argument_list|(
operator|new
name|MemoryBuffer
index|[]
block|{
name|result
block|}
argument_list|,
name|tailBuffer
operator|.
name|remaining
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|putBufferToDest
argument_list|(
name|tailBuffer
operator|.
name|duplicate
argument_list|()
argument_list|,
name|result
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|LlapAllocatorBuffer
parameter_list|>
name|void
name|wrapLargeBb
parameter_list|(
name|T
index|[]
name|results
parameter_list|,
name|ByteBuffer
name|tailBuffer
parameter_list|)
block|{
comment|// Note: we pass in null factory because we allocate objects here. We could also pass a
comment|//       per-call factory that would set fileKey; or set it after put.
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|results
argument_list|,
name|allocator
operator|.
name|getMaxAllocation
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ByteBuffer
name|src
init|=
name|tailBuffer
operator|.
name|duplicate
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|src
operator|.
name|position
argument_list|()
decl_stmt|,
name|remaining
init|=
name|src
operator|.
name|remaining
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|T
name|result
init|=
name|results
index|[
name|i
index|]
decl_stmt|;
name|int
name|toPut
init|=
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|result
operator|.
name|getByteBufferRaw
argument_list|()
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|toPut
operator|>
literal|0
assert|;
name|src
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|src
operator|.
name|limit
argument_list|(
name|pos
operator|+
name|toPut
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|toPut
expr_stmt|;
name|remaining
operator|-=
name|toPut
expr_stmt|;
name|putBufferToDest
argument_list|(
name|src
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|LlapAllocatorBuffer
parameter_list|>
name|T
name|putBufferToDest
parameter_list|(
name|ByteBuffer
name|src
parameter_list|,
name|T
name|result
parameter_list|)
block|{
name|ByteBuffer
name|dest
init|=
name|result
operator|.
name|getByteBufferRaw
argument_list|()
decl_stmt|;
name|int
name|startPos
init|=
name|dest
operator|.
name|position
argument_list|()
decl_stmt|;
name|dest
operator|.
name|put
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|int
name|newPos
init|=
name|dest
operator|.
name|position
argument_list|()
decl_stmt|;
name|dest
operator|.
name|position
argument_list|(
name|startPos
argument_list|)
expr_stmt|;
name|dest
operator|.
name|limit
argument_list|(
name|newPos
argument_list|)
expr_stmt|;
name|boolean
name|canLock
init|=
name|lockOneBuffer
argument_list|(
name|result
argument_list|,
literal|false
argument_list|)
decl_stmt|;
assert|assert
name|canLock
assert|;
return|return
name|result
return|;
block|}
specifier|public
name|int
name|determineAllocCount
parameter_list|(
name|ByteBuffer
name|tailBuffer
parameter_list|)
block|{
name|int
name|total
init|=
name|tailBuffer
operator|.
name|remaining
argument_list|()
decl_stmt|,
name|maxAlloc
init|=
name|allocator
operator|.
name|getMaxAllocation
argument_list|()
decl_stmt|;
return|return
name|total
operator|/
name|maxAlloc
operator|+
operator|(
operator|(
name|total
operator|%
name|maxAlloc
operator|)
operator|>
literal|0
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
specifier|private
name|boolean
name|lockBuffer
parameter_list|(
name|LlapBufferOrBuffers
name|buffers
parameter_list|,
name|boolean
name|doNotifyPolicy
parameter_list|)
block|{
name|LlapAllocatorBuffer
name|buffer
init|=
name|buffers
operator|.
name|getSingleLlapBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
name|lockOneBuffer
argument_list|(
name|buffer
argument_list|,
name|doNotifyPolicy
argument_list|)
return|;
block|}
name|LlapAllocatorBuffer
index|[]
name|bufferArray
init|=
name|buffers
operator|.
name|getMultipleLlapBuffers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufferArray
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|lockOneBuffer
argument_list|(
name|bufferArray
index|[
name|i
index|]
argument_list|,
name|doNotifyPolicy
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
operator|++
name|j
control|)
block|{
name|unlockSingleBuffer
argument_list|(
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|discardMultiBuffer
argument_list|(
name|buffers
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|discardMultiBuffer
parameter_list|(
name|LlapBufferOrBuffers
name|removed
parameter_list|)
block|{
name|long
name|memoryFreed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LlapAllocatorBuffer
name|buf
range|:
name|removed
operator|.
name|getMultipleLlapBuffers
argument_list|()
control|)
block|{
name|long
name|memUsage
init|=
name|buf
operator|.
name|getMemoryUsage
argument_list|()
decl_stmt|;
comment|// We cannot just deallocate the buffer, as it can hypothetically have users.
name|int
name|result
init|=
name|buf
operator|.
name|invalidate
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|LlapAllocatorBuffer
operator|.
name|INVALIDATE_ALREADY_INVALID
case|:
continue|continue;
comment|// Nothing to do.
case|case
name|LlapAllocatorBuffer
operator|.
name|INVALIDATE_FAILED
case|:
block|{
comment|// Someone is using this buffer; eventually, it will be evicted.
continue|continue;
block|}
case|case
name|LlapAllocatorBuffer
operator|.
name|INVALIDATE_OK
case|:
block|{
name|memoryFreed
operator|+=
name|memUsage
expr_stmt|;
name|allocator
operator|.
name|deallocateEvicted
argument_list|(
name|buf
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|result
argument_list|)
throw|;
block|}
block|}
name|memoryManager
operator|.
name|releaseMemory
argument_list|(
name|memoryFreed
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|lockOneBuffer
parameter_list|(
name|LlapAllocatorBuffer
name|buffer
parameter_list|,
name|boolean
name|doNotifyPolicy
parameter_list|)
block|{
name|int
name|rc
init|=
name|buffer
operator|.
name|incRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|>
literal|0
condition|)
block|{
name|metrics
operator|.
name|incrCacheNumLockedBuffers
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doNotifyPolicy
operator|&&
name|rc
operator|==
literal|1
condition|)
block|{
comment|// We have just locked a buffer that wasn't previously locked.
name|policy
operator|.
name|notifyLock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
operator|>
literal|0
return|;
block|}
specifier|private
name|void
name|unlockBuffer
parameter_list|(
name|LlapBufferOrBuffers
name|buffers
parameter_list|,
name|boolean
name|isCached
parameter_list|)
block|{
name|LlapAllocatorBuffer
name|singleBuffer
init|=
name|buffers
operator|.
name|getSingleLlapBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|singleBuffer
operator|!=
literal|null
condition|)
block|{
name|unlockSingleBuffer
argument_list|(
name|singleBuffer
argument_list|,
name|isCached
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|LlapAllocatorBuffer
name|buffer
range|:
name|buffers
operator|.
name|getMultipleLlapBuffers
argument_list|()
control|)
block|{
name|unlockSingleBuffer
argument_list|(
name|buffer
argument_list|,
name|isCached
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|unlockSingleBuffer
parameter_list|(
name|LlapAllocatorBuffer
name|buffer
parameter_list|,
name|boolean
name|isCached
parameter_list|)
block|{
name|boolean
name|isLastDecref
init|=
operator|(
name|buffer
operator|.
name|decRef
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|isLastDecref
condition|)
block|{
if|if
condition|(
name|isCached
condition|)
block|{
name|policy
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allocator
operator|.
name|deallocate
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
name|metrics
operator|.
name|decrCacheNumLockedBuffers
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|StripeKey
block|{
specifier|private
specifier|final
name|Object
name|fileKey
decl_stmt|;
specifier|private
specifier|final
name|int
name|stripeIx
decl_stmt|;
specifier|public
name|StripeKey
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|int
name|stripeIx
parameter_list|)
block|{
name|this
operator|.
name|fileKey
operator|=
name|fileKey
expr_stmt|;
name|this
operator|.
name|stripeIx
operator|=
name|stripeIx
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
return|return
operator|(
name|prime
operator|+
operator|(
operator|(
name|fileKey
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|fileKey
operator|.
name|hashCode
argument_list|()
operator|)
operator|)
operator|*
name|prime
operator|+
name|stripeIx
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|StripeKey
operator|)
condition|)
return|return
literal|false
return|;
name|StripeKey
name|other
init|=
operator|(
name|StripeKey
operator|)
name|obj
decl_stmt|;
return|return
operator|(
operator|(
name|fileKey
operator|==
literal|null
operator|)
operator|==
operator|(
name|other
operator|.
name|fileKey
operator|==
literal|null
operator|)
operator|)
operator|&&
operator|(
name|fileKey
operator|==
literal|null
operator|||
name|fileKey
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fileKey
argument_list|)
operator|)
operator|&&
operator|(
name|stripeIx
operator|==
name|other
operator|.
name|stripeIx
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|LlapBufferOrBuffers
extends|extends
name|MemoryBufferOrBuffers
block|{
name|LlapAllocatorBuffer
name|getSingleLlapBuffer
parameter_list|()
function_decl|;
name|LlapAllocatorBuffer
index|[]
name|getMultipleLlapBuffers
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|final
specifier|static
class|class
name|LlapMetadataBuffer
parameter_list|<
name|T
parameter_list|>
extends|extends
name|LlapAllocatorBuffer
implements|implements
name|LlapBufferOrBuffers
block|{
specifier|private
specifier|final
name|T
name|key
decl_stmt|;
specifier|public
name|LlapMetadataBuffer
parameter_list|(
name|T
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|EvictionDispatcher
name|evictionDispatcher
parameter_list|)
block|{
name|evictionDispatcher
operator|.
name|notifyEvicted
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|T
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapAllocatorBuffer
name|getSingleBuffer
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapAllocatorBuffer
index|[]
name|getMultipleBuffers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapAllocatorBuffer
name|getSingleLlapBuffer
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapAllocatorBuffer
index|[]
name|getMultipleLlapBuffers
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|final
specifier|static
class|class
name|LlapMetadataBuffers
parameter_list|<
name|T
parameter_list|>
implements|implements
name|LlapBufferOrBuffers
block|{
specifier|private
specifier|final
name|LlapMetadataBuffer
argument_list|<
name|T
argument_list|>
index|[]
name|buffers
decl_stmt|;
specifier|public
name|LlapMetadataBuffers
parameter_list|(
name|LlapMetadataBuffer
argument_list|<
name|T
argument_list|>
index|[]
name|buffers
parameter_list|)
block|{
name|this
operator|.
name|buffers
operator|=
name|buffers
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|LlapAllocatorBuffer
name|getSingleBuffer
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapAllocatorBuffer
index|[]
name|getMultipleBuffers
parameter_list|()
block|{
return|return
name|buffers
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapAllocatorBuffer
name|getSingleLlapBuffer
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapAllocatorBuffer
index|[]
name|getMultipleLlapBuffers
parameter_list|()
block|{
return|return
name|buffers
return|;
block|}
block|}
block|}
end_class

end_unit

