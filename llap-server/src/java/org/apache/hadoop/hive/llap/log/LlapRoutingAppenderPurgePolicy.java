begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|log
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Marker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|routing
operator|.
name|PurgePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|routing
operator|.
name|RoutingAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|PluginAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|PluginFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|status
operator|.
name|StatusLogger
import|;
end_import

begin_comment
comment|/**  * A purge policy for the {@link RoutingAppender} which awaits a notification from the application  * about a key no longer being required, before it purges it.  */
end_comment

begin_class
annotation|@
name|Plugin
argument_list|(
name|name
operator|=
literal|"LlapRoutingAppenderPurgePolicy"
argument_list|,
name|category
operator|=
literal|"Core"
argument_list|,
name|printObject
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|LlapRoutingAppenderPurgePolicy
implements|implements
name|PurgePolicy
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|StatusLogger
operator|.
name|getLogger
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|LlapRoutingAppenderPurgePolicy
argument_list|>
name|INSTANCES
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|knownAppenders
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|// The Routing appender, which manages underlying appenders
specifier|private
name|RoutingAppender
name|routingAppender
decl_stmt|;
specifier|public
name|LlapRoutingAppenderPurgePolicy
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Created "
operator|+
name|LlapRoutingAppenderPurgePolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" with name="
operator|+
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|private
name|LlapRoutingAppenderPurgePolicy
parameter_list|()
block|{
name|this
argument_list|(
literal|"_NOOP_"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|RoutingAppender
name|routingAppender
parameter_list|)
block|{
name|this
operator|.
name|routingAppender
operator|=
name|routingAppender
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|purge
parameter_list|()
block|{
comment|// Nothing to do here. This is not invoked by the log4j framework. Should likely not be in
comment|// the log4j interface
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|String
name|key
parameter_list|,
name|LogEvent
name|event
parameter_list|)
block|{
name|Marker
name|marker
init|=
name|event
operator|.
name|getMarker
argument_list|()
decl_stmt|;
if|if
condition|(
name|marker
operator|!=
literal|null
operator|&&
name|marker
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|marker
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Log4jQueryCompleteMarker
operator|.
name|EOF_MARKER
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Received "
operator|+
name|Log4jQueryCompleteMarker
operator|.
name|EOF_MARKER
operator|+
literal|" for key. Attempting cleanup."
argument_list|)
expr_stmt|;
name|keyComplete
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|knownAppenders
operator|.
name|add
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Registered key: ["
operator|+
name|key
operator|+
literal|"] on purgePolicyWithName="
operator|+
name|name
operator|+
literal|", thisAddress="
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Indicate that the specified key is no longer used.    * @param key    */
specifier|private
name|void
name|keyComplete
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|key
argument_list|,
literal|"Key must be specified"
argument_list|)
expr_stmt|;
name|boolean
name|removed
init|=
name|knownAppenders
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
condition|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Deleting Appender for key: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|routingAppender
operator|.
name|deleteAppender
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Ignoring call to remove unknown key: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|PluginFactory
specifier|public
specifier|static
name|PurgePolicy
name|createPurgePolicy
parameter_list|(
annotation|@
name|PluginAttribute
argument_list|(
literal|"name"
argument_list|)
specifier|final
name|String
name|name
parameter_list|)
block|{
comment|// Name required for routing. Error out if it is not set.
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|name
argument_list|,
literal|"Name must be specified for "
operator|+
name|LlapRoutingAppenderPurgePolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LlapRoutingAppenderPurgePolicy
name|llapRoutingAppenderPurgePolicy
init|=
operator|new
name|LlapRoutingAppenderPurgePolicy
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LlapRoutingAppenderPurgePolicy
name|old
init|=
name|INSTANCES
operator|.
name|putIfAbsent
argument_list|(
name|name
argument_list|,
name|llapRoutingAppenderPurgePolicy
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Attempt to create multiple instances of "
operator|+
name|LlapRoutingAppenderPurgePolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" with the name "
operator|+
name|name
operator|+
literal|". Using original instance"
argument_list|)
expr_stmt|;
name|llapRoutingAppenderPurgePolicy
operator|=
name|old
expr_stmt|;
block|}
return|return
name|llapRoutingAppenderPurgePolicy
return|;
block|}
block|}
end_class

end_unit

