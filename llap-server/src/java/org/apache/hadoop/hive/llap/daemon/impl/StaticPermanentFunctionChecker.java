begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
operator|.
name|UdfWhitelistChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jdi
operator|.
name|InvocationException
import|;
end_import

begin_class
specifier|public
class|class
name|StaticPermanentFunctionChecker
implements|implements
name|UdfWhitelistChecker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StaticPermanentFunctionChecker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PERMANENT_FUNCTIONS_LIST
init|=
literal|"llap-udfs.lst"
decl_stmt|;
specifier|private
specifier|final
name|IdentityHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Boolean
argument_list|>
name|allowedUdfClasses
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|StaticPermanentFunctionChecker
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|URL
name|logger
init|=
name|conf
operator|.
name|getResource
argument_list|(
name|PERMANENT_FUNCTIONS_LIST
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find UDF whitelist in configuration: "
operator|+
name|PERMANENT_FUNCTIONS_LIST
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|logger
operator|.
name|openStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|klassName
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|klassName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|klassName
operator|.
name|trim
argument_list|()
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|allowedUdfClasses
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// make a list before opening the RPC attack surface
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ie
parameter_list|)
block|{
comment|// note: explicit format to use Throwable instead of var-args
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not load class "
operator|+
name|klassName
operator|+
literal|" declared in UDF whitelist"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
block|}
name|klassName
operator|=
name|r
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not read UDF whitelist: "
operator|+
name|PERMANENT_FUNCTIONS_LIST
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isUdfAllowed
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|FunctionRegistry
operator|.
name|isBuiltInFuncClass
argument_list|(
name|clazz
argument_list|)
operator|||
name|allowedUdfClasses
operator|.
name|containsKey
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
end_class

end_unit

