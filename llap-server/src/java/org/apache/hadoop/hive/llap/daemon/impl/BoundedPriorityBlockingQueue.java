begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_comment
comment|/**  * Priority blocking queue of bounded size. The entries that are added already added will be  * ordered based on the specified comparator. If the queue is full, offer() will return false and  * add() will throw IllegalStateException.  */
end_comment

begin_class
specifier|public
class|class
name|BoundedPriorityBlockingQueue
parameter_list|<
name|E
parameter_list|>
extends|extends
name|PriorityBlockingQueue
argument_list|<
name|E
argument_list|>
block|{
specifier|private
name|int
name|maxSize
decl_stmt|;
specifier|public
name|BoundedPriorityBlockingQueue
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
specifier|public
name|BoundedPriorityBlockingQueue
parameter_list|(
name|Comparator
argument_list|<
name|E
argument_list|>
name|comparator
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|super
argument_list|(
name|maxSize
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|E
name|e
parameter_list|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>=
name|maxSize
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"BoundedPriorityBlockingQueue is full"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|add
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|offer
parameter_list|(
name|E
name|e
parameter_list|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>=
name|maxSize
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|offer
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

