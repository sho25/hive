begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|EvictionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LlapCacheableBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|CompressionKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|FileMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|Footer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|StripeInformation
import|;
end_import

begin_comment
comment|/** ORC file metadata. Currently contains some duplicate info due to how different parts  * of ORC use different info. Ideally we would get rid of protobuf structs in code beyond reading,  * or instead use protobuf structs everywhere instead of the mix of things like now.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|OrcFileMetadata
extends|extends
name|LlapCacheableBuffer
implements|implements
name|FileMetadata
block|{
specifier|private
specifier|final
name|long
name|fileId
decl_stmt|;
specifier|private
specifier|final
name|CompressionKind
name|compressionKind
decl_stmt|;
specifier|private
specifier|final
name|int
name|compressionBufferSize
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isOriginalFormat
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|versionList
decl_stmt|;
specifier|private
specifier|final
name|int
name|metadataSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|writerVersionNum
decl_stmt|;
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|private
specifier|final
name|Footer
name|footer
decl_stmt|;
specifier|public
name|OrcFileMetadata
parameter_list|(
name|long
name|fileId
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|fileId
operator|=
name|fileId
expr_stmt|;
name|this
operator|.
name|footer
operator|=
name|reader
operator|.
name|getFooterProto
argument_list|()
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|reader
operator|.
name|getMetadataProto
argument_list|()
expr_stmt|;
name|this
operator|.
name|compressionKind
operator|=
name|reader
operator|.
name|getCompression
argument_list|()
expr_stmt|;
name|this
operator|.
name|compressionBufferSize
operator|=
name|reader
operator|.
name|getCompressionSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|stripes
operator|=
name|reader
operator|.
name|getStripes
argument_list|()
expr_stmt|;
comment|// duplicates the footer
name|this
operator|.
name|isOriginalFormat
operator|=
name|OrcInputFormat
operator|.
name|isOriginal
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// duplicates the footer
name|this
operator|.
name|writerVersionNum
operator|=
name|reader
operator|.
name|getWriterVersion
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|this
operator|.
name|versionList
operator|=
name|reader
operator|.
name|getVersionList
argument_list|()
expr_stmt|;
name|this
operator|.
name|metadataSize
operator|=
name|reader
operator|.
name|getMetadataSize
argument_list|()
expr_stmt|;
block|}
comment|// LlapCacheableBuffer
annotation|@
name|Override
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|EvictionDispatcher
name|evictionDispatcher
parameter_list|)
block|{
name|evictionDispatcher
operator|.
name|notifyEvicted
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|invalidate
parameter_list|()
block|{
return|return
literal|true
return|;
comment|// relies on GC, so it can always be evicted now.
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMemoryUsage
parameter_list|()
block|{
comment|// TODO#: add real estimate; we could do it almost entirely compile time (+list length),
comment|//        if it were not for protobufs. Get rid of protobufs here, or estimate them once?
return|return
literal|1024
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|// FileMetadata
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|getTypes
parameter_list|()
block|{
return|return
name|footer
operator|.
name|getTypesList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOriginalFormat
parameter_list|()
block|{
return|return
name|isOriginalFormat
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|getStripes
parameter_list|()
block|{
return|return
name|stripes
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompressionKind
name|getCompressionKind
parameter_list|()
block|{
return|return
name|compressionKind
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCompressionBufferSize
parameter_list|()
block|{
return|return
name|compressionBufferSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRowIndexStride
parameter_list|()
block|{
return|return
name|footer
operator|.
name|getRowIndexStride
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColumnCount
parameter_list|()
block|{
return|return
name|footer
operator|.
name|getTypesCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFlattenedColumnCount
parameter_list|()
block|{
return|return
name|footer
operator|.
name|getTypes
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubtypesCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getFileId
parameter_list|()
block|{
return|return
name|fileId
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getVersionList
parameter_list|()
block|{
return|return
name|versionList
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMetadataSize
parameter_list|()
block|{
return|return
name|metadataSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getWriterVersionNum
parameter_list|()
block|{
return|return
name|writerVersionNum
return|;
block|}
annotation|@
name|Override
specifier|public
name|Metadata
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
annotation|@
name|Override
specifier|public
name|Footer
name|getFooter
parameter_list|()
block|{
return|return
name|footer
return|;
block|}
block|}
end_class

end_unit

