begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|services
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|RuntimeMXBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|ServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapZookeeperRegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveVersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LlapWebServices
extends|extends
name|AbstractService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapWebServices
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// this is what allows the UI to do cross-domain reads of the contents
comment|// only apply to idempotent GET ops (all others need crumbs)
specifier|static
specifier|final
name|String
name|ACCESS_CONTROL_ALLOW_METHODS
init|=
literal|"Access-Control-Allow-Methods"
decl_stmt|;
specifier|static
specifier|final
name|String
name|ACCESS_CONTROL_ALLOW_ORIGIN
init|=
literal|"Access-Control-Allow-Origin"
decl_stmt|;
specifier|static
specifier|final
name|String
name|REGISTRY_ATTRIBUTE
init|=
literal|"llap.registry"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PARENT_ATTRIBUTE
init|=
literal|"llap.parent"
decl_stmt|;
specifier|private
name|int
name|port
decl_stmt|;
specifier|private
name|HttpServer
name|http
decl_stmt|;
specifier|private
name|boolean
name|useSSL
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|useSPNEGO
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|CompositeService
name|parent
decl_stmt|;
specifier|private
specifier|final
name|LlapRegistryService
name|registry
decl_stmt|;
specifier|public
name|LlapWebServices
parameter_list|(
name|int
name|port
parameter_list|,
name|CompositeService
name|parent
parameter_list|,
name|LlapRegistryService
name|registry
parameter_list|)
block|{
name|super
argument_list|(
literal|"LlapWebServices"
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|useSSL
operator|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_WEB_SSL
argument_list|)
expr_stmt|;
name|this
operator|.
name|useSPNEGO
operator|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_WEB_AUTO_AUTH
argument_list|)
expr_stmt|;
name|String
name|bindAddress
init|=
literal|"0.0.0.0"
decl_stmt|;
name|HttpServer
operator|.
name|Builder
name|builder
init|=
operator|new
name|HttpServer
operator|.
name|Builder
argument_list|(
literal|"llap"
argument_list|)
operator|.
name|setPort
argument_list|(
name|this
operator|.
name|port
argument_list|)
operator|.
name|setHost
argument_list|(
name|bindAddress
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setConf
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LLAP UI useSSL="
operator|+
name|this
operator|.
name|useSSL
operator|+
literal|", auto-auth/SPNEGO="
operator|+
name|this
operator|.
name|useSPNEGO
operator|+
literal|", port="
operator|+
name|this
operator|.
name|port
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUseSSL
argument_list|(
name|this
operator|.
name|useSSL
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|useSPNEGO
condition|)
block|{
name|builder
operator|.
name|setUseSPNEGO
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// this setups auth filtering in build()
name|builder
operator|.
name|setSPNEGOPrincipal
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_WEBUI_SPNEGO_PRINCIPAL
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_KERBEROS_PRINCIPAL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSPNEGOKeytab
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_WEBUI_SPNEGO_KEYTAB_FILE
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_KERBEROS_KEYTAB_FILE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|setContextAttribute
argument_list|(
name|REGISTRY_ATTRIBUTE
argument_list|,
name|registry
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setContextAttribute
argument_list|(
name|PARENT_ATTRIBUTE
argument_list|,
name|parent
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|http
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|http
operator|.
name|addServlet
argument_list|(
literal|"status"
argument_list|,
literal|"/status"
argument_list|,
name|LlapStatusServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|http
operator|.
name|addServlet
argument_list|(
literal|"peers"
argument_list|,
literal|"/peers"
argument_list|,
name|LlapPeerRegistryServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|http
operator|.
name|addServlet
argument_list|(
literal|"iomem"
argument_list|,
literal|"/iomem"
argument_list|,
name|LlapIoMemoryServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|http
operator|.
name|addServlet
argument_list|(
literal|"system"
argument_list|,
literal|"/system"
argument_list|,
name|SystemConfigurationServlet
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"LLAP web service failed to come up"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|this
operator|.
name|http
operator|.
name|getPort
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|http
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|http
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|http
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|http
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LlapStatusServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**      * Possible values: UNKNOWN, NOTINITED, INITED, STARTED, STOPPED      */
specifier|private
specifier|static
specifier|final
name|String
name|STATUS_ATTRIBUTE
init|=
literal|"status"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UPTIME_ATTRIBUTE
init|=
literal|"uptime"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BUILD_ATTRIBUTE
init|=
literal|"build"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UNKNOWN_STATE
init|=
literal|"UNKNOWN"
decl_stmt|;
specifier|protected
specifier|transient
name|JsonFactory
name|jsonFactory
decl_stmt|;
specifier|protected
name|RuntimeMXBean
name|runtimeBean
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|jsonFactory
operator|=
operator|new
name|JsonFactory
argument_list|()
expr_stmt|;
name|runtimeBean
operator|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|JsonGenerator
name|jg
init|=
literal|null
decl_stmt|;
name|PrintWriter
name|writer
init|=
literal|null
decl_stmt|;
specifier|final
name|ServletContext
name|context
init|=
name|getServletContext
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|parent
init|=
name|context
operator|.
name|getAttribute
argument_list|(
name|PARENT_ATTRIBUTE
argument_list|)
decl_stmt|;
specifier|final
name|long
name|uptime
init|=
name|runtimeBean
operator|.
name|getUptime
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
name|writer
operator|=
name|response
operator|.
name|getWriter
argument_list|()
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/json; charset=utf8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_METHODS
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_ORIGIN
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|jg
operator|=
name|jsonFactory
operator|.
name|createJsonGenerator
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|jg
operator|.
name|disable
argument_list|(
name|JsonGenerator
operator|.
name|Feature
operator|.
name|AUTO_CLOSE_TARGET
argument_list|)
expr_stmt|;
name|jg
operator|.
name|useDefaultPrettyPrinter
argument_list|()
expr_stmt|;
name|jg
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|instanceof
name|CompositeService
condition|)
block|{
name|jg
operator|.
name|writeStringField
argument_list|(
name|STATUS_ATTRIBUTE
argument_list|,
operator|(
operator|(
name|CompositeService
operator|)
name|parent
operator|)
operator|.
name|getServiceState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jg
operator|.
name|writeStringField
argument_list|(
name|STATUS_ATTRIBUTE
argument_list|,
name|UNKNOWN_STATE
argument_list|)
expr_stmt|;
block|}
name|jg
operator|.
name|writeNumberField
argument_list|(
name|UPTIME_ATTRIBUTE
argument_list|,
name|uptime
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeStringField
argument_list|(
name|BUILD_ATTRIBUTE
argument_list|,
name|HiveVersionInfo
operator|.
name|getBuildVersion
argument_list|()
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jg
operator|!=
literal|null
condition|)
block|{
name|jg
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught an exception while processing /status request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|LlapPeerRegistryServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|transient
name|JsonFactory
name|jsonFactory
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|jsonFactory
operator|=
operator|new
name|JsonFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|JsonGenerator
name|jg
init|=
literal|null
decl_stmt|;
name|PrintWriter
name|writer
init|=
literal|null
decl_stmt|;
specifier|final
name|ServletContext
name|context
init|=
name|getServletContext
argument_list|()
decl_stmt|;
specifier|final
name|LlapRegistryService
name|registry
init|=
operator|(
name|LlapRegistryService
operator|)
name|context
operator|.
name|getAttribute
argument_list|(
name|REGISTRY_ATTRIBUTE
argument_list|)
decl_stmt|;
try|try
block|{
comment|// admin check
if|if
condition|(
operator|!
name|HttpServer
operator|.
name|isInstrumentationAccessAllowed
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|writer
operator|=
name|response
operator|.
name|getWriter
argument_list|()
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/json; charset=utf8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_METHODS
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_ORIGIN
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|jg
operator|=
name|jsonFactory
operator|.
name|createJsonGenerator
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|jg
operator|.
name|disable
argument_list|(
name|JsonGenerator
operator|.
name|Feature
operator|.
name|AUTO_CLOSE_TARGET
argument_list|)
expr_stmt|;
name|jg
operator|.
name|useDefaultPrettyPrinter
argument_list|()
expr_stmt|;
name|jg
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|registry
operator|.
name|isDynamic
argument_list|()
condition|)
block|{
name|jg
operator|.
name|writeBooleanField
argument_list|(
literal|"dynamic"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|jg
operator|.
name|writeStringField
argument_list|(
literal|"identity"
argument_list|,
name|registry
operator|.
name|getWorkerIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeArrayFieldStart
argument_list|(
literal|"peers"
argument_list|)
expr_stmt|;
for|for
control|(
name|ServiceInstance
name|s
range|:
name|registry
operator|.
name|getInstances
argument_list|()
operator|.
name|getAllInstancesOrdered
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|jg
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|jg
operator|.
name|writeStringField
argument_list|(
literal|"identity"
argument_list|,
name|s
operator|.
name|getWorkerIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeStringField
argument_list|(
literal|"host"
argument_list|,
name|s
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeNumberField
argument_list|(
literal|"management-port"
argument_list|,
name|s
operator|.
name|getManagementPort
argument_list|()
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeNumberField
argument_list|(
literal|"rpc-port"
argument_list|,
name|s
operator|.
name|getRpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeNumberField
argument_list|(
literal|"shuffle-port"
argument_list|,
name|s
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|r
init|=
name|s
operator|.
name|getResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|jg
operator|.
name|writeObjectFieldStart
argument_list|(
literal|"resource"
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeNumberField
argument_list|(
literal|"vcores"
argument_list|,
name|r
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeNumberField
argument_list|(
literal|"memory"
argument_list|,
name|r
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
name|jg
operator|.
name|writeStringField
argument_list|(
literal|"host"
argument_list|,
name|s
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
name|jg
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
name|jg
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jg
operator|!=
literal|null
condition|)
block|{
name|jg
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught an exception while processing /status request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

