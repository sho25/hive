begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|services
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapDaemonInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|NetUtil
import|;
end_import

begin_comment
comment|/**  * A servlet to print system specific configurations that are not exposed via JMX.  * Currently it exposes  * - kernel configs  * - network configs  * - memory configs  *  * /system?refresh=true will run sysctl command again  */
end_comment

begin_class
specifier|public
class|class
name|SystemConfigurationServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SystemConfigurationServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS_CONTROL_ALLOW_METHODS
init|=
literal|"Access-Control-Allow-Methods"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALLOWED_METHODS
init|=
literal|"GET"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS_CONTROL_ALLOW_ORIGIN
init|=
literal|"Access-Control-Allow-Origin"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_TYPE_JSON_UTF8
init|=
literal|"application/json; charset=utf8"
decl_stmt|;
specifier|protected
specifier|transient
name|JsonFactory
name|jsonFactory
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYSCTL_KV_SEPARATOR
init|=
name|Shell
operator|.
name|MAC
condition|?
literal|":"
else|:
literal|"="
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|String
argument_list|>
name|sysctlOutRef
decl_stmt|;
specifier|private
name|String
name|FAILED
init|=
literal|"failed"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|this
operator|.
name|jsonFactory
operator|=
operator|new
name|JsonFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|sysctlOutRef
operator|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|JsonGenerator
name|jg
init|=
literal|null
decl_stmt|;
name|PrintWriter
name|writer
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|HttpServer
operator|.
name|isInstrumentationAccessAllowed
argument_list|(
name|getServletContext
argument_list|()
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
return|return;
block|}
name|setResponseHeader
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|boolean
name|refresh
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"refresh"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|response
operator|.
name|getWriter
argument_list|()
expr_stmt|;
name|jg
operator|=
name|jsonFactory
operator|.
name|createJsonGenerator
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|jg
operator|.
name|disable
argument_list|(
name|JsonGenerator
operator|.
name|Feature
operator|.
name|AUTO_CLOSE_TARGET
argument_list|)
expr_stmt|;
name|jg
operator|.
name|useDefaultPrettyPrinter
argument_list|()
expr_stmt|;
name|jg
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|jg
operator|.
name|writeObjectField
argument_list|(
literal|"pid"
argument_list|,
name|LlapDaemonInfo
operator|.
name|INSTANCE
operator|.
name|getPID
argument_list|()
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeObjectField
argument_list|(
literal|"os.name"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
name|jg
operator|.
name|writeObjectField
argument_list|(
literal|"net.core.somaxconn"
argument_list|,
name|NetUtil
operator|.
name|SOMAXCONN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|sysctlCmd
init|=
literal|"sysctl -a"
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sysctlOutRef
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|||
name|refresh
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading kernel configs via sysctl.."
argument_list|)
expr_stmt|;
name|String
name|sysctlOutput
init|=
name|Shell
operator|.
name|execCommand
argument_list|(
name|sysctlCmd
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
argument_list|)
decl_stmt|;
name|sysctlOutRef
operator|.
name|set
argument_list|(
name|sysctlOutput
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to execute '{}' command"
argument_list|,
name|sysctlCmd
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sysctlOutRef
operator|.
name|set
argument_list|(
name|FAILED
argument_list|)
expr_stmt|;
comment|// failures will not be retried (to avoid fork + exec running sysctl command)
name|jg
operator|.
name|writeObjectField
argument_list|(
literal|"sysctl"
argument_list|,
name|FAILED
argument_list|)
expr_stmt|;
name|jg
operator|.
name|writeObjectField
argument_list|(
literal|"sysctl-failure-reason"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sysctlOutRef
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|sysctlOutRef
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|FAILED
argument_list|)
condition|)
block|{
name|String
index|[]
name|lines
init|=
name|sysctlOutRef
operator|.
name|get
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\r?\\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|int
name|sepIdx
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|SYSCTL_KV_SEPARATOR
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|sepIdx
operator|==
operator|-
literal|1
condition|?
name|line
operator|.
name|trim
argument_list|()
else|:
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sepIdx
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|sepIdx
operator|==
operator|-
literal|1
condition|?
literal|null
else|:
name|line
operator|.
name|substring
argument_list|(
name|sepIdx
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\t"
argument_list|,
literal|"  "
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jg
operator|.
name|writeObjectField
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|Shell
operator|.
name|MAC
condition|)
block|{
comment|// Red Hat: /sys/kernel/mm/redhat_transparent_hugepage/enabled
comment|//          /sys/kernel/mm/redhat_transparent_hugepage/defrag
comment|// CentOS/Ubuntu/Debian, OEL, SLES: /sys/kernel/mm/transparent_hugepage/enabled
comment|//                                  /sys/kernel/mm/transparent_hugepage/defrag
name|String
name|thpFileName
init|=
literal|"/sys/kernel/mm/transparent_hugepage/enabled"
decl_stmt|;
name|String
name|thpFileStr
init|=
name|PrivilegedFileReader
operator|.
name|read
argument_list|(
name|thpFileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|thpFileStr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to read contents of {}"
argument_list|,
name|thpFileName
argument_list|)
expr_stmt|;
name|thpFileName
operator|=
literal|"/sys/kernel/mm/redhat_transparent_hugepage/enabled"
expr_stmt|;
name|thpFileStr
operator|=
name|PrivilegedFileReader
operator|.
name|read
argument_list|(
name|thpFileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|thpFileStr
operator|!=
literal|null
condition|)
block|{
comment|// Format: "always madvise [never]"
name|int
name|strIdx
init|=
name|thpFileStr
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
name|int
name|endIdx
init|=
name|thpFileStr
operator|.
name|indexOf
argument_list|(
literal|']'
argument_list|)
decl_stmt|;
name|jg
operator|.
name|writeObjectField
argument_list|(
name|thpFileName
argument_list|,
name|thpFileStr
operator|.
name|substring
argument_list|(
name|strIdx
operator|+
literal|1
argument_list|,
name|endIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to read contents of {}"
argument_list|,
name|thpFileName
argument_list|)
expr_stmt|;
block|}
name|String
name|thpDefragFileName
init|=
literal|"/sys/kernel/mm/transparent_hugepage/defrag"
decl_stmt|;
name|String
name|thpDefragFileStr
init|=
name|PrivilegedFileReader
operator|.
name|read
argument_list|(
name|thpDefragFileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|thpDefragFileStr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to read contents of {}"
argument_list|,
name|thpDefragFileName
argument_list|)
expr_stmt|;
name|thpDefragFileName
operator|=
literal|"/sys/kernel/mm/redhat_transparent_hugepage/defrag"
expr_stmt|;
name|thpDefragFileStr
operator|=
name|PrivilegedFileReader
operator|.
name|read
argument_list|(
name|thpDefragFileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|thpDefragFileStr
operator|!=
literal|null
condition|)
block|{
comment|// Format: "always madvise [never]"
name|int
name|strIdx
init|=
name|thpDefragFileStr
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
name|int
name|endIdx
init|=
name|thpDefragFileStr
operator|.
name|indexOf
argument_list|(
literal|']'
argument_list|)
decl_stmt|;
name|jg
operator|.
name|writeObjectField
argument_list|(
name|thpDefragFileName
argument_list|,
name|thpDefragFileStr
operator|.
name|substring
argument_list|(
name|strIdx
operator|+
literal|1
argument_list|,
name|endIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to read contents of {}"
argument_list|,
name|thpDefragFileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|jg
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception while processing llap /system web service request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jg
operator|!=
literal|null
condition|)
block|{
name|jg
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setResponseHeader
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|CONTENT_TYPE_JSON_UTF8
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_METHODS
argument_list|,
name|ALLOWED_METHODS
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_ORIGIN
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|PrivilegedFileReader
block|{
specifier|public
specifier|static
name|String
name|read
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|String
name|result
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
block|{
name|String
name|fileString
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileString
operator|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|filename
argument_list|)
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to read file: {}"
argument_list|,
name|filename
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|fileString
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

