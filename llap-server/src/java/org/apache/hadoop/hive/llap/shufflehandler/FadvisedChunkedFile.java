begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|shufflehandler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ReadaheadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ReadaheadPool
operator|.
name|ReadaheadRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|nativeio
operator|.
name|NativeIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|stream
operator|.
name|ChunkedFile
import|;
end_import

begin_class
specifier|public
class|class
name|FadvisedChunkedFile
extends|extends
name|ChunkedFile
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FadvisedChunkedFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|manageOsCache
decl_stmt|;
specifier|private
specifier|final
name|int
name|readaheadLength
decl_stmt|;
specifier|private
specifier|final
name|ReadaheadPool
name|readaheadPool
decl_stmt|;
specifier|private
specifier|final
name|FileDescriptor
name|fd
decl_stmt|;
specifier|private
specifier|final
name|String
name|identifier
decl_stmt|;
specifier|private
name|ReadaheadRequest
name|readaheadRequest
decl_stmt|;
specifier|public
name|FadvisedChunkedFile
parameter_list|(
name|RandomAccessFile
name|file
parameter_list|,
name|long
name|position
parameter_list|,
name|long
name|count
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|boolean
name|manageOsCache
parameter_list|,
name|int
name|readaheadLength
parameter_list|,
name|ReadaheadPool
name|readaheadPool
parameter_list|,
name|String
name|identifier
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|file
argument_list|,
name|position
argument_list|,
name|count
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|manageOsCache
operator|=
name|manageOsCache
expr_stmt|;
name|this
operator|.
name|readaheadLength
operator|=
name|readaheadLength
expr_stmt|;
name|this
operator|.
name|readaheadPool
operator|=
name|readaheadPool
expr_stmt|;
name|this
operator|.
name|fd
operator|=
name|file
operator|.
name|getFD
argument_list|()
expr_stmt|;
name|this
operator|.
name|identifier
operator|=
name|identifier
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|nextChunk
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|manageOsCache
operator|&&
name|readaheadPool
operator|!=
literal|null
condition|)
block|{
name|readaheadRequest
operator|=
name|readaheadPool
operator|.
name|readaheadStream
argument_list|(
name|identifier
argument_list|,
name|fd
argument_list|,
name|getCurrentOffset
argument_list|()
argument_list|,
name|readaheadLength
argument_list|,
name|getEndOffset
argument_list|()
argument_list|,
name|readaheadRequest
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|nextChunk
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|readaheadRequest
operator|!=
literal|null
condition|)
block|{
name|readaheadRequest
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|manageOsCache
operator|&&
name|getEndOffset
argument_list|()
operator|-
name|getStartOffset
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|NativeIO
operator|.
name|POSIX
operator|.
name|getCacheManipulator
argument_list|()
operator|.
name|posixFadviseIfPossible
argument_list|(
name|identifier
argument_list|,
name|fd
argument_list|,
name|getStartOffset
argument_list|()
argument_list|,
name|getEndOffset
argument_list|()
operator|-
name|getStartOffset
argument_list|()
argument_list|,
name|NativeIO
operator|.
name|POSIX
operator|.
name|POSIX_FADV_DONTNEED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to manage OS cache for "
operator|+
name|identifier
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

