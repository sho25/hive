begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|FragmentSpecProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateProto
import|;
end_import

begin_class
specifier|public
class|class
name|QueryInfo
block|{
specifier|private
specifier|final
name|String
name|queryId
decl_stmt|;
specifier|private
specifier|final
name|String
name|appIdString
decl_stmt|;
specifier|private
specifier|final
name|String
name|dagName
decl_stmt|;
specifier|private
specifier|final
name|int
name|dagIdentifier
decl_stmt|;
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|localDirsBase
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|localFs
decl_stmt|;
specifier|private
name|String
index|[]
name|localDirs
decl_stmt|;
comment|// Map of states for different vertices.
specifier|private
specifier|final
name|Set
argument_list|<
name|QueryFragmentInfo
argument_list|>
name|knownFragments
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|QueryFragmentInfo
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|sourceStateMap
decl_stmt|;
specifier|public
name|QueryInfo
parameter_list|(
name|String
name|queryId
parameter_list|,
name|String
name|appIdString
parameter_list|,
name|String
name|dagName
parameter_list|,
name|int
name|dagIdentifier
parameter_list|,
name|String
name|user
parameter_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|sourceStateMap
parameter_list|,
name|String
index|[]
name|localDirsBase
parameter_list|,
name|FileSystem
name|localFs
parameter_list|)
block|{
name|this
operator|.
name|queryId
operator|=
name|queryId
expr_stmt|;
name|this
operator|.
name|appIdString
operator|=
name|appIdString
expr_stmt|;
name|this
operator|.
name|dagName
operator|=
name|dagName
expr_stmt|;
name|this
operator|.
name|dagIdentifier
operator|=
name|dagIdentifier
expr_stmt|;
name|this
operator|.
name|sourceStateMap
operator|=
name|sourceStateMap
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|localDirsBase
operator|=
name|localDirsBase
expr_stmt|;
name|this
operator|.
name|localFs
operator|=
name|localFs
expr_stmt|;
block|}
specifier|public
name|String
name|getQueryId
parameter_list|()
block|{
return|return
name|queryId
return|;
block|}
specifier|public
name|String
name|getAppIdString
parameter_list|()
block|{
return|return
name|appIdString
return|;
block|}
specifier|public
name|String
name|getDagName
parameter_list|()
block|{
return|return
name|dagName
return|;
block|}
specifier|public
name|int
name|getDagIdentifier
parameter_list|()
block|{
return|return
name|dagIdentifier
return|;
block|}
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
specifier|public
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|getSourceStateMap
parameter_list|()
block|{
return|return
name|sourceStateMap
return|;
block|}
specifier|public
name|QueryFragmentInfo
name|registerFragment
parameter_list|(
name|String
name|vertexName
parameter_list|,
name|int
name|fragmentNumber
parameter_list|,
name|int
name|attemptNumber
parameter_list|,
name|FragmentSpecProto
name|fragmentSpec
parameter_list|)
block|{
name|QueryFragmentInfo
name|fragmentInfo
init|=
operator|new
name|QueryFragmentInfo
argument_list|(
name|this
argument_list|,
name|vertexName
argument_list|,
name|fragmentNumber
argument_list|,
name|attemptNumber
argument_list|,
name|fragmentSpec
argument_list|)
decl_stmt|;
name|knownFragments
operator|.
name|add
argument_list|(
name|fragmentInfo
argument_list|)
expr_stmt|;
return|return
name|fragmentInfo
return|;
block|}
specifier|public
name|void
name|unregisterFragment
parameter_list|(
name|QueryFragmentInfo
name|fragmentInfo
parameter_list|)
block|{
name|knownFragments
operator|.
name|remove
argument_list|(
name|fragmentInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|createLocalDirs
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|localDirs
operator|==
literal|null
condition|)
block|{
name|localDirs
operator|=
operator|new
name|String
index|[
name|localDirsBase
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localDirsBase
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|localDirs
index|[
name|i
index|]
operator|=
name|createAppSpecificLocalDir
argument_list|(
name|localDirsBase
index|[
name|i
index|]
argument_list|,
name|appIdString
argument_list|,
name|user
argument_list|,
name|dagIdentifier
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|localDirs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get, and create if required, local-dirs for a query    * @return    * @throws IOException    */
specifier|public
specifier|synchronized
name|String
index|[]
name|getLocalDirs
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|localDirs
operator|==
literal|null
condition|)
block|{
name|createLocalDirs
argument_list|()
expr_stmt|;
block|}
return|return
name|localDirs
return|;
block|}
specifier|public
specifier|synchronized
name|String
index|[]
name|getLocalDirsNoCreate
parameter_list|()
block|{
return|return
name|this
operator|.
name|localDirs
return|;
block|}
specifier|private
specifier|static
name|String
name|createAppSpecificLocalDir
parameter_list|(
name|String
name|baseDir
parameter_list|,
name|String
name|applicationIdString
parameter_list|,
name|String
name|user
parameter_list|,
name|int
name|dagIdentifier
parameter_list|)
block|{
comment|// TODO This is broken for secure clusters. The app will not have permission to create these directories.
comment|// May work via Slider - since the directory would already exist. Otherwise may need a custom shuffle handler.
comment|// TODO This should be the process user - and not the user on behalf of whom the query is being submitted.
return|return
name|baseDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"usercache"
operator|+
name|File
operator|.
name|separator
operator|+
name|user
operator|+
name|File
operator|.
name|separator
operator|+
literal|"appcache"
operator|+
name|File
operator|.
name|separator
operator|+
name|applicationIdString
operator|+
name|File
operator|.
name|separator
operator|+
name|dagIdentifier
return|;
block|}
block|}
end_class

end_unit

