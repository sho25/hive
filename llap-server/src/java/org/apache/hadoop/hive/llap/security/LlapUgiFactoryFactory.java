begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|UgiFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/** No Java application is complete until it has a FactoryFactory. */
end_comment

begin_class
specifier|public
class|class
name|LlapUgiFactoryFactory
block|{
specifier|private
specifier|static
specifier|final
name|HadoopShims
name|SHIMS
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
decl_stmt|;
specifier|private
specifier|static
class|class
name|KerberosUgiFactory
implements|implements
name|UgiFactory
block|{
specifier|private
specifier|final
name|UserGroupInformation
name|baseUgi
decl_stmt|;
specifier|public
name|KerberosUgiFactory
parameter_list|(
name|String
name|keytab
parameter_list|,
name|String
name|principal
parameter_list|)
throws|throws
name|IOException
block|{
name|baseUgi
operator|=
name|LlapUtil
operator|.
name|loginWithKerberos
argument_list|(
name|principal
argument_list|,
name|keytab
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|createUgi
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Make sure the UGI is current.
name|baseUgi
operator|.
name|checkTGTAndReloginFromKeytab
argument_list|()
expr_stmt|;
comment|// TODO: the only reason this is done this way is because we want unique Subject-s so that
comment|//       the FS.get gives different FS objects to different fragments.
comment|// TODO: could we log in from ticket cache instead? no good method on UGI right now.
return|return
name|SHIMS
operator|.
name|cloneUgi
argument_list|(
name|baseUgi
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NoopUgiFactory
implements|implements
name|UgiFactory
block|{
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|createUgi
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|UgiFactory
name|createFsUgiFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fsKeytab
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_FS_KERBEROS_KEYTAB_FILE
argument_list|)
decl_stmt|,
name|fsPrincipal
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_FS_KERBEROS_PRINCIPAL
argument_list|)
decl_stmt|;
name|boolean
name|hasFsKeytab
init|=
name|fsKeytab
operator|!=
literal|null
operator|&&
operator|!
name|fsKeytab
operator|.
name|isEmpty
argument_list|()
decl_stmt|,
name|hasFsPrincipal
init|=
name|fsPrincipal
operator|!=
literal|null
operator|&&
operator|!
name|fsPrincipal
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasFsKeytab
operator|!=
name|hasFsPrincipal
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Inconsistent FS keytab settings "
operator|+
name|fsKeytab
operator|+
literal|"; "
operator|+
name|fsPrincipal
argument_list|)
throw|;
block|}
return|return
name|hasFsKeytab
condition|?
operator|new
name|KerberosUgiFactory
argument_list|(
name|fsKeytab
argument_list|,
name|fsPrincipal
argument_list|)
else|:
operator|new
name|NoopUgiFactory
argument_list|()
return|;
block|}
block|}
end_class

end_unit

