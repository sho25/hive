begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
operator|.
name|SerDeEncodedDataReader
operator|.
name|DeserialerOrcWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
operator|.
name|SerDeEncodedDataReader
operator|.
name|EncodingWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorDeserializeRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveFileFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|WriterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
operator|.
name|LazySimpleDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazySimpleStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BinaryComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_comment
comment|/** The class that writes rows from a text reader to an ORC writer using VectorDeserializeRow. */
end_comment

begin_class
class|class
name|VertorDeserializeOrcWriter
implements|implements
name|EncodingWriter
block|{
specifier|private
name|WriterImpl
name|orcWriter
decl_stmt|;
specifier|private
specifier|final
name|LazySimpleDeserializeRead
name|deserializeRead
decl_stmt|;
specifier|private
specifier|final
name|VectorDeserializeRow
argument_list|<
name|?
argument_list|>
name|vectorDeserializeRow
decl_stmt|;
specifier|private
specifier|final
name|VectorizedRowBatch
name|sourceBatch
decl_stmt|,
name|destinationBatch
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|hasIncludes
decl_stmt|;
specifier|private
specifier|final
name|StructObjectInspector
name|destinationOi
decl_stmt|;
comment|// TODO: if more writers are added, separate out an EncodingWriterFactory
specifier|public
specifier|static
name|EncodingWriter
name|create
parameter_list|(
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|sourceIf
parameter_list|,
name|Deserializer
name|serDe
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|parts
parameter_list|,
name|Configuration
name|daemonConf
parameter_list|,
name|Configuration
name|jobConf
parameter_list|,
name|Path
name|splitPath
parameter_list|,
name|StructObjectInspector
name|sourceOi
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|includes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Vector SerDe can be disabled both on client and server side.
if|if
condition|(
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|daemonConf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_ENCODE_VECTOR_SERDE_ENABLED
argument_list|)
operator|||
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|jobConf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_ENCODE_VECTOR_SERDE_ENABLED
argument_list|)
operator|||
operator|!
operator|(
name|sourceIf
operator|instanceof
name|TextInputFormat
operator|)
operator|||
operator|!
operator|(
name|serDe
operator|instanceof
name|LazySimpleSerDe
operator|)
condition|)
block|{
return|return
operator|new
name|DeserialerOrcWriter
argument_list|(
name|serDe
argument_list|,
name|sourceOi
argument_list|)
return|;
block|}
name|Path
name|path
init|=
name|splitPath
operator|.
name|getFileSystem
argument_list|(
name|daemonConf
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|splitPath
argument_list|)
decl_stmt|;
name|PartitionDesc
name|partDesc
init|=
name|HiveFileFormatUtils
operator|.
name|getPartitionDescFromPathRecursively
argument_list|(
name|parts
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|partDesc
operator|==
literal|null
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Not using VertorDeserializeOrcWriter: no partition desc for "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|DeserialerOrcWriter
argument_list|(
name|serDe
argument_list|,
name|sourceOi
argument_list|)
return|;
block|}
name|Properties
name|tblProps
init|=
name|partDesc
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tblProps
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_LAST_COLUMN_TAKES_REST
argument_list|)
argument_list|)
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Not using VertorDeserializeOrcWriter due to "
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_LAST_COLUMN_TAKES_REST
argument_list|)
expr_stmt|;
return|return
operator|new
name|DeserialerOrcWriter
argument_list|(
name|serDe
argument_list|,
name|sourceOi
argument_list|)
return|;
block|}
for|for
control|(
name|StructField
name|sf
range|:
name|sourceOi
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|Category
name|c
init|=
name|sf
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Not using VertorDeserializeOrcWriter: "
operator|+
name|c
operator|+
literal|" is not supported"
argument_list|)
expr_stmt|;
return|return
operator|new
name|DeserialerOrcWriter
argument_list|(
name|serDe
argument_list|,
name|sourceOi
argument_list|)
return|;
block|}
block|}
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating VertorDeserializeOrcWriter for "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|VertorDeserializeOrcWriter
argument_list|(
name|daemonConf
argument_list|,
name|tblProps
argument_list|,
name|sourceOi
argument_list|,
name|includes
argument_list|)
return|;
block|}
specifier|private
name|VertorDeserializeOrcWriter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tblProps
parameter_list|,
name|StructObjectInspector
name|sourceOi
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
parameter_list|)
throws|throws
name|IOException
block|{
comment|// See also: the usage of VectorDeserializeType, for binary. For now, we only want text.
name|VectorizedRowBatchCtx
name|vrbCtx
init|=
name|createVrbCtx
argument_list|(
name|sourceOi
argument_list|)
decl_stmt|;
name|this
operator|.
name|sourceBatch
operator|=
name|vrbCtx
operator|.
name|createVectorizedRowBatch
argument_list|()
expr_stmt|;
name|deserializeRead
operator|=
operator|new
name|LazySimpleDeserializeRead
argument_list|(
name|vrbCtx
operator|.
name|getRowColumnTypeInfos
argument_list|()
argument_list|,
comment|/* useExternalBuffer */
literal|true
argument_list|,
name|createSerdeParams
argument_list|(
name|conf
argument_list|,
name|tblProps
argument_list|)
argument_list|)
expr_stmt|;
name|vectorDeserializeRow
operator|=
operator|new
name|VectorDeserializeRow
argument_list|<
name|LazySimpleDeserializeRead
argument_list|>
argument_list|(
name|deserializeRead
argument_list|)
expr_stmt|;
name|int
name|colCount
init|=
name|vrbCtx
operator|.
name|getRowColumnTypeInfos
argument_list|()
operator|.
name|length
decl_stmt|;
name|boolean
index|[]
name|includes
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|hasIncludes
operator|=
name|columnIds
operator|.
name|size
argument_list|()
operator|<
name|colCount
expr_stmt|;
if|if
condition|(
name|hasIncludes
condition|)
block|{
comment|// VectorDeserializeRow produces "sparse" VRB when includes are used; we need to write the
comment|// "dense" VRB to ORC. Ideally, we'd use projection columns, but ORC writer doesn't use them.
comment|// In any case, we would also need to build a new OI for OrcWriter config.
comment|// This is why OrcWriter is created after this writer, by the way.
name|this
operator|.
name|destinationBatch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|columnIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|includes
operator|=
operator|new
name|boolean
index|[
name|colCount
index|]
expr_stmt|;
name|int
name|inclBatchIx
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|childNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|columnIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|childOis
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|columnIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|sourceFields
init|=
name|sourceOi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|columnId
range|:
name|columnIds
control|)
block|{
name|includes
index|[
name|columnId
index|]
operator|=
literal|true
expr_stmt|;
assert|assert
name|inclBatchIx
operator|<=
name|columnId
assert|;
comment|// Note that we use the same vectors in both batches. Clever, very clever.
name|destinationBatch
operator|.
name|cols
index|[
name|inclBatchIx
operator|++
index|]
operator|=
name|sourceBatch
operator|.
name|cols
index|[
name|columnId
index|]
expr_stmt|;
name|StructField
name|sourceField
init|=
name|sourceFields
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|childNames
operator|.
name|add
argument_list|(
name|sourceField
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|childOis
operator|.
name|add
argument_list|(
name|sourceField
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// This is only used by ORC to derive the structure. Most fields are unused.
name|destinationOi
operator|=
operator|new
name|LazySimpleStructObjectInspector
argument_list|(
name|childNames
argument_list|,
name|childOis
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|destinationBatch
operator|.
name|setPartitionInfo
argument_list|(
name|columnIds
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Includes for deserializer are "
operator|+
name|DebugUtils
operator|.
name|toString
argument_list|(
name|includes
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|vectorDeserializeRow
operator|.
name|init
argument_list|(
name|includes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// No includes - use the standard batch.
name|this
operator|.
name|destinationBatch
operator|=
name|sourceBatch
expr_stmt|;
name|this
operator|.
name|destinationOi
operator|=
name|sourceOi
expr_stmt|;
try|try
block|{
name|vectorDeserializeRow
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|VectorizedRowBatchCtx
name|createVrbCtx
parameter_list|(
name|StructObjectInspector
name|oi
parameter_list|)
throws|throws
name|IOException
block|{
name|VectorizedRowBatchCtx
name|vrbCtx
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
decl_stmt|;
try|try
block|{
name|vrbCtx
operator|.
name|init
argument_list|(
name|oi
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|vrbCtx
return|;
block|}
specifier|private
specifier|static
name|LazySerDeParameters
name|createSerdeParams
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tblProps
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|new
name|LazySerDeParameters
argument_list|(
name|conf
argument_list|,
name|tblProps
argument_list|,
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasIncludes
parameter_list|()
block|{
return|return
name|hasIncludes
return|;
block|}
annotation|@
name|Override
specifier|public
name|StructObjectInspector
name|getDestinationOi
parameter_list|()
block|{
return|return
name|destinationOi
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeOneRow
parameter_list|(
name|Writable
name|row
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sourceBatch
operator|.
name|size
operator|==
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|flushBatch
argument_list|()
expr_stmt|;
block|}
name|BinaryComparable
name|binComp
init|=
operator|(
name|BinaryComparable
operator|)
name|row
decl_stmt|;
name|deserializeRead
operator|.
name|set
argument_list|(
name|binComp
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|binComp
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deserialize and append new row using the current batch size as the index.
try|try
block|{
comment|// TODO: can we use ByRef? Probably not, need to see text record reader.
name|vectorDeserializeRow
operator|.
name|deserialize
argument_list|(
name|sourceBatch
argument_list|,
name|sourceBatch
operator|.
name|size
operator|++
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"DeserializeRead detail: "
operator|+
name|vectorDeserializeRow
operator|.
name|getDetailedReadPositionString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|flushBatch
parameter_list|()
throws|throws
name|IOException
block|{
name|addBatchToWriter
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|sourceBatch
operator|.
name|cols
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
comment|// This resets vectors in both batches.
name|ColumnVector
name|colVector
init|=
name|sourceBatch
operator|.
name|cols
index|[
name|c
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|!=
literal|null
condition|)
block|{
name|colVector
operator|.
name|reset
argument_list|()
expr_stmt|;
name|colVector
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
block|}
name|sourceBatch
operator|.
name|selectedInUse
operator|=
literal|false
expr_stmt|;
name|sourceBatch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|sourceBatch
operator|.
name|endOfFile
operator|=
literal|false
expr_stmt|;
name|propagateSourceBatchFieldsToDest
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|propagateSourceBatchFieldsToDest
parameter_list|()
block|{
if|if
condition|(
name|destinationBatch
operator|==
name|sourceBatch
condition|)
return|return;
name|destinationBatch
operator|.
name|selectedInUse
operator|=
name|sourceBatch
operator|.
name|selectedInUse
expr_stmt|;
name|destinationBatch
operator|.
name|size
operator|=
name|sourceBatch
operator|.
name|size
expr_stmt|;
name|destinationBatch
operator|.
name|endOfFile
operator|=
name|sourceBatch
operator|.
name|endOfFile
expr_stmt|;
block|}
specifier|private
name|void
name|addBatchToWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|propagateSourceBatchFieldsToDest
argument_list|()
expr_stmt|;
comment|// LlapIoImpl.LOG.info("Writing includeOnlyBatch " + s + "; data "+ includeOnlyBatch);
name|orcWriter
operator|.
name|addRowBatch
argument_list|(
name|destinationBatch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushIntermediateData
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|sourceBatch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|flushBatch
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeIntermediateFooter
parameter_list|()
throws|throws
name|IOException
block|{
name|orcWriter
operator|.
name|writeIntermediateFooter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|sourceBatch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|addBatchToWriter
argument_list|()
expr_stmt|;
block|}
name|orcWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|WriterImpl
name|orcWriter
parameter_list|)
block|{
name|this
operator|.
name|orcWriter
operator|=
name|orcWriter
expr_stmt|;
block|}
block|}
end_class

end_unit

