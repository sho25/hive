begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LlapCacheableBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DataCache
operator|.
name|BooleanRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DataCache
operator|.
name|DiskRangeListFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCachePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|MemoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCache
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
operator|.
name|OrcBatchKey
import|;
end_import

begin_class
specifier|public
class|class
name|OrcMetadataCache
block|{
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|OrcFileMetadata
argument_list|>
name|metadata
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|OrcBatchKey
argument_list|,
name|OrcStripeMetadata
argument_list|>
name|stripeMetadata
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|OrcFileEstimateErrors
argument_list|>
name|estimateErrors
decl_stmt|;
specifier|private
specifier|final
name|MemoryManager
name|memoryManager
decl_stmt|;
specifier|private
specifier|final
name|LowLevelCachePolicy
name|policy
decl_stmt|;
specifier|public
name|OrcMetadataCache
parameter_list|(
name|MemoryManager
name|memoryManager
parameter_list|,
name|LowLevelCachePolicy
name|policy
parameter_list|,
name|boolean
name|useEstimateCache
parameter_list|)
block|{
name|this
operator|.
name|memoryManager
operator|=
name|memoryManager
expr_stmt|;
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
name|this
operator|.
name|estimateErrors
operator|=
name|useEstimateCache
condition|?
operator|new
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|OrcFileEstimateErrors
argument_list|>
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
specifier|public
name|OrcFileMetadata
name|putFileMetadata
parameter_list|(
name|OrcFileMetadata
name|metaData
parameter_list|)
block|{
name|long
name|memUsage
init|=
name|metaData
operator|.
name|getMemoryUsage
argument_list|()
decl_stmt|;
name|memoryManager
operator|.
name|reserveMemory
argument_list|(
name|memUsage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OrcFileMetadata
name|val
init|=
name|metadata
operator|.
name|putIfAbsent
argument_list|(
name|metaData
operator|.
name|getFileKey
argument_list|()
argument_list|,
name|metaData
argument_list|)
decl_stmt|;
comment|// See OrcFileMetadata; it is always unlocked, so we just "touch" it here to simulate use.
return|return
name|touchOnPut
argument_list|(
name|metaData
argument_list|,
name|val
argument_list|,
name|memUsage
argument_list|)
return|;
block|}
specifier|public
name|OrcStripeMetadata
name|putStripeMetadata
parameter_list|(
name|OrcStripeMetadata
name|metaData
parameter_list|)
block|{
name|long
name|memUsage
init|=
name|metaData
operator|.
name|getMemoryUsage
argument_list|()
decl_stmt|;
name|memoryManager
operator|.
name|reserveMemory
argument_list|(
name|memUsage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OrcStripeMetadata
name|val
init|=
name|stripeMetadata
operator|.
name|putIfAbsent
argument_list|(
name|metaData
operator|.
name|getKey
argument_list|()
argument_list|,
name|metaData
argument_list|)
decl_stmt|;
comment|// See OrcStripeMetadata; it is always unlocked, so we just "touch" it here to simulate use.
return|return
name|touchOnPut
argument_list|(
name|metaData
argument_list|,
name|val
argument_list|,
name|memUsage
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|LlapCacheableBuffer
parameter_list|>
name|T
name|touchOnPut
parameter_list|(
name|T
name|newVal
parameter_list|,
name|T
name|oldVal
parameter_list|,
name|long
name|memUsage
parameter_list|)
block|{
if|if
condition|(
name|oldVal
operator|==
literal|null
condition|)
block|{
name|oldVal
operator|=
name|newVal
expr_stmt|;
name|policy
operator|.
name|cache
argument_list|(
name|oldVal
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|memoryManager
operator|.
name|releaseMemory
argument_list|(
name|memUsage
argument_list|)
expr_stmt|;
name|policy
operator|.
name|notifyLock
argument_list|(
name|oldVal
argument_list|)
expr_stmt|;
block|}
name|policy
operator|.
name|notifyUnlock
argument_list|(
name|oldVal
argument_list|)
expr_stmt|;
return|return
name|oldVal
return|;
block|}
specifier|public
name|void
name|putIncompleteCbs
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|DiskRange
index|[]
name|ranges
parameter_list|,
name|long
name|baseOffset
parameter_list|)
block|{
if|if
condition|(
name|estimateErrors
operator|==
literal|null
condition|)
return|return;
name|OrcFileEstimateErrors
name|errorData
init|=
name|estimateErrors
operator|.
name|get
argument_list|(
name|fileKey
argument_list|)
decl_stmt|;
name|boolean
name|isNew
init|=
literal|false
decl_stmt|;
comment|// We should technically update memory usage if updating the old object, but we don't do it
comment|// for now; there is no mechanism to properly notify the cache policy/etc. wrt parallel evicts.
if|if
condition|(
name|errorData
operator|==
literal|null
condition|)
block|{
name|errorData
operator|=
operator|new
name|OrcFileEstimateErrors
argument_list|(
name|fileKey
argument_list|)
expr_stmt|;
for|for
control|(
name|DiskRange
name|range
range|:
name|ranges
control|)
block|{
name|errorData
operator|.
name|addError
argument_list|(
name|range
operator|.
name|getOffset
argument_list|()
argument_list|,
name|range
operator|.
name|getLength
argument_list|()
argument_list|,
name|baseOffset
argument_list|)
expr_stmt|;
block|}
name|long
name|memUsage
init|=
name|errorData
operator|.
name|estimateMemoryUsage
argument_list|()
decl_stmt|;
name|memoryManager
operator|.
name|reserveMemory
argument_list|(
name|memUsage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OrcFileEstimateErrors
name|old
init|=
name|estimateErrors
operator|.
name|putIfAbsent
argument_list|(
name|fileKey
argument_list|,
name|errorData
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|errorData
operator|=
name|old
expr_stmt|;
name|memoryManager
operator|.
name|releaseMemory
argument_list|(
name|memUsage
argument_list|)
expr_stmt|;
name|policy
operator|.
name|notifyLock
argument_list|(
name|errorData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isNew
operator|=
literal|true
expr_stmt|;
name|policy
operator|.
name|cache
argument_list|(
name|errorData
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isNew
condition|)
block|{
for|for
control|(
name|DiskRange
name|range
range|:
name|ranges
control|)
block|{
name|errorData
operator|.
name|addError
argument_list|(
name|range
operator|.
name|getOffset
argument_list|()
argument_list|,
name|range
operator|.
name|getLength
argument_list|()
argument_list|,
name|baseOffset
argument_list|)
expr_stmt|;
block|}
block|}
name|policy
operator|.
name|notifyUnlock
argument_list|(
name|errorData
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OrcStripeMetadata
name|getStripeMetadata
parameter_list|(
name|OrcBatchKey
name|stripeKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|touchOnGet
argument_list|(
name|stripeMetadata
operator|.
name|get
argument_list|(
name|stripeKey
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|OrcFileMetadata
name|getFileMetadata
parameter_list|(
name|Object
name|fileKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|touchOnGet
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|fileKey
argument_list|)
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|LlapCacheableBuffer
parameter_list|>
name|T
name|touchOnGet
parameter_list|(
name|T
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|policy
operator|.
name|notifyLock
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|policy
operator|.
name|notifyUnlock
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Never locked for eviction; Java object.
block|}
return|return
name|result
return|;
block|}
specifier|public
name|DiskRangeList
name|getIncompleteCbs
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|DiskRangeList
name|ranges
parameter_list|,
name|long
name|baseOffset
parameter_list|,
name|DiskRangeListFactory
name|factory
parameter_list|,
name|BooleanRef
name|gotAllData
parameter_list|)
block|{
if|if
condition|(
name|estimateErrors
operator|==
literal|null
condition|)
return|return
name|ranges
return|;
name|OrcFileEstimateErrors
name|errors
init|=
name|estimateErrors
operator|.
name|get
argument_list|(
name|fileKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|errors
operator|==
literal|null
condition|)
return|return
name|ranges
return|;
return|return
name|errors
operator|.
name|getIncompleteCbs
argument_list|(
name|ranges
argument_list|,
name|baseOffset
argument_list|,
name|factory
argument_list|,
name|gotAllData
argument_list|)
return|;
block|}
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|OrcFileMetadata
name|buffer
parameter_list|)
block|{
name|metadata
operator|.
name|remove
argument_list|(
name|buffer
operator|.
name|getFileKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// See OrcFileMetadata - we don't clear the object, it will be GCed when released by users.
block|}
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|OrcStripeMetadata
name|buffer
parameter_list|)
block|{
name|stripeMetadata
operator|.
name|remove
argument_list|(
name|buffer
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// See OrcStripeMetadata - we don't clear the object, it will be GCed when released by users.
block|}
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|OrcFileEstimateErrors
name|buffer
parameter_list|)
block|{
name|estimateErrors
operator|.
name|remove
argument_list|(
name|buffer
operator|.
name|getFileKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

