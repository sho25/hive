begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|EvictionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LlapCacheableBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCacheMemoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCachePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|MemoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|cache
operator|.
name|LowLevelCache
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|orc
operator|.
name|OrcBatchKey
import|;
end_import

begin_class
specifier|public
class|class
name|OrcMetadataCache
implements|implements
name|EvictionListener
block|{
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|OrcFileMetadata
argument_list|>
name|metadata
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|OrcFileMetadata
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|OrcBatchKey
argument_list|,
name|OrcStripeMetadata
argument_list|>
name|stripeMetadata
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|OrcBatchKey
argument_list|,
name|OrcStripeMetadata
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MemoryManager
name|memoryManager
decl_stmt|;
specifier|private
specifier|final
name|LowLevelCachePolicy
name|policy
decl_stmt|;
specifier|public
name|OrcMetadataCache
parameter_list|(
name|MemoryManager
name|memoryManager
parameter_list|,
name|LowLevelCachePolicy
name|policy
parameter_list|)
block|{
name|this
operator|.
name|memoryManager
operator|=
name|memoryManager
expr_stmt|;
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
block|}
specifier|public
name|void
name|putFileMetadata
parameter_list|(
name|OrcFileMetadata
name|metaData
parameter_list|)
block|{
name|memoryManager
operator|.
name|reserveMemory
argument_list|(
name|metaData
operator|.
name|getMemoryUsage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|cache
argument_list|(
name|metaData
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|policy
operator|.
name|notifyUnlock
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
comment|// See OrcFileMetadata, it is always unlocked.
name|metadata
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|getFileId
argument_list|()
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|putStripeMetadata
parameter_list|(
name|OrcStripeMetadata
name|metaData
parameter_list|)
block|{
name|memoryManager
operator|.
name|reserveMemory
argument_list|(
name|metaData
operator|.
name|getMemoryUsage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|cache
argument_list|(
name|metaData
argument_list|,
name|Priority
operator|.
name|HIGH
argument_list|)
expr_stmt|;
name|policy
operator|.
name|notifyUnlock
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
comment|// See OrcStripeMetadata, it is always unlocked.
name|stripeMetadata
operator|.
name|put
argument_list|(
name|metaData
operator|.
name|getKey
argument_list|()
argument_list|,
name|metaData
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OrcStripeMetadata
name|getStripeMetadata
parameter_list|(
name|OrcBatchKey
name|stripeKey
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|stripeMetadata
operator|.
name|get
argument_list|(
name|stripeKey
argument_list|)
return|;
block|}
specifier|public
name|OrcFileMetadata
name|getFileMetadata
parameter_list|(
name|long
name|fileId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|metadata
operator|.
name|get
argument_list|(
name|fileId
argument_list|)
return|;
block|}
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|OrcFileMetadata
name|buffer
parameter_list|)
block|{
name|metadata
operator|.
name|remove
argument_list|(
name|buffer
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
comment|// See OrcFileMetadata - we don't clear the object, it will be GCed when released by users.
block|}
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|OrcStripeMetadata
name|buffer
parameter_list|)
block|{
name|stripeMetadata
operator|.
name|remove
argument_list|(
name|buffer
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// See OrcStripeMetadata - we don't clear the object, it will be GCed when released by users.
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|instanceof
name|OrcStripeMetadata
condition|)
block|{
name|notifyEvicted
argument_list|(
operator|(
name|OrcStripeMetadata
operator|)
name|buffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|buffer
operator|instanceof
name|OrcFileMetadata
assert|;
name|notifyEvicted
argument_list|(
operator|(
name|OrcFileMetadata
operator|)
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

