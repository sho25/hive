begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|CompressionKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|StripeInformation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_comment
comment|/**  * ORC-specific metadata cache.  */
end_comment

begin_class
specifier|public
class|class
name|OrcMetadataCache
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE_ACCESS_CONCURRENCY
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_CACHE_ENTRIES
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
name|Cache
argument_list|<
name|String
argument_list|,
name|OrcMetadata
argument_list|>
name|METADATA
decl_stmt|;
static|static
block|{
name|METADATA
operator|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
name|DEFAULT_CACHE_ACCESS_CONCURRENCY
argument_list|)
operator|.
name|maximumSize
argument_list|(
name|DEFAULT_MAX_CACHE_ENTRIES
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Path
name|path
decl_stmt|;
specifier|private
name|OrcMetadataLoader
name|loader
decl_stmt|;
specifier|public
name|OrcMetadataCache
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|loader
operator|=
operator|new
name|OrcMetadataLoader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CompressionKind
name|getCompression
parameter_list|(
name|String
name|pathString
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|METADATA
operator|.
name|get
argument_list|(
name|pathString
argument_list|,
name|loader
argument_list|)
operator|.
name|getCompressionKind
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to load orc metadata for "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|getCompressionBufferSize
parameter_list|(
name|String
name|pathString
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|METADATA
operator|.
name|get
argument_list|(
name|pathString
argument_list|,
name|loader
argument_list|)
operator|.
name|getCompressionBufferSize
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to load orc metadata for "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|getTypes
parameter_list|(
name|String
name|pathString
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|METADATA
operator|.
name|get
argument_list|(
name|pathString
argument_list|,
name|loader
argument_list|)
operator|.
name|getTypes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to load orc metadata for "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|getStripes
parameter_list|(
name|String
name|pathString
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|METADATA
operator|.
name|get
argument_list|(
name|pathString
argument_list|,
name|loader
argument_list|)
operator|.
name|getStripes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to load orc metadata for "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//  public boolean[] getIncludedRowGroups(String pathString, SearchArgument sarg, int stripeIdx) throws IOException {
comment|//    try {
comment|//      return METADATA.get(pathString, loader).getStripeToRowIndexEntries();
comment|//    } catch (ExecutionException e) {
comment|//      throw new IOException("Unable to load orc metadata for " + path.toString(), e);
comment|//    }
comment|//  }
block|}
end_class

end_unit

