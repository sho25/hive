begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Implementation of the "simple" algorithm from "On the Existence of a Spectrum of Policies  * that Subsumes the Least Recently Used (LRU) and Least Frequently Used (LFU) Policies".  * TODO: fix this, no longer true; with ORC as is, 4k buffers per gig of cache  * We expect the number of buffers to be relatively small (1000s), so we just use one heap.  **/
end_comment

begin_class
specifier|public
class|class
name|LowLevelLrfuCachePolicy
extends|extends
name|LowLevelCachePolicyBase
block|{
specifier|private
specifier|final
name|double
name|lambda
decl_stmt|;
specifier|private
specifier|final
name|double
name|f
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
literal|0.5
argument_list|,
name|lambda
operator|*
name|x
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|double
name|F0
init|=
literal|1
decl_stmt|;
comment|// f(0) is always 1
specifier|private
specifier|final
name|double
name|touchPriority
parameter_list|(
name|long
name|time
parameter_list|,
name|long
name|lastAccess
parameter_list|,
name|double
name|previous
parameter_list|)
block|{
return|return
name|F0
operator|+
name|f
argument_list|(
name|time
operator|-
name|lastAccess
argument_list|)
operator|*
name|previous
return|;
block|}
specifier|private
specifier|final
name|double
name|expirePriority
parameter_list|(
name|long
name|time
parameter_list|,
name|long
name|lastAccess
parameter_list|,
name|double
name|previous
parameter_list|)
block|{
return|return
name|f
argument_list|(
name|time
operator|-
name|lastAccess
argument_list|)
operator|*
name|previous
return|;
block|}
specifier|private
specifier|final
name|AtomicLong
name|timer
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * The heap. Currently synchronized on itself; there is a number of papers out there    * with various lock-free/efficient priority queues which we can use if needed.    */
specifier|private
specifier|final
name|LlapCacheableBuffer
index|[]
name|heap
decl_stmt|;
comment|/** Number of elements. */
specifier|private
name|int
name|heapSize
init|=
literal|0
decl_stmt|;
specifier|public
name|LowLevelLrfuCachePolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|minBufferSize
parameter_list|,
name|long
name|maxCacheSize
parameter_list|,
name|EvictionListener
name|listener
parameter_list|)
block|{
name|super
argument_list|(
name|maxCacheSize
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|heap
operator|=
operator|new
name|LlapCacheableBuffer
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|maxCacheSize
operator|*
literal|1.0
operator|)
operator|/
name|minBufferSize
argument_list|)
index|]
expr_stmt|;
name|lambda
operator|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_LRFU_LAMBDA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cache
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|buffer
operator|.
name|lastUpdate
operator|=
name|timer
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|priority
operator|=
name|F0
expr_stmt|;
assert|assert
name|buffer
operator|.
name|isLocked
argument_list|()
assert|;
name|buffer
operator|.
name|isLockedInHeap
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|heap
init|)
block|{
comment|// Ensured by reserveMemory.
assert|assert
name|heapSize
operator|<
name|heap
operator|.
name|length
operator|:
name|heap
operator|.
name|length
operator|+
literal|">= "
operator|+
name|heapSize
assert|;
name|buffer
operator|.
name|indexInHeap
operator|=
name|heapSize
expr_stmt|;
name|heapifyUpUnderLock
argument_list|(
name|buffer
argument_list|,
name|buffer
operator|.
name|lastUpdate
argument_list|)
expr_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|buffer
operator|+
literal|" inserted at "
operator|+
name|buffer
operator|.
name|lastUpdate
argument_list|)
expr_stmt|;
block|}
operator|++
name|heapSize
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyLock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|long
name|time
init|=
name|timer
operator|.
name|get
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|heap
init|)
block|{
name|buffer
operator|.
name|isLockedInHeap
operator|=
literal|true
expr_stmt|;
name|heapifyDownUnderLock
argument_list|(
name|buffer
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyUnlock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|long
name|time
init|=
name|timer
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|heap
init|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceCachingEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Touching "
operator|+
name|buffer
operator|+
literal|" at "
operator|+
name|time
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|priority
operator|=
name|touchPriority
argument_list|(
name|time
argument_list|,
name|buffer
operator|.
name|lastUpdate
argument_list|,
name|buffer
operator|.
name|priority
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|lastUpdate
operator|=
name|time
expr_stmt|;
name|buffer
operator|.
name|isLockedInHeap
operator|=
literal|false
expr_stmt|;
comment|// Buffer's priority just decreased from boosted lock priority, so move up.
name|heapifyUpUnderLock
argument_list|(
name|buffer
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|LlapCacheableBuffer
name|evictFromHeapUnderLock
parameter_list|(
name|long
name|time
parameter_list|)
block|{
if|if
condition|(
name|heapSize
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|LlapCacheableBuffer
name|result
init|=
name|heap
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|invalidate
argument_list|()
condition|)
block|{
comment|// We boost the priority of locked buffers to a very large value;
comment|// this means entire heap is locked. TODO: need to work around that for small pools?
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceCachingEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to invalidate head "
operator|+
name|result
operator|.
name|toString
argument_list|()
operator|+
literal|"; size = "
operator|+
name|heapSize
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceCachingEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Evicting "
operator|+
name|result
operator|+
literal|" at "
operator|+
name|time
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|indexInHeap
operator|=
operator|-
literal|1
expr_stmt|;
operator|--
name|heapSize
expr_stmt|;
name|LlapCacheableBuffer
name|newRoot
init|=
name|heap
index|[
name|heapSize
index|]
decl_stmt|;
name|newRoot
operator|.
name|indexInHeap
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|newRoot
operator|.
name|lastUpdate
operator|!=
name|time
operator|&&
operator|!
name|newRoot
operator|.
name|isLockedInHeap
condition|)
block|{
name|newRoot
operator|.
name|priority
operator|=
name|expirePriority
argument_list|(
name|time
argument_list|,
name|newRoot
operator|.
name|lastUpdate
argument_list|,
name|newRoot
operator|.
name|priority
argument_list|)
expr_stmt|;
name|newRoot
operator|.
name|lastUpdate
operator|=
name|time
expr_stmt|;
block|}
name|heapifyDownUnderLock
argument_list|(
name|newRoot
argument_list|,
name|time
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|heapifyDownUnderLock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|,
name|long
name|time
parameter_list|)
block|{
comment|// Relative positions of the blocks don't change over time; priorities we expire can only
comment|// decrease; we only have one block that could have broken heap rule and we always move it
comment|// down; therefore, we can update priorities of other blocks as we go for part of the heap -
comment|// we correct any discrepancy w/the parent after expiring priority, and any block we expire
comment|// the priority for already has lower priority than that of its children.
comment|// TODO: avoid expiring priorities if times are close? might be needlessly expensive.
name|int
name|ix
init|=
name|buffer
operator|.
name|indexInHeap
decl_stmt|;
name|double
name|priority
init|=
name|buffer
operator|.
name|isLockedInHeap
condition|?
name|Double
operator|.
name|MAX_VALUE
else|:
name|buffer
operator|.
name|priority
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|leftIx
init|=
operator|(
name|ix
operator|<<
literal|1
operator|)
operator|+
literal|1
decl_stmt|,
name|rightIx
init|=
name|leftIx
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|leftIx
operator|>=
name|heapSize
condition|)
break|break;
comment|// Buffer is at the leaf node.
name|LlapCacheableBuffer
name|left
init|=
name|heap
index|[
name|leftIx
index|]
decl_stmt|,
name|right
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rightIx
operator|<
name|heapSize
condition|)
block|{
name|right
operator|=
name|heap
index|[
name|rightIx
index|]
expr_stmt|;
block|}
name|double
name|leftPri
init|=
name|getHeapifyPriority
argument_list|(
name|left
argument_list|,
name|time
argument_list|)
decl_stmt|,
name|rightPri
init|=
name|getHeapifyPriority
argument_list|(
name|right
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|priority
operator|<=
name|leftPri
operator|&&
name|priority
operator|<=
name|rightPri
condition|)
break|break;
if|if
condition|(
name|leftPri
operator|<=
name|rightPri
condition|)
block|{
comment|// prefer left, cause right might be missing
name|heap
index|[
name|ix
index|]
operator|=
name|left
expr_stmt|;
name|left
operator|.
name|indexInHeap
operator|=
name|ix
expr_stmt|;
name|ix
operator|=
name|leftIx
expr_stmt|;
block|}
else|else
block|{
name|heap
index|[
name|ix
index|]
operator|=
name|right
expr_stmt|;
name|right
operator|.
name|indexInHeap
operator|=
name|ix
expr_stmt|;
name|ix
operator|=
name|rightIx
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|indexInHeap
operator|=
name|ix
expr_stmt|;
name|heap
index|[
name|ix
index|]
operator|=
name|buffer
expr_stmt|;
block|}
specifier|private
name|void
name|heapifyUpUnderLock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|,
name|long
name|time
parameter_list|)
block|{
comment|// See heapifyDown comment.
name|int
name|ix
init|=
name|buffer
operator|.
name|indexInHeap
decl_stmt|;
name|double
name|priority
init|=
name|buffer
operator|.
name|isLockedInHeap
condition|?
name|Double
operator|.
name|MAX_VALUE
else|:
name|buffer
operator|.
name|priority
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|ix
operator|==
literal|0
condition|)
break|break;
comment|// Buffer is at the top of the heap.
name|int
name|parentIx
init|=
operator|(
name|ix
operator|-
literal|1
operator|)
operator|>>>
literal|1
decl_stmt|;
name|LlapCacheableBuffer
name|parent
init|=
name|heap
index|[
name|parentIx
index|]
decl_stmt|;
name|double
name|parentPri
init|=
name|getHeapifyPriority
argument_list|(
name|parent
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|priority
operator|>=
name|parentPri
condition|)
break|break;
name|heap
index|[
name|ix
index|]
operator|=
name|parent
expr_stmt|;
name|parent
operator|.
name|indexInHeap
operator|=
name|ix
expr_stmt|;
name|ix
operator|=
name|parentIx
expr_stmt|;
block|}
name|buffer
operator|.
name|indexInHeap
operator|=
name|ix
expr_stmt|;
name|heap
index|[
name|ix
index|]
operator|=
name|buffer
expr_stmt|;
block|}
specifier|private
name|double
name|getHeapifyPriority
parameter_list|(
name|LlapCacheableBuffer
name|buf
parameter_list|,
name|long
name|time
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|==
literal|null
operator|||
name|buf
operator|.
name|isLockedInHeap
condition|)
return|return
name|Double
operator|.
name|MAX_VALUE
return|;
if|if
condition|(
name|buf
operator|.
name|lastUpdate
operator|!=
name|time
condition|)
block|{
name|buf
operator|.
name|priority
operator|=
name|expirePriority
argument_list|(
name|time
argument_list|,
name|buf
operator|.
name|lastUpdate
argument_list|,
name|buf
operator|.
name|priority
argument_list|)
expr_stmt|;
name|buf
operator|.
name|lastUpdate
operator|=
name|time
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|priority
return|;
block|}
specifier|public
name|String
name|debugDumpHeap
parameter_list|()
block|{
if|if
condition|(
name|heapSize
operator|==
literal|0
condition|)
return|return
literal|"<empty>"
return|;
name|int
name|levels
init|=
literal|32
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|heapSize
argument_list|)
decl_stmt|;
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|ix
init|=
literal|0
decl_stmt|;
name|int
name|spacesCount
init|=
name|heap
index|[
literal|0
index|]
operator|.
name|toStringForCache
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|3
decl_stmt|;
name|String
name|full
init|=
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|" "
argument_list|,
name|spacesCount
argument_list|)
decl_stmt|,
name|half
init|=
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|" "
argument_list|,
name|spacesCount
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|maxWidth
init|=
literal|1
operator|<<
operator|(
name|levels
operator|-
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|levels
condition|;
operator|++
name|i
control|)
block|{
name|int
name|width
init|=
literal|1
operator|<<
name|i
decl_stmt|;
name|int
name|middleGap
init|=
operator|(
name|maxWidth
operator|-
name|width
operator|)
operator|/
name|width
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
operator|(
name|middleGap
operator|>>>
literal|1
operator|)
condition|;
operator|++
name|j
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|full
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|middleGap
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|half
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|width
operator|&&
name|ix
operator|<
name|heapSize
condition|;
operator|++
name|j
operator|,
operator|++
name|ix
control|)
block|{
if|if
condition|(
name|j
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|middleGap
condition|;
operator|++
name|k
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|full
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|middleGap
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|j
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|heap
index|[
name|ix
index|]
operator|.
name|toStringForCache
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|j
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|LlapCacheableBuffer
name|evictOneMoreBlock
parameter_list|()
block|{
synchronized|synchronized
init|(
name|heap
init|)
block|{
return|return
name|evictFromHeapUnderLock
argument_list|(
name|timer
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|long
name|evictSomeBlocks
parameter_list|(
name|long
name|memoryToReserve
parameter_list|,
name|EvictionListener
name|listener
parameter_list|)
block|{
name|long
name|evicted
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|evicted
operator|<
name|memoryToReserve
condition|)
block|{
name|LlapCacheableBuffer
name|buffer
init|=
name|evictOneMoreBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
return|return
name|evicted
return|;
name|evicted
operator|+=
name|buffer
operator|.
name|length
expr_stmt|;
name|listener
operator|.
name|notifyEvicted
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
return|return
name|evicted
return|;
block|}
block|}
end_class

end_unit

