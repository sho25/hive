begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCache
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
operator|.
name|MetadataCache
operator|.
name|LlapMetadataBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|MetricsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MsInfo
import|;
end_import

begin_comment
comment|/**  * Implementation of the algorithm from "On the Existence of a Spectrum of Policies  * that Subsumes the Least Recently Used (LRU) and Least Frequently Used (LFU) Policies".  * Additionally, buffer locking has to be handled (locked buffer cannot be evicted).  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LowLevelLrfuCachePolicy
implements|implements
name|LowLevelCachePolicy
block|{
specifier|private
specifier|final
name|double
name|lambda
decl_stmt|;
specifier|private
name|double
name|f
parameter_list|(
name|long
name|x
parameter_list|)
block|{
return|return
name|Math
operator|.
name|pow
argument_list|(
literal|0.5
argument_list|,
name|lambda
operator|*
name|x
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|double
name|F0
init|=
literal|1
decl_stmt|;
comment|// f(0) is always 1
specifier|private
name|double
name|touchPriority
parameter_list|(
name|long
name|time
parameter_list|,
name|long
name|lastAccess
parameter_list|,
name|double
name|previous
parameter_list|)
block|{
return|return
name|F0
operator|+
name|f
argument_list|(
name|time
operator|-
name|lastAccess
argument_list|)
operator|*
name|previous
return|;
block|}
specifier|private
name|double
name|expirePriority
parameter_list|(
name|long
name|time
parameter_list|,
name|long
name|lastAccess
parameter_list|,
name|double
name|previous
parameter_list|)
block|{
return|return
name|f
argument_list|(
name|time
operator|-
name|lastAccess
argument_list|)
operator|*
name|previous
return|;
block|}
specifier|private
specifier|final
name|AtomicLong
name|timer
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * The heap and list. Currently synchronized on the object, which is not good. If this becomes    * a problem (which it probably will), we can partition the cache policy, or use some better    * structure. Heap should not be locked while holding the lock on list.    * As of now, eviction in most cases will only need the list; locking doesn't do anything;    * unlocking actually places item in evictable cache - unlocking is done after processing,    * so this most expensive part (and only access to heap in most cases) will not affect it.    * Perhaps we should use ConcurrentDoubleLinkedList (in public domain).    * ONLY LIST REMOVAL is allowed under list lock.    */
specifier|private
name|LlapCacheableBuffer
index|[]
name|heap
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|heapLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|listLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
name|LlapCacheableBuffer
name|listHead
decl_stmt|,
name|listTail
decl_stmt|;
comment|/** Number of elements. */
specifier|private
name|int
name|heapSize
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxHeapSize
decl_stmt|;
specifier|private
name|EvictionListener
name|evictionListener
decl_stmt|;
specifier|private
specifier|final
name|PolicyMetrics
name|metrics
decl_stmt|;
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|LlapCacheableBuffer
index|[]
argument_list|>
name|threadLocalBuffers
decl_stmt|;
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|threadLocalCount
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxQueueSize
decl_stmt|;
specifier|public
name|LowLevelLrfuCachePolicy
parameter_list|(
name|int
name|minBufferSize
parameter_list|,
name|long
name|maxSize
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|maxQueueSize
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_LRFU_BP_WRAPPER_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|lambda
operator|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_LRFU_LAMBDA
argument_list|)
expr_stmt|;
name|int
name|maxBuffers
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|maxSize
operator|*
literal|1.0
operator|)
operator|/
name|minBufferSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|lambda
operator|==
literal|0
condition|)
block|{
name|maxHeapSize
operator|=
name|maxBuffers
expr_stmt|;
comment|// lrfuThreshold is +inf in this case
block|}
else|else
block|{
name|int
name|lrfuThreshold
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|Math
operator|.
name|log
argument_list|(
literal|1
operator|-
name|Math
operator|.
name|pow
argument_list|(
literal|0.5
argument_list|,
name|lambda
argument_list|)
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|0.5
argument_list|)
operator|)
operator|/
name|lambda
argument_list|)
decl_stmt|;
name|maxHeapSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|lrfuThreshold
argument_list|,
name|maxBuffers
argument_list|)
expr_stmt|;
block|}
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"LRFU cache policy with min buffer size {} and lambda {} (heap size {})"
argument_list|,
name|minBufferSize
argument_list|,
name|lambda
argument_list|,
name|maxHeapSize
argument_list|)
expr_stmt|;
name|heap
operator|=
operator|new
name|LlapCacheableBuffer
index|[
name|maxHeapSize
index|]
expr_stmt|;
name|listHead
operator|=
literal|null
expr_stmt|;
name|listTail
operator|=
literal|null
expr_stmt|;
name|String
name|sessID
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"llap.daemon.metrics.sessionid"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sessID
condition|)
block|{
name|sessID
operator|=
literal|"<unknown>"
expr_stmt|;
block|}
comment|// register new metrics provider for this cache policy
name|metrics
operator|=
operator|new
name|PolicyMetrics
argument_list|(
name|sessID
argument_list|)
expr_stmt|;
name|LlapMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|register
argument_list|(
literal|"LowLevelLrfuCachePolicy-"
operator|+
name|MetricsUtils
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
name|threadLocalBuffers
operator|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
operator|new
name|LlapCacheableBuffer
index|[
name|maxQueueSize
index|]
argument_list|)
expr_stmt|;
name|threadLocalCount
operator|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cache
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
comment|// LRFU cache policy doesn't store locked blocks. When we cache, the block is locked, so
comment|// we simply do nothing here. The fact that it was never updated will allow us to add it
comment|// properly on the first notifyUnlock.
comment|// We'll do is set priority, to account for the inbound one. No lock - not in heap.
assert|assert
name|buffer
operator|.
name|lastUpdate
operator|==
operator|-
literal|1
assert|;
name|long
name|time
init|=
name|timer
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|priority
operator|=
name|F0
expr_stmt|;
name|buffer
operator|.
name|lastUpdate
operator|=
name|time
expr_stmt|;
if|if
condition|(
name|priority
operator|==
name|Priority
operator|.
name|HIGH
condition|)
block|{
comment|// This is arbitrary. Note that metadata may come from a big scan and nuke all the data
comment|// from some small frequently accessed tables, because it gets such a large priority boost
comment|// to start with. Think of the multiplier as the number of accesses after which the data
comment|// becomes more important than some random read-once metadata, in a pure-LFU scheme.
name|buffer
operator|.
name|priority
operator|*=
literal|3
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|priority
operator|==
name|Priority
operator|.
name|NORMAL
assert|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyLock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
comment|// We do not proactively remove locked items from the heap, and opportunistically try to
comment|// remove from the list (since eviction is mostly from the list). If eviction stumbles upon
comment|// a locked item in either, it will remove it from cache; when we unlock, we are going to
comment|// put it back or update it, depending on whether this has happened. This should cause
comment|// most of the expensive cache update work to happen in unlock, not blocking processing.
if|if
condition|(
name|buffer
operator|.
name|indexInHeap
operator|!=
name|LlapCacheableBuffer
operator|.
name|IN_LIST
operator|||
operator|!
name|listLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
return|return;
block|}
name|removeFromListAndUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyUnlock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|int
name|count
init|=
name|threadLocalCount
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|LlapCacheableBuffer
index|[]
name|cacheableBuffers
init|=
name|threadLocalBuffers
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|<
name|maxQueueSize
condition|)
block|{
name|cacheableBuffers
index|[
name|count
index|]
operator|=
name|buffer
expr_stmt|;
name|threadLocalCount
operator|.
name|set
argument_list|(
operator|++
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|<=
name|maxQueueSize
operator|/
literal|2
condition|)
block|{
comment|// case too early to flush
return|return;
block|}
if|if
condition|(
name|count
operator|==
name|maxQueueSize
condition|)
block|{
comment|// case we have to flush thus block on heap lock
name|heapLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|doNotifyUnderHeapLock
argument_list|(
name|count
argument_list|,
name|cacheableBuffers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|threadLocalCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|heapLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|heapLock
operator|.
name|tryLock
argument_list|()
condition|)
block|{
try|try
block|{
name|doNotifyUnderHeapLock
argument_list|(
name|count
argument_list|,
name|cacheableBuffers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|threadLocalCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|heapLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doNotifyUnderHeapLock
parameter_list|(
name|int
name|count
parameter_list|,
name|LlapCacheableBuffer
index|[]
name|cacheableBuffers
parameter_list|)
block|{
name|LlapCacheableBuffer
name|buffer
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|=
name|cacheableBuffers
index|[
name|i
index|]
expr_stmt|;
name|long
name|time
init|=
name|timer
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|CACHE_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|CACHE_LOGGER
operator|.
name|trace
argument_list|(
literal|"Touching {} at {}"
argument_list|,
name|buffer
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
comment|// First, update buffer priority - we have just been using it.
name|buffer
operator|.
name|priority
operator|=
operator|(
name|buffer
operator|.
name|lastUpdate
operator|==
operator|-
literal|1
operator|)
condition|?
name|F0
else|:
name|touchPriority
argument_list|(
name|time
argument_list|,
name|buffer
operator|.
name|lastUpdate
argument_list|,
name|buffer
operator|.
name|priority
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|lastUpdate
operator|=
name|time
expr_stmt|;
comment|// Then, if the buffer was in the list, remove it.
if|if
condition|(
name|buffer
operator|.
name|indexInHeap
operator|==
name|LlapCacheableBuffer
operator|.
name|IN_LIST
condition|)
block|{
name|listLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|removeFromListAndUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|// The only concurrent change that can happen when we hold the heap lock is list removal;
comment|// we have just ensured the item is not in the list, so we have a definite state now.
if|if
condition|(
name|buffer
operator|.
name|indexInHeap
operator|>=
literal|0
condition|)
block|{
comment|// The buffer has lived in the heap all along. Restore heap property.
name|heapifyDownUnderLock
argument_list|(
name|buffer
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|heapSize
operator|==
name|heap
operator|.
name|length
condition|)
block|{
comment|// The buffer is not in the (full) heap. Demote the top item of the heap into the list.
name|LlapCacheableBuffer
name|demoted
init|=
name|heap
index|[
literal|0
index|]
decl_stmt|;
name|listLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
assert|assert
name|demoted
operator|.
name|indexInHeap
operator|==
literal|0
assert|;
comment|// Noone could have moved it, we have the heap lock.
name|demoted
operator|.
name|indexInHeap
operator|=
name|LlapCacheableBuffer
operator|.
name|IN_LIST
expr_stmt|;
name|demoted
operator|.
name|prev
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|listHead
operator|!=
literal|null
condition|)
block|{
name|demoted
operator|.
name|next
operator|=
name|listHead
expr_stmt|;
name|listHead
operator|.
name|prev
operator|=
name|demoted
expr_stmt|;
name|listHead
operator|=
name|demoted
expr_stmt|;
block|}
else|else
block|{
name|listHead
operator|=
name|demoted
expr_stmt|;
name|listTail
operator|=
name|demoted
expr_stmt|;
name|demoted
operator|.
name|next
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|listLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Now insert the new buffer in its place and restore heap property.
name|buffer
operator|.
name|indexInHeap
operator|=
literal|0
expr_stmt|;
name|heapifyDownUnderLock
argument_list|(
name|buffer
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Heap is not full, add the buffer to the heap and restore heap property up.
assert|assert
name|heapSize
operator|<
name|heap
operator|.
name|length
operator|:
name|heap
operator|.
name|length
operator|+
literal|"< "
operator|+
name|heapSize
assert|;
name|buffer
operator|.
name|indexInHeap
operator|=
name|heapSize
expr_stmt|;
name|heapifyUpUnderLock
argument_list|(
name|buffer
argument_list|,
name|time
argument_list|)
expr_stmt|;
operator|++
name|heapSize
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEvictionListener
parameter_list|(
name|EvictionListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|evictionListener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|purge
parameter_list|()
block|{
name|long
name|evicted
init|=
literal|0
decl_stmt|;
name|LlapCacheableBuffer
name|oldTail
decl_stmt|;
name|listLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|LlapCacheableBuffer
name|current
init|=
name|listTail
decl_stmt|;
name|oldTail
operator|=
name|listTail
expr_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|boolean
name|canEvict
init|=
name|LlapCacheableBuffer
operator|.
name|INVALIDATE_OK
operator|==
name|current
operator|.
name|invalidate
argument_list|()
decl_stmt|;
name|current
operator|.
name|indexInHeap
operator|=
name|LlapCacheableBuffer
operator|.
name|NOT_IN_CACHE
expr_stmt|;
if|if
condition|(
name|canEvict
condition|)
block|{
name|current
operator|=
name|current
operator|.
name|prev
expr_stmt|;
block|}
else|else
block|{
comment|// Remove from the list.
name|LlapCacheableBuffer
name|newCurrent
init|=
name|current
operator|.
name|prev
decl_stmt|;
name|oldTail
operator|=
name|removeFromLocalList
argument_list|(
name|oldTail
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
name|newCurrent
expr_stmt|;
block|}
block|}
name|listHead
operator|=
literal|null
expr_stmt|;
name|listTail
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|listLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|LlapCacheableBuffer
index|[]
name|oldHeap
decl_stmt|;
name|int
name|oldHeapSize
decl_stmt|;
name|heapLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|oldHeap
operator|=
name|heap
expr_stmt|;
name|oldHeapSize
operator|=
name|heapSize
expr_stmt|;
name|heap
operator|=
operator|new
name|LlapCacheableBuffer
index|[
name|maxHeapSize
index|]
expr_stmt|;
name|heapSize
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldHeapSize
condition|;
operator|++
name|i
control|)
block|{
name|LlapCacheableBuffer
name|result
init|=
name|oldHeap
index|[
name|i
index|]
decl_stmt|;
name|result
operator|.
name|indexInHeap
operator|=
name|LlapCacheableBuffer
operator|.
name|NOT_IN_CACHE
expr_stmt|;
name|int
name|invalidateResult
init|=
name|result
operator|.
name|invalidate
argument_list|()
decl_stmt|;
if|if
condition|(
name|invalidateResult
operator|!=
name|LlapCacheableBuffer
operator|.
name|INVALIDATE_OK
condition|)
block|{
name|oldHeap
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
comment|// Removed from heap without evicting.
block|}
block|}
block|}
finally|finally
block|{
name|heapLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|LlapCacheableBuffer
name|current
init|=
name|oldTail
decl_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|evicted
operator|+=
name|current
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
name|evictionListener
operator|.
name|notifyEvicted
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|prev
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oldHeapSize
condition|;
operator|++
name|i
control|)
block|{
name|current
operator|=
name|oldHeap
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|evicted
operator|+=
name|current
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
name|evictionListener
operator|.
name|notifyEvicted
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"PURGE: evicted {} from LRFU policy"
argument_list|,
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|evicted
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|evicted
return|;
block|}
specifier|private
specifier|static
name|LlapCacheableBuffer
name|removeFromLocalList
parameter_list|(
name|LlapCacheableBuffer
name|tail
parameter_list|,
name|LlapCacheableBuffer
name|current
parameter_list|)
block|{
if|if
condition|(
name|current
operator|==
name|tail
condition|)
block|{
name|tail
operator|=
name|current
operator|.
name|prev
expr_stmt|;
block|}
else|else
block|{
name|current
operator|.
name|next
operator|.
name|prev
operator|=
name|current
operator|.
name|prev
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|.
name|prev
operator|!=
literal|null
condition|)
block|{
name|current
operator|.
name|prev
operator|.
name|next
operator|=
name|current
operator|.
name|next
expr_stmt|;
block|}
name|current
operator|.
name|prev
operator|=
literal|null
expr_stmt|;
name|current
operator|.
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|tail
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|evictSomeBlocks
parameter_list|(
name|long
name|memoryToReserve
parameter_list|)
block|{
comment|// In normal case, we evict the items from the list.
name|long
name|evicted
init|=
name|evictFromList
argument_list|(
name|memoryToReserve
argument_list|)
decl_stmt|;
if|if
condition|(
name|evicted
operator|>=
name|memoryToReserve
condition|)
block|{
return|return
name|evicted
return|;
block|}
comment|// This should not happen unless we are evicting a lot at once, or buffers are large (so
comment|// there's a small number of buffers and they all live in the heap).
name|long
name|time
init|=
name|timer
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
name|evicted
operator|<
name|memoryToReserve
condition|)
block|{
name|LlapCacheableBuffer
name|buffer
decl_stmt|;
name|heapLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|buffer
operator|=
name|evictFromHeapUnderLock
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|heapLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
return|return
name|evicted
return|;
block|}
name|evicted
operator|+=
name|buffer
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
name|evictionListener
operator|.
name|notifyEvicted
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
return|return
name|evicted
return|;
block|}
specifier|private
name|long
name|evictFromList
parameter_list|(
name|long
name|memoryToReserve
parameter_list|)
block|{
name|long
name|evicted
init|=
literal|0
decl_stmt|;
name|LlapCacheableBuffer
name|nextCandidate
decl_stmt|,
name|firstCandidate
decl_stmt|;
name|listLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// We assume that there are no locked blocks in the list; or if they are, they can be dropped.
comment|// Therefore we always evict one contiguous sequence from the tail. We can find it in one pass,
comment|// splice it out and then finalize the eviction outside of the list lock.
try|try
block|{
name|nextCandidate
operator|=
name|listTail
expr_stmt|;
name|firstCandidate
operator|=
name|listTail
expr_stmt|;
while|while
condition|(
name|evicted
operator|<
name|memoryToReserve
operator|&&
name|nextCandidate
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LlapCacheableBuffer
operator|.
name|INVALIDATE_OK
operator|!=
name|nextCandidate
operator|.
name|invalidate
argument_list|()
condition|)
block|{
comment|// Locked, or invalidated, buffer was in the list - just drop it;
comment|// will be re-added on unlock.
name|LlapCacheableBuffer
name|lockedBuffer
init|=
name|nextCandidate
decl_stmt|;
if|if
condition|(
name|firstCandidate
operator|==
name|nextCandidate
condition|)
block|{
name|firstCandidate
operator|=
name|nextCandidate
operator|.
name|prev
expr_stmt|;
block|}
name|nextCandidate
operator|=
name|nextCandidate
operator|.
name|prev
expr_stmt|;
name|removeFromListUnderLock
argument_list|(
name|lockedBuffer
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Update the state to removed-from-list, so that parallel notifyUnlock doesn't modify us.
name|nextCandidate
operator|.
name|indexInHeap
operator|=
name|LlapCacheableBuffer
operator|.
name|NOT_IN_CACHE
expr_stmt|;
name|evicted
operator|+=
name|nextCandidate
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
name|nextCandidate
operator|=
name|nextCandidate
operator|.
name|prev
expr_stmt|;
block|}
if|if
condition|(
name|firstCandidate
operator|!=
name|nextCandidate
condition|)
block|{
if|if
condition|(
name|nextCandidate
operator|==
literal|null
condition|)
block|{
name|listHead
operator|=
literal|null
expr_stmt|;
name|listTail
operator|=
literal|null
expr_stmt|;
comment|// We have evicted the entire list.
block|}
else|else
block|{
comment|// Splice the section that we have evicted out of the list.
comment|// We have already updated the state above so no need to do that again.
name|removeFromListUnderLockNoStateUpdate
argument_list|(
name|nextCandidate
operator|.
name|next
argument_list|,
name|firstCandidate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|listLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|firstCandidate
operator|!=
name|nextCandidate
condition|)
block|{
name|evictionListener
operator|.
name|notifyEvicted
argument_list|(
name|firstCandidate
argument_list|)
expr_stmt|;
name|firstCandidate
operator|=
name|firstCandidate
operator|.
name|prev
expr_stmt|;
block|}
return|return
name|evicted
return|;
block|}
comment|// Note: rarely called (unless buffers are very large or we evict a lot, or in LFU case).
specifier|private
name|LlapCacheableBuffer
name|evictFromHeapUnderLock
parameter_list|(
name|long
name|time
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|heapSize
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LlapCacheableBuffer
name|result
init|=
name|evictHeapElementUnderLock
argument_list|(
name|time
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
block|}
specifier|private
name|void
name|heapifyUpUnderLock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|,
name|long
name|time
parameter_list|)
block|{
comment|// See heapifyDown comment.
name|int
name|ix
init|=
name|buffer
operator|.
name|indexInHeap
decl_stmt|;
name|double
name|priority
init|=
name|buffer
operator|.
name|priority
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|ix
operator|==
literal|0
condition|)
block|{
break|break;
comment|// Buffer is at the top of the heap.
block|}
name|int
name|parentIx
init|=
operator|(
name|ix
operator|-
literal|1
operator|)
operator|>>>
literal|1
decl_stmt|;
name|LlapCacheableBuffer
name|parent
init|=
name|heap
index|[
name|parentIx
index|]
decl_stmt|;
name|double
name|parentPri
init|=
name|getHeapifyPriority
argument_list|(
name|parent
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|priority
operator|>=
name|parentPri
condition|)
block|{
break|break;
block|}
name|heap
index|[
name|ix
index|]
operator|=
name|parent
expr_stmt|;
name|parent
operator|.
name|indexInHeap
operator|=
name|ix
expr_stmt|;
name|ix
operator|=
name|parentIx
expr_stmt|;
block|}
name|buffer
operator|.
name|indexInHeap
operator|=
name|ix
expr_stmt|;
name|heap
index|[
name|ix
index|]
operator|=
name|buffer
expr_stmt|;
block|}
specifier|private
name|LlapCacheableBuffer
name|evictHeapElementUnderLock
parameter_list|(
name|long
name|time
parameter_list|,
name|int
name|ix
parameter_list|)
block|{
name|LlapCacheableBuffer
name|result
init|=
name|heap
index|[
name|ix
index|]
decl_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|CACHE_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|CACHE_LOGGER
operator|.
name|trace
argument_list|(
literal|"Evicting {} at {}"
argument_list|,
name|result
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|indexInHeap
operator|=
name|LlapCacheableBuffer
operator|.
name|NOT_IN_CACHE
expr_stmt|;
operator|--
name|heapSize
expr_stmt|;
name|int
name|invalidateResult
init|=
name|result
operator|.
name|invalidate
argument_list|()
decl_stmt|;
name|boolean
name|canEvict
init|=
name|invalidateResult
operator|==
name|LlapCacheableBuffer
operator|.
name|INVALIDATE_OK
decl_stmt|;
if|if
condition|(
name|heapSize
operator|>
literal|0
condition|)
block|{
name|LlapCacheableBuffer
name|newRoot
init|=
name|heap
index|[
name|heapSize
index|]
decl_stmt|;
name|newRoot
operator|.
name|indexInHeap
operator|=
name|ix
expr_stmt|;
if|if
condition|(
name|newRoot
operator|.
name|lastUpdate
operator|!=
name|time
condition|)
block|{
name|newRoot
operator|.
name|priority
operator|=
name|expirePriority
argument_list|(
name|time
argument_list|,
name|newRoot
operator|.
name|lastUpdate
argument_list|,
name|newRoot
operator|.
name|priority
argument_list|)
expr_stmt|;
name|newRoot
operator|.
name|lastUpdate
operator|=
name|time
expr_stmt|;
block|}
name|heapifyDownUnderLock
argument_list|(
name|newRoot
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
comment|// Otherwise we just removed a locked/invalid item from heap; we continue.
return|return
name|canEvict
condition|?
name|result
else|:
literal|null
return|;
block|}
specifier|private
name|void
name|heapifyDownUnderLock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|,
name|long
name|time
parameter_list|)
block|{
comment|// Relative positions of the blocks don't change over time; priorities we expire can only
comment|// decrease; we only have one block that could have broken heap rule and we always move it
comment|// down; therefore, we can update priorities of other blocks as we go for part of the heap -
comment|// we correct any discrepancy w/the parent after expiring priority, and any block we expire
comment|// the priority for already has lower priority than that of its children.
name|int
name|ix
init|=
name|buffer
operator|.
name|indexInHeap
decl_stmt|;
name|double
name|priority
init|=
name|buffer
operator|.
name|priority
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|newIx
init|=
name|moveMinChildUp
argument_list|(
name|ix
argument_list|,
name|time
argument_list|,
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|newIx
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|ix
operator|=
name|newIx
expr_stmt|;
block|}
name|buffer
operator|.
name|indexInHeap
operator|=
name|ix
expr_stmt|;
name|heap
index|[
name|ix
index|]
operator|=
name|buffer
expr_stmt|;
block|}
comment|/**    * Moves the minimum child of targetPos block up to targetPos; optionally compares priorities    * and terminates if targetPos element has lesser value than either of its children.    * @return the index of the child that was moved up; -1 if nothing was moved due to absence    *         of the children, or a failed priority check.    */
specifier|private
name|int
name|moveMinChildUp
parameter_list|(
name|int
name|targetPos
parameter_list|,
name|long
name|time
parameter_list|,
name|double
name|comparePri
parameter_list|)
block|{
name|int
name|leftIx
init|=
operator|(
name|targetPos
operator|<<
literal|1
operator|)
operator|+
literal|1
decl_stmt|,
name|rightIx
init|=
name|leftIx
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|leftIx
operator|>=
name|heapSize
condition|)
block|{
return|return
operator|-
literal|1
return|;
comment|// Buffer is at the leaf node.
block|}
name|LlapCacheableBuffer
name|left
init|=
name|heap
index|[
name|leftIx
index|]
decl_stmt|,
name|right
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rightIx
operator|<
name|heapSize
condition|)
block|{
name|right
operator|=
name|heap
index|[
name|rightIx
index|]
expr_stmt|;
block|}
name|double
name|leftPri
init|=
name|getHeapifyPriority
argument_list|(
name|left
argument_list|,
name|time
argument_list|)
decl_stmt|,
name|rightPri
init|=
name|getHeapifyPriority
argument_list|(
name|right
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparePri
operator|>=
literal|0
operator|&&
name|comparePri
operator|<=
name|leftPri
operator|&&
name|comparePri
operator|<=
name|rightPri
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|leftPri
operator|<=
name|rightPri
condition|)
block|{
comment|// prefer left, cause right might be missing
name|heap
index|[
name|targetPos
index|]
operator|=
name|left
expr_stmt|;
name|left
operator|.
name|indexInHeap
operator|=
name|targetPos
expr_stmt|;
return|return
name|leftIx
return|;
block|}
else|else
block|{
name|heap
index|[
name|targetPos
index|]
operator|=
name|right
expr_stmt|;
name|right
operator|.
name|indexInHeap
operator|=
name|targetPos
expr_stmt|;
return|return
name|rightIx
return|;
block|}
block|}
specifier|private
name|double
name|getHeapifyPriority
parameter_list|(
name|LlapCacheableBuffer
name|buf
parameter_list|,
name|long
name|time
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
block|{
return|return
name|Double
operator|.
name|MAX_VALUE
return|;
block|}
if|if
condition|(
name|buf
operator|.
name|lastUpdate
operator|!=
name|time
operator|&&
name|time
operator|>=
literal|0
condition|)
block|{
name|buf
operator|.
name|priority
operator|=
name|expirePriority
argument_list|(
name|time
argument_list|,
name|buf
operator|.
name|lastUpdate
argument_list|,
name|buf
operator|.
name|priority
argument_list|)
expr_stmt|;
name|buf
operator|.
name|lastUpdate
operator|=
name|time
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|priority
return|;
block|}
specifier|private
name|void
name|removeFromListAndUnlock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|buffer
operator|.
name|indexInHeap
operator|!=
name|LlapCacheableBuffer
operator|.
name|IN_LIST
condition|)
block|{
return|return;
block|}
name|removeFromListUnderLock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|listLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeFromListUnderLock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|buffer
operator|.
name|indexInHeap
operator|=
name|LlapCacheableBuffer
operator|.
name|NOT_IN_CACHE
expr_stmt|;
name|boolean
name|isTail
init|=
name|buffer
operator|==
name|listTail
decl_stmt|,
name|isHead
init|=
name|buffer
operator|==
name|listHead
decl_stmt|;
if|if
condition|(
operator|(
name|isTail
operator|!=
operator|(
name|buffer
operator|.
name|next
operator|==
literal|null
operator|)
operator|)
operator|||
operator|(
name|isHead
operator|!=
operator|(
name|buffer
operator|.
name|prev
operator|==
literal|null
operator|)
operator|)
condition|)
block|{
name|debugDumpListOnError
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"LRFU list is corrupted."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isTail
condition|)
block|{
name|listTail
operator|=
name|buffer
operator|.
name|prev
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|next
operator|.
name|prev
operator|=
name|buffer
operator|.
name|prev
expr_stmt|;
block|}
if|if
condition|(
name|isHead
condition|)
block|{
name|listHead
operator|=
name|buffer
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|prev
operator|.
name|next
operator|=
name|buffer
operator|.
name|next
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeFromListUnderLockNoStateUpdate
parameter_list|(
name|LlapCacheableBuffer
name|from
parameter_list|,
name|LlapCacheableBuffer
name|to
parameter_list|)
block|{
name|boolean
name|isToTail
init|=
name|to
operator|==
name|listTail
decl_stmt|,
name|isFromHead
init|=
name|from
operator|==
name|listHead
decl_stmt|;
if|if
condition|(
operator|(
name|isToTail
operator|!=
operator|(
name|to
operator|.
name|next
operator|==
literal|null
operator|)
operator|)
operator|||
operator|(
name|isFromHead
operator|!=
operator|(
name|from
operator|.
name|prev
operator|==
literal|null
operator|)
operator|)
condition|)
block|{
name|debugDumpListOnError
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"LRFU list is corrupted."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isToTail
condition|)
block|{
name|listTail
operator|=
name|from
operator|.
name|prev
expr_stmt|;
block|}
else|else
block|{
name|to
operator|.
name|next
operator|.
name|prev
operator|=
name|from
operator|.
name|prev
expr_stmt|;
block|}
if|if
condition|(
name|isFromHead
condition|)
block|{
name|listHead
operator|=
name|to
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
name|from
operator|.
name|prev
operator|.
name|next
operator|=
name|to
operator|.
name|next
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|debugDumpListOnError
parameter_list|(
name|LlapCacheableBuffer
modifier|...
name|buffers
parameter_list|)
block|{
comment|// Hopefully this will be helpful in case of NPEs.
name|StringBuilder
name|listDump
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Invalid list removal. List: "
argument_list|)
decl_stmt|;
try|try
block|{
name|dumpList
argument_list|(
name|listDump
argument_list|,
name|listHead
argument_list|,
name|listTail
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|LlapCacheableBuffer
name|buffer
range|:
name|buffers
control|)
block|{
name|listDump
operator|.
name|append
argument_list|(
literal|"; list from the buffer #"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|" being removed: "
argument_list|)
expr_stmt|;
name|dumpList
argument_list|(
name|listDump
argument_list|,
name|buffer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Error dumping the lists on error"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|listDump
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|debugDumpHeap
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"List: "
argument_list|)
decl_stmt|;
name|dumpList
argument_list|(
name|result
argument_list|,
name|listHead
argument_list|,
name|listTail
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"\nHeap:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|heapSize
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"<empty>\n"
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|int
name|levels
init|=
literal|32
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|heapSize
argument_list|)
decl_stmt|;
name|int
name|ix
init|=
literal|0
decl_stmt|;
name|int
name|spacesCount
init|=
name|heap
index|[
literal|0
index|]
operator|.
name|toStringForCache
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|3
decl_stmt|;
name|String
name|full
init|=
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|" "
argument_list|,
name|spacesCount
argument_list|)
decl_stmt|,
name|half
init|=
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|" "
argument_list|,
name|spacesCount
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|maxWidth
init|=
literal|1
operator|<<
operator|(
name|levels
operator|-
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|levels
condition|;
operator|++
name|i
control|)
block|{
name|int
name|width
init|=
literal|1
operator|<<
name|i
decl_stmt|;
name|int
name|middleGap
init|=
operator|(
name|maxWidth
operator|-
name|width
operator|)
operator|/
name|width
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
operator|(
name|middleGap
operator|>>>
literal|1
operator|)
condition|;
operator|++
name|j
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|full
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|middleGap
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|half
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|width
operator|&&
name|ix
operator|<
name|heapSize
condition|;
operator|++
name|j
operator|,
operator|++
name|ix
control|)
block|{
if|if
condition|(
name|j
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|middleGap
condition|;
operator|++
name|k
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|full
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|middleGap
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|j
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|heap
index|[
name|ix
index|]
operator|.
name|toStringForCache
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|j
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|dumpList
parameter_list|(
name|StringBuilder
name|result
parameter_list|,
name|LlapCacheableBuffer
name|listHeadLocal
parameter_list|,
name|LlapCacheableBuffer
name|listTailLocal
parameter_list|)
block|{
if|if
condition|(
name|listHeadLocal
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"<empty>"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LlapCacheableBuffer
name|listItem
init|=
name|listHeadLocal
decl_stmt|;
while|while
condition|(
name|listItem
operator|.
name|prev
operator|!=
literal|null
condition|)
block|{
name|listItem
operator|=
name|listItem
operator|.
name|prev
expr_stmt|;
comment|// To detect incorrect lists.
block|}
while|while
condition|(
name|listItem
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|listItem
operator|.
name|toStringForCache
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|listItem
operator|==
name|listTailLocal
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"(tail)"
argument_list|)
expr_stmt|;
comment|// To detect incorrect lists.
block|}
if|if
condition|(
name|listItem
operator|==
name|listHeadLocal
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"(head)"
argument_list|)
expr_stmt|;
comment|// To detect incorrect lists.
block|}
name|result
operator|.
name|append
argument_list|(
literal|" -> "
argument_list|)
expr_stmt|;
name|listItem
operator|=
name|listItem
operator|.
name|next
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|debugDumpShort
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|long
index|[]
name|metricData
init|=
name|metrics
operator|.
name|getUsageStats
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nLRFU eviction list: "
argument_list|)
operator|.
name|append
argument_list|(
name|metricData
index|[
name|PolicyMetrics
operator|.
name|LISTSIZE
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|" items"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nLRFU eviction heap: "
argument_list|)
operator|.
name|append
argument_list|(
name|heapSize
argument_list|)
operator|.
name|append
argument_list|(
literal|" items (of max "
argument_list|)
operator|.
name|append
argument_list|(
name|maxHeapSize
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nLRFU data on heap: "
argument_list|)
operator|.
name|append
argument_list|(
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|metricData
index|[
name|PolicyMetrics
operator|.
name|DATAONHEAP
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nLRFU metadata on heap: "
argument_list|)
operator|.
name|append
argument_list|(
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|metricData
index|[
name|PolicyMetrics
operator|.
name|METAONHEAP
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nLRFU data on eviction list: "
argument_list|)
operator|.
name|append
argument_list|(
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|metricData
index|[
name|PolicyMetrics
operator|.
name|DATAONLIST
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nLRFU metadata on eviction list: "
argument_list|)
operator|.
name|append
argument_list|(
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|metricData
index|[
name|PolicyMetrics
operator|.
name|METAONLIST
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nLRFU data locked: "
argument_list|)
operator|.
name|append
argument_list|(
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|metricData
index|[
name|PolicyMetrics
operator|.
name|LOCKEDDATA
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\nLRFU metadata locked: "
argument_list|)
operator|.
name|append
argument_list|(
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|metricData
index|[
name|PolicyMetrics
operator|.
name|LOCKEDMETA
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Metrics Information for LRFU specific policy information.    * This enumeration is used by the @code PolicyMetrics instance to    * define and describe the metrics.    */
specifier|private
enum|enum
name|PolicyInformation
implements|implements
name|MetricsInfo
block|{
name|PolicyMetrics
argument_list|(
literal|"LRFU cache policy based metrics"
argument_list|)
block|,
name|DataOnHeap
argument_list|(
literal|"Amount of bytes used for data on min-heap"
argument_list|)
block|,
name|DataOnList
argument_list|(
literal|"Amount of bytes used for data on eviction short list"
argument_list|)
block|,
name|MetaOnHeap
argument_list|(
literal|"Amount of bytes used for meta data on min-heap"
argument_list|)
block|,
name|MetaOnList
argument_list|(
literal|"Amount of bytes used for meta data on eviction short list"
argument_list|)
block|,
name|DataLocked
argument_list|(
literal|"Amount of locked data in bytes (in use)"
argument_list|)
block|,
name|MetaLocked
argument_list|(
literal|"Amount of locked meta data in bytes (in use)"
argument_list|)
block|,
name|HeapSize
argument_list|(
literal|"Number of buffers on the min-heap"
argument_list|)
block|,
name|HeapSizeMax
argument_list|(
literal|"Capacity (number of buffers) of the min-heap"
argument_list|)
block|,
name|ListSize
argument_list|(
literal|"Number of buffers on the eviction short list"
argument_list|)
block|,
name|TotalData
argument_list|(
literal|"Total amount of bytes, used for data"
argument_list|)
block|,
name|TotalMeta
argument_list|(
literal|"Total amount of bytes, used for meta data"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
comment|// metric explaination
comment|/**      * Creates a new enum value.      *      * @param description The explaination of the metric      */
name|PolicyInformation
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|description
return|;
block|}
block|}
comment|/**    * Metrics provider for the LRFU cache policy.    * An instance of this class is providing JMX (through haddoop metrics)    * statistics for the LRFU cache policy for monitoring.    */
annotation|@
name|Metrics
argument_list|(
name|about
operator|=
literal|"LRFU Cache Policy Metrics"
argument_list|,
name|context
operator|=
literal|"cache"
argument_list|)
specifier|private
class|class
name|PolicyMetrics
implements|implements
name|MetricsSource
block|{
specifier|public
specifier|static
specifier|final
name|int
name|DATAONHEAP
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DATAONLIST
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|METAONHEAP
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|METAONLIST
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LISTSIZE
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LOCKEDDATA
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LOCKEDMETA
init|=
literal|6
decl_stmt|;
specifier|private
specifier|final
name|String
name|session
decl_stmt|;
comment|// identifier for the LLAP daemon
comment|/**      * Creates a new metrics producer.      *      * @param session The LLAP daemon identifier      */
name|PolicyMetrics
parameter_list|(
name|String
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
comment|/**      * Helper to get some basic LRFU usage statistics.      * This method returns a long array with the following content:      * - amount of data (bytes) on min-heap      * - amount of data (bytes) on eviction short list      * - amount of metadata (bytes) on min-heap      * - amount of metadata (bytes) on eviction short list      * - size of the eviction short list      * - amount of locked bytes for data      * - amount of locked bytes for metadata      *      * @return long array with LRFU stats      */
specifier|public
name|long
index|[]
name|getUsageStats
parameter_list|()
block|{
name|long
name|dataOnHeap
init|=
literal|0L
decl_stmt|;
comment|// all non-meta related buffers on min-heap
name|long
name|dataOnList
init|=
literal|0L
decl_stmt|;
comment|// all non-meta related buffers on eviction list
name|long
name|metaOnHeap
init|=
literal|0L
decl_stmt|;
comment|// meta data buffers on min-heap
name|long
name|metaOnList
init|=
literal|0L
decl_stmt|;
comment|// meta data buffers on eviction list
name|long
name|listSize
init|=
literal|0L
decl_stmt|;
comment|// number of entries on eviction list
name|long
name|lockedData
init|=
literal|0L
decl_stmt|;
comment|// number of bytes in locked data buffers
name|long
name|lockedMeta
init|=
literal|0L
decl_stmt|;
comment|// number of bytes in locked metadata buffers
comment|// aggregate values on the heap
name|heapLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|heapIdx
init|=
literal|0
init|;
name|heapIdx
operator|<
name|heapSize
condition|;
operator|++
name|heapIdx
control|)
block|{
name|LlapCacheableBuffer
name|buff
init|=
name|heap
index|[
name|heapIdx
index|]
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|buff
condition|)
block|{
if|if
condition|(
name|buff
operator|instanceof
name|LlapMetadataBuffer
condition|)
block|{
name|metaOnHeap
operator|+=
name|buff
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
if|if
condition|(
name|buff
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|lockedMeta
operator|+=
name|buff
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|dataOnHeap
operator|+=
name|buff
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
if|if
condition|(
name|buff
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|lockedData
operator|+=
name|buff
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|heapLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// aggregate values on the evicition short list
try|try
block|{
name|listLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|LlapCacheableBuffer
name|scan
init|=
name|listHead
decl_stmt|;
while|while
condition|(
literal|null
operator|!=
name|scan
condition|)
block|{
if|if
condition|(
name|scan
operator|instanceof
name|LlapMetadataBuffer
condition|)
block|{
name|metaOnList
operator|+=
name|scan
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
if|if
condition|(
name|scan
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|lockedMeta
operator|+=
name|scan
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|dataOnList
operator|+=
name|scan
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
if|if
condition|(
name|scan
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|lockedData
operator|+=
name|scan
operator|.
name|getMemoryUsage
argument_list|()
expr_stmt|;
block|}
block|}
operator|++
name|listSize
expr_stmt|;
name|scan
operator|=
name|scan
operator|.
name|next
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|listLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|long
index|[]
block|{
name|dataOnHeap
block|,
name|dataOnList
block|,
name|metaOnHeap
block|,
name|metaOnList
block|,
name|listSize
block|,
name|lockedData
block|,
name|lockedMeta
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|collector
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|long
index|[]
name|usageStats
init|=
name|getUsageStats
argument_list|()
decl_stmt|;
comment|// start a new record
name|MetricsRecordBuilder
name|mrb
init|=
name|collector
operator|.
name|addRecord
argument_list|(
name|PolicyInformation
operator|.
name|PolicyMetrics
argument_list|)
operator|.
name|setContext
argument_list|(
literal|"cache"
argument_list|)
operator|.
name|tag
argument_list|(
name|MsInfo
operator|.
name|ProcessName
argument_list|,
name|MetricsUtils
operator|.
name|METRICS_PROCESS_NAME
argument_list|)
operator|.
name|tag
argument_list|(
name|MsInfo
operator|.
name|SessionId
argument_list|,
name|session
argument_list|)
decl_stmt|;
comment|// add the values to the new record
name|mrb
operator|.
name|addCounter
argument_list|(
name|PolicyInformation
operator|.
name|DataOnHeap
argument_list|,
name|usageStats
index|[
name|DATAONHEAP
index|]
argument_list|)
operator|.
name|addCounter
argument_list|(
name|PolicyInformation
operator|.
name|DataOnList
argument_list|,
name|usageStats
index|[
name|DATAONLIST
index|]
argument_list|)
operator|.
name|addCounter
argument_list|(
name|PolicyInformation
operator|.
name|MetaOnHeap
argument_list|,
name|usageStats
index|[
name|METAONHEAP
index|]
argument_list|)
operator|.
name|addCounter
argument_list|(
name|PolicyInformation
operator|.
name|MetaOnList
argument_list|,
name|usageStats
index|[
name|METAONLIST
index|]
argument_list|)
operator|.
name|addCounter
argument_list|(
name|PolicyInformation
operator|.
name|DataLocked
argument_list|,
name|usageStats
index|[
name|LOCKEDDATA
index|]
argument_list|)
operator|.
name|addCounter
argument_list|(
name|PolicyInformation
operator|.
name|MetaLocked
argument_list|,
name|usageStats
index|[
name|LOCKEDMETA
index|]
argument_list|)
operator|.
name|addCounter
argument_list|(
name|PolicyInformation
operator|.
name|HeapSize
argument_list|,
name|heapSize
argument_list|)
operator|.
name|addCounter
argument_list|(
name|PolicyInformation
operator|.
name|HeapSizeMax
argument_list|,
name|maxHeapSize
argument_list|)
operator|.
name|addCounter
argument_list|(
name|PolicyInformation
operator|.
name|ListSize
argument_list|,
name|usageStats
index|[
name|LISTSIZE
index|]
argument_list|)
operator|.
name|addCounter
argument_list|(
name|PolicyInformation
operator|.
name|TotalData
argument_list|,
name|usageStats
index|[
name|DATAONHEAP
index|]
operator|+
name|usageStats
index|[
name|DATAONLIST
index|]
argument_list|)
operator|.
name|addCounter
argument_list|(
name|PolicyInformation
operator|.
name|TotalMeta
argument_list|,
name|usageStats
index|[
name|METAONHEAP
index|]
operator|+
name|usageStats
index|[
name|METAONLIST
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

