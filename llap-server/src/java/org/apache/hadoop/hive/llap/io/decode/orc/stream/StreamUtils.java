begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|decode
operator|.
name|orc
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|EncodedColumnBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|cache
operator|.
name|LlapMemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|InStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|PositionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReaderUtils
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|StreamUtils
block|{
specifier|public
specifier|static
name|InStream
name|createInStream
parameter_list|(
name|String
name|streamName
parameter_list|,
name|String
name|fileName
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|EncodedColumnBatch
operator|.
name|StreamBuffer
name|streamBuffer
parameter_list|,
name|int
name|compressionBufferIdx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|streamBuffer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|numBuffers
init|=
name|streamBuffer
operator|.
name|cacheBuffers
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiskRange
argument_list|>
name|input
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numBuffers
argument_list|)
decl_stmt|;
name|int
name|totalLength
init|=
literal|0
decl_stmt|;
comment|// add the stream buffer (uncompressed) corresponding to the specified compression buffer index
name|LlapMemoryBuffer
name|lmb
init|=
name|streamBuffer
operator|.
name|cacheBuffers
operator|.
name|get
argument_list|(
name|compressionBufferIdx
argument_list|)
decl_stmt|;
name|input
operator|.
name|add
argument_list|(
operator|new
name|RecordReaderImpl
operator|.
name|CacheChunk
argument_list|(
name|lmb
argument_list|,
name|lmb
operator|.
name|byteBuffer
operator|.
name|position
argument_list|()
argument_list|,
name|lmb
operator|.
name|byteBuffer
operator|.
name|limit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|totalLength
operator|+=
name|lmb
operator|.
name|byteBuffer
operator|.
name|remaining
argument_list|()
expr_stmt|;
comment|// also add the next stream buffer as row group groups may span compression buffers
if|if
condition|(
name|compressionBufferIdx
operator|!=
name|streamBuffer
operator|.
name|cacheBuffers
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|lmb
operator|=
name|streamBuffer
operator|.
name|cacheBuffers
operator|.
name|get
argument_list|(
name|compressionBufferIdx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|input
operator|.
name|add
argument_list|(
operator|new
name|RecordReaderImpl
operator|.
name|CacheChunk
argument_list|(
name|lmb
argument_list|,
name|lmb
operator|.
name|byteBuffer
operator|.
name|position
argument_list|()
argument_list|,
name|lmb
operator|.
name|byteBuffer
operator|.
name|limit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|totalLength
operator|+=
name|lmb
operator|.
name|byteBuffer
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
return|return
name|InStream
operator|.
name|create
argument_list|(
name|fileName
argument_list|,
name|streamName
argument_list|,
name|input
argument_list|,
name|totalLength
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InStream
name|createInStream
parameter_list|(
name|String
name|streamName
parameter_list|,
name|String
name|fileName
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|EncodedColumnBatch
operator|.
name|StreamBuffer
name|streamBuffer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|streamBuffer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|numBuffers
init|=
name|streamBuffer
operator|.
name|cacheBuffers
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DiskRange
argument_list|>
name|input
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numBuffers
argument_list|)
decl_stmt|;
name|int
name|totalLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBuffers
condition|;
name|i
operator|++
control|)
block|{
name|LlapMemoryBuffer
name|lmb
init|=
name|streamBuffer
operator|.
name|cacheBuffers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|input
operator|.
name|add
argument_list|(
operator|new
name|RecordReaderImpl
operator|.
name|CacheChunk
argument_list|(
name|lmb
argument_list|,
literal|0
argument_list|,
name|lmb
operator|.
name|byteBuffer
operator|.
name|limit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|totalLength
operator|+=
name|lmb
operator|.
name|byteBuffer
operator|.
name|limit
argument_list|()
expr_stmt|;
block|}
return|return
name|InStream
operator|.
name|create
argument_list|(
name|fileName
argument_list|,
name|streamName
argument_list|,
name|input
argument_list|,
name|totalLength
argument_list|,
name|codec
argument_list|,
name|bufferSize
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PositionProvider
name|getPositionProvider
parameter_list|(
name|OrcProto
operator|.
name|RowIndexEntry
name|rowIndex
parameter_list|)
block|{
name|PositionProvider
name|positionProvider
init|=
operator|new
name|RecordReaderImpl
operator|.
name|PositionProviderImpl
argument_list|(
name|rowIndex
argument_list|)
decl_stmt|;
return|return
name|positionProvider
return|;
block|}
comment|/**    * Returns compression buffer index within stream for the specified row group index. In other    * words, it tells which compression buffer the specified row group belong. If row group spans    * compression buffers then index of both compression buffers are return. If row group is in last    * compression buffer then it never return two indices. For example:    * |---------------CB0-------------|----------------CB1---------------|------------CB2-----------|    * |--RG0--|--RG1--|--RG2--|--RG3--|--RG4--|--RG5--|--RG6--|--RG7--|--RG8--|--RG9--|--RG10--|RG11|    *    * Input: RG1  Output: [0, -1]    * Input: RG3  Output: [0, -1]    * Input: RG8  Output: [1,  2]    * Input: RG11 Output: [2, -1]    *    * @param rgIdx - row group index    * @param rowIndex - row index entries    * @param columnEncoding - column encoding    * @param colType - column type    * @param streamKind - stream kind    * @param hasNull - if present stream is present    * @param isCompressed - if compressed    * @return return int array with 2 elements. Both values will be non-negative only when row group    * spans compression buffer.    */
specifier|public
specifier|static
name|int
index|[]
name|getCompressionBufferIndex
parameter_list|(
name|int
name|rgIdx
parameter_list|,
name|OrcProto
operator|.
name|RowIndex
name|rowIndex
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|columnEncoding
parameter_list|,
name|OrcProto
operator|.
name|Type
name|colType
parameter_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
name|streamKind
parameter_list|,
name|boolean
name|hasNull
parameter_list|,
name|boolean
name|isCompressed
parameter_list|)
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|result
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// get total number of row group entries and see if the specified rgIdx is the last entry
name|int
name|numRgs
init|=
name|rowIndex
operator|.
name|getEntryCount
argument_list|()
decl_stmt|;
name|int
name|nextRgIdx
init|=
name|rgIdx
operator|==
name|numRgs
operator|-
literal|1
condition|?
name|rgIdx
else|:
name|rgIdx
operator|+
literal|1
decl_stmt|;
name|OrcProto
operator|.
name|RowIndexEntry
name|rowIndexEntry
init|=
name|rowIndex
operator|.
name|getEntry
argument_list|(
name|rgIdx
argument_list|)
decl_stmt|;
name|OrcProto
operator|.
name|RowIndexEntry
name|nextRowIndexEntry
init|=
name|rowIndex
operator|.
name|getEntry
argument_list|(
name|nextRgIdx
argument_list|)
decl_stmt|;
comment|// get the start index in position list for the specified stream
name|int
name|indexIx
init|=
name|RecordReaderUtils
operator|.
name|getIndexPosition
argument_list|(
name|columnEncoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|colType
operator|.
name|getKind
argument_list|()
argument_list|,
name|streamKind
argument_list|,
name|isCompressed
argument_list|,
name|hasNull
argument_list|)
decl_stmt|;
comment|// start offset of compression buffer corresponding to current row index
name|long
name|cbStartOffset
init|=
name|rowIndexEntry
operator|.
name|getPositions
argument_list|(
name|indexIx
argument_list|)
decl_stmt|;
comment|// start offset of compression buffer corresponding to next row index
name|long
name|nextCbStartOffset
init|=
name|nextRowIndexEntry
operator|.
name|getPositions
argument_list|(
name|indexIx
argument_list|)
decl_stmt|;
comment|// start offset of compression buffer corresponding to last row index
name|long
name|lastCbStartOffset
init|=
name|rowIndex
operator|.
name|getEntry
argument_list|(
name|numRgs
operator|-
literal|1
argument_list|)
operator|.
name|getPositions
argument_list|(
name|indexIx
argument_list|)
decl_stmt|;
name|boolean
name|lastCompressionBuffer
init|=
literal|false
decl_stmt|;
name|int
name|cbIdx
init|=
literal|0
decl_stmt|;
name|long
name|previosStartOffset
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|foundCompressionBufferIdx
init|=
literal|false
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|RowIndexEntry
name|entry
range|:
name|rowIndex
operator|.
name|getEntryList
argument_list|()
control|)
block|{
comment|// initialze previous compression buffer start offset
if|if
condition|(
name|previosStartOffset
operator|==
operator|-
literal|1
condition|)
block|{
name|previosStartOffset
operator|=
name|entry
operator|.
name|getPositions
argument_list|(
name|indexIx
argument_list|)
expr_stmt|;
block|}
comment|// get start offset of current row group index
name|long
name|currentStartOffset
init|=
name|entry
operator|.
name|getPositions
argument_list|(
name|indexIx
argument_list|)
decl_stmt|;
comment|// if the start offset of compression buffer corresponding  to current row group index does
comment|// not match with the one specified then move on to next compression buffer
if|if
condition|(
name|currentStartOffset
operator|!=
name|previosStartOffset
condition|)
block|{
name|cbIdx
operator|++
expr_stmt|;
name|previosStartOffset
operator|=
name|currentStartOffset
expr_stmt|;
block|}
comment|// if it matches, assign the compression buffer index within the stream to result
if|if
condition|(
name|currentStartOffset
operator|==
name|cbStartOffset
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|cbIdx
expr_stmt|;
name|foundCompressionBufferIdx
operator|=
literal|true
expr_stmt|;
block|}
comment|// check if the current compression buffer is the last one in the stream
if|if
condition|(
name|currentStartOffset
operator|==
name|lastCbStartOffset
condition|)
block|{
name|lastCompressionBuffer
operator|=
literal|true
expr_stmt|;
block|}
comment|// if the current compression buffer offset does not match the next compression buffer offset
comment|// then it means the current row group is the last one in the compression buffer. In this
comment|// case, the current row group may span compression buffers, so include the next compression
comment|// buffer as well
if|if
condition|(
operator|(
name|cbStartOffset
operator|!=
name|nextCbStartOffset
operator|)
operator|&&
operator|!
name|lastCompressionBuffer
condition|)
block|{
name|result
index|[
literal|1
index|]
operator|=
name|cbIdx
operator|+
literal|1
expr_stmt|;
block|}
comment|// we are done finding the compression buffer index
if|if
condition|(
name|foundCompressionBufferIdx
condition|)
block|{
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

