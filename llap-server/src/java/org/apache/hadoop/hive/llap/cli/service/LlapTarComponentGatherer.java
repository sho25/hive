begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Gathers all the jar files necessary to start llap.  */
end_comment

begin_class
class|class
name|LlapTarComponentGatherer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapTarComponentGatherer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//using Callable<Void> instead of Runnable to be able to throw Exception
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LlapServiceCommandLine
name|cl
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|Properties
name|directProperties
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|rawFs
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|final
name|Path
name|libDir
decl_stmt|;
specifier|private
specifier|final
name|Path
name|tezDir
decl_stmt|;
specifier|private
specifier|final
name|Path
name|udfDir
decl_stmt|;
specifier|private
specifier|final
name|Path
name|confDir
decl_stmt|;
name|LlapTarComponentGatherer
parameter_list|(
name|LlapServiceCommandLine
name|cl
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|Properties
name|directProperties
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|FileSystem
name|rawFs
parameter_list|,
name|ExecutorService
name|executor
parameter_list|,
name|Path
name|tmpDir
parameter_list|)
block|{
name|this
operator|.
name|cl
operator|=
name|cl
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|directProperties
operator|=
name|directProperties
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|rawFs
operator|=
name|rawFs
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|libDir
operator|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
literal|"lib"
argument_list|)
expr_stmt|;
name|this
operator|.
name|tezDir
operator|=
operator|new
name|Path
argument_list|(
name|libDir
argument_list|,
literal|"tez"
argument_list|)
expr_stmt|;
name|this
operator|.
name|udfDir
operator|=
operator|new
name|Path
argument_list|(
name|libDir
argument_list|,
literal|"udfs"
argument_list|)
expr_stmt|;
name|this
operator|.
name|confDir
operator|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
literal|"conf"
argument_list|)
expr_stmt|;
block|}
name|void
name|createDirs
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|rawFs
operator|.
name|mkdirs
argument_list|(
name|tezDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"mkdirs for "
operator|+
name|tezDir
operator|+
literal|" returned false"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rawFs
operator|.
name|mkdirs
argument_list|(
name|udfDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"mkdirs for "
operator|+
name|udfDir
operator|+
literal|" returned false"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rawFs
operator|.
name|mkdirs
argument_list|(
name|confDir
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"mkdirs for "
operator|+
name|confDir
operator|+
literal|" returned false"
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|submitTarComponentGatherTasks
parameter_list|()
block|{
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|asyncRunner
init|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|Void
argument_list|>
argument_list|(
name|executor
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|put
argument_list|(
literal|"downloadTezJars"
argument_list|,
name|asyncRunner
operator|.
name|submit
argument_list|(
operator|new
name|AsyncTaskDownloadTezJars
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|rawFs
argument_list|,
name|libDir
argument_list|,
name|tezDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tasks
operator|.
name|put
argument_list|(
literal|"copyLocalJars"
argument_list|,
name|asyncRunner
operator|.
name|submit
argument_list|(
operator|new
name|AsyncTaskCopyLocalJars
argument_list|(
name|rawFs
argument_list|,
name|libDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tasks
operator|.
name|put
argument_list|(
literal|"copyAuxJars"
argument_list|,
name|asyncRunner
operator|.
name|submit
argument_list|(
operator|new
name|AsyncTaskCopyAuxJars
argument_list|(
name|cl
argument_list|,
name|conf
argument_list|,
name|rawFs
argument_list|,
name|libDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tasks
operator|.
name|put
argument_list|(
literal|"createUdfFile"
argument_list|,
name|asyncRunner
operator|.
name|submit
argument_list|(
operator|new
name|AsyncTaskCreateUdfFile
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|rawFs
argument_list|,
name|udfDir
argument_list|,
name|confDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tasks
operator|.
name|put
argument_list|(
literal|"copyConfigs"
argument_list|,
name|asyncRunner
operator|.
name|submit
argument_list|(
operator|new
name|AsyncTaskCopyConfigs
argument_list|(
name|cl
argument_list|,
name|conf
argument_list|,
name|directProperties
argument_list|,
name|rawFs
argument_list|,
name|confDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|waitForFinish
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|task
range|:
name|tasks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|t1
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|task
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|task
operator|.
name|getKey
argument_list|()
operator|+
literal|" waited for "
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|" ns"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

