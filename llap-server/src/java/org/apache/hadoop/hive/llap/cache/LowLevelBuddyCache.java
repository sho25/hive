begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|cache
operator|.
name|LlapMemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|cache
operator|.
name|LowLevelCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_class
specifier|public
class|class
name|LowLevelBuddyCache
implements|implements
name|LowLevelCache
implements|,
name|EvictionListener
block|{
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|arena
argument_list|>
name|arenas
decl_stmt|;
specifier|private
name|AtomicInteger
name|newEvictions
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Thread
name|cleanupThread
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|FileCache
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|FileCache
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LowLevelCachePolicy
name|cachePolicy
decl_stmt|;
comment|// Config settings
specifier|private
specifier|final
name|int
name|minAllocLog2
decl_stmt|,
name|maxAllocLog2
decl_stmt|,
name|arenaSizeLog2
decl_stmt|,
name|maxArenas
decl_stmt|;
specifier|private
specifier|final
name|int
name|minAllocation
decl_stmt|,
name|maxAllocation
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxSize
decl_stmt|,
name|arenaSize
decl_stmt|;
specifier|public
name|LowLevelBuddyCache
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|minAllocation
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_MIN_ALLOC
argument_list|)
expr_stmt|;
name|maxAllocation
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_MAX_ALLOC
argument_list|)
expr_stmt|;
name|arenaSize
operator|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_ARENA_SIZE
argument_list|)
expr_stmt|;
name|maxSize
operator|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_MAX_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxSize
argument_list|<
name|arenaSize
operator|||
name|arenaSize
argument_list|>
name|maxAllocation
operator|||
name|maxAllocation
operator|<
name|minAllocation
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Inconsistent sizes of cache, arena and allocations: "
operator|+
name|minAllocation
operator|+
literal|", "
operator|+
name|maxAllocation
operator|+
literal|", "
operator|+
name|arenaSize
operator|+
literal|", "
operator|+
name|maxSize
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|Integer
operator|.
name|bitCount
argument_list|(
name|minAllocation
argument_list|)
operator|!=
literal|1
operator|)
operator|||
operator|(
name|Integer
operator|.
name|bitCount
argument_list|(
name|maxAllocation
argument_list|)
operator|!=
literal|1
operator|)
operator|||
operator|(
name|Long
operator|.
name|bitCount
argument_list|(
name|arenaSize
argument_list|)
operator|!=
literal|1
operator|)
operator|||
operator|(
name|minAllocation
operator|==
literal|1
operator|)
condition|)
block|{
comment|// TODO: technically, arena size is not required to be so; needs to be divisible by maxAlloc
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Allocation and arena sizes must be powers of two> 1: "
operator|+
name|minAllocation
operator|+
literal|", "
operator|+
name|maxAllocation
operator|+
literal|", "
operator|+
name|arenaSize
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|maxSize
operator|%
name|arenaSize
operator|)
operator|>
literal|0
operator|||
operator|(
name|maxSize
operator|/
name|arenaSize
operator|)
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Cache size not consistent with arena size: "
operator|+
name|arenaSize
operator|+
literal|","
operator|+
name|maxSize
argument_list|)
throw|;
block|}
name|minAllocLog2
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|minAllocation
argument_list|)
expr_stmt|;
name|maxAllocLog2
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|maxAllocation
argument_list|)
expr_stmt|;
name|arenaSizeLog2
operator|=
literal|31
operator|-
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|arenaSize
argument_list|)
expr_stmt|;
name|maxArenas
operator|=
call|(
name|int
call|)
argument_list|(
name|maxSize
operator|/
name|arenaSize
argument_list|)
expr_stmt|;
name|arenas
operator|=
operator|new
name|ArrayList
argument_list|<
name|arena
argument_list|>
argument_list|(
name|maxArenas
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxArenas
condition|;
operator|++
name|i
control|)
block|{
name|arenas
operator|.
name|add
argument_list|(
operator|new
name|arena
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|arenas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|cachePolicy
operator|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_USE_LRFU
argument_list|)
condition|?
operator|new
name|LowLevelLrfuCachePolicy
argument_list|(
name|conf
argument_list|,
name|minAllocation
argument_list|,
name|maxSize
argument_list|,
name|this
argument_list|)
else|:
operator|new
name|LowLevelFifoCachePolicy
argument_list|(
name|minAllocation
argument_list|,
name|maxSize
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|cleanupThread
operator|=
operator|new
name|CleanupThread
argument_list|()
expr_stmt|;
name|cleanupThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// TODO: would it make sense to return buffers asynchronously?
annotation|@
name|Override
specifier|public
name|void
name|allocateMultiple
parameter_list|(
name|LlapMemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|size
parameter_list|)
block|{
assert|assert
name|size
operator|>
literal|0
assert|;
name|int
name|freeListIndex
init|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|(
literal|1
operator|<<
name|freeListIndex
operator|)
condition|)
operator|++
name|freeListIndex
expr_stmt|;
comment|// not a power of two, add one more
name|freeListIndex
operator|=
name|Math
operator|.
name|max
argument_list|(
name|freeListIndex
operator|-
name|minAllocLog2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|allocationSize
init|=
literal|1
operator|<<
operator|(
name|freeListIndex
operator|+
name|minAllocLog2
operator|)
decl_stmt|;
name|int
name|total
init|=
name|dest
operator|.
name|length
operator|*
name|allocationSize
decl_stmt|;
name|cachePolicy
operator|.
name|reserveMemory
argument_list|(
name|total
argument_list|)
expr_stmt|;
name|int
name|ix
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dest
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|dest
index|[
name|i
index|]
operator|!=
literal|null
condition|)
continue|continue;
name|dest
index|[
name|i
index|]
operator|=
operator|new
name|LlapCacheableBuffer
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// TODO: pool of objects?
block|}
comment|// TODO: instead of waiting, loop only ones we haven't tried w/tryLock?
for|for
control|(
name|arena
name|block
range|:
name|arenas
control|)
block|{
name|int
name|newIx
init|=
name|allocateFast
argument_list|(
name|block
argument_list|,
name|freeListIndex
argument_list|,
name|dest
argument_list|,
name|ix
argument_list|,
name|allocationSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|newIx
operator|==
operator|-
literal|1
condition|)
break|break;
if|if
condition|(
name|newIx
operator|==
name|dest
operator|.
name|length
condition|)
return|return;
name|ix
operator|=
name|newIx
expr_stmt|;
block|}
comment|// Then try to split bigger blocks.
for|for
control|(
name|arena
name|block
range|:
name|arenas
control|)
block|{
name|int
name|newIx
init|=
name|allocateWithSplit
argument_list|(
name|block
argument_list|,
name|freeListIndex
argument_list|,
name|dest
argument_list|,
name|ix
argument_list|,
name|allocationSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|newIx
operator|==
operator|-
literal|1
condition|)
break|break;
if|if
condition|(
name|newIx
operator|==
name|dest
operator|.
name|length
condition|)
return|return;
name|ix
operator|=
name|newIx
expr_stmt|;
block|}
comment|// Then try to allocate memory if we haven't allocated all the way to maxSize yet; very rare.
for|for
control|(
name|arena
name|block
range|:
name|arenas
control|)
block|{
name|ix
operator|=
name|allocateWithExpand
argument_list|(
name|block
argument_list|,
name|freeListIndex
argument_list|,
name|dest
argument_list|,
name|ix
argument_list|,
name|allocationSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|ix
operator|==
name|dest
operator|.
name|length
condition|)
return|return;
block|}
block|}
specifier|private
name|int
name|allocateFast
parameter_list|(
name|arena
name|block
parameter_list|,
name|int
name|freeListIndex
parameter_list|,
name|LlapMemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|ix
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|block
operator|.
name|data
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// not allocated yet
name|FreeList
name|freeList
init|=
name|block
operator|.
name|freeLists
index|[
name|freeListIndex
index|]
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ix
operator|=
name|allocateFromFreeListUnderLock
argument_list|(
name|block
argument_list|,
name|freeList
argument_list|,
name|freeListIndex
argument_list|,
name|dest
argument_list|,
name|ix
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|ix
return|;
block|}
specifier|private
name|int
name|allocateWithSplit
parameter_list|(
name|arena
name|arena
parameter_list|,
name|int
name|freeListIndex
parameter_list|,
name|LlapMemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|ix
parameter_list|,
name|int
name|allocationSize
parameter_list|)
block|{
if|if
condition|(
name|arena
operator|.
name|data
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// not allocated yet
name|FreeList
name|freeList
init|=
name|arena
operator|.
name|freeLists
index|[
name|freeListIndex
index|]
decl_stmt|;
name|int
name|remaining
init|=
operator|-
literal|1
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ix
operator|=
name|allocateFromFreeListUnderLock
argument_list|(
name|arena
argument_list|,
name|freeList
argument_list|,
name|freeListIndex
argument_list|,
name|dest
argument_list|,
name|ix
argument_list|,
name|allocationSize
argument_list|)
expr_stmt|;
name|remaining
operator|=
name|dest
operator|.
name|length
operator|-
name|ix
expr_stmt|;
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
return|return
name|ix
return|;
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|int
name|splitListIndex
init|=
name|freeListIndex
decl_stmt|;
name|byte
name|headerData
init|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|freeListIndex
operator|<<
literal|1
operator|)
operator||
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
operator|++
name|splitListIndex
expr_stmt|;
name|int
name|splitWays
init|=
literal|1
operator|<<
operator|(
name|splitListIndex
operator|-
name|freeListIndex
operator|)
decl_stmt|;
name|int
name|headerStep
init|=
literal|1
operator|<<
name|splitListIndex
decl_stmt|;
name|int
name|lastSplitBlocksRemaining
init|=
operator|-
literal|1
decl_stmt|,
name|lastSplitNextHeader
init|=
operator|-
literal|1
decl_stmt|;
name|FreeList
name|splitList
init|=
name|arena
operator|.
name|freeLists
index|[
name|splitListIndex
index|]
decl_stmt|;
name|splitList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|headerIx
init|=
name|splitList
operator|.
name|listHead
decl_stmt|;
while|while
condition|(
name|headerIx
operator|>=
literal|0
operator|&&
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|origOffset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|headerIx
argument_list|)
decl_stmt|,
name|offset
init|=
name|origOffset
decl_stmt|;
name|int
name|toTake
init|=
name|Math
operator|.
name|min
argument_list|(
name|splitWays
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|remaining
operator|-=
name|toTake
expr_stmt|;
name|lastSplitBlocksRemaining
operator|=
name|splitWays
operator|-
name|toTake
expr_stmt|;
for|for
control|(
init|;
name|toTake
operator|>
literal|0
condition|;
operator|++
name|ix
operator|,
operator|--
name|toTake
operator|,
name|headerIx
operator|+=
name|headerStep
operator|,
name|offset
operator|+=
name|allocationSize
control|)
block|{
name|arena
operator|.
name|headers
index|[
name|headerIx
index|]
operator|=
name|headerData
expr_stmt|;
name|dest
index|[
name|ix
index|]
operator|.
name|initialize
argument_list|(
name|arena
operator|.
name|data
argument_list|,
name|offset
argument_list|,
name|allocationSize
argument_list|)
expr_stmt|;
block|}
name|lastSplitNextHeader
operator|=
name|headerIx
expr_stmt|;
name|headerIx
operator|=
name|arena
operator|.
name|data
operator|.
name|getInt
argument_list|(
name|origOffset
operator|+
literal|4
argument_list|)
expr_stmt|;
name|arena
operator|.
name|data
operator|.
name|putLong
argument_list|(
name|origOffset
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// overwrite list pointers for safety
block|}
name|splitList
operator|.
name|listHead
operator|=
name|headerIx
expr_stmt|;
block|}
finally|finally
block|{
name|splitList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
block|{
comment|// We have just obtained all we needed by splitting at lastSplitBlockOffset; now
comment|// we need to put the space remaining from that block into lower free lists.
comment|// TODO: if we could return blocks asynchronously, we could do this
name|int
name|newListIndex
init|=
name|freeListIndex
decl_stmt|;
while|while
condition|(
name|lastSplitBlocksRemaining
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|lastSplitBlocksRemaining
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|arena
operator|.
name|headers
index|[
name|lastSplitNextHeader
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|newListIndex
operator|<<
literal|1
operator|)
operator||
literal|1
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|lastSplitNextHeader
argument_list|)
decl_stmt|;
name|FreeList
name|newFreeList
init|=
name|arena
operator|.
name|freeLists
index|[
name|newListIndex
index|]
decl_stmt|;
name|newFreeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|arena
operator|.
name|data
operator|.
name|putInt
argument_list|(
name|offset
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|arena
operator|.
name|data
operator|.
name|putInt
argument_list|(
name|offset
argument_list|,
name|newFreeList
operator|.
name|listHead
argument_list|)
expr_stmt|;
name|newFreeList
operator|.
name|listHead
operator|=
name|lastSplitNextHeader
expr_stmt|;
block|}
finally|finally
block|{
name|newFreeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|lastSplitNextHeader
operator|+=
operator|(
literal|1
operator|<<
name|newListIndex
operator|)
expr_stmt|;
block|}
name|lastSplitBlocksRemaining
operator|>>>=
literal|1
expr_stmt|;
operator|++
name|newListIndex
expr_stmt|;
continue|continue;
block|}
block|}
block|}
return|return
name|ix
return|;
block|}
specifier|public
name|int
name|offsetFromHeaderIndex
parameter_list|(
name|int
name|lastSplitNextHeader
parameter_list|)
block|{
return|return
name|lastSplitNextHeader
operator|<<
name|minAllocLog2
return|;
block|}
specifier|public
name|int
name|allocateFromFreeListUnderLock
parameter_list|(
name|arena
name|block
parameter_list|,
name|FreeList
name|freeList
parameter_list|,
name|int
name|freeListIndex
parameter_list|,
name|LlapMemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|ix
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|int
name|current
init|=
name|freeList
operator|.
name|listHead
decl_stmt|;
while|while
condition|(
name|current
operator|>=
literal|0
operator|&&
name|ix
operator|<
name|dest
operator|.
name|length
condition|)
block|{
name|int
name|offset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|block
operator|.
name|headers
index|[
name|current
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|freeListIndex
operator|<<
literal|1
operator|)
operator||
literal|1
argument_list|)
expr_stmt|;
name|current
operator|=
name|block
operator|.
name|data
operator|.
name|getInt
argument_list|(
name|offset
operator|+
literal|4
argument_list|)
expr_stmt|;
name|dest
index|[
name|ix
index|]
operator|.
name|initialize
argument_list|(
name|block
operator|.
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|block
operator|.
name|data
operator|.
name|putLong
argument_list|(
name|offset
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// overwrite list pointers for safety
operator|++
name|ix
expr_stmt|;
block|}
name|freeList
operator|.
name|listHead
operator|=
name|current
expr_stmt|;
return|return
name|ix
return|;
block|}
specifier|private
name|int
name|allocateWithExpand
parameter_list|(
name|arena
name|block
parameter_list|,
name|int
name|freeListIndex
parameter_list|,
name|LlapMemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|ix
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|block
operator|.
name|data
operator|!=
literal|null
condition|)
return|return
name|ix
return|;
comment|// already allocated
synchronized|synchronized
init|(
name|block
init|)
block|{
comment|// Never goes from non-null to null, so this is the only place we need sync.
if|if
condition|(
name|block
operator|.
name|data
operator|==
literal|null
condition|)
block|{
name|block
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|allocateWithSplit
argument_list|(
name|block
argument_list|,
name|freeListIndex
argument_list|,
name|dest
argument_list|,
name|ix
argument_list|,
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapMemoryBuffer
index|[]
name|getFileData
parameter_list|(
name|String
name|fileName
parameter_list|,
name|long
index|[]
name|offsets
parameter_list|)
block|{
name|LlapMemoryBuffer
index|[]
name|result
init|=
literal|null
decl_stmt|;
comment|// TODO: string must be internalized
name|FileCache
name|subCache
init|=
name|cache
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|subCache
operator|==
literal|null
operator|||
operator|!
name|subCache
operator|.
name|incRef
argument_list|()
condition|)
return|return
name|result
return|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsets
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// Overwhelmingly only runs once.
name|long
name|offset
init|=
name|offsets
index|[
name|i
index|]
decl_stmt|;
name|LlapCacheableBuffer
name|buffer
init|=
name|subCache
operator|.
name|cache
operator|.
name|get
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
name|lockBuffer
argument_list|(
name|buffer
argument_list|)
condition|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LlapCacheableBuffer
index|[
name|offsets
operator|.
name|length
index|]
expr_stmt|;
block|}
name|result
index|[
name|i
index|]
operator|=
name|buffer
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|subCache
operator|.
name|cache
operator|.
name|remove
argument_list|(
name|offset
argument_list|,
name|buffer
argument_list|)
condition|)
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|subCache
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|lockBuffer
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|int
name|rc
init|=
name|buffer
operator|.
name|lock
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
block|{
name|cachePolicy
operator|.
name|notifyLock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|putFileData
parameter_list|(
name|String
name|fileName
parameter_list|,
name|long
index|[]
name|offsets
parameter_list|,
name|LlapMemoryBuffer
index|[]
name|buffers
parameter_list|)
block|{
name|long
index|[]
name|result
init|=
literal|null
decl_stmt|;
assert|assert
name|buffers
operator|.
name|length
operator|==
name|offsets
operator|.
name|length
assert|;
comment|// TODO: string must be internalized
name|FileCache
name|subCache
init|=
name|getOrAddFileSubCache
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsets
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|LlapCacheableBuffer
name|buffer
init|=
operator|(
name|LlapCacheableBuffer
operator|)
name|buffers
index|[
name|i
index|]
decl_stmt|;
name|long
name|offset
init|=
name|offsets
index|[
name|i
index|]
decl_stmt|;
assert|assert
name|buffer
operator|.
name|isLocked
argument_list|()
assert|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Overwhelmingly executes once, or maybe twice (replacing stale value).
name|LlapCacheableBuffer
name|oldVal
init|=
name|subCache
operator|.
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|offset
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldVal
operator|==
literal|null
condition|)
break|break;
comment|// Cached successfully.
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceCachingEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to cache when the chunk is already cached for "
operator|+
name|fileName
operator|+
literal|"@"
operator|+
name|offset
operator|+
literal|"; old "
operator|+
name|oldVal
operator|+
literal|", new "
operator|+
name|buffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockBuffer
argument_list|(
name|oldVal
argument_list|)
condition|)
block|{
comment|// We found an old, valid block for this key in the cache.
name|releaseBufferInternal
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffers
index|[
name|i
index|]
operator|=
name|oldVal
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|long
index|[
name|align64
argument_list|(
name|buffers
operator|.
name|length
argument_list|)
operator|>>>
literal|6
index|]
expr_stmt|;
block|}
name|result
index|[
name|i
operator|>>>
literal|6
index|]
operator||=
operator|(
literal|1
operator|<<
operator|(
name|i
operator|&
literal|63
operator|)
operator|)
expr_stmt|;
comment|// indicate that we've replaced the value
break|break;
block|}
comment|// We found some old value but couldn't lock it; remove it.
name|subCache
operator|.
name|cache
operator|.
name|remove
argument_list|(
name|offset
argument_list|,
name|oldVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|subCache
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * All this mess is necessary because we want to be able to remove sub-caches for fully    * evicted files. It may actually be better to have non-nested map with object keys?    */
specifier|public
name|FileCache
name|getOrAddFileSubCache
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|FileCache
name|newSubCache
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Overwhelmingly executes once.
name|FileCache
name|subCache
init|=
name|cache
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|subCache
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|subCache
operator|.
name|incRef
argument_list|()
condition|)
return|return
name|subCache
return|;
comment|// Main path - found it, incRef-ed it.
if|if
condition|(
name|newSubCache
operator|==
literal|null
condition|)
block|{
name|newSubCache
operator|=
operator|new
name|FileCache
argument_list|()
expr_stmt|;
name|newSubCache
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
comment|// Found a stale value we cannot incRef; try to replace it with new value.
if|if
condition|(
name|cache
operator|.
name|replace
argument_list|(
name|fileName
argument_list|,
name|subCache
argument_list|,
name|newSubCache
argument_list|)
condition|)
return|return
name|newSubCache
return|;
continue|continue;
comment|// Someone else replaced/removed a stale value, try again.
block|}
comment|// No value found.
if|if
condition|(
name|newSubCache
operator|==
literal|null
condition|)
block|{
name|newSubCache
operator|=
operator|new
name|FileCache
argument_list|()
expr_stmt|;
name|newSubCache
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
name|FileCache
name|oldSubCache
init|=
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|fileName
argument_list|,
name|newSubCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldSubCache
operator|==
literal|null
condition|)
return|return
name|newSubCache
return|;
comment|// Main path 2 - created a new file cache.
if|if
condition|(
name|oldSubCache
operator|.
name|incRef
argument_list|()
condition|)
return|return
name|oldSubCache
return|;
comment|// Someone created one in parallel.
comment|// Someone created one in parallel and then it went stale.
if|if
condition|(
name|cache
operator|.
name|replace
argument_list|(
name|fileName
argument_list|,
name|oldSubCache
argument_list|,
name|newSubCache
argument_list|)
condition|)
return|return
name|newSubCache
return|;
comment|// Someone else replaced/removed a parallel-added stale value, try again. Max confusion.
block|}
block|}
specifier|private
specifier|static
name|int
name|align64
parameter_list|(
name|int
name|number
parameter_list|)
block|{
return|return
operator|(
operator|(
name|number
operator|+
literal|63
operator|)
operator|&
operator|~
literal|63
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseBuffer
parameter_list|(
name|LlapMemoryBuffer
name|buffer
parameter_list|)
block|{
name|releaseBufferInternal
argument_list|(
operator|(
name|LlapCacheableBuffer
operator|)
name|buffer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|releaseBufferInternal
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|.
name|unlock
argument_list|()
operator|==
literal|0
condition|)
block|{
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|unblockEviction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|LlapCacheableBuffer
name|allocateFake
parameter_list|()
block|{
return|return
operator|new
name|LlapCacheableBuffer
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|void
name|unblockEviction
parameter_list|()
block|{
name|newEvictions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{        }
specifier|private
specifier|final
class|class
name|CleanupThread
extends|extends
name|Thread
block|{
specifier|private
name|int
name|APPROX_CLEANUP_INTERVAL_SEC
init|=
literal|600
decl_stmt|;
specifier|public
name|CleanupThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"Llap ChunkPool cleanup thread"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setPriority
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|doOneCleanupRound
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cleanup thread has been interrupted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Cleanup has failed; the thread will now exit"
argument_list|,
name|t
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|doOneCleanupRound
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|evictionsSinceLast
init|=
name|newEvictions
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|evictionsSinceLast
operator|>
literal|0
condition|)
break|break;
synchronized|synchronized
init|(
name|newEvictions
init|)
block|{
name|newEvictions
operator|.
name|wait
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Duration is an estimate; if the size of the map changes, it can be very different.
name|long
name|endTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|APPROX_CLEANUP_INTERVAL_SEC
operator|*
literal|1000000000L
decl_stmt|;
name|int
name|leftToCheck
init|=
literal|0
decl_stmt|;
comment|// approximate
for|for
control|(
name|FileCache
name|fc
range|:
name|cache
operator|.
name|values
argument_list|()
control|)
block|{
name|leftToCheck
operator|+=
name|fc
operator|.
name|cache
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// TODO: if these super-long-lived iterator affects the map in some bad way,
comment|//       we'd need to sleep once per round instead.
comment|// Iterate thru all the filecaches. This is best-effort.
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FileCache
argument_list|>
argument_list|>
name|iter
init|=
name|cache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileCache
name|fc
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fc
operator|.
name|incRef
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Something other than cleanup is removing elements from map"
argument_list|)
throw|;
block|}
comment|// Iterate thru the file cache. This is best-effort.
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|LlapCacheableBuffer
argument_list|>
argument_list|>
name|subIter
init|=
name|fc
operator|.
name|cache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|isEmpty
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|subIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|leftToCheck
operator|<=
literal|0
operator|)
condition|?
literal|1
else|:
operator|(
name|endTime
operator|-
name|System
operator|.
name|nanoTime
argument_list|()
operator|)
operator|/
operator|(
literal|1000000L
operator|*
name|leftToCheck
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|subIter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|isInvalid
argument_list|()
condition|)
block|{
name|subIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|isEmpty
operator|=
literal|false
expr_stmt|;
block|}
operator|--
name|leftToCheck
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isEmpty
condition|)
block|{
name|fc
operator|.
name|decRef
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// FileCache might be empty; see if we can remove it. "tryWriteLock"
if|if
condition|(
operator|!
name|fc
operator|.
name|startEvicting
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|fc
operator|.
name|cache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fc
operator|.
name|commitEvicting
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fc
operator|.
name|abortEvicting
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|arena
block|{
name|void
name|init
parameter_list|()
block|{
name|data
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|maxAllocation
argument_list|)
expr_stmt|;
name|int
name|maxMinAllocs
init|=
literal|1
operator|<<
operator|(
name|arenaSizeLog2
operator|-
name|minAllocLog2
operator|)
decl_stmt|;
name|headers
operator|=
operator|new
name|byte
index|[
name|maxMinAllocs
index|]
expr_stmt|;
name|int
name|allocLog2Diff
init|=
name|maxAllocLog2
operator|-
name|minAllocLog2
decl_stmt|;
name|freeLists
operator|=
operator|new
name|FreeList
index|[
name|allocLog2Diff
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxAllocLog2
condition|;
operator|++
name|i
control|)
block|{
name|freeLists
index|[
name|i
index|]
operator|=
operator|new
name|FreeList
argument_list|()
expr_stmt|;
block|}
name|int
name|maxMaxAllocs
init|=
literal|1
operator|<<
operator|(
name|arenaSizeLog2
operator|-
name|maxAllocLog2
operator|)
decl_stmt|,
name|headerIndex
init|=
literal|0
decl_stmt|,
name|headerIncrement
init|=
literal|1
operator|<<
name|allocLog2Diff
decl_stmt|;
name|freeLists
index|[
name|maxAllocLog2
operator|-
literal|1
index|]
operator|.
name|listHead
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|offset
init|=
literal|0
init|;
name|i
operator|<
name|maxMaxAllocs
condition|;
operator|++
name|i
operator|,
name|offset
operator|+=
name|maxAllocation
control|)
block|{
comment|// TODO: will this cause bugs on large numbers due to some Java sign bit stupidity?
name|headers
index|[
name|headerIndex
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|allocLog2Diff
operator|<<
literal|1
argument_list|)
expr_stmt|;
comment|// Maximum allocation size
name|data
operator|.
name|putInt
argument_list|(
name|offset
argument_list|,
operator|(
name|i
operator|==
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|headerIndex
operator|-
name|headerIncrement
operator|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|putInt
argument_list|(
name|offset
operator|+
literal|4
argument_list|,
operator|(
name|i
operator|==
name|maxMaxAllocs
operator|-
literal|1
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|headerIndex
operator|+
name|headerIncrement
operator|)
argument_list|)
expr_stmt|;
name|headerIndex
operator|+=
name|headerIncrement
expr_stmt|;
block|}
block|}
name|ByteBuffer
name|data
decl_stmt|;
comment|// Avoid storing headers with data since we expect binary size allocations.
comment|// Each headers[i] is a "virtual" byte at i * minAllocation.
name|byte
index|[]
name|headers
decl_stmt|;
name|FreeList
index|[]
name|freeLists
decl_stmt|;
block|}
specifier|private
specifier|static
class|class
name|FreeList
block|{
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|int
name|listHead
init|=
operator|-
literal|1
decl_stmt|;
comment|// Index of where the buffer is; in minAllocation units
comment|// TODO: One possible improvement - store blocks arriving left over from splits, and
comment|//       blocks requested, to be able to wait for pending splits and reduce fragmentation.
comment|//       However, we are trying to increase fragmentation now, since we cater to single-size.
block|}
comment|// TODO##: separate the classes?
specifier|private
specifier|static
class|class
name|FileCache
block|{
specifier|private
specifier|static
specifier|final
name|int
name|EVICTED_REFCOUNT
init|=
operator|-
literal|1
decl_stmt|,
name|EVICTING_REFCOUNT
init|=
operator|-
literal|2
decl_stmt|;
comment|// TODO: given the specific data, perhaps the nested thing should not be CHM
specifier|private
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|LlapCacheableBuffer
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|LlapCacheableBuffer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicInteger
name|refCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|incRef
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|value
init|=
name|refCount
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|EVICTED_REFCOUNT
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|value
operator|==
name|EVICTING_REFCOUNT
condition|)
continue|continue;
comment|// spin until it resolves
assert|assert
name|value
operator|>=
literal|0
assert|;
if|if
condition|(
name|refCount
operator|.
name|compareAndSet
argument_list|(
name|value
argument_list|,
name|value
operator|+
literal|1
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
name|void
name|decRef
parameter_list|()
block|{
name|int
name|value
init|=
name|refCount
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected refCount "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
name|boolean
name|startEvicting
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|value
init|=
name|refCount
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|1
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|refCount
operator|.
name|compareAndSet
argument_list|(
name|value
argument_list|,
name|EVICTING_REFCOUNT
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
name|void
name|commitEvicting
parameter_list|()
block|{
name|boolean
name|result
init|=
name|refCount
operator|.
name|compareAndSet
argument_list|(
name|EVICTING_REFCOUNT
argument_list|,
name|EVICTED_REFCOUNT
argument_list|)
decl_stmt|;
assert|assert
name|result
assert|;
block|}
name|void
name|abortEvicting
parameter_list|()
block|{
name|boolean
name|result
init|=
name|refCount
operator|.
name|compareAndSet
argument_list|(
name|EVICTING_REFCOUNT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|result
assert|;
block|}
block|}
block|}
end_class

end_unit

