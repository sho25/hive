begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapTaskUmbilicalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|security
operator|.
name|authorize
operator|.
name|TezAMPolicyProvider
import|;
end_import

begin_class
specifier|public
class|class
name|LlapUmbilicalPolicyProvider
extends|extends
name|TezAMPolicyProvider
block|{
specifier|private
specifier|static
name|Service
index|[]
name|services
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|servicesLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Service
index|[]
name|getServices
parameter_list|()
block|{
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
return|return
name|services
return|;
synchronized|synchronized
init|(
name|servicesLock
init|)
block|{
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
return|return
name|services
return|;
name|Service
index|[]
name|parentSvc
init|=
name|super
operator|.
name|getServices
argument_list|()
decl_stmt|;
name|Service
index|[]
name|result
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|parentSvc
argument_list|,
name|parentSvc
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|result
index|[
name|parentSvc
operator|.
name|length
index|]
operator|=
operator|new
name|Service
argument_list|(
name|TezConstants
operator|.
name|TEZ_AM_SECURITY_SERVICE_AUTHORIZATION_TASK_UMBILICAL
argument_list|,
name|LlapTaskUmbilicalProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
operator|(
name|services
operator|=
name|result
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

