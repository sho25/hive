begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|status
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|ToStringBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|ToStringStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnore
import|;
end_import

begin_comment
comment|/**  * Represents the status of the Llap application.  */
end_comment

begin_class
class|class
name|AppStatusBuilder
block|{
specifier|private
name|AmInfo
name|amInfo
decl_stmt|;
specifier|private
name|State
name|state
init|=
name|State
operator|.
name|UNKNOWN
decl_stmt|;
specifier|private
name|String
name|diagnostics
decl_stmt|;
specifier|private
name|String
name|originalConfigurationPath
decl_stmt|;
specifier|private
name|String
name|generatedConfigurationPath
decl_stmt|;
specifier|private
name|Long
name|appStartTime
decl_stmt|;
specifier|private
name|Long
name|appFinishTime
decl_stmt|;
specifier|private
name|boolean
name|runningThresholdAchieved
init|=
literal|false
decl_stmt|;
specifier|private
name|Integer
name|desiredInstances
init|=
literal|null
decl_stmt|;
specifier|private
name|Integer
name|liveInstances
init|=
literal|null
decl_stmt|;
specifier|private
name|Integer
name|launchingInstances
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|runningInstances
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|completedInstances
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|LlapInstance
argument_list|>
name|containerToRunningInstanceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|LlapInstance
argument_list|>
name|containerToCompletedInstanceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|void
name|setAmInfo
parameter_list|(
name|AmInfo
name|amInfo
parameter_list|)
block|{
name|this
operator|.
name|amInfo
operator|=
name|amInfo
expr_stmt|;
block|}
name|AppStatusBuilder
name|setState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
return|return
name|this
return|;
block|}
name|AppStatusBuilder
name|setDiagnostics
parameter_list|(
name|String
name|diagnostics
parameter_list|)
block|{
name|this
operator|.
name|diagnostics
operator|=
name|diagnostics
expr_stmt|;
return|return
name|this
return|;
block|}
name|AppStatusBuilder
name|setOriginalConfigurationPath
parameter_list|(
name|String
name|originalConfigurationPath
parameter_list|)
block|{
name|this
operator|.
name|originalConfigurationPath
operator|=
name|originalConfigurationPath
expr_stmt|;
return|return
name|this
return|;
block|}
name|AppStatusBuilder
name|setGeneratedConfigurationPath
parameter_list|(
name|String
name|generatedConfigurationPath
parameter_list|)
block|{
name|this
operator|.
name|generatedConfigurationPath
operator|=
name|generatedConfigurationPath
expr_stmt|;
return|return
name|this
return|;
block|}
name|AppStatusBuilder
name|setAppStartTime
parameter_list|(
name|long
name|appStartTime
parameter_list|)
block|{
name|this
operator|.
name|appStartTime
operator|=
name|appStartTime
expr_stmt|;
return|return
name|this
return|;
block|}
name|AppStatusBuilder
name|setAppFinishTime
parameter_list|(
name|long
name|finishTime
parameter_list|)
block|{
name|this
operator|.
name|appFinishTime
operator|=
name|finishTime
expr_stmt|;
return|return
name|this
return|;
block|}
name|void
name|setRunningThresholdAchieved
parameter_list|(
name|boolean
name|runningThresholdAchieved
parameter_list|)
block|{
name|this
operator|.
name|runningThresholdAchieved
operator|=
name|runningThresholdAchieved
expr_stmt|;
block|}
name|AppStatusBuilder
name|setDesiredInstances
parameter_list|(
name|int
name|desiredInstances
parameter_list|)
block|{
name|this
operator|.
name|desiredInstances
operator|=
name|desiredInstances
expr_stmt|;
return|return
name|this
return|;
block|}
name|AppStatusBuilder
name|setLiveInstances
parameter_list|(
name|int
name|liveInstances
parameter_list|)
block|{
name|this
operator|.
name|liveInstances
operator|=
name|liveInstances
expr_stmt|;
return|return
name|this
return|;
block|}
name|AppStatusBuilder
name|setLaunchingInstances
parameter_list|(
name|int
name|launchingInstances
parameter_list|)
block|{
name|this
operator|.
name|launchingInstances
operator|=
name|launchingInstances
expr_stmt|;
return|return
name|this
return|;
block|}
name|AppStatusBuilder
name|addNewRunningLlapInstance
parameter_list|(
name|LlapInstance
name|llapInstance
parameter_list|)
block|{
name|this
operator|.
name|runningInstances
operator|.
name|add
argument_list|(
name|llapInstance
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerToRunningInstanceMap
operator|.
name|put
argument_list|(
name|llapInstance
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|llapInstance
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|LlapInstance
name|removeAndGetRunningLlapInstanceForContainer
parameter_list|(
name|String
name|containerIdString
parameter_list|)
block|{
return|return
name|containerToRunningInstanceMap
operator|.
name|remove
argument_list|(
name|containerIdString
argument_list|)
return|;
block|}
name|void
name|clearRunningLlapInstances
parameter_list|()
block|{
name|this
operator|.
name|runningInstances
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerToRunningInstanceMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|AppStatusBuilder
name|clearAndAddPreviouslyKnownRunningInstances
parameter_list|(
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|llapInstances
parameter_list|)
block|{
name|clearRunningLlapInstances
argument_list|()
expr_stmt|;
for|for
control|(
name|LlapInstance
name|llapInstance
range|:
name|llapInstances
control|)
block|{
name|addNewRunningLlapInstance
argument_list|(
name|llapInstance
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|JsonIgnore
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|allRunningInstances
parameter_list|()
block|{
return|return
name|this
operator|.
name|runningInstances
return|;
block|}
name|AppStatusBuilder
name|addNewCompleteLlapInstance
parameter_list|(
name|LlapInstance
name|llapInstance
parameter_list|)
block|{
name|this
operator|.
name|completedInstances
operator|.
name|add
argument_list|(
name|llapInstance
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerToCompletedInstanceMap
operator|.
name|put
argument_list|(
name|llapInstance
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|llapInstance
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|LlapInstance
name|removeAndGetCompletedLlapInstanceForContainer
parameter_list|(
name|String
name|containerIdString
parameter_list|)
block|{
return|return
name|containerToCompletedInstanceMap
operator|.
name|remove
argument_list|(
name|containerIdString
argument_list|)
return|;
block|}
name|void
name|clearCompletedLlapInstances
parameter_list|()
block|{
name|this
operator|.
name|completedInstances
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerToCompletedInstanceMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|AppStatusBuilder
name|clearAndAddPreviouslyKnownCompletedInstances
parameter_list|(
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|llapInstances
parameter_list|)
block|{
name|clearCompletedLlapInstances
argument_list|()
expr_stmt|;
for|for
control|(
name|LlapInstance
name|llapInstance
range|:
name|llapInstances
control|)
block|{
name|addNewCompleteLlapInstance
argument_list|(
name|llapInstance
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|JsonIgnore
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|allCompletedInstances
parameter_list|()
block|{
return|return
name|this
operator|.
name|completedInstances
return|;
block|}
name|AmInfo
name|getAmInfo
parameter_list|()
block|{
return|return
name|amInfo
return|;
block|}
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
name|String
name|getDiagnostics
parameter_list|()
block|{
return|return
name|diagnostics
return|;
block|}
name|String
name|getOriginalConfigurationPath
parameter_list|()
block|{
return|return
name|originalConfigurationPath
return|;
block|}
name|String
name|getGeneratedConfigurationPath
parameter_list|()
block|{
return|return
name|generatedConfigurationPath
return|;
block|}
name|Long
name|getAppStartTime
parameter_list|()
block|{
return|return
name|appStartTime
return|;
block|}
name|Long
name|getAppFinishTime
parameter_list|()
block|{
return|return
name|appFinishTime
return|;
block|}
name|boolean
name|isRunningThresholdAchieved
parameter_list|()
block|{
return|return
name|runningThresholdAchieved
return|;
block|}
name|Integer
name|getDesiredInstances
parameter_list|()
block|{
return|return
name|desiredInstances
return|;
block|}
name|Integer
name|getLiveInstances
parameter_list|()
block|{
return|return
name|liveInstances
return|;
block|}
name|Integer
name|getLaunchingInstances
parameter_list|()
block|{
return|return
name|launchingInstances
return|;
block|}
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|getRunningInstances
parameter_list|()
block|{
return|return
name|runningInstances
return|;
block|}
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|getCompletedInstances
parameter_list|()
block|{
return|return
name|completedInstances
return|;
block|}
annotation|@
name|JsonIgnore
name|AmInfo
name|maybeCreateAndGetAmInfo
parameter_list|()
block|{
if|if
condition|(
name|amInfo
operator|==
literal|null
condition|)
block|{
name|amInfo
operator|=
operator|new
name|AmInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|amInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ToStringBuilder
operator|.
name|reflectionToString
argument_list|(
name|this
argument_list|,
name|ToStringStyle
operator|.
name|MULTI_LINE_STYLE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

