begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
package|;
end_package

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|CompressionBuffer
block|{
comment|// stripe position within file
specifier|private
name|int
name|stripePos
decl_stmt|;
comment|// row group position within stripe
specifier|private
name|int
name|rowGroupPos
decl_stmt|;
comment|// start offset of compression buffer corresponding to above row group
specifier|private
name|long
name|startOffset
decl_stmt|;
comment|// length of compression buffer (compressed or uncompressed length)
specifier|private
name|long
name|length
decl_stmt|;
comment|// offset within compression buffer where the row group begins
specifier|private
name|int
name|uncompressedOffset
decl_stmt|;
comment|// if uncompressedOffset is in a middle of integer encoding runs (RLE, Delta etc.), consume
comment|// these many values to reach beginning of the row group
specifier|private
name|int
name|consume
decl_stmt|;
comment|// For run length byte encoding, record the number of bits within current byte to consume to
comment|// reach beginning of the row group. This is required for IS_PRESENT stream.
specifier|private
name|int
name|consumeBits
decl_stmt|;
comment|// if last row group is set to true, it means the above row group spans compression buffer
comment|// boundary. Length will span two compression buffers.
specifier|private
name|boolean
name|lastRowGroup
decl_stmt|;
specifier|private
name|CompressionBuffer
parameter_list|(
name|int
name|sp
parameter_list|,
name|int
name|rgp
parameter_list|,
name|long
name|s
parameter_list|,
name|long
name|len
parameter_list|,
name|int
name|u
parameter_list|,
name|int
name|c
parameter_list|,
name|int
name|cb
parameter_list|,
name|boolean
name|last
parameter_list|)
block|{
name|this
operator|.
name|stripePos
operator|=
name|sp
expr_stmt|;
name|this
operator|.
name|rowGroupPos
operator|=
name|rgp
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|len
expr_stmt|;
name|this
operator|.
name|uncompressedOffset
operator|=
name|u
expr_stmt|;
name|this
operator|.
name|consume
operator|=
name|c
expr_stmt|;
name|this
operator|.
name|consumeBits
operator|=
name|cb
expr_stmt|;
name|this
operator|.
name|lastRowGroup
operator|=
name|last
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Builder
block|{
specifier|private
name|int
name|stripePos
decl_stmt|;
specifier|private
name|int
name|rowGroupPos
decl_stmt|;
specifier|private
name|long
name|startOffset
decl_stmt|;
specifier|private
name|long
name|length
decl_stmt|;
specifier|private
name|int
name|offsetWithinBuffer
decl_stmt|;
specifier|private
name|int
name|consume
decl_stmt|;
specifier|private
name|int
name|consumeBits
decl_stmt|;
specifier|private
name|boolean
name|lastRowGroup
decl_stmt|;
specifier|public
name|Builder
name|setStripePosition
parameter_list|(
name|int
name|stripePos
parameter_list|)
block|{
name|this
operator|.
name|stripePos
operator|=
name|stripePos
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setRowGroupPosition
parameter_list|(
name|int
name|rowGroupPos
parameter_list|)
block|{
name|this
operator|.
name|rowGroupPos
operator|=
name|rowGroupPos
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setStartOffset
parameter_list|(
name|long
name|startOffset
parameter_list|)
block|{
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setLength
parameter_list|(
name|long
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setOffsetWithInBuffer
parameter_list|(
name|int
name|offsetWithInBuffer
parameter_list|)
block|{
name|this
operator|.
name|offsetWithinBuffer
operator|=
name|offsetWithInBuffer
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|consumeRuns
parameter_list|(
name|int
name|consume
parameter_list|)
block|{
name|this
operator|.
name|consume
operator|=
name|consume
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|consumeBits
parameter_list|(
name|int
name|consumeBits
parameter_list|)
block|{
name|this
operator|.
name|consumeBits
operator|=
name|consumeBits
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|setLastRowGroup
parameter_list|(
name|boolean
name|lastRowGroup
parameter_list|)
block|{
name|this
operator|.
name|lastRowGroup
operator|=
name|lastRowGroup
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CompressionBuffer
name|build
parameter_list|()
block|{
return|return
operator|new
name|CompressionBuffer
argument_list|(
name|stripePos
argument_list|,
name|rowGroupPos
argument_list|,
name|startOffset
argument_list|,
name|length
argument_list|,
name|offsetWithinBuffer
argument_list|,
name|consume
argument_list|,
name|consumeBits
argument_list|,
name|lastRowGroup
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
block|}
end_class

end_unit

