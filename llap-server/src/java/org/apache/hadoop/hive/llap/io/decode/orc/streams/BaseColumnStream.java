begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|decode
operator|.
name|orc
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|EncodedColumnBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|BitFieldReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|InStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|PositionProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseColumnStream
implements|implements
name|ColumnStream
block|{
specifier|protected
name|int
name|columnId
decl_stmt|;
specifier|protected
name|EncodedColumnBatch
operator|.
name|StreamBuffer
name|nullStream
decl_stmt|;
specifier|protected
name|InStream
name|inStream
decl_stmt|;
specifier|protected
name|BitFieldReader
name|bitFieldReader
decl_stmt|;
specifier|protected
name|boolean
name|isFileCompressed
decl_stmt|;
specifier|public
name|BaseColumnStream
parameter_list|(
name|String
name|file
parameter_list|,
name|int
name|columnId
parameter_list|,
name|EncodedColumnBatch
operator|.
name|StreamBuffer
name|present
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|columnId
operator|>=
literal|0
argument_list|,
literal|"ColumnId cannot be negative"
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnId
operator|=
name|columnId
expr_stmt|;
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nullStream
operator|=
name|present
expr_stmt|;
name|isFileCompressed
operator|=
name|codec
operator|!=
literal|null
expr_stmt|;
comment|// pass null for codec as the stream is decompressed
name|this
operator|.
name|inStream
operator|=
name|StreamUtils
operator|.
name|createInStream
argument_list|(
literal|"PRESENT"
argument_list|,
name|file
argument_list|,
literal|null
argument_list|,
name|bufferSize
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|this
operator|.
name|bitFieldReader
operator|=
name|present
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BitFieldReader
argument_list|(
name|inStream
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nullStream
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|inStream
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|bitFieldReader
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|positionReaders
parameter_list|(
name|PositionProvider
name|positionProvider
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bitFieldReader
operator|!=
literal|null
condition|)
block|{
comment|// stream is uncompressed and if file is compressed then skip 1st position in index
if|if
condition|(
name|isFileCompressed
condition|)
block|{
name|positionProvider
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
name|bitFieldReader
operator|.
name|seek
argument_list|(
name|positionProvider
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nullStream
operator|!=
literal|null
operator|&&
name|inStream
operator|!=
literal|null
condition|)
block|{
name|nullStream
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|nullStream
operator|=
literal|null
expr_stmt|;
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ColumnVector
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|ColumnVector
name|result
init|=
operator|(
name|ColumnVector
operator|)
name|previousVector
decl_stmt|;
if|if
condition|(
name|bitFieldReader
operator|!=
literal|null
condition|)
block|{
comment|// Set noNulls and isNull vector of the ColumnVector based on
comment|// present stream
name|result
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|isNull
index|[
name|i
index|]
operator|=
operator|(
name|bitFieldReader
operator|.
name|next
argument_list|()
operator|!=
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|noNulls
operator|&&
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// There is not present stream, this means that all the values are
comment|// present.
name|result
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|previousVector
return|;
block|}
block|}
end_class

end_unit

