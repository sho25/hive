begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|log
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|AbstractAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|RandomAccessFileAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|AppenderControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|PluginAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|PluginConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|PluginFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|plugins
operator|.
name|PluginNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * An appender to wrap around RandomAccessFileAppender, and rename the file once the appender is  * closed.  * Could be potentially extended to other appenders by special casing them to figure out how files  * are to be handled.  */
end_comment

begin_class
annotation|@
name|Plugin
argument_list|(
name|name
operator|=
literal|"LlapWrappedAppender"
argument_list|,
name|category
operator|=
literal|"Core"
argument_list|,
name|elementType
operator|=
literal|"appender"
argument_list|,
name|printObject
operator|=
literal|true
argument_list|,
name|deferChildren
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|LlapWrappedAppender
extends|extends
name|AbstractAppender
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_RENAME_FILES_ON_CLOSE
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_RENAMED_FILE_SUFFIX
init|=
literal|".done"
decl_stmt|;
specifier|private
specifier|final
name|Node
name|node
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|config
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|renameFileOnClose
decl_stmt|;
specifier|private
specifier|final
name|String
name|renamedFileSuffix
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|Appender
argument_list|>
name|realAppender
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|AppenderControl
argument_list|>
name|appenderControl
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|LlapWrappedAppender
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Node
name|node
parameter_list|,
specifier|final
name|Configuration
name|config
parameter_list|,
name|boolean
name|renameOnClose
parameter_list|,
name|String
name|renamedFileSuffix
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|renameFileOnClose
operator|=
name|renameOnClose
expr_stmt|;
name|this
operator|.
name|renamedFileSuffix
operator|=
name|renamedFileSuffix
expr_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
name|LlapWrappedAppender
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" created with name="
operator|+
name|name
operator|+
literal|", renameOnClose="
operator|+
name|renameOnClose
operator|+
literal|", renamedFileSuffix="
operator|+
name|renamedFileSuffix
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|LogEvent
name|event
parameter_list|)
block|{
name|setupAppenderIfRequired
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|appenderControl
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|event
operator|.
name|getMarker
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getMarker
argument_list|()
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getMarker
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Log4jQueryCompleteMarker
operator|.
name|EOF_MARKER
argument_list|)
operator|)
condition|)
block|{
name|appenderControl
operator|.
name|get
argument_list|()
operator|.
name|callAppender
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Not forwarding message with maker={}, marker.getName={}"
argument_list|,
name|event
operator|.
name|getMarker
argument_list|()
argument_list|,
operator|(
name|event
operator|.
name|getMarker
argument_list|()
operator|==
literal|null
condition|?
literal|"nullMarker"
else|:
name|event
operator|.
name|getMarker
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setupAppenderIfRequired
parameter_list|(
name|LogEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|appenderControl
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|.
name|getElementName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"appender"
argument_list|)
condition|)
block|{
for|for
control|(
specifier|final
name|Node
name|cnode
range|:
name|node
operator|.
name|getChildren
argument_list|()
control|)
block|{
specifier|final
name|Node
name|appNode
init|=
operator|new
name|Node
argument_list|(
name|cnode
argument_list|)
decl_stmt|;
name|config
operator|.
name|createConfiguration
argument_list|(
name|appNode
argument_list|,
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|appNode
operator|.
name|getObject
argument_list|()
operator|instanceof
name|Appender
condition|)
block|{
specifier|final
name|Appender
name|app
init|=
name|appNode
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|app
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|app
operator|instanceof
name|RandomAccessFileAppender
operator|)
condition|)
block|{
name|String
name|message
init|=
literal|"Cannot handle appenders other than "
operator|+
name|RandomAccessFileAppender
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|". Found: "
operator|+
name|app
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOGGER
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|realAppender
operator|.
name|set
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|appenderControl
operator|.
name|set
argument_list|(
operator|new
name|AppenderControl
argument_list|(
name|app
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|RandomAccessFileAppender
name|raf
init|=
operator|(
name|RandomAccessFileAppender
operator|)
name|app
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Setup new appender to write to file: "
operator|+
name|raf
operator|.
name|getFileName
argument_list|()
operator|+
literal|", appenderName="
operator|+
name|raf
operator|.
name|getName
argument_list|()
operator|+
literal|", appenderManagerName="
operator|+
name|raf
operator|.
name|getManager
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|appenderControl
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Fail if mis-configured.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|LlapWrappedAppender
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"name="
operator|+
name|getName
argument_list|()
operator|+
literal|" unable to setup actual appender."
operator|+
literal|"Could not find child appender"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Fail if mis-configured.
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|LlapWrappedAppender
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"name="
operator|+
name|getName
argument_list|()
operator|+
literal|" unable to setup actual appender."
operator|+
literal|"Could not find child appender"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|this
operator|.
name|isStopping
argument_list|()
operator|||
name|this
operator|.
name|isStopped
argument_list|()
operator|)
condition|)
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|appenderControl
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|appenderControl
operator|.
name|get
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
name|realAppender
operator|.
name|get
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Stop invoked for "
operator|+
operator|(
operator|(
name|RandomAccessFileAppender
operator|)
name|realAppender
operator|.
name|get
argument_list|()
operator|)
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|realAppender
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"RealAppender is null. Ignoring stop"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RandomAccessFileAppender
name|raf
init|=
operator|(
name|RandomAccessFileAppender
operator|)
name|realAppender
operator|.
name|get
argument_list|()
decl_stmt|;
name|Path
name|renamedPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|renameFileOnClose
condition|)
block|{
try|try
block|{
comment|// Look for a file to which we can move the existing file. With external services,
comment|// it's possible for the service to be marked complete after each fragment.
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|renamedPath
operator|=
name|getRenamedPath
argument_list|(
name|raf
operator|.
name|getFileName
argument_list|()
argument_list|,
name|counter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|renamedPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Renaming file: "
operator|+
name|raf
operator|.
name|getFileName
argument_list|()
operator|+
literal|" to "
operator|+
name|renamedPath
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|move
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|raf
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|,
name|renamedPath
argument_list|)
expr_stmt|;
break|break;
block|}
name|counter
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Bail on an exception - out of the loop.
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Failed to rename file: "
operator|+
name|raf
operator|.
name|getFileName
argument_list|()
operator|+
literal|" to "
operator|+
name|renamedPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Path
name|getRenamedPath
parameter_list|(
name|String
name|originalFileName
parameter_list|,
name|int
name|iteration
parameter_list|)
block|{
name|Path
name|renamedPath
decl_stmt|;
if|if
condition|(
name|iteration
operator|==
literal|0
condition|)
block|{
name|renamedPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|originalFileName
operator|+
name|renamedFileSuffix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|renamedPath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|originalFileName
operator|+
literal|"."
operator|+
name|iteration
operator|+
name|renamedFileSuffix
argument_list|)
expr_stmt|;
block|}
return|return
name|renamedPath
return|;
block|}
annotation|@
name|PluginFactory
specifier|public
specifier|static
name|LlapWrappedAppender
name|createAppender
parameter_list|(
annotation|@
name|PluginAttribute
argument_list|(
literal|"name"
argument_list|)
specifier|final
name|String
name|name
parameter_list|,
comment|// This isn't really used for anything.
annotation|@
name|PluginAttribute
argument_list|(
literal|"renameFileOnClose"
argument_list|)
specifier|final
name|String
name|renameFileOnCloseProvided
parameter_list|,
annotation|@
name|PluginAttribute
argument_list|(
literal|"renamedFileSuffix"
argument_list|)
specifier|final
name|String
name|renamedFileSuffixProvided
parameter_list|,
annotation|@
name|PluginNode
specifier|final
name|Node
name|node
parameter_list|,
annotation|@
name|PluginConfiguration
specifier|final
name|Configuration
name|config
parameter_list|)
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"PluginConfiguration not expected to be null"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Node must be specified as an appender specification"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|boolean
name|renameFileOnClose
init|=
name|DEFAULT_RENAME_FILES_ON_CLOSE
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|renameFileOnCloseProvided
argument_list|)
condition|)
block|{
name|renameFileOnClose
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|renameFileOnCloseProvided
argument_list|)
expr_stmt|;
block|}
name|String
name|renamedFileSuffix
init|=
name|DEFAULT_RENAMED_FILE_SUFFIX
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|isNotBlank
argument_list|(
name|renamedFileSuffixProvided
argument_list|)
condition|)
block|{
name|renamedFileSuffix
operator|=
name|renamedFileSuffixProvided
expr_stmt|;
block|}
return|return
operator|new
name|LlapWrappedAppender
argument_list|(
name|name
argument_list|,
name|node
argument_list|,
name|config
argument_list|,
name|renameFileOnClose
argument_list|,
name|renamedFileSuffix
argument_list|)
return|;
block|}
block|}
end_class

end_unit

