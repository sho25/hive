begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|comparator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorService
operator|.
name|TaskWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskRunnerCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
import|;
end_import

begin_comment
comment|// if map tasks and reduce tasks are in finishable state then priority is given to the task in
end_comment

begin_comment
comment|// the following order
end_comment

begin_comment
comment|// 1) Dag start time
end_comment

begin_comment
comment|// 2) Within dag priority
end_comment

begin_comment
comment|// 3) Attempt start time
end_comment

begin_comment
comment|// 4) Vertex parallelism
end_comment

begin_class
specifier|public
class|class
name|FirstInFirstOutComparator
implements|implements
name|Comparator
argument_list|<
name|TaskWrapper
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TaskWrapper
name|t1
parameter_list|,
name|TaskWrapper
name|t2
parameter_list|)
block|{
name|TaskRunnerCallable
name|o1
init|=
name|t1
operator|.
name|getTaskRunnerCallable
argument_list|()
decl_stmt|;
name|TaskRunnerCallable
name|o2
init|=
name|t2
operator|.
name|getTaskRunnerCallable
argument_list|()
decl_stmt|;
name|boolean
name|o1CanFinish
init|=
name|o1
operator|.
name|canFinish
argument_list|()
decl_stmt|;
name|boolean
name|o2CanFinish
init|=
name|o2
operator|.
name|canFinish
argument_list|()
decl_stmt|;
if|if
condition|(
name|o1CanFinish
operator|==
literal|true
operator|&&
name|o2CanFinish
operator|==
literal|false
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o1CanFinish
operator|==
literal|false
operator|&&
name|o2CanFinish
operator|==
literal|true
condition|)
block|{
return|return
literal|1
return|;
block|}
name|LlapDaemonProtocolProtos
operator|.
name|FragmentRuntimeInfo
name|fri1
init|=
name|o1
operator|.
name|getFragmentRuntimeInfo
argument_list|()
decl_stmt|;
name|LlapDaemonProtocolProtos
operator|.
name|FragmentRuntimeInfo
name|fri2
init|=
name|o2
operator|.
name|getFragmentRuntimeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|fri1
operator|.
name|getDagStartTime
argument_list|()
operator|<
name|fri2
operator|.
name|getDagStartTime
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|fri1
operator|.
name|getDagStartTime
argument_list|()
operator|>
name|fri2
operator|.
name|getDagStartTime
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// Check if these belong to the same task, and work with withinDagPriority
if|if
condition|(
name|o1
operator|.
name|getQueryId
argument_list|()
operator|.
name|equals
argument_list|(
name|o2
operator|.
name|getQueryId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Same Query
comment|// Within dag priority - lower values indicate higher priority.
if|if
condition|(
name|fri1
operator|.
name|getWithinDagPriority
argument_list|()
operator|<
name|fri2
operator|.
name|getWithinDagPriority
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|fri1
operator|.
name|getWithinDagPriority
argument_list|()
operator|>
name|fri2
operator|.
name|getWithinDagPriority
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
if|if
condition|(
name|fri1
operator|.
name|getFirstAttemptStartTime
argument_list|()
operator|<
name|fri2
operator|.
name|getFirstAttemptStartTime
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|fri1
operator|.
name|getFirstAttemptStartTime
argument_list|()
operator|>
name|fri2
operator|.
name|getFirstAttemptStartTime
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// Compute knownPending tasks. selfAndUpstream indicates task counts for current vertex and
comment|// it's parent hierarchy. selfAndUpstreamComplete indicates how many of these have completed.
name|int
name|knownPending1
init|=
name|fri1
operator|.
name|getNumSelfAndUpstreamTasks
argument_list|()
operator|-
name|fri1
operator|.
name|getNumSelfAndUpstreamCompletedTasks
argument_list|()
decl_stmt|;
name|int
name|knownPending2
init|=
name|fri2
operator|.
name|getNumSelfAndUpstreamTasks
argument_list|()
operator|-
name|fri2
operator|.
name|getNumSelfAndUpstreamCompletedTasks
argument_list|()
decl_stmt|;
if|if
condition|(
name|knownPending1
operator|<
name|knownPending2
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|knownPending1
operator|>
name|knownPending2
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

