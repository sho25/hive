begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapReduceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Copy auxiliary jars for the tarball. */
end_comment

begin_class
class|class
name|AsyncTaskCopyAuxJars
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncTaskCopyAuxJars
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_AUX_CLASSES
init|=
operator|new
name|String
index|[]
block|{
literal|"org.apache.hive.hcatalog.data.JsonSerDe"
block|,
literal|"org.apache.hadoop.hive.druid.DruidStorageHandler"
block|,
literal|"org.apache.hive.storage.jdbc.JdbcStorageHandler"
block|,
literal|"org.apache.commons.dbcp.BasicDataSourceFactory"
block|,
literal|"org.apache.commons.pool.impl.GenericObjectPool"
block|,
literal|"org.apache.hadoop.hive.kafka.KafkaStorageHandler"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HBASE_SERDE_CLASS
init|=
literal|"org.apache.hadoop.hive.hbase.HBaseSerDe"
decl_stmt|;
specifier|private
specifier|final
name|LlapServiceCommandLine
name|cl
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|rawFs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|libDir
decl_stmt|;
name|AsyncTaskCopyAuxJars
parameter_list|(
name|LlapServiceCommandLine
name|cl
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|FileSystem
name|rawFs
parameter_list|,
name|Path
name|libDir
parameter_list|)
block|{
name|this
operator|.
name|cl
operator|=
name|cl
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rawFs
operator|=
name|rawFs
expr_stmt|;
name|this
operator|.
name|libDir
operator|=
name|libDir
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|localizeJarForClass
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DEFAULT_AUX_CLASSES
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|localizeJarForClass
argument_list|(
name|conf
operator|.
name|getStringCollection
argument_list|(
literal|"io.compression.codecs"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|localizeJarForClass
argument_list|(
name|getDbSpecificJdbcJars
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|getIsHBase
argument_list|()
condition|)
block|{
try|try
block|{
name|localizeJarForClass
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|HBASE_SERDE_CLASS
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Job
name|fakeJob
init|=
name|Job
operator|.
name|getInstance
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// HBase API is convoluted.
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|fakeJob
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|hbaseJars
init|=
name|fakeJob
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getStringCollection
argument_list|(
literal|"tmpjars"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|jarPath
range|:
name|hbaseJars
control|)
block|{
if|if
condition|(
operator|!
name|jarPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rawFs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|jarPath
argument_list|)
argument_list|,
name|libDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|err
init|=
literal|"Failed to add HBase jars. Use --auxhbase=false to avoid localizing them"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|auxJars
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// There are many ways to have AUX jars in Hive... sigh
if|if
condition|(
name|cl
operator|.
name|getIsHiveAux
argument_list|()
condition|)
block|{
comment|// Note: we don't add ADDED jars, RELOADABLE jars, etc. That is by design; there are too many ways
comment|// to add jars in Hive, some of which are session/etc. specific. Env + conf + arg should be enough.
name|addAuxJarsToSet
argument_list|(
name|auxJars
argument_list|,
name|conf
operator|.
name|getAuxJars
argument_list|()
argument_list|,
literal|","
argument_list|)
expr_stmt|;
name|addAuxJarsToSet
argument_list|(
name|auxJars
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_AUX_JARS_PATH"
argument_list|)
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding the following aux jars from the environment and configs: "
operator|+
name|auxJars
argument_list|)
expr_stmt|;
block|}
name|addAuxJarsToSet
argument_list|(
name|auxJars
argument_list|,
name|cl
operator|.
name|getAuxJars
argument_list|()
argument_list|,
literal|","
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|jarPath
range|:
name|auxJars
control|)
block|{
name|rawFs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|jarPath
argument_list|)
argument_list|,
name|libDir
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|localizeJarForClass
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|classNames
parameter_list|,
name|boolean
name|doThrow
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|classNames
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|className
range|:
name|classNames
control|)
block|{
name|String
name|jarPath
init|=
literal|null
decl_stmt|;
name|boolean
name|hasException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|jarPath
operator|=
name|Utilities
operator|.
name|jarFinderGetJar
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|doThrow
condition|)
block|{
throw|throw
operator|(
name|t
operator|instanceof
name|IOException
operator|)
condition|?
operator|(
name|IOException
operator|)
name|t
else|:
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
name|hasException
operator|=
literal|true
expr_stmt|;
name|String
name|err
init|=
literal|"Cannot find a jar for ["
operator|+
name|className
operator|+
literal|"] due to an exception ("
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|"); not packaging the jar"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jarPath
operator|!=
literal|null
condition|)
block|{
name|rawFs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|jarPath
argument_list|)
argument_list|,
name|libDir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|hasException
condition|)
block|{
name|String
name|err
init|=
literal|"Cannot find a jar for ["
operator|+
name|className
operator|+
literal|"]; not packaging the jar"
decl_stmt|;
if|if
condition|(
name|doThrow
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|err
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getDbSpecificJdbcJars
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|jdbcJars
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addJarForClassToListIfExists
argument_list|(
literal|"com.mysql.jdbc.Driver"
argument_list|,
name|jdbcJars
argument_list|)
expr_stmt|;
comment|// add mysql jdbc driver
name|addJarForClassToListIfExists
argument_list|(
literal|"org.postgresql.Driver"
argument_list|,
name|jdbcJars
argument_list|)
expr_stmt|;
comment|// add postgresql jdbc driver
name|addJarForClassToListIfExists
argument_list|(
literal|"oracle.jdbc.OracleDriver"
argument_list|,
name|jdbcJars
argument_list|)
expr_stmt|;
comment|// add oracle jdbc driver
name|addJarForClassToListIfExists
argument_list|(
literal|"com.microsoft.sqlserver.jdbc.SQLServerDriver"
argument_list|,
name|jdbcJars
argument_list|)
expr_stmt|;
comment|// add mssql jdbc driver
return|return
name|jdbcJars
return|;
block|}
specifier|private
name|void
name|addJarForClassToListIfExists
parameter_list|(
name|String
name|cls
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|jarList
parameter_list|)
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|cls
argument_list|)
expr_stmt|;
name|jarList
operator|.
name|add
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
block|}
specifier|private
name|void
name|addAuxJarsToSet
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|auxJarSet
parameter_list|,
name|String
name|auxJars
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|auxJars
argument_list|)
condition|)
block|{
comment|// TODO: transitive dependencies warning?
name|String
index|[]
name|jarPaths
init|=
name|auxJars
operator|.
name|split
argument_list|(
name|delimiter
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|jarPath
range|:
name|jarPaths
control|)
block|{
if|if
condition|(
operator|!
name|jarPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|auxJarSet
operator|.
name|add
argument_list|(
name|jarPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

