begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|configuration
operator|.
name|LlapDaemonConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|LlapConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Copy config files for the tarball. */
end_comment

begin_class
class|class
name|AsyncTaskCopyConfigs
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncTaskCopyConfigs
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LlapServiceCommandLine
name|cl
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|Properties
name|directProperties
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|rawFs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|confDir
decl_stmt|;
name|AsyncTaskCopyConfigs
parameter_list|(
name|LlapServiceCommandLine
name|cl
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|Properties
name|directProperties
parameter_list|,
name|FileSystem
name|rawFs
parameter_list|,
name|Path
name|confDir
parameter_list|)
block|{
name|this
operator|.
name|cl
operator|=
name|cl
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|directProperties
operator|=
name|directProperties
expr_stmt|;
name|this
operator|.
name|rawFs
operator|=
name|rawFs
expr_stmt|;
name|this
operator|.
name|confDir
operator|=
name|confDir
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Copy over the mandatory configs for the package.
for|for
control|(
name|String
name|f
range|:
name|LlapDaemonConfiguration
operator|.
name|DAEMON_CONFIGS
control|)
block|{
name|copyConfig
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|f
range|:
name|LlapDaemonConfiguration
operator|.
name|SSL_DAEMON_CONFIGS
control|)
block|{
try|try
block|{
name|copyConfig
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting an optional config "
operator|+
name|f
operator|+
literal|"; ignoring: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|createLlapDaemonConfig
argument_list|()
expr_stmt|;
name|setUpLoggerConfig
argument_list|()
expr_stmt|;
name|setUpMetricsConfig
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|copyConfig
parameter_list|(
name|String
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|,
name|ConfVars
operator|.
name|LLAP_CLIENT_CONSISTENT_SPLITS
argument_list|)
expr_stmt|;
comment|// they will be file:// URLs
name|rawFs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getResource
argument_list|(
name|f
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|confDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createLlapDaemonConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|confStream
init|=
name|rawFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|confDir
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_SITE
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|llapDaemonConf
init|=
name|resolve
argument_list|()
decl_stmt|;
name|llapDaemonConf
operator|.
name|writeXml
argument_list|(
name|confStream
argument_list|)
expr_stmt|;
name|confStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Configuration
name|resolve
parameter_list|()
block|{
name|Configuration
name|target
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|populateConf
argument_list|(
name|target
argument_list|,
name|cl
operator|.
name|getConfig
argument_list|()
argument_list|,
literal|"CLI hiveconf"
argument_list|)
expr_stmt|;
name|populateConf
argument_list|(
name|target
argument_list|,
name|directProperties
argument_list|,
literal|"CLI direct"
argument_list|)
expr_stmt|;
return|return
name|target
return|;
block|}
specifier|private
name|void
name|populateConf
parameter_list|(
name|Configuration
name|target
parameter_list|,
name|Properties
name|properties
parameter_list|,
name|String
name|source
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|target
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|val
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setUpLoggerConfig
parameter_list|()
throws|throws
name|Exception
block|{
comment|// logger can be a resource stream or a real file (cannot use copy)
name|URL
name|logger
init|=
name|conf
operator|.
name|getResource
argument_list|(
name|LlapConstants
operator|.
name|LOG4j2_PROPERTIES_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|logger
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to find required config file: llap-daemon-log4j2.properties"
argument_list|)
throw|;
block|}
name|InputStream
name|loggerContent
init|=
name|logger
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|loggerContent
argument_list|,
name|rawFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|confDir
argument_list|,
literal|"llap-daemon-log4j2.properties"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpMetricsConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|metricsFile
init|=
name|LlapConstants
operator|.
name|LLAP_HADOOP_METRICS2_PROPERTIES_FILE
decl_stmt|;
name|URL
name|metrics2
init|=
name|conf
operator|.
name|getResource
argument_list|(
name|metricsFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics2
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|LlapConstants
operator|.
name|LLAP_HADOOP_METRICS2_PROPERTIES_FILE
operator|+
literal|" cannot be found."
operator|+
literal|" Looking for "
operator|+
name|LlapConstants
operator|.
name|HADOOP_METRICS2_PROPERTIES_FILE
argument_list|)
expr_stmt|;
name|metricsFile
operator|=
name|LlapConstants
operator|.
name|HADOOP_METRICS2_PROPERTIES_FILE
expr_stmt|;
name|metrics2
operator|=
name|conf
operator|.
name|getResource
argument_list|(
name|metricsFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metrics2
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|metrics2FileStream
init|=
name|metrics2
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|metrics2FileStream
argument_list|,
name|rawFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|confDir
argument_list|,
name|metricsFile
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Copied hadoop metrics2 properties file from "
operator|+
name|metrics2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot find "
operator|+
name|LlapConstants
operator|.
name|LLAP_HADOOP_METRICS2_PROPERTIES_FILE
operator|+
literal|" or "
operator|+
name|LlapConstants
operator|.
name|HADOOP_METRICS2_PROPERTIES_FILE
operator|+
literal|" in classpath."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

