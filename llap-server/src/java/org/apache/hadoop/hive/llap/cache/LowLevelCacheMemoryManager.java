begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonCacheMetrics
import|;
end_import

begin_class
specifier|public
class|class
name|LowLevelCacheMemoryManager
implements|implements
name|MemoryManager
block|{
specifier|private
specifier|final
name|AtomicLong
name|usedMemory
decl_stmt|;
specifier|protected
specifier|final
name|long
name|maxSize
decl_stmt|;
specifier|private
specifier|final
name|LowLevelCachePolicy
name|evictor
decl_stmt|;
specifier|private
name|LlapDaemonCacheMetrics
name|metrics
decl_stmt|;
specifier|public
name|LowLevelCacheMemoryManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|LowLevelCachePolicy
name|evictor
parameter_list|,
name|LlapDaemonCacheMetrics
name|metrics
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_MAX_SIZE
argument_list|)
expr_stmt|;
name|this
operator|.
name|evictor
operator|=
name|evictor
expr_stmt|;
name|this
operator|.
name|usedMemory
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|metrics
operator|.
name|incrCacheCapacityTotal
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOGL
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache memory manager initialized with max size "
operator|+
name|maxSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|reserveMemory
parameter_list|(
name|long
name|memoryToReserve
parameter_list|,
name|boolean
name|waitForEviction
parameter_list|)
block|{
comment|// TODO: if this cannot evict enough, it will spin infinitely. Terminate at some point?
while|while
condition|(
name|memoryToReserve
operator|>
literal|0
condition|)
block|{
name|long
name|usedMem
init|=
name|usedMemory
operator|.
name|get
argument_list|()
decl_stmt|,
name|newUsedMem
init|=
name|usedMem
operator|+
name|memoryToReserve
decl_stmt|;
if|if
condition|(
name|newUsedMem
operator|<=
name|maxSize
condition|)
block|{
if|if
condition|(
name|usedMemory
operator|.
name|compareAndSet
argument_list|(
name|usedMem
argument_list|,
name|newUsedMem
argument_list|)
condition|)
break|break;
continue|continue;
block|}
comment|// TODO: for one-block case, we could move notification for the last block out of the loop.
name|long
name|evicted
init|=
name|evictor
operator|.
name|evictSomeBlocks
argument_list|(
name|memoryToReserve
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|waitForEviction
operator|&&
name|evicted
operator|==
literal|0
condition|)
return|return
literal|false
return|;
comment|// Adjust the memory - we have to account for what we have just evicted.
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|reserveWithEviction
init|=
name|Math
operator|.
name|min
argument_list|(
name|memoryToReserve
argument_list|,
name|maxSize
operator|-
name|usedMem
operator|+
name|evicted
argument_list|)
decl_stmt|;
if|if
condition|(
name|usedMemory
operator|.
name|compareAndSet
argument_list|(
name|usedMem
argument_list|,
name|usedMem
operator|-
name|evicted
operator|+
name|reserveWithEviction
argument_list|)
condition|)
block|{
name|memoryToReserve
operator|-=
name|reserveWithEviction
expr_stmt|;
break|break;
block|}
name|usedMem
operator|=
name|usedMemory
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
name|metrics
operator|.
name|incrCacheCapacityUsed
argument_list|(
name|memoryToReserve
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

