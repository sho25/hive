begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|counters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLongArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|MetricsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|CounterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounters
import|;
end_import

begin_comment
comment|/**  * Per query counters.  */
end_comment

begin_class
specifier|public
class|class
name|WmFragmentCounters
block|{
specifier|private
specifier|static
enum|enum
name|State
block|{
name|NONE
block|,
name|QUEUED
block|,
name|RUNNING
block|,
name|DONE
block|}
empty_stmt|;
specifier|private
name|State
name|currentState
init|=
name|State
operator|.
name|NONE
decl_stmt|;
specifier|private
name|LlapWmCounters
name|currentCounter
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|currentCounterStartTime
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|AtomicLongArray
name|fixedCounters
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|addTaskTimeCounters
decl_stmt|;
specifier|public
name|WmFragmentCounters
parameter_list|(
name|boolean
name|addTaskTimeCounters
parameter_list|)
block|{
comment|// Note: WmFragmentCounters are created before Tez counters are created.
name|this
operator|.
name|fixedCounters
operator|=
operator|new
name|AtomicLongArray
argument_list|(
name|LlapWmCounters
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|addTaskTimeCounters
operator|=
name|addTaskTimeCounters
expr_stmt|;
block|}
specifier|public
name|void
name|changeStateQueued
parameter_list|(
name|boolean
name|isGuaranteed
parameter_list|)
block|{
name|changeState
argument_list|(
name|State
operator|.
name|QUEUED
argument_list|,
name|getQueuedCounter
argument_list|(
name|isGuaranteed
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeStateRunning
parameter_list|(
name|boolean
name|isGuaranteed
parameter_list|)
block|{
name|changeState
argument_list|(
name|State
operator|.
name|RUNNING
argument_list|,
name|getRunningCounter
argument_list|(
name|isGuaranteed
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|LlapWmCounters
name|getQueuedCounter
parameter_list|(
name|boolean
name|isGuaranteed
parameter_list|)
block|{
return|return
name|isGuaranteed
condition|?
name|LlapWmCounters
operator|.
name|GUARANTEED_QUEUED_NS
else|:
name|LlapWmCounters
operator|.
name|SPECULATIVE_QUEUED_NS
return|;
block|}
specifier|private
specifier|static
name|LlapWmCounters
name|getRunningCounter
parameter_list|(
name|boolean
name|isGuaranteed
parameter_list|)
block|{
return|return
name|isGuaranteed
condition|?
name|LlapWmCounters
operator|.
name|GUARANTEED_RUNNING_NS
else|:
name|LlapWmCounters
operator|.
name|SPECULATIVE_RUNNING_NS
return|;
block|}
specifier|public
name|void
name|changeStateDone
parameter_list|()
block|{
name|changeState
argument_list|(
name|State
operator|.
name|DONE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeGuaranteed
parameter_list|(
name|boolean
name|isGuaranteed
parameter_list|)
block|{
name|long
name|newTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|oldTime
init|=
operator|-
literal|1
decl_stmt|;
name|LlapWmCounters
name|oldCounter
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|LlapWmCounters
name|counter
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|currentState
condition|)
block|{
case|case
name|DONE
case|:
case|case
name|NONE
case|:
return|return;
case|case
name|QUEUED
case|:
name|counter
operator|=
name|getQueuedCounter
argument_list|(
name|isGuaranteed
argument_list|)
expr_stmt|;
break|break;
case|case
name|RUNNING
case|:
name|counter
operator|=
name|getRunningCounter
argument_list|(
name|isGuaranteed
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
name|currentState
argument_list|)
throw|;
block|}
if|if
condition|(
name|counter
operator|==
name|currentCounter
condition|)
return|return;
if|if
condition|(
name|currentCounter
operator|!=
literal|null
condition|)
block|{
name|oldCounter
operator|=
name|currentCounter
expr_stmt|;
name|oldTime
operator|=
name|currentCounterStartTime
expr_stmt|;
block|}
name|currentCounter
operator|=
name|counter
expr_stmt|;
name|currentCounterStartTime
operator|=
name|newTime
expr_stmt|;
block|}
if|if
condition|(
name|oldCounter
operator|!=
literal|null
condition|)
block|{
name|incrCounter
argument_list|(
name|oldCounter
argument_list|,
name|newTime
operator|-
name|oldTime
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|changeState
parameter_list|(
name|State
name|newState
parameter_list|,
name|LlapWmCounters
name|counter
parameter_list|)
block|{
comment|// Note: there are so many different onSuccess/onFailure callbacks floating around that
comment|//       this will probably be called twice for the done state. This is ok given the sync.
name|long
name|newTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|oldTime
init|=
operator|-
literal|1
decl_stmt|;
name|LlapWmCounters
name|oldCounter
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|newState
operator|.
name|ordinal
argument_list|()
operator|<
name|currentState
operator|.
name|ordinal
argument_list|()
condition|)
return|return;
if|if
condition|(
name|counter
operator|==
name|currentCounter
condition|)
return|return;
if|if
condition|(
name|currentCounter
operator|!=
literal|null
condition|)
block|{
name|oldCounter
operator|=
name|currentCounter
expr_stmt|;
name|oldTime
operator|=
name|currentCounterStartTime
expr_stmt|;
block|}
name|currentCounter
operator|=
name|counter
expr_stmt|;
name|currentState
operator|=
name|newState
expr_stmt|;
name|currentCounterStartTime
operator|=
name|newTime
expr_stmt|;
block|}
if|if
condition|(
name|oldCounter
operator|!=
literal|null
condition|)
block|{
name|incrCounter
argument_list|(
name|oldCounter
argument_list|,
name|newTime
operator|-
name|oldTime
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|incrCounter
parameter_list|(
name|LlapWmCounters
name|counter
parameter_list|,
name|long
name|delta
parameter_list|)
block|{
name|fixedCounters
operator|.
name|addAndGet
argument_list|(
name|counter
operator|.
name|ordinal
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dumpToTezCounters
parameter_list|(
name|TezCounters
name|tezCounters
parameter_list|,
name|boolean
name|isLast
parameter_list|)
block|{
if|if
condition|(
name|isLast
condition|)
block|{
name|changeStateDone
argument_list|()
expr_stmt|;
comment|// Record the final counters.
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedCounters
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|tezCounters
operator|.
name|findCounter
argument_list|(
name|LlapWmCounters
operator|.
name|values
argument_list|()
index|[
name|i
index|]
argument_list|)
operator|.
name|setValue
argument_list|(
name|fixedCounters
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add queue and runtime (together with task count) on a "per daemon" level
comment|// to the Tez counters.
if|if
condition|(
name|addTaskTimeCounters
condition|)
block|{
name|String
name|hostName
init|=
name|MetricsUtils
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|long
name|queued
init|=
name|fixedCounters
operator|.
name|get
argument_list|(
name|LlapWmCounters
operator|.
name|GUARANTEED_QUEUED_NS
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|+
name|fixedCounters
operator|.
name|get
argument_list|(
name|LlapWmCounters
operator|.
name|SPECULATIVE_QUEUED_NS
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|running
init|=
name|fixedCounters
operator|.
name|get
argument_list|(
name|LlapWmCounters
operator|.
name|GUARANTEED_RUNNING_NS
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|+
name|fixedCounters
operator|.
name|get
argument_list|(
name|LlapWmCounters
operator|.
name|SPECULATIVE_RUNNING_NS
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
name|CounterGroup
name|cg
init|=
name|tezCounters
operator|.
name|getGroup
argument_list|(
literal|"LlapTaskRuntimeAgg by daemon"
argument_list|)
decl_stmt|;
name|cg
operator|.
name|findCounter
argument_list|(
literal|"QueueTime-"
operator|+
name|hostName
argument_list|)
operator|.
name|setValue
argument_list|(
name|queued
argument_list|)
expr_stmt|;
name|cg
operator|.
name|findCounter
argument_list|(
literal|"RunTime-"
operator|+
name|hostName
argument_list|)
operator|.
name|setValue
argument_list|(
name|running
argument_list|)
expr_stmt|;
name|cg
operator|.
name|findCounter
argument_list|(
literal|"Count-"
operator|+
name|hostName
argument_list|)
operator|.
name|setValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// We rely on NDC information in the logs to map counters to attempt.
comment|// If that is not available, appId should either be passed in, or extracted from NDC.
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"[ "
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedCounters
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|LlapWmCounters
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|fixedCounters
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" ]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

