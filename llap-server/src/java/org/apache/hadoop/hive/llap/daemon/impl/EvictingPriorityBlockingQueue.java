begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Bounded priority queue that evicts the last element based on priority order specified  * through comparator. Elements that are added to the queue are sorted based on the specified  * comparator. If the queue is full and if a new element is added to it, the new element is compared  * with the last element so as to claim a spot. The evicted element (or the added item) is then  * returned back. If the queue is not full, new element will be added to queue and null is returned.  */
end_comment

begin_class
specifier|public
class|class
name|EvictingPriorityBlockingQueue
parameter_list|<
name|E
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EvictingPriorityBlockingQueue
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PriorityBlockingDeque
argument_list|<
name|E
argument_list|>
name|deque
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|E
argument_list|>
name|comparator
decl_stmt|;
specifier|private
specifier|final
name|int
name|waitQueueSize
decl_stmt|;
specifier|private
name|int
name|currentSize
init|=
literal|0
decl_stmt|;
specifier|public
name|EvictingPriorityBlockingQueue
parameter_list|(
name|Comparator
argument_list|<
name|E
argument_list|>
name|comparator
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|deque
operator|=
operator|new
name|PriorityBlockingDeque
argument_list|<>
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|waitQueueSize
operator|=
name|maxSize
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|apply
parameter_list|(
name|Function
argument_list|<
name|E
argument_list|,
name|Boolean
argument_list|>
name|fn
parameter_list|)
block|{
for|for
control|(
name|E
name|item
range|:
name|deque
control|)
block|{
name|boolean
name|isOk
init|=
name|fn
operator|.
name|apply
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isOk
condition|)
return|return;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|forceOffer
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|offerToDequeueInternal
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|currentSize
operator|++
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|E
name|offer
parameter_list|(
name|E
name|e
parameter_list|,
name|int
name|additionalElementsAllowed
parameter_list|)
block|{
if|if
condition|(
name|currentSize
operator|<
name|waitQueueSize
operator|+
name|additionalElementsAllowed
condition|)
block|{
comment|// Capacity exists.
name|offerToDequeueInternal
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|currentSize
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Empty queue. But no capacity available, due to waitQueueSize and additionalElementsAllowed
comment|// Return the element.
return|return
name|e
return|;
block|}
comment|// No capacity. Check if an element needs to be evicted.
name|E
name|last
init|=
name|deque
operator|.
name|peekLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|e
argument_list|,
name|last
argument_list|)
operator|<
literal|0
condition|)
block|{
name|deque
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|offerToDequeueInternal
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|last
return|;
block|}
return|return
name|e
return|;
block|}
block|}
specifier|public
specifier|synchronized
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|currentSize
operator|==
literal|0
return|;
block|}
specifier|public
specifier|synchronized
name|E
name|peek
parameter_list|()
block|{
return|return
name|deque
operator|.
name|peek
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|E
name|take
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|E
name|e
init|=
name|deque
operator|.
name|take
argument_list|()
decl_stmt|;
name|currentSize
operator|--
expr_stmt|;
comment|// Decrement only if an element was removed.
return|return
name|e
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|remove
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|boolean
name|removed
init|=
name|deque
operator|.
name|remove
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
condition|)
block|{
name|currentSize
operator|--
expr_stmt|;
block|}
return|return
name|removed
return|;
block|}
specifier|private
name|void
name|offerToDequeueInternal
parameter_list|(
name|E
name|e
parameter_list|)
block|{
name|boolean
name|result
init|=
name|deque
operator|.
name|offer
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to insert element into queue with capacity available. size={}, element={}"
argument_list|,
name|size
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to insert element into queue with capacity available. size="
operator|+
name|size
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|currentSize
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"currentSize="
argument_list|)
operator|.
name|append
argument_list|(
name|size
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", queue="
argument_list|)
operator|.
name|append
argument_list|(
name|deque
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

