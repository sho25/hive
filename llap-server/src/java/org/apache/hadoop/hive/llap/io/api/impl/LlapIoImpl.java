begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LogLevels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|BuddyAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|EvictionAwareAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|EvictionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCacheImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCacheMemoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCachePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelFifoCachePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelLrfuCachePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|NoopCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|LlapIo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|Allocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|orc
operator|.
name|OrcCacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|decode
operator|.
name|ColumnVectorProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|decode
operator|.
name|OrcColumnVectorProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
operator|.
name|OrcMetadataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonCacheMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonQueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|MetricsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
operator|.
name|MBeans
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_class
specifier|public
class|class
name|LlapIoImpl
implements|implements
name|LlapIo
argument_list|<
name|VectorizedRowBatch
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LlapIoImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|LogLevels
name|LOGL
init|=
operator|new
name|LogLevels
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ColumnVectorProducer
name|cvp
decl_stmt|;
specifier|private
specifier|final
name|ListeningExecutorService
name|executor
decl_stmt|;
specifier|private
name|LlapDaemonCacheMetrics
name|cacheMetrics
decl_stmt|;
specifier|private
name|LlapDaemonQueueMetrics
name|queueMetrics
decl_stmt|;
specifier|private
name|ObjectName
name|buddyAllocatorMXBean
decl_stmt|;
specifier|private
name|EvictionAwareAllocator
name|allocator
decl_stmt|;
specifier|private
name|LlapIoImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|useLowLevelCache
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_LOW_LEVEL_CACHE
argument_list|)
decl_stmt|;
comment|// High-level cache not supported yet.
if|if
condition|(
name|LOGL
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing LLAP IO"
operator|+
operator|(
name|useLowLevelCache
condition|?
literal|" with low level cache"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|String
name|displayName
init|=
literal|"LlapDaemonCacheMetrics-"
operator|+
name|MetricsUtils
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|String
name|sessionId
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"llap.daemon.metrics.sessionid"
argument_list|)
decl_stmt|;
name|this
operator|.
name|cacheMetrics
operator|=
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
name|displayName
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|displayName
operator|=
literal|"LlapDaemonQueueMetrics-"
operator|+
name|MetricsUtils
operator|.
name|getHostName
argument_list|()
expr_stmt|;
name|int
index|[]
name|intervals
init|=
name|conf
operator|.
name|getInts
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_QUEUE_METRICS_PERCENTILE_INTERVALS
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|queueMetrics
operator|=
name|LlapDaemonQueueMetrics
operator|.
name|create
argument_list|(
name|displayName
argument_list|,
name|sessionId
argument_list|,
name|intervals
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started llap daemon metrics with displayName: "
operator|+
name|displayName
operator|+
literal|" sessionId: "
operator|+
name|sessionId
argument_list|)
expr_stmt|;
name|Cache
argument_list|<
name|OrcCacheKey
argument_list|>
name|cache
init|=
name|useLowLevelCache
condition|?
literal|null
else|:
operator|new
name|NoopCache
argument_list|<
name|OrcCacheKey
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|useLrfu
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_USE_LRFU
argument_list|)
decl_stmt|;
name|LowLevelCachePolicy
name|cachePolicy
init|=
name|useLrfu
condition|?
operator|new
name|LowLevelLrfuCachePolicy
argument_list|(
name|conf
argument_list|)
else|:
operator|new
name|LowLevelFifoCachePolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LowLevelCacheMemoryManager
name|memManager
init|=
operator|new
name|LowLevelCacheMemoryManager
argument_list|(
name|conf
argument_list|,
name|cachePolicy
argument_list|,
name|cacheMetrics
argument_list|)
decl_stmt|;
comment|// Memory manager uses cache policy to trigger evictions.
name|OrcMetadataCache
name|metadataCache
init|=
operator|new
name|OrcMetadataCache
argument_list|(
name|memManager
argument_list|,
name|cachePolicy
argument_list|)
decl_stmt|;
name|LowLevelCacheImpl
name|orcCache
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useLowLevelCache
condition|)
block|{
comment|// Allocator uses memory manager to request memory.
name|allocator
operator|=
operator|new
name|BuddyAllocator
argument_list|(
name|conf
argument_list|,
name|memManager
argument_list|,
name|cacheMetrics
argument_list|)
expr_stmt|;
comment|// Cache uses allocator to allocate and deallocate.
name|orcCache
operator|=
operator|new
name|LowLevelCacheImpl
argument_list|(
name|cacheMetrics
argument_list|,
name|cachePolicy
argument_list|,
name|allocator
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// And finally cache policy uses cache to notify it of eviction. The cycle is complete!
name|cachePolicy
operator|.
name|setEvictionListener
argument_list|(
operator|new
name|EvictionDispatcher
argument_list|(
name|orcCache
argument_list|,
name|metadataCache
argument_list|)
argument_list|)
expr_stmt|;
name|orcCache
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cachePolicy
operator|.
name|setEvictionListener
argument_list|(
operator|new
name|EvictionDispatcher
argument_list|(
literal|null
argument_list|,
name|metadataCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Arbitrary thread pool. Listening is used for unhandled errors for now (TODO: remove?)
name|int
name|numThreads
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_IO_THREADPOOL_SIZE
argument_list|)
decl_stmt|;
name|executor
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"IO-Elevator-Thread-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: this should depends on input format and be in a map, or something.
name|this
operator|.
name|cvp
operator|=
operator|new
name|OrcColumnVectorProducer
argument_list|(
name|metadataCache
argument_list|,
name|orcCache
argument_list|,
name|cache
argument_list|,
name|conf
argument_list|,
name|cacheMetrics
argument_list|,
name|queueMetrics
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOGL
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LLAP IO initialized"
argument_list|)
expr_stmt|;
block|}
name|registerMXBeans
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|registerMXBeans
parameter_list|()
block|{
name|buddyAllocatorMXBean
operator|=
name|MBeans
operator|.
name|register
argument_list|(
literal|"LlapDaemon"
argument_list|,
literal|"BuddyAllocatorInfo"
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
specifier|public
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
name|getInputFormat
parameter_list|(
name|InputFormat
name|sourceInputFormat
parameter_list|)
block|{
return|return
operator|new
name|LlapInputFormat
argument_list|(
name|sourceInputFormat
argument_list|,
name|cvp
argument_list|,
name|executor
argument_list|)
return|;
block|}
specifier|public
name|LlapDaemonCacheMetrics
name|getCacheMetrics
parameter_list|()
block|{
return|return
name|cacheMetrics
return|;
block|}
specifier|public
name|LlapDaemonQueueMetrics
name|getQueueMetrics
parameter_list|()
block|{
return|return
name|queueMetrics
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing LlapIoImpl.."
argument_list|)
expr_stmt|;
if|if
condition|(
name|buddyAllocatorMXBean
operator|!=
literal|null
condition|)
block|{
name|MBeans
operator|.
name|unregister
argument_list|(
name|buddyAllocatorMXBean
argument_list|)
expr_stmt|;
name|buddyAllocatorMXBean
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

