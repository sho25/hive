begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
operator|.
name|MapMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|FileAttribute
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonCacheMetrics
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|BuddyAllocator
implements|implements
name|EvictionAwareAllocator
implements|,
name|BuddyAllocatorMXBean
implements|,
name|LlapIoDebugDump
block|{
specifier|private
specifier|final
name|Arena
index|[]
name|arenas
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|allocatedArenas
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MemoryManager
name|memoryManager
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MAX_DUMP_INTERVAL_NS
init|=
literal|300
operator|*
literal|1000000000L
decl_stmt|;
comment|// 5 minutes.
specifier|private
specifier|final
name|AtomicLong
name|lastLog
init|=
operator|new
name|AtomicLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LlapDaemonCacheMetrics
name|metrics
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_DISCARD_ATTEMPTS
init|=
literal|10
decl_stmt|,
name|LOG_DISCARD_ATTEMPTS
init|=
literal|5
decl_stmt|;
comment|// Config settings
specifier|private
specifier|final
name|int
name|minAllocLog2
decl_stmt|,
name|maxAllocLog2
decl_stmt|,
name|arenaSizeLog2
decl_stmt|,
name|maxArenas
decl_stmt|;
specifier|private
specifier|final
name|int
name|minAllocation
decl_stmt|,
name|maxAllocation
decl_stmt|,
name|arenaSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDirect
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isMapped
decl_stmt|;
specifier|private
specifier|final
name|Path
name|cacheDir
decl_stmt|;
comment|// These are only used for tests.
specifier|private
name|boolean
name|enableDefragShortcut
init|=
literal|true
decl_stmt|,
name|oomLogging
init|=
literal|true
decl_stmt|;
comment|// We don't know the acceptable size for Java array, so we'll use 1Gb boundary.
comment|// That is guaranteed to fit any maximum allocation.
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ARENA_SIZE
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// Don't try to operate with less than MIN_SIZE allocator space, it will just give you grief.
specifier|private
specifier|static
specifier|final
name|int
name|MIN_TOTAL_MEMORY_SIZE
init|=
literal|64
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// Maximum reasonable defragmentation headroom. Mostly kicks in on very small caches.
specifier|private
specifier|static
specifier|final
name|float
name|MAX_DEFRAG_HEADROOM_FRACTION
init|=
literal|0.01f
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FileAttribute
argument_list|<
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
argument_list|>
name|RWX
init|=
name|PosixFilePermissions
operator|.
name|asFileAttribute
argument_list|(
name|PosixFilePermissions
operator|.
name|fromString
argument_list|(
literal|"rwx------"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
index|[]
name|defragCounters
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|doUseFreeListDiscard
decl_stmt|,
name|doUseBruteDiscard
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|boolean
name|assertsEnabled
init|=
name|areAssertsEnabled
argument_list|()
decl_stmt|;
comment|// Discard context that is cached for reuse per thread to avoid allocating lots of arrays,
comment|// and then resizing them down the line if we need a bigger size.
comment|// Only the IO threads need this, so there'd be at most few dozen objects.
specifier|private
specifier|final
specifier|static
name|ThreadLocal
argument_list|<
name|DiscardContext
argument_list|>
name|threadCtx
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DiscardContext
argument_list|>
argument_list|()
block|{
specifier|protected
name|DiscardContext
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|DiscardContext
argument_list|()
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
specifier|public
name|BuddyAllocator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MemoryManager
name|mm
parameter_list|,
name|LlapDaemonCacheMetrics
name|metrics
parameter_list|)
block|{
name|this
argument_list|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_DIRECT
argument_list|)
argument_list|,
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MAPPED
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|HiveConf
operator|.
name|getSizeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MIN_ALLOC
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|HiveConf
operator|.
name|getSizeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MAX_ALLOC
argument_list|)
argument_list|,
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_ARENA_COUNT
argument_list|)
argument_list|,
name|getMaxTotalMemorySize
argument_list|(
name|conf
argument_list|)
argument_list|,
name|HiveConf
operator|.
name|getSizeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_DEFRAG_HEADROOM
argument_list|)
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MAPPED_PATH
argument_list|)
argument_list|,
name|mm
argument_list|,
name|metrics
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_DISCARD_METHOD
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|areAssertsEnabled
parameter_list|()
block|{
name|boolean
name|assertsEnabled
init|=
literal|false
decl_stmt|;
assert|assert
name|assertsEnabled
operator|=
literal|true
assert|;
return|return
name|assertsEnabled
return|;
block|}
specifier|private
specifier|static
name|long
name|getMaxTotalMemorySize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|maxSize
init|=
name|HiveConf
operator|.
name|getSizeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_MEMORY_MAX_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxSize
operator|>
name|MIN_TOTAL_MEMORY_SIZE
operator|||
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
condition|)
block|{
return|return
name|maxSize
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Allocator space is too small for reasonable operation; "
operator|+
name|ConfVars
operator|.
name|LLAP_IO_MEMORY_MAX_SIZE
operator|.
name|varname
operator|+
literal|"="
operator|+
name|maxSize
operator|+
literal|", but at least "
operator|+
name|MIN_TOTAL_MEMORY_SIZE
operator|+
literal|" is required. If you cannot spare any memory, you can "
operator|+
literal|"disable LLAP IO entirely via "
operator|+
name|ConfVars
operator|.
name|LLAP_IO_ENABLED
operator|.
name|varname
argument_list|)
throw|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|BuddyAllocator
parameter_list|(
name|boolean
name|isDirectVal
parameter_list|,
name|boolean
name|isMappedVal
parameter_list|,
name|int
name|minAllocVal
parameter_list|,
name|int
name|maxAllocVal
parameter_list|,
name|int
name|arenaCount
parameter_list|,
name|long
name|maxSizeVal
parameter_list|,
name|long
name|defragHeadroom
parameter_list|,
name|String
name|mapPath
parameter_list|,
name|MemoryManager
name|memoryManager
parameter_list|,
name|LlapDaemonCacheMetrics
name|metrics
parameter_list|,
name|String
name|discardMethod
parameter_list|)
block|{
name|isDirect
operator|=
name|isDirectVal
expr_stmt|;
name|isMapped
operator|=
name|isMappedVal
expr_stmt|;
name|minAllocation
operator|=
name|minAllocVal
expr_stmt|;
name|maxAllocation
operator|=
name|maxAllocVal
expr_stmt|;
if|if
condition|(
name|isMapped
condition|)
block|{
try|try
block|{
name|cacheDir
operator|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|mapPath
argument_list|)
argument_list|,
literal|"llap-"
argument_list|,
name|RWX
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// conf validator already checks this, so it will never trigger usually
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Configured mmap directory should be writable"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|cacheDir
operator|=
literal|null
expr_stmt|;
block|}
name|arenaSize
operator|=
name|validateAndDetermineArenaSize
argument_list|(
name|arenaCount
argument_list|,
name|maxSizeVal
argument_list|)
expr_stmt|;
name|maxSize
operator|=
name|validateAndDetermineMaxSize
argument_list|(
name|maxSizeVal
argument_list|)
expr_stmt|;
name|memoryManager
operator|.
name|updateMaxSize
argument_list|(
name|determineMaxMmSize
argument_list|(
name|defragHeadroom
argument_list|,
name|maxSize
argument_list|)
argument_list|)
expr_stmt|;
name|minAllocLog2
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|minAllocation
argument_list|)
expr_stmt|;
name|maxAllocLog2
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|maxAllocation
argument_list|)
expr_stmt|;
name|arenaSizeLog2
operator|=
literal|63
operator|-
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|arenaSize
argument_list|)
expr_stmt|;
name|maxArenas
operator|=
call|(
name|int
call|)
argument_list|(
name|maxSize
operator|/
name|arenaSize
argument_list|)
expr_stmt|;
name|arenas
operator|=
operator|new
name|Arena
index|[
name|maxArenas
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxArenas
condition|;
operator|++
name|i
control|)
block|{
name|arenas
index|[
name|i
index|]
operator|=
operator|new
name|Arena
argument_list|()
expr_stmt|;
block|}
name|Arena
name|firstArena
init|=
name|arenas
index|[
literal|0
index|]
decl_stmt|;
name|firstArena
operator|.
name|init
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|allocatedArenas
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|memoryManager
operator|=
name|memoryManager
expr_stmt|;
name|defragCounters
operator|=
operator|new
name|AtomicLong
index|[
name|maxAllocLog2
operator|-
name|minAllocLog2
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defragCounters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|defragCounters
index|[
name|i
index|]
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|metrics
operator|.
name|incrAllocatedArena
argument_list|()
expr_stmt|;
name|boolean
name|isBoth
init|=
literal|null
operator|==
name|discardMethod
operator|||
literal|"both"
operator|.
name|equalsIgnoreCase
argument_list|(
name|discardMethod
argument_list|)
decl_stmt|;
name|doUseFreeListDiscard
operator|=
name|isBoth
operator|||
literal|"freelist"
operator|.
name|equalsIgnoreCase
argument_list|(
name|discardMethod
argument_list|)
expr_stmt|;
name|doUseBruteDiscard
operator|=
name|isBoth
operator|||
literal|"brute"
operator|.
name|equalsIgnoreCase
argument_list|(
name|discardMethod
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|determineMaxMmSize
parameter_list|(
name|long
name|defragHeadroom
parameter_list|,
name|long
name|maxMmSize
parameter_list|)
block|{
if|if
condition|(
name|defragHeadroom
operator|>
literal|0
condition|)
block|{
name|long
name|maxHeadroom
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|maxSize
operator|*
name|MAX_DEFRAG_HEADROOM_FRACTION
argument_list|)
decl_stmt|;
name|defragHeadroom
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxHeadroom
argument_list|,
name|defragHeadroom
argument_list|)
expr_stmt|;
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Leaving "
operator|+
name|defragHeadroom
operator|+
literal|" of defragmentation headroom"
argument_list|)
expr_stmt|;
name|maxMmSize
operator|-=
name|defragHeadroom
expr_stmt|;
block|}
return|return
name|maxMmSize
return|;
block|}
specifier|public
name|long
name|validateAndDetermineMaxSize
parameter_list|(
name|long
name|maxSizeVal
parameter_list|)
block|{
if|if
condition|(
operator|(
name|maxSizeVal
operator|%
name|arenaSize
operator|)
operator|>
literal|0
condition|)
block|{
name|long
name|oldMaxSize
init|=
name|maxSizeVal
decl_stmt|;
name|maxSizeVal
operator|=
operator|(
name|maxSizeVal
operator|/
name|arenaSize
operator|)
operator|*
name|arenaSize
expr_stmt|;
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Rounding cache size to "
operator|+
name|maxSizeVal
operator|+
literal|" from "
operator|+
name|oldMaxSize
operator|+
literal|" to be divisible by arena size "
operator|+
name|arenaSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|maxSizeVal
operator|/
name|arenaSize
operator|)
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Too many arenas needed to allocate the cache: "
operator|+
name|arenaSize
operator|+
literal|", "
operator|+
name|maxSizeVal
argument_list|)
throw|;
block|}
return|return
name|maxSizeVal
return|;
block|}
specifier|public
name|int
name|validateAndDetermineArenaSize
parameter_list|(
name|int
name|arenaCount
parameter_list|,
name|long
name|maxSizeVal
parameter_list|)
block|{
name|long
name|arenaSizeVal
init|=
operator|(
name|arenaCount
operator|==
literal|0
operator|)
condition|?
name|MAX_ARENA_SIZE
else|:
name|maxSizeVal
operator|/
name|arenaCount
decl_stmt|;
comment|// The math.min, and the fact that maxAllocation is an int, ensures we don't overflow.
name|arenaSizeVal
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxAllocation
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|arenaSizeVal
argument_list|,
name|MAX_ARENA_SIZE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Buddy allocator with "
operator|+
operator|(
name|isDirect
condition|?
literal|"direct"
else|:
literal|"byte"
operator|)
operator|+
literal|" buffers; "
operator|+
operator|(
name|isMapped
condition|?
operator|(
literal|"memory mapped off "
operator|+
name|cacheDir
operator|.
name|toString
argument_list|()
operator|+
literal|"; "
operator|)
else|:
literal|""
operator|)
operator|+
literal|"allocation sizes "
operator|+
name|minAllocation
operator|+
literal|" - "
operator|+
name|maxAllocation
operator|+
literal|", arena size "
operator|+
name|arenaSizeVal
operator|+
literal|", total size "
operator|+
name|maxSizeVal
argument_list|)
expr_stmt|;
block|}
name|String
name|minName
init|=
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MIN_ALLOC
operator|.
name|varname
decl_stmt|,
name|maxName
init|=
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MAX_ALLOC
operator|.
name|varname
decl_stmt|;
if|if
condition|(
name|minAllocation
operator|<
literal|8
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|minName
operator|+
literal|" must be at least 8 bytes: "
operator|+
name|minAllocation
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxSizeVal
operator|<
name|maxAllocation
operator|||
name|maxAllocation
operator|<
name|minAllocation
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Inconsistent sizes; expecting "
operator|+
name|minName
operator|+
literal|"<= "
operator|+
name|maxName
operator|+
literal|"<= "
operator|+
name|ConfVars
operator|.
name|LLAP_IO_MEMORY_MAX_SIZE
operator|.
name|varname
operator|+
literal|"; configured with min="
operator|+
name|minAllocation
operator|+
literal|", max="
operator|+
name|maxAllocation
operator|+
literal|" and total="
operator|+
name|maxSizeVal
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|Integer
operator|.
name|bitCount
argument_list|(
name|minAllocation
argument_list|)
operator|!=
literal|1
operator|)
operator|||
operator|(
name|Integer
operator|.
name|bitCount
argument_list|(
name|maxAllocation
argument_list|)
operator|!=
literal|1
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Allocation sizes must be powers of two; configured with "
operator|+
name|minName
operator|+
literal|"="
operator|+
name|minAllocation
operator|+
literal|", "
operator|+
name|maxName
operator|+
literal|"="
operator|+
name|maxAllocation
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|arenaSizeVal
operator|%
name|maxAllocation
operator|)
operator|>
literal|0
condition|)
block|{
name|long
name|oldArenaSize
init|=
name|arenaSizeVal
decl_stmt|;
name|arenaSizeVal
operator|=
operator|(
name|arenaSizeVal
operator|/
name|maxAllocation
operator|)
operator|*
name|maxAllocation
expr_stmt|;
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Rounding arena size to "
operator|+
name|arenaSizeVal
operator|+
literal|" from "
operator|+
name|oldArenaSize
operator|+
literal|" to be divisible by allocation size "
operator|+
name|maxAllocation
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|int
operator|)
name|arenaSizeVal
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|allocateMultiple
parameter_list|(
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|AllocatorOutOfMemoryException
block|{
name|allocateMultiple
argument_list|(
name|dest
argument_list|,
name|size
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// TODO: would it make sense to return buffers asynchronously?
annotation|@
name|Override
specifier|public
name|void
name|allocateMultiple
parameter_list|(
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|size
parameter_list|,
name|BufferObjectFactory
name|factory
parameter_list|)
throws|throws
name|AllocatorOutOfMemoryException
block|{
assert|assert
name|size
operator|>
literal|0
operator|:
literal|"size is "
operator|+
name|size
assert|;
if|if
condition|(
name|size
operator|>
name|maxAllocation
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Trying to allocate "
operator|+
name|size
operator|+
literal|"; max is "
operator|+
name|maxAllocation
argument_list|)
throw|;
block|}
name|int
name|freeListIx
init|=
name|determineFreeListForAllocation
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|int
name|allocLog2
init|=
name|freeListIx
operator|+
name|minAllocLog2
decl_stmt|;
name|int
name|allocationSize
init|=
literal|1
operator|<<
name|allocLog2
decl_stmt|;
comment|// If using async, we could also reserve one by one.
name|memoryManager
operator|.
name|reserveMemory
argument_list|(
name|dest
operator|.
name|length
operator|<<
name|allocLog2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dest
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|dest
index|[
name|i
index|]
operator|!=
literal|null
condition|)
continue|continue;
comment|// Note: this is backward compat only. Should be removed with createUnallocated.
name|dest
index|[
name|i
index|]
operator|=
name|factory
operator|!=
literal|null
condition|?
name|factory
operator|.
name|create
argument_list|()
else|:
name|createUnallocated
argument_list|()
expr_stmt|;
block|}
comment|// First try to quickly lock some of the correct-sized free lists and allocate from them.
name|int
name|arenaCount
init|=
name|allocatedArenas
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|arenaCount
operator|<
literal|0
condition|)
block|{
name|arenaCount
operator|=
operator|-
name|arenaCount
operator|-
literal|1
expr_stmt|;
comment|// Next arena is being allocated.
block|}
comment|// Note: we might want to be smarter if threadId-s are low and there more arenas than threads.
name|long
name|threadId
init|=
name|arenaCount
operator|>
literal|1
condition|?
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
else|:
literal|0
decl_stmt|;
name|int
name|destAllocIx
init|=
name|allocateFast
argument_list|(
name|dest
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|dest
operator|.
name|length
argument_list|,
name|freeListIx
argument_list|,
name|allocationSize
argument_list|,
call|(
name|int
call|)
argument_list|(
name|threadId
operator|%
name|arenaCount
argument_list|)
argument_list|,
name|arenaCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|destAllocIx
operator|==
name|dest
operator|.
name|length
condition|)
return|return;
comment|// We called reserveMemory so we know that there's memory waiting for us somewhere.
comment|// However, we have a class of rare race conditions related to the order of locking/checking of
comment|// different allocation areas. Simple case - say we have 2 arenas, 256Kb available in arena 2.
comment|// We look at arena 1; someone deallocs 256Kb from arena 1 and allocs the same from arena 2;
comment|// we look at arena 2 and find no memory. Or, for single arena, 2 threads reserve 256k each,
comment|// and a single 1Mb block is available. When the 1st thread locks the 1Mb freelist, the 2nd one
comment|// might have already examined the 256k and 512k lists, finding nothing. Blocks placed by (1)
comment|// into smaller lists after its split is done will not be found by (2); given that freelist
comment|// locks don't overlap, (2) may even run completely between the time (1) takes out the 1Mb
comment|// block and the time it returns the remaining 768Kb.
comment|// Two solutions to this are some form of cross-thread helping (threads putting "demand"
comment|// into some sort of queues that deallocate and split will examine), or having and "actor"
comment|// allocator thread (or threads per arena).
comment|// The 2nd one is probably much simpler and will allow us to get rid of a lot of sync code.
comment|// But for now we will just retry. We will evict more each time.
name|int
name|attempt
init|=
literal|0
decl_stmt|;
name|boolean
name|isFailed
init|=
literal|false
decl_stmt|;
name|int
name|memoryForceReleased
init|=
literal|0
decl_stmt|;
try|try
block|{
name|int
name|discardFailed
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Try to split bigger blocks.
name|int
name|startArenaIx
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|threadId
operator|+
name|attempt
operator|)
operator|%
name|arenaCount
argument_list|)
decl_stmt|;
name|destAllocIx
operator|=
name|allocateWithSplit
argument_list|(
name|dest
argument_list|,
literal|null
argument_list|,
name|destAllocIx
argument_list|,
name|dest
operator|.
name|length
argument_list|,
name|freeListIx
argument_list|,
name|allocationSize
argument_list|,
name|startArenaIx
argument_list|,
name|arenaCount
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|destAllocIx
operator|==
name|dest
operator|.
name|length
condition|)
return|return;
if|if
condition|(
name|attempt
operator|==
literal|0
condition|)
block|{
comment|// Try to allocate memory if we haven't allocated all the way to maxSize yet; very rare.
name|destAllocIx
operator|=
name|allocateWithExpand
argument_list|(
name|dest
argument_list|,
name|destAllocIx
argument_list|,
name|freeListIx
argument_list|,
name|allocationSize
argument_list|,
name|arenaCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|destAllocIx
operator|==
name|dest
operator|.
name|length
condition|)
return|return;
block|}
comment|// Try to force-evict the fragments of the requisite size.
name|boolean
name|hasDiscardedAny
init|=
literal|false
decl_stmt|;
name|DiscardContext
name|ctx
init|=
name|threadCtx
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Brute force may discard up to twice as many buffers.
name|int
name|maxListSize
init|=
literal|1
operator|<<
operator|(
name|doUseBruteDiscard
condition|?
name|freeListIx
else|:
operator|(
name|freeListIx
operator|-
literal|1
operator|)
operator|)
decl_stmt|;
name|int
name|requiredBlocks
init|=
name|dest
operator|.
name|length
operator|-
name|destAllocIx
decl_stmt|;
name|ctx
operator|.
name|init
argument_list|(
name|maxListSize
argument_list|,
name|requiredBlocks
argument_list|)
expr_stmt|;
comment|// First, try to use the blocks of half size in every arena.
if|if
condition|(
name|doUseFreeListDiscard
operator|&&
name|freeListIx
operator|>
literal|0
condition|)
block|{
name|discardBlocksBasedOnFreeLists
argument_list|(
name|freeListIx
argument_list|,
name|startArenaIx
argument_list|,
name|arenaCount
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|memoryForceReleased
operator|+=
name|ctx
operator|.
name|memoryReleased
expr_stmt|;
name|hasDiscardedAny
operator|=
name|ctx
operator|.
name|resultCount
operator|>
literal|0
expr_stmt|;
name|destAllocIx
operator|=
name|allocateFromDiscardResult
argument_list|(
name|dest
argument_list|,
name|destAllocIx
argument_list|,
name|freeListIx
argument_list|,
name|allocationSize
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|destAllocIx
operator|==
name|dest
operator|.
name|length
condition|)
return|return;
block|}
comment|// Then, try the brute force search for something to throw away.
if|if
condition|(
name|doUseBruteDiscard
condition|)
block|{
name|ctx
operator|.
name|resetResults
argument_list|()
expr_stmt|;
name|discardBlocksBruteForce
argument_list|(
name|freeListIx
argument_list|,
name|startArenaIx
argument_list|,
name|arenaCount
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|memoryForceReleased
operator|+=
name|ctx
operator|.
name|memoryReleased
expr_stmt|;
name|hasDiscardedAny
operator|=
name|hasDiscardedAny
operator|||
operator|(
name|ctx
operator|.
name|resultCount
operator|>
literal|0
operator|)
expr_stmt|;
name|destAllocIx
operator|=
name|allocateFromDiscardResult
argument_list|(
name|dest
argument_list|,
name|destAllocIx
argument_list|,
name|freeListIx
argument_list|,
name|allocationSize
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|destAllocIx
operator|==
name|dest
operator|.
name|length
condition|)
return|return;
block|}
if|if
condition|(
name|hasDiscardedAny
condition|)
block|{
name|discardFailed
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|++
name|discardFailed
operator|>
name|MAX_DISCARD_ATTEMPTS
condition|)
block|{
name|String
name|msg
init|=
literal|"Failed to allocate "
operator|+
name|size
operator|+
literal|"; at "
operator|+
name|destAllocIx
operator|+
literal|" out of "
operator|+
name|dest
operator|.
name|length
operator|+
literal|" (entire cache is fragmented and locked, or an internal issue)"
decl_stmt|;
name|logOomErrorMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|isFailed
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|AllocatorOutOfMemoryException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
operator|++
name|attempt
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|memoryManager
operator|.
name|releaseMemory
argument_list|(
name|memoryForceReleased
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isFailed
operator|&&
name|attempt
operator|>=
name|LOG_DISCARD_ATTEMPTS
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocation of "
operator|+
name|dest
operator|.
name|length
operator|+
literal|" buffers of size "
operator|+
name|size
operator|+
literal|" took "
operator|+
name|attempt
operator|+
literal|" attempts to free enough memory; force-released "
operator|+
name|memoryForceReleased
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** The context for the forced eviction of buffers. */
specifier|private
specifier|static
specifier|final
class|class
name|DiscardContext
block|{
name|long
index|[]
name|results
decl_stmt|;
name|int
name|resultCount
decl_stmt|;
name|int
name|memoryReleased
decl_stmt|;
comment|/**      * The headers for blocks we've either locked to move (if allocated), or have taken out      * of the free lists (if not) so that nobody allocates them while we are freeing space.      * All the headers will be from the arena currently being processed.      */
name|int
index|[]
name|victimHeaders
decl_stmt|;
name|int
name|victimCount
decl_stmt|;
comment|// The count of the elements of the above that are set.
comment|/**      * List-based: the base free buffers that will be paired with the space freed from      * victimHeaders to create the buffers of allocation size.      * Brute force: the buffers (that do not exist as separate buffers) composed of victimHeaders      * buffers; the future result buffers.      * All the headers will be from the arena currently being processed.      */
name|int
index|[]
name|baseHeaders
decl_stmt|;
name|int
name|baseCount
decl_stmt|;
comment|// The count of the elements of the above that are set.
comment|/**      * How many more results (or base headers) do we need to find?      * This object is reused between arenas; this is the only counter that is preserved.      */
name|int
name|remainingToFind
decl_stmt|;
comment|/** The headers from abandoned moved attempts that cannot yet be returned to the      * free lists, or unlocked due to some lock being held and deadlock potential. */
name|int
index|[]
name|abandonedHeaders
decl_stmt|;
name|int
name|abandonedCount
decl_stmt|;
name|void
name|init
parameter_list|(
name|int
name|headersPerOneReq
parameter_list|,
name|int
name|reqCount
parameter_list|)
block|{
name|resetResults
argument_list|()
expr_stmt|;
name|remainingToFind
operator|=
name|reqCount
expr_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
operator|||
name|results
operator|.
name|length
operator|<
name|reqCount
condition|)
block|{
name|results
operator|=
operator|new
name|long
index|[
name|reqCount
index|]
expr_stmt|;
name|baseHeaders
operator|=
operator|new
name|int
index|[
name|reqCount
index|]
expr_stmt|;
block|}
name|int
name|maxVictimCount
init|=
name|headersPerOneReq
operator|*
name|reqCount
decl_stmt|;
if|if
condition|(
name|victimHeaders
operator|==
literal|null
operator|||
name|victimHeaders
operator|.
name|length
operator|<
name|maxVictimCount
condition|)
block|{
name|victimHeaders
operator|=
operator|new
name|int
index|[
name|maxVictimCount
index|]
expr_stmt|;
block|}
block|}
name|void
name|resetResults
parameter_list|()
block|{
name|resetBetweenArenas
argument_list|()
expr_stmt|;
name|resultCount
operator|=
name|memoryReleased
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|resetBetweenArenas
parameter_list|()
block|{
comment|// Reset everything for the next arena; assume everything has been cleaned.
name|victimCount
operator|=
name|baseCount
operator|=
name|abandonedCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|addResult
parameter_list|(
name|int
name|arenaIx
parameter_list|,
name|int
name|freeHeaderIx
parameter_list|)
block|{
name|results
index|[
name|resultCount
index|]
operator|=
name|makeIntPair
argument_list|(
name|arenaIx
argument_list|,
name|freeHeaderIx
argument_list|)
expr_stmt|;
operator|++
name|resultCount
expr_stmt|;
block|}
specifier|public
name|void
name|addBaseHeader
parameter_list|(
name|int
name|headerIx
parameter_list|)
block|{
name|baseHeaders
index|[
name|baseCount
index|]
operator|=
name|headerIx
expr_stmt|;
operator|++
name|baseCount
expr_stmt|;
operator|--
name|remainingToFind
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[victimHeaders="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|victimHeaders
argument_list|)
operator|+
literal|", victimCount="
operator|+
name|victimCount
operator|+
literal|", baseHeaders="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|baseHeaders
argument_list|)
operator|+
literal|", baseCount="
operator|+
name|baseCount
operator|+
literal|", remainingToFind="
operator|+
name|remainingToFind
operator|+
literal|"]"
return|;
block|}
block|}
specifier|private
name|void
name|discardBlocksBasedOnFreeLists
parameter_list|(
name|int
name|freeListIx
parameter_list|,
name|int
name|startArenaIx
parameter_list|,
name|int
name|arenaCount
parameter_list|,
name|DiscardContext
name|ctx
parameter_list|)
block|{
name|defragCounters
index|[
name|freeListIx
index|]
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
comment|// The free list level the blocks from which we need to merge.
specifier|final
name|int
name|mergeListIx
init|=
name|freeListIx
operator|-
literal|1
decl_stmt|;
comment|// Try to allocate using base-buffer approach from each arena.
name|int
name|arenaIx
init|=
name|startArenaIx
decl_stmt|;
do|do
block|{
name|Arena
name|arena
init|=
name|arenas
index|[
name|arenaIx
index|]
decl_stmt|;
comment|// Reserve blocks in this arena that would empty the sections of requisite size.
name|arena
operator|.
name|reserveDiscardBlocksBasedOnFreeList
argument_list|(
name|mergeListIx
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
comment|// Discard the blocks.
name|discardFromCtxBasedOnFreeList
argument_list|(
name|arena
argument_list|,
name|ctx
argument_list|,
name|freeListIx
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|remainingToFind
operator|==
literal|0
condition|)
return|return;
comment|// Reserved as much as we needed.
name|ctx
operator|.
name|resetBetweenArenas
argument_list|()
expr_stmt|;
name|arenaIx
operator|=
name|getNextIx
argument_list|(
name|arenaIx
argument_list|,
name|arenaCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|arenaIx
operator|!=
name|startArenaIx
condition|)
do|;
block|}
specifier|private
name|void
name|discardBlocksBruteForce
parameter_list|(
name|int
name|freeListIx
parameter_list|,
name|int
name|startArenaIx
parameter_list|,
name|int
name|arenaCount
parameter_list|,
name|DiscardContext
name|ctx
parameter_list|)
block|{
comment|// We are going to use this counter as a pseudo-random number for the start of the search.
comment|// This is to avoid churning at the beginning of the arena all the time.
name|long
name|counter
init|=
name|defragCounters
index|[
name|freeListIx
index|]
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
comment|// How many blocks of this size comprise an arena.
name|int
name|positionsPerArena
init|=
literal|1
operator|<<
operator|(
name|arenaSizeLog2
operator|-
operator|(
name|minAllocLog2
operator|+
name|freeListIx
operator|)
operator|)
decl_stmt|;
comment|// Compute the pseudo-random position from the above, then derive the actual header.
name|int
name|startHeaderIx
init|=
operator|(
call|(
name|int
call|)
argument_list|(
name|counter
operator|%
name|positionsPerArena
argument_list|)
operator|)
operator|<<
name|freeListIx
decl_stmt|;
comment|// Try to allocate using brute force approach from each arena.
name|int
name|arenaIx
init|=
name|startArenaIx
decl_stmt|;
do|do
block|{
name|Arena
name|arena
init|=
name|arenas
index|[
name|arenaIx
index|]
decl_stmt|;
comment|// Reserve blocks in this arena that would empty the sections of requisite size.
name|arena
operator|.
name|reserveDiscardBruteForce
argument_list|(
name|freeListIx
argument_list|,
name|ctx
argument_list|,
name|startHeaderIx
argument_list|)
expr_stmt|;
comment|// Discard the blocks.
name|discardFromCtxBruteForce
argument_list|(
name|arena
argument_list|,
name|ctx
argument_list|,
name|freeListIx
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|remainingToFind
operator|==
literal|0
condition|)
return|return;
comment|// Reserved as much as we needed.
name|ctx
operator|.
name|resetBetweenArenas
argument_list|()
expr_stmt|;
name|arenaIx
operator|=
name|getNextIx
argument_list|(
name|arenaIx
argument_list|,
name|arenaCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|arenaIx
operator|!=
name|startArenaIx
condition|)
do|;
block|}
comment|/**    * Frees up memory by deallocating based on base and victim buffers in MoveContext.    * @param freeListIx The list for which the blocks are being merged.    */
specifier|private
name|void
name|discardFromCtxBasedOnFreeList
parameter_list|(
name|Arena
name|arena
parameter_list|,
name|DiscardContext
name|ctx
parameter_list|,
name|int
name|freeListIx
parameter_list|)
block|{
comment|// Discard all the locked blocks.
name|discardAllBuffersFromCtx
argument_list|(
name|arena
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
comment|// Finalize the headers.
for|for
control|(
name|int
name|baseIx
init|=
name|ctx
operator|.
name|baseCount
operator|-
literal|1
init|;
name|baseIx
operator|>=
literal|0
condition|;
operator|--
name|baseIx
control|)
block|{
name|int
name|baseHeaderIx
init|=
name|ctx
operator|.
name|baseHeaders
index|[
name|baseIx
index|]
decl_stmt|;
name|int
name|minHeaderIx
init|=
name|Math
operator|.
name|min
argument_list|(
name|baseHeaderIx
argument_list|,
name|getBuddyHeaderIx
argument_list|(
name|freeListIx
operator|-
literal|1
argument_list|,
name|baseHeaderIx
argument_list|)
argument_list|)
decl_stmt|;
name|finalizeDiscardResult
argument_list|(
name|arena
argument_list|,
name|ctx
argument_list|,
name|freeListIx
argument_list|,
name|minHeaderIx
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Frees up memory by deallocating based on base and victim buffers in MoveContext.    * @param freeListIx The list for which the blocks are being merged.    */
specifier|private
name|void
name|discardFromCtxBruteForce
parameter_list|(
name|Arena
name|arena
parameter_list|,
name|DiscardContext
name|ctx
parameter_list|,
name|int
name|freeListIx
parameter_list|)
block|{
comment|// Discard all the locked blocks.
name|discardAllBuffersFromCtx
argument_list|(
name|arena
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
comment|// Finalize the headers.
for|for
control|(
name|int
name|baseIx
init|=
name|ctx
operator|.
name|baseCount
operator|-
literal|1
init|;
name|baseIx
operator|>=
literal|0
condition|;
operator|--
name|baseIx
control|)
block|{
name|finalizeDiscardResult
argument_list|(
name|arena
argument_list|,
name|ctx
argument_list|,
name|freeListIx
argument_list|,
name|ctx
operator|.
name|baseHeaders
index|[
name|baseIx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets the headers correctly for a newly-freed buffer after discarding stuff.    */
specifier|private
name|void
name|finalizeDiscardResult
parameter_list|(
name|Arena
name|arena
parameter_list|,
name|DiscardContext
name|ctx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|int
name|newlyFreeHeaderIx
parameter_list|)
block|{
name|int
name|maxHeaderIx
init|=
name|newlyFreeHeaderIx
operator|+
operator|(
literal|1
operator|<<
name|freeListIx
operator|)
decl_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|arena
operator|.
name|checkHeader
argument_list|(
name|newlyFreeHeaderIx
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|arena
operator|.
name|unsetHeaders
argument_list|(
name|newlyFreeHeaderIx
operator|+
literal|1
argument_list|,
name|maxHeaderIx
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|CLEARED_VICTIM
argument_list|)
expr_stmt|;
comment|// Set the leftmost header of the base and its buddy (that are now being merged).
name|arena
operator|.
name|setHeaderNoBufAlloc
argument_list|(
name|newlyFreeHeaderIx
argument_list|,
name|freeListIx
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|NEWLY_CLEARED
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addResult
argument_list|(
name|arena
operator|.
name|arenaIx
argument_list|,
name|newlyFreeHeaderIx
argument_list|)
expr_stmt|;
block|}
comment|/**    * Discards all the victim buffers in the context.    */
specifier|private
name|void
name|discardAllBuffersFromCtx
parameter_list|(
name|Arena
name|arena
parameter_list|,
name|DiscardContext
name|ctx
parameter_list|)
block|{
for|for
control|(
name|int
name|victimIx
init|=
literal|0
init|;
name|victimIx
operator|<
name|ctx
operator|.
name|victimCount
condition|;
operator|++
name|victimIx
control|)
block|{
name|int
name|victimHeaderIx
init|=
name|ctx
operator|.
name|victimHeaders
index|[
name|victimIx
index|]
decl_stmt|;
comment|// Note: no location check here; the buffer is always locked for move.
name|LlapAllocatorBuffer
name|buf
init|=
name|arena
operator|.
name|buffers
index|[
name|victimHeaderIx
index|]
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|arena
operator|.
name|checkHeader
argument_list|(
name|victimHeaderIx
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|byte
name|header
init|=
name|arena
operator|.
name|headers
index|[
name|victimHeaderIx
index|]
decl_stmt|;
name|assertBufferLooksValid
argument_list|(
name|freeListFromHeader
argument_list|(
name|header
argument_list|)
argument_list|,
name|buf
argument_list|,
name|arena
operator|.
name|arenaIx
argument_list|,
name|victimHeaderIx
argument_list|)
expr_stmt|;
block|}
comment|// We do not modify the header here; the caller will use this space.
name|arena
operator|.
name|buffers
index|[
name|victimHeaderIx
index|]
operator|=
literal|null
expr_stmt|;
name|long
name|memUsage
init|=
name|buf
operator|.
name|getMemoryUsage
argument_list|()
decl_stmt|;
name|Boolean
name|result
init|=
name|buf
operator|.
name|endDiscard
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|ctx
operator|.
name|memoryReleased
operator|+=
name|memUsage
expr_stmt|;
comment|// We have essentially deallocated this.
block|}
elseif|else
if|if
condition|(
name|result
condition|)
block|{
comment|// There was a parallel deallocate; it didn't account for the memory.
name|memoryManager
operator|.
name|releaseMemory
argument_list|(
name|memUsage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// There was a parallel cache eviction - the evictor is accounting for the memory.
block|}
block|}
block|}
comment|/**    * Unlocks the buffer after the discard has been abandoned.    */
specifier|private
name|void
name|cancelDiscard
parameter_list|(
name|LlapAllocatorBuffer
name|buf
parameter_list|,
name|int
name|arenaIx
parameter_list|,
name|int
name|headerIx
parameter_list|)
block|{
name|Boolean
name|result
init|=
name|buf
operator|.
name|cancelDiscard
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
return|return;
comment|// If the result is not null, the buffer was evicted during the move.
if|if
condition|(
name|result
condition|)
block|{
name|long
name|memUsage
init|=
name|buf
operator|.
name|getMemoryUsage
argument_list|()
decl_stmt|;
comment|// Release memory - simple deallocation.
name|arenas
index|[
name|arenaIx
index|]
operator|.
name|deallocate
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|memoryManager
operator|.
name|releaseMemory
argument_list|(
name|memUsage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arenas
index|[
name|arenaIx
index|]
operator|.
name|deallocate
argument_list|(
name|buf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// No need to release memory - cache eviction.
block|}
block|}
comment|/**    * Tries to allocate destCount - destIx blocks, using best-effort fast allocation.    * @param dest Option 1 - memory allocated is stored in these buffers.    * @param destHeaders Option 2 - memory allocated is reserved and headers returned via this.    * @param destIx The start index in either array where allocations are to be saved.    * @param destCount The end index in either array where allocations are to be saved.    * @param freeListIx The free list from which to allocate.    * @param allocSize Allocation size.    * @param startArenaIx From which arena to start allocating.    * @param arenaCount The active arena count.    * @return The index in the array until which the memory has been allocated.    */
specifier|private
name|int
name|allocateFast
parameter_list|(
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|long
index|[]
name|destHeaders
parameter_list|,
name|int
name|destIx
parameter_list|,
name|int
name|destCount
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|int
name|allocSize
parameter_list|,
name|int
name|startArenaIx
parameter_list|,
name|int
name|arenaCount
parameter_list|)
block|{
name|int
name|index
init|=
name|startArenaIx
decl_stmt|;
do|do
block|{
name|int
name|newDestIx
init|=
name|arenas
index|[
name|index
index|]
operator|.
name|allocateFast
argument_list|(
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|destHeaders
argument_list|,
name|destIx
argument_list|,
name|destCount
argument_list|,
name|allocSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDestIx
operator|==
name|destCount
condition|)
return|return
name|newDestIx
return|;
assert|assert
name|newDestIx
operator|!=
operator|-
literal|1
assert|;
name|destIx
operator|=
name|newDestIx
expr_stmt|;
name|index
operator|=
name|getNextIx
argument_list|(
name|index
argument_list|,
name|arenaCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|index
operator|!=
name|startArenaIx
condition|)
do|;
return|return
name|destIx
return|;
block|}
comment|/**    * Tries to allocate destCount - destIx blocks by allocating new arenas, if needed. Same args    * as allocateFast, except the allocations start at arenaCount (the first unallocated arena).    */
specifier|private
name|int
name|allocateWithExpand
parameter_list|(
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|destIx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|int
name|allocSize
parameter_list|,
name|int
name|arenaCount
parameter_list|)
block|{
for|for
control|(
name|int
name|arenaIx
init|=
name|arenaCount
init|;
name|arenaIx
operator|<
name|arenas
operator|.
name|length
condition|;
operator|++
name|arenaIx
control|)
block|{
name|destIx
operator|=
name|arenas
index|[
name|arenaIx
index|]
operator|.
name|allocateWithExpand
argument_list|(
name|arenaIx
argument_list|,
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|destIx
argument_list|,
name|allocSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|destIx
operator|==
name|dest
operator|.
name|length
condition|)
return|return
name|destIx
return|;
block|}
return|return
name|destIx
return|;
block|}
comment|/**    * Tries to allocate destCount - destIx blocks, waiting for locks and splitting the larger    * blocks if the correct sized blocks are not available. Args the same as allocateFast.    */
specifier|private
name|int
name|allocateWithSplit
parameter_list|(
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|long
index|[]
name|destHeaders
parameter_list|,
name|int
name|destIx
parameter_list|,
name|int
name|destCount
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|int
name|allocSize
parameter_list|,
name|int
name|startArenaIx
parameter_list|,
name|int
name|arenaCount
parameter_list|,
name|int
name|maxSplitFreeListIx
parameter_list|)
block|{
name|int
name|arenaIx
init|=
name|startArenaIx
decl_stmt|;
do|do
block|{
name|int
name|newDestIx
init|=
name|arenas
index|[
name|arenaIx
index|]
operator|.
name|allocateWithSplit
argument_list|(
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|destHeaders
argument_list|,
name|destIx
argument_list|,
name|destCount
argument_list|,
name|allocSize
argument_list|,
name|maxSplitFreeListIx
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDestIx
operator|==
name|destCount
condition|)
return|return
name|newDestIx
return|;
assert|assert
name|newDestIx
operator|!=
operator|-
literal|1
assert|;
name|destIx
operator|=
name|newDestIx
expr_stmt|;
name|arenaIx
operator|=
name|getNextIx
argument_list|(
name|arenaIx
argument_list|,
name|arenaCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|arenaIx
operator|!=
name|startArenaIx
condition|)
do|;
return|return
name|destIx
return|;
block|}
comment|/**    * Tries to allocate destCount - destIx blocks after the forced eviction of some other buffers.    * Args the same as allocateFast.    */
specifier|private
name|int
name|allocateFromDiscardResult
parameter_list|(
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|destAllocIx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|int
name|allocationSize
parameter_list|,
name|DiscardContext
name|discardResult
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|discardResult
operator|.
name|resultCount
condition|;
operator|++
name|i
control|)
block|{
name|long
name|result
init|=
name|discardResult
operator|.
name|results
index|[
name|i
index|]
decl_stmt|;
name|destAllocIx
operator|=
name|arenas
index|[
name|getFirstInt
argument_list|(
name|result
argument_list|)
index|]
operator|.
name|allocateFromDiscard
argument_list|(
name|dest
argument_list|,
name|destAllocIx
argument_list|,
name|getSecondInt
argument_list|(
name|result
argument_list|)
argument_list|,
name|freeListIx
argument_list|,
name|allocationSize
argument_list|)
expr_stmt|;
block|}
return|return
name|destAllocIx
return|;
block|}
specifier|private
name|void
name|logOomErrorMessage
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|oomLogging
condition|)
return|return;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|lastTime
init|=
name|lastLog
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Magic value usage is invalid with nanoTime, so once in a 1000 years we may log extra.
name|boolean
name|shouldLog
init|=
operator|(
name|lastTime
operator|==
operator|-
literal|1
operator|||
operator|(
name|time
operator|-
name|lastTime
operator|)
operator|>
name|MAX_DUMP_INTERVAL_NS
operator|)
decl_stmt|;
if|if
condition|(
name|shouldLog
operator|&&
operator|!
name|lastLog
operator|.
name|compareAndSet
argument_list|(
name|lastTime
argument_list|,
name|time
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|shouldLog
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|msg
operator|+
name|debugDumpForOomInternal
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
comment|/**    * Arbitrarily, we start getting the state from Allocator. Allocator calls MM which calls    * the policies that call the eviction dispatcher that calls the caches. See init - these all    * are connected in a cycle, so we need to make sure the who-calls-whom order is definite.    */
annotation|@
name|Override
specifier|public
name|void
name|debugDumpShort
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\nDefrag counters: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defragCounters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|defragCounters
index|[
name|i
index|]
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\nAllocator state:"
argument_list|)
expr_stmt|;
name|int
name|unallocCount
init|=
literal|0
decl_stmt|,
name|fullCount
init|=
literal|0
decl_stmt|;
name|long
name|totalFree
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Arena
name|arena
range|:
name|arenas
control|)
block|{
name|Integer
name|result
init|=
name|arena
operator|.
name|debugDumpShort
argument_list|(
name|sb
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
operator|++
name|unallocCount
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
operator|++
name|fullCount
expr_stmt|;
block|}
else|else
block|{
name|totalFree
operator|+=
name|result
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\nTotal available and allocated: "
argument_list|)
operator|.
name|append
argument_list|(
name|totalFree
argument_list|)
operator|.
name|append
argument_list|(
literal|"; unallocated arenas: "
argument_list|)
operator|.
name|append
argument_list|(
name|unallocCount
argument_list|)
operator|.
name|append
argument_list|(
literal|"; full arenas "
argument_list|)
operator|.
name|append
argument_list|(
name|fullCount
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deallocate
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
name|LlapAllocatorBuffer
name|buf
init|=
operator|(
name|LlapAllocatorBuffer
operator|)
name|buffer
decl_stmt|;
name|int
name|arenaToRelease
init|=
name|buf
operator|.
name|invalidateAndRelease
argument_list|()
decl_stmt|;
if|if
condition|(
name|arenaToRelease
operator|<
literal|0
condition|)
return|return;
comment|// The block is being moved; the move will release memory.
name|long
name|memUsage
init|=
name|buf
operator|.
name|getMemoryUsage
argument_list|()
decl_stmt|;
name|arenas
index|[
name|arenaToRelease
index|]
operator|.
name|deallocate
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|memoryManager
operator|.
name|releaseMemory
argument_list|(
name|memUsage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deallocateEvicted
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
name|LlapAllocatorBuffer
name|buf
init|=
operator|(
name|LlapAllocatorBuffer
operator|)
name|buffer
decl_stmt|;
assert|assert
name|buf
operator|.
name|isInvalid
argument_list|()
assert|;
name|int
name|arenaToRelease
init|=
name|buf
operator|.
name|releaseInvalidated
argument_list|()
decl_stmt|;
if|if
condition|(
name|arenaToRelease
operator|<
literal|0
condition|)
return|return;
comment|// The block is being moved; the move will release memory.
name|arenas
index|[
name|arenaToRelease
index|]
operator|.
name|deallocate
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Note: for deallocateEvicted, we do not release the memory to memManager; it may
comment|// happen that the evictor tries to use the allowance before the move finishes.
comment|// Retrying/more defrag should take care of that.
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDirectAlloc
parameter_list|()
block|{
return|return
name|isDirect
return|;
block|}
specifier|private
name|ByteBuffer
name|preallocateArenaBuffer
parameter_list|(
name|int
name|arenaSize
parameter_list|)
block|{
if|if
condition|(
name|isMapped
condition|)
block|{
name|RandomAccessFile
name|rwf
init|=
literal|null
decl_stmt|;
name|File
name|rf
init|=
literal|null
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|isDirect
argument_list|,
literal|"All memory mapped allocations have to be direct buffers"
argument_list|)
expr_stmt|;
try|try
block|{
name|rf
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"arena-"
argument_list|,
literal|".cache"
argument_list|,
name|cacheDir
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|rwf
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|rf
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|rwf
operator|.
name|setLength
argument_list|(
name|arenaSize
argument_list|)
expr_stmt|;
comment|// truncate (TODO: posix_fallocate?)
comment|// Use RW, not PRIVATE because the copy-on-write is irrelevant for a deleted file
comment|// see discussion in YARN-5551 for the memory accounting discussion
name|ByteBuffer
name|rwbuf
init|=
name|rwf
operator|.
name|getChannel
argument_list|()
operator|.
name|map
argument_list|(
name|MapMode
operator|.
name|READ_WRITE
argument_list|,
literal|0
argument_list|,
name|arenaSize
argument_list|)
decl_stmt|;
return|return
name|rwbuf
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed trying to allocate memory mapped arena"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
comment|// fail similarly when memory allocations fail
throw|throw
operator|new
name|OutOfMemoryError
argument_list|(
literal|"Failed trying to allocate memory mapped arena: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// A mapping, once established, is not dependent upon the file channel that was used to
comment|// create it. delete file and hold onto the map
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|rwf
argument_list|)
expr_stmt|;
if|if
condition|(
name|rf
operator|!=
literal|null
condition|)
block|{
name|rf
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|isDirect
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|arenaSize
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|arenaSize
argument_list|)
return|;
block|}
specifier|private
class|class
name|Arena
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FAILED_TO_RESERVE
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|int
name|arenaIx
decl_stmt|;
specifier|private
name|ByteBuffer
name|data
decl_stmt|;
comment|// Avoid storing headers with data since we expect binary size allocations.
comment|// Each headers[i] is a "virtual" byte at i * minAllocation.
specifier|private
name|LlapAllocatorBuffer
index|[]
name|buffers
decl_stmt|;
comment|// The TS rule for headers is - a header and buffer array element for some freeList
comment|// can only be modified if the corresponding freeList lock is held.
specifier|private
name|byte
index|[]
name|headers
decl_stmt|;
comment|// Free list indices of each unallocated block, for quick lookup.
specifier|private
name|FreeList
index|[]
name|freeLists
decl_stmt|;
name|void
name|init
parameter_list|(
name|int
name|arenaIx
parameter_list|)
block|{
name|this
operator|.
name|arenaIx
operator|=
name|arenaIx
expr_stmt|;
try|try
block|{
name|data
operator|=
name|preallocateArenaBuffer
argument_list|(
name|arenaSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|oom
parameter_list|)
block|{
throw|throw
operator|new
name|OutOfMemoryError
argument_list|(
literal|"Cannot allocate "
operator|+
name|arenaSize
operator|+
literal|" bytes: "
operator|+
name|oom
operator|.
name|getMessage
argument_list|()
operator|+
literal|"; make sure your xmx and process size are set correctly."
argument_list|)
throw|;
block|}
name|int
name|maxMinAllocs
init|=
literal|1
operator|<<
operator|(
name|arenaSizeLog2
operator|-
name|minAllocLog2
operator|)
decl_stmt|;
name|buffers
operator|=
operator|new
name|LlapAllocatorBuffer
index|[
name|maxMinAllocs
index|]
expr_stmt|;
name|headers
operator|=
operator|new
name|byte
index|[
name|maxMinAllocs
index|]
expr_stmt|;
name|int
name|allocLog2Diff
init|=
name|maxAllocLog2
operator|-
name|minAllocLog2
decl_stmt|,
name|freeListCount
init|=
name|allocLog2Diff
operator|+
literal|1
decl_stmt|;
name|freeLists
operator|=
operator|new
name|FreeList
index|[
name|freeListCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freeListCount
condition|;
operator|++
name|i
control|)
block|{
name|freeLists
index|[
name|i
index|]
operator|=
operator|new
name|FreeList
argument_list|()
expr_stmt|;
block|}
name|int
name|maxMaxAllocs
init|=
literal|1
operator|<<
operator|(
name|arenaSizeLog2
operator|-
name|maxAllocLog2
operator|)
decl_stmt|,
name|headerIndex
init|=
literal|0
decl_stmt|,
name|headerStep
init|=
literal|1
operator|<<
name|allocLog2Diff
decl_stmt|;
name|freeLists
index|[
name|allocLog2Diff
index|]
operator|.
name|listHead
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|offset
init|=
literal|0
init|;
name|i
operator|<
name|maxMaxAllocs
condition|;
operator|++
name|i
operator|,
name|offset
operator|+=
name|maxAllocation
control|)
block|{
name|setHeaderFree
argument_list|(
name|headerIndex
argument_list|,
name|allocLog2Diff
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|CTOR
argument_list|)
expr_stmt|;
name|data
operator|.
name|putInt
argument_list|(
name|offset
argument_list|,
operator|(
name|i
operator|==
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|headerIndex
operator|-
name|headerStep
operator|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|putInt
argument_list|(
name|offset
operator|+
literal|4
argument_list|,
operator|(
name|i
operator|==
name|maxMaxAllocs
operator|-
literal|1
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|headerIndex
operator|+
name|headerStep
operator|)
argument_list|)
expr_stmt|;
name|headerIndex
operator|+=
name|headerStep
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkHeader
parameter_list|(
name|int
name|headerIx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|boolean
name|isLocked
parameter_list|)
block|{
name|checkHeaderByte
argument_list|(
name|arenaIx
argument_list|,
name|headerIx
argument_list|,
name|freeListIx
argument_list|,
name|isLocked
argument_list|,
name|headers
index|[
name|headerIx
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reserves the blocks to use to merge into larger blocks.      * @param freeListIx The free list to reserve for.      * @param startHeaderIx The header index at which to start looking (to avoid churn at 0).      */
specifier|public
name|void
name|reserveDiscardBruteForce
parameter_list|(
name|int
name|freeListIx
parameter_list|,
name|DiscardContext
name|ctx
parameter_list|,
name|int
name|startHeaderIx
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return;
comment|// not allocated yet
name|int
name|headerStep
init|=
literal|1
operator|<<
name|freeListIx
decl_stmt|;
name|int
name|headerIx
init|=
name|startHeaderIx
decl_stmt|;
do|do
block|{
name|long
name|reserveResult
init|=
name|reserveBlockContents
argument_list|(
name|freeListIx
argument_list|,
name|headerIx
argument_list|,
name|ctx
operator|.
name|victimHeaders
argument_list|,
name|ctx
operator|.
name|victimCount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|reservedCount
init|=
name|getFirstInt
argument_list|(
name|reserveResult
argument_list|)
decl_stmt|,
name|moveSize
init|=
name|getSecondInt
argument_list|(
name|reserveResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|moveSize
operator|==
name|FAILED_TO_RESERVE
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|ctx
operator|.
name|victimCount
init|;
name|i
operator|<
name|ctx
operator|.
name|victimCount
operator|+
name|reservedCount
condition|;
operator|++
name|i
control|)
block|{
name|abandonOneHeaderBeingMoved
argument_list|(
name|ctx
operator|.
name|victimHeaders
index|[
name|i
index|]
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|ABANDON_MOVE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ctx
operator|.
name|victimCount
operator|+=
name|reservedCount
expr_stmt|;
name|ctx
operator|.
name|addBaseHeader
argument_list|(
name|headerIx
argument_list|)
expr_stmt|;
block|}
name|headerIx
operator|=
name|getNextIx
argument_list|(
name|headerIx
argument_list|,
name|headers
operator|.
name|length
argument_list|,
name|headerStep
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ctx
operator|.
name|remainingToFind
operator|>
literal|0
operator|&&
name|headerIx
operator|!=
name|startHeaderIx
condition|)
do|;
block|}
comment|/**      * Reserves the blocks to use to merge into larger blocks.      * @param mergeListIx The free list to reserve base blocks from.      */
specifier|public
name|void
name|reserveDiscardBlocksBasedOnFreeList
parameter_list|(
name|int
name|mergeListIx
parameter_list|,
name|DiscardContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return;
comment|// not allocated yet
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|mergeListIx
index|]
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|freeHeaderIx
init|=
name|freeList
operator|.
name|listHead
decl_stmt|;
while|while
condition|(
name|freeHeaderIx
operator|>=
literal|0
condition|)
block|{
name|boolean
name|reserved
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|remainingToFind
operator|>
literal|0
condition|)
block|{
name|int
name|headerToFreeIx
init|=
name|getBuddyHeaderIx
argument_list|(
name|mergeListIx
argument_list|,
name|freeHeaderIx
argument_list|)
decl_stmt|;
name|long
name|reserveResult
init|=
name|reserveBlockContents
argument_list|(
name|mergeListIx
argument_list|,
name|headerToFreeIx
argument_list|,
name|ctx
operator|.
name|victimHeaders
argument_list|,
name|ctx
operator|.
name|victimCount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|reservedCount
init|=
name|getFirstInt
argument_list|(
name|reserveResult
argument_list|)
decl_stmt|,
name|moveSize
init|=
name|getSecondInt
argument_list|(
name|reserveResult
argument_list|)
decl_stmt|;
name|reserved
operator|=
operator|(
name|moveSize
operator|!=
name|FAILED_TO_RESERVE
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|reserved
condition|)
block|{
comment|// We cannot abandon the attempt here; the concurrent operations might have released
comment|// all the buffer comprising our buddy block, necessitating a merge into a higher
comment|// list. That may deadlock with another thread locking its own victims (one can only
comment|// take list locks separately, or moving DOWN). The alternative would be to release
comment|// the free list lock before reserving, however iterating the list that way is
comment|// difficult (we'd have to keep track of things on the main path to avoid re-trying
comment|// the same headers repeatedly - we'd rather keep track of extra things on failure).
name|prepareAbandonUnfinishedMoveAttempt
argument_list|(
name|ctx
argument_list|,
name|reservedCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ctx
operator|.
name|victimCount
operator|+=
name|reservedCount
expr_stmt|;
name|ctx
operator|.
name|addBaseHeader
argument_list|(
name|freeHeaderIx
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nextFreeHeaderIx
init|=
name|getNextFreeListItem
argument_list|(
name|offsetFromHeaderIndex
argument_list|(
name|freeHeaderIx
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|reserved
condition|)
block|{
name|removeBlockFromFreeList
argument_list|(
name|freeList
argument_list|,
name|freeHeaderIx
argument_list|,
name|mergeListIx
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|checkHeader
argument_list|(
name|freeHeaderIx
argument_list|,
name|mergeListIx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|setHeaderNoBufAlloc
argument_list|(
name|freeHeaderIx
argument_list|,
name|mergeListIx
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|NEW_BASE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctx
operator|.
name|remainingToFind
operator|==
literal|0
condition|)
break|break;
name|freeHeaderIx
operator|=
name|nextFreeHeaderIx
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// See the above. Release the headers after unlocking.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctx
operator|.
name|abandonedCount
condition|;
operator|++
name|i
control|)
block|{
name|abandonOneHeaderBeingMoved
argument_list|(
name|ctx
operator|.
name|abandonedHeaders
index|[
name|i
index|]
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|ABANDON_AT_END
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|abandonedCount
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * Saves the victim headers from a failed reserve into a separate array into the context.      * See the comment at the call site; this is to prevent deadlocks.      * @param startIx the victim count before this reserve was started.      */
specifier|private
name|void
name|prepareAbandonUnfinishedMoveAttempt
parameter_list|(
name|DiscardContext
name|ctx
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
return|return;
comment|// Nothing to do.
name|int
name|startIx
init|=
name|ctx
operator|.
name|victimCount
decl_stmt|,
name|start
decl_stmt|;
if|if
condition|(
name|ctx
operator|.
name|abandonedHeaders
operator|==
literal|null
condition|)
block|{
name|start
operator|=
literal|0
expr_stmt|;
name|ctx
operator|.
name|abandonedHeaders
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
name|ctx
operator|.
name|abandonedCount
expr_stmt|;
name|int
name|newLen
init|=
name|start
operator|+
name|count
decl_stmt|;
if|if
condition|(
name|newLen
operator|>
name|ctx
operator|.
name|abandonedHeaders
operator|.
name|length
condition|)
block|{
name|ctx
operator|.
name|abandonedHeaders
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|ctx
operator|.
name|abandonedHeaders
argument_list|,
name|newLen
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|ctx
operator|.
name|victimHeaders
argument_list|,
name|startIx
argument_list|,
name|ctx
operator|.
name|abandonedHeaders
argument_list|,
name|start
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|abandonedCount
operator|+=
name|count
expr_stmt|;
name|ctx
operator|.
name|victimCount
operator|=
name|startIx
expr_stmt|;
block|}
comment|/**      * Reserve all the contents of a particular block to merge them together.      * @param freeListIx The list to which the hypothetical block belongs.      * @param freeHeaderIx The header of the base block.      */
specifier|private
name|long
name|reserveBlockContents
parameter_list|(
name|int
name|freeListIx
parameter_list|,
name|int
name|headerToFreeIx
parameter_list|,
name|int
index|[]
name|victimHeaders
parameter_list|,
name|int
name|victimsOffset
parameter_list|,
name|boolean
name|isDiscard
parameter_list|)
block|{
comment|// Try opportunistically for the common case - the same-sized, allocated buddy.
if|if
condition|(
name|enableDefragShortcut
condition|)
block|{
name|LlapAllocatorBuffer
name|buffer
init|=
name|buffers
index|[
name|headerToFreeIx
index|]
decl_stmt|;
name|byte
name|header
init|=
name|headers
index|[
name|headerToFreeIx
index|]
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
operator|&&
name|freeListFromHeader
argument_list|(
name|header
argument_list|)
operator|==
name|freeListIx
condition|)
block|{
comment|// Double-check the header under lock.
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|freeListIx
index|]
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Noone can take this buffer out and thus change the level after we lock, and if
comment|// they take it out before we lock, then we will fail to lock (same as
comment|// prepareOneHeaderForMove).
if|if
condition|(
name|headers
index|[
name|headerToFreeIx
index|]
operator|==
name|header
operator|&&
name|buffer
operator|.
name|startMoveOrDiscard
argument_list|(
name|arenaIx
argument_list|,
name|headerToFreeIx
argument_list|,
name|isDiscard
argument_list|)
condition|)
block|{
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|assertBufferLooksValid
argument_list|(
name|freeListIx
argument_list|,
name|buffer
argument_list|,
name|arenaIx
argument_list|,
name|headerToFreeIx
argument_list|)
expr_stmt|;
name|CasLog
operator|.
name|logMove
argument_list|(
name|arenaIx
argument_list|,
name|headerToFreeIx
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|victimHeaders
index|[
name|victimsOffset
index|]
operator|=
name|headerToFreeIx
expr_stmt|;
return|return
name|makeIntPair
argument_list|(
literal|1
argument_list|,
name|buffer
operator|.
name|allocSize
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// We don't bail on failure - try in detail below.
block|}
block|}
comment|// Examine the buddy block and its sub-blocks in detail.
name|long
index|[]
name|stack
init|=
operator|new
name|long
index|[
name|freeListIx
operator|+
literal|1
index|]
decl_stmt|;
comment|// Can never have more than this in elements.
name|int
name|stackSize
init|=
literal|1
decl_stmt|;
comment|// Seed with the buddy of this block (so the first iteration would target this block).
name|stack
index|[
literal|0
index|]
operator|=
name|makeIntPair
argument_list|(
name|freeListIx
argument_list|,
name|getBuddyHeaderIx
argument_list|(
name|freeListIx
argument_list|,
name|headerToFreeIx
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|victimCount
init|=
literal|0
decl_stmt|;
name|int
name|totalMoveSize
init|=
literal|0
decl_stmt|;
comment|// We traverse the leaf nodes of the tree. The stack entries indicate the existing leaf
comment|// nodes that we need to see siblings for, and sibling levels.
while|while
condition|(
name|stackSize
operator|>
literal|0
condition|)
block|{
operator|--
name|stackSize
expr_stmt|;
name|long
name|next
init|=
name|stack
index|[
name|stackSize
index|]
decl_stmt|;
name|int
name|listLevel
init|=
name|getFirstInt
argument_list|(
name|next
argument_list|)
decl_stmt|;
comment|// This is not an actual list; see intermList.
name|int
name|sourceHeaderIx
init|=
name|getSecondInt
argument_list|(
name|next
argument_list|)
decl_stmt|;
comment|// Find the buddy of the header at list level. We don't know what list it is actually in.
name|int
name|levelBuddyHeaderIx
init|=
name|getBuddyHeaderIx
argument_list|(
name|listLevel
argument_list|,
name|sourceHeaderIx
argument_list|)
decl_stmt|;
comment|// First, handle the actual thing we found.
name|long
name|result
init|=
name|prepareOneHeaderForMove
argument_list|(
name|levelBuddyHeaderIx
argument_list|,
name|isDiscard
argument_list|,
name|freeListIx
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
operator|-
literal|1
condition|)
block|{
comment|// We have failed to reserve a single header. Do not undo the previous ones here,
comment|// the caller has to handle this to avoid races.
return|return
name|makeIntPair
argument_list|(
name|victimCount
argument_list|,
name|FAILED_TO_RESERVE
argument_list|)
return|;
block|}
name|int
name|allocSize
init|=
name|getFirstInt
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|totalMoveSize
operator|+=
name|allocSize
expr_stmt|;
name|victimHeaders
index|[
name|victimsOffset
operator|+
name|victimCount
index|]
operator|=
name|levelBuddyHeaderIx
expr_stmt|;
operator|++
name|victimCount
expr_stmt|;
comment|// Explaining this would really require a picture. Basically if the level is lower than
comment|// our level, that means (imagine a tree) we are on the leftmost leaf node of the sub-tree
comment|// under our sibling in the tree. So we'd need to look at the buddies of that leftmost leaf
comment|// block on all the intermediate levels (aka all intermediate levels of the tree between
comment|// this guy and our sibling). Including its own buddy on its own level. And so on for every
comment|// sub-tree where our buddy is not on the same level as us (i.e. does not cover the entire
comment|// sub-tree).
name|int
name|actualBuddyListIx
init|=
name|getSecondInt
argument_list|(
name|result
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|intermListIx
init|=
name|listLevel
operator|-
literal|1
init|;
name|intermListIx
operator|>=
name|actualBuddyListIx
condition|;
operator|--
name|intermListIx
control|)
block|{
name|stack
index|[
name|stackSize
operator|++
index|]
operator|=
name|makeIntPair
argument_list|(
name|intermListIx
argument_list|,
name|levelBuddyHeaderIx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|makeIntPair
argument_list|(
name|victimCount
argument_list|,
name|totalMoveSize
argument_list|)
return|;
block|}
comment|/**      * Abandons the move attempt for a single header that may be free or allocated.      */
specifier|private
name|void
name|abandonOneHeaderBeingMoved
parameter_list|(
name|int
name|headerIx
parameter_list|,
name|CasLog
operator|.
name|Src
name|src
parameter_list|)
block|{
name|byte
name|header
init|=
name|headers
index|[
name|headerIx
index|]
decl_stmt|;
name|int
name|freeListIx
init|=
name|freeListFromHeader
argument_list|(
name|header
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|header
operator|&
literal|1
operator|)
operator|!=
literal|1
condition|)
name|failWithLog
argument_list|(
literal|"Victim header not in use"
argument_list|)
expr_stmt|;
name|LlapAllocatorBuffer
name|buf
init|=
name|buffers
index|[
name|headerIx
index|]
decl_stmt|;
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
comment|// Note: no location check; the buffer is always locked for move here.
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|assertBufferLooksValid
argument_list|(
name|freeListIx
argument_list|,
name|buf
argument_list|,
name|arenaIx
argument_list|,
name|headerIx
argument_list|)
expr_stmt|;
block|}
name|cancelDiscard
argument_list|(
name|buf
argument_list|,
name|arenaIx
argument_list|,
name|headerIx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|checkHeader
argument_list|(
name|headerIx
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|addToFreeListWithMerge
argument_list|(
name|headerIx
argument_list|,
name|freeListIx
argument_list|,
literal|null
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Prepares victimHeaderIx header to be moved - locks if it's allocated, takes out of      * the free list if not.      * @return the list level to which the header belongs if this succeeded, -1 if not.      */
specifier|private
name|long
name|prepareOneHeaderForMove
parameter_list|(
name|int
name|victimHeaderIx
parameter_list|,
name|boolean
name|isDiscard
parameter_list|,
name|int
name|maxListIx
parameter_list|)
block|{
name|byte
name|header
init|=
name|headers
index|[
name|victimHeaderIx
index|]
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|freeListIx
init|=
name|freeListFromHeader
argument_list|(
name|header
argument_list|)
decl_stmt|;
if|if
condition|(
name|freeListIx
operator|>
name|maxListIx
condition|)
block|{
comment|// This can only come from a brute force discard; for now we don't discard blocks larger
comment|// than the target block. We could discard it and add remainder to free lists.
comment|// By definition if we are fragmented there should be a smaller buffer somewhere.
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|buffers
index|[
name|victimHeaderIx
index|]
operator|==
literal|null
operator|&&
operator|(
name|header
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
comment|// There's no buffer and another move is reserving this.
block|}
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|freeListIx
index|]
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|headers
index|[
name|victimHeaderIx
index|]
operator|!=
name|header
condition|)
block|{
comment|// We bail if there are any changes. Note that we don't care about ABA here - all the
comment|// stuff on the left has been taken out already so noone can touch it, and all the stuff
comment|// on the right is yet to be seen so we don't care if they changed with this - if it's
comment|// in the same free list, the processing sequence will remain the same going right.
return|return
operator|-
literal|1
return|;
block|}
name|LlapAllocatorBuffer
name|buffer
init|=
name|buffers
index|[
name|victimHeaderIx
index|]
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
operator|&&
operator|(
name|header
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
comment|// The only ABA problem we care about. Ok to have another buffer in there;
comment|// not ok to have a location locked by someone else.
block|}
name|int
name|allocSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
comment|// The buffer can only be removed after the removed flag has been set. If we are able to
comment|// lock it here, noone can set the removed flag and thus remove it. That would also mean
comment|// that the header is not free, and noone will touch the header either.
if|if
condition|(
operator|!
name|buffer
operator|.
name|startMoveOrDiscard
argument_list|(
name|arenaIx
argument_list|,
name|victimHeaderIx
argument_list|,
name|isDiscard
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|CasLog
operator|.
name|logMove
argument_list|(
name|arenaIx
argument_list|,
name|victimHeaderIx
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|allocSize
operator|=
name|allocSizeFromFreeList
argument_list|(
name|freeListIx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Take the empty buffer out of the free list.
name|setHeaderNoBufAlloc
argument_list|(
name|victimHeaderIx
argument_list|,
name|freeListIx
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|EMPTY_V
argument_list|)
expr_stmt|;
name|removeBlockFromFreeList
argument_list|(
name|freeList
argument_list|,
name|victimHeaderIx
argument_list|,
name|freeListIx
argument_list|)
expr_stmt|;
block|}
return|return
name|makeIntPair
argument_list|(
name|allocSize
argument_list|,
name|freeListIx
argument_list|)
return|;
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Allocates into an empty block obtained via a forced eviction. Same args as allocateFast. */
specifier|public
name|int
name|allocateFromDiscard
parameter_list|(
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|destIx
parameter_list|,
name|int
name|headerIx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|int
name|allocationSize
parameter_list|)
block|{
name|LlapAllocatorBuffer
name|buffer
init|=
operator|(
name|LlapAllocatorBuffer
operator|)
name|dest
index|[
name|destIx
index|]
decl_stmt|;
name|initializeNewlyAllocated
argument_list|(
name|buffer
argument_list|,
name|allocationSize
argument_list|,
name|headerIx
argument_list|,
name|offsetFromHeaderIndex
argument_list|(
name|headerIx
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|checkHeader
argument_list|(
name|headerIx
argument_list|,
name|freeListIx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|setHeaderAlloc
argument_list|(
name|headerIx
argument_list|,
name|freeListIx
argument_list|,
name|buffer
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|ALLOC_DEFRAG
argument_list|)
expr_stmt|;
return|return
name|destIx
operator|+
literal|1
return|;
block|}
comment|/** Sets the header at an index to refer to an allocated buffer. */
specifier|private
name|void
name|setHeaderAlloc
parameter_list|(
name|int
name|headerIx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|LlapAllocatorBuffer
name|alloc
parameter_list|,
name|CasLog
operator|.
name|Src
name|src
parameter_list|)
block|{
assert|assert
name|alloc
operator|!=
literal|null
assert|;
name|headers
index|[
name|headerIx
index|]
operator|=
name|makeHeader
argument_list|(
name|freeListIx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|buffers
index|[
name|headerIx
index|]
operator|=
name|alloc
expr_stmt|;
name|CasLog
operator|.
name|logSet
argument_list|(
name|src
argument_list|,
name|arenaIx
argument_list|,
name|headerIx
argument_list|,
name|System
operator|.
name|identityHashCode
argument_list|(
name|alloc
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Sets the header at an index to refer to free space in a certain free list. */
specifier|private
name|void
name|setHeaderFree
parameter_list|(
name|int
name|headerIndex
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|CasLog
operator|.
name|Src
name|src
parameter_list|)
block|{
name|headers
index|[
name|headerIndex
index|]
operator|=
name|makeHeader
argument_list|(
name|freeListIx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|buffers
index|[
name|headerIndex
index|]
operator|=
literal|null
expr_stmt|;
name|CasLog
operator|.
name|logSetFree
argument_list|(
name|src
argument_list|,
name|arenaIx
argument_list|,
name|headerIndex
argument_list|,
name|allocSizeFromFreeList
argument_list|(
name|freeListIx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Sets the header at an index to refer to some space in use, without an allocation. */
specifier|private
name|void
name|setHeaderNoBufAlloc
parameter_list|(
name|int
name|headerIndex
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|CasLog
operator|.
name|Src
name|src
parameter_list|)
block|{
name|headers
index|[
name|headerIndex
index|]
operator|=
name|makeHeader
argument_list|(
name|freeListIx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CasLog
operator|.
name|logSetNb
argument_list|(
name|src
argument_list|,
name|arenaIx
argument_list|,
name|headerIndex
argument_list|,
name|allocSizeFromFreeList
argument_list|(
name|freeListIx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Unsets the header at an index (meaning this does not refer to a buffer). */
specifier|private
name|void
name|unsetHeader
parameter_list|(
name|int
name|headerIndex
parameter_list|,
name|CasLog
operator|.
name|Src
name|src
parameter_list|)
block|{
name|headers
index|[
name|headerIndex
index|]
operator|=
literal|0
expr_stmt|;
name|CasLog
operator|.
name|logUnset
argument_list|(
name|src
argument_list|,
name|arenaIx
argument_list|,
name|headerIndex
argument_list|,
name|headerIndex
argument_list|)
expr_stmt|;
block|}
comment|/** Unsets the headers (meaning this does not refer to a buffer). */
specifier|private
name|void
name|unsetHeaders
parameter_list|(
name|int
name|fromHeaderIx
parameter_list|,
name|int
name|toHeaderIx
parameter_list|,
name|CasLog
operator|.
name|Src
name|src
parameter_list|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|headers
argument_list|,
name|fromHeaderIx
argument_list|,
name|toHeaderIx
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|CasLog
operator|.
name|logUnset
argument_list|(
name|src
argument_list|,
name|arenaIx
argument_list|,
name|fromHeaderIx
argument_list|,
name|toHeaderIx
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|debugDump
parameter_list|(
name|StringBuilder
name|result
parameter_list|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"\nArena: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" not allocated"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Try to get as consistent view as we can; make copy of the headers.
name|byte
index|[]
name|headers
init|=
operator|new
name|byte
index|[
name|this
operator|.
name|headers
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|headers
argument_list|,
literal|0
argument_list|,
name|headers
argument_list|,
literal|0
argument_list|,
name|headers
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|allocSize
init|=
name|minAllocation
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freeLists
operator|.
name|length
condition|;
operator|++
name|i
operator|,
name|allocSize
operator|<<=
literal|1
control|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"\n  free list for size "
operator|+
name|allocSize
operator|+
literal|": "
argument_list|)
expr_stmt|;
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|i
index|]
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|nextHeaderIx
init|=
name|freeList
operator|.
name|listHead
decl_stmt|;
while|while
condition|(
name|nextHeaderIx
operator|>=
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|nextHeaderIx
operator|+
literal|", "
argument_list|)
expr_stmt|;
name|nextHeaderIx
operator|=
name|getNextFreeListItem
argument_list|(
name|offsetFromHeaderIndex
argument_list|(
name|nextHeaderIx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|byte
name|header
init|=
name|headers
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|0
condition|)
continue|continue;
name|int
name|freeListIx
init|=
name|freeListFromHeader
argument_list|(
name|header
argument_list|)
decl_stmt|,
name|offset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|isFree
init|=
name|buffers
index|[
name|i
index|]
operator|==
literal|null
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"\n  block "
operator|+
name|i
operator|+
literal|" at "
operator|+
name|offset
operator|+
literal|": size "
operator|+
operator|(
literal|1
operator|<<
operator|(
name|freeListIx
operator|+
name|minAllocLog2
operator|)
operator|)
operator|+
literal|", "
operator|+
operator|(
name|isFree
condition|?
literal|"free"
else|:
literal|"allocated"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Integer
name|debugDumpShort
parameter_list|(
name|StringBuilder
name|result
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|allocSize
init|=
name|minAllocation
decl_stmt|;
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freeLists
operator|.
name|length
condition|;
operator|++
name|i
operator|,
name|allocSize
operator|<<=
literal|1
control|)
block|{
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|i
index|]
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|nextHeaderIx
init|=
name|freeList
operator|.
name|listHead
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nextHeaderIx
operator|>=
literal|0
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|nextHeaderIx
operator|=
name|getNextFreeListItem
argument_list|(
name|offsetFromHeaderIndex
argument_list|(
name|nextHeaderIx
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|total
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"\nArena with free list lengths by size: "
argument_list|)
expr_stmt|;
block|}
name|total
operator|+=
operator|(
name|allocSize
operator|*
name|count
operator|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|allocSize
argument_list|)
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
operator|.
name|append
argument_list|(
name|count
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|total
return|;
block|}
specifier|private
name|void
name|testDump
parameter_list|(
name|StringBuilder
name|result
parameter_list|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"}, "
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Try to get as consistent view as we can; make copy of the headers.
name|byte
index|[]
name|headers
init|=
operator|new
name|byte
index|[
name|this
operator|.
name|headers
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|headers
argument_list|,
literal|0
argument_list|,
name|headers
argument_list|,
literal|0
argument_list|,
name|headers
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|byte
name|header
init|=
name|headers
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|0
condition|)
continue|continue;
name|String
name|allocState
init|=
literal|"."
decl_stmt|;
if|if
condition|(
name|buffers
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|allocState
operator|=
literal|"*"
expr_stmt|;
comment|// Allocated
block|}
elseif|else
if|if
condition|(
operator|(
name|header
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|allocState
operator|=
literal|"!"
expr_stmt|;
comment|// Locked for defrag
block|}
name|int
name|size
init|=
literal|1
operator|<<
operator|(
name|freeListFromHeader
argument_list|(
name|header
argument_list|)
operator|+
name|minAllocLog2
operator|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|size
argument_list|)
operator|.
name|append
argument_list|(
name|allocState
argument_list|)
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|"}, "
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|allocateFast
parameter_list|(
name|int
name|freeListIx
parameter_list|,
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|long
index|[]
name|destHeaders
parameter_list|,
name|int
name|destIx
parameter_list|,
name|int
name|destCount
parameter_list|,
name|int
name|allocSize
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// not allocated yet
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|freeListIx
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|freeList
operator|.
name|lock
operator|.
name|tryLock
argument_list|()
condition|)
return|return
name|destIx
return|;
try|try
block|{
return|return
name|allocateFromFreeListUnderLock
argument_list|(
name|freeList
argument_list|,
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|destHeaders
argument_list|,
name|destIx
argument_list|,
name|destCount
argument_list|,
name|allocSize
argument_list|)
return|;
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|allocateWithSplit
parameter_list|(
name|int
name|freeListIx
parameter_list|,
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|long
index|[]
name|destHeaders
parameter_list|,
name|int
name|destIx
parameter_list|,
name|int
name|destCount
parameter_list|,
name|int
name|allocSize
parameter_list|,
name|int
name|maxSplitFreeListIx
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// not allocated yet
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|freeListIx
index|]
decl_stmt|;
name|int
name|remaining
init|=
operator|-
literal|1
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Try to allocate from target-sized free list, maybe we'll get lucky.
name|destIx
operator|=
name|allocateFromFreeListUnderLock
argument_list|(
name|freeList
argument_list|,
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|destHeaders
argument_list|,
name|destIx
argument_list|,
name|destCount
argument_list|,
name|allocSize
argument_list|)
expr_stmt|;
name|remaining
operator|=
name|destCount
operator|-
name|destIx
expr_stmt|;
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
return|return
name|destIx
return|;
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|int
name|headerStep
init|=
literal|1
operator|<<
name|freeListIx
decl_stmt|;
comment|// Number of headers (smallest blocks) per target block.
name|int
name|splitListIx
init|=
name|freeListIx
operator|+
literal|1
decl_stmt|;
comment|// Next free list from which we will be splitting.
comment|// Each iteration of this loop tries to split blocks from one level of the free list into
comment|// target size blocks; if we cannot satisfy the allocation from the free list containing the
comment|// blocks of a particular size, we'll try to split yet larger blocks, until we run out.
if|if
condition|(
name|maxSplitFreeListIx
operator|==
operator|-
literal|1
condition|)
block|{
name|maxSplitFreeListIx
operator|=
name|freeLists
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
while|while
condition|(
name|remaining
operator|>
literal|0
operator|&&
name|splitListIx
operator|<=
name|maxSplitFreeListIx
condition|)
block|{
name|int
name|splitWaysLog2
init|=
operator|(
name|splitListIx
operator|-
name|freeListIx
operator|)
decl_stmt|;
assert|assert
name|splitWaysLog2
operator|>
literal|0
assert|;
name|int
name|splitWays
init|=
literal|1
operator|<<
name|splitWaysLog2
decl_stmt|;
comment|// How many ways each block splits into target size.
name|int
name|lastSplitBlocksRemaining
init|=
operator|-
literal|1
decl_stmt|;
comment|// How many target-sized blocks remain from last split.
name|int
name|lastSplitNextHeader
init|=
operator|-
literal|1
decl_stmt|;
comment|// The header index for the beginning of the remainder.
name|FreeList
name|splitList
init|=
name|freeLists
index|[
name|splitListIx
index|]
decl_stmt|;
name|splitList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|headerIx
init|=
name|splitList
operator|.
name|listHead
decl_stmt|;
comment|// Index of the next free block to split.
while|while
condition|(
name|headerIx
operator|>=
literal|0
operator|&&
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|origOffset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|headerIx
argument_list|)
decl_stmt|,
name|offset
init|=
name|origOffset
decl_stmt|;
comment|// We will split the block at headerIx [splitWays] ways, and take [toTake] blocks,
comment|// which will leave [lastSplitBlocksRemaining] free blocks of target size.
name|int
name|toTake
init|=
name|Math
operator|.
name|min
argument_list|(
name|splitWays
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|remaining
operator|-=
name|toTake
expr_stmt|;
name|lastSplitBlocksRemaining
operator|=
name|splitWays
operator|-
name|toTake
expr_stmt|;
comment|// Whatever remains.
comment|// Take toTake blocks by splitting the block at offset.
for|for
control|(
init|;
name|toTake
operator|>
literal|0
condition|;
operator|++
name|destIx
operator|,
operator|--
name|toTake
operator|,
name|headerIx
operator|+=
name|headerStep
operator|,
name|offset
operator|+=
name|allocSize
control|)
block|{
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|checkHeader
argument_list|(
name|headerIx
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Cannot validate the list, it may be unset
block|}
if|if
condition|(
name|dest
operator|!=
literal|null
condition|)
block|{
name|LlapAllocatorBuffer
name|buffer
init|=
operator|(
name|LlapAllocatorBuffer
operator|)
name|dest
index|[
name|destIx
index|]
decl_stmt|;
name|initializeNewlyAllocated
argument_list|(
name|buffer
argument_list|,
name|allocSize
argument_list|,
name|headerIx
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|setHeaderAlloc
argument_list|(
name|headerIx
argument_list|,
name|freeListIx
argument_list|,
name|buffer
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|ALLOC_SPLIT_BUF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destHeaders
index|[
name|destIx
index|]
operator|=
name|makeIntPair
argument_list|(
name|arenaIx
argument_list|,
name|headerIx
argument_list|)
expr_stmt|;
name|setHeaderNoBufAlloc
argument_list|(
name|headerIx
argument_list|,
name|freeListIx
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|ALLOC_SPLIT_DEFRAG
argument_list|)
expr_stmt|;
block|}
block|}
name|lastSplitNextHeader
operator|=
name|headerIx
expr_stmt|;
comment|// If anything remains, this is where it starts.
name|headerIx
operator|=
name|getNextFreeListItem
argument_list|(
name|origOffset
argument_list|)
expr_stmt|;
block|}
name|replaceListHeadUnderLock
argument_list|(
name|splitList
argument_list|,
name|headerIx
argument_list|,
name|splitListIx
argument_list|)
expr_stmt|;
comment|// In the end, update free list head.
block|}
finally|finally
block|{
name|splitList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|CasLog
operator|.
name|Src
name|src
init|=
operator|(
name|dest
operator|!=
literal|null
operator|)
condition|?
name|CasLog
operator|.
name|Src
operator|.
name|SPLIT_AFTER_BUF
else|:
name|CasLog
operator|.
name|Src
operator|.
name|SPLIT_AFTER_DEFRAG
decl_stmt|;
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
block|{
comment|// We have just obtained all we needed by splitting some block; now we need
comment|// to put the space remaining from that block into lower free lists.
comment|// We'll put at most one block into each list, since 2 blocks can always be combined
comment|// to make a larger-level block. Each bit in the remaining target-sized blocks count
comment|// is one block in a list offset from target-sized list by bit index.
comment|// We do the merges here too, since the block we just allocated could immediately be
comment|// moved out, then the resulting free space abandoned.
name|int
name|newListIndex
init|=
name|freeListIx
decl_stmt|;
while|while
condition|(
name|lastSplitBlocksRemaining
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|lastSplitBlocksRemaining
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|addToFreeListWithMerge
argument_list|(
name|lastSplitNextHeader
argument_list|,
name|newListIndex
argument_list|,
literal|null
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|lastSplitNextHeader
operator|+=
operator|(
literal|1
operator|<<
name|newListIndex
operator|)
expr_stmt|;
block|}
name|lastSplitBlocksRemaining
operator|>>>=
literal|1
expr_stmt|;
operator|++
name|newListIndex
expr_stmt|;
continue|continue;
block|}
block|}
operator|++
name|splitListIx
expr_stmt|;
block|}
return|return
name|destIx
return|;
block|}
specifier|private
name|void
name|initializeNewlyAllocated
parameter_list|(
name|LlapAllocatorBuffer
name|buffer
parameter_list|,
name|int
name|allocSize
parameter_list|,
name|int
name|headerIx
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|buffer
operator|.
name|initialize
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|allocSize
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|setNewAllocLocation
argument_list|(
name|arenaIx
argument_list|,
name|headerIx
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|replaceListHeadUnderLock
parameter_list|(
name|FreeList
name|freeList
parameter_list|,
name|int
name|headerIx
parameter_list|,
name|int
name|ix
parameter_list|)
block|{
if|if
condition|(
name|headerIx
operator|==
name|freeList
operator|.
name|listHead
condition|)
return|return;
if|if
condition|(
name|headerIx
operator|>=
literal|0
condition|)
block|{
name|int
name|newHeadOffset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|headerIx
argument_list|)
decl_stmt|;
name|data
operator|.
name|putInt
argument_list|(
name|newHeadOffset
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Remove backlink.
block|}
name|freeList
operator|.
name|listHead
operator|=
name|headerIx
expr_stmt|;
block|}
specifier|private
name|int
name|allocateWithExpand
parameter_list|(
name|int
name|arenaIx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|ix
parameter_list|,
name|int
name|size
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|arenaCount
init|=
name|allocatedArenas
operator|.
name|get
argument_list|()
decl_stmt|,
name|allocArenaCount
init|=
name|arenaCount
decl_stmt|;
if|if
condition|(
name|arenaCount
operator|<
literal|0
condition|)
block|{
name|allocArenaCount
operator|=
operator|-
name|arenaCount
operator|-
literal|1
expr_stmt|;
comment|// Someone is allocating an arena.
block|}
if|if
condition|(
name|allocArenaCount
operator|>
name|arenaIx
condition|)
block|{
comment|// Someone already allocated this arena; just do the usual thing.
return|return
name|allocateWithSplit
argument_list|(
name|freeListIx
argument_list|,
name|dest
argument_list|,
literal|null
argument_list|,
name|ix
argument_list|,
name|dest
operator|.
name|length
argument_list|,
name|size
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
if|if
condition|(
operator|(
name|arenaIx
operator|+
literal|1
operator|)
operator|==
operator|-
name|arenaCount
condition|)
block|{
comment|// Someone is allocating this arena. Wait a bit and recheck.
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// Restore interrupt, won't handle here.
block|}
continue|continue;
block|}
comment|// Either this arena is being allocated, or it is already allocated, or it is next. The
comment|// caller should not try to allocate another arena before waiting for the previous one.
assert|assert
name|arenaCount
operator|==
name|arenaIx
operator|:
literal|"Arena count "
operator|+
name|arenaCount
operator|+
literal|" but "
operator|+
name|arenaIx
operator|+
literal|" is not being allocated"
assert|;
if|if
condition|(
operator|!
name|allocatedArenas
operator|.
name|compareAndSet
argument_list|(
name|arenaCount
argument_list|,
operator|-
name|arenaCount
operator|-
literal|1
argument_list|)
condition|)
block|{
continue|continue;
comment|// CAS race, look again.
block|}
assert|assert
name|data
operator|==
literal|null
assert|;
name|init
argument_list|(
name|arenaIx
argument_list|)
expr_stmt|;
name|boolean
name|isCommited
init|=
name|allocatedArenas
operator|.
name|compareAndSet
argument_list|(
operator|-
name|arenaCount
operator|-
literal|1
argument_list|,
name|arenaCount
operator|+
literal|1
argument_list|)
decl_stmt|;
assert|assert
name|isCommited
assert|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|metrics
operator|.
name|incrAllocatedArena
argument_list|()
expr_stmt|;
return|return
name|allocateWithSplit
argument_list|(
name|freeListIx
argument_list|,
name|dest
argument_list|,
literal|null
argument_list|,
name|ix
argument_list|,
name|dest
operator|.
name|length
argument_list|,
name|size
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
specifier|public
name|int
name|allocateFromFreeListUnderLock
parameter_list|(
name|FreeList
name|freeList
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|long
index|[]
name|destHeaders
parameter_list|,
name|int
name|destIx
parameter_list|,
name|int
name|destCount
parameter_list|,
name|int
name|allocSize
parameter_list|)
block|{
name|int
name|current
init|=
name|freeList
operator|.
name|listHead
decl_stmt|;
assert|assert
operator|(
name|dest
operator|==
literal|null
operator|)
operator|!=
operator|(
name|destHeaders
operator|==
literal|null
operator|)
assert|;
while|while
condition|(
name|current
operator|>=
literal|0
operator|&&
name|destIx
operator|<
name|destCount
condition|)
block|{
name|int
name|offset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|current
argument_list|)
decl_stmt|,
name|allocHeaderIx
init|=
name|current
decl_stmt|;
name|current
operator|=
name|getNextFreeListItem
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertsEnabled
condition|)
block|{
name|checkHeader
argument_list|(
name|allocHeaderIx
argument_list|,
name|freeListIx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dest
operator|!=
literal|null
condition|)
block|{
name|LlapAllocatorBuffer
name|buffer
init|=
operator|(
name|LlapAllocatorBuffer
operator|)
name|dest
index|[
name|destIx
index|]
decl_stmt|;
name|initializeNewlyAllocated
argument_list|(
name|buffer
argument_list|,
name|allocSize
argument_list|,
name|allocHeaderIx
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|setHeaderAlloc
argument_list|(
name|allocHeaderIx
argument_list|,
name|freeListIx
argument_list|,
name|buffer
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|ALLOC_FREE_BUF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destHeaders
index|[
name|destIx
index|]
operator|=
name|makeIntPair
argument_list|(
name|arenaIx
argument_list|,
name|allocHeaderIx
argument_list|)
expr_stmt|;
name|setHeaderNoBufAlloc
argument_list|(
name|allocHeaderIx
argument_list|,
name|freeListIx
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|ALLOC_FREE_DEFRAG
argument_list|)
expr_stmt|;
block|}
operator|++
name|destIx
expr_stmt|;
block|}
name|replaceListHeadUnderLock
argument_list|(
name|freeList
argument_list|,
name|current
argument_list|,
name|freeListIx
argument_list|)
expr_stmt|;
return|return
name|destIx
return|;
block|}
specifier|private
name|int
name|getPrevFreeListItem
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|data
operator|.
name|getInt
argument_list|(
name|offset
argument_list|)
return|;
block|}
specifier|private
name|int
name|getNextFreeListItem
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|data
operator|.
name|getInt
argument_list|(
name|offset
operator|+
literal|4
argument_list|)
return|;
block|}
specifier|public
name|void
name|deallocate
parameter_list|(
name|LlapAllocatorBuffer
name|buffer
parameter_list|,
name|boolean
name|isAfterMove
parameter_list|)
block|{
assert|assert
name|data
operator|!=
literal|null
assert|;
name|int
name|pos
init|=
name|buffer
operator|.
name|byteBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
comment|// Note: this is called by someone who has ensured the buffer is not going to be moved.
name|int
name|headerIx
init|=
name|pos
operator|>>>
name|minAllocLog2
decl_stmt|;
name|int
name|freeListIx
init|=
name|freeListFromAllocSize
argument_list|(
name|buffer
operator|.
name|allocSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertsEnabled
operator|&&
operator|!
name|isAfterMove
condition|)
block|{
name|LlapAllocatorBuffer
name|buf
init|=
name|buffers
index|[
name|headerIx
index|]
decl_stmt|;
if|if
condition|(
name|buf
operator|!=
name|buffer
condition|)
block|{
name|failWithLog
argument_list|(
name|arenaIx
operator|+
literal|":"
operator|+
name|headerIx
operator|+
literal|" => "
operator|+
name|toDebugString
argument_list|(
name|buffer
argument_list|)
operator|+
literal|", "
operator|+
name|toDebugString
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertBufferLooksValid
argument_list|(
name|freeListFromHeader
argument_list|(
name|headers
index|[
name|headerIx
index|]
argument_list|)
argument_list|,
name|buf
argument_list|,
name|arenaIx
argument_list|,
name|headerIx
argument_list|)
expr_stmt|;
name|checkHeader
argument_list|(
name|headerIx
argument_list|,
name|freeListIx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|buffers
index|[
name|headerIx
index|]
operator|=
literal|null
expr_stmt|;
name|addToFreeListWithMerge
argument_list|(
name|headerIx
argument_list|,
name|freeListIx
argument_list|,
name|buffer
argument_list|,
name|CasLog
operator|.
name|Src
operator|.
name|DEALLOC
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addToFreeListWithMerge
parameter_list|(
name|int
name|headerIx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|LlapAllocatorBuffer
name|buffer
parameter_list|,
name|CasLog
operator|.
name|Src
name|src
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|freeListIx
index|]
decl_stmt|;
name|int
name|bHeaderIx
init|=
name|getBuddyHeaderIx
argument_list|(
name|freeListIx
argument_list|,
name|headerIx
argument_list|)
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|freeListIx
operator|==
name|freeLists
operator|.
name|length
operator|-
literal|1
operator|)
operator|||
name|headers
index|[
name|bHeaderIx
index|]
operator|!=
name|makeHeader
argument_list|(
name|freeListIx
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// Buddy block is allocated, or it is on higher level of allocation than we are, or we
comment|// have reached the top level. Add whatever we have got to the current free list.
name|addBlockToFreeListUnderLock
argument_list|(
name|freeList
argument_list|,
name|headerIx
argument_list|,
name|freeListIx
argument_list|)
expr_stmt|;
name|setHeaderFree
argument_list|(
name|headerIx
argument_list|,
name|freeListIx
argument_list|,
name|src
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Buddy block is free and in the same free list we have locked. Take it out for merge.
name|removeBlockFromFreeList
argument_list|(
name|freeList
argument_list|,
name|bHeaderIx
argument_list|,
name|freeListIx
argument_list|)
expr_stmt|;
name|unsetHeader
argument_list|(
name|bHeaderIx
argument_list|,
name|src
argument_list|)
expr_stmt|;
comment|// Erase both headers of the blocks to merge.
name|unsetHeader
argument_list|(
name|headerIx
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
operator|++
name|freeListIx
expr_stmt|;
name|headerIx
operator|=
name|Math
operator|.
name|min
argument_list|(
name|headerIx
argument_list|,
name|bHeaderIx
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addBlockToFreeListUnderLock
parameter_list|(
name|FreeList
name|freeList
parameter_list|,
name|int
name|headerIx
parameter_list|,
name|int
name|ix
parameter_list|)
block|{
name|CasLog
operator|.
name|logAddToList
argument_list|(
name|arenaIx
argument_list|,
name|headerIx
argument_list|,
name|ix
argument_list|,
name|freeList
operator|.
name|listHead
argument_list|)
expr_stmt|;
if|if
condition|(
name|freeList
operator|.
name|listHead
operator|>=
literal|0
condition|)
block|{
name|int
name|oldHeadOffset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|freeList
operator|.
name|listHead
argument_list|)
decl_stmt|;
assert|assert
name|getPrevFreeListItem
argument_list|(
name|oldHeadOffset
argument_list|)
operator|==
operator|-
literal|1
assert|;
name|data
operator|.
name|putInt
argument_list|(
name|oldHeadOffset
argument_list|,
name|headerIx
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|headerIx
argument_list|)
decl_stmt|;
name|data
operator|.
name|putInt
argument_list|(
name|offset
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|data
operator|.
name|putInt
argument_list|(
name|offset
operator|+
literal|4
argument_list|,
name|freeList
operator|.
name|listHead
argument_list|)
expr_stmt|;
name|freeList
operator|.
name|listHead
operator|=
name|headerIx
expr_stmt|;
block|}
specifier|private
name|void
name|removeBlockFromFreeList
parameter_list|(
name|FreeList
name|freeList
parameter_list|,
name|int
name|headerIx
parameter_list|,
name|int
name|ix
parameter_list|)
block|{
name|int
name|bOffset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|headerIx
argument_list|)
decl_stmt|,
name|bpHeaderIx
init|=
name|getPrevFreeListItem
argument_list|(
name|bOffset
argument_list|)
decl_stmt|,
name|bnHeaderIx
init|=
name|getNextFreeListItem
argument_list|(
name|bOffset
argument_list|)
decl_stmt|;
name|CasLog
operator|.
name|logRemoveFromList
argument_list|(
name|arenaIx
argument_list|,
name|headerIx
argument_list|,
name|ix
argument_list|,
name|freeList
operator|.
name|listHead
argument_list|)
expr_stmt|;
if|if
condition|(
name|freeList
operator|.
name|listHead
operator|==
name|headerIx
condition|)
block|{
assert|assert
name|bpHeaderIx
operator|==
operator|-
literal|1
assert|;
name|freeList
operator|.
name|listHead
operator|=
name|bnHeaderIx
expr_stmt|;
block|}
comment|// Unnecessary: data.putInt(bOffset, -1); data.putInt(bOffset + 4, -1);
if|if
condition|(
name|bpHeaderIx
operator|!=
operator|-
literal|1
condition|)
block|{
name|data
operator|.
name|putInt
argument_list|(
name|offsetFromHeaderIndex
argument_list|(
name|bpHeaderIx
argument_list|)
operator|+
literal|4
argument_list|,
name|bnHeaderIx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bnHeaderIx
operator|!=
operator|-
literal|1
condition|)
block|{
name|data
operator|.
name|putInt
argument_list|(
name|offsetFromHeaderIndex
argument_list|(
name|bnHeaderIx
argument_list|)
argument_list|,
name|bpHeaderIx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|FreeList
block|{
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|int
name|listHead
init|=
operator|-
literal|1
decl_stmt|;
comment|// Index of where the buffer is; in minAllocation units (headers array).
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|MemoryBuffer
name|createUnallocated
parameter_list|()
block|{
return|return
operator|new
name|LlapDataBuffer
argument_list|()
return|;
block|}
comment|// BuddyAllocatorMXBean
annotation|@
name|Override
specifier|public
name|boolean
name|getIsDirect
parameter_list|()
block|{
return|return
name|isDirect
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMinAllocation
parameter_list|()
block|{
return|return
name|minAllocation
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxAllocation
parameter_list|()
block|{
return|return
name|maxAllocation
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getArenaSize
parameter_list|()
block|{
return|return
name|arenaSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxCacheSize
parameter_list|()
block|{
return|return
name|maxSize
return|;
block|}
comment|// Various helper methods.
specifier|private
specifier|static
name|int
name|getBuddyHeaderIx
parameter_list|(
name|int
name|freeListIx
parameter_list|,
name|int
name|headerIx
parameter_list|)
block|{
return|return
name|headerIx
operator|^
operator|(
literal|1
operator|<<
name|freeListIx
operator|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getNextIx
parameter_list|(
name|int
name|ix
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|step
parameter_list|)
block|{
name|ix
operator|+=
name|step
expr_stmt|;
assert|assert
name|ix
operator|<=
name|count
assert|;
comment|// We expect the start at 0 and count divisible by step.
return|return
name|ix
operator|==
name|count
condition|?
literal|0
else|:
name|ix
return|;
block|}
specifier|private
specifier|static
name|int
name|freeListFromHeader
parameter_list|(
name|byte
name|header
parameter_list|)
block|{
return|return
operator|(
name|header
operator|>>
literal|1
operator|)
operator|-
literal|1
return|;
block|}
specifier|private
name|int
name|freeListFromAllocSize
parameter_list|(
name|int
name|allocSize
parameter_list|)
block|{
return|return
operator|(
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|allocSize
argument_list|)
operator|)
operator|-
name|minAllocLog2
return|;
block|}
specifier|private
name|int
name|allocSizeFromFreeList
parameter_list|(
name|int
name|freeListIx
parameter_list|)
block|{
return|return
literal|1
operator|<<
operator|(
name|freeListIx
operator|+
name|minAllocLog2
operator|)
return|;
block|}
specifier|public
name|int
name|offsetFromHeaderIndex
parameter_list|(
name|int
name|lastSplitNextHeader
parameter_list|)
block|{
return|return
name|lastSplitNextHeader
operator|<<
name|minAllocLog2
return|;
block|}
specifier|private
specifier|static
name|byte
name|makeHeader
parameter_list|(
name|int
name|freeListIx
parameter_list|,
name|boolean
name|isInUse
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
operator|(
operator|(
name|freeListIx
operator|+
literal|1
operator|)
operator|<<
literal|1
operator|)
operator||
operator|(
name|isInUse
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
return|;
block|}
specifier|private
name|int
name|determineFreeListForAllocation
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|int
name|freeListIx
init|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|(
literal|1
operator|<<
name|freeListIx
operator|)
condition|)
operator|++
name|freeListIx
expr_stmt|;
comment|// not a power of two, add one more
return|return
name|Math
operator|.
name|max
argument_list|(
name|freeListIx
operator|-
name|minAllocLog2
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|// Utility methods used to store pairs of ints as long.
specifier|private
specifier|static
name|long
name|makeIntPair
parameter_list|(
name|int
name|first
parameter_list|,
name|int
name|second
parameter_list|)
block|{
return|return
operator|(
operator|(
name|long
operator|)
name|first
operator|)
operator|<<
literal|32
operator||
name|second
return|;
block|}
specifier|private
specifier|static
name|int
name|getFirstInt
parameter_list|(
name|long
name|result
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|result
operator|>>>
literal|32
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getSecondInt
parameter_list|(
name|long
name|result
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|result
operator|&
operator|(
operator|(
literal|1L
operator|<<
literal|32
operator|)
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
comment|// Debug/test related methods.
specifier|private
name|void
name|assertBufferLooksValid
parameter_list|(
name|int
name|freeListIx
parameter_list|,
name|LlapAllocatorBuffer
name|buf
parameter_list|,
name|int
name|arenaIx
parameter_list|,
name|int
name|headerIx
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|.
name|allocSize
operator|==
name|allocSizeFromFreeList
argument_list|(
name|freeListIx
argument_list|)
condition|)
return|return;
name|failWithLog
argument_list|(
literal|"Race; allocation size "
operator|+
name|buf
operator|.
name|allocSize
operator|+
literal|", not "
operator|+
name|allocSizeFromFreeList
argument_list|(
name|freeListIx
argument_list|)
operator|+
literal|" for free list "
operator|+
name|freeListIx
operator|+
literal|" at "
operator|+
name|arenaIx
operator|+
literal|":"
operator|+
name|headerIx
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|toDebugString
parameter_list|(
name|LlapAllocatorBuffer
name|buffer
parameter_list|)
block|{
return|return
name|buffer
operator|==
literal|null
condition|?
literal|"null"
else|:
name|buffer
operator|.
name|toDebugString
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkHeaderByte
parameter_list|(
name|int
name|arenaIx
parameter_list|,
name|int
name|headerIx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|boolean
name|isLocked
parameter_list|,
name|byte
name|header
parameter_list|)
block|{
if|if
condition|(
name|isLocked
operator|!=
operator|(
operator|(
name|header
operator|&
literal|1
operator|)
operator|==
literal|1
operator|)
condition|)
block|{
name|failWithLog
argument_list|(
literal|"Expected "
operator|+
name|arenaIx
operator|+
literal|":"
operator|+
name|headerIx
operator|+
literal|" "
operator|+
operator|(
name|isLocked
condition|?
literal|""
else|:
literal|"not "
operator|)
operator|+
literal|"locked: "
operator|+
name|header
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|freeListIx
operator|<
literal|0
condition|)
return|return;
if|if
condition|(
name|freeListFromHeader
argument_list|(
name|header
argument_list|)
operator|!=
name|freeListIx
condition|)
block|{
name|failWithLog
argument_list|(
literal|"Expected "
operator|+
name|arenaIx
operator|+
literal|":"
operator|+
name|headerIx
operator|+
literal|" in list "
operator|+
name|freeListIx
operator|+
literal|": "
operator|+
name|freeListFromHeader
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
name|void
name|disableDefragShortcutForTest
parameter_list|()
block|{
name|this
operator|.
name|enableDefragShortcut
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|setOomLoggingForTest
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|oomLogging
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|String
name|testDump
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Arena
name|a
range|:
name|arenas
control|)
block|{
name|a
operator|.
name|testDump
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|debugDumpForOomInternal
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Arena
name|a
range|:
name|arenas
control|)
block|{
name|a
operator|.
name|debugDump
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|failWithLog
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|CasLog
operator|.
name|logError
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
name|string
argument_list|)
throw|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|dumpTestLog
parameter_list|()
block|{
if|if
condition|(
name|CasLog
operator|.
name|casLog
operator|!=
literal|null
condition|)
block|{
name|CasLog
operator|.
name|casLog
operator|.
name|dumpLog
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|CasLog
block|{
comment|// TODO: enable this for production debug, switching between two small buffers?
specifier|private
specifier|final
specifier|static
name|CasLog
name|casLog
init|=
literal|null
decl_stmt|;
comment|//new CasLog();
specifier|public
enum|enum
name|Src
block|{
name|NEWLY_CLEARED
block|,
name|SPLIT_AFTER_BUF
block|,
name|SPLIT_AFTER_DEFRAG
block|,
name|ALLOC_SPLIT_DEFRAG
block|,
name|ALLOC_SPLIT_BUF
block|,
name|ALLOC_DEFRAG
block|,
name|EMPTY_V
block|,
name|NEW_BASE
block|,
name|CTOR
block|,
name|MOVE_TO_NESTED
block|,
name|MOVE_TO_ALLOC
block|,
name|ABANDON_MOVE
block|,
name|ABANDON_AT_END
block|,
name|ABANDON_BASE
block|,
name|CLEARED_BASE
block|,
name|CLEARED_VICTIM
block|,
name|UNUSABLE_NESTED
block|,
name|ABANDON_NESTED
block|,
name|DEALLOC
block|,
name|ALLOC_FREE_DEFRAG
block|,
name|ALLOC_FREE_BUF
block|}
specifier|private
specifier|final
name|int
name|size
decl_stmt|;
specifier|private
specifier|final
name|long
index|[]
name|log
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|offset
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|CasLog
parameter_list|()
block|{
name|size
operator|=
literal|50000000
expr_stmt|;
name|log
operator|=
operator|new
name|long
index|[
name|size
index|]
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|START_MOVE
init|=
literal|0
decl_stmt|,
name|SET_NB
init|=
literal|1
decl_stmt|,
name|SET_BUF
init|=
literal|2
decl_stmt|,
name|SET_FREE
init|=
literal|3
decl_stmt|,
name|ADD_TO_LIST
init|=
literal|4
decl_stmt|,
name|REMOVE_FROM_LIST
init|=
literal|5
decl_stmt|,
name|ERROR
init|=
literal|6
decl_stmt|,
name|UNSET
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
name|void
name|logMove
parameter_list|(
name|int
name|arenaIx
parameter_list|,
name|int
name|buddyHeaderIx
parameter_list|,
name|int
name|identityHashCode
parameter_list|)
block|{
if|if
condition|(
name|casLog
operator|==
literal|null
condition|)
return|return;
name|int
name|ix
init|=
name|casLog
operator|.
name|offset
operator|.
name|addAndGet
argument_list|(
literal|3
argument_list|)
operator|-
literal|3
decl_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
index|]
operator|=
name|makeIntPair
argument_list|(
name|START_MOVE
argument_list|,
name|identityHashCode
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|2
index|]
operator|=
name|makeIntPair
argument_list|(
name|arenaIx
argument_list|,
name|buddyHeaderIx
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logSetNb
parameter_list|(
name|CasLog
operator|.
name|Src
name|src
parameter_list|,
name|int
name|arenaIx
parameter_list|,
name|int
name|headerIndex
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|casLog
operator|==
literal|null
condition|)
return|return;
name|int
name|ix
init|=
name|casLog
operator|.
name|offset
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
operator|-
literal|4
decl_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
index|]
operator|=
name|makeIntPair
argument_list|(
name|SET_NB
argument_list|,
name|src
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|2
index|]
operator|=
name|makeIntPair
argument_list|(
name|arenaIx
argument_list|,
name|headerIndex
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|3
index|]
operator|=
name|size
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logSetFree
parameter_list|(
name|CasLog
operator|.
name|Src
name|src
parameter_list|,
name|int
name|arenaIx
parameter_list|,
name|int
name|headerIndex
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|casLog
operator|==
literal|null
condition|)
return|return;
name|int
name|ix
init|=
name|casLog
operator|.
name|offset
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
operator|-
literal|4
decl_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
index|]
operator|=
name|makeIntPair
argument_list|(
name|SET_FREE
argument_list|,
name|src
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|2
index|]
operator|=
name|makeIntPair
argument_list|(
name|arenaIx
argument_list|,
name|headerIndex
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|3
index|]
operator|=
name|size
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logUnset
parameter_list|(
name|CasLog
operator|.
name|Src
name|src
parameter_list|,
name|int
name|arenaIx
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
if|if
condition|(
name|casLog
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|from
operator|>
name|to
condition|)
return|return;
name|int
name|ix
init|=
name|casLog
operator|.
name|offset
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
operator|-
literal|4
decl_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
index|]
operator|=
name|makeIntPair
argument_list|(
name|UNSET
argument_list|,
name|src
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|2
index|]
operator|=
name|makeIntPair
argument_list|(
name|arenaIx
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|3
index|]
operator|=
name|makeIntPair
argument_list|(
name|arenaIx
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logSet
parameter_list|(
name|CasLog
operator|.
name|Src
name|src
parameter_list|,
name|int
name|arenaIx
parameter_list|,
name|int
name|headerIndex
parameter_list|,
name|int
name|identityHashCode
parameter_list|)
block|{
if|if
condition|(
name|casLog
operator|==
literal|null
condition|)
return|return;
name|int
name|ix
init|=
name|casLog
operator|.
name|offset
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
operator|-
literal|4
decl_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
index|]
operator|=
name|makeIntPair
argument_list|(
name|SET_BUF
argument_list|,
name|src
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|2
index|]
operator|=
name|makeIntPair
argument_list|(
name|arenaIx
argument_list|,
name|headerIndex
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|3
index|]
operator|=
name|identityHashCode
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logRemoveFromList
parameter_list|(
name|int
name|arenaIx
parameter_list|,
name|int
name|headerIx
parameter_list|,
name|int
name|listIx
parameter_list|,
name|int
name|listHead
parameter_list|)
block|{
if|if
condition|(
name|casLog
operator|==
literal|null
condition|)
return|return;
name|int
name|ix
init|=
name|casLog
operator|.
name|offset
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
operator|-
literal|4
decl_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
index|]
operator|=
name|makeIntPair
argument_list|(
name|REMOVE_FROM_LIST
argument_list|,
name|listIx
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|2
index|]
operator|=
name|makeIntPair
argument_list|(
name|arenaIx
argument_list|,
name|headerIx
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|3
index|]
operator|=
name|listHead
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logAddToList
parameter_list|(
name|int
name|arenaIx
parameter_list|,
name|int
name|headerIx
parameter_list|,
name|int
name|listIx
parameter_list|,
name|int
name|listHead
parameter_list|)
block|{
if|if
condition|(
name|casLog
operator|==
literal|null
condition|)
return|return;
name|int
name|ix
init|=
name|casLog
operator|.
name|offset
operator|.
name|addAndGet
argument_list|(
literal|4
argument_list|)
operator|-
literal|4
decl_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
index|]
operator|=
name|makeIntPair
argument_list|(
name|ADD_TO_LIST
argument_list|,
name|listIx
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|2
index|]
operator|=
name|makeIntPair
argument_list|(
name|arenaIx
argument_list|,
name|headerIx
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|3
index|]
operator|=
name|listHead
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|logError
parameter_list|()
block|{
if|if
condition|(
name|casLog
operator|==
literal|null
condition|)
return|return;
name|int
name|ix
init|=
name|casLog
operator|.
name|offset
operator|.
name|addAndGet
argument_list|(
literal|2
argument_list|)
operator|-
literal|2
decl_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
index|]
operator|=
name|makeIntPair
argument_list|(
name|ERROR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|casLog
operator|.
name|log
index|[
name|ix
operator|+
literal|1
index|]
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|dumpOneLine
parameter_list|(
name|int
name|ix
parameter_list|)
block|{
name|int
name|event
init|=
name|getFirstInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|START_MOVE
case|:
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|prefix
argument_list|(
name|ix
argument_list|)
operator|+
literal|" started to move "
operator|+
name|header
argument_list|(
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
operator|+
literal|" "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|3
return|;
block|}
case|case
name|SET_NB
case|:
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|prefix
argument_list|(
name|ix
argument_list|)
operator|+
literal|" "
operator|+
name|src
argument_list|(
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
argument_list|)
operator|+
literal|" set "
operator|+
name|header
argument_list|(
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
operator|+
literal|" to taken of size "
operator|+
name|log
index|[
name|ix
operator|+
literal|3
index|]
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|4
return|;
block|}
case|case
name|SET_FREE
case|:
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|prefix
argument_list|(
name|ix
argument_list|)
operator|+
literal|" "
operator|+
name|src
argument_list|(
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
argument_list|)
operator|+
literal|" set "
operator|+
name|header
argument_list|(
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
operator|+
literal|" to free of size "
operator|+
name|log
index|[
name|ix
operator|+
literal|3
index|]
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|4
return|;
block|}
case|case
name|UNSET
case|:
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|prefix
argument_list|(
name|ix
argument_list|)
operator|+
literal|" "
operator|+
name|src
argument_list|(
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
argument_list|)
operator|+
literal|" unset ["
operator|+
name|header
argument_list|(
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
operator|+
literal|", "
operator|+
name|header
argument_list|(
name|log
index|[
name|ix
operator|+
literal|3
index|]
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|4
return|;
block|}
case|case
name|SET_BUF
case|:
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|prefix
argument_list|(
name|ix
argument_list|)
operator|+
literal|" "
operator|+
name|src
argument_list|(
name|getSecondInt
argument_list|(
name|log
index|[
name|ix
index|]
argument_list|)
argument_list|)
operator|+
literal|" set "
operator|+
name|header
argument_list|(
name|log
index|[
name|ix
operator|+
literal|2
index|]
argument_list|)
operator|+
literal|" to "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
operator|(
name|int
operator|)
name|log
index|[
name|ix
operator|+
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|4
return|;
block|}
case|case
name|ADD_TO_LIST
case|:
block|{
comment|//LlapIoImpl.LOG.info(prefix(ix) + " adding " + header(log[ix + 2]) + " to "
comment|//    + getSecondInt(log[ix]) + " before " + log[ix + 3]);
return|return
name|ix
operator|+
literal|4
return|;
block|}
case|case
name|REMOVE_FROM_LIST
case|:
block|{
comment|// LlapIoImpl.LOG.info(prefix(ix) + " removing " + header(log[ix + 2]) + " from "
comment|//   + getSecondInt(log[ix]) + " head " + log[ix + 3]);
return|return
name|ix
operator|+
literal|4
return|;
block|}
case|case
name|ERROR
case|:
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|prefix
argument_list|(
name|ix
argument_list|)
operator|+
literal|" failed"
argument_list|)
expr_stmt|;
return|return
name|ix
operator|+
literal|2
return|;
block|}
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown "
operator|+
name|event
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|prefix
parameter_list|(
name|int
name|ix
parameter_list|)
block|{
return|return
name|ix
operator|+
literal|" thread-"
operator|+
name|log
index|[
name|ix
operator|+
literal|1
index|]
return|;
block|}
specifier|private
name|String
name|src
parameter_list|(
name|int
name|val
parameter_list|)
block|{
return|return
name|Src
operator|.
name|values
argument_list|()
index|[
name|val
index|]
operator|.
name|name
argument_list|()
return|;
block|}
specifier|private
name|String
name|header
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
name|getFirstInt
argument_list|(
name|l
argument_list|)
operator|+
literal|":"
operator|+
name|getSecondInt
argument_list|(
name|l
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|dumpLog
parameter_list|(
name|boolean
name|doSleep
parameter_list|)
block|{
if|if
condition|(
name|doSleep
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
name|int
name|logSize
init|=
operator|(
name|int
operator|)
name|offset
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|ix
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ix
operator|<
name|logSize
condition|)
block|{
name|ix
operator|=
name|dumpOneLine
argument_list|(
name|ix
argument_list|)
expr_stmt|;
block|}
name|offset
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

