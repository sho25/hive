begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonCacheMetrics
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|BuddyAllocator
implements|implements
name|EvictionAwareAllocator
implements|,
name|BuddyAllocatorMXBean
block|{
specifier|private
specifier|final
name|Arena
index|[]
name|arenas
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|allocatedArenas
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MemoryManager
name|memoryManager
decl_stmt|;
comment|// Config settings
specifier|private
specifier|final
name|int
name|minAllocLog2
decl_stmt|,
name|maxAllocLog2
decl_stmt|,
name|arenaSizeLog2
decl_stmt|,
name|maxArenas
decl_stmt|;
specifier|private
specifier|final
name|int
name|minAllocation
decl_stmt|,
name|maxAllocation
decl_stmt|,
name|arenaSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDirect
decl_stmt|;
specifier|private
specifier|final
name|LlapDaemonCacheMetrics
name|metrics
decl_stmt|;
comment|// We don't know the acceptable size for Java array, so we'll use 1Gb boundary.
comment|// That is guaranteed to fit any maximum allocation.
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ARENA_SIZE
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|public
name|BuddyAllocator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MemoryManager
name|memoryManager
parameter_list|,
name|LlapDaemonCacheMetrics
name|metrics
parameter_list|)
block|{
name|isDirect
operator|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_DIRECT
argument_list|)
expr_stmt|;
name|minAllocation
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MIN_ALLOC
argument_list|)
expr_stmt|;
name|maxAllocation
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MAX_ALLOC
argument_list|)
expr_stmt|;
name|int
name|arenaCount
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_ARENA_COUNT
argument_list|)
decl_stmt|;
name|long
name|maxSizeVal
init|=
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_MEMORY_MAX_SIZE
argument_list|)
decl_stmt|;
name|int
name|arenaSizeVal
init|=
operator|(
name|arenaCount
operator|==
literal|0
operator|)
condition|?
name|MAX_ARENA_SIZE
else|:
call|(
name|int
call|)
argument_list|(
name|maxSizeVal
operator|/
name|arenaCount
argument_list|)
decl_stmt|;
name|arenaSizeVal
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxAllocation
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|arenaSizeVal
argument_list|,
name|MAX_ARENA_SIZE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Buddy allocator with "
operator|+
operator|(
name|isDirect
condition|?
literal|"direct"
else|:
literal|"byte"
operator|)
operator|+
literal|" buffers; allocation sizes "
operator|+
name|minAllocation
operator|+
literal|" - "
operator|+
name|maxAllocation
operator|+
literal|", arena size "
operator|+
name|arenaSizeVal
operator|+
literal|". total size "
operator|+
name|maxSizeVal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minAllocation
operator|<
literal|8
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Min allocation must be at least 8: "
operator|+
name|minAllocation
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxSizeVal
operator|<
name|arenaSizeVal
operator|||
name|maxAllocation
operator|<
name|minAllocation
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Inconsistent sizes of cache, arena and allocations: "
operator|+
name|minAllocation
operator|+
literal|", "
operator|+
name|maxAllocation
operator|+
literal|", "
operator|+
name|arenaSizeVal
operator|+
literal|", "
operator|+
name|maxSizeVal
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|Integer
operator|.
name|bitCount
argument_list|(
name|minAllocation
argument_list|)
operator|!=
literal|1
operator|)
operator|||
operator|(
name|Integer
operator|.
name|bitCount
argument_list|(
name|maxAllocation
argument_list|)
operator|!=
literal|1
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Allocation sizes must be powers of two: "
operator|+
name|minAllocation
operator|+
literal|", "
operator|+
name|maxAllocation
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|arenaSizeVal
operator|%
name|maxAllocation
operator|)
operator|>
literal|0
condition|)
block|{
name|long
name|oldArenaSize
init|=
name|arenaSizeVal
decl_stmt|;
name|arenaSizeVal
operator|=
operator|(
name|arenaSizeVal
operator|/
name|maxAllocation
operator|)
operator|*
name|maxAllocation
expr_stmt|;
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Rounding arena size to "
operator|+
name|arenaSizeVal
operator|+
literal|" from "
operator|+
name|oldArenaSize
operator|+
literal|" to be divisible by allocation size "
operator|+
name|maxAllocation
argument_list|)
expr_stmt|;
block|}
name|arenaSize
operator|=
name|arenaSizeVal
expr_stmt|;
if|if
condition|(
operator|(
name|maxSizeVal
operator|%
name|arenaSize
operator|)
operator|>
literal|0
condition|)
block|{
name|long
name|oldMaxSize
init|=
name|maxSizeVal
decl_stmt|;
name|maxSizeVal
operator|=
operator|(
name|maxSizeVal
operator|/
name|arenaSize
operator|)
operator|*
name|arenaSize
expr_stmt|;
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Rounding cache size to "
operator|+
name|maxSizeVal
operator|+
literal|" from "
operator|+
name|oldMaxSize
operator|+
literal|" to be divisible by arena size "
operator|+
name|arenaSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|maxSizeVal
operator|/
name|arenaSize
operator|)
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Too many arenas needed to allocate the cache: "
operator|+
name|arenaSize
operator|+
literal|","
operator|+
name|maxSizeVal
argument_list|)
throw|;
block|}
name|maxSize
operator|=
name|maxSizeVal
expr_stmt|;
name|memoryManager
operator|.
name|updateMaxSize
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
name|minAllocLog2
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|minAllocation
argument_list|)
expr_stmt|;
name|maxAllocLog2
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|maxAllocation
argument_list|)
expr_stmt|;
name|arenaSizeLog2
operator|=
literal|63
operator|-
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|arenaSize
argument_list|)
expr_stmt|;
name|maxArenas
operator|=
call|(
name|int
call|)
argument_list|(
name|maxSize
operator|/
name|arenaSize
argument_list|)
expr_stmt|;
name|arenas
operator|=
operator|new
name|Arena
index|[
name|maxArenas
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxArenas
condition|;
operator|++
name|i
control|)
block|{
name|arenas
index|[
name|i
index|]
operator|=
operator|new
name|Arena
argument_list|()
expr_stmt|;
block|}
name|arenas
index|[
literal|0
index|]
operator|.
name|init
argument_list|()
expr_stmt|;
name|allocatedArenas
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|memoryManager
operator|=
name|memoryManager
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|metrics
operator|.
name|incrAllocatedArena
argument_list|()
expr_stmt|;
block|}
comment|// TODO: would it make sense to return buffers asynchronously?
annotation|@
name|Override
specifier|public
name|void
name|allocateMultiple
parameter_list|(
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|AllocatorOutOfMemoryException
block|{
assert|assert
name|size
operator|>
literal|0
operator|:
literal|"size is "
operator|+
name|size
assert|;
if|if
condition|(
name|size
operator|>
name|maxAllocation
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Trying to allocate "
operator|+
name|size
operator|+
literal|"; max is "
operator|+
name|maxAllocation
argument_list|)
throw|;
block|}
name|int
name|freeListIx
init|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|(
literal|1
operator|<<
name|freeListIx
operator|)
condition|)
operator|++
name|freeListIx
expr_stmt|;
comment|// not a power of two, add one more
name|freeListIx
operator|=
name|Math
operator|.
name|max
argument_list|(
name|freeListIx
operator|-
name|minAllocLog2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|allocLog2
init|=
name|freeListIx
operator|+
name|minAllocLog2
decl_stmt|;
name|int
name|allocationSize
init|=
literal|1
operator|<<
name|allocLog2
decl_stmt|;
comment|// TODO: reserving the entire thing is not ideal before we alloc anything. Interleave?
name|memoryManager
operator|.
name|reserveMemory
argument_list|(
name|dest
operator|.
name|length
operator|<<
name|allocLog2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|destAllocIx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dest
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|dest
index|[
name|i
index|]
operator|!=
literal|null
condition|)
continue|continue;
name|dest
index|[
name|i
index|]
operator|=
name|createUnallocated
argument_list|()
expr_stmt|;
comment|// TODO: pool of objects?
block|}
comment|// First try to quickly lock some of the correct-sized free lists and allocate from them.
name|int
name|arenaCount
init|=
name|allocatedArenas
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|arenaCount
operator|<
literal|0
condition|)
block|{
name|arenaCount
operator|=
operator|-
name|arenaCount
operator|-
literal|1
expr_stmt|;
comment|// Next arena is being allocated.
block|}
name|long
name|threadId
init|=
name|arenaCount
operator|>
literal|1
condition|?
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
else|:
literal|0
decl_stmt|;
block|{
name|int
name|startArenaIx
init|=
call|(
name|int
call|)
argument_list|(
name|threadId
operator|%
name|arenaCount
argument_list|)
decl_stmt|,
name|index
init|=
name|startArenaIx
decl_stmt|;
do|do
block|{
name|int
name|newDestIx
init|=
name|arenas
index|[
name|index
index|]
operator|.
name|allocateFast
argument_list|(
name|index
argument_list|,
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|destAllocIx
argument_list|,
name|allocationSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDestIx
operator|==
name|dest
operator|.
name|length
condition|)
return|return;
assert|assert
name|newDestIx
operator|!=
operator|-
literal|1
assert|;
name|destAllocIx
operator|=
name|newDestIx
expr_stmt|;
if|if
condition|(
operator|(
operator|++
name|index
operator|)
operator|==
name|arenaCount
condition|)
block|{
name|index
operator|=
literal|0
expr_stmt|;
block|}
block|}
do|while
condition|(
name|index
operator|!=
name|startArenaIx
condition|)
do|;
block|}
comment|// 1) We can get fragmented on large blocks of uncompressed data. The memory might be
comment|// in there, but it might be in separate small blocks. This is a complicated problem, and
comment|// several solutions (in order of decreasing ugliness and increasing complexity) are: just
comment|// ask to evict the exact-sized block (there may be no such block), evict from a particular
comment|// arena (policy would know allocator internals somewhat), store buffer mapping and ask to
comment|// evict from specific choice of blocks next to each other or next to already-evicted block,
comment|// and finally do a compaction (requires a block mapping and complex sync). For now we'd just
comment|// force-evict some memory and avoid both complexity and ugliness, since large blocks are rare.
comment|// 2) Fragmentation aside (TODO: and this is a very hacky solution for that),
comment|// we called reserveMemory so we know that there's memory waiting for us somewhere.
comment|// However, we have a class of rare race conditions related to the order of locking/checking of
comment|// different allocation areas. Simple case - say we have 2 arenas, 256Kb available in arena 2.
comment|// We look at arena 1; someone deallocs 256Kb from arena 1 and allocs the same from arena 2;
comment|// we look at arena 2 and find no memory. Or, for single arena, 2 threads reserve 256k each,
comment|// and a single 1Mb block is available. When the 1st thread locks the 1Mb freelist, the 2nd one
comment|// might have already examined the 256k and 512k lists, finding nothing. Blocks placed by (1)
comment|// into smaller lists after its split is done will not be found by (2); given that freelist
comment|// locks don't overlap, (2) may even run completely between the time (1) takes out the 1Mb
comment|// block and the time it returns the remaining 768Kb.
comment|// Two solutions to this are some form of cross-thread helping (threads putting "demand"
comment|// into some sort of queues that deallocate and split will examine), or having and "actor"
comment|// allocator thread (or threads per arena).
comment|// The 2nd one is probably much simpler and will allow us to get rid of a lot of sync code.
comment|// But for now we will just retry 5 times 0_o
for|for
control|(
name|int
name|attempt
init|=
literal|0
init|;
name|attempt
operator|<
literal|5
condition|;
operator|++
name|attempt
control|)
block|{
comment|// Try to split bigger blocks. TODO: again, ideally we would tryLock at least once
block|{
name|int
name|startArenaIx
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|threadId
operator|+
name|attempt
operator|)
operator|%
name|arenaCount
argument_list|)
decl_stmt|,
name|arenaIx
init|=
name|startArenaIx
decl_stmt|;
do|do
block|{
name|int
name|newDestIx
init|=
name|arenas
index|[
name|arenaIx
index|]
operator|.
name|allocateWithSplit
argument_list|(
name|arenaIx
argument_list|,
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|destAllocIx
argument_list|,
name|allocationSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDestIx
operator|==
name|dest
operator|.
name|length
condition|)
return|return;
assert|assert
name|newDestIx
operator|!=
operator|-
literal|1
assert|;
name|destAllocIx
operator|=
name|newDestIx
expr_stmt|;
if|if
condition|(
operator|(
operator|++
name|arenaIx
operator|)
operator|==
name|arenaCount
condition|)
block|{
name|arenaIx
operator|=
literal|0
expr_stmt|;
block|}
block|}
do|while
condition|(
name|arenaIx
operator|!=
name|startArenaIx
condition|)
do|;
block|}
if|if
condition|(
name|attempt
operator|==
literal|0
condition|)
block|{
comment|// Try to allocate memory if we haven't allocated all the way to maxSize yet; very rare.
for|for
control|(
name|int
name|arenaIx
init|=
name|arenaCount
init|;
name|arenaIx
operator|<
name|arenas
operator|.
name|length
condition|;
operator|++
name|arenaIx
control|)
block|{
name|destAllocIx
operator|=
name|arenas
index|[
name|arenaIx
index|]
operator|.
name|allocateWithExpand
argument_list|(
name|arenaIx
argument_list|,
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|destAllocIx
argument_list|,
name|allocationSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|destAllocIx
operator|==
name|dest
operator|.
name|length
condition|)
return|return;
block|}
block|}
name|memoryManager
operator|.
name|forceReservedMemory
argument_list|(
name|allocationSize
operator|*
operator|(
name|dest
operator|.
name|length
operator|-
name|destAllocIx
operator|)
argument_list|)
expr_stmt|;
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to allocate despite reserved memory; will retry "
operator|+
name|attempt
argument_list|)
expr_stmt|;
block|}
name|String
name|msg
init|=
literal|"Failed to allocate "
operator|+
name|size
operator|+
literal|"; at "
operator|+
name|destAllocIx
operator|+
literal|" out of "
operator|+
name|dest
operator|.
name|length
decl_stmt|;
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|msg
operator|+
literal|"\nALLOCATOR STATE:\n"
operator|+
name|debugDump
argument_list|()
operator|+
literal|"\nPARENT STATE:\n"
operator|+
name|memoryManager
operator|.
name|debugDumpForOom
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AllocatorOutOfMemoryException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deallocate
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
name|deallocateInternal
argument_list|(
name|buffer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deallocateEvicted
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
name|deallocateInternal
argument_list|(
name|buffer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deallocateInternal
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|,
name|boolean
name|doReleaseMemory
parameter_list|)
block|{
name|LlapDataBuffer
name|buf
init|=
operator|(
name|LlapDataBuffer
operator|)
name|buffer
decl_stmt|;
name|long
name|memUsage
init|=
name|buf
operator|.
name|getMemoryUsage
argument_list|()
decl_stmt|;
name|arenas
index|[
name|buf
operator|.
name|arenaIndex
index|]
operator|.
name|deallocate
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|doReleaseMemory
condition|)
block|{
name|memoryManager
operator|.
name|releaseMemory
argument_list|(
name|memUsage
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDirectAlloc
parameter_list|()
block|{
return|return
name|isDirect
return|;
block|}
specifier|public
name|String
name|debugDump
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"NOTE: with multiple threads the dump is not guaranteed to be consistent"
argument_list|)
decl_stmt|;
for|for
control|(
name|Arena
name|arena
range|:
name|arenas
control|)
block|{
name|arena
operator|.
name|debugDump
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// BuddyAllocatorMXBean
annotation|@
name|Override
specifier|public
name|boolean
name|getIsDirect
parameter_list|()
block|{
return|return
name|isDirect
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMinAllocation
parameter_list|()
block|{
return|return
name|minAllocation
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxAllocation
parameter_list|()
block|{
return|return
name|maxAllocation
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getArenaSize
parameter_list|()
block|{
return|return
name|arenaSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMaxCacheSize
parameter_list|()
block|{
return|return
name|maxSize
return|;
block|}
specifier|private
class|class
name|Arena
block|{
specifier|private
name|ByteBuffer
name|data
decl_stmt|;
comment|// Avoid storing headers with data since we expect binary size allocations.
comment|// Each headers[i] is a "virtual" byte at i * minAllocation.
specifier|private
name|byte
index|[]
name|headers
decl_stmt|;
specifier|private
name|FreeList
index|[]
name|freeLists
decl_stmt|;
name|void
name|init
parameter_list|()
block|{
name|data
operator|=
name|isDirect
condition|?
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|arenaSize
argument_list|)
else|:
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|arenaSize
argument_list|)
expr_stmt|;
name|int
name|maxMinAllocs
init|=
literal|1
operator|<<
operator|(
name|arenaSizeLog2
operator|-
name|minAllocLog2
operator|)
decl_stmt|;
name|headers
operator|=
operator|new
name|byte
index|[
name|maxMinAllocs
index|]
expr_stmt|;
name|int
name|allocLog2Diff
init|=
name|maxAllocLog2
operator|-
name|minAllocLog2
decl_stmt|,
name|freeListCount
init|=
name|allocLog2Diff
operator|+
literal|1
decl_stmt|;
name|freeLists
operator|=
operator|new
name|FreeList
index|[
name|freeListCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freeListCount
condition|;
operator|++
name|i
control|)
block|{
name|freeLists
index|[
name|i
index|]
operator|=
operator|new
name|FreeList
argument_list|()
expr_stmt|;
block|}
name|int
name|maxMaxAllocs
init|=
literal|1
operator|<<
operator|(
name|arenaSizeLog2
operator|-
name|maxAllocLog2
operator|)
decl_stmt|,
name|headerIndex
init|=
literal|0
decl_stmt|,
name|headerStep
init|=
literal|1
operator|<<
name|allocLog2Diff
decl_stmt|;
name|freeLists
index|[
name|allocLog2Diff
index|]
operator|.
name|listHead
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|offset
init|=
literal|0
init|;
name|i
operator|<
name|maxMaxAllocs
condition|;
operator|++
name|i
operator|,
name|offset
operator|+=
name|maxAllocation
control|)
block|{
comment|// TODO: will this cause bugs on large numbers due to some Java sign bit stupidity?
name|headers
index|[
name|headerIndex
index|]
operator|=
name|makeHeader
argument_list|(
name|allocLog2Diff
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|data
operator|.
name|putInt
argument_list|(
name|offset
argument_list|,
operator|(
name|i
operator|==
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|headerIndex
operator|-
name|headerStep
operator|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|putInt
argument_list|(
name|offset
operator|+
literal|4
argument_list|,
operator|(
name|i
operator|==
name|maxMaxAllocs
operator|-
literal|1
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|headerIndex
operator|+
name|headerStep
operator|)
argument_list|)
expr_stmt|;
name|headerIndex
operator|+=
name|headerStep
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|debugDump
parameter_list|(
name|StringBuilder
name|result
parameter_list|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"\nArena: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" not allocated"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Try to get as consistent view as we can; make copy of the headers.
name|byte
index|[]
name|headers
init|=
operator|new
name|byte
index|[
name|this
operator|.
name|headers
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|headers
argument_list|,
literal|0
argument_list|,
name|headers
argument_list|,
literal|0
argument_list|,
name|headers
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|allocSize
init|=
name|minAllocation
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freeLists
operator|.
name|length
condition|;
operator|++
name|i
operator|,
name|allocSize
operator|<<=
literal|1
control|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"\n  free list for size "
operator|+
name|allocSize
operator|+
literal|": "
argument_list|)
expr_stmt|;
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|i
index|]
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|nextHeaderIx
init|=
name|freeList
operator|.
name|listHead
decl_stmt|;
while|while
condition|(
name|nextHeaderIx
operator|>=
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|nextHeaderIx
operator|+
literal|", "
argument_list|)
expr_stmt|;
name|nextHeaderIx
operator|=
name|getNextFreeListItem
argument_list|(
name|offsetFromHeaderIndex
argument_list|(
name|nextHeaderIx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headers
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|byte
name|header
init|=
name|headers
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|0
condition|)
continue|continue;
name|int
name|freeListIx
init|=
name|freeListFromHeader
argument_list|(
name|header
argument_list|)
decl_stmt|,
name|offset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|isFree
init|=
operator|(
name|header
operator|&
literal|1
operator|)
operator|==
literal|0
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"\n  block "
operator|+
name|i
operator|+
literal|" at "
operator|+
name|offset
operator|+
literal|": size "
operator|+
operator|(
literal|1
operator|<<
operator|(
name|freeListIx
operator|+
name|minAllocLog2
operator|)
operator|)
operator|+
literal|", "
operator|+
operator|(
name|isFree
condition|?
literal|"free"
else|:
literal|"allocated"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|freeListFromHeader
parameter_list|(
name|byte
name|header
parameter_list|)
block|{
return|return
operator|(
name|header
operator|>>
literal|1
operator|)
operator|-
literal|1
return|;
block|}
specifier|private
name|int
name|allocateFast
parameter_list|(
name|int
name|arenaIx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|ix
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// not allocated yet
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|freeListIx
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|freeList
operator|.
name|lock
operator|.
name|tryLock
argument_list|()
condition|)
return|return
name|ix
return|;
try|try
block|{
return|return
name|allocateFromFreeListUnderLock
argument_list|(
name|arenaIx
argument_list|,
name|freeList
argument_list|,
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|ix
argument_list|,
name|size
argument_list|)
return|;
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|allocateWithSplit
parameter_list|(
name|int
name|arenaIx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|ix
parameter_list|,
name|int
name|allocationSize
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|// not allocated yet
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|freeListIx
index|]
decl_stmt|;
name|int
name|remaining
init|=
operator|-
literal|1
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Try to allocate from target-sized free list, maybe we'll get lucky.
name|ix
operator|=
name|allocateFromFreeListUnderLock
argument_list|(
name|arenaIx
argument_list|,
name|freeList
argument_list|,
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|ix
argument_list|,
name|allocationSize
argument_list|)
expr_stmt|;
name|remaining
operator|=
name|dest
operator|.
name|length
operator|-
name|ix
expr_stmt|;
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
return|return
name|ix
return|;
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|byte
name|headerData
init|=
name|makeHeader
argument_list|(
name|freeListIx
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Header for newly allocated used blocks.
name|int
name|headerStep
init|=
literal|1
operator|<<
name|freeListIx
decl_stmt|;
comment|// Number of headers (smallest blocks) per target block.
name|int
name|splitListIx
init|=
name|freeListIx
operator|+
literal|1
decl_stmt|;
comment|// Next free list from which we will be splitting.
comment|// Each iteration of this loop tries to split blocks from one level of the free list into
comment|// target size blocks; if we cannot satisfy the allocation from the free list containing the
comment|// blocks of a particular size, we'll try to split yet larger blocks, until we run out.
while|while
condition|(
name|remaining
operator|>
literal|0
operator|&&
name|splitListIx
operator|<
name|freeLists
operator|.
name|length
condition|)
block|{
name|int
name|splitWaysLog2
init|=
operator|(
name|splitListIx
operator|-
name|freeListIx
operator|)
decl_stmt|;
assert|assert
name|splitWaysLog2
operator|>
literal|0
assert|;
name|int
name|splitWays
init|=
literal|1
operator|<<
name|splitWaysLog2
decl_stmt|;
comment|// How many ways each block splits into target size.
name|int
name|lastSplitBlocksRemaining
init|=
operator|-
literal|1
decl_stmt|;
comment|// How many target-sized blocks remain from last split.
name|int
name|lastSplitNextHeader
init|=
operator|-
literal|1
decl_stmt|;
comment|// The header index for the beginning of the remainder.
name|FreeList
name|splitList
init|=
name|freeLists
index|[
name|splitListIx
index|]
decl_stmt|;
name|splitList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|headerIx
init|=
name|splitList
operator|.
name|listHead
decl_stmt|;
comment|// Index of the next free block to split.
while|while
condition|(
name|headerIx
operator|>=
literal|0
operator|&&
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|origOffset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|headerIx
argument_list|)
decl_stmt|,
name|offset
init|=
name|origOffset
decl_stmt|;
comment|// We will split the block at headerIx [splitWays] ways, and take [toTake] blocks,
comment|// which will leave [lastSplitBlocksRemaining] free blocks of target size.
name|int
name|toTake
init|=
name|Math
operator|.
name|min
argument_list|(
name|splitWays
argument_list|,
name|remaining
argument_list|)
decl_stmt|;
name|remaining
operator|-=
name|toTake
expr_stmt|;
name|lastSplitBlocksRemaining
operator|=
name|splitWays
operator|-
name|toTake
expr_stmt|;
comment|// Whatever remains.
comment|// Take toTake blocks by splitting the block at offset.
for|for
control|(
init|;
name|toTake
operator|>
literal|0
condition|;
operator|++
name|ix
operator|,
operator|--
name|toTake
operator|,
name|headerIx
operator|+=
name|headerStep
operator|,
name|offset
operator|+=
name|allocationSize
control|)
block|{
name|headers
index|[
name|headerIx
index|]
operator|=
name|headerData
expr_stmt|;
comment|// TODO: this could be done out of the lock, we only need to take the blocks out.
operator|(
operator|(
name|LlapDataBuffer
operator|)
name|dest
index|[
name|ix
index|]
operator|)
operator|.
name|initialize
argument_list|(
name|arenaIx
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|allocationSize
argument_list|)
expr_stmt|;
block|}
name|lastSplitNextHeader
operator|=
name|headerIx
expr_stmt|;
comment|// If anything remains, this is where it starts.
name|headerIx
operator|=
name|getNextFreeListItem
argument_list|(
name|origOffset
argument_list|)
expr_stmt|;
block|}
name|replaceListHeadUnderLock
argument_list|(
name|splitList
argument_list|,
name|headerIx
argument_list|)
expr_stmt|;
comment|// In the end, update free list head.
block|}
finally|finally
block|{
name|splitList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|remaining
operator|==
literal|0
condition|)
block|{
comment|// We have just obtained all we needed by splitting some block; now we need
comment|// to put the space remaining from that block into lower free lists.
comment|// We'll put at most one block into each list, since 2 blocks can always be combined
comment|// to make a larger-level block. Each bit in the remaining target-sized blocks count
comment|// is one block in a list offset from target-sized list by bit index.
name|int
name|newListIndex
init|=
name|freeListIx
decl_stmt|;
while|while
condition|(
name|lastSplitBlocksRemaining
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|lastSplitBlocksRemaining
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|FreeList
name|newFreeList
init|=
name|freeLists
index|[
name|newListIndex
index|]
decl_stmt|;
name|newFreeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|headers
index|[
name|lastSplitNextHeader
index|]
operator|=
name|makeHeader
argument_list|(
name|newListIndex
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|addBlockToFreeListUnderLock
argument_list|(
name|newFreeList
argument_list|,
name|lastSplitNextHeader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|newFreeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|lastSplitNextHeader
operator|+=
operator|(
literal|1
operator|<<
name|newListIndex
operator|)
expr_stmt|;
block|}
name|lastSplitBlocksRemaining
operator|>>>=
literal|1
expr_stmt|;
operator|++
name|newListIndex
expr_stmt|;
continue|continue;
block|}
block|}
operator|++
name|splitListIx
expr_stmt|;
block|}
return|return
name|ix
return|;
block|}
specifier|private
name|void
name|replaceListHeadUnderLock
parameter_list|(
name|FreeList
name|freeList
parameter_list|,
name|int
name|headerIx
parameter_list|)
block|{
if|if
condition|(
name|headerIx
operator|==
name|freeList
operator|.
name|listHead
condition|)
return|return;
if|if
condition|(
name|headerIx
operator|>=
literal|0
condition|)
block|{
name|int
name|newHeadOffset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|headerIx
argument_list|)
decl_stmt|;
name|data
operator|.
name|putInt
argument_list|(
name|newHeadOffset
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Remove backlink.
block|}
name|freeList
operator|.
name|listHead
operator|=
name|headerIx
expr_stmt|;
block|}
specifier|private
name|int
name|allocateWithExpand
parameter_list|(
name|int
name|arenaIx
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|ix
parameter_list|,
name|int
name|size
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|arenaCount
init|=
name|allocatedArenas
operator|.
name|get
argument_list|()
decl_stmt|,
name|allocArenaCount
init|=
name|arenaCount
decl_stmt|;
if|if
condition|(
name|arenaCount
operator|<
literal|0
condition|)
block|{
name|allocArenaCount
operator|=
operator|-
name|arenaCount
operator|-
literal|1
expr_stmt|;
comment|// Someone is allocating an arena.
block|}
if|if
condition|(
name|allocArenaCount
operator|>
name|arenaIx
condition|)
block|{
comment|// Someone already allocated this arena; just do the usual thing.
return|return
name|allocateWithSplit
argument_list|(
name|arenaIx
argument_list|,
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|ix
argument_list|,
name|size
argument_list|)
return|;
block|}
if|if
condition|(
operator|(
name|arenaIx
operator|+
literal|1
operator|)
operator|==
operator|-
name|arenaCount
condition|)
block|{
comment|// Someone is allocating this arena. Wait a bit and recheck.
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// Restore interrupt, won't handle here.
block|}
continue|continue;
block|}
comment|// Either this arena is being allocated, or it is already allocated, or it is next. The
comment|// caller should not try to allocate another arena before waiting for the previous one.
assert|assert
name|arenaCount
operator|==
name|arenaIx
operator|:
literal|"Arena count "
operator|+
name|arenaCount
operator|+
literal|" but "
operator|+
name|arenaIx
operator|+
literal|" is not being allocated"
assert|;
if|if
condition|(
operator|!
name|allocatedArenas
operator|.
name|compareAndSet
argument_list|(
name|arenaCount
argument_list|,
operator|-
name|arenaCount
operator|-
literal|1
argument_list|)
condition|)
block|{
continue|continue;
comment|// CAS race, look again.
block|}
assert|assert
name|data
operator|==
literal|null
assert|;
name|init
argument_list|()
expr_stmt|;
name|boolean
name|isCommited
init|=
name|allocatedArenas
operator|.
name|compareAndSet
argument_list|(
operator|-
name|arenaCount
operator|-
literal|1
argument_list|,
name|arenaCount
operator|+
literal|1
argument_list|)
decl_stmt|;
assert|assert
name|isCommited
assert|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|metrics
operator|.
name|incrAllocatedArena
argument_list|()
expr_stmt|;
return|return
name|allocateWithSplit
argument_list|(
name|arenaIx
argument_list|,
name|freeListIx
argument_list|,
name|dest
argument_list|,
name|ix
argument_list|,
name|size
argument_list|)
return|;
block|}
block|}
specifier|public
name|int
name|offsetFromHeaderIndex
parameter_list|(
name|int
name|lastSplitNextHeader
parameter_list|)
block|{
return|return
name|lastSplitNextHeader
operator|<<
name|minAllocLog2
return|;
block|}
specifier|public
name|int
name|allocateFromFreeListUnderLock
parameter_list|(
name|int
name|arenaIx
parameter_list|,
name|FreeList
name|freeList
parameter_list|,
name|int
name|freeListIx
parameter_list|,
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|ix
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|int
name|current
init|=
name|freeList
operator|.
name|listHead
decl_stmt|;
while|while
condition|(
name|current
operator|>=
literal|0
operator|&&
name|ix
operator|<
name|dest
operator|.
name|length
condition|)
block|{
name|int
name|offset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|current
argument_list|)
decl_stmt|;
comment|// Noone else has this either allocated or in a different free list; no sync needed.
name|headers
index|[
name|current
index|]
operator|=
name|makeHeader
argument_list|(
name|freeListIx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|current
operator|=
name|getNextFreeListItem
argument_list|(
name|offset
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LlapDataBuffer
operator|)
name|dest
index|[
name|ix
index|]
operator|)
operator|.
name|initialize
argument_list|(
name|arenaIx
argument_list|,
name|data
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
operator|++
name|ix
expr_stmt|;
block|}
name|replaceListHeadUnderLock
argument_list|(
name|freeList
argument_list|,
name|current
argument_list|)
expr_stmt|;
return|return
name|ix
return|;
block|}
specifier|private
name|int
name|getPrevFreeListItem
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|data
operator|.
name|getInt
argument_list|(
name|offset
argument_list|)
return|;
block|}
specifier|private
name|int
name|getNextFreeListItem
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|data
operator|.
name|getInt
argument_list|(
name|offset
operator|+
literal|4
argument_list|)
return|;
block|}
specifier|private
name|byte
name|makeHeader
parameter_list|(
name|int
name|freeListIx
parameter_list|,
name|boolean
name|isInUse
parameter_list|)
block|{
return|return
call|(
name|byte
call|)
argument_list|(
operator|(
operator|(
name|freeListIx
operator|+
literal|1
operator|)
operator|<<
literal|1
operator|)
operator||
operator|(
name|isInUse
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|deallocate
parameter_list|(
name|LlapDataBuffer
name|buffer
parameter_list|)
block|{
assert|assert
name|data
operator|!=
literal|null
assert|;
name|int
name|headerIx
init|=
name|buffer
operator|.
name|byteBuffer
operator|.
name|position
argument_list|()
operator|>>>
name|minAllocLog2
decl_stmt|,
name|freeListIx
init|=
name|freeListFromHeader
argument_list|(
name|headers
index|[
name|headerIx
index|]
argument_list|)
decl_stmt|;
assert|assert
name|freeListIx
operator|==
operator|(
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|buffer
operator|.
name|allocSize
argument_list|)
operator|-
name|minAllocLog2
operator|)
assert|;
while|while
condition|(
literal|true
condition|)
block|{
name|FreeList
name|freeList
init|=
name|freeLists
index|[
name|freeListIx
index|]
decl_stmt|;
name|int
name|bHeaderIx
init|=
name|headerIx
operator|^
operator|(
literal|1
operator|<<
name|freeListIx
operator|)
decl_stmt|;
name|freeList
operator|.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|freeListIx
operator|==
name|freeLists
operator|.
name|length
operator|-
literal|1
operator|)
operator|||
name|headers
index|[
name|bHeaderIx
index|]
operator|!=
name|makeHeader
argument_list|(
name|freeListIx
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// Buddy block is allocated, or it is on higher level of allocation than we are, or we
comment|// have reached the top level. Add whatever we have got to the current free list.
name|addBlockToFreeListUnderLock
argument_list|(
name|freeList
argument_list|,
name|headerIx
argument_list|)
expr_stmt|;
name|headers
index|[
name|headerIx
index|]
operator|=
name|makeHeader
argument_list|(
name|freeListIx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Buddy block is free and in the same free list we have locked. Take it out for merge.
name|removeBlockFromFreeList
argument_list|(
name|freeList
argument_list|,
name|bHeaderIx
argument_list|)
expr_stmt|;
name|headers
index|[
name|bHeaderIx
index|]
operator|=
name|headers
index|[
name|headerIx
index|]
operator|=
literal|0
expr_stmt|;
comment|// Erase both headers of the blocks to merge.
block|}
finally|finally
block|{
name|freeList
operator|.
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
operator|++
name|freeListIx
expr_stmt|;
name|headerIx
operator|=
name|Math
operator|.
name|min
argument_list|(
name|headerIx
argument_list|,
name|bHeaderIx
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addBlockToFreeListUnderLock
parameter_list|(
name|FreeList
name|freeList
parameter_list|,
name|int
name|headerIx
parameter_list|)
block|{
if|if
condition|(
name|freeList
operator|.
name|listHead
operator|>=
literal|0
condition|)
block|{
name|int
name|oldHeadOffset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|freeList
operator|.
name|listHead
argument_list|)
decl_stmt|;
assert|assert
name|getPrevFreeListItem
argument_list|(
name|oldHeadOffset
argument_list|)
operator|==
operator|-
literal|1
assert|;
name|data
operator|.
name|putInt
argument_list|(
name|oldHeadOffset
argument_list|,
name|headerIx
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|headerIx
argument_list|)
decl_stmt|;
name|data
operator|.
name|putInt
argument_list|(
name|offset
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|data
operator|.
name|putInt
argument_list|(
name|offset
operator|+
literal|4
argument_list|,
name|freeList
operator|.
name|listHead
argument_list|)
expr_stmt|;
name|freeList
operator|.
name|listHead
operator|=
name|headerIx
expr_stmt|;
block|}
specifier|private
name|void
name|removeBlockFromFreeList
parameter_list|(
name|FreeList
name|freeList
parameter_list|,
name|int
name|headerIx
parameter_list|)
block|{
name|int
name|bOffset
init|=
name|offsetFromHeaderIndex
argument_list|(
name|headerIx
argument_list|)
decl_stmt|,
name|bpHeaderIx
init|=
name|getPrevFreeListItem
argument_list|(
name|bOffset
argument_list|)
decl_stmt|,
name|bnHeaderIx
init|=
name|getNextFreeListItem
argument_list|(
name|bOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|freeList
operator|.
name|listHead
operator|==
name|headerIx
condition|)
block|{
assert|assert
name|bpHeaderIx
operator|==
operator|-
literal|1
assert|;
name|freeList
operator|.
name|listHead
operator|=
name|bnHeaderIx
expr_stmt|;
block|}
if|if
condition|(
name|bpHeaderIx
operator|!=
operator|-
literal|1
condition|)
block|{
name|data
operator|.
name|putInt
argument_list|(
name|offsetFromHeaderIndex
argument_list|(
name|bpHeaderIx
argument_list|)
operator|+
literal|4
argument_list|,
name|bnHeaderIx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bnHeaderIx
operator|!=
operator|-
literal|1
condition|)
block|{
name|data
operator|.
name|putInt
argument_list|(
name|offsetFromHeaderIndex
argument_list|(
name|bnHeaderIx
argument_list|)
argument_list|,
name|bpHeaderIx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|FreeList
block|{
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|int
name|listHead
init|=
operator|-
literal|1
decl_stmt|;
comment|// Index of where the buffer is; in minAllocation units
comment|// TODO: One possible improvement - store blocks arriving left over from splits, and
comment|//       blocks requested, to be able to wait for pending splits and reduce fragmentation.
comment|//       However, we are trying to increase fragmentation now, since we cater to single-size.
block|}
annotation|@
name|Override
specifier|public
name|MemoryBuffer
name|createUnallocated
parameter_list|()
block|{
return|return
operator|new
name|LlapDataBuffer
argument_list|()
return|;
block|}
block|}
end_class

end_unit

