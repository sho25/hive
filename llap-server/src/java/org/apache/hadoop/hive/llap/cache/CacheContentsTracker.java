begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|CacheTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCache
operator|.
name|Priority
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|joining
import|;
end_import

begin_comment
comment|/**  * A wrapper around cache eviction policy that tracks cache contents via tags.  */
end_comment

begin_class
specifier|public
class|class
name|CacheContentsTracker
implements|implements
name|LowLevelCachePolicy
implements|,
name|EvictionListener
block|{
specifier|private
specifier|static
specifier|final
name|long
name|CLEANUP_TIME_MS
init|=
literal|3600
operator|*
literal|1000L
decl_stmt|,
name|MIN_TIME_MS
init|=
literal|300
operator|*
literal|1000L
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|CacheTag
argument_list|,
name|TagState
argument_list|>
name|tagInfo
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|EvictionListener
name|evictionListener
decl_stmt|;
specifier|private
name|LowLevelCachePolicy
name|realPolicy
decl_stmt|;
specifier|private
specifier|final
name|Thread
name|cleanupThread
decl_stmt|;
specifier|public
name|CacheContentsTracker
parameter_list|(
name|LowLevelCachePolicy
name|realPolicy
parameter_list|)
block|{
name|this
operator|.
name|realPolicy
operator|=
name|realPolicy
expr_stmt|;
name|realPolicy
operator|.
name|setEvictionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|cleanupThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|CleanupRunnable
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cleanupThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|CleanupRunnable
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|long
name|cleanupTimeNs
init|=
name|CLEANUP_TIME_MS
operator|*
literal|1000000L
decl_stmt|;
name|long
name|sleepTimeMs
init|=
name|CLEANUP_TIME_MS
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTimeMs
argument_list|)
expr_stmt|;
name|long
name|timeNs
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|nextCleanupInNs
init|=
name|cleanupTimeNs
decl_stmt|;
name|Iterator
argument_list|<
name|TagState
argument_list|>
name|iter
init|=
name|tagInfo
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TagState
name|v
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|v
init|)
block|{
if|if
condition|(
name|v
operator|.
name|bufferCount
operator|>
literal|0
condition|)
continue|continue;
comment|// The file is still cached.
name|long
name|deltaNs
init|=
name|timeNs
operator|-
name|v
operator|.
name|emptyTimeNs
decl_stmt|;
if|if
condition|(
name|deltaNs
operator|<
name|cleanupTimeNs
condition|)
block|{
name|nextCleanupInNs
operator|=
name|Math
operator|.
name|min
argument_list|(
name|nextCleanupInNs
argument_list|,
name|deltaNs
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|sleepTimeMs
operator|=
name|Math
operator|.
name|max
argument_list|(
name|MIN_TIME_MS
argument_list|,
name|nextCleanupInNs
operator|/
literal|1000000L
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
return|return;
comment|// Interrupted.
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|TagState
block|{
name|TagState
parameter_list|(
name|CacheTag
name|cacheTag
parameter_list|)
block|{
name|this
operator|.
name|cacheTag
operator|=
name|cacheTag
expr_stmt|;
block|}
specifier|public
specifier|final
name|CacheTag
name|cacheTag
decl_stmt|;
specifier|public
name|long
name|emptyTimeNs
decl_stmt|;
specifier|public
name|long
name|bufferCount
decl_stmt|,
name|totalSize
decl_stmt|,
name|maxCount
decl_stmt|,
name|maxSize
decl_stmt|;
block|}
specifier|private
name|void
name|reportCached
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|long
name|size
init|=
name|buffer
operator|.
name|getMemoryUsage
argument_list|()
decl_stmt|;
name|TagState
name|state
init|=
name|getTagState
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|reportCached
argument_list|(
name|state
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|reportCached
parameter_list|(
name|TagState
name|state
parameter_list|,
name|long
name|size
parameter_list|)
block|{
synchronized|synchronized
init|(
name|state
init|)
block|{
operator|++
name|state
operator|.
name|bufferCount
expr_stmt|;
name|state
operator|.
name|totalSize
operator|+=
name|size
expr_stmt|;
name|state
operator|.
name|maxSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|state
operator|.
name|maxSize
argument_list|,
name|state
operator|.
name|totalSize
argument_list|)
expr_stmt|;
name|state
operator|.
name|maxCount
operator|=
name|Math
operator|.
name|max
argument_list|(
name|state
operator|.
name|maxCount
argument_list|,
name|state
operator|.
name|bufferCount
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reportRemoved
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|long
name|size
init|=
name|buffer
operator|.
name|getMemoryUsage
argument_list|()
decl_stmt|;
name|TagState
name|state
init|=
name|getTagState
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|reportRemoved
argument_list|(
name|state
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|reportRemoved
parameter_list|(
name|TagState
name|state
parameter_list|,
name|long
name|size
parameter_list|)
block|{
synchronized|synchronized
init|(
name|state
init|)
block|{
operator|--
name|state
operator|.
name|bufferCount
expr_stmt|;
assert|assert
name|state
operator|.
name|bufferCount
operator|>=
literal|0
assert|;
name|state
operator|.
name|totalSize
operator|-=
name|size
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|bufferCount
operator|==
literal|0
condition|)
block|{
name|state
operator|.
name|emptyTimeNs
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|TagState
name|getTagState
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
return|return
name|getTagState
argument_list|(
name|buffer
operator|.
name|getTag
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|TagState
name|getTagState
parameter_list|(
name|CacheTag
name|tag
parameter_list|)
block|{
name|TagState
name|state
init|=
name|tagInfo
operator|.
name|get
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
operator|new
name|TagState
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|TagState
name|old
init|=
name|tagInfo
operator|.
name|putIfAbsent
argument_list|(
name|tag
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|state
operator|=
operator|(
name|old
operator|==
literal|null
operator|)
condition|?
name|state
else|:
name|old
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cache
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|realPolicy
operator|.
name|cache
argument_list|(
name|buffer
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|reportCached
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyLock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|realPolicy
operator|.
name|notifyLock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyUnlock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|realPolicy
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEvictionListener
parameter_list|(
name|EvictionListener
name|listener
parameter_list|)
block|{
name|evictionListener
operator|=
name|listener
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|purge
parameter_list|()
block|{
return|return
name|realPolicy
operator|.
name|purge
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|evictSomeBlocks
parameter_list|(
name|long
name|memoryToReserve
parameter_list|)
block|{
return|return
name|realPolicy
operator|.
name|evictSomeBlocks
argument_list|(
name|memoryToReserve
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|debugDumpShort
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|endResult
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|CacheTag
argument_list|,
name|TagState
argument_list|>
name|summaries
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TagState
name|state
range|:
name|tagInfo
operator|.
name|values
argument_list|()
control|)
block|{
synchronized|synchronized
init|(
name|state
init|)
block|{
name|endResult
operator|.
name|add
argument_list|(
name|unsafePrintTagState
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
comment|// Handle summary calculation
name|CacheTag
name|parentTag
init|=
name|CacheTag
operator|.
name|createParentCacheTag
argument_list|(
name|state
operator|.
name|cacheTag
argument_list|)
decl_stmt|;
while|while
condition|(
name|parentTag
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|summaries
operator|.
name|containsKey
argument_list|(
name|parentTag
argument_list|)
condition|)
block|{
name|summaries
operator|.
name|put
argument_list|(
name|parentTag
argument_list|,
operator|new
name|TagState
argument_list|(
name|parentTag
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TagState
name|parentState
init|=
name|summaries
operator|.
name|get
argument_list|(
name|parentTag
argument_list|)
decl_stmt|;
name|parentState
operator|.
name|bufferCount
operator|+=
name|state
operator|.
name|bufferCount
expr_stmt|;
name|parentState
operator|.
name|maxCount
operator|+=
name|state
operator|.
name|maxCount
expr_stmt|;
name|parentState
operator|.
name|totalSize
operator|+=
name|state
operator|.
name|totalSize
expr_stmt|;
name|parentState
operator|.
name|maxSize
operator|+=
name|state
operator|.
name|maxSize
expr_stmt|;
name|parentTag
operator|=
name|CacheTag
operator|.
name|createParentCacheTag
argument_list|(
name|parentTag
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|TagState
name|state
range|:
name|summaries
operator|.
name|values
argument_list|()
control|)
block|{
name|endResult
operator|.
name|add
argument_list|(
name|unsafePrintTagState
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\nCache state: \n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|endResult
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a String by pretty printing a TagState instance - for Web UI consumption.    * Note: does not lock on TagState instance.    * @param state    * @return    */
specifier|private
name|String
name|unsafePrintTagState
parameter_list|(
name|TagState
name|state
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|state
operator|.
name|cacheTag
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|cacheTag
operator|instanceof
name|CacheTag
operator|.
name|PartitionCacheTag
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|"/"
argument_list|,
operator|(
operator|(
name|CacheTag
operator|.
name|PartitionCacheTag
operator|)
name|state
operator|.
name|cacheTag
operator|)
operator|.
name|partitionDescToString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
operator|.
name|append
argument_list|(
name|state
operator|.
name|bufferCount
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|state
operator|.
name|maxCount
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|state
operator|.
name|totalSize
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|state
operator|.
name|maxSize
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|evictionListener
operator|.
name|notifyEvicted
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|reportRemoved
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

