begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|CallableWithNdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|ContainerRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|HistoryLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|FragmentSpecProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|GroupInputSpecProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|IOSpecProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapTaskUmbilicalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|shufflehandler
operator|.
name|ShuffleHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|Converters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|AuxiliaryServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|NDC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|TezCommonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|input
operator|.
name|MRInputLegacy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|ExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|ExecutionContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|InputSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TaskSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|common
operator|.
name|objectregistry
operator|.
name|ObjectRegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|internals
operator|.
name|api
operator|.
name|TaskReporterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|task
operator|.
name|TezChild
operator|.
name|ContainerExecutionResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|task
operator|.
name|TezTaskRunner
import|;
end_import

begin_class
specifier|public
class|class
name|ContainerRunnerImpl
extends|extends
name|AbstractService
implements|implements
name|ContainerRunner
block|{
specifier|public
specifier|static
specifier|final
name|String
name|THREAD_NAME_FORMAT_PREFIX
init|=
literal|"ContainerExecutor "
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|THREAD_NAME_FORMAT
init|=
name|THREAD_NAME_FORMAT_PREFIX
operator|+
literal|"%d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ContainerRunnerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|AMReporter
name|amReporter
decl_stmt|;
specifier|private
specifier|final
name|ListeningExecutorService
name|executorService
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|localAddress
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|localDirsBase
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localEnv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|localFs
decl_stmt|;
specifier|private
specifier|final
name|long
name|memoryPerExecutor
decl_stmt|;
specifier|private
specifier|final
name|LlapDaemonExecutorMetrics
name|metrics
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|ConfParams
name|confParams
decl_stmt|;
comment|// Map of dagId to vertices and associated state.
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
argument_list|>
name|sourceCompletionMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO Support for removing queued containers, interrupting / killing specific containers
specifier|public
name|ContainerRunnerImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numExecutors
parameter_list|,
name|String
index|[]
name|localDirsBase
parameter_list|,
name|int
name|localShufflePort
parameter_list|,
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|localAddress
parameter_list|,
name|long
name|totalMemoryAvailableBytes
parameter_list|,
name|LlapDaemonExecutorMetrics
name|metrics
parameter_list|)
block|{
name|super
argument_list|(
literal|"ContainerRunnerImpl"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|numExecutors
operator|>
literal|0
argument_list|,
literal|"Invalid number of executors: "
operator|+
name|numExecutors
operator|+
literal|". Must be> 0"
argument_list|)
expr_stmt|;
name|this
operator|.
name|localDirsBase
operator|=
name|localDirsBase
expr_stmt|;
name|this
operator|.
name|localAddress
operator|=
name|localAddress
expr_stmt|;
name|ExecutorService
name|raw
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numExecutors
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
name|THREAD_NAME_FORMAT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|executorService
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|raw
argument_list|)
expr_stmt|;
name|AuxiliaryServiceHelper
operator|.
name|setServiceDataIntoEnv
argument_list|(
name|TezConstants
operator|.
name|TEZ_SHUFFLE_HANDLER_SERVICE_ID
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|localShufflePort
argument_list|)
argument_list|,
name|localEnv
argument_list|)
expr_stmt|;
comment|// 80% of memory considered for accounted buffers. Rest for objects.
comment|// TODO Tune this based on the available size.
name|this
operator|.
name|memoryPerExecutor
operator|=
call|(
name|long
call|)
argument_list|(
name|totalMemoryAvailableBytes
operator|*
literal|0.8
operator|/
operator|(
name|float
operator|)
name|numExecutors
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to setup local filesystem instance"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|confParams
operator|=
operator|new
name|ConfParams
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_TASK_AM_HEARTBEAT_INTERVAL_MS
argument_list|,
name|TezConfiguration
operator|.
name|TEZ_TASK_AM_HEARTBEAT_INTERVAL_MS_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_TASK_AM_HEARTBEAT_COUNTER_INTERVAL_MS
argument_list|,
name|TezConfiguration
operator|.
name|TEZ_TASK_AM_HEARTBEAT_COUNTER_INTERVAL_MS_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_TASK_MAX_EVENTS_PER_HEARTBEAT
argument_list|,
name|TezConfiguration
operator|.
name|TEZ_TASK_MAX_EVENTS_PER_HEARTBEAT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ContainerRunnerImpl config: "
operator|+
literal|"memoryPerExecutorDerviced="
operator|+
name|memoryPerExecutor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStart
parameter_list|()
block|{
comment|// The node id will only be available at this point, since the server has been started in LlapDaemon
name|LlapNodeId
name|llapNodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|localAddress
operator|.
name|get
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|localAddress
operator|.
name|get
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|amReporter
operator|=
operator|new
name|AMReporter
argument_list|(
name|llapNodeId
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|amReporter
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amReporter
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|amReporter
operator|!=
literal|null
condition|)
block|{
name|amReporter
operator|.
name|stop
argument_list|()
expr_stmt|;
name|amReporter
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
comment|// TODO Move this into a utilities class
specifier|private
specifier|static
name|String
name|createAppSpecificLocalDir
parameter_list|(
name|String
name|baseDir
parameter_list|,
name|String
name|applicationIdString
parameter_list|,
name|String
name|user
parameter_list|)
block|{
comment|// TODO This is broken for secure clusters. The app will not have permission to create these directories.
comment|// May work via Slider - since the directory would already exist. Otherwise may need a custom shuffle handler.
comment|// TODO This should be the process user - and not the user on behalf of whom the query is being submitted.
return|return
name|baseDir
operator|+
name|File
operator|.
name|separator
operator|+
literal|"usercache"
operator|+
name|File
operator|.
name|separator
operator|+
name|user
operator|+
name|File
operator|.
name|separator
operator|+
literal|"appcache"
operator|+
name|File
operator|.
name|separator
operator|+
name|applicationIdString
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|submitWork
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|HistoryLogger
operator|.
name|logFragmentStart
argument_list|(
name|request
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|request
operator|.
name|getContainerIdString
argument_list|()
argument_list|,
name|localAddress
operator|.
name|get
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getDagName
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getVertexName
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getFragmentNumber
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getAttemptNumber
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Queueing container for execution: "
operator|+
name|stringifySubmitRequest
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
comment|// This is the start of container-annotated logging.
comment|// TODO Reduce the length of this string. Way too verbose at the moment.
name|String
name|ndcContextString
init|=
name|request
operator|.
name|getContainerIdString
argument_list|()
operator|+
literal|"_"
operator|+
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getDagName
argument_list|()
operator|+
literal|"_"
operator|+
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getVertexName
argument_list|()
operator|+
literal|"_"
operator|+
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getFragmentNumber
argument_list|()
operator|+
literal|"_"
operator|+
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getAttemptNumber
argument_list|()
decl_stmt|;
name|NDC
operator|.
name|push
argument_list|(
name|ndcContextString
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO What else is required in this environment map.
name|env
operator|.
name|putAll
argument_list|(
name|localEnv
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|USER
operator|.
name|name
argument_list|()
argument_list|,
name|request
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|localDirs
init|=
operator|new
name|String
index|[
name|localDirsBase
operator|.
name|length
index|]
decl_stmt|;
comment|// Setup up local dirs to be application specific, and create them.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localDirsBase
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|localDirs
index|[
name|i
index|]
operator|=
name|createAppSpecificLocalDir
argument_list|(
name|localDirsBase
index|[
name|i
index|]
argument_list|,
name|request
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|request
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|localFs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|localDirs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO Avoid this directory creation on each work-unit submission.
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dirs are: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|localDirs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// May need to setup localDir for re-localization, which is usually setup as Environment.PWD.
comment|// Used for re-localization, to add the user specified configuration (conf_pb_binary_stream)
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|dib
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tokenBytes
init|=
name|request
operator|.
name|getCredentialsBinary
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|dib
operator|.
name|reset
argument_list|(
name|tokenBytes
argument_list|,
name|tokenBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|dib
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
init|=
name|TokenCache
operator|.
name|getSessionToken
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
comment|// TODO Unregistering does not happen at the moment, since there's no signals on when an app completes.
name|LOG
operator|.
name|info
argument_list|(
literal|"DEBUG: Registering request with the ShuffleHandler"
argument_list|)
expr_stmt|;
name|ShuffleHandler
operator|.
name|get
argument_list|()
operator|.
name|registerApplication
argument_list|(
name|request
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|jobToken
argument_list|,
name|request
operator|.
name|getUser
argument_list|()
argument_list|,
name|localDirs
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|sourceCompletionMap
init|=
name|getSourceCompletionMap
argument_list|(
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getDagName
argument_list|()
argument_list|)
decl_stmt|;
name|TaskRunnerCallable
name|callable
init|=
operator|new
name|TaskRunnerCallable
argument_list|(
name|request
argument_list|,
operator|new
name|Configuration
argument_list|(
name|getConfig
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ExecutionContextImpl
argument_list|(
name|localAddress
operator|.
name|get
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
argument_list|,
name|env
argument_list|,
name|localDirs
argument_list|,
name|credentials
argument_list|,
name|memoryPerExecutor
argument_list|,
name|amReporter
argument_list|,
name|sourceCompletionMap
argument_list|,
name|confParams
argument_list|)
decl_stmt|;
name|ListenableFuture
argument_list|<
name|ContainerExecutionResult
argument_list|>
name|future
init|=
name|executorService
operator|.
name|submit
argument_list|(
name|callable
argument_list|)
decl_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|future
argument_list|,
operator|new
name|TaskRunnerCallback
argument_list|(
name|request
argument_list|,
name|callable
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrExecutorTotalRequestsHandled
argument_list|()
expr_stmt|;
name|metrics
operator|.
name|incrExecutorNumQueuedRequests
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|NDC
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|sourceStateUpdated
parameter_list|(
name|SourceStateUpdatedRequestProto
name|request
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing state update: "
operator|+
name|stringifySourceStateUpdateRequest
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|dagMap
init|=
name|getSourceCompletionMap
argument_list|(
name|request
operator|.
name|getDagName
argument_list|()
argument_list|)
decl_stmt|;
name|dagMap
operator|.
name|put
argument_list|(
name|request
operator|.
name|getSrcName
argument_list|()
argument_list|,
name|request
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|TaskRunnerCallable
extends|extends
name|CallableWithNdc
argument_list|<
name|ContainerExecutionResult
argument_list|>
block|{
specifier|private
specifier|final
name|SubmitWorkRequestProto
name|request
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|localDirs
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envMap
decl_stmt|;
specifier|private
specifier|final
name|String
name|pid
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|ObjectRegistryImpl
name|objectRegistry
decl_stmt|;
specifier|private
specifier|final
name|ExecutionContext
name|executionContext
decl_stmt|;
specifier|private
specifier|final
name|Credentials
name|credentials
decl_stmt|;
specifier|private
specifier|final
name|long
name|memoryAvailable
decl_stmt|;
specifier|private
specifier|final
name|ConfParams
name|confParams
decl_stmt|;
specifier|private
specifier|final
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
decl_stmt|;
specifier|private
specifier|final
name|AMReporter
name|amReporter
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|sourceCompletionMap
decl_stmt|;
specifier|private
specifier|final
name|TaskSpec
name|taskSpec
decl_stmt|;
specifier|private
specifier|volatile
name|TezTaskRunner
name|taskRunner
decl_stmt|;
specifier|private
specifier|volatile
name|TaskReporterInterface
name|taskReporter
decl_stmt|;
specifier|private
specifier|volatile
name|ListeningExecutorService
name|executor
decl_stmt|;
specifier|private
name|LlapTaskUmbilicalProtocol
name|umbilical
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|startTime
decl_stmt|;
specifier|private
specifier|volatile
name|String
name|threadName
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
name|TaskRunnerCallable
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ExecutionContext
name|executionContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envMap
parameter_list|,
name|String
index|[]
name|localDirs
parameter_list|,
name|Credentials
name|credentials
parameter_list|,
name|long
name|memoryAvailable
parameter_list|,
name|AMReporter
name|amReporter
parameter_list|,
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|sourceCompletionMap
parameter_list|,
name|ConfParams
name|confParams
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|executionContext
operator|=
name|executionContext
expr_stmt|;
name|this
operator|.
name|envMap
operator|=
name|envMap
expr_stmt|;
name|this
operator|.
name|localDirs
operator|=
name|localDirs
expr_stmt|;
name|this
operator|.
name|objectRegistry
operator|=
operator|new
name|ObjectRegistryImpl
argument_list|()
expr_stmt|;
name|this
operator|.
name|sourceCompletionMap
operator|=
name|sourceCompletionMap
expr_stmt|;
name|this
operator|.
name|credentials
operator|=
name|credentials
expr_stmt|;
name|this
operator|.
name|memoryAvailable
operator|=
name|memoryAvailable
expr_stmt|;
name|this
operator|.
name|confParams
operator|=
name|confParams
expr_stmt|;
name|this
operator|.
name|jobToken
operator|=
name|TokenCache
operator|.
name|getSessionToken
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskSpec
operator|=
name|Converters
operator|.
name|getTaskSpecfromProto
argument_list|(
name|request
operator|.
name|getFragmentSpec
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|amReporter
operator|=
name|amReporter
expr_stmt|;
comment|// Register with the AMReporter when the callable is setup. Unregister once it starts running.
name|this
operator|.
name|amReporter
operator|.
name|registerTask
argument_list|(
name|request
operator|.
name|getAmHost
argument_list|()
argument_list|,
name|request
operator|.
name|getAmPort
argument_list|()
argument_list|,
name|request
operator|.
name|getUser
argument_list|()
argument_list|,
name|jobToken
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ContainerExecutionResult
name|callInternal
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|this
operator|.
name|threadName
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"canFinish: "
operator|+
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|+
literal|": "
operator|+
name|canFinish
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Unregister from the AMReporter, since the task is now running.
name|this
operator|.
name|amReporter
operator|.
name|unregisterTask
argument_list|(
name|request
operator|.
name|getAmHost
argument_list|()
argument_list|,
name|request
operator|.
name|getAmPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO This executor seems unnecessary. Here and TezChild
name|ExecutorService
name|executorReal
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"TezTaskRunner_"
operator|+
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getTaskAttemptIdString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|executorReal
argument_list|)
expr_stmt|;
comment|// TODO Consolidate this code with TezChild.
name|Stopwatch
name|sw
init|=
operator|new
name|Stopwatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|taskUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|request
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|taskUgi
operator|.
name|addCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceConsumerMetadata
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceConsumerMetadata
operator|.
name|put
argument_list|(
name|TezConstants
operator|.
name|TEZ_SHUFFLE_HANDLER_SERVICE_ID
argument_list|,
name|TezCommonUtils
operator|.
name|convertJobTokenToBytes
argument_list|(
name|jobToken
argument_list|)
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|startedInputsMap
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|taskOwner
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|request
operator|.
name|getTokenIdentifier
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|NetUtils
operator|.
name|createSocketAddrForHost
argument_list|(
name|request
operator|.
name|getAmHost
argument_list|()
argument_list|,
name|request
operator|.
name|getAmPort
argument_list|()
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|jobToken
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|taskOwner
operator|.
name|addToken
argument_list|(
name|jobToken
argument_list|)
expr_stmt|;
name|umbilical
operator|=
name|taskOwner
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|LlapTaskUmbilicalProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|LlapTaskUmbilicalProtocol
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|RPC
operator|.
name|getProxy
argument_list|(
name|LlapTaskUmbilicalProtocol
operator|.
name|class
argument_list|,
name|LlapTaskUmbilicalProtocol
operator|.
name|versionID
argument_list|,
name|address
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|taskReporter
operator|=
operator|new
name|LlapTaskReporter
argument_list|(
name|umbilical
argument_list|,
name|confParams
operator|.
name|amHeartbeatIntervalMsMax
argument_list|,
name|confParams
operator|.
name|amCounterHeartbeatInterval
argument_list|,
name|confParams
operator|.
name|amMaxEventsPerHeartbeat
argument_list|,
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|request
operator|.
name|getContainerIdString
argument_list|()
argument_list|)
expr_stmt|;
name|taskRunner
operator|=
operator|new
name|TezTaskRunner
argument_list|(
name|conf
argument_list|,
name|taskUgi
argument_list|,
name|localDirs
argument_list|,
name|taskSpec
argument_list|,
name|request
operator|.
name|getAppAttemptNumber
argument_list|()
argument_list|,
name|serviceConsumerMetadata
argument_list|,
name|envMap
argument_list|,
name|startedInputsMap
argument_list|,
name|taskReporter
argument_list|,
name|executor
argument_list|,
name|objectRegistry
argument_list|,
name|pid
argument_list|,
name|executionContext
argument_list|,
name|memoryAvailable
argument_list|)
expr_stmt|;
name|boolean
name|shouldDie
decl_stmt|;
try|try
block|{
name|shouldDie
operator|=
operator|!
name|taskRunner
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldDie
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got a shouldDie notification via heartbeats. Shutting down"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ContainerExecutionResult
argument_list|(
name|ContainerExecutionResult
operator|.
name|ExitStatus
operator|.
name|SUCCESS
argument_list|,
literal|null
argument_list|,
literal|"Asked to die by the AM"
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
operator|new
name|ContainerExecutionResult
argument_list|(
name|ContainerExecutionResult
operator|.
name|ExitStatus
operator|.
name|EXECUTION_FAILURE
argument_list|,
name|e
argument_list|,
literal|"TaskExecutionFailure: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TezException
name|e
parameter_list|)
block|{
return|return
operator|new
name|ContainerExecutionResult
argument_list|(
name|ContainerExecutionResult
operator|.
name|ExitStatus
operator|.
name|EXECUTION_FAILURE
argument_list|,
name|e
argument_list|,
literal|"TaskExecutionFailure: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
comment|// TODO Fix UGI and FS Handling. Closing UGI here causes some errors right now.
comment|//        FileSystem.closeAllForUGI(taskUgi);
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"ExecutionTime for Container: "
operator|+
name|request
operator|.
name|getContainerIdString
argument_list|()
operator|+
literal|"="
operator|+
name|sw
operator|.
name|stop
argument_list|()
operator|.
name|elapsedMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"canFinish post completion: "
operator|+
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|+
literal|": "
operator|+
name|canFinish
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ContainerExecutionResult
argument_list|(
name|ContainerExecutionResult
operator|.
name|ExitStatus
operator|.
name|SUCCESS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Check whether a task can run to completion or may end up blocking on it's sources.      * This currently happens via looking up source state.      * TODO: Eventually, this should lookup the Hive Processor to figure out whether      * it's reached a state where it can finish - especially in cases of failures      * after data has been fetched.      * @return      */
specifier|public
name|boolean
name|canFinish
parameter_list|()
block|{
name|List
argument_list|<
name|InputSpec
argument_list|>
name|inputSpecList
init|=
name|taskSpec
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|boolean
name|canFinish
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|inputSpecList
operator|!=
literal|null
operator|&&
operator|!
name|inputSpecList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|InputSpec
name|inputSpec
range|:
name|inputSpecList
control|)
block|{
if|if
condition|(
name|isSourceOfInterest
argument_list|(
name|inputSpec
argument_list|)
condition|)
block|{
comment|// Lookup the state in the map.
name|SourceStateProto
name|state
init|=
name|sourceCompletionMap
operator|.
name|get
argument_list|(
name|inputSpec
operator|.
name|getSourceVertexName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
operator|&&
name|state
operator|==
name|SourceStateProto
operator|.
name|S_SUCCEEDED
condition|)
block|{
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot finish due to source: "
operator|+
name|inputSpec
operator|.
name|getSourceVertexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|canFinish
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|canFinish
return|;
block|}
specifier|private
name|boolean
name|isSourceOfInterest
parameter_list|(
name|InputSpec
name|inputSpec
parameter_list|)
block|{
name|String
name|inputClassName
init|=
name|inputSpec
operator|.
name|getInputDescriptor
argument_list|()
operator|.
name|getClassName
argument_list|()
decl_stmt|;
comment|// MRInput is not of interest since it'll always be ready.
return|return
operator|!
name|inputClassName
operator|.
name|equals
argument_list|(
name|MRInputLegacy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
if|if
condition|(
name|taskReporter
operator|!=
literal|null
condition|)
block|{
name|taskReporter
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|umbilical
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|umbilical
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
class|class
name|TaskRunnerCallback
implements|implements
name|FutureCallback
argument_list|<
name|ContainerExecutionResult
argument_list|>
block|{
specifier|private
specifier|final
name|SubmitWorkRequestProto
name|request
decl_stmt|;
specifier|private
specifier|final
name|TaskRunnerCallable
name|taskRunnerCallable
decl_stmt|;
name|TaskRunnerCallback
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|,
name|TaskRunnerCallable
name|taskRunnerCallable
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|taskRunnerCallable
operator|=
name|taskRunnerCallable
expr_stmt|;
block|}
comment|// TODO Slightly more useful error handling
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ContainerExecutionResult
name|result
parameter_list|)
block|{
switch|switch
condition|(
name|result
operator|.
name|getExitStatus
argument_list|()
condition|)
block|{
case|case
name|SUCCESS
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully finished: "
operator|+
name|getTaskIdentifierString
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrExecutorTotalSuccess
argument_list|()
expr_stmt|;
break|break;
case|case
name|EXECUTION_FAILURE
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to run: "
operator|+
name|getTaskIdentifierString
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrExecutorTotalExecutionFailed
argument_list|()
expr_stmt|;
break|break;
case|case
name|INTERRUPTED
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted while running: "
operator|+
name|getTaskIdentifierString
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrExecutorTotalInterrupted
argument_list|()
expr_stmt|;
break|break;
case|case
name|ASKED_TO_DIE
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"Asked to die while running: "
operator|+
name|getTaskIdentifierString
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrExecutorTotalAskedToDie
argument_list|()
expr_stmt|;
break|break;
block|}
name|taskRunnerCallable
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|HistoryLogger
operator|.
name|logFragmentEnd
argument_list|(
name|request
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|request
operator|.
name|getContainerIdString
argument_list|()
argument_list|,
name|localAddress
operator|.
name|get
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getDagName
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getVertexName
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getFragmentNumber
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getAttemptNumber
argument_list|()
argument_list|,
name|taskRunnerCallable
operator|.
name|threadName
argument_list|,
name|taskRunnerCallable
operator|.
name|startTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|decrExecutorNumQueuedRequests
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"TezTaskRunner execution failed for : "
operator|+
name|getTaskIdentifierString
argument_list|(
name|request
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// TODO HIVE-10236 Report a fatal error over the umbilical
name|taskRunnerCallable
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|HistoryLogger
operator|.
name|logFragmentEnd
argument_list|(
name|request
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|request
operator|.
name|getContainerIdString
argument_list|()
argument_list|,
name|localAddress
operator|.
name|get
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getDagName
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getVertexName
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getFragmentNumber
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getAttemptNumber
argument_list|()
argument_list|,
name|taskRunnerCallable
operator|.
name|threadName
argument_list|,
name|taskRunnerCallable
operator|.
name|startTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|decrExecutorNumQueuedRequests
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getTaskIdentifierString
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"AppId="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getApplicationIdString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", containerId="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getContainerIdString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", Dag="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getDagName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", Vertex="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getVertexName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", FragmentNum="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getFragmentNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", Attempt="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getFragmentSpec
argument_list|()
operator|.
name|getAttemptNumber
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ConfParams
block|{
specifier|final
name|int
name|amHeartbeatIntervalMsMax
decl_stmt|;
specifier|final
name|long
name|amCounterHeartbeatInterval
decl_stmt|;
specifier|final
name|int
name|amMaxEventsPerHeartbeat
decl_stmt|;
specifier|public
name|ConfParams
parameter_list|(
name|int
name|amHeartbeatIntervalMsMax
parameter_list|,
name|long
name|amCounterHeartbeatInterval
parameter_list|,
name|int
name|amMaxEventsPerHeartbeat
parameter_list|)
block|{
name|this
operator|.
name|amHeartbeatIntervalMsMax
operator|=
name|amHeartbeatIntervalMsMax
expr_stmt|;
name|this
operator|.
name|amCounterHeartbeatInterval
operator|=
name|amCounterHeartbeatInterval
expr_stmt|;
name|this
operator|.
name|amMaxEventsPerHeartbeat
operator|=
name|amMaxEventsPerHeartbeat
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|stringifySourceStateUpdateRequest
parameter_list|(
name|SourceStateUpdatedRequestProto
name|request
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dagName="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getDagName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"sourceName="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getSrcName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"state="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|stringifySubmitRequest
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"am_details="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getAmHost
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getAmPort
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", user="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", appIdString="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getApplicationIdString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", appAttemptNum="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getAppAttemptNumber
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", containerIdString="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getContainerIdString
argument_list|()
argument_list|)
expr_stmt|;
name|FragmentSpecProto
name|fragmentSpec
init|=
name|request
operator|.
name|getFragmentSpec
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", dagName="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentSpec
operator|.
name|getDagName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", vertexName="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentSpec
operator|.
name|getVertexName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", taskInfo="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentSpec
operator|.
name|getTaskAttemptIdString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", processor="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentSpec
operator|.
name|getProcessorDescriptor
argument_list|()
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", numInputs="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentSpec
operator|.
name|getInputSpecsCount
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", numOutputs="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentSpec
operator|.
name|getOutputSpecsCount
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", numGroupedInputs="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentSpec
operator|.
name|getGroupedInputSpecsCount
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Inputs={"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fragmentSpec
operator|.
name|getInputSpecsCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|IOSpecProto
name|ioSpec
range|:
name|fragmentSpec
operator|.
name|getInputSpecsList
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getConnectedVertexName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getIoDescriptor
argument_list|()
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getPhysicalEdgeCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Outputs={"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fragmentSpec
operator|.
name|getOutputSpecsCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|IOSpecProto
name|ioSpec
range|:
name|fragmentSpec
operator|.
name|getOutputSpecsList
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getConnectedVertexName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getIoDescriptor
argument_list|()
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getPhysicalEdgeCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", GroupedInputs={"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fragmentSpec
operator|.
name|getGroupedInputSpecsCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|GroupInputSpecProto
name|group
range|:
name|fragmentSpec
operator|.
name|getGroupedInputSpecsList
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
literal|"groupName="
argument_list|)
operator|.
name|append
argument_list|(
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", elements="
argument_list|)
operator|.
name|append
argument_list|(
name|group
operator|.
name|getGroupVerticesList
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|group
operator|.
name|getGroupVerticesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|getSourceCompletionMap
parameter_list|(
name|String
name|dagName
parameter_list|)
block|{
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|dagMap
init|=
name|sourceCompletionMap
operator|.
name|get
argument_list|(
name|dagName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dagMap
operator|==
literal|null
condition|)
block|{
name|dagMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|SourceStateProto
argument_list|>
name|old
init|=
name|sourceCompletionMap
operator|.
name|putIfAbsent
argument_list|(
name|dagName
argument_list|,
name|dagMap
argument_list|)
decl_stmt|;
name|dagMap
operator|=
operator|(
name|old
operator|!=
literal|null
operator|)
condition|?
name|old
else|:
name|dagMap
expr_stmt|;
block|}
return|return
name|dagMap
return|;
block|}
block|}
end_class

end_unit

