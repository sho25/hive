begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|UgiFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DaemonId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|NotTezEventHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|counters
operator|.
name|WmFragmentCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|ContainerRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|FragmentCompletionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|HistoryLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|KilledTaskHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|QueryFailedHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|SchedulerFragmentCompletingListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|LlapTokenChecker
operator|.
name|LlapTokenInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|FragmentRuntimeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|GroupInputSpecProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|IOSpecProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|NotTezEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryIdentifierProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SignableVertexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmissionStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|RegisterDagRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|RegisterDagResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|UpdateFragmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|UpdateFragmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|VertexOrBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapSignerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
operator|.
name|Converters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|LlapTezUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|AuxiliaryServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|NDC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|TokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezTaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|hadoop
operator|.
name|shim
operator|.
name|HadoopShim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|hadoop
operator|.
name|shim
operator|.
name|HadoopShimsLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|ExecutionContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TezEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ContainerRunnerImpl
extends|extends
name|CompositeService
implements|implements
name|ContainerRunner
implements|,
name|FragmentCompletionHandler
implements|,
name|QueryFailedHandler
block|{
comment|// TODO Setup a set of threads to process incoming requests.
comment|// Make sure requests for a single dag/query are handled by the same thread
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ContainerRunnerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|THREAD_NAME_FORMAT_PREFIX
init|=
literal|"ContainerExecutor "
decl_stmt|;
specifier|private
specifier|final
name|AMReporter
name|amReporter
decl_stmt|;
specifier|private
specifier|final
name|QueryTracker
name|queryTracker
decl_stmt|;
specifier|private
specifier|final
name|Scheduler
argument_list|<
name|TaskRunnerCallable
argument_list|>
name|executorService
decl_stmt|;
specifier|private
specifier|final
name|SchedulerFragmentCompletingListener
name|completionListener
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|localAddress
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Integer
argument_list|>
name|localShufflePort
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localEnv
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|memoryPerExecutor
decl_stmt|;
specifier|private
specifier|final
name|LlapDaemonExecutorMetrics
name|metrics
decl_stmt|;
specifier|private
specifier|final
name|TaskRunnerCallable
operator|.
name|ConfParams
name|confParams
decl_stmt|;
specifier|private
specifier|final
name|KilledTaskHandler
name|killedTaskHandler
init|=
operator|new
name|KilledTaskHandlerImpl
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HadoopShim
name|tezHadoopShim
decl_stmt|;
specifier|private
specifier|final
name|LlapSignerImpl
name|signer
decl_stmt|;
specifier|private
specifier|final
name|String
name|clusterId
decl_stmt|;
specifier|private
specifier|final
name|DaemonId
name|daemonId
decl_stmt|;
specifier|private
specifier|final
name|UgiFactory
name|fsUgiFactory
decl_stmt|;
specifier|private
specifier|final
name|SocketFactory
name|socketFactory
decl_stmt|;
specifier|public
name|ContainerRunnerImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|numExecutors
parameter_list|,
name|AtomicReference
argument_list|<
name|Integer
argument_list|>
name|localShufflePort
parameter_list|,
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|localAddress
parameter_list|,
name|long
name|totalMemoryAvailableBytes
parameter_list|,
name|LlapDaemonExecutorMetrics
name|metrics
parameter_list|,
name|AMReporter
name|amReporter
parameter_list|,
name|QueryTracker
name|queryTracker
parameter_list|,
name|Scheduler
argument_list|<
name|TaskRunnerCallable
argument_list|>
name|executorService
parameter_list|,
name|DaemonId
name|daemonId
parameter_list|,
name|UgiFactory
name|fsUgiFactory
parameter_list|,
name|SocketFactory
name|socketFactory
parameter_list|)
block|{
name|super
argument_list|(
literal|"ContainerRunnerImpl"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|numExecutors
operator|>
literal|0
argument_list|,
literal|"Invalid number of executors: "
operator|+
name|numExecutors
operator|+
literal|". Must be> 0"
argument_list|)
expr_stmt|;
name|this
operator|.
name|localAddress
operator|=
name|localAddress
expr_stmt|;
name|this
operator|.
name|localShufflePort
operator|=
name|localShufflePort
expr_stmt|;
name|this
operator|.
name|amReporter
operator|=
name|amReporter
expr_stmt|;
name|this
operator|.
name|signer
operator|=
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|?
operator|new
name|LlapSignerImpl
argument_list|(
name|conf
argument_list|,
name|daemonId
operator|.
name|getClusterString
argument_list|()
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|fsUgiFactory
operator|=
name|fsUgiFactory
expr_stmt|;
name|this
operator|.
name|socketFactory
operator|=
name|socketFactory
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|daemonId
operator|.
name|getClusterString
argument_list|()
expr_stmt|;
name|this
operator|.
name|daemonId
operator|=
name|daemonId
expr_stmt|;
name|this
operator|.
name|queryTracker
operator|=
name|queryTracker
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
name|completionListener
operator|=
operator|(
name|SchedulerFragmentCompletingListener
operator|)
name|executorService
expr_stmt|;
comment|// Distribute the available memory between the tasks.
name|this
operator|.
name|memoryPerExecutor
operator|=
call|(
name|long
call|)
argument_list|(
name|totalMemoryAvailableBytes
operator|/
operator|(
name|float
operator|)
name|numExecutors
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|confParams
operator|=
operator|new
name|TaskRunnerCallable
operator|.
name|ConfParams
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_TASK_AM_HEARTBEAT_INTERVAL_MS
argument_list|,
name|TezConfiguration
operator|.
name|TEZ_TASK_AM_HEARTBEAT_INTERVAL_MS_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_TASK_AM_HEARTBEAT_COUNTER_INTERVAL_MS
argument_list|,
name|TezConfiguration
operator|.
name|TEZ_TASK_AM_HEARTBEAT_COUNTER_INTERVAL_MS_DEFAULT
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_TASK_MAX_EVENTS_PER_HEARTBEAT
argument_list|,
name|TezConfiguration
operator|.
name|TEZ_TASK_MAX_EVENTS_PER_HEARTBEAT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|tezHadoopShim
operator|=
operator|new
name|HadoopShimsLoader
argument_list|(
name|conf
argument_list|)
operator|.
name|getHadoopShim
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ContainerRunnerImpl config: "
operator|+
literal|"memoryPerExecutorDerviced="
operator|+
name|memoryPerExecutor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using ShufflePort: "
operator|+
name|localShufflePort
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|AuxiliaryServiceHelper
operator|.
name|setServiceDataIntoEnv
argument_list|(
name|TezConstants
operator|.
name|TEZ_SHUFFLE_HANDLER_SERVICE_ID
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|localShufflePort
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|localEnv
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RegisterDagResponseProto
name|registerDag
parameter_list|(
name|RegisterDagRequestProto
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryIdentifierProto
name|identifier
init|=
name|request
operator|.
name|getQueryIdentifier
argument_list|()
decl_stmt|;
name|Credentials
name|credentials
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasCredentialsBinary
argument_list|()
condition|)
block|{
name|credentials
operator|=
name|LlapUtil
operator|.
name|credentialsFromByteArray
argument_list|(
name|request
operator|.
name|getCredentialsBinary
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|credentials
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
block|}
name|queryTracker
operator|.
name|registerDag
argument_list|(
name|identifier
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|identifier
operator|.
name|getDagIndex
argument_list|()
argument_list|,
name|request
operator|.
name|getUser
argument_list|()
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application with  id={}, dagId={} registered"
argument_list|,
name|identifier
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|identifier
operator|.
name|getDagIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|RegisterDagResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SubmitWorkResponseProto
name|submitWork
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|LlapTokenInfo
name|tokenInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tokenInfo
operator|=
name|LlapTokenChecker
operator|.
name|getTokenInfo
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|ex
parameter_list|)
block|{
name|logSecurityErrorRarely
argument_list|(
literal|null
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|SignableVertexSpec
name|vertex
init|=
name|extractVertexSpec
argument_list|(
name|request
argument_list|,
name|tokenInfo
argument_list|)
decl_stmt|;
name|TezEvent
name|initialEvent
init|=
name|extractInitialEvent
argument_list|(
name|request
argument_list|,
name|tokenInfo
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|attemptId
init|=
name|Converters
operator|.
name|createTaskAttemptId
argument_list|(
name|vertex
operator|.
name|getQueryIdentifier
argument_list|()
argument_list|,
name|vertex
operator|.
name|getVertexIndex
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentNumber
argument_list|()
argument_list|,
name|request
operator|.
name|getAttemptNumber
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|fragmentIdString
init|=
name|attemptId
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Queueing container for execution: fragemendId={}, {}"
argument_list|,
name|fragmentIdString
argument_list|,
name|stringifySubmitRequest
argument_list|(
name|request
argument_list|,
name|vertex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QueryIdentifierProto
name|qIdProto
init|=
name|vertex
operator|.
name|getQueryIdentifier
argument_list|()
decl_stmt|;
name|HistoryLogger
operator|.
name|logFragmentStart
argument_list|(
name|qIdProto
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|request
operator|.
name|getContainerIdString
argument_list|()
argument_list|,
name|localAddress
operator|.
name|get
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|,
name|constructUniqueQueryId
argument_list|(
name|vertex
operator|.
name|getHiveQueryId
argument_list|()
argument_list|,
name|qIdProto
operator|.
name|getDagIndex
argument_list|()
argument_list|)
argument_list|,
name|qIdProto
operator|.
name|getDagIndex
argument_list|()
argument_list|,
name|vertex
operator|.
name|getVertexName
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentNumber
argument_list|()
argument_list|,
name|request
operator|.
name|getAttemptNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// This is the start of container-annotated logging.
specifier|final
name|String
name|dagId
init|=
name|attemptId
operator|.
name|getTaskID
argument_list|()
operator|.
name|getVertexID
argument_list|()
operator|.
name|getDAGId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|queryId
init|=
name|vertex
operator|.
name|getHiveQueryId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fragmentId
init|=
name|LlapTezUtils
operator|.
name|stripAttemptPrefix
argument_list|(
name|fragmentIdString
argument_list|)
decl_stmt|;
name|MDC
operator|.
name|put
argument_list|(
literal|"dagId"
argument_list|,
name|dagId
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
literal|"queryId"
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
literal|"fragmentId"
argument_list|,
name|fragmentId
argument_list|)
expr_stmt|;
comment|// TODO: Ideally we want tez to use CallableWithMdc that retains the MDC for threads created in
comment|// thread pool. For now, we will push both dagId and queryId into NDC and the custom thread
comment|// pool that we use for task execution and llap io (StatsRecordingThreadPool) will pop them
comment|// using reflection and update the MDC.
name|NDC
operator|.
name|push
argument_list|(
name|dagId
argument_list|)
expr_stmt|;
name|NDC
operator|.
name|push
argument_list|(
name|queryId
argument_list|)
expr_stmt|;
name|NDC
operator|.
name|push
argument_list|(
name|fragmentId
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|SubmissionState
name|submissionState
decl_stmt|;
name|SubmitWorkResponseProto
operator|.
name|Builder
name|responseBuilder
init|=
name|SubmitWorkResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO What else is required in this environment map.
name|env
operator|.
name|putAll
argument_list|(
name|localEnv
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|USER
operator|.
name|name
argument_list|()
argument_list|,
name|vertex
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|TezTaskAttemptID
name|taskAttemptId
init|=
name|TezTaskAttemptID
operator|.
name|fromString
argument_list|(
name|fragmentIdString
argument_list|)
decl_stmt|;
name|int
name|dagIdentifier
init|=
name|taskAttemptId
operator|.
name|getTaskID
argument_list|()
operator|.
name|getVertexID
argument_list|()
operator|.
name|getDAGId
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|QueryIdentifier
name|queryIdentifier
init|=
operator|new
name|QueryIdentifier
argument_list|(
name|qIdProto
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|dagIdentifier
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
name|LlapUtil
operator|.
name|credentialsFromByteArray
argument_list|(
name|request
operator|.
name|getCredentialsBinary
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
init|=
name|TokenCache
operator|.
name|getSessionToken
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
name|LlapNodeId
name|amNodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|request
operator|.
name|getAmHost
argument_list|()
argument_list|,
name|request
operator|.
name|getAmPort
argument_list|()
argument_list|)
decl_stmt|;
name|QueryFragmentInfo
name|fragmentInfo
init|=
name|queryTracker
operator|.
name|registerFragment
argument_list|(
name|queryIdentifier
argument_list|,
name|qIdProto
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|dagId
argument_list|,
name|vertex
operator|.
name|getDagName
argument_list|()
argument_list|,
name|vertex
operator|.
name|getHiveQueryId
argument_list|()
argument_list|,
name|dagIdentifier
argument_list|,
name|vertex
operator|.
name|getVertexName
argument_list|()
argument_list|,
name|request
operator|.
name|getFragmentNumber
argument_list|()
argument_list|,
name|request
operator|.
name|getAttemptNumber
argument_list|()
argument_list|,
name|vertex
operator|.
name|getUser
argument_list|()
argument_list|,
name|vertex
argument_list|,
name|jobToken
argument_list|,
name|fragmentIdString
argument_list|,
name|tokenInfo
argument_list|,
name|amNodeId
argument_list|)
decl_stmt|;
name|String
index|[]
name|localDirs
init|=
name|fragmentInfo
operator|.
name|getLocalDirs
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|localDirs
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dirs are: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|localDirs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// May need to setup localDir for re-localization, which is usually setup as Environment.PWD.
comment|// Used for re-localization, to add the user specified configuration (conf_pb_binary_stream)
name|Configuration
name|callableConf
init|=
operator|new
name|Configuration
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|fsTaskUgi
init|=
name|fsUgiFactory
operator|==
literal|null
condition|?
literal|null
else|:
name|fsUgiFactory
operator|.
name|createUgi
argument_list|()
decl_stmt|;
name|boolean
name|isGuaranteed
init|=
name|request
operator|.
name|hasIsGuaranteed
argument_list|()
operator|&&
name|request
operator|.
name|getIsGuaranteed
argument_list|()
decl_stmt|;
comment|// enable the printing of (per daemon) LLAP task queue/run times via LLAP_TASK_TIME_SUMMARY
name|ConfVars
name|tezSummary
init|=
name|ConfVars
operator|.
name|TEZ_EXEC_SUMMARY
decl_stmt|;
name|ConfVars
name|llapTasks
init|=
name|ConfVars
operator|.
name|LLAP_TASK_TIME_SUMMARY
decl_stmt|;
name|boolean
name|addTaskTimes
init|=
name|callableConf
operator|.
name|getBoolean
argument_list|(
name|tezSummary
operator|.
name|varname
argument_list|,
name|tezSummary
operator|.
name|defaultBoolVal
argument_list|)
operator|&&
name|callableConf
operator|.
name|getBoolean
argument_list|(
name|llapTasks
operator|.
name|varname
argument_list|,
name|llapTasks
operator|.
name|defaultBoolVal
argument_list|)
decl_stmt|;
comment|// TODO: ideally we'd register TezCounters here, but it seems impossible before registerTask.
name|WmFragmentCounters
name|wmCounters
init|=
operator|new
name|WmFragmentCounters
argument_list|(
name|addTaskTimes
argument_list|)
decl_stmt|;
name|TaskRunnerCallable
name|callable
init|=
operator|new
name|TaskRunnerCallable
argument_list|(
name|request
argument_list|,
name|fragmentInfo
argument_list|,
name|callableConf
argument_list|,
operator|new
name|ExecutionContextImpl
argument_list|(
name|localAddress
operator|.
name|get
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
argument_list|,
name|env
argument_list|,
name|credentials
argument_list|,
name|memoryPerExecutor
argument_list|,
name|amReporter
argument_list|,
name|confParams
argument_list|,
name|metrics
argument_list|,
name|killedTaskHandler
argument_list|,
name|this
argument_list|,
name|tezHadoopShim
argument_list|,
name|attemptId
argument_list|,
name|vertex
argument_list|,
name|initialEvent
argument_list|,
name|fsTaskUgi
argument_list|,
name|completionListener
argument_list|,
name|socketFactory
argument_list|,
name|isGuaranteed
argument_list|,
name|wmCounters
argument_list|)
decl_stmt|;
name|submissionState
operator|=
name|executorService
operator|.
name|schedule
argument_list|(
name|callable
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SubmissionState for {} : {} "
argument_list|,
name|fragmentIdString
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|submissionState
operator|.
name|equals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|REJECTED
argument_list|)
condition|)
block|{
comment|// Stop tracking the fragment and re-throw the error.
name|fragmentComplete
argument_list|(
name|fragmentInfo
argument_list|)
expr_stmt|;
return|return
name|responseBuilder
operator|.
name|setSubmissionState
argument_list|(
name|SubmissionStateProto
operator|.
name|valueOf
argument_list|(
name|submissionState
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrExecutorTotalRequestsHandled
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|MDC
operator|.
name|clear
argument_list|()
expr_stmt|;
name|NDC
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|responseBuilder
operator|.
name|setUniqueNodeId
argument_list|(
name|daemonId
operator|.
name|getUniqueNodeIdInCluster
argument_list|()
argument_list|)
operator|.
name|setSubmissionState
argument_list|(
name|SubmissionStateProto
operator|.
name|valueOf
argument_list|(
name|submissionState
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|SignableVertexSpec
name|extractVertexSpec
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|,
name|LlapTokenInfo
name|tokenInfo
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
throws|,
name|IOException
block|{
name|VertexOrBinary
name|vob
init|=
name|request
operator|.
name|getWorkSpec
argument_list|()
decl_stmt|;
name|SignableVertexSpec
name|vertex
init|=
name|vob
operator|.
name|hasVertex
argument_list|()
condition|?
name|vob
operator|.
name|getVertex
argument_list|()
else|:
literal|null
decl_stmt|;
name|ByteString
name|vertexBinary
init|=
name|vob
operator|.
name|hasVertexBinary
argument_list|()
condition|?
name|vob
operator|.
name|getVertexBinary
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|vertexBinary
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|vertex
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Vertex and vertexBinary in VertexOrBinary cannot be set at the same time"
argument_list|)
throw|;
block|}
name|vertex
operator|=
name|SignableVertexSpec
operator|.
name|parseFrom
argument_list|(
name|vob
operator|.
name|getVertexBinary
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenInfo
operator|.
name|isSigningRequired
condition|)
block|{
name|checkSignature
argument_list|(
name|vertex
argument_list|,
name|vertexBinary
argument_list|,
name|request
argument_list|,
name|tokenInfo
operator|.
name|userName
argument_list|)
expr_stmt|;
block|}
return|return
name|vertex
return|;
block|}
specifier|private
name|TezEvent
name|extractInitialEvent
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|,
name|LlapTokenInfo
name|tokenInfo
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasInitialEventBytes
argument_list|()
condition|)
return|return
literal|null
return|;
name|ByteString
name|initialEventByteString
init|=
name|request
operator|.
name|getInitialEventBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|initialEventBytes
init|=
name|initialEventByteString
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|NotTezEvent
name|initialEvent
init|=
name|NotTezEvent
operator|.
name|parseFrom
argument_list|(
name|initialEventBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenInfo
operator|.
name|isSigningRequired
condition|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasInitialEventSignature
argument_list|()
condition|)
block|{
name|logSecurityErrorRarely
argument_list|(
name|tokenInfo
operator|.
name|userName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Unsigned initial event is not allowed"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|signatureBytes
init|=
name|request
operator|.
name|getInitialEventSignature
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|signer
operator|.
name|checkSignature
argument_list|(
name|initialEventBytes
argument_list|,
name|signatureBytes
argument_list|,
name|initialEvent
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|ex
parameter_list|)
block|{
name|logSecurityErrorRarely
argument_list|(
name|tokenInfo
operator|.
name|userName
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
return|return
name|NotTezEventHelper
operator|.
name|toTezEvent
argument_list|(
name|initialEvent
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkSignature
parameter_list|(
name|SignableVertexSpec
name|vertex
parameter_list|,
name|ByteString
name|vertexBinary
parameter_list|,
name|SubmitWorkRequestProto
name|request
parameter_list|,
name|String
name|tokenUserName
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasWorkSpecSignature
argument_list|()
condition|)
block|{
name|logSecurityErrorRarely
argument_list|(
name|tokenUserName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Unsigned fragment not allowed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|vertexBinary
operator|==
literal|null
condition|)
block|{
name|ByteString
operator|.
name|Output
name|os
init|=
name|ByteString
operator|.
name|newOutput
argument_list|()
decl_stmt|;
name|vertex
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|vertexBinary
operator|=
name|os
operator|.
name|toByteString
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|signer
operator|.
name|checkSignature
argument_list|(
name|vertexBinary
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|request
operator|.
name|getWorkSpecSignature
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|vertex
operator|.
name|getSignatureKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|ex
parameter_list|)
block|{
name|logSecurityErrorRarely
argument_list|(
name|tokenUserName
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
if|if
condition|(
operator|!
name|vertex
operator|.
name|hasUser
argument_list|()
operator|||
operator|!
name|vertex
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|tokenUserName
argument_list|)
condition|)
block|{
name|logSecurityErrorRarely
argument_list|(
name|tokenUserName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"LLAP token is for "
operator|+
name|tokenUserName
operator|+
literal|" but the fragment is for "
operator|+
operator|(
name|vertex
operator|.
name|hasUser
argument_list|()
condition|?
name|vertex
operator|.
name|getUser
argument_list|()
else|:
literal|null
operator|)
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|AtomicLong
name|lastLoggedError
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|void
name|logSecurityErrorRarely
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
condition|)
return|return;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|oldTime
init|=
name|lastLoggedError
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldTime
operator|!=
literal|0
operator|&&
operator|(
name|time
operator|-
name|oldTime
operator|)
operator|<
literal|1000000000L
condition|)
return|return;
comment|// 1 second
if|if
condition|(
operator|!
name|lastLoggedError
operator|.
name|compareAndSet
argument_list|(
name|oldTime
argument_list|,
name|time
argument_list|)
condition|)
return|return;
name|String
name|tokens
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tokens
operator|=
literal|""
operator|+
name|LlapTokenChecker
operator|.
name|getLlapTokens
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|tokens
operator|=
literal|"error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Security error from "
operator|+
name|userName
operator|+
literal|"; cluster "
operator|+
name|clusterId
operator|+
literal|"; tokens "
operator|+
name|tokens
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SourceStateUpdatedResponseProto
name|sourceStateUpdated
parameter_list|(
name|SourceStateUpdatedRequestProto
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing state update: "
operator|+
name|stringifySourceStateUpdateRequest
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|QueryIdentifier
name|queryId
init|=
operator|new
name|QueryIdentifier
argument_list|(
name|request
operator|.
name|getQueryIdentifier
argument_list|()
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|request
operator|.
name|getQueryIdentifier
argument_list|()
operator|.
name|getDagIndex
argument_list|()
argument_list|)
decl_stmt|;
name|queryTracker
operator|.
name|registerSourceStateChange
argument_list|(
name|queryId
argument_list|,
name|request
operator|.
name|getSrcName
argument_list|()
argument_list|,
name|request
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|SourceStateUpdatedResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryCompleteResponseProto
name|queryComplete
parameter_list|(
name|QueryCompleteRequestProto
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryIdentifier
name|queryIdentifier
init|=
operator|new
name|QueryIdentifier
argument_list|(
name|request
operator|.
name|getQueryIdentifier
argument_list|()
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|request
operator|.
name|getQueryIdentifier
argument_list|()
operator|.
name|getDagIndex
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing queryComplete notification for {}"
argument_list|,
name|queryIdentifier
argument_list|)
expr_stmt|;
name|QueryInfo
name|queryInfo
init|=
name|queryTracker
operator|.
name|queryComplete
argument_list|(
name|queryIdentifier
argument_list|,
name|request
operator|.
name|getDeleteDelay
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryInfo
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|QueryFragmentInfo
argument_list|>
name|knownFragments
init|=
name|queryInfo
operator|.
name|getRegisteredFragments
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DBG: Pending fragment count for completed query {} = {}"
argument_list|,
name|queryIdentifier
argument_list|,
name|knownFragments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|QueryFragmentInfo
name|fragmentInfo
range|:
name|knownFragments
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Issuing killFragment for completed query {} {}"
argument_list|,
name|queryIdentifier
argument_list|,
name|fragmentInfo
operator|.
name|getFragmentIdentifierString
argument_list|()
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|killFragment
argument_list|(
name|fragmentInfo
operator|.
name|getFragmentIdentifierString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|amReporter
operator|.
name|queryComplete
argument_list|(
name|queryIdentifier
argument_list|)
expr_stmt|;
block|}
return|return
name|QueryCompleteResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|TerminateFragmentResponseProto
name|terminateFragment
parameter_list|(
name|TerminateFragmentRequestProto
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fragmentId
init|=
name|request
operator|.
name|getFragmentIdentifierString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DBG: Received terminateFragment request for {}"
argument_list|,
name|fragmentId
argument_list|)
expr_stmt|;
comment|// TODO: ideally, QueryTracker should have fragment-to-query mapping.
name|QueryIdentifier
name|queryId
init|=
name|executorService
operator|.
name|findQueryByFragment
argument_list|(
name|fragmentId
argument_list|)
decl_stmt|;
comment|// checkPermissions returns false if query is not found, throws on failure.
if|if
condition|(
name|queryId
operator|!=
literal|null
operator|&&
name|queryTracker
operator|.
name|checkPermissionsForQuery
argument_list|(
name|queryId
argument_list|)
condition|)
block|{
name|executorService
operator|.
name|killFragment
argument_list|(
name|fragmentId
argument_list|)
expr_stmt|;
block|}
return|return
name|TerminateFragmentResponseProto
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|UpdateFragmentResponseProto
name|updateFragment
parameter_list|(
name|UpdateFragmentRequestProto
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fragmentId
init|=
name|request
operator|.
name|getFragmentIdentifierString
argument_list|()
decl_stmt|;
name|boolean
name|isGuaranteed
init|=
name|request
operator|.
name|hasIsGuaranteed
argument_list|()
operator|&&
name|request
operator|.
name|getIsGuaranteed
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DBG: Received updateFragment request for {}"
argument_list|,
name|fragmentId
argument_list|)
expr_stmt|;
comment|// TODO: ideally, QueryTracker should have fragment-to-query mapping.
name|QueryIdentifier
name|queryId
init|=
name|executorService
operator|.
name|findQueryByFragment
argument_list|(
name|fragmentId
argument_list|)
decl_stmt|;
comment|// checkPermissions returns false if query is not found, throws on failure.
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|queryId
operator|!=
literal|null
operator|&&
name|queryTracker
operator|.
name|checkPermissionsForQuery
argument_list|(
name|queryId
argument_list|)
condition|)
block|{
name|result
operator|=
name|executorService
operator|.
name|updateFragment
argument_list|(
name|fragmentId
argument_list|,
name|isGuaranteed
argument_list|)
expr_stmt|;
block|}
return|return
name|UpdateFragmentResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
operator|.
name|setIsGuaranteed
argument_list|(
name|isGuaranteed
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|String
name|stringifySourceStateUpdateRequest
parameter_list|(
name|SourceStateUpdatedRequestProto
name|request
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|QueryIdentifier
name|queryIdentifier
init|=
operator|new
name|QueryIdentifier
argument_list|(
name|request
operator|.
name|getQueryIdentifier
argument_list|()
operator|.
name|getApplicationIdString
argument_list|()
argument_list|,
name|request
operator|.
name|getQueryIdentifier
argument_list|()
operator|.
name|getDagIndex
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"queryIdentifier="
argument_list|)
operator|.
name|append
argument_list|(
name|queryIdentifier
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"sourceName="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getSrcName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
literal|"state="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|stringifySubmitRequest
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|,
name|SignableVertexSpec
name|vertex
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"am_details="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getAmHost
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getAmPort
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", taskInfo="
argument_list|)
operator|.
name|append
argument_list|(
literal|" fragment "
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getFragmentNumber
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" attempt "
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getAttemptNumber
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", user="
argument_list|)
operator|.
name|append
argument_list|(
name|vertex
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", queryId="
argument_list|)
operator|.
name|append
argument_list|(
name|vertex
operator|.
name|getHiveQueryId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", appIdString="
argument_list|)
operator|.
name|append
argument_list|(
name|vertex
operator|.
name|getQueryIdentifier
argument_list|()
operator|.
name|getApplicationIdString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", appAttemptNum="
argument_list|)
operator|.
name|append
argument_list|(
name|vertex
operator|.
name|getQueryIdentifier
argument_list|()
operator|.
name|getAppAttemptNumber
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", containerIdString="
argument_list|)
operator|.
name|append
argument_list|(
name|request
operator|.
name|getContainerIdString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", dagName="
argument_list|)
operator|.
name|append
argument_list|(
name|vertex
operator|.
name|getDagName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", vertexName="
argument_list|)
operator|.
name|append
argument_list|(
name|vertex
operator|.
name|getVertexName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", processor="
argument_list|)
operator|.
name|append
argument_list|(
name|vertex
operator|.
name|getProcessorDescriptor
argument_list|()
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", numInputs="
argument_list|)
operator|.
name|append
argument_list|(
name|vertex
operator|.
name|getInputSpecsCount
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", numOutputs="
argument_list|)
operator|.
name|append
argument_list|(
name|vertex
operator|.
name|getOutputSpecsCount
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", numGroupedInputs="
argument_list|)
operator|.
name|append
argument_list|(
name|vertex
operator|.
name|getGroupedInputSpecsCount
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Inputs={"
argument_list|)
expr_stmt|;
if|if
condition|(
name|vertex
operator|.
name|getInputSpecsCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|IOSpecProto
name|ioSpec
range|:
name|vertex
operator|.
name|getInputSpecsList
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getConnectedVertexName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getIoDescriptor
argument_list|()
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getPhysicalEdgeCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Outputs={"
argument_list|)
expr_stmt|;
if|if
condition|(
name|vertex
operator|.
name|getOutputSpecsCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|IOSpecProto
name|ioSpec
range|:
name|vertex
operator|.
name|getOutputSpecsList
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getConnectedVertexName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getIoDescriptor
argument_list|()
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|ioSpec
operator|.
name|getPhysicalEdgeCount
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", GroupedInputs={"
argument_list|)
expr_stmt|;
if|if
condition|(
name|vertex
operator|.
name|getGroupedInputSpecsCount
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|GroupInputSpecProto
name|group
range|:
name|vertex
operator|.
name|getGroupedInputSpecsList
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
operator|.
name|append
argument_list|(
literal|"groupName="
argument_list|)
operator|.
name|append
argument_list|(
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", elements="
argument_list|)
operator|.
name|append
argument_list|(
name|group
operator|.
name|getGroupVerticesList
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|group
operator|.
name|getGroupVerticesList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|FragmentRuntimeInfo
name|fragmentRuntimeInfo
init|=
name|request
operator|.
name|getFragmentRuntimeInfo
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", FragmentRuntimeInfo={"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"taskCount="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentRuntimeInfo
operator|.
name|getNumSelfAndUpstreamTasks
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", completedTaskCount="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentRuntimeInfo
operator|.
name|getNumSelfAndUpstreamCompletedTasks
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", dagStartTime="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentRuntimeInfo
operator|.
name|getDagStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", firstAttemptStartTime="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentRuntimeInfo
operator|.
name|getFirstAttemptStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", currentAttemptStartTime="
argument_list|)
operator|.
name|append
argument_list|(
name|fragmentRuntimeInfo
operator|.
name|getCurrentAttemptStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fragmentComplete
parameter_list|(
name|QueryFragmentInfo
name|fragmentInfo
parameter_list|)
block|{
name|queryTracker
operator|.
name|fragmentComplete
argument_list|(
name|fragmentInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|queryFailed
parameter_list|(
name|QueryIdentifier
name|queryIdentifier
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing query failed notification for {}"
argument_list|,
name|queryIdentifier
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueryFragmentInfo
argument_list|>
name|knownFragments
decl_stmt|;
name|knownFragments
operator|=
name|queryTracker
operator|.
name|getRegisteredFragments
argument_list|(
name|queryIdentifier
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DBG: Pending fragment count for failed query {} = {}"
argument_list|,
name|queryIdentifier
argument_list|,
name|knownFragments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|QueryFragmentInfo
name|fragmentInfo
range|:
name|knownFragments
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DBG: Issuing killFragment for failed query {} {}"
argument_list|,
name|queryIdentifier
argument_list|,
name|fragmentInfo
operator|.
name|getFragmentIdentifierString
argument_list|()
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|killFragment
argument_list|(
name|fragmentInfo
operator|.
name|getFragmentIdentifierString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|KilledTaskHandlerImpl
implements|implements
name|KilledTaskHandler
block|{
annotation|@
name|Override
specifier|public
name|void
name|taskKilled
parameter_list|(
name|String
name|amLocation
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|umbilicalUser
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
parameter_list|,
name|QueryIdentifier
name|queryIdentifier
parameter_list|,
name|TezTaskAttemptID
name|taskAttemptId
parameter_list|)
block|{
name|amReporter
operator|.
name|taskKilled
argument_list|(
name|amLocation
argument_list|,
name|port
argument_list|,
name|umbilicalUser
argument_list|,
name|jobToken
argument_list|,
name|queryIdentifier
argument_list|,
name|taskAttemptId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getExecutorStatus
parameter_list|()
block|{
return|return
name|executorService
operator|.
name|getExecutorsStatusForReporting
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|constructUniqueQueryId
parameter_list|(
name|String
name|queryId
parameter_list|,
name|int
name|dagIndex
parameter_list|)
block|{
comment|// Hive QueryId is not always unique.
return|return
name|queryId
operator|+
literal|"-"
operator|+
name|dagIndex
return|;
block|}
specifier|public
name|int
name|getNumActive
parameter_list|()
block|{
return|return
name|executorService
operator|.
name|getNumActiveForReporting
argument_list|()
return|;
block|}
block|}
end_class

end_unit

