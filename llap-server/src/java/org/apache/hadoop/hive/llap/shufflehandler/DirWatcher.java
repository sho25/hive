begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|shufflehandler
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardWatchEventKinds
operator|.
name|ENTRY_CREATE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardWatchEventKinds
operator|.
name|OVERFLOW
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|WatchEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|WatchKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|WatchService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|shufflehandler
operator|.
name|ShuffleHandler
operator|.
name|AttemptPathIdentifier
import|;
end_import

begin_class
class|class
name|DirWatcher
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DirWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|Type
block|{
name|BASE
block|,
comment|// App Base Dir / ${dagDir}
name|OUTPUT
block|,
comment|// appBase/output/
name|FINAL
block|,
comment|// appBase/output/attemptDir
block|}
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT
init|=
literal|"output"
decl_stmt|;
specifier|private
specifier|final
name|AttemptRegistrationListener
name|listener
decl_stmt|;
specifier|private
specifier|final
name|WatchService
name|watchService
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|shutdown
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|WatcherCallable
name|watcherCallable
init|=
operator|new
name|WatcherCallable
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ListeningExecutorService
name|watcherExecutorService
decl_stmt|;
specifier|private
specifier|volatile
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|watcherFuture
decl_stmt|;
specifier|private
specifier|final
name|DelayQueue
argument_list|<
name|WatchedPathInfo
argument_list|>
name|watchedPathQueue
init|=
operator|new
name|DelayQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|WatchExpirerCallable
name|expirerCallable
init|=
operator|new
name|WatchExpirerCallable
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ListeningExecutorService
name|expirerExecutorService
decl_stmt|;
specifier|private
specifier|volatile
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|expirerFuture
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|AttemptPathIdentifier
argument_list|,
name|FoundPathInfo
argument_list|>
name|foundAttempts
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Path
argument_list|,
name|WatchedPathInfo
argument_list|>
name|watchedPaths
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|AttemptPathIdentifier
argument_list|,
name|List
argument_list|<
name|WatchKey
argument_list|>
argument_list|>
name|watchesPerAttempt
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|DirWatcher
parameter_list|(
name|AttemptRegistrationListener
name|listener
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|watchService
operator|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|newWatchService
argument_list|()
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|ExecutorService
name|executor1
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"DirWatcher"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|watcherExecutorService
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|executor1
argument_list|)
expr_stmt|;
name|ExecutorService
name|executor2
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"WatchExpirer"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|expirerExecutorService
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|executor2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Register a base dir for an application    * @param pathString the full path including jobId, user - /${local.dir}/appCache/${appId}/userCache/${user}    * @param appId the appId    * @param user the user    * @param expiry when to expire the watch - in ms    * @throws IOException    */
name|void
name|registerDagDir
parameter_list|(
name|String
name|pathString
parameter_list|,
name|String
name|appId
parameter_list|,
name|int
name|dagIdentifier
parameter_list|,
name|String
name|user
parameter_list|,
name|long
name|expiry
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The path string contains the dag Identifier
name|Path
name|path
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|pathString
argument_list|)
decl_stmt|;
name|WatchedPathInfo
name|watchedPathInfo
init|=
operator|new
name|WatchedPathInfo
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|expiry
argument_list|,
name|Type
operator|.
name|BASE
argument_list|,
name|appId
argument_list|,
name|dagIdentifier
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|watchedPaths
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|watchedPathInfo
argument_list|)
expr_stmt|;
name|WatchKey
name|watchKey
init|=
name|path
operator|.
name|register
argument_list|(
name|watchService
argument_list|,
name|ENTRY_CREATE
argument_list|)
decl_stmt|;
name|watchedPathInfo
operator|.
name|setWatchKey
argument_list|(
name|watchKey
argument_list|)
expr_stmt|;
name|watchedPathQueue
operator|.
name|add
argument_list|(
name|watchedPathInfo
argument_list|)
expr_stmt|;
comment|// TODO Watches on the output dirs need to be cancelled at some point. For now - via the expiry.
block|}
name|void
name|unregisterDagDir
parameter_list|(
name|String
name|pathString
parameter_list|,
name|String
name|appId
parameter_list|,
name|int
name|dagIdentifier
parameter_list|)
block|{
comment|// TODO Implement to remove all watches for the specified pathString and it's sub-tree
block|}
comment|/**    * Invoke when a pathIdentifier has been found, or is no longer of interest    * @param pathIdentifier    */
name|void
name|attemptInfoFound
parameter_list|(
name|AttemptPathIdentifier
name|pathIdentifier
parameter_list|)
block|{
name|cancelWatchesForAttempt
argument_list|(
name|pathIdentifier
argument_list|)
expr_stmt|;
block|}
name|void
name|start
parameter_list|()
block|{
name|watcherFuture
operator|=
name|watcherExecutorService
operator|.
name|submit
argument_list|(
name|watcherCallable
argument_list|)
expr_stmt|;
name|expirerFuture
operator|=
name|expirerExecutorService
operator|.
name|submit
argument_list|(
name|expirerCallable
argument_list|)
expr_stmt|;
block|}
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|shutdown
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|watcherFuture
operator|!=
literal|null
condition|)
block|{
name|watcherFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expirerFuture
operator|!=
literal|null
condition|)
block|{
name|expirerFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|watchService
operator|.
name|close
argument_list|()
expr_stmt|;
name|watcherExecutorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|expirerExecutorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|registerDir
parameter_list|(
name|Path
name|path
parameter_list|,
name|WatchedPathInfo
name|watchedPathInfo
parameter_list|)
block|{
name|watchedPaths
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|watchedPathInfo
argument_list|)
expr_stmt|;
try|try
block|{
name|WatchKey
name|watchKey
init|=
name|path
operator|.
name|register
argument_list|(
name|watchService
argument_list|,
name|ENTRY_CREATE
argument_list|)
decl_stmt|;
name|watchedPathInfo
operator|.
name|setWatchKey
argument_list|(
name|watchKey
argument_list|)
expr_stmt|;
name|watchedPathQueue
operator|.
name|add
argument_list|(
name|watchedPathInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|watchedPathInfo
operator|.
name|type
operator|==
name|Type
operator|.
name|FINAL
condition|)
block|{
name|trackWatchForAttempt
argument_list|(
name|watchedPathInfo
argument_list|,
name|watchKey
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to setup watch for: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|trackWatchForAttempt
parameter_list|(
name|WatchedPathInfo
name|watchedPathInfo
parameter_list|,
name|WatchKey
name|watchKey
parameter_list|)
block|{
assert|assert
name|watchedPathInfo
operator|.
name|pathIdentifier
operator|!=
literal|null
assert|;
comment|// TODO May be possible to do finer grained locks.
synchronized|synchronized
init|(
name|watchesPerAttempt
init|)
block|{
name|List
argument_list|<
name|WatchKey
argument_list|>
name|list
init|=
name|watchesPerAttempt
operator|.
name|get
argument_list|(
name|watchedPathInfo
operator|.
name|pathIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|watchesPerAttempt
operator|.
name|put
argument_list|(
name|watchedPathInfo
operator|.
name|pathIdentifier
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|watchKey
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|cancelWatchesForAttempt
parameter_list|(
name|AttemptPathIdentifier
name|pathIdentifier
parameter_list|)
block|{
comment|// TODO May be possible to do finer grained locks.
synchronized|synchronized
init|(
name|watchesPerAttempt
init|)
block|{
name|List
argument_list|<
name|WatchKey
argument_list|>
name|list
init|=
name|watchesPerAttempt
operator|.
name|remove
argument_list|(
name|pathIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WatchKey
name|watchKey
range|:
name|list
control|)
block|{
name|watchKey
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|watch
parameter_list|()
block|{
while|while
condition|(
operator|!
name|shutdown
operator|.
name|get
argument_list|()
condition|)
block|{
name|WatchKey
name|watchKey
decl_stmt|;
try|try
block|{
name|watchKey
operator|=
name|watchService
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|shutdown
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down watcher"
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Watcher interrupted before being shutdown"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Watcher interrupted before being shutdown"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|Path
name|watchedPath
init|=
operator|(
name|Path
operator|)
name|watchKey
operator|.
name|watchable
argument_list|()
decl_stmt|;
name|WatchedPathInfo
name|parentWatchedPathInfo
init|=
name|watchedPaths
operator|.
name|get
argument_list|(
name|watchedPath
argument_list|)
decl_stmt|;
name|boolean
name|cancelledWatch
init|=
literal|false
decl_stmt|;
for|for
control|(
name|WatchEvent
argument_list|<
name|?
argument_list|>
name|rawEvent
range|:
name|watchKey
operator|.
name|pollEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|rawEvent
operator|.
name|kind
argument_list|()
operator|.
name|equals
argument_list|(
name|OVERFLOW
argument_list|)
condition|)
block|{
comment|// Ignoring and continuing to watch for additional elements in the dir.
continue|continue;
block|}
name|WatchEvent
argument_list|<
name|Path
argument_list|>
name|event
init|=
operator|(
name|WatchEvent
argument_list|<
name|Path
argument_list|>
operator|)
name|rawEvent
decl_stmt|;
name|WatchedPathInfo
name|watchedPathInfo
decl_stmt|;
name|Path
name|resolvedPath
decl_stmt|;
switch|switch
condition|(
name|parentWatchedPathInfo
operator|.
name|type
condition|)
block|{
case|case
name|BASE
case|:
comment|// Add the output dir to the watch set, scan it, and cancel current watch.
if|if
condition|(
name|event
operator|.
name|context
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|OUTPUT
argument_list|)
condition|)
block|{
name|resolvedPath
operator|=
name|watchedPath
operator|.
name|resolve
argument_list|(
name|event
operator|.
name|context
argument_list|()
argument_list|)
expr_stmt|;
name|watchedPathInfo
operator|=
operator|new
name|WatchedPathInfo
argument_list|(
name|parentWatchedPathInfo
argument_list|,
name|Type
operator|.
name|OUTPUT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|registerDir
argument_list|(
name|resolvedPath
argument_list|,
name|watchedPathInfo
argument_list|)
expr_stmt|;
comment|// Scan the "output" directory for existing files, and add watches
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|dirStream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|resolvedPath
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|dirStream
control|)
block|{
comment|// This would be an attempt directory. Add a watch, and track it.
if|if
condition|(
name|path
operator|.
name|toFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|watchedPathInfo
operator|=
operator|new
name|WatchedPathInfo
argument_list|(
name|parentWatchedPathInfo
argument_list|,
name|Type
operator|.
name|FINAL
argument_list|,
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|registerDir
argument_list|(
name|path
argument_list|,
name|watchedPathInfo
argument_list|)
expr_stmt|;
name|scanForFinalFiles
argument_list|(
name|watchedPathInfo
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring unexpected file: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to list files under: "
operator|+
name|resolvedPath
argument_list|)
expr_stmt|;
block|}
comment|// Cancel the watchKey since the output dir has been found.
name|cancelledWatch
operator|=
literal|true
expr_stmt|;
name|watchKey
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DEBUG: Found unexpected directory while looking for OUTPUT: "
operator|+
name|event
operator|.
name|context
argument_list|()
operator|+
literal|" under "
operator|+
name|watchedPath
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OUTPUT
case|:
comment|// Add the attemptDir to the watch set, scan it and add to the list of found files
name|resolvedPath
operator|=
name|watchedPath
operator|.
name|resolve
argument_list|(
name|event
operator|.
name|context
argument_list|()
argument_list|)
expr_stmt|;
comment|// New attempt path crated. Add a watch on it, and scan it for existing files.
name|watchedPathInfo
operator|=
operator|new
name|WatchedPathInfo
argument_list|(
name|parentWatchedPathInfo
argument_list|,
name|Type
operator|.
name|FINAL
argument_list|,
name|event
operator|.
name|context
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|registerDir
argument_list|(
name|resolvedPath
argument_list|,
name|watchedPathInfo
argument_list|)
expr_stmt|;
name|scanForFinalFiles
argument_list|(
name|watchedPathInfo
argument_list|,
name|resolvedPath
argument_list|)
expr_stmt|;
break|break;
case|case
name|FINAL
case|:
name|resolvedPath
operator|=
name|watchedPath
operator|.
name|resolve
argument_list|(
name|event
operator|.
name|context
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|context
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|ShuffleHandler
operator|.
name|DATA_FILE_NAME
argument_list|)
condition|)
block|{
name|registerFoundAttempt
argument_list|(
name|parentWatchedPathInfo
operator|.
name|pathIdentifier
argument_list|,
literal|null
argument_list|,
name|resolvedPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|context
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|ShuffleHandler
operator|.
name|INDEX_FILE_NAME
argument_list|)
condition|)
block|{
name|registerFoundAttempt
argument_list|(
name|parentWatchedPathInfo
operator|.
name|pathIdentifier
argument_list|,
name|resolvedPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring unexpected file: "
operator|+
name|watchedPath
operator|.
name|resolve
argument_list|(
name|event
operator|.
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|cancelledWatch
condition|)
block|{
name|boolean
name|valid
init|=
name|watchKey
operator|.
name|reset
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|valid
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"DEBUG: WatchKey: "
operator|+
name|watchKey
operator|.
name|watchable
argument_list|()
operator|+
literal|" no longer valid"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|scanForFinalFiles
parameter_list|(
name|WatchedPathInfo
name|watchedPathInfo
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|dirStream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|path
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|p
range|:
name|dirStream
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|ShuffleHandler
operator|.
name|DATA_FILE_NAME
argument_list|)
condition|)
block|{
name|registerFoundAttempt
argument_list|(
name|watchedPathInfo
operator|.
name|pathIdentifier
argument_list|,
literal|null
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|ShuffleHandler
operator|.
name|INDEX_FILE_NAME
argument_list|)
condition|)
block|{
name|registerFoundAttempt
argument_list|(
name|watchedPathInfo
operator|.
name|pathIdentifier
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring unknown file: "
operator|+
name|p
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to open dir stream for attemptDir: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|registerFoundAttempt
parameter_list|(
name|AttemptPathIdentifier
name|pathIdentifier
parameter_list|,
name|Path
name|indexFile
parameter_list|,
name|Path
name|dataFile
parameter_list|)
block|{
name|FoundPathInfo
name|pathInfo
init|=
name|foundAttempts
operator|.
name|get
argument_list|(
name|pathIdentifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathInfo
operator|==
literal|null
condition|)
block|{
name|pathInfo
operator|=
operator|new
name|FoundPathInfo
argument_list|(
name|indexFile
argument_list|,
name|dataFile
argument_list|)
expr_stmt|;
name|foundAttempts
operator|.
name|put
argument_list|(
name|pathIdentifier
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pathInfo
operator|.
name|isComplete
argument_list|()
condition|)
block|{
comment|// Inform the shuffle handler
name|listener
operator|.
name|registerAttemptDirs
argument_list|(
name|pathIdentifier
argument_list|,
operator|new
name|ShuffleHandler
operator|.
name|AttemptPathInfo
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
argument_list|(
name|indexFile
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
argument_list|(
name|dataFile
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cancel existing watches
name|cancelWatchesForAttempt
argument_list|(
name|pathIdentifier
argument_list|)
expr_stmt|;
comment|// Cleanup structures
name|foundAttempts
operator|.
name|remove
argument_list|(
name|pathIdentifier
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|WatcherCallable
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|watch
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
class|class
name|WatchExpirerCallable
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
while|while
condition|(
operator|!
name|shutdown
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// Relying on watchService.close to clean up all pending watches
name|WatchedPathInfo
name|pathInfo
decl_stmt|;
try|try
block|{
name|pathInfo
operator|=
name|watchedPathQueue
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|shutdown
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down WatchExpirer"
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"WatchExpirer interrupted before being shutdown"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"WatchExpirer interrupted before being shutdown"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|WatchKey
name|watchKey
init|=
name|pathInfo
operator|.
name|getWatchKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|watchKey
operator|!=
literal|null
operator|&&
name|watchKey
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|watchKey
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FoundPathInfo
block|{
name|Path
name|indexPath
decl_stmt|;
name|Path
name|dataPath
decl_stmt|;
specifier|public
name|FoundPathInfo
parameter_list|(
name|Path
name|indexPath
parameter_list|,
name|Path
name|dataPath
parameter_list|)
block|{
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
name|this
operator|.
name|dataPath
operator|=
name|dataPath
expr_stmt|;
block|}
name|boolean
name|isComplete
parameter_list|()
block|{
return|return
name|indexPath
operator|!=
literal|null
operator|&&
name|dataPath
operator|!=
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|WatchedPathInfo
implements|implements
name|Delayed
block|{
specifier|final
name|long
name|expiry
decl_stmt|;
specifier|final
name|Type
name|type
decl_stmt|;
specifier|final
name|String
name|appId
decl_stmt|;
specifier|final
name|int
name|dagId
decl_stmt|;
specifier|final
name|String
name|user
decl_stmt|;
specifier|final
name|String
name|attemptId
decl_stmt|;
specifier|final
name|AttemptPathIdentifier
name|pathIdentifier
decl_stmt|;
name|WatchKey
name|watchKey
decl_stmt|;
specifier|public
name|WatchedPathInfo
parameter_list|(
name|long
name|expiry
parameter_list|,
name|Type
name|type
parameter_list|,
name|String
name|jobId
parameter_list|,
name|int
name|dagId
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|expiry
operator|=
name|expiry
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|appId
operator|=
name|jobId
expr_stmt|;
name|this
operator|.
name|dagId
operator|=
name|dagId
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|attemptId
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|pathIdentifier
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|WatchedPathInfo
parameter_list|(
name|WatchedPathInfo
name|other
parameter_list|,
name|Type
name|type
parameter_list|,
name|String
name|attemptId
parameter_list|)
block|{
name|this
operator|.
name|expiry
operator|=
name|other
operator|.
name|expiry
expr_stmt|;
name|this
operator|.
name|appId
operator|=
name|other
operator|.
name|appId
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|other
operator|.
name|user
expr_stmt|;
name|this
operator|.
name|dagId
operator|=
name|other
operator|.
name|dagId
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|attemptId
operator|=
name|attemptId
expr_stmt|;
if|if
condition|(
name|attemptId
operator|!=
literal|null
condition|)
block|{
name|pathIdentifier
operator|=
operator|new
name|AttemptPathIdentifier
argument_list|(
name|appId
argument_list|,
name|dagId
argument_list|,
name|user
argument_list|,
name|attemptId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathIdentifier
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|synchronized
name|void
name|setWatchKey
parameter_list|(
name|WatchKey
name|watchKey
parameter_list|)
block|{
name|this
operator|.
name|watchKey
operator|=
name|watchKey
expr_stmt|;
block|}
specifier|synchronized
name|WatchKey
name|getWatchKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|watchKey
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|expiry
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
name|WatchedPathInfo
name|other
init|=
operator|(
name|WatchedPathInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|expiry
operator|>
name|this
operator|.
name|expiry
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|other
operator|.
name|expiry
operator|<
name|this
operator|.
name|expiry
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

