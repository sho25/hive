begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|old
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|old
operator|.
name|BufferPool
operator|.
name|WeakBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|old
operator|.
name|ChunkPool
operator|.
name|Chunk
import|;
end_import

begin_comment
comment|/**  * This class contains the mapping of file chunks to buffers inside BufferPool.  */
end_comment

begin_class
specifier|public
class|class
name|ChunkPool
parameter_list|<
name|K
parameter_list|>
comment|/*implements EvictionListener*/
block|{
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|Chunk
argument_list|>
name|chunkCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|Chunk
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Number of unprocessed evictions, for the background thread. */
specifier|private
specifier|final
name|AtomicInteger
name|newEvictions
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Thread
name|cleanupThread
decl_stmt|;
specifier|public
name|ChunkPool
parameter_list|()
block|{
name|cleanupThread
operator|=
operator|new
name|CleanupThread
argument_list|()
expr_stmt|;
name|cleanupThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets a chunk from cache    * TODO:  We expect that in most cases, some related chunks (e.g. columns for a stripe)    *        will be stored in the same buffer. We could use this to get keys more efficiently.    *        On the other hand, real stripes are pretty big.    * @param key key to search for.    * @return Chunk corresponding to k.    */
specifier|public
name|Chunk
name|getChunk
parameter_list|(
name|K
name|key
parameter_list|,
name|HashSet
argument_list|<
name|WeakBuffer
argument_list|>
name|lockedBuffers
parameter_list|)
block|{
name|Chunk
name|result
init|=
name|chunkCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|lockChunk
argument_list|(
name|result
argument_list|,
name|lockedBuffers
argument_list|)
condition|)
return|return
name|result
return|;
if|if
condition|(
name|chunkCache
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|boolean
name|lockChunk
parameter_list|(
name|Chunk
name|result
parameter_list|,
name|HashSet
argument_list|<
name|WeakBuffer
argument_list|>
name|lockedBuffers
parameter_list|)
block|{
comment|// We expect the chain to have 1 or 2 buffers (2 if we are on buffer boundary). Keep track of
comment|// what we lock in the bitmask; may need fixing (extremely unlikely - 64+ buffer, giant chunks)
name|boolean
name|failedToLock
init|=
literal|false
decl_stmt|;
name|long
name|blocksToUnlock
init|=
literal|0
decl_stmt|;
name|long
name|bit
init|=
literal|1
operator|<<
literal|63
decl_stmt|;
comment|// The bit indicating that current chunk was locked.
name|Chunk
name|chunk
init|=
name|result
decl_stmt|;
while|while
condition|(
name|chunk
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lockedBuffers
operator|.
name|contains
argument_list|(
name|chunk
operator|.
name|buffer
argument_list|)
condition|)
block|{
assert|assert
name|chunk
operator|.
name|buffer
operator|.
name|isLocked
argument_list|()
operator|:
name|chunk
operator|.
name|buffer
operator|+
literal|" is in lockedBuffers but is not locked"
assert|;
block|}
elseif|else
if|if
condition|(
name|chunk
operator|.
name|buffer
operator|.
name|lock
argument_list|(
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceLockingEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Locked "
operator|+
name|chunk
operator|.
name|buffer
operator|+
literal|" for "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
name|lockedBuffers
operator|.
name|add
argument_list|(
name|chunk
operator|.
name|buffer
argument_list|)
expr_stmt|;
name|blocksToUnlock
operator|+=
name|bit
expr_stmt|;
block|}
else|else
block|{
name|failedToLock
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|bit
operator|>>>=
literal|1
expr_stmt|;
name|chunk
operator|=
name|chunk
operator|.
name|nextChunk
expr_stmt|;
if|if
condition|(
name|bit
operator|==
literal|1
operator|&&
name|chunk
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Chunk chain was too long"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|failedToLock
condition|)
return|return
literal|true
return|;
name|bit
operator|=
literal|1
operator|<<
literal|63
expr_stmt|;
name|Chunk
name|chunk2
init|=
name|result
decl_stmt|;
while|while
condition|(
name|chunk2
operator|!=
name|chunk
condition|)
block|{
if|if
condition|(
operator|(
name|blocksToUnlock
operator|&
name|bit
operator|)
operator|==
name|bit
condition|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceLockingEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Unlocking "
operator|+
name|chunk2
operator|.
name|buffer
operator|+
literal|" due to failed chunk lock"
argument_list|)
expr_stmt|;
block|}
name|lockedBuffers
operator|.
name|remove
argument_list|(
name|chunk2
operator|.
name|buffer
argument_list|)
expr_stmt|;
name|chunk2
operator|.
name|buffer
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|bit
operator|>>>=
literal|1
expr_stmt|;
name|chunk2
operator|=
name|chunk2
operator|.
name|nextChunk
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|verifyChunk
parameter_list|(
name|Chunk
name|entry
parameter_list|)
block|{
name|Chunk
name|chunk
init|=
name|entry
decl_stmt|;
while|while
condition|(
name|chunk
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|chunk
operator|.
name|buffer
operator|.
name|lock
argument_list|(
literal|false
argument_list|)
condition|)
break|break;
name|chunk
operator|=
name|chunk
operator|.
name|nextChunk
expr_stmt|;
block|}
name|Chunk
name|chunk2
init|=
name|entry
decl_stmt|;
while|while
condition|(
name|chunk2
operator|!=
name|chunk
condition|)
block|{
name|chunk2
operator|.
name|buffer
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|chunk2
operator|=
name|chunk2
operator|.
name|nextChunk
expr_stmt|;
block|}
return|return
name|chunk
operator|==
literal|null
return|;
block|}
specifier|public
name|Chunk
name|addOrGetChunk
parameter_list|(
name|K
name|key
parameter_list|,
name|Chunk
name|val
parameter_list|,
name|HashSet
argument_list|<
name|WeakBuffer
argument_list|>
name|lockedBuffers
parameter_list|)
block|{
assert|assert
name|val
operator|.
name|buffer
operator|.
name|isLocked
argument_list|()
assert|;
while|while
condition|(
literal|true
condition|)
block|{
name|Chunk
name|oldVal
init|=
name|chunkCache
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldVal
operator|==
literal|null
condition|)
return|return
name|val
return|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceCachingEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to cache when the chunk is already cached for "
operator|+
name|key
operator|+
literal|"; old "
operator|+
name|oldVal
operator|+
literal|", new "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockChunk
argument_list|(
name|oldVal
argument_list|,
name|lockedBuffers
argument_list|)
condition|)
return|return
name|oldVal
return|;
comment|// We found some old value but couldn't lock it; remove it.
name|chunkCache
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|oldVal
argument_list|)
expr_stmt|;
block|}
block|}
comment|//@Override
specifier|public
name|void
name|evictionNotice
parameter_list|(
name|WeakBuffer
name|evicted
parameter_list|)
block|{
name|int
name|oldValue
init|=
name|newEvictions
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|newEvictions
init|)
block|{
name|newEvictions
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|Chunk
block|{
specifier|public
name|WeakBuffer
name|buffer
decl_stmt|;
specifier|public
name|int
name|offset
decl_stmt|,
name|length
decl_stmt|;
specifier|public
name|Chunk
name|nextChunk
decl_stmt|;
specifier|public
name|Chunk
parameter_list|(
name|WeakBuffer
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|Chunk
name|addChunk
parameter_list|(
name|Chunk
name|another
parameter_list|)
block|{
comment|// Traversing list is bad; however, we expect that this will very rarely happen; and in
comment|// nearly all the cases when it does (buffer boundary) the list will have 1 element.
name|Chunk
name|chunk
init|=
name|this
decl_stmt|;
while|while
condition|(
name|chunk
operator|.
name|nextChunk
operator|!=
literal|null
condition|)
block|{
name|chunk
operator|=
name|chunk
operator|.
name|nextChunk
expr_stmt|;
block|}
name|chunk
operator|.
name|nextChunk
operator|=
name|another
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{"
operator|+
name|buffer
operator|+
literal|", "
operator|+
name|offset
operator|+
literal|", "
operator|+
name|length
operator|+
literal|"}"
return|;
block|}
specifier|public
name|String
name|toFullString
parameter_list|()
block|{
name|String
name|result
init|=
literal|""
decl_stmt|;
name|Chunk
name|chunk
init|=
name|this
decl_stmt|;
while|while
condition|(
name|chunk
operator|!=
literal|null
condition|)
block|{
name|result
operator|+=
name|chunk
operator|.
name|toString
argument_list|()
operator|+
literal|", "
expr_stmt|;
name|chunk
operator|=
name|chunk
operator|.
name|nextChunk
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|CleanupThread
extends|extends
name|Thread
block|{
specifier|private
name|int
name|APPROX_CLEANUP_INTERVAL_SEC
init|=
literal|600
decl_stmt|;
specifier|public
name|CleanupThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"Llap ChunkPool cleanup thread"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setPriority
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|doOneCleanupRound
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cleanup thread has been interrupted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Cleanup has failed; the thread will now exit"
argument_list|,
name|t
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|doOneCleanupRound
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|evictionsSinceLast
init|=
name|newEvictions
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|evictionsSinceLast
operator|>
literal|0
condition|)
break|break;
synchronized|synchronized
init|(
name|newEvictions
init|)
block|{
name|newEvictions
operator|.
name|wait
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Duration is an estimate; if the size of the map changes rapidly, it can be very different.
name|long
name|endTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|APPROX_CLEANUP_INTERVAL_SEC
operator|*
literal|1000000000L
decl_stmt|;
name|int
name|processed
init|=
literal|0
decl_stmt|;
comment|// TODO: if this iterator affects the map in some bad way,
comment|//       we'd need to sleep once per round instead.
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|Chunk
argument_list|>
argument_list|>
name|iter
init|=
name|chunkCache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|verifyChunk
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
operator|++
name|processed
expr_stmt|;
name|int
name|approxElementsLeft
init|=
name|chunkCache
operator|.
name|size
argument_list|()
operator|-
name|processed
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|approxElementsLeft
operator|<=
literal|0
operator|)
condition|?
literal|1
else|:
operator|(
name|endTime
operator|-
name|System
operator|.
name|nanoTime
argument_list|()
operator|)
operator|/
operator|(
literal|1000000L
operator|*
name|approxElementsLeft
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

