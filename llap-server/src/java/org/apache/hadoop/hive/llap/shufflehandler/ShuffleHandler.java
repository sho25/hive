begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|shufflehandler
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
operator|.
name|wrappedBuffer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpMethod
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|BAD_REQUEST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|FORBIDDEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|INTERNAL_SERVER_ERROR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|METHOD_NOT_ALLOWED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|NOT_FOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|OK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
operator|.
name|UNAUTHORIZED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
operator|.
name|HTTP_1_1
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|LoadingCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|RemovalNotification
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalDirAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|ReadaheadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SecureIOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableCounterLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|SSLFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|library
operator|.
name|common
operator|.
name|security
operator|.
name|SecureShuffleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|library
operator|.
name|common
operator|.
name|shuffle
operator|.
name|orderedgrouped
operator|.
name|ShuffleHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|library
operator|.
name|common
operator|.
name|sort
operator|.
name|impl
operator|.
name|TezIndexRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelStateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ExceptionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|MessageEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelUpstreamHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|DefaultChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|frame
operator|.
name|TooLongFrameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpChunkAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequestDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|QueryStringDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|stream
operator|.
name|ChunkedWriteHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|CharsetUtil
import|;
end_import

begin_class
specifier|public
class|class
name|ShuffleHandler
implements|implements
name|AttemptRegistrationListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ShuffleHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHUFFLE_HANDLER_LOCAL_DIRS
init|=
literal|"llap.shuffle.handler.local-dirs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHUFFLE_MANAGE_OS_CACHE
init|=
literal|"lla[.shuffle.manage.os.cache"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SHUFFLE_MANAGE_OS_CACHE
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHUFFLE_READAHEAD_BYTES
init|=
literal|"llap.shuffle.readahead.bytes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHUFFLE_READAHEAD_BYTES
init|=
literal|4
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHUFFLE_DIR_WATCHER_ENABLED
init|=
literal|"llap.shuffle.dir-watcher.enabled"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|SHUFFLE_DIR_WATCHER_ENABLED_DEFAULT
init|=
literal|false
decl_stmt|;
comment|// pattern to identify errors related to the client closing the socket early
comment|// idea borrowed from Netty SslHandler
specifier|private
specifier|static
specifier|final
name|Pattern
name|IGNORABLE_ERROR_MESSAGE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^.*(?:connection.*reset|connection.*closed|broken.*pipe).*$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
specifier|private
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|ChannelFactory
name|selector
decl_stmt|;
specifier|private
specifier|final
name|ChannelGroup
name|accepted
init|=
operator|new
name|DefaultChannelGroup
argument_list|()
decl_stmt|;
specifier|protected
name|HttpPipelineFactory
name|pipelineFact
decl_stmt|;
specifier|private
specifier|final
name|int
name|sslFileBufferSize
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|localDirs
decl_stmt|;
specifier|private
specifier|final
name|DirWatcher
name|dirWatcher
decl_stmt|;
comment|/**    * Should the shuffle use posix_fadvise calls to manage the OS cache during    * sendfile    */
specifier|private
specifier|final
name|boolean
name|manageOsCache
decl_stmt|;
specifier|private
specifier|final
name|int
name|readaheadLength
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxShuffleConnections
decl_stmt|;
specifier|private
specifier|final
name|int
name|shuffleBufferSize
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|shuffleTransferToAllowed
decl_stmt|;
specifier|private
specifier|final
name|ReadaheadPool
name|readaheadPool
init|=
name|ReadaheadPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|/* List of registered applications */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|registeredApps
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/* Maps application identifiers (jobIds) to the associated user for the app */
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userRsrc
decl_stmt|;
specifier|private
name|JobTokenSecretManager
name|secretManager
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHUFFLE_PORT_CONFIG_KEY
init|=
literal|"llap.shuffle.port"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHUFFLE_PORT
init|=
literal|15551
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED
init|=
literal|"llap.shuffle.connection-keep-alive.enable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT
init|=
literal|"llap.shuffle.connection-keep-alive.timeout"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT
init|=
literal|5
decl_stmt|;
comment|//seconds
specifier|public
specifier|static
specifier|final
name|String
name|SHUFFLE_MAPOUTPUT_META_INFO_CACHE_SIZE
init|=
literal|"llap.shuffle.mapoutput-info.meta.cache.size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHUFFLE_MAPOUTPUT_META_INFO_CACHE_SIZE
init|=
literal|10000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONNECTION_CLOSE
init|=
literal|"close"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUFFLE_SSL_FILE_BUFFER_SIZE_KEY
init|=
literal|"llap.shuffle.ssl.file.buffer.size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SUFFLE_SSL_FILE_BUFFER_SIZE
init|=
literal|60
operator|*
literal|1024
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_SHUFFLE_CONNECTIONS
init|=
literal|"llap.shuffle.max.connections"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_SHUFFLE_CONNECTIONS
init|=
literal|0
decl_stmt|;
comment|// 0 implies no limit
specifier|public
specifier|static
specifier|final
name|String
name|MAX_SHUFFLE_THREADS
init|=
literal|"llap.shuffle.max.threads"
decl_stmt|;
comment|// 0 implies Netty default of 2 * number of available processors
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_SHUFFLE_THREADS
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHUFFLE_BUFFER_SIZE
init|=
literal|"llap.shuffle.transfer.buffer.size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHUFFLE_BUFFER_SIZE
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SHUFFLE_TRANSFERTO_ALLOWED
init|=
literal|"llap.shuffle.transferTo.allowed"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SHUFFLE_TRANSFERTO_ALLOWED
init|=
literal|true
decl_stmt|;
specifier|static
specifier|final
name|String
name|DATA_FILE_NAME
init|=
literal|"file.out"
decl_stmt|;
specifier|static
specifier|final
name|String
name|INDEX_FILE_NAME
init|=
literal|"file.out.index"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|initing
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ShuffleHandler
name|INSTANCE
decl_stmt|;
specifier|final
name|boolean
name|connectionKeepAliveEnabled
decl_stmt|;
specifier|final
name|int
name|connectionKeepAliveTimeOut
decl_stmt|;
specifier|final
name|int
name|mapOutputMetaInfoCacheSize
decl_stmt|;
specifier|private
specifier|final
name|LocalDirAllocator
name|lDirAlloc
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|SHUFFLE_HANDLER_LOCAL_DIRS
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Shuffle
name|shuffle
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|registerAttemptDirs
parameter_list|(
name|AttemptPathIdentifier
name|identifier
parameter_list|,
name|AttemptPathInfo
name|pathInfo
parameter_list|)
block|{
name|shuffle
operator|.
name|registerAttemptDirs
argument_list|(
name|identifier
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Metrics
argument_list|(
name|about
operator|=
literal|"Shuffle output metrics"
argument_list|,
name|context
operator|=
literal|"mapred"
argument_list|)
specifier|static
class|class
name|ShuffleMetrics
implements|implements
name|ChannelFutureListener
block|{
annotation|@
name|Metric
argument_list|(
literal|"Shuffle output in bytes"
argument_list|)
name|MutableCounterLong
name|shuffleOutputBytes
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"# of failed shuffle outputs"
argument_list|)
name|MutableCounterInt
name|shuffleOutputsFailed
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"# of succeeeded shuffle outputs"
argument_list|)
name|MutableCounterInt
name|shuffleOutputsOK
decl_stmt|;
annotation|@
name|Metric
argument_list|(
literal|"# of current shuffle connections"
argument_list|)
name|MutableGaugeInt
name|shuffleConnections
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|shuffleOutputsOK
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|shuffleOutputsFailed
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
name|shuffleConnections
operator|.
name|decr
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ShuffleHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|manageOsCache
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SHUFFLE_MANAGE_OS_CACHE
argument_list|,
name|DEFAULT_SHUFFLE_MANAGE_OS_CACHE
argument_list|)
expr_stmt|;
name|readaheadLength
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SHUFFLE_READAHEAD_BYTES
argument_list|,
name|DEFAULT_SHUFFLE_READAHEAD_BYTES
argument_list|)
expr_stmt|;
name|maxShuffleConnections
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_SHUFFLE_CONNECTIONS
argument_list|,
name|DEFAULT_MAX_SHUFFLE_CONNECTIONS
argument_list|)
expr_stmt|;
name|int
name|maxShuffleThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_SHUFFLE_THREADS
argument_list|,
name|DEFAULT_MAX_SHUFFLE_THREADS
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxShuffleThreads
operator|==
literal|0
condition|)
block|{
name|maxShuffleThreads
operator|=
literal|2
operator|*
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
expr_stmt|;
block|}
comment|// TODO: this is never used
name|localDirs
operator|=
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|SHUFFLE_HANDLER_LOCAL_DIRS
argument_list|)
expr_stmt|;
name|shuffleBufferSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SHUFFLE_BUFFER_SIZE
argument_list|,
name|DEFAULT_SHUFFLE_BUFFER_SIZE
argument_list|)
expr_stmt|;
name|shuffleTransferToAllowed
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SHUFFLE_TRANSFERTO_ALLOWED
argument_list|,
name|DEFAULT_SHUFFLE_TRANSFERTO_ALLOWED
argument_list|)
expr_stmt|;
name|ThreadFactory
name|bossFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"ShuffleHandler Netty Boss #%d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ThreadFactory
name|workerFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"ShuffleHandler Netty Worker #%d"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|selector
operator|=
operator|new
name|NioServerSocketChannelFactory
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|bossFactory
argument_list|)
argument_list|,
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
name|workerFactory
argument_list|)
argument_list|,
name|maxShuffleThreads
argument_list|)
expr_stmt|;
name|sslFileBufferSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SUFFLE_SSL_FILE_BUFFER_SIZE_KEY
argument_list|,
name|DEFAULT_SUFFLE_SSL_FILE_BUFFER_SIZE
argument_list|)
expr_stmt|;
name|connectionKeepAliveEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED
argument_list|,
name|DEFAULT_SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED
argument_list|)
expr_stmt|;
name|connectionKeepAliveTimeOut
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT
argument_list|,
name|DEFAULT_SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT
argument_list|)
argument_list|)
expr_stmt|;
name|mapOutputMetaInfoCacheSize
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|SHUFFLE_MAPOUTPUT_META_INFO_CACHE_SIZE
argument_list|,
name|DEFAULT_SHUFFLE_MAPOUTPUT_META_INFO_CACHE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|userRsrc
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|secretManager
operator|=
operator|new
name|JobTokenSecretManager
argument_list|()
expr_stmt|;
name|shuffle
operator|=
operator|new
name|Shuffle
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|SHUFFLE_DIR_WATCHER_ENABLED
argument_list|,
name|SHUFFLE_DIR_WATCHER_ENABLED_DEFAULT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to start dirWatcher"
argument_list|)
expr_stmt|;
name|DirWatcher
name|localDirWatcher
init|=
literal|null
decl_stmt|;
try|try
block|{
name|localDirWatcher
operator|=
operator|new
name|DirWatcher
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to start DirWatcher. Active scans disabled"
argument_list|)
expr_stmt|;
block|}
name|dirWatcher
operator|=
name|localDirWatcher
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DirWatcher disabled by config"
argument_list|)
expr_stmt|;
name|dirWatcher
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|ServerBootstrap
name|bootstrap
init|=
operator|new
name|ServerBootstrap
argument_list|(
name|selector
argument_list|)
decl_stmt|;
try|try
block|{
name|pipelineFact
operator|=
operator|new
name|HttpPipelineFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|bootstrap
operator|.
name|setPipelineFactory
argument_list|(
name|pipelineFact
argument_list|)
expr_stmt|;
name|port
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
name|DEFAULT_SHUFFLE_PORT
argument_list|)
expr_stmt|;
name|Channel
name|ch
init|=
name|bootstrap
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|port
argument_list|)
argument_list|)
decl_stmt|;
name|accepted
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|port
operator|=
operator|(
operator|(
name|InetSocketAddress
operator|)
name|ch
operator|.
name|getLocalAddress
argument_list|()
operator|)
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|pipelineFact
operator|.
name|SHUFFLE
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirWatcher
operator|!=
literal|null
condition|)
block|{
name|dirWatcher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"LlapShuffleHandler"
operator|+
literal|" listening on port "
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|initializeAndStart
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|initing
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|ShuffleHandler
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|INSTANCE
operator|.
name|start
argument_list|()
expr_stmt|;
name|started
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|INSTANCE
operator|!=
literal|null
condition|)
block|{
name|INSTANCE
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|ShuffleHandler
name|get
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|started
operator|.
name|get
argument_list|()
argument_list|,
literal|"ShuffleHandler must be started before invoking get"
argument_list|)
expr_stmt|;
return|return
name|INSTANCE
return|;
block|}
comment|/**    * Serialize the shuffle port into a ByteBuffer for use later on.    * @param port the port to be sent to the ApplciationMaster    * @return the serialized form of the port.    */
specifier|public
specifier|static
name|ByteBuffer
name|serializeMetaData
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO these bytes should be versioned
name|DataOutputBuffer
name|port_dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|port_dob
operator|.
name|writeInt
argument_list|(
name|port
argument_list|)
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|port_dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|port_dob
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * A helper function to deserialize the metadata returned by ShuffleHandler.    * @param meta the metadata returned by the ShuffleHandler    * @return the port the Shuffle Handler is listening on to serve shuffle data.    */
specifier|public
specifier|static
name|int
name|deserializeMetaData
parameter_list|(
name|ByteBuffer
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO this should be returning a class not just an int
name|DataInputByteBuffer
name|in
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
return|return
name|port
return|;
block|}
comment|/**    * A helper function to serialize the JobTokenIdentifier to be sent to the    * ShuffleHandler as ServiceData.    * @param jobToken the job token to be used for authentication of    * shuffle data requests.    * @return the serialized version of the jobToken.    */
specifier|public
specifier|static
name|ByteBuffer
name|serializeServiceData
parameter_list|(
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO these bytes should be versioned
name|DataOutputBuffer
name|jobToken_dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|jobToken
operator|.
name|write
argument_list|(
name|jobToken_dob
argument_list|)
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|jobToken_dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|jobToken_dob
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|deserializeServiceData
parameter_list|(
name|ByteBuffer
name|secret
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputByteBuffer
name|in
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|secret
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jt
init|=
operator|new
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|jt
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|jt
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**    * Register an application and it's associated credentials and user information.    *    * This method and unregisterDag must be synchronized externally to prevent races in shuffle token registration/unregistration    *    * @param applicationIdString    * @param dagIdentifier    * @param appToken    * @param user    */
specifier|public
name|void
name|registerDag
parameter_list|(
name|String
name|applicationIdString
parameter_list|,
name|int
name|dagIdentifier
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|appToken
parameter_list|,
name|String
name|user
parameter_list|,
name|String
index|[]
name|appDirs
parameter_list|)
block|{
name|Integer
name|registeredDagIdentifier
init|=
name|registeredApps
operator|.
name|putIfAbsent
argument_list|(
name|applicationIdString
argument_list|,
name|dagIdentifier
argument_list|)
decl_stmt|;
comment|// App never seen, or previous dag has been unregistered.
if|if
condition|(
name|registeredDagIdentifier
operator|==
literal|null
condition|)
block|{
name|recordJobShuffleInfo
argument_list|(
name|applicationIdString
argument_list|,
name|user
argument_list|,
name|appToken
argument_list|)
expr_stmt|;
block|}
comment|// Register the new dag identifier, if that's not the one currently registered.
comment|// Register comes in before the unregister for the previous dag
if|if
condition|(
name|registeredDagIdentifier
operator|!=
literal|null
operator|&&
operator|!
name|registeredDagIdentifier
operator|.
name|equals
argument_list|(
name|dagIdentifier
argument_list|)
condition|)
block|{
name|registeredApps
operator|.
name|put
argument_list|(
name|applicationIdString
argument_list|,
name|dagIdentifier
argument_list|)
expr_stmt|;
comment|// Don't need to recordShuffleInfo since the out of sync unregister will not remove the
comment|// credentials
block|}
comment|// First time registration, or new register comes in before the previous unregister.
if|if
condition|(
name|registeredDagIdentifier
operator|==
literal|null
operator|||
operator|!
name|registeredDagIdentifier
operator|.
name|equals
argument_list|(
name|dagIdentifier
argument_list|)
condition|)
block|{
if|if
condition|(
name|dirWatcher
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering watches for AppDirs: appId={}, dagId={}"
argument_list|,
name|applicationIdString
argument_list|,
name|dagIdentifier
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|appDir
range|:
name|appDirs
control|)
block|{
try|try
block|{
name|dirWatcher
operator|.
name|registerDagDir
argument_list|(
name|appDir
argument_list|,
name|applicationIdString
argument_list|,
name|dagIdentifier
argument_list|,
name|user
argument_list|,
literal|5
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to register dir: "
operator|+
name|appDir
operator|+
literal|" with watcher"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Unregister a specific dag    *    * This method and registerDag must be synchronized externally to prevent races in shuffle token registration/unregistration    *    * @param dir    * @param applicationIdString    * @param dagIdentifier    */
specifier|public
name|void
name|unregisterDag
parameter_list|(
name|String
name|dir
parameter_list|,
name|String
name|applicationIdString
parameter_list|,
name|int
name|dagIdentifier
parameter_list|)
block|{
name|Integer
name|currentDagIdentifier
init|=
name|registeredApps
operator|.
name|get
argument_list|(
name|applicationIdString
argument_list|)
decl_stmt|;
comment|// Unregister may come in after the new dag has started running. The methods are expected to
comment|// be synchronized, hence the following check is sufficient.
if|if
condition|(
name|currentDagIdentifier
operator|!=
literal|null
operator|&&
name|currentDagIdentifier
operator|.
name|equals
argument_list|(
name|dagIdentifier
argument_list|)
condition|)
block|{
name|registeredApps
operator|.
name|remove
argument_list|(
name|applicationIdString
argument_list|)
expr_stmt|;
name|removeJobShuffleInfo
argument_list|(
name|applicationIdString
argument_list|)
expr_stmt|;
block|}
comment|// Unregister for the dirWatcher for the specific dagIdentifier in either case.
if|if
condition|(
name|dirWatcher
operator|!=
literal|null
condition|)
block|{
name|dirWatcher
operator|.
name|unregisterDagDir
argument_list|(
name|dir
argument_list|,
name|applicationIdString
argument_list|,
name|dagIdentifier
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|accepted
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|selector
operator|!=
literal|null
condition|)
block|{
name|ServerBootstrap
name|bootstrap
init|=
operator|new
name|ServerBootstrap
argument_list|(
name|selector
argument_list|)
decl_stmt|;
name|bootstrap
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pipelineFact
operator|!=
literal|null
condition|)
block|{
name|pipelineFact
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dirWatcher
operator|!=
literal|null
condition|)
block|{
name|dirWatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Shuffle
name|getShuffle
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|shuffle
return|;
block|}
specifier|private
name|void
name|addJobToken
parameter_list|(
name|String
name|appIdString
parameter_list|,
name|String
name|user
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
parameter_list|)
block|{
comment|// This is in place to be compatible with the MR ShuffleHandler. Requests from ShuffleInputs
comment|// arrive with a job_ prefix.
name|String
name|jobIdString
init|=
name|appIdString
operator|.
name|replace
argument_list|(
literal|"application"
argument_list|,
literal|"job"
argument_list|)
decl_stmt|;
name|userRsrc
operator|.
name|putIfAbsent
argument_list|(
name|jobIdString
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|secretManager
operator|.
name|addTokenForJob
argument_list|(
name|jobIdString
argument_list|,
name|jobToken
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added token for "
operator|+
name|jobIdString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|recordJobShuffleInfo
parameter_list|(
name|String
name|appIdString
parameter_list|,
name|String
name|user
parameter_list|,
name|Token
argument_list|<
name|JobTokenIdentifier
argument_list|>
name|jobToken
parameter_list|)
block|{
name|addJobToken
argument_list|(
name|appIdString
argument_list|,
name|user
argument_list|,
name|jobToken
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeJobShuffleInfo
parameter_list|(
name|String
name|appIdString
parameter_list|)
block|{
name|secretManager
operator|.
name|removeTokenForJob
argument_list|(
name|appIdString
argument_list|)
expr_stmt|;
name|userRsrc
operator|.
name|remove
argument_list|(
name|appIdString
argument_list|)
expr_stmt|;
block|}
class|class
name|HttpPipelineFactory
implements|implements
name|ChannelPipelineFactory
block|{
specifier|final
name|Shuffle
name|SHUFFLE
decl_stmt|;
specifier|private
name|SSLFactory
name|sslFactory
decl_stmt|;
specifier|public
name|HttpPipelineFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|SHUFFLE
operator|=
name|getShuffle
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// TODO Setup SSL Shuffle
comment|//      if (conf.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY,
comment|//                          MRConfig.SHUFFLE_SSL_ENABLED_DEFAULT)) {
comment|//        LOG.info("Encrypted shuffle is enabled.");
comment|//        sslFactory = new SSLFactory(SSLFactory.Mode.SERVER, conf);
comment|//        sslFactory.init();
comment|//      }
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|sslFactory
operator|!=
literal|null
condition|)
block|{
name|sslFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|pipeline
init|=
name|Channels
operator|.
name|pipeline
argument_list|()
decl_stmt|;
if|if
condition|(
name|sslFactory
operator|!=
literal|null
condition|)
block|{
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"ssl"
argument_list|,
operator|new
name|SslHandler
argument_list|(
name|sslFactory
operator|.
name|createSSLEngine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"decoder"
argument_list|,
operator|new
name|HttpRequestDecoder
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"aggregator"
argument_list|,
operator|new
name|HttpChunkAggregator
argument_list|(
literal|1
operator|<<
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"encoder"
argument_list|,
operator|new
name|HttpResponseEncoder
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"chunking"
argument_list|,
operator|new
name|ChunkedWriteHandler
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"shuffle"
argument_list|,
name|SHUFFLE
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
comment|// TODO factor security manager into pipeline
comment|// TODO factor out encode/decode to permit binary shuffle
comment|// TODO factor out decode of index to permit alt. models
block|}
block|}
class|class
name|Shuffle
extends|extends
name|SimpleChannelUpstreamHandler
block|{
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// TODO Change the indexCache to be a guava loading cache, rather than a custom implementation.
specifier|private
specifier|final
name|IndexCache
name|indexCache
decl_stmt|;
specifier|private
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|LoadingCache
argument_list|<
name|AttemptPathIdentifier
argument_list|,
name|AttemptPathInfo
argument_list|>
name|pathCache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|expireAfterAccess
argument_list|(
literal|300
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|softValues
argument_list|()
operator|.
name|concurrencyLevel
argument_list|(
literal|16
argument_list|)
operator|.
name|removalListener
argument_list|(
operator|new
name|RemovalListener
argument_list|<
name|AttemptPathIdentifier
argument_list|,
name|AttemptPathInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRemoval
parameter_list|(
name|RemovalNotification
argument_list|<
name|AttemptPathIdentifier
argument_list|,
name|AttemptPathInfo
argument_list|>
name|notification
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"PathCacheEviction: "
operator|+
name|notification
operator|.
name|getKey
argument_list|()
operator|+
literal|", Reason="
operator|+
name|notification
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|maximumWeight
argument_list|(
literal|10
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
operator|.
name|weigher
argument_list|(
operator|new
name|Weigher
argument_list|<
name|AttemptPathIdentifier
argument_list|,
name|AttemptPathInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|AttemptPathIdentifier
name|key
parameter_list|,
name|AttemptPathInfo
name|value
parameter_list|)
block|{
return|return
name|key
operator|.
name|jobId
operator|.
name|length
argument_list|()
operator|+
name|key
operator|.
name|user
operator|.
name|length
argument_list|()
operator|+
name|key
operator|.
name|attemptId
operator|.
name|length
argument_list|()
operator|+
name|value
operator|.
name|indexPath
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|+
name|value
operator|.
name|dataPath
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|(
operator|new
name|CacheLoader
argument_list|<
name|AttemptPathIdentifier
argument_list|,
name|AttemptPathInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AttemptPathInfo
name|load
parameter_list|(
name|AttemptPathIdentifier
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|base
init|=
name|getBaseLocation
argument_list|(
name|key
operator|.
name|jobId
argument_list|,
name|key
operator|.
name|dagId
argument_list|,
name|key
operator|.
name|user
argument_list|)
decl_stmt|;
name|String
name|attemptBase
init|=
name|base
operator|+
name|key
operator|.
name|attemptId
decl_stmt|;
name|Path
name|indexFileName
init|=
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|attemptBase
operator|+
literal|"/"
operator|+
name|INDEX_FILE_NAME
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Path
name|mapOutputFileName
init|=
name|lDirAlloc
operator|.
name|getLocalPathToRead
argument_list|(
name|attemptBase
operator|+
literal|"/"
operator|+
name|DATA_FILE_NAME
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loaded : "
operator|+
name|key
operator|+
literal|" via loader"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dirWatcher
operator|!=
literal|null
condition|)
block|{
name|dirWatcher
operator|.
name|attemptInfoFound
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AttemptPathInfo
argument_list|(
name|indexFileName
argument_list|,
name|mapOutputFileName
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|public
name|Shuffle
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|indexCache
operator|=
operator|new
name|IndexCache
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|SHUFFLE_PORT_CONFIG_KEY
argument_list|,
name|DEFAULT_SHUFFLE_PORT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
name|void
name|registerAttemptDirs
parameter_list|(
name|AttemptPathIdentifier
name|identifier
parameter_list|,
name|AttemptPathInfo
name|pathInfo
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering "
operator|+
name|identifier
operator|+
literal|" via watcher"
argument_list|)
expr_stmt|;
name|pathCache
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|splitMaps
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|mapq
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|mapq
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|mapq
control|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|ret
argument_list|,
name|s
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelOpen
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ChannelStateEvent
name|evt
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|(
name|maxShuffleConnections
operator|>
literal|0
operator|)
operator|&&
operator|(
name|accepted
operator|.
name|size
argument_list|()
operator|>=
name|maxShuffleConnections
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Current number of shuffle connections (%d) is "
operator|+
literal|"greater than or equal to the max allowed shuffle connections (%d)"
argument_list|,
name|accepted
operator|.
name|size
argument_list|()
argument_list|,
name|maxShuffleConnections
argument_list|)
argument_list|)
expr_stmt|;
name|evt
operator|.
name|getChannel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
name|accepted
operator|.
name|add
argument_list|(
name|evt
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|channelOpen
argument_list|(
name|ctx
argument_list|,
name|evt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|messageReceived
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|MessageEvent
name|evt
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpRequest
name|request
init|=
operator|(
name|HttpRequest
operator|)
name|evt
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|!=
name|GET
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
name|METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check whether the shuffle version is compatible
if|if
condition|(
operator|!
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|)
argument_list|)
operator|||
operator|!
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|)
argument_list|)
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
literal|"Incompatible shuffle request version"
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|q
init|=
operator|new
name|QueryStringDecoder
argument_list|(
name|request
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|getParameters
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|keepAliveList
init|=
name|q
operator|.
name|get
argument_list|(
literal|"keepAlive"
argument_list|)
decl_stmt|;
name|boolean
name|keepAliveParam
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|keepAliveList
operator|!=
literal|null
operator|&&
name|keepAliveList
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|keepAliveParam
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|keepAliveList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"KeepAliveParam : "
operator|+
name|keepAliveList
operator|+
literal|" : "
operator|+
name|keepAliveParam
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|mapIds
init|=
name|splitMaps
argument_list|(
name|q
operator|.
name|get
argument_list|(
literal|"map"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|reduceQ
init|=
name|q
operator|.
name|get
argument_list|(
literal|"reduce"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|jobQ
init|=
name|q
operator|.
name|get
argument_list|(
literal|"job"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|dagIdQ
init|=
name|q
operator|.
name|get
argument_list|(
literal|"dag"
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RECV: "
operator|+
name|request
operator|.
name|getUri
argument_list|()
operator|+
literal|"\n  mapId: "
operator|+
name|mapIds
operator|+
literal|"\n  reduceId: "
operator|+
name|reduceQ
operator|+
literal|"\n  jobId: "
operator|+
name|jobQ
operator|+
literal|"\n  dagId: "
operator|+
name|dagIdQ
operator|+
literal|"\n  keepAlive: "
operator|+
name|keepAliveParam
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapIds
operator|==
literal|null
operator|||
name|reduceQ
operator|==
literal|null
operator|||
name|jobQ
operator|==
literal|null
operator||
name|dagIdQ
operator|==
literal|null
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
literal|"Required param job, map and reduce"
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|reduceQ
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|jobQ
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|dagIdQ
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
literal|"Too many job/reduce parameters"
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|reduceId
decl_stmt|;
name|String
name|jobId
decl_stmt|;
name|int
name|dagId
decl_stmt|;
try|try
block|{
name|reduceId
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|reduceQ
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|jobId
operator|=
name|jobQ
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dagId
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dagIdQ
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
literal|"Bad reduce parameter"
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
literal|"Bad job parameter"
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|reqUri
init|=
name|request
operator|.
name|getUri
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|reqUri
condition|)
block|{
comment|// TODO? add upstream?
name|sendError
argument_list|(
name|ctx
argument_list|,
name|FORBIDDEN
argument_list|)
expr_stmt|;
return|return;
block|}
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|OK
argument_list|)
decl_stmt|;
try|try
block|{
name|verifyRequest
argument_list|(
name|jobId
argument_list|,
name|ctx
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
operator|new
name|URL
argument_list|(
literal|"http"
argument_list|,
literal|""
argument_list|,
name|this
operator|.
name|port
argument_list|,
name|reqUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Shuffle failure "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sendError
argument_list|(
name|ctx
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|UNAUTHORIZED
argument_list|)
expr_stmt|;
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|MapOutputInfo
argument_list|>
name|mapOutputInfoMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MapOutputInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Channel
name|ch
init|=
name|evt
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|userRsrc
operator|.
name|get
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
try|try
block|{
name|populateHeaders
argument_list|(
name|mapIds
argument_list|,
name|jobId
argument_list|,
name|dagId
argument_list|,
name|user
argument_list|,
name|reduceId
argument_list|,
name|response
argument_list|,
name|keepAliveParam
argument_list|,
name|mapOutputInfoMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ch
operator|.
name|write
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Shuffle error in populating headers :"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|String
name|errorMessage
init|=
name|getErrorMessage
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|sendError
argument_list|(
name|ctx
argument_list|,
name|errorMessage
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
return|return;
block|}
name|ch
operator|.
name|write
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// TODO refactor the following into the pipeline
name|ChannelFuture
name|lastMap
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|mapId
range|:
name|mapIds
control|)
block|{
try|try
block|{
name|MapOutputInfo
name|info
init|=
name|mapOutputInfoMap
operator|.
name|get
argument_list|(
name|mapId
argument_list|)
decl_stmt|;
comment|// This will be hit if there's a large number of mapIds in a single request
comment|// (Determined by the cache size further up), in which case we go to disk again.
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
name|getMapOutputInfo
argument_list|(
name|jobId
argument_list|,
name|dagId
argument_list|,
name|mapId
argument_list|,
name|reduceId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
name|lastMap
operator|=
name|sendMapOutput
argument_list|(
name|ctx
argument_list|,
name|ch
argument_list|,
name|user
argument_list|,
name|mapId
argument_list|,
name|reduceId
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|lastMap
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
name|NOT_FOUND
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Shuffle error :"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|String
name|errorMessage
init|=
name|getErrorMessage
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|sendError
argument_list|(
name|ctx
argument_list|,
name|errorMessage
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|lastMap
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getErrorMessage
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|t
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|t
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|MapOutputInfo
name|getMapOutputInfo
parameter_list|(
name|String
name|jobId
parameter_list|,
name|int
name|dagId
parameter_list|,
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|AttemptPathInfo
name|pathInfo
decl_stmt|;
try|try
block|{
name|AttemptPathIdentifier
name|identifier
init|=
operator|new
name|AttemptPathIdentifier
argument_list|(
name|jobId
argument_list|,
name|dagId
argument_list|,
name|user
argument_list|,
name|mapId
argument_list|)
decl_stmt|;
name|pathInfo
operator|=
name|pathCache
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retrieved pathInfo for "
operator|+
name|identifier
operator|+
literal|" check for corresponding "
operator|+
literal|"loaded messages to determine whether it was loaded or cached"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|TezIndexRecord
name|info
init|=
name|indexCache
operator|.
name|getIndexInformation
argument_list|(
name|mapId
argument_list|,
name|reduce
argument_list|,
name|pathInfo
operator|.
name|indexPath
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"jobId="
operator|+
name|jobId
operator|+
literal|", mapId="
operator|+
name|mapId
operator|+
literal|",dataFile="
operator|+
name|pathInfo
operator|.
name|dataPath
operator|+
literal|", indexFile="
operator|+
name|pathInfo
operator|.
name|indexPath
argument_list|)
expr_stmt|;
block|}
comment|// TODO Get rid of MapOutputInfo if possible
name|MapOutputInfo
name|outputInfo
init|=
operator|new
name|MapOutputInfo
argument_list|(
name|pathInfo
operator|.
name|dataPath
argument_list|,
name|info
argument_list|)
decl_stmt|;
return|return
name|outputInfo
return|;
block|}
specifier|protected
name|void
name|populateHeaders
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|mapIds
parameter_list|,
name|String
name|jobId
parameter_list|,
name|int
name|dagId
parameter_list|,
name|String
name|user
parameter_list|,
name|int
name|reduce
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|boolean
name|keepAliveParam
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MapOutputInfo
argument_list|>
name|mapOutputInfoMap
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Reads the index file for each requested mapId, and figures out the overall
comment|// length of the response - which is populated into the response header.
name|long
name|contentLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|mapId
range|:
name|mapIds
control|)
block|{
name|MapOutputInfo
name|outputInfo
init|=
name|getMapOutputInfo
argument_list|(
name|jobId
argument_list|,
name|dagId
argument_list|,
name|mapId
argument_list|,
name|reduce
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// mapOutputInfoMap is used to share the lookups with the caller
if|if
condition|(
name|mapOutputInfoMap
operator|.
name|size
argument_list|()
operator|<
name|mapOutputMetaInfoCacheSize
condition|)
block|{
name|mapOutputInfoMap
operator|.
name|put
argument_list|(
name|mapId
argument_list|,
name|outputInfo
argument_list|)
expr_stmt|;
block|}
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|mapId
argument_list|,
name|outputInfo
operator|.
name|indexRecord
operator|.
name|getPartLength
argument_list|()
argument_list|,
name|outputInfo
operator|.
name|indexRecord
operator|.
name|getRawLength
argument_list|()
argument_list|,
name|reduce
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|contentLength
operator|+=
name|outputInfo
operator|.
name|indexRecord
operator|.
name|getPartLength
argument_list|()
expr_stmt|;
name|contentLength
operator|+=
name|dob
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|// Now set the response headers.
name|setResponseHeaders
argument_list|(
name|response
argument_list|,
name|keepAliveParam
argument_list|,
name|contentLength
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setResponseHeaders
parameter_list|(
name|HttpResponse
name|response
parameter_list|,
name|boolean
name|keepAliveParam
parameter_list|,
name|long
name|contentLength
parameter_list|)
block|{
if|if
condition|(
operator|!
name|connectionKeepAliveEnabled
operator|&&
operator|!
name|keepAliveParam
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting connection close header..."
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONNECTION
argument_list|,
name|CONNECTION_CLOSE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|contentLength
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Names
operator|.
name|CONNECTION
argument_list|,
name|HttpHeaders
operator|.
name|Values
operator|.
name|KEEP_ALIVE
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|HttpHeaders
operator|.
name|Values
operator|.
name|KEEP_ALIVE
argument_list|,
literal|"timeout="
operator|+
name|connectionKeepAliveTimeOut
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Content Length in shuffle : "
operator|+
name|contentLength
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|MapOutputInfo
block|{
specifier|final
name|Path
name|mapOutputFileName
decl_stmt|;
comment|// 100-200 byte string. Maybe replace with a local-dir-id, and construct on the fly.
specifier|final
name|TezIndexRecord
name|indexRecord
decl_stmt|;
comment|// 3 longs + reference overheads.
name|MapOutputInfo
parameter_list|(
name|Path
name|mapOutputFileName
parameter_list|,
name|TezIndexRecord
name|indexRecord
parameter_list|)
block|{
name|this
operator|.
name|mapOutputFileName
operator|=
name|mapOutputFileName
expr_stmt|;
name|this
operator|.
name|indexRecord
operator|=
name|indexRecord
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|verifyRequest
parameter_list|(
name|String
name|appid
parameter_list|,
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|URL
name|requestUri
parameter_list|)
throws|throws
name|IOException
block|{
name|SecretKey
name|tokenSecret
init|=
name|secretManager
operator|.
name|retrieveTokenSecret
argument_list|(
name|appid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|tokenSecret
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Request for unknown token "
operator|+
name|appid
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"could not find jobid"
argument_list|)
throw|;
block|}
comment|// string to encrypt
name|String
name|enc_str
init|=
name|SecureShuffleUtils
operator|.
name|buildMsgFrom
argument_list|(
name|requestUri
argument_list|)
decl_stmt|;
comment|// hash from the fetcher
name|String
name|urlHashStr
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_URL_HASH
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlHashStr
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Missing header hash for "
operator|+
name|appid
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"fetcher cannot be authenticated"
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|int
name|len
init|=
name|urlHashStr
operator|.
name|length
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"verifying request. enc_str="
operator|+
name|enc_str
operator|+
literal|"; hash=..."
operator|+
name|urlHashStr
operator|.
name|substring
argument_list|(
name|len
operator|-
name|len
operator|/
literal|2
argument_list|,
name|len
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify - throws exception
name|SecureShuffleUtils
operator|.
name|verifyReply
argument_list|(
name|urlHashStr
argument_list|,
name|enc_str
argument_list|,
name|tokenSecret
argument_list|)
expr_stmt|;
comment|// verification passed - encode the reply
name|String
name|reply
init|=
name|SecureShuffleUtils
operator|.
name|generateHash
argument_list|(
name|urlHashStr
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|tokenSecret
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|SecureShuffleUtils
operator|.
name|HTTP_HEADER_REPLY_URL_HASH
argument_list|,
name|reply
argument_list|)
expr_stmt|;
comment|// Put shuffle version into http header
name|response
operator|.
name|setHeader
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|int
name|len
init|=
name|reply
operator|.
name|length
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fetcher request verfied. enc_str="
operator|+
name|enc_str
operator|+
literal|";reply="
operator|+
name|reply
operator|.
name|substring
argument_list|(
name|len
operator|-
name|len
operator|/
literal|2
argument_list|,
name|len
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|ChannelFuture
name|sendMapOutput
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Channel
name|ch
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|mapId
parameter_list|,
name|int
name|reduce
parameter_list|,
name|MapOutputInfo
name|mapOutputInfo
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|TezIndexRecord
name|info
init|=
name|mapOutputInfo
operator|.
name|indexRecord
decl_stmt|;
specifier|final
name|ShuffleHeader
name|header
init|=
operator|new
name|ShuffleHeader
argument_list|(
name|mapId
argument_list|,
name|info
operator|.
name|getPartLength
argument_list|()
argument_list|,
name|info
operator|.
name|getRawLength
argument_list|()
argument_list|,
name|reduce
argument_list|)
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|header
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ch
operator|.
name|write
argument_list|(
name|wrappedBuffer
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|File
name|spillfile
init|=
operator|new
name|File
argument_list|(
name|mapOutputInfo
operator|.
name|mapOutputFileName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|RandomAccessFile
name|spill
decl_stmt|;
try|try
block|{
name|spill
operator|=
name|SecureIOUtils
operator|.
name|openForRandomRead
argument_list|(
name|spillfile
argument_list|,
literal|"r"
argument_list|,
name|user
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|spillfile
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ChannelFuture
name|writeFuture
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getPipeline
argument_list|()
operator|.
name|get
argument_list|(
name|SslHandler
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
specifier|final
name|FadvisedFileRegion
name|partition
init|=
operator|new
name|FadvisedFileRegion
argument_list|(
name|spill
argument_list|,
name|info
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|info
operator|.
name|getPartLength
argument_list|()
argument_list|,
name|manageOsCache
argument_list|,
name|readaheadLength
argument_list|,
name|readaheadPool
argument_list|,
name|spillfile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|shuffleBufferSize
argument_list|,
name|shuffleTransferToAllowed
argument_list|)
decl_stmt|;
name|writeFuture
operator|=
name|ch
operator|.
name|write
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|writeFuture
operator|.
name|addListener
argument_list|(
operator|new
name|ChannelFutureListener
argument_list|()
block|{
comment|// TODO error handling; distinguish IO/connection failures,
comment|//      attribute to appropriate spill output
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
block|{
if|if
condition|(
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|partition
operator|.
name|transferSuccessful
argument_list|()
expr_stmt|;
block|}
name|partition
operator|.
name|releaseExternalResources
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// HTTPS cannot be done with zero copy.
specifier|final
name|FadvisedChunkedFile
name|chunk
init|=
operator|new
name|FadvisedChunkedFile
argument_list|(
name|spill
argument_list|,
name|info
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|info
operator|.
name|getPartLength
argument_list|()
argument_list|,
name|sslFileBufferSize
argument_list|,
name|manageOsCache
argument_list|,
name|readaheadLength
argument_list|,
name|readaheadPool
argument_list|,
name|spillfile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|writeFuture
operator|=
name|ch
operator|.
name|write
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
return|return
name|writeFuture
return|;
block|}
specifier|protected
name|void
name|sendError
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpResponseStatus
name|status
parameter_list|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
literal|""
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|sendError
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|String
name|message
parameter_list|,
name|HttpResponseStatus
name|status
parameter_list|)
block|{
name|HttpResponse
name|response
init|=
operator|new
name|DefaultHttpResponse
argument_list|(
name|HTTP_1_1
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|CONTENT_TYPE
argument_list|,
literal|"text/plain; charset=UTF-8"
argument_list|)
expr_stmt|;
comment|// Put shuffle version into http header
name|response
operator|.
name|setHeader
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_NAME
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_NAME
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|ShuffleHeader
operator|.
name|HTTP_HEADER_VERSION
argument_list|,
name|ShuffleHeader
operator|.
name|DEFAULT_HTTP_HEADER_VERSION
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContent
argument_list|(
name|ChannelBuffers
operator|.
name|copiedBuffer
argument_list|(
name|message
argument_list|,
name|CharsetUtil
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
comment|// Close the connection as soon as the error message is sent.
name|ctx
operator|.
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|response
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ExceptionEvent
name|e
parameter_list|)
throws|throws
name|Exception
block|{
name|Channel
name|ch
init|=
name|e
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|TooLongFrameException
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
if|if
condition|(
name|cause
operator|instanceof
name|ClosedChannelException
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring closed channel error"
argument_list|,
name|cause
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|message
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|IGNORABLE_ERROR_MESSAGE
operator|.
name|matcher
argument_list|(
name|message
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring client socket close"
argument_list|,
name|cause
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Shuffle error: "
argument_list|,
name|cause
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Shuffle error "
operator|+
name|e
argument_list|)
expr_stmt|;
name|sendError
argument_list|(
name|ctx
argument_list|,
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|USERCACHE_CONSTANT
init|=
literal|"usercache"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|APPCACHE_CONSTANT
init|=
literal|"appcache"
decl_stmt|;
specifier|private
specifier|static
name|String
name|getBaseLocation
parameter_list|(
name|String
name|jobIdString
parameter_list|,
name|int
name|dagId
parameter_list|,
name|String
name|user
parameter_list|)
block|{
comment|// $x/$user/appcache/$appId/${dagId}/output/$mapId
comment|// TODO: Once Shuffle is out of NM, this can use MR APIs to convert
comment|// between App and Job
name|String
name|parts
index|[]
init|=
name|jobIdString
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|parts
operator|.
name|length
operator|==
literal|3
argument_list|,
literal|"Invalid jobId. Expecting 3 parts"
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationId
name|appID
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|baseStr
init|=
name|USERCACHE_CONSTANT
operator|+
literal|"/"
operator|+
name|user
operator|+
literal|"/"
operator|+
name|APPCACHE_CONSTANT
operator|+
literal|"/"
operator|+
name|ConverterUtils
operator|.
name|toString
argument_list|(
name|appID
argument_list|)
operator|+
literal|"/"
operator|+
name|dagId
operator|+
literal|"/output"
operator|+
literal|"/"
decl_stmt|;
return|return
name|baseStr
return|;
block|}
specifier|static
class|class
name|AttemptPathInfo
block|{
comment|// TODO Change this over to just store local dir indices, instead of the entire path. Far more efficient.
specifier|private
specifier|final
name|Path
name|indexPath
decl_stmt|;
specifier|private
specifier|final
name|Path
name|dataPath
decl_stmt|;
specifier|public
name|AttemptPathInfo
parameter_list|(
name|Path
name|indexPath
parameter_list|,
name|Path
name|dataPath
parameter_list|)
block|{
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
name|this
operator|.
name|dataPath
operator|=
name|dataPath
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|AttemptPathIdentifier
block|{
specifier|private
specifier|final
name|String
name|jobId
decl_stmt|;
specifier|private
specifier|final
name|int
name|dagId
decl_stmt|;
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
specifier|private
specifier|final
name|String
name|attemptId
decl_stmt|;
specifier|public
name|AttemptPathIdentifier
parameter_list|(
name|String
name|jobId
parameter_list|,
name|int
name|dagId
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|attemptId
parameter_list|)
block|{
name|this
operator|.
name|jobId
operator|=
name|jobId
expr_stmt|;
name|this
operator|.
name|dagId
operator|=
name|dagId
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|attemptId
operator|=
name|attemptId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AttemptPathIdentifier
name|that
init|=
operator|(
name|AttemptPathIdentifier
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|dagId
operator|!=
name|that
operator|.
name|dagId
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|jobId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|jobId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|attemptId
operator|.
name|equals
argument_list|(
name|that
operator|.
name|attemptId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|jobId
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|dagId
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|attemptId
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AttemptPathIdentifier{"
operator|+
literal|"jobId='"
operator|+
name|jobId
operator|+
literal|'\''
operator|+
literal|", dagId="
operator|+
name|dagId
operator|+
literal|", user='"
operator|+
name|user
operator|+
literal|'\''
operator|+
literal|", attemptId='"
operator|+
name|attemptId
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

