begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|service
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|TerminalFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|log
operator|.
name|LogHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
class|class
name|LlapServiceCommandLine
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapServiceCommandLine
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|DIRECTORY
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"directory"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Temp directory for jars etc."
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"directory"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'d'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|NAME
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"name"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Cluster name for YARN registry"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'n'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|EXECUTORS
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"executors"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"executor per instance"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"executors"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'e'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|IO_THREADS
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"iothreads"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"iothreads per instance"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"iothreads"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'t'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|CACHE
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"cache"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"cache size per instance"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"cache"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'c'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|SIZE
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"size"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"cache size per instance"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"size"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'s'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|XMX
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"xmx"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"working memory size"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"xmx"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'w'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|AUXJARS
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"auxjars"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"additional jars to package (by default, JSON SerDe jar is packaged if available)"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"auxjars"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'j'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|AUXHBASE
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"auxhbase"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"whether to package the HBase jars (true by default)"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"auxhbase"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|HIVECONF
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"hiveconf"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Use value for given property. Overridden by explicit parameters"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|JAVAHOME
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"javaHome"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Path to the JRE/JDK. This should be installed at the same location on all cluster nodes "
operator|+
literal|"($JAVA_HOME, java.home by default)"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"javaHome"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|QUEUE
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"queue"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"The queue within which LLAP will be started"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"queue"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'q'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|VALID_LOGGERS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LogHelpers
operator|.
name|LLAP_LOGGER_NAME_RFA
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|LogHelpers
operator|.
name|LLAP_LOGGER_NAME_QUERY_ROUTING
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|LogHelpers
operator|.
name|LLAP_LOGGER_NAME_CONSOLE
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|LOGGER
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"logger"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"logger for llap instance (["
operator|+
name|VALID_LOGGERS
operator|+
literal|"]"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"logger"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|START
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"startImmediately"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"immediately start the cluster"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"startImmediately"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|false
argument_list|)
operator|.
name|create
argument_list|(
literal|'z'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|OUTPUT
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"output"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Output directory for the generated scripts"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"output"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|AUXHIVE
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"auxhive"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"whether to package the Hive aux jars (true by default)"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"auxhive"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|"auxhive"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Option
name|HELP
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Print help information"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"help"
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|false
argument_list|)
operator|.
name|create
argument_list|(
literal|'H'
argument_list|)
decl_stmt|;
comment|// Options for the python script that are here because our option parser cannot ignore the unknown ones
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_INSTANCES
init|=
literal|"instances"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_ARGS
init|=
literal|"args"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_LOGLEVEL
init|=
literal|"loglevel"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_SERVICE_KEYTAB_DIR
init|=
literal|"service-keytab-dir"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_SERVICE_KEYTAB
init|=
literal|"service-keytab"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_SERVICE_PRINCIPAL
init|=
literal|"service-principal"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_SERVICE_PLACEMENT
init|=
literal|"service-placement"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_SERVICE_DEFAULT_KEYTAB
init|=
literal|"service-default-keytab"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_HEALTH_PERCENT
init|=
literal|"health-percent"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_HEALTH_TIME_WINDOW_SECS
init|=
literal|"health-time-window-secs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_HEALTH_INIT_DELAY_SECS
init|=
literal|"health-init-delay-secs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_SERVICE_AM_CONTAINER_MB
init|=
literal|"service-am-container-mb"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPTION_SERVICE_APPCONFIG_GLOBAL
init|=
literal|"service-appconfig-global"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Options
name|OPTIONS
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
static|static
block|{
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|DIRECTORY
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|EXECUTORS
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|IO_THREADS
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|CACHE
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|SIZE
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|XMX
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|AUXJARS
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|AUXHBASE
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|HIVECONF
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|JAVAHOME
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|QUEUE
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|LOGGER
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|START
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OUTPUT
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|AUXHIVE
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|HELP
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_INSTANCES
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Specify the number of instances to run this on"
argument_list|)
operator|.
name|withArgName
argument_list|(
name|OPTION_INSTANCES
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'i'
argument_list|)
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_ARGS
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"java arguments to the llap instance"
argument_list|)
operator|.
name|withArgName
argument_list|(
name|OPTION_ARGS
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_LOGLEVEL
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"log levels for the llap instance"
argument_list|)
operator|.
name|withArgName
argument_list|(
name|OPTION_LOGLEVEL
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'l'
argument_list|)
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_SERVICE_KEYTAB_DIR
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Service AM keytab directory on HDFS (where the headless user keytab is stored by Service "
operator|+
literal|"keytab installation, e.g. .yarn/keytabs/llap)"
argument_list|)
operator|.
name|withArgName
argument_list|(
name|OPTION_SERVICE_KEYTAB_DIR
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_SERVICE_KEYTAB
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Service AM keytab file name inside "
operator|+
name|OPTION_SERVICE_KEYTAB_DIR
argument_list|)
operator|.
name|withArgName
argument_list|(
name|OPTION_SERVICE_KEYTAB
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_SERVICE_PRINCIPAL
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Service AM principal; should be the user running the cluster, e.g. hive@EXAMPLE.COM"
argument_list|)
operator|.
name|withArgName
argument_list|(
name|OPTION_SERVICE_PRINCIPAL
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_SERVICE_PLACEMENT
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Service placement policy; see YARN documentation at "
operator|+
literal|"https://issues.apache.org/jira/browse/YARN-1042. This is unnecessary if LLAP is going to take more than "
operator|+
literal|"half of the YARN capacity of a node."
argument_list|)
operator|.
name|withArgName
argument_list|(
name|OPTION_SERVICE_PLACEMENT
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_SERVICE_DEFAULT_KEYTAB
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"try to set default settings for Service AM keytab; mostly for dev testing"
argument_list|)
operator|.
name|withArgName
argument_list|(
name|OPTION_SERVICE_DEFAULT_KEYTAB
argument_list|)
operator|.
name|hasArg
argument_list|(
literal|false
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_HEALTH_PERCENT
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Percentage of running containers after which LLAP application is considered healthy"
operator|+
literal|" (Default: 80)"
argument_list|)
operator|.
name|withArgName
argument_list|(
name|OPTION_HEALTH_PERCENT
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_HEALTH_TIME_WINDOW_SECS
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Time window in seconds (after initial delay) for which LLAP application is allowed to be "
operator|+
literal|"in unhealthy state before being killed (Default: 300)"
argument_list|)
operator|.
name|withArgName
argument_list|(
name|OPTION_HEALTH_TIME_WINDOW_SECS
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_HEALTH_INIT_DELAY_SECS
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Delay in seconds after which health percentage is monitored (Default: 400)"
argument_list|)
operator|.
name|withArgName
argument_list|(
name|OPTION_HEALTH_INIT_DELAY_SECS
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_SERVICE_AM_CONTAINER_MB
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"The size of the service AppMaster container in MB"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"b"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'b'
argument_list|)
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
name|OPTION_SERVICE_APPCONFIG_GLOBAL
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Property (key=value) to be set in the global section of the Service appConfig"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
index|[]
name|args
decl_stmt|;
specifier|private
name|String
name|directory
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|int
name|executors
decl_stmt|;
specifier|private
name|int
name|ioThreads
decl_stmt|;
specifier|private
name|long
name|cache
decl_stmt|;
specifier|private
name|long
name|size
decl_stmt|;
specifier|private
name|long
name|xmx
decl_stmt|;
specifier|private
name|String
name|jars
decl_stmt|;
specifier|private
name|boolean
name|isHbase
decl_stmt|;
specifier|private
name|Properties
name|conf
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|private
name|String
name|javaPath
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|llapQueueName
decl_stmt|;
specifier|private
name|String
name|logger
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|isStarting
decl_stmt|;
specifier|private
name|String
name|output
decl_stmt|;
specifier|private
name|boolean
name|isHiveAux
decl_stmt|;
specifier|private
name|boolean
name|isHelp
decl_stmt|;
specifier|static
name|LlapServiceCommandLine
name|parseArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|LlapServiceCommandLine
name|cl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cl
operator|=
operator|new
name|LlapServiceCommandLine
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Parsing the command line arguments failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|isHelp
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|cl
return|;
block|}
name|LlapServiceCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LLAP invoked with arguments = {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|parseCommandLine
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|CommandLine
name|cl
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|OPTIONS
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
name|HELP
operator|.
name|getOpt
argument_list|()
argument_list|)
condition|)
block|{
name|isHelp
operator|=
literal|true
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
name|OPTION_INSTANCES
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"instance must be set"
argument_list|)
throw|;
block|}
name|int
name|instances
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|OPTION_INSTANCES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|instances
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Invalid configuration: "
operator|+
name|instances
operator|+
literal|" (should be greater than 0)"
argument_list|)
throw|;
block|}
name|directory
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|DIRECTORY
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|NAME
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|executors
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|EXECUTORS
operator|.
name|getOpt
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|ioThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|IO_THREADS
operator|.
name|getOpt
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|executors
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|=
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|CACHE
operator|.
name|getOpt
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|=
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|SIZE
operator|.
name|getOpt
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|xmx
operator|=
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|XMX
operator|.
name|getOpt
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|jars
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|AUXJARS
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|isHbase
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|AUXHBASE
operator|.
name|getOpt
argument_list|()
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
name|HIVECONF
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|conf
operator|=
name|cl
operator|.
name|getOptionProperties
argument_list|(
name|HIVECONF
operator|.
name|getLongOpt
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
name|JAVAHOME
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|javaPath
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|JAVAHOME
operator|.
name|getLongOpt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|llapQueueName
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|QUEUE
operator|.
name|getOpt
argument_list|()
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_QUEUE_NAME
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
name|LOGGER
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|LOGGER
operator|.
name|getLongOpt
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|VALID_LOGGERS
operator|.
name|contains
argument_list|(
name|logger
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|isStarting
operator|=
name|cl
operator|.
name|hasOption
argument_list|(
name|START
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|OUTPUT
operator|.
name|getLongOpt
argument_list|()
argument_list|)
expr_stmt|;
name|isHiveAux
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|AUXHIVE
operator|.
name|getOpt
argument_list|()
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|HelpFormatter
name|hf
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|width
init|=
name|hf
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|jlineWidth
init|=
name|TerminalFactory
operator|.
name|get
argument_list|()
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|width
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|160
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|jlineWidth
argument_list|,
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|hf
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
name|hf
operator|.
name|printHelp
argument_list|(
literal|"llap"
argument_list|,
name|OPTIONS
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
name|String
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
name|int
name|getExecutors
parameter_list|()
block|{
return|return
name|executors
return|;
block|}
name|int
name|getIoThreads
parameter_list|()
block|{
return|return
name|ioThreads
return|;
block|}
name|long
name|getCache
parameter_list|()
block|{
return|return
name|cache
return|;
block|}
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
name|long
name|getXmx
parameter_list|()
block|{
return|return
name|xmx
return|;
block|}
name|String
name|getAuxJars
parameter_list|()
block|{
return|return
name|jars
return|;
block|}
name|boolean
name|getIsHBase
parameter_list|()
block|{
return|return
name|isHbase
return|;
block|}
name|boolean
name|getIsHiveAux
parameter_list|()
block|{
return|return
name|isHiveAux
return|;
block|}
name|Properties
name|getConfig
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
name|String
name|getJavaPath
parameter_list|()
block|{
return|return
name|javaPath
return|;
block|}
name|String
name|getLlapQueueName
parameter_list|()
block|{
return|return
name|llapQueueName
return|;
block|}
name|String
name|getLogger
parameter_list|()
block|{
return|return
name|logger
return|;
block|}
name|boolean
name|isStarting
parameter_list|()
block|{
return|return
name|isStarting
return|;
block|}
name|String
name|getOutput
parameter_list|()
block|{
return|return
name|output
return|;
block|}
block|}
end_class

end_unit

