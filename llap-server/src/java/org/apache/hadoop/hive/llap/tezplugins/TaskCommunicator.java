begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|LlapDaemonProtocolBlockingPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|LlapDaemonProtocolClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_class
specifier|public
class|class
name|TaskCommunicator
extends|extends
name|AbstractService
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TaskCommunicator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|LlapDaemonProtocolBlockingPB
argument_list|>
name|hostProxies
decl_stmt|;
specifier|private
name|ListeningExecutorService
name|executor
decl_stmt|;
specifier|public
name|TaskCommunicator
parameter_list|(
name|int
name|numThreads
parameter_list|)
block|{
name|super
argument_list|(
name|TaskCommunicator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|ExecutorService
name|localExecutor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"TaskCommunicator #%2d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|hostProxies
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|executor
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|localExecutor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStop
parameter_list|()
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|submitWork
parameter_list|(
name|SubmitWorkRequestProto
name|request
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|SubmitWorkResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|ListenableFuture
argument_list|<
name|SubmitWorkResponseProto
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|SubmitWorkCallable
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|future
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|SubmitWorkResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SubmitWorkResponseProto
name|result
parameter_list|)
block|{
name|callback
operator|.
name|setResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|callback
operator|.
name|indicateError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendSourceStateUpdate
parameter_list|(
specifier|final
name|SourceStateUpdatedRequestProto
name|request
parameter_list|,
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|SourceStateUpdatedResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|ListenableFuture
argument_list|<
name|SourceStateUpdatedResponseProto
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|SendSourceStateUpdateCallable
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|future
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|SourceStateUpdatedResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SourceStateUpdatedResponseProto
name|result
parameter_list|)
block|{
name|callback
operator|.
name|setResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|callback
operator|.
name|indicateError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendQueryComplete
parameter_list|(
specifier|final
name|QueryCompleteRequestProto
name|request
parameter_list|,
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|ExecuteRequestCallback
argument_list|<
name|QueryCompleteResponseProto
argument_list|>
name|callback
parameter_list|)
block|{
name|ListenableFuture
argument_list|<
name|QueryCompleteResponseProto
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|SendQueryCompleteCallable
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|request
argument_list|)
argument_list|)
decl_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|future
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|QueryCompleteResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|QueryCompleteResponseProto
name|result
parameter_list|)
block|{
name|callback
operator|.
name|setResponse
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|callback
operator|.
name|indicateError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|CallableRequest
parameter_list|<
name|REQUEST
extends|extends
name|Message
parameter_list|,
name|RESPONSE
extends|extends
name|Message
parameter_list|>
implements|implements
name|Callable
block|{
specifier|final
name|String
name|hostname
decl_stmt|;
specifier|final
name|int
name|port
decl_stmt|;
specifier|final
name|REQUEST
name|request
decl_stmt|;
specifier|protected
name|CallableRequest
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|REQUEST
name|request
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|RESPONSE
name|call
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
class|class
name|SubmitWorkCallable
extends|extends
name|CallableRequest
argument_list|<
name|SubmitWorkRequestProto
argument_list|,
name|SubmitWorkResponseProto
argument_list|>
block|{
specifier|protected
name|SubmitWorkCallable
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|SubmitWorkRequestProto
name|submitWorkRequestProto
parameter_list|)
block|{
name|super
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|,
name|submitWorkRequestProto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SubmitWorkResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
operator|.
name|submitWork
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|SendSourceStateUpdateCallable
extends|extends
name|CallableRequest
argument_list|<
name|SourceStateUpdatedRequestProto
argument_list|,
name|SourceStateUpdatedResponseProto
argument_list|>
block|{
specifier|public
name|SendSourceStateUpdateCallable
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|SourceStateUpdatedRequestProto
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SourceStateUpdatedResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
operator|.
name|sourceStateUpdated
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|SendQueryCompleteCallable
extends|extends
name|CallableRequest
argument_list|<
name|QueryCompleteRequestProto
argument_list|,
name|QueryCompleteResponseProto
argument_list|>
block|{
specifier|protected
name|SendQueryCompleteCallable
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|QueryCompleteRequestProto
name|queryCompleteRequestProto
parameter_list|)
block|{
name|super
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|,
name|queryCompleteRequestProto
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QueryCompleteResponseProto
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxy
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
operator|.
name|queryComplete
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|public
interface|interface
name|ExecuteRequestCallback
parameter_list|<
name|T
extends|extends
name|Message
parameter_list|>
block|{
name|void
name|setResponse
parameter_list|(
name|T
name|response
parameter_list|)
function_decl|;
name|void
name|indicateError
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
specifier|private
name|LlapDaemonProtocolBlockingPB
name|getProxy
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|String
name|hostId
init|=
name|getHostIdentifier
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|LlapDaemonProtocolBlockingPB
name|proxy
init|=
name|hostProxies
operator|.
name|get
argument_list|(
name|hostId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
name|proxy
operator|=
operator|new
name|LlapDaemonProtocolClientImpl
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|LlapDaemonProtocolBlockingPB
name|proxyOld
init|=
name|hostProxies
operator|.
name|putIfAbsent
argument_list|(
name|hostId
argument_list|,
name|proxy
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyOld
operator|!=
literal|null
condition|)
block|{
comment|// TODO Shutdown the new proxy.
name|proxy
operator|=
name|proxyOld
expr_stmt|;
block|}
block|}
return|return
name|proxy
return|;
block|}
specifier|private
name|String
name|getHostIdentifier
parameter_list|(
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
name|hostname
operator|+
literal|":"
operator|+
name|port
return|;
block|}
block|}
end_class

end_unit

