begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|LlapDaemonConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TaskAttemptEndReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TaskCommunicatorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|TezTaskCommunicatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezTaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TaskSpec
import|;
end_import

begin_class
specifier|public
class|class
name|LlapTaskCommunicator
extends|extends
name|TezTaskCommunicatorImpl
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LlapTaskCommunicator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SubmitWorkRequestProto
name|BASE_SUBMIT_WORK_REQUEST
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|credentialMap
decl_stmt|;
specifier|private
name|TaskCommunicator
name|communicator
decl_stmt|;
specifier|public
name|LlapTaskCommunicator
parameter_list|(
name|TaskCommunicatorContext
name|taskCommunicatorContext
parameter_list|)
block|{
name|super
argument_list|(
name|taskCommunicatorContext
argument_list|)
expr_stmt|;
name|SubmitWorkRequestProto
operator|.
name|Builder
name|baseBuilder
init|=
name|SubmitWorkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// TODO Avoid reading this from the environment
name|baseBuilder
operator|.
name|setUser
argument_list|(
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|USER
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|baseBuilder
operator|.
name|setApplicationIdString
argument_list|(
name|taskCommunicatorContext
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|baseBuilder
operator|.
name|setAppAttemptNumber
argument_list|(
name|taskCommunicatorContext
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|baseBuilder
operator|.
name|setTokenIdentifier
argument_list|(
name|getTokenIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|BASE_SUBMIT_WORK_REQUEST
operator|=
name|baseBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
name|credentialMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|numThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_COMMUNICATOR_NUM_THREADS
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_COMMUNICATOR_NUM_THREADS_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|communicator
operator|=
operator|new
name|TaskCommunicator
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
name|this
operator|.
name|communicator
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStart
parameter_list|()
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|this
operator|.
name|communicator
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStop
parameter_list|()
block|{
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|communicator
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|communicator
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerRunningContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|super
operator|.
name|registerRunningContainer
argument_list|(
name|containerId
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerContainerEnd
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|super
operator|.
name|registerContainerEnd
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerRunningTaskAttempt
parameter_list|(
specifier|final
name|ContainerId
name|containerId
parameter_list|,
specifier|final
name|TaskSpec
name|taskSpec
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|additionalResources
parameter_list|,
name|Credentials
name|credentials
parameter_list|,
name|boolean
name|credentialsChanged
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|super
operator|.
name|registerRunningTaskAttempt
argument_list|(
name|containerId
argument_list|,
name|taskSpec
argument_list|,
name|additionalResources
argument_list|,
name|credentials
argument_list|,
name|credentialsChanged
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|SubmitWorkRequestProto
name|requestProto
decl_stmt|;
try|try
block|{
name|requestProto
operator|=
name|constructSubmitWorkRequest
argument_list|(
name|containerId
argument_list|,
name|taskSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to construct request"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|ContainerInfo
name|containerInfo
init|=
name|getContainerInfo
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|String
name|host
decl_stmt|;
name|int
name|port
decl_stmt|;
if|if
condition|(
name|containerInfo
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|containerInfo
init|)
block|{
name|host
operator|=
name|containerInfo
operator|.
name|host
expr_stmt|;
name|port
operator|=
name|containerInfo
operator|.
name|port
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TODO Handle this properly
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ContainerInfo not found for container: "
operator|+
name|containerId
operator|+
literal|", while trying to launch task: "
operator|+
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
throw|;
block|}
comment|// Have to register this up front right now. Otherwise, it's possible for the task to start
comment|// sending out status/DONE/KILLED/FAILED messages before TAImpl knows how to handle them.
name|getTaskCommunicatorContext
argument_list|()
operator|.
name|taskStartedRemotely
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|communicator
operator|.
name|submitWork
argument_list|(
name|requestProto
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
operator|new
name|TaskCommunicator
operator|.
name|ExecuteRequestCallback
argument_list|<
name|SubmitWorkResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setResponse
parameter_list|(
name|SubmitWorkResponseProto
name|response
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully launched task: "
operator|+
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|indicateError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to run task: "
operator|+
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|+
literal|" on containerId: "
operator|+
name|containerId
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|ServiceException
condition|)
block|{
name|ServiceException
name|se
init|=
operator|(
name|ServiceException
operator|)
name|t
decl_stmt|;
name|t
operator|=
name|se
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|RemoteException
condition|)
block|{
name|RemoteException
name|re
init|=
operator|(
name|RemoteException
operator|)
name|t
decl_stmt|;
name|String
name|message
init|=
name|re
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// RejectedExecutions from the remote service treated as KILLED
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
name|RejectedExecutionException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|getTaskCommunicatorContext
argument_list|()
operator|.
name|taskKilled
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptEndReason
operator|.
name|SERVICE_BUSY
argument_list|,
literal|"Service Busy"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// All others from the remote service cause the task to FAIL.
name|getTaskCommunicatorContext
argument_list|()
operator|.
name|taskFailed
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptEndReason
operator|.
name|OTHER
argument_list|,
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Exception from the RPC layer - communication failure, consider as KILLED / service down.
if|if
condition|(
name|t
operator|instanceof
name|IOException
condition|)
block|{
name|getTaskCommunicatorContext
argument_list|()
operator|.
name|taskKilled
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptEndReason
operator|.
name|COMMUNICATION_ERROR
argument_list|,
literal|"Communication Error"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Anything else is a FAIL.
name|getTaskCommunicatorContext
argument_list|()
operator|.
name|taskFailed
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptEndReason
operator|.
name|OTHER
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterRunningTaskAttempt
parameter_list|(
name|TezTaskAttemptID
name|taskAttemptID
parameter_list|)
block|{
name|super
operator|.
name|unregisterRunningTaskAttempt
argument_list|(
name|taskAttemptID
argument_list|)
expr_stmt|;
comment|// Nothing else to do for now. The push API in the test does not support termination of a running task
block|}
specifier|private
name|SubmitWorkRequestProto
name|constructSubmitWorkRequest
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|TaskSpec
name|taskSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|SubmitWorkRequestProto
operator|.
name|Builder
name|builder
init|=
name|SubmitWorkRequestProto
operator|.
name|newBuilder
argument_list|(
name|BASE_SUBMIT_WORK_REQUEST
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setContainerIdString
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAmHost
argument_list|(
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAmPort
argument_list|(
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|taskCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// Credentials can change across DAGs. Ideally construct only once per DAG.
name|taskCredentials
operator|.
name|addAll
argument_list|(
name|getTaskCommunicatorContext
argument_list|()
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|credentialsBinary
init|=
name|credentialMap
operator|.
name|get
argument_list|(
name|taskSpec
operator|.
name|getDAGName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|credentialsBinary
operator|==
literal|null
condition|)
block|{
name|credentialsBinary
operator|=
name|serializeCredentials
argument_list|(
name|getTaskCommunicatorContext
argument_list|()
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|credentialMap
operator|.
name|putIfAbsent
argument_list|(
name|taskSpec
operator|.
name|getDAGName
argument_list|()
argument_list|,
name|credentialsBinary
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|credentialsBinary
operator|=
name|credentialsBinary
operator|.
name|duplicate
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|setCredentialsBinary
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|credentialsBinary
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFragmentSpec
argument_list|(
name|Converters
operator|.
name|convertTaskSpecToProto
argument_list|(
name|taskSpec
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|ByteBuffer
name|serializeCredentials
parameter_list|(
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
block|{
name|Credentials
name|containerCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|containerCredentials
operator|.
name|addAll
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|containerTokens_dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|containerCredentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|containerTokens_dob
argument_list|)
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|containerTokens_dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|containerTokens_dob
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

