begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|configuration
operator|.
name|LlapDaemonConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|LlapConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|StaticPermanentFunctionChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|LlapTezUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapReduceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|CompressionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|LlapOptionsProcessor
operator|.
name|LlapOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|ResourceDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslSocketConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_class
specifier|public
class|class
name|LlapServiceDriver
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapServiceDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_AUX_CLASSES
init|=
operator|new
name|String
index|[]
block|{
literal|"org.apache.hive.hcatalog.data.JsonSerDe"
block|,
literal|"org.apache.hadoop.hive.druid.DruidStorageHandler"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HBASE_SERDE_CLASS
init|=
literal|"org.apache.hadoop.hive.hbase.HBaseSerDe"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NEEDED_CONFIGS
init|=
name|LlapDaemonConfiguration
operator|.
name|DAEMON_CONFIGS
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|OPTIONAL_CONFIGS
init|=
name|LlapDaemonConfiguration
operator|.
name|SSL_DAEMON_CONFIGS
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT_DIR_PREFIX
init|=
literal|"llap-slider-"
decl_stmt|;
comment|// This is not a config that users set in hive-site. It's only use is to share information
comment|// between the java component of the service driver and the python component.
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_CLUSTER_NAME
init|=
literal|"private.hive.llap.servicedriver.cluster.name"
decl_stmt|;
comment|/**    * This is a working configuration for the instance to merge various variables.    * It is not written out for llap server usage    */
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|public
name|LlapServiceDriver
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|(
name|ss
operator|!=
literal|null
operator|)
condition|?
name|ss
operator|.
name|getConf
argument_list|()
else|:
operator|new
name|HiveConf
argument_list|(
name|SessionState
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LLAP service driver invoked with arguments={}"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
try|try
block|{
name|ret
operator|=
operator|new
name|LlapServiceDriver
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|ret
operator|=
literal|3
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LLAP service driver finished"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Completed processing - exiting with "
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Configuration
name|resolve
parameter_list|(
name|Configuration
name|configured
parameter_list|,
name|Properties
name|direct
parameter_list|,
name|Properties
name|hiveconf
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|populateConf
argument_list|(
name|configured
argument_list|,
name|conf
argument_list|,
name|hiveconf
argument_list|,
literal|"CLI hiveconf"
argument_list|)
expr_stmt|;
name|populateConf
argument_list|(
name|configured
argument_list|,
name|conf
argument_list|,
name|direct
argument_list|,
literal|"CLI direct"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
specifier|private
specifier|static
name|void
name|populateConf
parameter_list|(
name|Configuration
name|configured
parameter_list|,
name|Configuration
name|target
parameter_list|,
name|Properties
name|properties
parameter_list|,
name|String
name|source
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|configured
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|target
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|val
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|populateConfWithLlapProperties
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|props
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getLlapDaemonConfVars
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|props
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|HiveConf
operator|.
name|PREFIX_LLAP
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
name|HiveConf
operator|.
name|PREFIX_HIVE_LLAP
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Adding key [{}] even though it is not in the set of known llap-server keys"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|props
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring unknown llap server parameter: [{}]"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|NamedCallable
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Callable
argument_list|<
name|T
argument_list|>
block|{
specifier|public
specifier|final
name|String
name|taskName
decl_stmt|;
specifier|public
name|NamedCallable
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|taskName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|taskName
return|;
block|}
block|}
specifier|private
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|LlapOptionsProcessor
name|optionsProcessor
init|=
operator|new
name|LlapOptionsProcessor
argument_list|()
decl_stmt|;
specifier|final
name|LlapOptions
name|options
init|=
name|optionsProcessor
operator|.
name|processOptions
argument_list|(
name|args
argument_list|)
decl_stmt|;
specifier|final
name|Properties
name|propsDirectOptions
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|==
literal|null
condition|)
block|{
comment|// help
return|return
literal|1
return|;
block|}
comment|// Working directory.
name|Path
name|tmpDir
init|=
operator|new
name|Path
argument_list|(
name|options
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Cannot load any configuration to run command"
argument_list|)
throw|;
block|}
specifier|final
name|long
name|t0
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|int
name|threadCount
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadCount
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"llap-pkg-%d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CompletionService
argument_list|<
name|Void
argument_list|>
name|asyncRunner
init|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|Void
argument_list|>
argument_list|(
name|executor
argument_list|)
decl_stmt|;
name|int
name|rc
init|=
literal|0
decl_stmt|;
try|try
block|{
comment|// needed so that the file is actually loaded into configuration.
for|for
control|(
name|String
name|f
range|:
name|NEEDED_CONFIGS
control|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getResource
argument_list|(
name|f
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to find required config file: "
operator|+
name|f
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|String
name|f
range|:
name|OPTIONAL_CONFIGS
control|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|reloadConfiguration
argument_list|()
expr_stmt|;
name|populateConfWithLlapProperties
argument_list|(
name|conf
argument_list|,
name|options
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// update service registry configs - caveat: this has nothing to do with the actual settings
comment|// as read by the AM
comment|// if needed, use --hiveconf llap.daemon.service.hosts=@llap0 to dynamically switch between
comment|// instances
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
operator|.
name|varname
argument_list|,
literal|"@"
operator|+
name|options
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|propsDirectOptions
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
operator|.
name|varname
argument_list|,
literal|"@"
operator|+
name|options
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getLogger
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_LOGGER
argument_list|,
name|options
operator|.
name|getLogger
argument_list|()
argument_list|)
expr_stmt|;
name|propsDirectOptions
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_LOGGER
operator|.
name|varname
argument_list|,
name|options
operator|.
name|getLogger
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isDirect
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_DIRECT
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|getSize
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|getCache
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MAPPED
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// direct heap allocations need to be safer
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|options
operator|.
name|getCache
argument_list|()
operator|<
name|options
operator|.
name|getSize
argument_list|()
argument_list|,
literal|"Cache size ("
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|options
operator|.
name|getCache
argument_list|()
argument_list|)
operator|+
literal|") has to be smaller"
operator|+
literal|" than the container sizing ("
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|options
operator|.
name|getSize
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|getCache
argument_list|()
operator|<
name|options
operator|.
name|getSize
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Note that this might need YARN physical memory monitoring to be turned off "
operator|+
literal|"(yarn.nodemanager.pmem-check-enabled=false)"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|getXmx
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|options
operator|.
name|getXmx
argument_list|()
operator|<
name|options
operator|.
name|getSize
argument_list|()
argument_list|,
literal|"Working memory (Xmx="
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|options
operator|.
name|getXmx
argument_list|()
argument_list|)
operator|+
literal|") has to be"
operator|+
literal|" smaller than the container sizing ("
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|options
operator|.
name|getSize
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isDirect
operator|&&
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MAPPED
argument_list|)
condition|)
block|{
comment|// direct and not memory mapped
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|options
operator|.
name|getXmx
argument_list|()
operator|+
name|options
operator|.
name|getCache
argument_list|()
operator|<=
name|options
operator|.
name|getSize
argument_list|()
argument_list|,
literal|"Working memory (Xmx="
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|options
operator|.
name|getXmx
argument_list|()
argument_list|)
operator|+
literal|") + cache size ("
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|options
operator|.
name|getCache
argument_list|()
argument_list|)
operator|+
literal|") has to be smaller than the container sizing ("
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|options
operator|.
name|getSize
argument_list|()
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|getExecutors
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
operator|.
name|varname
argument_list|,
name|options
operator|.
name|getExecutors
argument_list|()
argument_list|)
expr_stmt|;
name|propsDirectOptions
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
operator|.
name|varname
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|options
operator|.
name|getExecutors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: vcpu settings - possibly when DRFA works right
block|}
if|if
condition|(
name|options
operator|.
name|getIoThreads
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|ConfVars
operator|.
name|LLAP_IO_THREADPOOL_SIZE
operator|.
name|varname
argument_list|,
name|options
operator|.
name|getIoThreads
argument_list|()
argument_list|)
expr_stmt|;
name|propsDirectOptions
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|LLAP_IO_THREADPOOL_SIZE
operator|.
name|varname
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|options
operator|.
name|getIoThreads
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|cache
init|=
operator|-
literal|1
decl_stmt|,
name|xmx
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|getCache
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|cache
operator|=
name|options
operator|.
name|getCache
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_IO_MEMORY_MAX_SIZE
operator|.
name|varname
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
name|propsDirectOptions
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_IO_MEMORY_MAX_SIZE
operator|.
name|varname
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|cache
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|getXmx
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Needs more explanation here
comment|// Xmx is not the max heap value in JDK8. You need to subtract 50% of the survivor fraction
comment|// from this, to get actual usable memory before it goes into GC
name|xmx
operator|=
name|options
operator|.
name|getXmx
argument_list|()
expr_stmt|;
name|long
name|xmxMb
init|=
operator|(
name|xmx
operator|/
operator|(
literal|1024L
operator|*
literal|1024L
operator|)
operator|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB
operator|.
name|varname
argument_list|,
name|xmxMb
argument_list|)
expr_stmt|;
name|propsDirectOptions
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB
operator|.
name|varname
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|xmxMb
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|size
init|=
name|options
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
block|{
name|long
name|heapSize
init|=
name|xmx
decl_stmt|;
if|if
condition|(
operator|!
name|isDirect
condition|)
block|{
name|heapSize
operator|+=
name|cache
expr_stmt|;
block|}
name|size
operator|=
name|Math
operator|.
name|min
argument_list|(
call|(
name|long
call|)
argument_list|(
name|heapSize
operator|*
literal|1.2
argument_list|)
argument_list|,
name|heapSize
operator|+
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDirect
condition|)
block|{
name|size
operator|+=
name|cache
expr_stmt|;
block|}
block|}
name|long
name|containerSize
init|=
name|size
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
decl_stmt|;
specifier|final
name|long
name|minAlloc
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|containerSize
operator|>=
name|minAlloc
argument_list|,
literal|"Container size ("
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|options
operator|.
name|getSize
argument_list|()
argument_list|)
operator|+
literal|") should be greater"
operator|+
literal|" than minimum allocation("
operator|+
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|minAlloc
operator|*
literal|1024L
operator|*
literal|1024L
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_YARN_CONTAINER_MB
operator|.
name|varname
argument_list|,
name|containerSize
argument_list|)
expr_stmt|;
name|propsDirectOptions
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_YARN_CONTAINER_MB
operator|.
name|varname
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|containerSize
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Memory settings: container memory: {} executor memory: {} cache memory: {}"
argument_list|,
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|options
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|,
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|options
operator|.
name|getXmx
argument_list|()
argument_list|)
argument_list|,
name|LlapUtil
operator|.
name|humanReadableByteCount
argument_list|(
name|options
operator|.
name|getCache
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|getLlapQueueName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|options
operator|.
name|getLlapQueueName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_QUEUE_NAME
operator|.
name|varname
argument_list|,
name|options
operator|.
name|getLlapQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|propsDirectOptions
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_QUEUE_NAME
operator|.
name|varname
argument_list|,
name|options
operator|.
name|getLlapQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|URL
name|logger
init|=
name|conf
operator|.
name|getResource
argument_list|(
name|LlapConstants
operator|.
name|LOG4j2_PROPERTIES_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|logger
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to find required config file: llap-daemon-log4j2.properties"
argument_list|)
throw|;
block|}
name|Path
name|home
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_HOME"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|scriptParent
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|home
argument_list|,
literal|"scripts"
argument_list|)
argument_list|,
literal|"llap"
argument_list|)
decl_stmt|;
name|Path
name|scripts
init|=
operator|new
name|Path
argument_list|(
name|scriptParent
argument_list|,
literal|"bin"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lfs
operator|.
name|exists
argument_list|(
name|home
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to find HIVE_HOME:"
operator|+
name|home
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lfs
operator|.
name|exists
argument_list|(
name|scripts
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to find llap scripts:"
operator|+
name|scripts
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|libDir
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
literal|"lib"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|tezDir
init|=
operator|new
name|Path
argument_list|(
name|libDir
argument_list|,
literal|"tez"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|udfDir
init|=
operator|new
name|Path
argument_list|(
name|libDir
argument_list|,
literal|"udfs"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|confPath
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|mkdirs
argument_list|(
name|confPath
argument_list|)
expr_stmt|;
name|NamedCallable
argument_list|<
name|Void
argument_list|>
name|downloadTez
init|=
operator|new
name|NamedCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|"downloadTez"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|fs
init|)
block|{
name|String
name|tezLibs
init|=
name|conf
operator|.
name|get
argument_list|(
name|TezConfiguration
operator|.
name|TEZ_LIB_URIS
argument_list|)
decl_stmt|;
if|if
condition|(
name|tezLibs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing tez.lib.uris in tez-site.xml"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copying tez libs from "
operator|+
name|tezLibs
argument_list|)
expr_stmt|;
block|}
name|lfs
operator|.
name|mkdirs
argument_list|(
name|tezDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyToLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|tezLibs
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|libDir
argument_list|,
literal|"tez.tar.gz"
argument_list|)
argument_list|)
expr_stmt|;
name|CompressionUtils
operator|.
name|unTar
argument_list|(
operator|new
name|Path
argument_list|(
name|libDir
argument_list|,
literal|"tez.tar.gz"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|tezDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|libDir
argument_list|,
literal|"tez.tar.gz"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|NamedCallable
argument_list|<
name|Void
argument_list|>
name|copyLocalJars
init|=
operator|new
name|NamedCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|"copyLocalJars"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|dependencies
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|LlapDaemonProtocolProtos
operator|.
name|class
operator|,
comment|// llap-common
name|LlapTezUtils
operator|.
name|class
operator|,
comment|// llap-tez
name|LlapInputFormat
operator|.
name|class
operator|,
comment|// llap-server
name|HiveInputFormat
operator|.
name|class
operator|,
comment|// hive-exec
name|SslSocketConnector
operator|.
name|class
operator|,
comment|// hive-common (https deps)
name|RegistryUtils
operator|.
name|ServiceRecordMarshal
operator|.
name|class
operator|,
comment|// ZK registry
comment|// log4j2
name|com
operator|.
name|lmax
operator|.
name|disruptor
operator|.
name|RingBuffer
operator|.
name|class
operator|,
comment|// disruptor
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|class
operator|,
comment|// log4j-api
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Appender
operator|.
name|class
operator|,
comment|// log4j-core
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|slf4j
operator|.
name|Log4jLogger
operator|.
name|class
operator|,
comment|// log4j-slf4j
comment|// log4j-1.2-API needed for NDC
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|NDC
operator|.
name|class
operator|,
block|}
empty_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|dependencies
control|)
block|{
name|Path
name|jarPath
init|=
operator|new
name|Path
argument_list|(
name|Utilities
operator|.
name|jarFinderGetJar
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|copyFromLocalFile
argument_list|(
name|jarPath
argument_list|,
name|libDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copying "
operator|+
name|jarPath
operator|+
literal|" to "
operator|+
name|libDir
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// copy default aux classes (json/hbase)
name|NamedCallable
argument_list|<
name|Void
argument_list|>
name|copyAuxJars
init|=
operator|new
name|NamedCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|"copyAuxJars"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|className
range|:
name|DEFAULT_AUX_CLASSES
control|)
block|{
name|localizeJarForClass
argument_list|(
name|lfs
argument_list|,
name|libDir
argument_list|,
name|className
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|codecs
init|=
name|conf
operator|.
name|getStringCollection
argument_list|(
literal|"io.compression.codecs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|codecs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|codecClassName
range|:
name|codecs
control|)
block|{
name|localizeJarForClass
argument_list|(
name|lfs
argument_list|,
name|libDir
argument_list|,
name|codecClassName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|getIsHBase
argument_list|()
condition|)
block|{
try|try
block|{
name|localizeJarForClass
argument_list|(
name|lfs
argument_list|,
name|libDir
argument_list|,
name|HBASE_SERDE_CLASS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Job
name|fakeJob
init|=
operator|new
name|Job
argument_list|(
operator|new
name|JobConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// HBase API is convoluted.
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|fakeJob
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|hbaseJars
init|=
name|fakeJob
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getStringCollection
argument_list|(
literal|"tmpjars"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|jarPath
range|:
name|hbaseJars
control|)
block|{
if|if
condition|(
operator|!
name|jarPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lfs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|jarPath
argument_list|)
argument_list|,
name|libDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|String
name|err
init|=
literal|"Failed to add HBase jars. Use --auxhbase=false to avoid localizing them"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|err
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
name|HashSet
argument_list|<
name|String
argument_list|>
name|auxJars
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// There are many ways to have AUX jars in Hive... sigh
if|if
condition|(
name|options
operator|.
name|getIsHiveAux
argument_list|()
condition|)
block|{
comment|// Note: we don't add ADDED jars, RELOADABLE jars, etc. That is by design; there are too many ways
comment|// to add jars in Hive, some of which are session/etc. specific. Env + conf + arg should be enough.
name|addAuxJarsToSet
argument_list|(
name|auxJars
argument_list|,
name|conf
operator|.
name|getAuxJars
argument_list|()
argument_list|)
expr_stmt|;
name|addAuxJarsToSet
argument_list|(
name|auxJars
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_AUX_JARS_PATH"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding the following aux jars from the environment and configs: "
operator|+
name|auxJars
argument_list|)
expr_stmt|;
block|}
name|addAuxJarsToSet
argument_list|(
name|auxJars
argument_list|,
name|options
operator|.
name|getAuxJars
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|jarPath
range|:
name|auxJars
control|)
block|{
name|lfs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|jarPath
argument_list|)
argument_list|,
name|libDir
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|addAuxJarsToSet
parameter_list|(
name|HashSet
argument_list|<
name|String
argument_list|>
name|auxJarSet
parameter_list|,
name|String
name|auxJars
parameter_list|)
block|{
if|if
condition|(
name|auxJars
operator|!=
literal|null
operator|&&
operator|!
name|auxJars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// TODO: transitive dependencies warning?
name|String
index|[]
name|jarPaths
init|=
name|auxJars
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|jarPath
range|:
name|jarPaths
control|)
block|{
if|if
condition|(
operator|!
name|jarPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|auxJarSet
operator|.
name|add
argument_list|(
name|jarPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
decl_stmt|;
name|NamedCallable
argument_list|<
name|Void
argument_list|>
name|copyUdfJars
init|=
operator|new
name|NamedCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|"copyUdfJars"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// UDFs
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|allowedUdfs
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ALLOW_PERMANENT_FNS
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|fs
init|)
block|{
name|allowedUdfs
operator|=
name|downloadPermanentFunctions
argument_list|(
name|conf
argument_list|,
name|udfDir
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|allowedUdfs
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|PrintWriter
name|udfStream
init|=
operator|new
name|PrintWriter
argument_list|(
name|lfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|confPath
argument_list|,
name|StaticPermanentFunctionChecker
operator|.
name|PERMANENT_FUNCTIONS_LIST
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|udfClass
range|:
name|allowedUdfs
control|)
block|{
name|udfStream
operator|.
name|println
argument_list|(
name|udfClass
argument_list|)
expr_stmt|;
block|}
name|udfStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|String
name|java_home
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|getJavaPath
argument_list|()
operator|==
literal|null
operator|||
name|options
operator|.
name|getJavaPath
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|java_home
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"JAVA_HOME"
argument_list|)
expr_stmt|;
name|String
name|jre_home
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
if|if
condition|(
name|java_home
operator|==
literal|null
condition|)
block|{
name|java_home
operator|=
name|jre_home
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|java_home
operator|.
name|equals
argument_list|(
name|jre_home
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Java versions might not match : JAVA_HOME=[{}],process jre=[{}]"
argument_list|,
name|java_home
argument_list|,
name|jre_home
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|java_home
operator|=
name|options
operator|.
name|getJavaPath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|java_home
operator|==
literal|null
operator|||
name|java_home
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not determine JAVA_HOME from command line parameters, environment or system properties"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using [{}] for JAVA_HOME"
argument_list|,
name|java_home
argument_list|)
expr_stmt|;
name|NamedCallable
argument_list|<
name|Void
argument_list|>
name|copyConfigs
init|=
operator|new
name|NamedCallable
argument_list|<
name|Void
argument_list|>
argument_list|(
literal|"copyConfigs"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Copy over the mandatory configs for the package.
for|for
control|(
name|String
name|f
range|:
name|NEEDED_CONFIGS
control|)
block|{
name|copyConfig
argument_list|(
name|lfs
argument_list|,
name|confPath
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|f
range|:
name|OPTIONAL_CONFIGS
control|)
block|{
try|try
block|{
name|copyConfig
argument_list|(
name|lfs
argument_list|,
name|confPath
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error getting an optional config "
operator|+
name|f
operator|+
literal|"; ignoring: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|createLlapDaemonConfig
argument_list|(
name|lfs
argument_list|,
name|confPath
argument_list|,
name|conf
argument_list|,
name|propsDirectOptions
argument_list|,
name|options
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|setUpLogAndMetricConfigs
argument_list|(
name|lfs
argument_list|,
name|logger
argument_list|,
name|confPath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|NamedCallable
argument_list|<
name|Void
argument_list|>
index|[]
name|asyncWork
init|=
operator|new
name|NamedCallable
index|[]
block|{
name|downloadTez
block|,
name|copyUdfJars
block|,
name|copyLocalJars
block|,
name|copyAuxJars
block|,
name|copyConfigs
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Future
argument_list|<
name|Void
argument_list|>
index|[]
name|asyncResults
init|=
operator|new
name|Future
index|[
name|asyncWork
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|asyncWork
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|asyncResults
index|[
name|i
index|]
operator|=
name|asyncRunner
operator|.
name|submit
argument_list|(
name|asyncWork
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// TODO: need to move from Python to Java for the rest of the script.
name|JSONObject
name|configs
init|=
name|createConfigJson
argument_list|(
name|containerSize
argument_list|,
name|cache
argument_list|,
name|xmx
argument_list|,
name|java_home
argument_list|)
decl_stmt|;
name|writeConfigJson
argument_list|(
name|tmpDir
argument_list|,
name|lfs
argument_list|,
name|configs
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Config generation took "
operator|+
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|t0
operator|)
operator|+
literal|" ns"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|asyncWork
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|t1
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|asyncResults
index|[
name|i
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
specifier|final
name|long
name|t2
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|asyncWork
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|" waited for "
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|" ns"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|isStarting
argument_list|()
condition|)
block|{
name|String
name|version
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_VERSION"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
operator|||
name|version
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|version
operator|=
name|DateTime
operator|.
name|now
argument_list|()
operator|.
name|toString
argument_list|(
literal|"ddMMMyyyy"
argument_list|)
expr_stmt|;
block|}
name|String
name|outputDir
init|=
name|options
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|Path
name|packageDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outputDir
operator|==
literal|null
condition|)
block|{
name|outputDir
operator|=
name|OUTPUT_DIR_PREFIX
operator|+
name|version
expr_stmt|;
name|packageDir
operator|=
operator|new
name|Path
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"."
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|OUTPUT_DIR_PREFIX
operator|+
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|packageDir
operator|=
operator|new
name|Path
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
block|}
name|rc
operator|=
name|runPackagePy
argument_list|(
name|args
argument_list|,
name|tmpDir
argument_list|,
name|scriptParent
argument_list|,
name|version
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
block|{
name|LlapSliderUtils
operator|.
name|startCluster
argument_list|(
name|conf
argument_list|,
name|options
operator|.
name|getName
argument_list|()
argument_list|,
literal|"llap-"
operator|+
name|version
operator|+
literal|".zip"
argument_list|,
name|packageDir
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|rc
operator|=
literal|0
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|lfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exiting successfully"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exiting with rc = "
operator|+
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|private
name|int
name|runPackagePy
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|Path
name|tmpDir
parameter_list|,
name|Path
name|scriptParent
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|outputDir
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Path
name|scriptPath
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|scriptParent
argument_list|,
literal|"slider"
argument_list|)
argument_list|,
literal|"package.py"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|scriptArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|args
operator|.
name|length
operator|+
literal|7
argument_list|)
decl_stmt|;
name|scriptArgs
operator|.
name|add
argument_list|(
literal|"python"
argument_list|)
expr_stmt|;
name|scriptArgs
operator|.
name|add
argument_list|(
name|scriptPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|scriptArgs
operator|.
name|add
argument_list|(
literal|"--input"
argument_list|)
expr_stmt|;
name|scriptArgs
operator|.
name|add
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|scriptArgs
operator|.
name|add
argument_list|(
literal|"--output"
argument_list|)
expr_stmt|;
name|scriptArgs
operator|.
name|add
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
name|scriptArgs
operator|.
name|add
argument_list|(
literal|"--javaChild"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|scriptArgs
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Calling package.py via: "
operator|+
name|scriptArgs
argument_list|)
expr_stmt|;
name|ProcessBuilder
name|builder
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|scriptArgs
argument_list|)
decl_stmt|;
name|builder
operator|.
name|redirectError
argument_list|(
name|ProcessBuilder
operator|.
name|Redirect
operator|.
name|INHERIT
argument_list|)
expr_stmt|;
name|builder
operator|.
name|redirectOutput
argument_list|(
name|ProcessBuilder
operator|.
name|Redirect
operator|.
name|INHERIT
argument_list|)
expr_stmt|;
name|builder
operator|.
name|environment
argument_list|()
operator|.
name|put
argument_list|(
literal|"HIVE_VERSION"
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|start
argument_list|()
operator|.
name|waitFor
argument_list|()
return|;
block|}
specifier|private
name|void
name|writeConfigJson
parameter_list|(
name|Path
name|tmpDir
parameter_list|,
specifier|final
name|FileSystem
name|lfs
parameter_list|,
name|JSONObject
name|configs
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
name|FSDataOutputStream
name|os
init|=
name|lfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
literal|"config.json"
argument_list|)
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|configs
operator|.
name|write
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|JSONObject
name|createConfigJson
parameter_list|(
name|long
name|containerSize
parameter_list|,
name|long
name|cache
parameter_list|,
name|long
name|xmx
parameter_list|,
name|String
name|java_home
parameter_list|)
throws|throws
name|JSONException
block|{
comment|// extract configs for processing by the python fragments in Slider
name|JSONObject
name|configs
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|configs
operator|.
name|put
argument_list|(
literal|"java.home"
argument_list|,
name|java_home
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_YARN_CONTAINER_MB
operator|.
name|varname
argument_list|,
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_YARN_CONTAINER_MB
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_YARN_CONTAINER_MB
operator|.
name|varname
argument_list|,
name|containerSize
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_IO_MEMORY_MAX_SIZE
operator|.
name|varname
argument_list|,
name|HiveConf
operator|.
name|getSizeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_IO_MEMORY_MAX_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_DIRECT
operator|.
name|varname
argument_list|,
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_DIRECT
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB
operator|.
name|varname
argument_list|,
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_VCPUS_PER_INSTANCE
operator|.
name|varname
argument_list|,
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_VCPUS_PER_INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
operator|.
name|varname
argument_list|,
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let YARN pick the queue name, if it isn't provided in hive-site, or via the command-line
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_QUEUE_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|configs
operator|.
name|put
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_QUEUE_NAME
operator|.
name|varname
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Propagate the cluster name to the script.
name|String
name|clusterHosts
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|clusterHosts
argument_list|)
operator|&&
name|clusterHosts
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
operator|&&
name|clusterHosts
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|configs
operator|.
name|put
argument_list|(
name|CONFIG_CLUSTER_NAME
argument_list|,
name|clusterHosts
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|configs
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|maxDirect
init|=
operator|(
name|xmx
operator|>
literal|0
operator|&&
name|cache
operator|>
literal|0
operator|&&
name|xmx
operator|<
name|cache
operator|*
literal|1.25
operator|)
condition|?
call|(
name|long
call|)
argument_list|(
name|cache
operator|*
literal|1.25
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
name|configs
operator|.
name|put
argument_list|(
literal|"max_direct_memory"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|maxDirect
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|configs
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|downloadPermanentFunctions
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|udfDir
parameter_list|)
throws|throws
name|HiveException
throws|,
name|URISyntaxException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|udfs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
comment|// disable expensive operations on the metastore
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_INIT_METADATA_COUNT_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_METRICS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// performance problem: ObjectStore does its own new HiveConf()
name|Hive
name|hive
init|=
name|Hive
operator|.
name|getWithFastCheck
argument_list|(
name|hiveConf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResourceDownloader
name|resourceDownloader
init|=
operator|new
name|ResourceDownloader
argument_list|(
name|conf
argument_list|,
name|udfDir
operator|.
name|toUri
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Function
argument_list|>
name|fns
init|=
name|hive
operator|.
name|getAllFunctions
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|URI
argument_list|>
name|srcUris
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Function
name|fn
range|:
name|fns
control|)
block|{
name|String
name|fqfn
init|=
name|fn
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|fn
operator|.
name|getFunctionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|udfs
operator|.
name|containsKey
argument_list|(
name|fn
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Duplicate function names found for "
operator|+
name|fn
operator|.
name|getClassName
argument_list|()
operator|+
literal|" with "
operator|+
name|fqfn
operator|+
literal|" and "
operator|+
name|udfs
operator|.
name|get
argument_list|(
name|fn
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|udfs
operator|.
name|put
argument_list|(
name|fn
operator|.
name|getClassName
argument_list|()
argument_list|,
name|fqfn
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceUri
argument_list|>
name|resources
init|=
name|fn
operator|.
name|getResourceUris
argument_list|()
decl_stmt|;
if|if
condition|(
name|resources
operator|==
literal|null
operator|||
name|resources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing resources for "
operator|+
name|fqfn
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|ResourceUri
name|resource
range|:
name|resources
control|)
block|{
name|srcUris
operator|.
name|add
argument_list|(
name|ResourceDownloader
operator|.
name|createURI
argument_list|(
name|resource
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|URI
name|srcUri
range|:
name|srcUris
control|)
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|localUris
init|=
name|resourceDownloader
operator|.
name|downloadExternal
argument_list|(
name|srcUri
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|dst
range|:
name|localUris
control|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Downloaded "
operator|+
name|dst
operator|+
literal|" from "
operator|+
name|srcUri
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|udfs
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|private
name|void
name|localizeJarForClass
parameter_list|(
name|FileSystem
name|lfs
parameter_list|,
name|Path
name|libDir
parameter_list|,
name|String
name|className
parameter_list|,
name|boolean
name|doThrow
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|jarPath
init|=
literal|null
decl_stmt|;
name|boolean
name|hasException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|auxClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|jarPath
operator|=
name|Utilities
operator|.
name|jarFinderGetJar
argument_list|(
name|auxClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|doThrow
condition|)
block|{
throw|throw
operator|(
name|t
operator|instanceof
name|IOException
operator|)
condition|?
operator|(
name|IOException
operator|)
name|t
else|:
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
name|hasException
operator|=
literal|true
expr_stmt|;
name|String
name|err
init|=
literal|"Cannot find a jar for ["
operator|+
name|className
operator|+
literal|"] due to an exception ("
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|"); not packaging the jar"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jarPath
operator|!=
literal|null
condition|)
block|{
name|lfs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|jarPath
argument_list|)
argument_list|,
name|libDir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|hasException
condition|)
block|{
name|String
name|err
init|=
literal|"Cannot find a jar for ["
operator|+
name|className
operator|+
literal|"]; not packaging the jar"
decl_stmt|;
if|if
condition|(
name|doThrow
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|err
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *    * @param lfs filesystem on which file will be generated    * @param confPath path wher the config will be generated    * @param configured the base configuration instances    * @param direct properties specified directly - i.e. using the properties exact option    * @param hiveconf properties specifried via --hiveconf    * @throws IOException    */
specifier|private
name|void
name|createLlapDaemonConfig
parameter_list|(
name|FileSystem
name|lfs
parameter_list|,
name|Path
name|confPath
parameter_list|,
name|Configuration
name|configured
parameter_list|,
name|Properties
name|direct
parameter_list|,
name|Properties
name|hiveconf
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|confStream
init|=
name|lfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|confPath
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_SITE
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|llapDaemonConf
init|=
name|resolve
argument_list|(
name|configured
argument_list|,
name|direct
argument_list|,
name|hiveconf
argument_list|)
decl_stmt|;
name|llapDaemonConf
operator|.
name|writeXml
argument_list|(
name|confStream
argument_list|)
expr_stmt|;
name|confStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|copyConfig
parameter_list|(
name|FileSystem
name|lfs
parameter_list|,
name|Path
name|confPath
parameter_list|,
name|String
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|,
name|ConfVars
operator|.
name|LLAP_CLIENT_CONSISTENT_SPLITS
argument_list|)
expr_stmt|;
comment|// they will be file:// URLs
name|lfs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getResource
argument_list|(
name|f
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|confPath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpLogAndMetricConfigs
parameter_list|(
specifier|final
name|FileSystem
name|lfs
parameter_list|,
specifier|final
name|URL
name|logger
parameter_list|,
specifier|final
name|Path
name|confPath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// logger can be a resource stream or a real file (cannot use copy)
name|InputStream
name|loggerContent
init|=
name|logger
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|loggerContent
argument_list|,
name|lfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|confPath
argument_list|,
literal|"llap-daemon-log4j2.properties"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|metricsFile
init|=
name|LlapConstants
operator|.
name|LLAP_HADOOP_METRICS2_PROPERTIES_FILE
decl_stmt|;
name|URL
name|metrics2
init|=
name|conf
operator|.
name|getResource
argument_list|(
name|metricsFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics2
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|LlapConstants
operator|.
name|LLAP_HADOOP_METRICS2_PROPERTIES_FILE
operator|+
literal|" cannot be found."
operator|+
literal|" Looking for "
operator|+
name|LlapConstants
operator|.
name|HADOOP_METRICS2_PROPERTIES_FILE
argument_list|)
expr_stmt|;
name|metricsFile
operator|=
name|LlapConstants
operator|.
name|HADOOP_METRICS2_PROPERTIES_FILE
expr_stmt|;
name|metrics2
operator|=
name|conf
operator|.
name|getResource
argument_list|(
name|metricsFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metrics2
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|metrics2FileStream
init|=
name|metrics2
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|metrics2FileStream
argument_list|,
name|lfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|confPath
argument_list|,
name|metricsFile
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Copied hadoop metrics2 properties file from "
operator|+
name|metrics2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot find "
operator|+
name|LlapConstants
operator|.
name|LLAP_HADOOP_METRICS2_PROPERTIES_FILE
operator|+
literal|" or "
operator|+
name|LlapConstants
operator|.
name|HADOOP_METRICS2_PROPERTIES_FILE
operator|+
literal|" in classpath."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

