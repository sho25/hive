begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|CompressionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|LlapOptionsProcessor
operator|.
name|LlapOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|LlapDaemonConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_class
specifier|public
class|class
name|LlapServiceDriver
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LlapServiceDriver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|LlapServiceDriver
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|(
name|ss
operator|!=
literal|null
operator|)
condition|?
name|ss
operator|.
name|getConf
argument_list|()
else|:
operator|new
name|HiveConf
argument_list|(
name|SessionState
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|ret
operator|=
operator|new
name|LlapServiceDriver
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Completed processing - exiting with "
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|LlapOptionsProcessor
name|optionsProcessor
init|=
operator|new
name|LlapOptionsProcessor
argument_list|()
decl_stmt|;
name|LlapOptions
name|options
init|=
name|optionsProcessor
operator|.
name|processOptions
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|Path
name|tmpDir
init|=
operator|new
name|Path
argument_list|(
name|options
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot load any configuration to run command"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|String
index|[]
name|neededConfig
init|=
block|{
literal|"tez-site.xml"
block|,
literal|"hive-site.xml"
block|,
literal|"llap-daemon-site.xml"
block|,
literal|"core-site.xml"
block|}
decl_stmt|;
comment|// needed so that the file is actually loaded into configuration.
for|for
control|(
name|String
name|f
range|:
name|neededConfig
control|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getResource
argument_list|(
name|f
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to find required config file: "
operator|+
name|f
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
block|}
name|conf
operator|.
name|reloadConfiguration
argument_list|()
expr_stmt|;
name|URL
name|logger
init|=
name|conf
operator|.
name|getResource
argument_list|(
literal|"llap-daemon-log4j.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|logger
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to find required config file: llap-daemon-log4j.properties"
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
name|Path
name|home
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getenv
argument_list|(
literal|"HIVE_HOME"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|scripts
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|home
argument_list|,
literal|"scripts"
argument_list|)
argument_list|,
literal|"llap"
argument_list|)
argument_list|,
literal|"bin"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lfs
operator|.
name|exists
argument_list|(
name|home
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to find HIVE_HOME:"
operator|+
name|home
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|lfs
operator|.
name|exists
argument_list|(
name|scripts
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to find llap scripts:"
operator|+
name|scripts
argument_list|)
expr_stmt|;
block|}
name|Path
name|libDir
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
literal|"lib"
argument_list|)
decl_stmt|;
name|String
name|tezLibs
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"tez.lib.uris"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tezLibs
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing tez.lib.uris in tez-site.xml"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Copying tez libs from "
operator|+
name|tezLibs
argument_list|)
expr_stmt|;
block|}
name|lfs
operator|.
name|mkdirs
argument_list|(
name|libDir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyToLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|tezLibs
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|libDir
argument_list|,
literal|"tez.tar.gz"
argument_list|)
argument_list|)
expr_stmt|;
name|CompressionUtils
operator|.
name|unTar
argument_list|(
operator|new
name|Path
argument_list|(
name|libDir
argument_list|,
literal|"tez.tar.gz"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|libDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|libDir
argument_list|,
literal|"tez.tar.gz"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// TODO: aux jars (like compression libs)
name|lfs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|Utilities
operator|.
name|jarFinderGetJar
argument_list|(
name|LlapInputFormat
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|libDir
argument_list|)
expr_stmt|;
name|lfs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|Utilities
operator|.
name|jarFinderGetJar
argument_list|(
name|HiveInputFormat
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|libDir
argument_list|)
expr_stmt|;
name|Path
name|confPath
init|=
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
name|lfs
operator|.
name|mkdirs
argument_list|(
name|confPath
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|f
range|:
name|neededConfig
control|)
block|{
comment|// they will be file:// URLs
name|lfs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|getResource
argument_list|(
name|f
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|confPath
argument_list|)
expr_stmt|;
block|}
name|lfs
operator|.
name|copyFromLocalFile
argument_list|(
operator|new
name|Path
argument_list|(
name|logger
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|confPath
argument_list|)
expr_stmt|;
comment|// extract configs for processing by the python fragments in Slider
name|JSONObject
name|configs
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_MAX_SIZE
operator|.
name|varname
argument_list|,
name|HiveConf
operator|.
name|getLongVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_MAX_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_ALLOCATE_DIRECT
operator|.
name|varname
argument_list|,
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_ALLOCATE_DIRECT
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_VCPUS_PER_INSTANCE
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_VCPUS_PER_INSTANCE
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_VCPUS_PER_INSTANCE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|os
init|=
name|lfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpDir
argument_list|,
literal|"config.json"
argument_list|)
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|configs
operator|.
name|write
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|lfs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exiting successfully"
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

