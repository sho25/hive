begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
operator|.
name|SerDeEncodedDataReader
operator|.
name|ReaderWithOffsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|LineRecordReader
import|;
end_import

begin_class
specifier|final
class|class
name|LineRrOffsetReader
extends|extends
name|PassThruOffsetReader
block|{
specifier|private
specifier|static
specifier|final
name|Method
name|isCompressedMethod
decl_stmt|;
specifier|private
specifier|final
name|LineRecordReader
name|lrReader
decl_stmt|;
specifier|private
specifier|final
name|LongWritable
name|posKey
decl_stmt|;
static|static
block|{
name|Method
name|isCompressedMethodTmp
decl_stmt|;
try|try
block|{
name|isCompressedMethodTmp
operator|=
name|LineRecordReader
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"isCompressedInput"
argument_list|)
expr_stmt|;
name|isCompressedMethodTmp
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|isCompressedMethodTmp
operator|=
literal|null
expr_stmt|;
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot get LineRecordReader isCompressedInput method"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|isCompressedMethod
operator|=
name|isCompressedMethodTmp
expr_stmt|;
block|}
specifier|static
name|ReaderWithOffsets
name|create
parameter_list|(
name|LineRecordReader
name|sourceReader
parameter_list|)
block|{
if|if
condition|(
name|isCompressedMethod
operator|==
literal|null
condition|)
return|return
operator|new
name|PassThruOffsetReader
argument_list|(
name|sourceReader
argument_list|)
return|;
name|Boolean
name|isCompressed
init|=
literal|null
decl_stmt|;
try|try
block|{
name|isCompressed
operator|=
operator|(
name|Boolean
operator|)
name|isCompressedMethod
operator|.
name|invoke
argument_list|(
name|sourceReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot check the reader for compression; offsets not supported"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|PassThruOffsetReader
argument_list|(
name|sourceReader
argument_list|)
return|;
block|}
if|if
condition|(
name|isCompressed
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Reader is compressed; offsets not supported"
argument_list|)
expr_stmt|;
return|return
operator|new
name|PassThruOffsetReader
argument_list|(
name|sourceReader
argument_list|)
return|;
comment|// Cannot slice compressed files.
block|}
return|return
operator|new
name|LineRrOffsetReader
argument_list|(
name|sourceReader
argument_list|)
return|;
block|}
specifier|private
name|LineRrOffsetReader
parameter_list|(
name|LineRecordReader
name|sourceReader
parameter_list|)
block|{
name|super
argument_list|(
name|sourceReader
argument_list|)
expr_stmt|;
name|this
operator|.
name|lrReader
operator|=
name|sourceReader
expr_stmt|;
name|this
operator|.
name|posKey
operator|=
operator|(
name|LongWritable
operator|)
name|key
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCurrentRowStartOffset
parameter_list|()
block|{
return|return
name|posKey
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCurrentRowEndOffset
parameter_list|()
block|{
try|try
block|{
return|return
name|lrReader
operator|.
name|getPos
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOffsets
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

