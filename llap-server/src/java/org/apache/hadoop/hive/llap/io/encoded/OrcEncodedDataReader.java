begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|CallableWithNdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|ConsumerFeedback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|counters
operator|.
name|QueryFragmentCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|EncodedColumnBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|EncodedColumnBatch
operator|.
name|StreamBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|cache
operator|.
name|LlapMemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|cache
operator|.
name|LowLevelCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|orc
operator|.
name|OrcBatchKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|orc
operator|.
name|OrcCacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|decode
operator|.
name|OrcEncodedDataConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
operator|.
name|OrcFileMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
operator|.
name|OrcMetadataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
operator|.
name|OrcStripeMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|EncodedReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|MetadataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReaderImpl
operator|.
name|SargApplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|StripeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_class
specifier|public
class|class
name|OrcEncodedDataReader
extends|extends
name|CallableWithNdc
argument_list|<
name|Void
argument_list|>
implements|implements
name|ConsumerFeedback
argument_list|<
name|StreamBuffer
argument_list|>
implements|,
name|Consumer
argument_list|<
name|EncodedColumnBatch
argument_list|<
name|OrcBatchKey
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|OrcMetadataCache
name|metadataCache
decl_stmt|;
specifier|private
specifier|final
name|LowLevelCache
name|lowLevelCache
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|OrcCacheKey
argument_list|>
name|cache
decl_stmt|;
specifier|private
specifier|final
name|FileSplit
name|split
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
decl_stmt|;
specifier|private
specifier|final
name|SearchArgument
name|sarg
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|columnNames
decl_stmt|;
specifier|private
specifier|final
name|OrcEncodedDataConsumer
name|consumer
decl_stmt|;
specifier|private
specifier|final
name|QueryFragmentCounters
name|counters
decl_stmt|;
comment|// Read state.
specifier|private
name|int
name|stripeIxFrom
decl_stmt|;
specifier|private
name|OrcFileMetadata
name|fileMetadata
decl_stmt|;
specifier|private
name|Reader
name|orcReader
decl_stmt|;
specifier|private
name|MetadataReader
name|metadataReader
decl_stmt|;
specifier|private
name|Long
name|fileId
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
comment|/**    * readState[stripeIx'][colIx'] => boolean array (could be a bitmask) of rg-s that need to be    * read. Contains only stripes that are read, and only columns included. null => read all RGs.    */
specifier|private
name|boolean
index|[]
index|[]
index|[]
name|readState
decl_stmt|;
specifier|private
name|boolean
name|isStopped
init|=
literal|false
decl_stmt|,
name|isPaused
init|=
literal|false
decl_stmt|;
specifier|public
name|OrcEncodedDataReader
parameter_list|(
name|LowLevelCache
name|lowLevelCache
parameter_list|,
name|Cache
argument_list|<
name|OrcCacheKey
argument_list|>
name|cache
parameter_list|,
name|OrcMetadataCache
name|metadataCache
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|InputSplit
name|split
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
parameter_list|,
name|SearchArgument
name|sarg
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|OrcEncodedDataConsumer
name|consumer
parameter_list|,
name|QueryFragmentCounters
name|counters
parameter_list|)
block|{
name|this
operator|.
name|lowLevelCache
operator|=
name|lowLevelCache
expr_stmt|;
name|this
operator|.
name|metadataCache
operator|=
name|metadataCache
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|split
operator|=
operator|(
name|FileSplit
operator|)
name|split
expr_stmt|;
name|this
operator|.
name|columnIds
operator|=
name|columnIds
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columnIds
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|this
operator|.
name|columnIds
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|sarg
operator|=
name|sarg
expr_stmt|;
name|this
operator|.
name|columnNames
operator|=
name|columnNames
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|counters
operator|=
name|counters
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|isStopped
operator|=
literal|true
expr_stmt|;
comment|// TODO: stop fetching if still in progress
block|}
annotation|@
name|Override
specifier|public
name|void
name|pause
parameter_list|()
block|{
name|isPaused
operator|=
literal|true
expr_stmt|;
comment|// TODO: pause fetching
block|}
annotation|@
name|Override
specifier|public
name|void
name|unpause
parameter_list|()
block|{
name|isPaused
operator|=
literal|false
expr_stmt|;
comment|// TODO: unpause fetching
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|callInternal
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOGL
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing split for "
operator|+
name|split
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isStopped
condition|)
return|return
literal|null
return|;
name|orcReader
operator|=
literal|null
expr_stmt|;
comment|// 1. Get file metadata from cache, or create the reader and read it.
comment|// Disable filesystem caching for now; Tez closes it and FS cache will fix all that
name|fs
operator|=
name|split
operator|.
name|getPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileId
operator|=
name|RecordReaderUtils
operator|.
name|getFileId
argument_list|(
name|fs
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|fileMetadata
operator|=
name|getOrReadFileMetadata
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|setFileMetadata
argument_list|(
name|fileMetadata
argument_list|)
expr_stmt|;
name|int
name|bufferSize
init|=
name|fileMetadata
operator|.
name|getCompressionBufferSize
argument_list|()
decl_stmt|;
name|int
name|minAllocSize
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_MIN_ALLOC
argument_list|)
decl_stmt|;
if|if
condition|(
name|bufferSize
operator|<
name|minAllocSize
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ORC compression buffer size ("
operator|+
name|bufferSize
operator|+
literal|") is smaller than"
operator|+
literal|" LLAP low-level cache minimum allocation size ("
operator|+
name|minAllocSize
operator|+
literal|"). Decrease the"
operator|+
literal|" value for "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_MIN_ALLOC
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|columnIds
operator|==
literal|null
condition|)
block|{
name|columnIds
operator|=
name|createColumnIds
argument_list|(
name|fileMetadata
argument_list|)
expr_stmt|;
block|}
comment|// 2. Determine which stripes to read based on the split.
name|determineStripesToRead
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|readState
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|consumer
operator|.
name|setDone
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
comment|// No data to read.
block|}
comment|// 3. Apply SARG if needed, and otherwise determine what RGs to read.
name|int
name|stride
init|=
name|fileMetadata
operator|.
name|getRowIndexStride
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|OrcStripeMetadata
argument_list|>
name|stripeMetadatas
init|=
literal|null
decl_stmt|;
name|boolean
index|[]
name|globalIncludes
init|=
literal|null
decl_stmt|;
name|boolean
index|[]
name|sargColumns
init|=
literal|null
decl_stmt|;
try|try
block|{
name|globalIncludes
operator|=
name|OrcInputFormat
operator|.
name|genIncludedColumns
argument_list|(
name|fileMetadata
operator|.
name|getTypes
argument_list|()
argument_list|,
name|columnIds
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|sarg
operator|!=
literal|null
operator|&&
name|stride
operator|!=
literal|0
condition|)
block|{
comment|// TODO: move this to a common method
name|int
index|[]
name|filterColumns
init|=
name|RecordReaderImpl
operator|.
name|mapSargColumns
argument_list|(
name|sarg
operator|.
name|getLeaves
argument_list|()
argument_list|,
name|columnNames
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// included will not be null, row options will fill the array with trues if null
name|sargColumns
operator|=
operator|new
name|boolean
index|[
name|globalIncludes
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
range|:
name|filterColumns
control|)
block|{
comment|// filter columns may have -1 as index which could be partition column in SARG.
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sargColumns
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// If SARG is present, get relevant stripe metadata from cache or readers.
name|stripeMetadatas
operator|=
name|readStripesMetadata
argument_list|(
name|globalIncludes
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
block|}
comment|// Now, apply SARG if any; w/o sarg, this will just initialize readState.
name|determineRgsToRead
argument_list|(
name|globalIncludes
argument_list|,
name|stride
argument_list|,
name|stripeMetadatas
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|cleanupReaders
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|isStopped
condition|)
block|{
name|cleanupReaders
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// 4. Get data from high-level cache.
comment|//    If some cols are fully in cache, this will also give us the modified list of
comment|//    columns to read for every stripe (null means read all of them - the usual path).
name|List
argument_list|<
name|Integer
argument_list|>
index|[]
name|stripeColsToRead
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stripeColsToRead
operator|=
name|produceDataFromCache
argument_list|(
name|stride
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// produceDataFromCache handles its own cleanup.
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|cleanupReaders
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// readState has been modified for column x rgs that were fetched from cache.
comment|// 5. Create encoded data reader.
comment|// In case if we have high-level cache, we will intercept the data and add it there;
comment|// otherwise just pass the data directly to the consumer.
name|Consumer
argument_list|<
name|EncodedColumnBatch
argument_list|<
name|OrcBatchKey
argument_list|>
argument_list|>
name|dataConsumer
init|=
operator|(
name|cache
operator|==
literal|null
operator|)
condition|?
name|this
operator|.
name|consumer
else|:
name|this
decl_stmt|;
name|EncodedReader
name|stripeReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ensureOrcReader
argument_list|()
expr_stmt|;
name|stripeReader
operator|=
name|orcReader
operator|.
name|encodedReader
argument_list|(
name|lowLevelCache
argument_list|,
name|dataConsumer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|cleanupReaders
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// 6. Read data.
comment|// TODO: I/O threadpool could be here - one thread per stripe; for now, linear.
name|OrcBatchKey
name|stripeKey
init|=
operator|new
name|OrcBatchKey
argument_list|(
name|fileId
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|stripeIxMod
init|=
literal|0
init|;
name|stripeIxMod
operator|<
name|readState
operator|.
name|length
condition|;
operator|++
name|stripeIxMod
control|)
block|{
try|try
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|cols
init|=
name|stripeColsToRead
operator|==
literal|null
condition|?
literal|null
else|:
name|stripeColsToRead
index|[
name|stripeIxMod
index|]
decl_stmt|;
if|if
condition|(
name|cols
operator|!=
literal|null
operator|&&
name|cols
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
comment|// No need to read this stripe.
name|int
name|stripeIx
init|=
name|stripeIxFrom
operator|+
name|stripeIxMod
decl_stmt|;
name|StripeInformation
name|si
init|=
name|fileMetadata
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
name|stripeIx
argument_list|)
decl_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading stripe "
operator|+
name|stripeIx
operator|+
literal|": "
operator|+
name|si
operator|.
name|getOffset
argument_list|()
operator|+
literal|", "
operator|+
name|si
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
index|[]
name|stripeIncludes
init|=
literal|null
decl_stmt|;
name|boolean
index|[]
index|[]
name|colRgs
init|=
name|readState
index|[
name|stripeIxMod
index|]
decl_stmt|;
comment|// 6.1. Determine the columns to read (usually the same as requested).
if|if
condition|(
name|cols
operator|==
literal|null
operator|||
name|cols
operator|.
name|size
argument_list|()
operator|==
name|colRgs
operator|.
name|length
condition|)
block|{
name|cols
operator|=
name|columnIds
expr_stmt|;
name|stripeIncludes
operator|=
name|globalIncludes
expr_stmt|;
block|}
else|else
block|{
comment|// We are reading subset of the original columns, remove unnecessary bitmasks/etc.
comment|// This will never happen w/o high-level cache.
name|stripeIncludes
operator|=
name|OrcInputFormat
operator|.
name|genIncludedColumns
argument_list|(
name|fileMetadata
operator|.
name|getTypes
argument_list|()
argument_list|,
name|cols
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|boolean
index|[]
index|[]
name|colRgs2
init|=
operator|new
name|boolean
index|[
name|cols
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|i2
init|=
operator|-
literal|1
init|;
name|i
operator|<
name|colRgs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|colRgs
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue;
name|colRgs2
index|[
name|i2
index|]
operator|=
name|colRgs
index|[
name|i
index|]
expr_stmt|;
operator|++
name|i2
expr_stmt|;
block|}
name|colRgs
operator|=
name|colRgs2
expr_stmt|;
block|}
comment|// 6.2. Ensure we have stripe metadata. We might have read it before for RG filtering.
name|OrcStripeMetadata
name|stripeMetadata
decl_stmt|;
if|if
condition|(
name|stripeMetadatas
operator|!=
literal|null
condition|)
block|{
name|stripeMetadata
operator|=
name|stripeMetadatas
operator|.
name|get
argument_list|(
name|stripeIxMod
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stripeKey
operator|.
name|stripeIx
operator|=
name|stripeIx
expr_stmt|;
name|stripeMetadata
operator|=
name|metadataCache
operator|.
name|getStripeMetadata
argument_list|(
name|stripeKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|stripeMetadata
operator|==
literal|null
condition|)
block|{
name|ensureMetadataReader
argument_list|()
expr_stmt|;
name|stripeMetadata
operator|=
operator|new
name|OrcStripeMetadata
argument_list|(
name|stripeKey
argument_list|,
name|metadataReader
argument_list|,
name|si
argument_list|,
name|stripeIncludes
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Caching stripe "
operator|+
name|stripeKey
operator|.
name|stripeIx
operator|+
literal|" metadata with includes: "
operator|+
name|DebugUtils
operator|.
name|toString
argument_list|(
name|stripeIncludes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|metadataCache
operator|.
name|putStripeMetadata
argument_list|(
name|stripeMetadata
argument_list|)
expr_stmt|;
name|stripeKey
operator|=
operator|new
name|OrcBatchKey
argument_list|(
name|fileId
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|setStripeMetadata
argument_list|(
name|stripeMetadata
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|stripeMetadata
operator|.
name|hasAllIndexes
argument_list|(
name|stripeIncludes
argument_list|)
condition|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating indexes in stripe "
operator|+
name|stripeKey
operator|.
name|stripeIx
operator|+
literal|" metadata for includes: "
operator|+
name|DebugUtils
operator|.
name|toString
argument_list|(
name|stripeIncludes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ensureMetadataReader
argument_list|()
expr_stmt|;
name|updateLoadedIndexes
argument_list|(
name|stripeMetadata
argument_list|,
name|si
argument_list|,
name|stripeIncludes
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
block|}
comment|// 6.3. Finally, hand off to the stripe reader to produce the data.
comment|//      This is a sync call that will feed data to the consumer.
comment|// TODO: readEncodedColumns is not supposed to throw; errors should be propagated thru
comment|// consumer. It is potentially holding locked buffers, and must perform its own cleanup.
name|stripeReader
operator|.
name|readEncodedColumns
argument_list|(
name|stripeIx
argument_list|,
name|si
argument_list|,
name|stripeMetadata
operator|.
name|getRowIndexes
argument_list|()
argument_list|,
name|stripeMetadata
operator|.
name|getEncodings
argument_list|()
argument_list|,
name|stripeMetadata
operator|.
name|getStreams
argument_list|()
argument_list|,
name|stripeIncludes
argument_list|,
name|colRgs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|cleanupReaders
argument_list|(
name|stripeReader
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// Done with all the things.
name|dataConsumer
operator|.
name|setDone
argument_list|()
expr_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceMttEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"done processing "
operator|+
name|split
argument_list|)
expr_stmt|;
block|}
comment|// close the stripe reader, we are done reading
name|stripeReader
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * Puts all column indexes from metadata to make a column list to read all column.    */
specifier|private
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|createColumnIds
parameter_list|(
name|OrcFileMetadata
name|metadata
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|metadata
operator|.
name|getTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|metadata
operator|.
name|getTypes
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|columnIds
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|columnIds
return|;
block|}
comment|/**    * In case if stripe metadata in cache does not have all indexes for current query, load    * the missing one. This is a temporary cludge until real metadata cache becomes available.    */
specifier|private
name|void
name|updateLoadedIndexes
parameter_list|(
name|OrcStripeMetadata
name|stripeMetadata
parameter_list|,
name|StripeInformation
name|stripe
parameter_list|,
name|boolean
index|[]
name|stripeIncludes
parameter_list|,
name|boolean
index|[]
name|sargColumns
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We only synchronize on write for now - design of metadata cache is very temporary;
comment|// we pre-allocate the array and never remove entries; so readers should be safe.
synchronized|synchronized
init|(
name|stripeMetadata
init|)
block|{
if|if
condition|(
name|stripeMetadata
operator|.
name|hasAllIndexes
argument_list|(
name|stripeIncludes
argument_list|)
condition|)
return|return;
name|stripeMetadata
operator|.
name|loadMissingIndexes
argument_list|(
name|metadataReader
argument_list|,
name|stripe
argument_list|,
name|stripeIncludes
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Closes the stripe readers (on error).    */
specifier|private
name|void
name|cleanupReaders
parameter_list|(
name|EncodedReader
name|er
parameter_list|)
block|{
if|if
condition|(
name|metadataReader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|metadataReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Ignore.
block|}
block|}
if|if
condition|(
name|er
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|er
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Ignore.
block|}
block|}
block|}
comment|/**    * Ensures orcReader is initialized for the split.    */
specifier|private
name|void
name|ensureOrcReader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|orcReader
operator|!=
literal|null
condition|)
return|return;
name|orcReader
operator|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|split
operator|.
name|getPath
argument_list|()
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    *  Gets file metadata for the split from cache, or reads it from the file.    */
specifier|private
name|OrcFileMetadata
name|getOrReadFileMetadata
parameter_list|()
throws|throws
name|IOException
block|{
name|OrcFileMetadata
name|metadata
init|=
name|metadataCache
operator|.
name|getFileMetadata
argument_list|(
name|fileId
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
return|return
name|metadata
return|;
name|ensureOrcReader
argument_list|()
expr_stmt|;
name|metadata
operator|=
operator|new
name|OrcFileMetadata
argument_list|(
name|fileId
argument_list|,
name|orcReader
argument_list|)
expr_stmt|;
name|metadataCache
operator|.
name|putFileMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
return|return
name|metadata
return|;
block|}
comment|/**    * Reads the metadata for all stripes in the file.    */
specifier|private
name|ArrayList
argument_list|<
name|OrcStripeMetadata
argument_list|>
name|readStripesMetadata
parameter_list|(
name|boolean
index|[]
name|globalInc
parameter_list|,
name|boolean
index|[]
name|sargColumns
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|OrcStripeMetadata
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|OrcStripeMetadata
argument_list|>
argument_list|(
name|readState
operator|.
name|length
argument_list|)
decl_stmt|;
name|OrcBatchKey
name|stripeKey
init|=
operator|new
name|OrcBatchKey
argument_list|(
name|fileId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|stripeIxMod
init|=
literal|0
init|;
name|stripeIxMod
operator|<
name|readState
operator|.
name|length
condition|;
operator|++
name|stripeIxMod
control|)
block|{
name|stripeKey
operator|.
name|stripeIx
operator|=
name|stripeIxMod
operator|+
name|stripeIxFrom
expr_stmt|;
name|OrcStripeMetadata
name|value
init|=
name|metadataCache
operator|.
name|getStripeMetadata
argument_list|(
name|stripeKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
operator|!
name|value
operator|.
name|hasAllIndexes
argument_list|(
name|globalInc
argument_list|)
condition|)
block|{
name|ensureMetadataReader
argument_list|()
expr_stmt|;
name|StripeInformation
name|si
init|=
name|fileMetadata
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
name|stripeKey
operator|.
name|stripeIx
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|OrcStripeMetadata
argument_list|(
name|stripeKey
argument_list|,
name|metadataReader
argument_list|,
name|si
argument_list|,
name|globalInc
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
name|metadataCache
operator|.
name|putStripeMetadata
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Caching stripe "
operator|+
name|stripeKey
operator|.
name|stripeIx
operator|+
literal|" metadata with includes: "
operator|+
name|DebugUtils
operator|.
name|toString
argument_list|(
name|globalInc
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create new key object to reuse for gets; we've used the old one to put in cache.
name|stripeKey
operator|=
operator|new
name|OrcBatchKey
argument_list|(
name|fileId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating indexes in stripe "
operator|+
name|stripeKey
operator|.
name|stripeIx
operator|+
literal|" metadata for includes: "
operator|+
name|DebugUtils
operator|.
name|toString
argument_list|(
name|globalInc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateLoadedIndexes
argument_list|(
name|value
argument_list|,
name|si
argument_list|,
name|globalInc
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setStripeMetadata
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|ensureMetadataReader
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOrcReader
argument_list|()
expr_stmt|;
if|if
condition|(
name|metadataReader
operator|!=
literal|null
condition|)
return|return;
name|metadataReader
operator|=
name|orcReader
operator|.
name|metadata
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|returnData
parameter_list|(
name|StreamBuffer
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|decRef
argument_list|()
operator|!=
literal|0
condition|)
return|return;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceLockingEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|LlapMemoryBuffer
name|buf
range|:
name|data
operator|.
name|cacheBuffers
control|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Unlocking "
operator|+
name|buf
operator|+
literal|" at the end of processing"
argument_list|)
expr_stmt|;
block|}
block|}
name|lowLevelCache
operator|.
name|releaseBuffers
argument_list|(
name|data
operator|.
name|cacheBuffers
argument_list|)
expr_stmt|;
block|}
comment|/**    * Determines which RGs need to be read, after stripes have been determined.    * SARG is applied, and readState is populated for each stripe accordingly.    * @param stripes All stripes in the file (field state is used to determine stripes to read).    */
specifier|private
name|void
name|determineRgsToRead
parameter_list|(
name|boolean
index|[]
name|globalIncludes
parameter_list|,
name|int
name|rowIndexStride
parameter_list|,
name|ArrayList
argument_list|<
name|OrcStripeMetadata
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|SargApplier
name|sargApp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sarg
operator|!=
literal|null
operator|&&
name|rowIndexStride
operator|!=
literal|0
condition|)
block|{
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
init|=
name|fileMetadata
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|String
index|[]
name|colNamesForSarg
init|=
name|OrcInputFormat
operator|.
name|getSargColumnNames
argument_list|(
name|columnNames
argument_list|,
name|types
argument_list|,
name|globalIncludes
argument_list|,
name|fileMetadata
operator|.
name|isOriginalFormat
argument_list|()
argument_list|)
decl_stmt|;
name|sargApp
operator|=
operator|new
name|SargApplier
argument_list|(
name|sarg
argument_list|,
name|colNamesForSarg
argument_list|,
name|rowIndexStride
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
comment|// readState should have been initialized by this time with an empty array.
for|for
control|(
name|int
name|stripeIxMod
init|=
literal|0
init|;
name|stripeIxMod
operator|<
name|readState
operator|.
name|length
condition|;
operator|++
name|stripeIxMod
control|)
block|{
name|int
name|stripeIx
init|=
name|stripeIxMod
operator|+
name|stripeIxFrom
decl_stmt|;
name|StripeInformation
name|stripe
init|=
name|fileMetadata
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
name|stripeIx
argument_list|)
decl_stmt|;
name|int
name|rgCount
init|=
name|getRgCount
argument_list|(
name|stripe
argument_list|,
name|rowIndexStride
argument_list|)
decl_stmt|;
name|boolean
index|[]
name|rgsToRead
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sargApp
operator|!=
literal|null
condition|)
block|{
name|rgsToRead
operator|=
name|sargApp
operator|.
name|pickRowGroups
argument_list|(
name|stripe
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|stripeIxMod
argument_list|)
operator|.
name|getRowIndexes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|rgsToRead
operator|!=
literal|null
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"SARG picked RGs for stripe "
operator|+
name|stripeIx
operator|+
literal|": "
operator|+
name|DebugUtils
operator|.
name|toString
argument_list|(
name|rgsToRead
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Will read all "
operator|+
name|rgCount
operator|+
literal|" RGs for stripe "
operator|+
name|stripeIx
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|rgsToRead
operator|==
literal|null
operator|||
name|rgsToRead
operator|.
name|length
operator|==
name|rgCount
assert|;
name|readState
index|[
name|stripeIxMod
index|]
operator|=
operator|new
name|boolean
index|[
name|columnIds
operator|.
name|size
argument_list|()
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columnIds
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|readState
index|[
name|stripeIxMod
index|]
index|[
name|j
index|]
operator|=
operator|(
name|rgsToRead
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|Arrays
operator|.
name|copyOf
argument_list|(
name|rgsToRead
argument_list|,
name|rgsToRead
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rgsToRead
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|boolean
name|b
range|:
name|rgsToRead
control|)
block|{
if|if
condition|(
name|b
condition|)
name|count
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|count
operator|=
name|rgCount
expr_stmt|;
block|}
name|counters
operator|.
name|setCounter
argument_list|(
name|QueryFragmentCounters
operator|.
name|Counter
operator|.
name|SELECTED_ROWGROUPS
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getRgCount
parameter_list|(
name|StripeInformation
name|stripe
parameter_list|,
name|int
name|rowIndexStride
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
operator|/
name|rowIndexStride
argument_list|)
return|;
block|}
comment|/**    * Determine which stripes to read for a split. Populates stripeIxFrom and readState.    */
specifier|public
name|void
name|determineStripesToRead
parameter_list|()
block|{
comment|// The unit of caching for ORC is (rg x column) (see OrcBatchKey).
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
init|=
name|fileMetadata
operator|.
name|getStripes
argument_list|()
decl_stmt|;
name|long
name|offset
init|=
name|split
operator|.
name|getStart
argument_list|()
decl_stmt|,
name|maxOffset
init|=
name|offset
operator|+
name|split
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|stripeIxFrom
operator|=
operator|-
literal|1
expr_stmt|;
name|int
name|stripeIxTo
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOGL
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|tmp
init|=
literal|"FileSplit {"
operator|+
name|split
operator|.
name|getStart
argument_list|()
operator|+
literal|", "
operator|+
name|split
operator|.
name|getLength
argument_list|()
operator|+
literal|"}; stripes "
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|stripes
control|)
block|{
name|tmp
operator|+=
literal|"{"
operator|+
name|stripe
operator|.
name|getOffset
argument_list|()
operator|+
literal|", "
operator|+
name|stripe
operator|.
name|getLength
argument_list|()
operator|+
literal|"}, "
expr_stmt|;
block|}
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|debug
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|int
name|stripeIx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|stripes
control|)
block|{
name|long
name|stripeStart
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|>
name|stripeStart
condition|)
continue|continue;
if|if
condition|(
name|stripeIxFrom
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Including stripes from "
operator|+
name|stripeIx
operator|+
literal|" ("
operator|+
name|stripeStart
operator|+
literal|">= "
operator|+
name|offset
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|stripeIxFrom
operator|=
name|stripeIx
expr_stmt|;
block|}
if|if
condition|(
name|stripeStart
operator|>=
name|maxOffset
condition|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Including stripes until "
operator|+
name|stripeIxTo
operator|+
literal|" ("
operator|+
name|stripeStart
operator|+
literal|">= "
operator|+
name|maxOffset
operator|+
literal|"); "
operator|+
operator|(
name|stripeIxTo
operator|-
name|stripeIxFrom
operator|)
operator|+
literal|" stripes"
argument_list|)
expr_stmt|;
block|}
name|stripeIxTo
operator|=
name|stripeIx
expr_stmt|;
break|break;
block|}
operator|++
name|stripeIx
expr_stmt|;
block|}
if|if
condition|(
name|stripeIxTo
operator|==
operator|-
literal|1
condition|)
block|{
name|stripeIxTo
operator|=
name|stripeIx
expr_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceOrcEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Including stripes until "
operator|+
name|stripeIx
operator|+
literal|" (end of file); "
operator|+
operator|(
name|stripeIxTo
operator|-
name|stripeIxFrom
operator|)
operator|+
literal|" stripes"
argument_list|)
expr_stmt|;
block|}
block|}
name|readState
operator|=
operator|new
name|boolean
index|[
name|stripeIxTo
operator|-
name|stripeIxFrom
index|]
index|[]
index|[]
expr_stmt|;
block|}
comment|// TODO: split by stripe? we do everything by stripe, and it might be faster
comment|/**    * Takes the data from high-level cache for all stripes and returns to consumer.    * @return List of columns to read per stripe, if any columns were fully eliminated by cache.    */
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
index|[]
name|produceDataFromCache
parameter_list|(
name|int
name|rowIndexStride
parameter_list|)
throws|throws
name|IOException
block|{
name|OrcCacheKey
name|key
init|=
operator|new
name|OrcCacheKey
argument_list|(
name|fileId
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// For each stripe, keep a list of columns that are not fully in cache (null => all of them).
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Integer
argument_list|>
index|[]
name|stripeColsNotInCache
init|=
operator|new
name|List
index|[
name|readState
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|stripeIxMod
init|=
literal|0
init|;
name|stripeIxMod
operator|<
name|readState
operator|.
name|length
condition|;
operator|++
name|stripeIxMod
control|)
block|{
name|key
operator|.
name|stripeIx
operator|=
name|stripeIxFrom
operator|+
name|stripeIxMod
expr_stmt|;
name|boolean
index|[]
index|[]
name|cols
init|=
name|readState
index|[
name|stripeIxMod
index|]
decl_stmt|;
name|boolean
index|[]
name|isMissingAnyRgs
init|=
operator|new
name|boolean
index|[
name|cols
operator|.
name|length
index|]
decl_stmt|;
name|int
name|totalRgCount
init|=
name|getRgCount
argument_list|(
name|fileMetadata
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
name|key
operator|.
name|stripeIx
argument_list|)
argument_list|,
name|rowIndexStride
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|rgIx
init|=
literal|0
init|;
name|rgIx
operator|<
name|totalRgCount
condition|;
operator|++
name|rgIx
control|)
block|{
name|EncodedColumnBatch
argument_list|<
name|OrcBatchKey
argument_list|>
name|col
init|=
operator|new
name|EncodedColumnBatch
argument_list|<
name|OrcBatchKey
argument_list|>
argument_list|(
operator|new
name|OrcBatchKey
argument_list|(
name|fileId
argument_list|,
name|key
operator|.
name|stripeIx
argument_list|,
name|rgIx
argument_list|)
argument_list|,
name|cols
operator|.
name|length
argument_list|,
name|cols
operator|.
name|length
argument_list|)
decl_stmt|;
name|boolean
name|hasAnyCached
init|=
literal|false
decl_stmt|;
try|try
block|{
name|key
operator|.
name|rgIx
operator|=
name|rgIx
expr_stmt|;
for|for
control|(
name|int
name|colIxMod
init|=
literal|0
init|;
name|colIxMod
operator|<
name|cols
operator|.
name|length
condition|;
operator|++
name|colIxMod
control|)
block|{
name|boolean
index|[]
name|readMask
init|=
name|cols
index|[
name|colIxMod
index|]
decl_stmt|;
comment|// Check if RG is eliminated by SARG
if|if
condition|(
name|readMask
operator|!=
literal|null
operator|&&
operator|(
name|readMask
operator|.
name|length
operator|<=
name|rgIx
operator|||
operator|!
name|readMask
index|[
name|rgIx
index|]
operator|)
condition|)
continue|continue;
name|key
operator|.
name|colIx
operator|=
name|columnIds
operator|.
name|get
argument_list|(
name|colIxMod
argument_list|)
expr_stmt|;
name|StreamBuffer
index|[]
name|cached
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|==
literal|null
condition|)
block|{
name|isMissingAnyRgs
index|[
name|colIxMod
index|]
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
name|col
operator|.
name|setAllStreams
argument_list|(
name|colIxMod
argument_list|,
name|key
operator|.
name|colIx
argument_list|,
name|cached
argument_list|)
expr_stmt|;
name|hasAnyCached
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|readMask
operator|==
literal|null
condition|)
block|{
comment|// We were going to read all RGs, but some were in cache, allocate the mask.
name|cols
index|[
name|colIxMod
index|]
operator|=
name|readMask
operator|=
operator|new
name|boolean
index|[
name|totalRgCount
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|readMask
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|readMask
index|[
name|rgIx
index|]
operator|=
literal|false
expr_stmt|;
comment|// Got from cache, don't read from disk.
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// TODO: Any cleanup needed to release data in col back to cache should be here.
throw|throw
operator|(
name|t
operator|instanceof
name|IOException
operator|)
condition|?
operator|(
name|IOException
operator|)
name|t
else|:
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
if|if
condition|(
name|hasAnyCached
condition|)
block|{
name|consumer
operator|.
name|consumeData
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|makeStripeColList
init|=
literal|false
decl_stmt|;
comment|// By default assume we'll fetch all original columns.
for|for
control|(
name|int
name|colIxMod
init|=
literal|0
init|;
name|colIxMod
operator|<
name|cols
operator|.
name|length
condition|;
operator|++
name|colIxMod
control|)
block|{
if|if
condition|(
name|isMissingAnyRgs
index|[
name|colIxMod
index|]
condition|)
block|{
if|if
condition|(
name|makeStripeColList
condition|)
block|{
name|stripeColsNotInCache
index|[
name|stripeIxMod
index|]
operator|.
name|add
argument_list|(
name|columnIds
operator|.
name|get
argument_list|(
name|colIxMod
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|makeStripeColList
condition|)
block|{
comment|// Some columns were fully in cache. Make a per-stripe col list, add previous columns.
name|makeStripeColList
operator|=
literal|true
expr_stmt|;
name|stripeColsNotInCache
index|[
name|stripeIxMod
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|cols
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colIxMod
condition|;
operator|++
name|i
control|)
block|{
name|stripeColsNotInCache
index|[
name|stripeIxMod
index|]
operator|.
name|add
argument_list|(
name|columnIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|stripeColsNotInCache
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDone
parameter_list|()
block|{
name|consumer
operator|.
name|setDone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|consumeData
parameter_list|(
name|EncodedColumnBatch
argument_list|<
name|OrcBatchKey
argument_list|>
name|data
parameter_list|)
block|{
comment|// Store object in cache; create new key object - cannot be reused.
assert|assert
name|cache
operator|!=
literal|null
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|columnData
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|OrcCacheKey
name|key
init|=
operator|new
name|OrcCacheKey
argument_list|(
name|data
operator|.
name|batchKey
argument_list|,
name|data
operator|.
name|columnIxs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|StreamBuffer
index|[]
name|toCache
init|=
name|data
operator|.
name|columnData
index|[
name|i
index|]
decl_stmt|;
name|StreamBuffer
index|[]
name|cached
init|=
name|cache
operator|.
name|cacheOrGet
argument_list|(
name|key
argument_list|,
name|toCache
argument_list|)
decl_stmt|;
if|if
condition|(
name|toCache
operator|!=
name|cached
condition|)
block|{
for|for
control|(
name|StreamBuffer
name|sb
range|:
name|toCache
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|decRef
argument_list|()
operator|!=
literal|0
condition|)
continue|continue;
name|lowLevelCache
operator|.
name|releaseBuffers
argument_list|(
name|sb
operator|.
name|cacheBuffers
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|columnData
index|[
name|i
index|]
operator|=
name|cached
expr_stmt|;
block|}
block|}
name|consumer
operator|.
name|consumeData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

