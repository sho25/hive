begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|counters
operator|.
name|LlapIOCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|DataReaderProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|OrcIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|OrcTail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|SchemaEvolution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|Pool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|Pool
operator|.
name|PoolObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|Allocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|EncodedColumnBatch
operator|.
name|ColumnStreamData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|ConsumerFeedback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|BufferUsageManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCache
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|counters
operator|.
name|QueryFragmentCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|decode
operator|.
name|OrcEncodedDataConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
operator|.
name|OrcFileMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
operator|.
name|OrcMetadataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
operator|.
name|OrcStripeMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DDLTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HdfsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|DataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcFile
operator|.
name|ReaderOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
operator|.
name|EncodedOrcFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
operator|.
name|EncodedReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
operator|.
name|OrcBatchKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
operator|.
name|Reader
operator|.
name|OrcEncodedColumnBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
operator|.
name|Reader
operator|.
name|PoolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|RecordReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StripeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|FixedSizedObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|CallableWithNdc
import|;
end_import

begin_comment
comment|/**  * This produces EncodedColumnBatch via ORC EncodedDataImpl.  * It serves as Consumer for EncodedColumnBatch too, for the high-level cache scenario where  * it inserts itself into the pipeline to put the data in cache, before passing it to the real  * consumer. It also serves as ConsumerFeedback that receives processed EncodedColumnBatch-es.  */
end_comment

begin_class
specifier|public
class|class
name|OrcEncodedDataReader
extends|extends
name|CallableWithNdc
argument_list|<
name|Void
argument_list|>
implements|implements
name|ConsumerFeedback
argument_list|<
name|OrcEncodedColumnBatch
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OrcEncodedDataReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|FixedSizedObjectPool
argument_list|<
name|ColumnStreamData
argument_list|>
name|CSD_POOL
init|=
operator|new
name|FixedSizedObjectPool
argument_list|<>
argument_list|(
literal|8192
argument_list|,
operator|new
name|PoolObjectHelper
argument_list|<
name|ColumnStreamData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ColumnStreamData
name|create
parameter_list|()
block|{
return|return
operator|new
name|ColumnStreamData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetBeforeOffer
parameter_list|(
name|ColumnStreamData
name|t
parameter_list|)
block|{
name|t
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|FixedSizedObjectPool
argument_list|<
name|OrcEncodedColumnBatch
argument_list|>
name|ECB_POOL
init|=
operator|new
name|FixedSizedObjectPool
argument_list|<>
argument_list|(
literal|1024
argument_list|,
operator|new
name|PoolObjectHelper
argument_list|<
name|OrcEncodedColumnBatch
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OrcEncodedColumnBatch
name|create
parameter_list|()
block|{
return|return
operator|new
name|OrcEncodedColumnBatch
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetBeforeOffer
parameter_list|(
name|OrcEncodedColumnBatch
name|t
parameter_list|)
block|{
name|t
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PoolFactory
name|POOL_FACTORY
init|=
operator|new
name|PoolFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Pool
argument_list|<
name|T
argument_list|>
name|createPool
parameter_list|(
name|int
name|size
parameter_list|,
name|PoolObjectHelper
argument_list|<
name|T
argument_list|>
name|helper
parameter_list|)
block|{
return|return
operator|new
name|FixedSizedObjectPool
argument_list|<>
argument_list|(
name|size
argument_list|,
name|helper
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Pool
argument_list|<
name|ColumnStreamData
argument_list|>
name|createColumnStreamDataPool
parameter_list|()
block|{
return|return
name|CSD_POOL
return|;
block|}
annotation|@
name|Override
specifier|public
name|Pool
argument_list|<
name|OrcEncodedColumnBatch
argument_list|>
name|createEncodedColumnBatchPool
parameter_list|()
block|{
return|return
name|ECB_POOL
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OrcMetadataCache
name|metadataCache
decl_stmt|;
specifier|private
specifier|final
name|LowLevelCache
name|lowLevelCache
decl_stmt|;
specifier|private
specifier|final
name|BufferUsageManager
name|bufferManager
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSplit
name|split
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|includedColumnIds
decl_stmt|;
specifier|private
specifier|final
name|SearchArgument
name|sarg
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|columnNames
decl_stmt|;
specifier|private
specifier|final
name|OrcEncodedDataConsumer
name|consumer
decl_stmt|;
specifier|private
specifier|final
name|QueryFragmentCounters
name|counters
decl_stmt|;
specifier|private
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
comment|// Read state.
specifier|private
name|int
name|stripeIxFrom
decl_stmt|;
specifier|private
name|OrcFileMetadata
name|fileMetadata
decl_stmt|;
specifier|private
name|Path
name|path
decl_stmt|;
specifier|private
name|Reader
name|orcReader
decl_stmt|;
specifier|private
name|DataReader
name|metadataReader
decl_stmt|;
specifier|private
name|EncodedReader
name|stripeReader
decl_stmt|;
specifier|private
name|Object
name|fileKey
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
comment|/**    * readState[stripeIx'][colIx'] => boolean array (could be a bitmask) of rg-s that need to be    * read. Contains only stripes that are read, and only columns included. null => read all RGs.    */
specifier|private
name|boolean
index|[]
index|[]
index|[]
name|readState
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|isStopped
init|=
literal|false
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|volatile
name|boolean
name|isPaused
init|=
literal|false
decl_stmt|;
name|boolean
index|[]
name|globalIncludes
init|=
literal|null
decl_stmt|;
specifier|public
name|OrcEncodedDataReader
parameter_list|(
name|LowLevelCache
name|lowLevelCache
parameter_list|,
name|BufferUsageManager
name|bufferManager
parameter_list|,
name|OrcMetadataCache
name|metadataCache
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSplit
name|split
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
parameter_list|,
name|SearchArgument
name|sarg
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|OrcEncodedDataConsumer
name|consumer
parameter_list|,
name|QueryFragmentCounters
name|counters
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|lowLevelCache
operator|=
name|lowLevelCache
expr_stmt|;
name|this
operator|.
name|metadataCache
operator|=
name|metadataCache
expr_stmt|;
name|this
operator|.
name|bufferManager
operator|=
name|bufferManager
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|split
operator|=
name|split
expr_stmt|;
name|this
operator|.
name|includedColumnIds
operator|=
name|columnIds
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|includedColumnIds
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|this
operator|.
name|includedColumnIds
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|sarg
operator|=
name|sarg
expr_stmt|;
name|this
operator|.
name|columnNames
operator|=
name|columnNames
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|counters
operator|=
name|counters
expr_stmt|;
try|try
block|{
name|this
operator|.
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// moved this part of code from performDataRead as LlapInputFormat need to know the file schema
comment|// to decide if schema evolution is supported or not
name|orcReader
operator|=
literal|null
expr_stmt|;
comment|// 1. Get file metadata from cache, or create the reader and read it.
comment|// Don't cache the filesystem object for now; Tez closes it and FS cache will fix all that
name|fs
operator|=
name|split
operator|.
name|getPath
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fileKey
operator|=
name|determineFileId
argument_list|(
name|fs
argument_list|,
name|split
argument_list|,
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_CACHE_ALLOW_SYNTHETIC_FILEID
argument_list|)
argument_list|)
expr_stmt|;
name|fileMetadata
operator|=
name|getOrReadFileMetadata
argument_list|()
expr_stmt|;
name|globalIncludes
operator|=
name|OrcInputFormat
operator|.
name|genIncludedColumns
argument_list|(
name|fileMetadata
operator|.
name|getTypes
argument_list|()
argument_list|,
name|includedColumnIds
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setFileMetadata
argument_list|(
name|fileMetadata
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setIncludedColumns
argument_list|(
name|globalIncludes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Encoded reader is being stopped"
argument_list|)
expr_stmt|;
name|isStopped
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|pause
parameter_list|()
block|{
name|isPaused
operator|=
literal|true
expr_stmt|;
comment|// TODO: pause fetching
block|}
annotation|@
name|Override
specifier|public
name|void
name|unpause
parameter_list|()
block|{
name|isPaused
operator|=
literal|false
expr_stmt|;
comment|// TODO: unpause fetching
block|}
annotation|@
name|Override
specifier|protected
name|Void
name|callInternal
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|performDataRead
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|protected
name|Void
name|performDataRead
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|counters
operator|.
name|startTimeCounter
argument_list|()
decl_stmt|;
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing data for {}"
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|processStop
argument_list|()
condition|)
block|{
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|counters
operator|.
name|setDesc
argument_list|(
name|QueryFragmentCounters
operator|.
name|Desc
operator|.
name|TABLE
argument_list|,
name|getDbAndTableName
argument_list|(
name|split
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|counters
operator|.
name|setDesc
argument_list|(
name|QueryFragmentCounters
operator|.
name|Desc
operator|.
name|FILE
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
operator|+
operator|(
name|fileKey
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|fileKey
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|validateFileMetadata
argument_list|()
expr_stmt|;
if|if
condition|(
name|includedColumnIds
operator|==
literal|null
condition|)
block|{
name|includedColumnIds
operator|=
name|getAllColumnIds
argument_list|(
name|fileMetadata
argument_list|)
expr_stmt|;
block|}
comment|// 2. Determine which stripes to read based on the split.
name|determineStripesToRead
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|readState
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|consumer
operator|.
name|setDone
argument_list|()
expr_stmt|;
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// No data to read.
block|}
name|counters
operator|.
name|setDesc
argument_list|(
name|QueryFragmentCounters
operator|.
name|Desc
operator|.
name|STRIPES
argument_list|,
name|stripeIxFrom
operator|+
literal|","
operator|+
name|readState
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// 3. Apply SARG if needed, and otherwise determine what RGs to read.
name|int
name|stride
init|=
name|fileMetadata
operator|.
name|getRowIndexStride
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|OrcStripeMetadata
argument_list|>
name|stripeMetadatas
init|=
literal|null
decl_stmt|;
name|boolean
index|[]
name|sargColumns
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sarg
operator|!=
literal|null
operator|&&
name|stride
operator|!=
literal|0
condition|)
block|{
comment|// TODO: move this to a common method
name|int
index|[]
name|filterColumns
init|=
name|RecordReaderImpl
operator|.
name|mapSargColumnsToOrcInternalColIdx
argument_list|(
name|sarg
operator|.
name|getLeaves
argument_list|()
argument_list|,
name|columnNames
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// included will not be null, row options will fill the array with trues if null
name|sargColumns
operator|=
operator|new
name|boolean
index|[
name|globalIncludes
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
range|:
name|filterColumns
control|)
block|{
comment|// filter columns may have -1 as index which could be partition column in SARG.
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sargColumns
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// If SARG is present, get relevant stripe metadata from cache or readers.
name|stripeMetadatas
operator|=
name|readStripesMetadata
argument_list|(
name|globalIncludes
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
block|}
comment|// Now, apply SARG if any; w/o sarg, this will just initialize readState.
name|boolean
name|hasData
init|=
name|determineRgsToRead
argument_list|(
name|globalIncludes
argument_list|,
name|stride
argument_list|,
name|stripeMetadatas
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasData
condition|)
block|{
name|consumer
operator|.
name|setDone
argument_list|()
expr_stmt|;
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// No data to read.
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|cleanupReaders
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|processStop
argument_list|()
condition|)
block|{
name|cleanupReaders
argument_list|()
expr_stmt|;
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// 4. Create encoded data reader.
try|try
block|{
name|ensureOrcReader
argument_list|()
expr_stmt|;
comment|// Reader creating updates HDFS counters, don't do it here.
name|DataWrapperForOrc
name|dw
init|=
operator|new
name|DataWrapperForOrc
argument_list|()
decl_stmt|;
name|stripeReader
operator|=
name|orcReader
operator|.
name|encodedReader
argument_list|(
name|fileKey
argument_list|,
name|dw
argument_list|,
name|dw
argument_list|,
name|POOL_FACTORY
argument_list|)
expr_stmt|;
name|stripeReader
operator|.
name|setTracing
argument_list|(
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|cleanupReaders
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// 6. Read data.
comment|// TODO: I/O threadpool could be here - one thread per stripe; for now, linear.
name|boolean
name|hasFileId
init|=
name|this
operator|.
name|fileKey
operator|!=
literal|null
decl_stmt|;
name|OrcBatchKey
name|stripeKey
init|=
name|hasFileId
condition|?
operator|new
name|OrcBatchKey
argument_list|(
name|fileKey
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
else|:
literal|null
decl_stmt|;
for|for
control|(
name|int
name|stripeIxMod
init|=
literal|0
init|;
name|stripeIxMod
operator|<
name|readState
operator|.
name|length
condition|;
operator|++
name|stripeIxMod
control|)
block|{
if|if
condition|(
name|processStop
argument_list|()
condition|)
block|{
name|cleanupReaders
argument_list|()
expr_stmt|;
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|int
name|stripeIx
init|=
name|stripeIxFrom
operator|+
name|stripeIxMod
decl_stmt|;
name|boolean
index|[]
index|[]
name|colRgs
init|=
literal|null
decl_stmt|;
name|OrcStripeMetadata
name|stripeMetadata
init|=
literal|null
decl_stmt|;
name|StripeInformation
name|stripe
decl_stmt|;
try|try
block|{
name|stripe
operator|=
name|fileMetadata
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
name|stripeIx
argument_list|)
expr_stmt|;
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Reading stripe {}: {}, {}"
argument_list|,
name|stripeIx
argument_list|,
name|stripe
operator|.
name|getOffset
argument_list|()
argument_list|,
name|stripe
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|colRgs
operator|=
name|readState
index|[
name|stripeIxMod
index|]
expr_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"readState[{}]: {}"
argument_list|,
name|stripeIxMod
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|colRgs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We assume that NO_RGS value is only set from SARG filter and for all columns;
comment|// intermediate changes for individual columns will unset values in the array.
comment|// Skip this case for 0-column read. We could probably special-case it just like we do
comment|// in EncodedReaderImpl, but for now it's not that important.
if|if
condition|(
name|colRgs
operator|.
name|length
operator|>
literal|0
operator|&&
name|colRgs
index|[
literal|0
index|]
operator|==
name|RecordReaderImpl
operator|.
name|SargApplier
operator|.
name|READ_NO_RGS
condition|)
continue|continue;
comment|// 6.2. Ensure we have stripe metadata. We might have read it before for RG filtering.
name|boolean
name|isFoundInCache
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|stripeMetadatas
operator|!=
literal|null
condition|)
block|{
name|stripeMetadata
operator|=
name|stripeMetadatas
operator|.
name|get
argument_list|(
name|stripeIxMod
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasFileId
operator|&&
name|metadataCache
operator|!=
literal|null
condition|)
block|{
name|stripeKey
operator|.
name|stripeIx
operator|=
name|stripeIx
expr_stmt|;
name|stripeMetadata
operator|=
name|metadataCache
operator|.
name|getStripeMetadata
argument_list|(
name|stripeKey
argument_list|)
expr_stmt|;
block|}
name|isFoundInCache
operator|=
operator|(
name|stripeMetadata
operator|!=
literal|null
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|isFoundInCache
condition|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|METADATA_CACHE_MISS
argument_list|)
expr_stmt|;
name|ensureMetadataReader
argument_list|()
expr_stmt|;
name|long
name|startTimeHdfs
init|=
name|counters
operator|.
name|startTimeCounter
argument_list|()
decl_stmt|;
name|stripeMetadata
operator|=
operator|new
name|OrcStripeMetadata
argument_list|(
operator|new
name|OrcBatchKey
argument_list|(
name|fileKey
argument_list|,
name|stripeIx
argument_list|,
literal|0
argument_list|)
argument_list|,
name|metadataReader
argument_list|,
name|stripe
argument_list|,
name|globalIncludes
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrTimeCounter
argument_list|(
name|LlapIOCounters
operator|.
name|HDFS_TIME_NS
argument_list|,
name|startTimeHdfs
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFileId
operator|&&
name|metadataCache
operator|!=
literal|null
condition|)
block|{
name|stripeMetadata
operator|=
name|metadataCache
operator|.
name|putStripeMetadata
argument_list|(
name|stripeMetadata
argument_list|)
expr_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Caching stripe {} metadata with includes: {}"
argument_list|,
name|stripeKey
operator|.
name|stripeIx
argument_list|,
name|DebugUtils
operator|.
name|toString
argument_list|(
name|globalIncludes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|consumer
operator|.
name|setStripeMetadata
argument_list|(
name|stripeMetadata
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|stripeMetadata
operator|.
name|hasAllIndexes
argument_list|(
name|globalIncludes
argument_list|)
condition|)
block|{
if|if
condition|(
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Updating indexes in stripe {} metadata for includes: {}"
argument_list|,
name|stripeKey
operator|.
name|stripeIx
argument_list|,
name|DebugUtils
operator|.
name|toString
argument_list|(
name|globalIncludes
argument_list|)
argument_list|)
expr_stmt|;
block|}
assert|assert
name|isFoundInCache
assert|;
name|counters
operator|.
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|METADATA_CACHE_MISS
argument_list|)
expr_stmt|;
name|ensureMetadataReader
argument_list|()
expr_stmt|;
name|updateLoadedIndexes
argument_list|(
name|stripeMetadata
argument_list|,
name|stripe
argument_list|,
name|globalIncludes
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isFoundInCache
condition|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|METADATA_CACHE_HIT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|cleanupReaders
argument_list|()
expr_stmt|;
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|processStop
argument_list|()
condition|)
block|{
name|cleanupReaders
argument_list|()
expr_stmt|;
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// 5.2. Finally, hand off to the stripe reader to produce the data.
comment|//      This is a sync call that will feed data to the consumer.
try|try
block|{
comment|// TODO: readEncodedColumns is not supposed to throw; errors should be propagated thru
comment|// consumer. It is potentially holding locked buffers, and must perform its own cleanup.
comment|// Also, currently readEncodedColumns is not stoppable. The consumer will discard the
comment|// data it receives for one stripe. We could probably interrupt it, if it checked that.
name|stripeReader
operator|.
name|readEncodedColumns
argument_list|(
name|stripeIx
argument_list|,
name|stripe
argument_list|,
name|stripeMetadata
operator|.
name|getRowIndexes
argument_list|()
argument_list|,
name|stripeMetadata
operator|.
name|getEncodings
argument_list|()
argument_list|,
name|stripeMetadata
operator|.
name|getStreams
argument_list|()
argument_list|,
name|globalIncludes
argument_list|,
name|colRgs
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|cleanupReaders
argument_list|()
expr_stmt|;
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// Done with all the things.
name|recordReaderTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setDone
argument_list|()
expr_stmt|;
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|trace
argument_list|(
literal|"done processing {}"
argument_list|,
name|split
argument_list|)
expr_stmt|;
comment|// Close the stripe reader, we are done reading.
name|cleanupReaders
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|recordReaderTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|counters
operator|.
name|incrTimeCounter
argument_list|(
name|LlapIOCounters
operator|.
name|TOTAL_IO_TIME_NS
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getDbAndTableName
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// Ideally, we'd get this from split; however, split doesn't contain any such thing and it's
comment|// actually pretty hard to get cause even split generator only uses paths. We only need this
comment|// for metrics; therefore, brace for BLACK MAGIC!
name|String
index|[]
name|parts
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
name|int
name|dbIx
init|=
operator|-
literal|1
decl_stmt|;
comment|// Try to find the default db postfix; don't check two last components - at least there
comment|// should be a table and file (we could also try to throw away partition/bucket/acid stuff).
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|length
operator|-
literal|2
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|parts
index|[
name|i
index|]
operator|.
name|endsWith
argument_list|(
name|DDLTask
operator|.
name|DATABASE_PATH_SUFFIX
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|dbIx
operator|>=
literal|0
condition|)
block|{
name|dbIx
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Let's not guess.
break|break;
block|}
name|dbIx
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|dbIx
operator|>=
literal|0
condition|)
block|{
return|return
name|parts
index|[
name|dbIx
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|parts
index|[
name|dbIx
index|]
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
operator|+
literal|"."
operator|+
name|parts
index|[
name|dbIx
operator|+
literal|1
index|]
return|;
block|}
comment|// Just go from the back and throw away everything we think is wrong; skip last item, the file.
name|boolean
name|isInPartFields
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|parts
operator|.
name|length
operator|-
literal|2
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|String
name|p
init|=
name|parts
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|isPartField
init|=
name|p
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|isInPartFields
operator|&&
operator|!
name|isPartField
operator|)
operator|||
operator|(
operator|!
name|isPartField
operator|&&
operator|!
name|p
operator|.
name|startsWith
argument_list|(
name|AcidUtils
operator|.
name|BASE_PREFIX
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|startsWith
argument_list|(
name|AcidUtils
operator|.
name|DELTA_PREFIX
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|startsWith
argument_list|(
name|AcidUtils
operator|.
name|BUCKET_PREFIX
argument_list|)
operator|)
condition|)
block|{
name|dbIx
operator|=
name|i
operator|-
literal|1
expr_stmt|;
break|break;
block|}
name|isInPartFields
operator|=
name|isPartField
expr_stmt|;
block|}
comment|// If we found something before we ran out of components, use it.
if|if
condition|(
name|dbIx
operator|>=
literal|0
condition|)
block|{
name|String
name|dbName
init|=
name|parts
index|[
name|dbIx
index|]
decl_stmt|;
if|if
condition|(
name|dbName
operator|.
name|endsWith
argument_list|(
name|DDLTask
operator|.
name|DATABASE_PATH_SUFFIX
argument_list|)
condition|)
block|{
name|dbName
operator|=
name|dbName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dbName
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
expr_stmt|;
block|}
return|return
name|dbName
operator|+
literal|"."
operator|+
name|parts
index|[
name|dbIx
operator|+
literal|1
index|]
return|;
block|}
return|return
literal|"unknown"
return|;
block|}
specifier|private
name|void
name|validateFileMetadata
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileMetadata
operator|.
name|getCompressionKind
argument_list|()
operator|==
name|CompressionKind
operator|.
name|NONE
condition|)
return|return;
name|int
name|bufferSize
init|=
name|fileMetadata
operator|.
name|getCompressionBufferSize
argument_list|()
decl_stmt|;
name|long
name|minAllocSize
init|=
name|HiveConf
operator|.
name|getSizeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MIN_ALLOC
argument_list|)
decl_stmt|;
if|if
condition|(
name|bufferSize
operator|<
name|minAllocSize
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ORC compression buffer size ("
operator|+
name|bufferSize
operator|+
literal|") is smaller than LLAP low-level "
operator|+
literal|"cache minimum allocation size ("
operator|+
name|minAllocSize
operator|+
literal|"). Decrease the value for "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ALLOCATOR_MIN_ALLOC
operator|.
name|toString
argument_list|()
operator|+
literal|" to avoid wasting memory"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|processStop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isStopped
condition|)
return|return
literal|false
return|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Encoded data reader is stopping"
argument_list|)
expr_stmt|;
name|cleanupReaders
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|Object
name|determineFileId
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileSplit
name|split
parameter_list|,
name|boolean
name|allowSynthetic
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|split
operator|instanceof
name|OrcSplit
condition|)
block|{
name|Object
name|fileKey
init|=
operator|(
operator|(
name|OrcSplit
operator|)
name|split
operator|)
operator|.
name|getFileKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileKey
operator|!=
literal|null
condition|)
block|{
return|return
name|fileKey
return|;
block|}
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Split for "
operator|+
name|split
operator|.
name|getPath
argument_list|()
operator|+
literal|" ("
operator|+
name|split
operator|.
name|getClass
argument_list|()
operator|+
literal|") does not have file ID"
argument_list|)
expr_stmt|;
return|return
name|HdfsUtils
operator|.
name|getFileId
argument_list|(
name|fs
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
argument_list|,
name|allowSynthetic
argument_list|)
return|;
block|}
comment|/**    * Puts all column indexes from metadata to make a column list to read all column.    */
specifier|private
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|getAllColumnIds
parameter_list|(
name|OrcFileMetadata
name|metadata
parameter_list|)
block|{
name|int
name|rootColumn
init|=
name|OrcInputFormat
operator|.
name|getRootColumn
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|types
init|=
name|metadata
operator|.
name|getTypes
argument_list|()
operator|.
name|get
argument_list|(
name|rootColumn
argument_list|)
operator|.
name|getSubtypesList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|types
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|columnIds
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|columnIds
return|;
block|}
comment|/**    * In case if stripe metadata in cache does not have all indexes for current query, load    * the missing one. This is a temporary cludge until real metadata cache becomes available.    */
specifier|private
name|void
name|updateLoadedIndexes
parameter_list|(
name|OrcStripeMetadata
name|stripeMetadata
parameter_list|,
name|StripeInformation
name|stripe
parameter_list|,
name|boolean
index|[]
name|stripeIncludes
parameter_list|,
name|boolean
index|[]
name|sargColumns
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We only synchronize on write for now - design of metadata cache is very temporary;
comment|// we pre-allocate the array and never remove entries; so readers should be safe.
synchronized|synchronized
init|(
name|stripeMetadata
init|)
block|{
if|if
condition|(
name|stripeMetadata
operator|.
name|hasAllIndexes
argument_list|(
name|stripeIncludes
argument_list|)
condition|)
return|return;
name|long
name|startTime
init|=
name|counters
operator|.
name|startTimeCounter
argument_list|()
decl_stmt|;
name|stripeMetadata
operator|.
name|loadMissingIndexes
argument_list|(
name|metadataReader
argument_list|,
name|stripe
argument_list|,
name|stripeIncludes
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrTimeCounter
argument_list|(
name|LlapIOCounters
operator|.
name|HDFS_TIME_NS
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Closes the stripe readers (on error).    */
specifier|private
name|void
name|cleanupReaders
parameter_list|()
block|{
if|if
condition|(
name|stripeReader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stripeReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Ignore.
block|}
block|}
if|if
condition|(
name|metadataReader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|metadataReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Ignore.
block|}
block|}
block|}
comment|/**    * Ensures orcReader is initialized for the split.    */
specifier|private
name|void
name|ensureOrcReader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|orcReader
operator|!=
literal|null
condition|)
return|return;
name|path
operator|=
name|split
operator|.
name|getPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileKey
operator|instanceof
name|Long
operator|&&
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_USE_FILEID_PATH
argument_list|)
condition|)
block|{
name|path
operator|=
name|HdfsUtils
operator|.
name|getFileIdPath
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
operator|(
name|long
operator|)
name|fileKey
argument_list|)
expr_stmt|;
block|}
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Creating reader for {} ({})"
argument_list|,
name|path
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|counters
operator|.
name|startTimeCounter
argument_list|()
decl_stmt|;
name|ReaderOptions
name|opts
init|=
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
operator|.
name|fileMetadata
argument_list|(
name|fileMetadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|instanceof
name|OrcSplit
condition|)
block|{
name|OrcTail
name|orcTail
init|=
operator|(
operator|(
name|OrcSplit
operator|)
name|split
operator|)
operator|.
name|getOrcTail
argument_list|()
decl_stmt|;
if|if
condition|(
name|orcTail
operator|!=
literal|null
condition|)
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|debug
argument_list|(
literal|"Setting OrcTail. path={}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|opts
operator|.
name|orcTail
argument_list|(
name|orcTail
argument_list|)
expr_stmt|;
block|}
block|}
name|orcReader
operator|=
name|EncodedOrcFile
operator|.
name|createReader
argument_list|(
name|path
argument_list|,
name|opts
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrTimeCounter
argument_list|(
name|LlapIOCounters
operator|.
name|HDFS_TIME_NS
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
comment|/**    *  Gets file metadata for the split from cache, or reads it from the file.    */
specifier|private
name|OrcFileMetadata
name|getOrReadFileMetadata
parameter_list|()
throws|throws
name|IOException
block|{
name|OrcFileMetadata
name|metadata
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fileKey
operator|!=
literal|null
operator|&&
name|metadataCache
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|=
name|metadataCache
operator|.
name|getFileMetadata
argument_list|(
name|fileKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|METADATA_CACHE_HIT
argument_list|)
expr_stmt|;
return|return
name|metadata
return|;
block|}
else|else
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|METADATA_CACHE_MISS
argument_list|)
expr_stmt|;
block|}
block|}
name|ensureOrcReader
argument_list|()
expr_stmt|;
comment|// We assume this call doesn't touch HDFS because everything is already read; don't add time.
name|metadata
operator|=
operator|new
name|OrcFileMetadata
argument_list|(
name|fileKey
argument_list|,
name|orcReader
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileKey
operator|==
literal|null
operator|||
name|metadataCache
operator|==
literal|null
condition|)
return|return
name|metadata
return|;
return|return
name|metadataCache
operator|.
name|putFileMetadata
argument_list|(
name|metadata
argument_list|)
return|;
block|}
comment|/**    * Reads the metadata for all stripes in the file.    */
specifier|private
name|ArrayList
argument_list|<
name|OrcStripeMetadata
argument_list|>
name|readStripesMetadata
parameter_list|(
name|boolean
index|[]
name|globalInc
parameter_list|,
name|boolean
index|[]
name|sargColumns
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|OrcStripeMetadata
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|OrcStripeMetadata
argument_list|>
argument_list|(
name|readState
operator|.
name|length
argument_list|)
decl_stmt|;
name|boolean
name|hasFileId
init|=
name|this
operator|.
name|fileKey
operator|!=
literal|null
decl_stmt|;
name|OrcBatchKey
name|stripeKey
init|=
name|hasFileId
condition|?
operator|new
name|OrcBatchKey
argument_list|(
name|fileKey
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
else|:
literal|null
decl_stmt|;
for|for
control|(
name|int
name|stripeIxMod
init|=
literal|0
init|;
name|stripeIxMod
operator|<
name|readState
operator|.
name|length
condition|;
operator|++
name|stripeIxMod
control|)
block|{
name|OrcStripeMetadata
name|value
init|=
literal|null
decl_stmt|;
name|int
name|stripeIx
init|=
name|stripeIxMod
operator|+
name|stripeIxFrom
decl_stmt|;
if|if
condition|(
name|hasFileId
operator|&&
name|metadataCache
operator|!=
literal|null
condition|)
block|{
name|stripeKey
operator|.
name|stripeIx
operator|=
name|stripeIx
expr_stmt|;
name|value
operator|=
name|metadataCache
operator|.
name|getStripeMetadata
argument_list|(
name|stripeKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|||
operator|!
name|value
operator|.
name|hasAllIndexes
argument_list|(
name|globalInc
argument_list|)
condition|)
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|METADATA_CACHE_MISS
argument_list|)
expr_stmt|;
name|ensureMetadataReader
argument_list|()
expr_stmt|;
name|StripeInformation
name|si
init|=
name|fileMetadata
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
name|stripeIx
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|long
name|startTime
init|=
name|counters
operator|.
name|startTimeCounter
argument_list|()
decl_stmt|;
name|value
operator|=
operator|new
name|OrcStripeMetadata
argument_list|(
operator|new
name|OrcBatchKey
argument_list|(
name|fileKey
argument_list|,
name|stripeIx
argument_list|,
literal|0
argument_list|)
argument_list|,
name|metadataReader
argument_list|,
name|si
argument_list|,
name|globalInc
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrTimeCounter
argument_list|(
name|LlapIOCounters
operator|.
name|HDFS_TIME_NS
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasFileId
operator|&&
name|metadataCache
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|metadataCache
operator|.
name|putStripeMetadata
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Caching stripe {} metadata with includes: {}"
argument_list|,
name|stripeKey
operator|.
name|stripeIx
argument_list|,
name|DebugUtils
operator|.
name|toString
argument_list|(
name|globalInc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// We might have got an old value from cache; recheck it has indexes.
if|if
condition|(
operator|!
name|value
operator|.
name|hasAllIndexes
argument_list|(
name|globalInc
argument_list|)
condition|)
block|{
if|if
condition|(
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Updating indexes in stripe {} metadata for includes: {}"
argument_list|,
name|stripeKey
operator|.
name|stripeIx
argument_list|,
name|DebugUtils
operator|.
name|toString
argument_list|(
name|globalInc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateLoadedIndexes
argument_list|(
name|value
argument_list|,
name|si
argument_list|,
name|globalInc
argument_list|,
name|sargColumns
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|counters
operator|.
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|METADATA_CACHE_HIT
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setStripeMetadata
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|ensureMetadataReader
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOrcReader
argument_list|()
expr_stmt|;
if|if
condition|(
name|metadataReader
operator|!=
literal|null
condition|)
return|return;
name|long
name|startTime
init|=
name|counters
operator|.
name|startTimeCounter
argument_list|()
decl_stmt|;
name|boolean
name|useZeroCopy
init|=
operator|(
name|conf
operator|!=
literal|null
operator|)
operator|&&
name|OrcConf
operator|.
name|USE_ZEROCOPY
operator|.
name|getBoolean
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|metadataReader
operator|=
name|RecordReaderUtils
operator|.
name|createDefaultDataReader
argument_list|(
name|DataReaderProperties
operator|.
name|builder
argument_list|()
operator|.
name|withBufferSize
argument_list|(
name|orcReader
operator|.
name|getCompressionSize
argument_list|()
argument_list|)
operator|.
name|withCompression
argument_list|(
name|orcReader
operator|.
name|getCompressionKind
argument_list|()
argument_list|)
operator|.
name|withFileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|withPath
argument_list|(
name|path
argument_list|)
operator|.
name|withTypeCount
argument_list|(
name|orcReader
operator|.
name|getSchema
argument_list|()
operator|.
name|getMaximumId
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|withZeroCopy
argument_list|(
name|useZeroCopy
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|counters
operator|.
name|incrTimeCounter
argument_list|(
name|LlapIOCounters
operator|.
name|HDFS_TIME_NS
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|returnData
parameter_list|(
name|OrcEncodedColumnBatch
name|ecb
parameter_list|)
block|{
for|for
control|(
name|int
name|colIx
init|=
literal|0
init|;
name|colIx
operator|<
name|ecb
operator|.
name|getTotalColCount
argument_list|()
condition|;
operator|++
name|colIx
control|)
block|{
if|if
condition|(
operator|!
name|ecb
operator|.
name|hasData
argument_list|(
name|colIx
argument_list|)
condition|)
continue|continue;
name|ColumnStreamData
index|[]
name|datas
init|=
name|ecb
operator|.
name|getColumnData
argument_list|(
name|colIx
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnStreamData
name|data
range|:
name|datas
control|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|data
operator|.
name|decRef
argument_list|()
operator|!=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|MemoryBuffer
name|buf
range|:
name|data
operator|.
name|getCacheBuffers
argument_list|()
control|)
block|{
name|LlapIoImpl
operator|.
name|LOCKING_LOGGER
operator|.
name|trace
argument_list|(
literal|"Unlocking {} at the end of processing"
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
name|bufferManager
operator|.
name|decRefBuffers
argument_list|(
name|data
operator|.
name|getCacheBuffers
argument_list|()
argument_list|)
expr_stmt|;
name|CSD_POOL
operator|.
name|offer
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We can offer ECB even with some streams not discarded; reset() will clear the arrays.
name|ECB_POOL
operator|.
name|offer
argument_list|(
name|ecb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Determines which RGs need to be read, after stripes have been determined.    * SARG is applied, and readState is populated for each stripe accordingly.    */
specifier|private
name|boolean
name|determineRgsToRead
parameter_list|(
name|boolean
index|[]
name|globalIncludes
parameter_list|,
name|int
name|rowIndexStride
parameter_list|,
name|ArrayList
argument_list|<
name|OrcStripeMetadata
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|RecordReaderImpl
operator|.
name|SargApplier
name|sargApp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sarg
operator|!=
literal|null
operator|&&
name|rowIndexStride
operator|!=
literal|0
condition|)
block|{
name|List
argument_list|<
name|OrcProto
operator|.
name|Type
argument_list|>
name|types
init|=
name|fileMetadata
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|String
index|[]
name|colNamesForSarg
init|=
name|OrcInputFormat
operator|.
name|getSargColumnNames
argument_list|(
name|columnNames
argument_list|,
name|types
argument_list|,
name|globalIncludes
argument_list|,
name|fileMetadata
operator|.
name|isOriginalFormat
argument_list|()
argument_list|)
decl_stmt|;
name|TypeDescription
name|schema
init|=
name|OrcUtils
operator|.
name|convertTypeFromProtobuf
argument_list|(
name|types
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SchemaEvolution
name|schemaEvolution
init|=
operator|new
name|SchemaEvolution
argument_list|(
name|schema
argument_list|,
name|globalIncludes
argument_list|)
decl_stmt|;
name|sargApp
operator|=
operator|new
name|RecordReaderImpl
operator|.
name|SargApplier
argument_list|(
name|sarg
argument_list|,
name|colNamesForSarg
argument_list|,
name|rowIndexStride
argument_list|,
name|globalIncludes
operator|.
name|length
argument_list|,
name|schemaEvolution
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasAnyData
init|=
literal|false
decl_stmt|;
comment|// readState should have been initialized by this time with an empty array.
for|for
control|(
name|int
name|stripeIxMod
init|=
literal|0
init|;
name|stripeIxMod
operator|<
name|readState
operator|.
name|length
condition|;
operator|++
name|stripeIxMod
control|)
block|{
name|int
name|stripeIx
init|=
name|stripeIxMod
operator|+
name|stripeIxFrom
decl_stmt|;
name|StripeInformation
name|stripe
init|=
name|fileMetadata
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
name|stripeIx
argument_list|)
decl_stmt|;
name|int
name|rgCount
init|=
name|getRgCount
argument_list|(
name|stripe
argument_list|,
name|rowIndexStride
argument_list|)
decl_stmt|;
name|boolean
index|[]
name|rgsToRead
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sargApp
operator|!=
literal|null
condition|)
block|{
name|OrcStripeMetadata
name|stripeMetadata
init|=
name|metadata
operator|.
name|get
argument_list|(
name|stripeIxMod
argument_list|)
decl_stmt|;
name|rgsToRead
operator|=
name|sargApp
operator|.
name|pickRowGroups
argument_list|(
name|stripe
argument_list|,
name|stripeMetadata
operator|.
name|getRowIndexes
argument_list|()
argument_list|,
name|stripeMetadata
operator|.
name|getBloomFilterIndexes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isNone
init|=
name|rgsToRead
operator|==
name|RecordReaderImpl
operator|.
name|SargApplier
operator|.
name|READ_NO_RGS
decl_stmt|,
name|isAll
init|=
name|rgsToRead
operator|==
name|RecordReaderImpl
operator|.
name|SargApplier
operator|.
name|READ_ALL_RGS
decl_stmt|;
name|hasAnyData
operator|=
name|hasAnyData
operator|||
operator|!
name|isNone
expr_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|isNone
condition|)
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"SARG eliminated all RGs for stripe {}"
argument_list|,
name|stripeIx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isAll
condition|)
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"SARG picked RGs for stripe {}: {}"
argument_list|,
name|stripeIx
argument_list|,
name|DebugUtils
operator|.
name|toString
argument_list|(
name|rgsToRead
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Will read all {} RGs for stripe {}"
argument_list|,
name|rgCount
argument_list|,
name|stripeIx
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
name|isAll
operator|||
name|isNone
operator|||
name|rgsToRead
operator|.
name|length
operator|==
name|rgCount
assert|;
name|int
name|fileIncludesCount
init|=
literal|0
decl_stmt|;
comment|// TODO: hacky for now - skip the root 0-s column.
comment|//        We don't need separate readState w/o HL cache, should get rid of that instead.
for|for
control|(
name|int
name|includeIx
init|=
literal|1
init|;
name|includeIx
operator|<
name|globalIncludes
operator|.
name|length
condition|;
operator|++
name|includeIx
control|)
block|{
name|fileIncludesCount
operator|+=
operator|(
name|globalIncludes
index|[
name|includeIx
index|]
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
block|}
name|readState
index|[
name|stripeIxMod
index|]
operator|=
operator|new
name|boolean
index|[
name|fileIncludesCount
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|includeIx
init|=
literal|0
init|;
name|includeIx
operator|<
name|fileIncludesCount
condition|;
operator|++
name|includeIx
control|)
block|{
name|readState
index|[
name|stripeIxMod
index|]
index|[
name|includeIx
index|]
operator|=
operator|(
name|isAll
operator|||
name|isNone
operator|)
condition|?
name|rgsToRead
else|:
name|Arrays
operator|.
name|copyOf
argument_list|(
name|rgsToRead
argument_list|,
name|rgsToRead
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|adjustRgMetric
argument_list|(
name|rgCount
argument_list|,
name|rgsToRead
argument_list|,
name|isNone
argument_list|,
name|isAll
argument_list|)
expr_stmt|;
block|}
return|return
name|hasAnyData
return|;
block|}
specifier|private
name|void
name|adjustRgMetric
parameter_list|(
name|int
name|rgCount
parameter_list|,
name|boolean
index|[]
name|rgsToRead
parameter_list|,
name|boolean
name|isNone
parameter_list|,
name|boolean
name|isAll
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|isAll
condition|)
block|{
for|for
control|(
name|boolean
name|b
range|:
name|rgsToRead
control|)
block|{
if|if
condition|(
name|b
condition|)
name|count
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isNone
condition|)
block|{
name|count
operator|=
name|rgCount
expr_stmt|;
block|}
name|counters
operator|.
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|SELECTED_ROWGROUPS
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getRgCount
parameter_list|(
name|StripeInformation
name|stripe
parameter_list|,
name|int
name|rowIndexStride
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|stripe
operator|.
name|getNumberOfRows
argument_list|()
operator|/
name|rowIndexStride
argument_list|)
return|;
block|}
comment|/**    * Determine which stripes to read for a split. Populates stripeIxFrom and readState.    */
specifier|public
name|void
name|determineStripesToRead
parameter_list|()
block|{
comment|// The unit of caching for ORC is (rg x column) (see OrcBatchKey).
name|List
argument_list|<
name|StripeInformation
argument_list|>
name|stripes
init|=
name|fileMetadata
operator|.
name|getStripes
argument_list|()
decl_stmt|;
name|long
name|offset
init|=
name|split
operator|.
name|getStart
argument_list|()
decl_stmt|,
name|maxOffset
init|=
name|offset
operator|+
name|split
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|stripeIxFrom
operator|=
operator|-
literal|1
expr_stmt|;
name|int
name|stripeIxTo
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|tmp
init|=
literal|"FileSplit {"
operator|+
name|split
operator|.
name|getStart
argument_list|()
operator|+
literal|", "
operator|+
name|split
operator|.
name|getLength
argument_list|()
operator|+
literal|"}; stripes "
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|stripes
control|)
block|{
name|tmp
operator|+=
literal|"{"
operator|+
name|stripe
operator|.
name|getOffset
argument_list|()
operator|+
literal|", "
operator|+
name|stripe
operator|.
name|getLength
argument_list|()
operator|+
literal|"}, "
expr_stmt|;
block|}
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|debug
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|int
name|stripeIx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StripeInformation
name|stripe
range|:
name|stripes
control|)
block|{
name|long
name|stripeStart
init|=
name|stripe
operator|.
name|getOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|>
name|stripeStart
condition|)
block|{
comment|// We assume splits will never start in the middle of the stripe.
operator|++
name|stripeIx
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|stripeIxFrom
operator|==
operator|-
literal|1
condition|)
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Including stripes from {} ({}>= {})"
argument_list|,
name|stripeIx
argument_list|,
name|stripeStart
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|stripeIxFrom
operator|=
name|stripeIx
expr_stmt|;
block|}
if|if
condition|(
name|stripeStart
operator|>=
name|maxOffset
condition|)
block|{
name|stripeIxTo
operator|=
name|stripeIx
expr_stmt|;
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Including stripes until {} ({}>= {}); {} stripes"
argument_list|,
name|stripeIxTo
argument_list|,
name|stripeStart
argument_list|,
name|maxOffset
argument_list|,
operator|(
name|stripeIxTo
operator|-
name|stripeIxFrom
operator|)
argument_list|)
expr_stmt|;
break|break;
block|}
operator|++
name|stripeIx
expr_stmt|;
block|}
if|if
condition|(
name|stripeIxFrom
operator|==
operator|-
literal|1
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Not including any stripes - empty split"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stripeIxTo
operator|==
operator|-
literal|1
operator|&&
name|stripeIxFrom
operator|!=
operator|-
literal|1
condition|)
block|{
name|stripeIxTo
operator|=
name|stripeIx
expr_stmt|;
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Including stripes until {} (end of file); {} stripes"
argument_list|,
name|stripeIx
argument_list|,
operator|(
name|stripeIxTo
operator|-
name|stripeIxFrom
operator|)
argument_list|)
expr_stmt|;
block|}
name|readState
operator|=
operator|new
name|boolean
index|[
name|stripeIxTo
operator|-
name|stripeIxFrom
index|]
index|[]
index|[]
expr_stmt|;
block|}
specifier|private
class|class
name|DataWrapperForOrc
implements|implements
name|DataReader
implements|,
name|DataCache
block|{
specifier|private
specifier|final
name|DataReader
name|orcDataReader
decl_stmt|;
specifier|private
name|DataWrapperForOrc
parameter_list|(
name|DataWrapperForOrc
name|other
parameter_list|)
block|{
name|orcDataReader
operator|=
name|other
operator|.
name|orcDataReader
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DataWrapperForOrc
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureMetadataReader
argument_list|()
expr_stmt|;
name|this
operator|.
name|orcDataReader
operator|=
name|metadataReader
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DiskRangeList
name|getFileData
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|DiskRangeList
name|range
parameter_list|,
name|long
name|baseOffset
parameter_list|,
name|DiskRangeListFactory
name|factory
parameter_list|,
name|BooleanRef
name|gotAllData
parameter_list|)
block|{
name|DiskRangeList
name|result
init|=
name|lowLevelCache
operator|.
name|getFileData
argument_list|(
name|fileKey
argument_list|,
name|range
argument_list|,
name|baseOffset
argument_list|,
name|factory
argument_list|,
name|counters
argument_list|,
name|gotAllData
argument_list|)
decl_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Disk ranges after data cache (file "
operator|+
name|fileKey
operator|+
literal|", base offset "
operator|+
name|baseOffset
operator|+
literal|"): "
operator|+
name|RecordReaderUtils
operator|.
name|stringifyDiskRanges
argument_list|(
name|range
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gotAllData
operator|.
name|value
condition|)
return|return
name|result
return|;
return|return
operator|(
name|metadataCache
operator|==
literal|null
operator|)
condition|?
name|range
else|:
name|metadataCache
operator|.
name|getIncompleteCbs
argument_list|(
name|fileKey
argument_list|,
name|range
argument_list|,
name|baseOffset
argument_list|,
name|factory
argument_list|,
name|gotAllData
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
index|[]
name|putFileData
parameter_list|(
name|Object
name|fileKey
parameter_list|,
name|DiskRange
index|[]
name|ranges
parameter_list|,
name|MemoryBuffer
index|[]
name|data
parameter_list|,
name|long
name|baseOffset
parameter_list|)
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
return|return
name|lowLevelCache
operator|.
name|putFileData
argument_list|(
name|fileKey
argument_list|,
name|ranges
argument_list|,
name|data
argument_list|,
name|baseOffset
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
name|counters
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|metadataCache
operator|!=
literal|null
condition|)
block|{
name|metadataCache
operator|.
name|putIncompleteCbs
argument_list|(
name|fileKey
argument_list|,
name|ranges
argument_list|,
name|baseOffset
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseBuffer
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
name|bufferManager
operator|.
name|decRefBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reuseBuffer
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
name|boolean
name|isReused
init|=
name|bufferManager
operator|.
name|incRefBuffer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
assert|assert
name|isReused
assert|;
block|}
annotation|@
name|Override
specifier|public
name|Allocator
name|getAllocator
parameter_list|()
block|{
return|return
name|bufferManager
operator|.
name|getAllocator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|orcDataReader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|metadataReader
operator|!=
literal|null
condition|)
block|{
name|metadataReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DiskRangeList
name|readFileData
parameter_list|(
name|DiskRangeList
name|range
parameter_list|,
name|long
name|baseOffset
parameter_list|,
name|boolean
name|doForceDirect
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|counters
operator|.
name|startTimeCounter
argument_list|()
decl_stmt|;
name|DiskRangeList
name|result
init|=
name|orcDataReader
operator|.
name|readFileData
argument_list|(
name|range
argument_list|,
name|baseOffset
argument_list|,
name|doForceDirect
argument_list|)
decl_stmt|;
name|counters
operator|.
name|recordHdfsTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|ORC_LOGGER
operator|.
name|trace
argument_list|(
literal|"Disk ranges after disk read (file {}, base offset {}): {}"
argument_list|,
name|fileKey
argument_list|,
name|baseOffset
argument_list|,
name|RecordReaderUtils
operator|.
name|stringifyDiskRanges
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTrackingDiskRanges
parameter_list|()
block|{
return|return
name|orcDataReader
operator|.
name|isTrackingDiskRanges
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|orcDataReader
operator|.
name|releaseBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DataWrapperForOrc
name|clone
parameter_list|()
block|{
return|return
operator|new
name|DataWrapperForOrc
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|counters
operator|.
name|startTimeCounter
argument_list|()
decl_stmt|;
name|orcDataReader
operator|.
name|open
argument_list|()
expr_stmt|;
name|counters
operator|.
name|recordHdfsTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|OrcIndex
name|readRowIndex
parameter_list|(
name|StripeInformation
name|stripe
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|footer
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|OrcProto
operator|.
name|RowIndex
index|[]
name|indexes
parameter_list|,
name|boolean
index|[]
name|sargColumns
parameter_list|,
name|OrcProto
operator|.
name|BloomFilterIndex
index|[]
name|bloomFilterIndices
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|orcDataReader
operator|.
name|readRowIndex
argument_list|(
name|stripe
argument_list|,
name|footer
argument_list|,
name|included
argument_list|,
name|indexes
argument_list|,
name|sargColumns
argument_list|,
name|bloomFilterIndices
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OrcProto
operator|.
name|StripeFooter
name|readStripeFooter
parameter_list|(
name|StripeInformation
name|stripe
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|orcDataReader
operator|.
name|readStripeFooter
argument_list|(
name|stripe
argument_list|)
return|;
block|}
block|}
specifier|public
name|TezCounters
name|getTezCounters
parameter_list|()
block|{
return|return
name|counters
operator|.
name|getTezCounters
argument_list|()
return|;
block|}
block|}
end_class

end_unit

