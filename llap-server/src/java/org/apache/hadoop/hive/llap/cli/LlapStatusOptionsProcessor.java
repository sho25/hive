begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|TerminalFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_class
specifier|public
class|class
name|LlapStatusOptionsProcessor
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LLAPSTATUS_CONSTANT
init|=
literal|"llapstatus"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|FIND_YARN_APP_TIMEOUT_MS
init|=
literal|20
operator|*
literal|1000l
decl_stmt|;
comment|// 20seconds to wait for app to be visible
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_STATUS_REFRESH_INTERVAL_MS
init|=
literal|1
operator|*
literal|1000l
decl_stmt|;
comment|// 1 seconds wait until subsequent status
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_WATCH_MODE_TIMEOUT_MS
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000l
decl_stmt|;
comment|// 5 minutes timeout for watch mode
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_RUNNING_NODES_THRESHOLD
init|=
literal|1.0f
decl_stmt|;
enum|enum
name|OptionConstants
block|{
name|NAME
argument_list|(
literal|"name"
argument_list|,
literal|'n'
argument_list|,
literal|"LLAP cluster name"
argument_list|,
literal|true
argument_list|)
block|,
name|FIND_APP_TIMEOUT
argument_list|(
literal|"findAppTimeout"
argument_list|,
literal|'f'
argument_list|,
literal|"Amount of time(s) that the tool will sleep to wait for the YARN application to start. negative values=wait forever, 0=Do not wait. default="
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
name|FIND_YARN_APP_TIMEOUT_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|+
literal|"s"
argument_list|,
literal|true
argument_list|)
block|,
name|OUTPUT_FILE
argument_list|(
literal|"outputFile"
argument_list|,
literal|'o'
argument_list|,
literal|"File to which output should be written (Default stdout)"
argument_list|,
literal|true
argument_list|)
block|,
name|WATCH_MODE
argument_list|(
literal|"watch"
argument_list|,
literal|'w'
argument_list|,
literal|"Watch mode waits until all LLAP daemons are running or subset of the nodes are "
operator|+
literal|"running (threshold can be specified via -r option) (Default wait until all nodes are running)"
argument_list|,
literal|false
argument_list|)
block|,
name|RUNNING_NODES_THRESHOLD
argument_list|(
literal|"runningNodesThreshold"
argument_list|,
literal|'r'
argument_list|,
literal|"When watch mode is enabled (-w), wait until the "
operator|+
literal|"specified threshold of nodes are running (Default 1.0 which means 100% nodes are running)"
argument_list|,
literal|true
argument_list|)
block|,
name|STATUS_REFRESH_INTERVAL
argument_list|(
literal|"refreshInterval"
argument_list|,
literal|'i'
argument_list|,
literal|"Amount of time in seconds to wait until subsequent status checks"
operator|+
literal|" in watch mode. Valid only for watch mode. (Default "
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
name|DEFAULT_STATUS_REFRESH_INTERVAL_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|+
literal|"s)"
argument_list|,
literal|true
argument_list|)
block|,
name|WATCH_MODE_TIMEOUT
argument_list|(
literal|"watchTimeout"
argument_list|,
literal|'t'
argument_list|,
literal|"Exit watch mode if the desired state is not attained until the specified"
operator|+
literal|" timeout. (Default "
operator|+
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
name|DEFAULT_WATCH_MODE_TIMEOUT_MS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|+
literal|"s)"
argument_list|,
literal|true
argument_list|)
block|,
name|HIVECONF
argument_list|(
literal|"hiveconf"
argument_list|,
literal|null
argument_list|,
literal|"Use value for given property. Overridden by explicit parameters"
argument_list|,
literal|"property=value"
argument_list|,
literal|2
argument_list|)
block|,
name|HELP
argument_list|(
literal|"help"
argument_list|,
literal|'H'
argument_list|,
literal|"Print help information"
argument_list|,
literal|false
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|longOpt
decl_stmt|;
specifier|private
specifier|final
name|Character
name|shortOpt
decl_stmt|;
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
specifier|private
specifier|final
name|String
name|argName
decl_stmt|;
specifier|private
specifier|final
name|int
name|numArgs
decl_stmt|;
name|OptionConstants
parameter_list|(
name|String
name|longOpt
parameter_list|,
name|char
name|shortOpt
parameter_list|,
name|String
name|description
parameter_list|,
name|boolean
name|hasArgs
parameter_list|)
block|{
name|this
argument_list|(
name|longOpt
argument_list|,
name|shortOpt
argument_list|,
name|description
argument_list|,
name|longOpt
argument_list|,
name|hasArgs
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
name|OptionConstants
parameter_list|(
name|String
name|longOpt
parameter_list|,
name|Character
name|shortOpt
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|argName
parameter_list|,
name|int
name|numArgs
parameter_list|)
block|{
name|this
operator|.
name|longOpt
operator|=
name|longOpt
expr_stmt|;
name|this
operator|.
name|shortOpt
operator|=
name|shortOpt
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|argName
operator|=
name|argName
expr_stmt|;
name|this
operator|.
name|numArgs
operator|=
name|numArgs
expr_stmt|;
block|}
specifier|public
name|String
name|getLongOpt
parameter_list|()
block|{
return|return
name|longOpt
return|;
block|}
specifier|public
name|Character
name|getShortOpt
parameter_list|()
block|{
return|return
name|shortOpt
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|String
name|getArgName
parameter_list|()
block|{
return|return
name|argName
return|;
block|}
specifier|public
name|int
name|getNumArgs
parameter_list|()
block|{
return|return
name|numArgs
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LlapStatusOptions
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Properties
name|conf
decl_stmt|;
specifier|private
specifier|final
name|long
name|findAppTimeoutMs
decl_stmt|;
specifier|private
specifier|final
name|String
name|outputFile
decl_stmt|;
specifier|private
specifier|final
name|long
name|refreshIntervalMs
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|watchMode
decl_stmt|;
specifier|private
specifier|final
name|long
name|watchTimeout
decl_stmt|;
specifier|private
specifier|final
name|float
name|runningNodesThreshold
decl_stmt|;
specifier|public
name|LlapStatusOptions
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|,
name|FIND_YARN_APP_TIMEOUT_MS
argument_list|,
literal|null
argument_list|,
name|DEFAULT_STATUS_REFRESH_INTERVAL_MS
argument_list|,
literal|false
argument_list|,
name|DEFAULT_WATCH_MODE_TIMEOUT_MS
argument_list|,
name|DEFAULT_RUNNING_NODES_THRESHOLD
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LlapStatusOptions
parameter_list|(
name|String
name|name
parameter_list|,
name|Properties
name|hiveProperties
parameter_list|,
name|long
name|findAppTimeoutMs
parameter_list|,
name|String
name|outputFile
parameter_list|,
name|long
name|refreshIntervalMs
parameter_list|,
specifier|final
name|boolean
name|watchMode
parameter_list|,
specifier|final
name|long
name|watchTimeoutMs
parameter_list|,
specifier|final
name|float
name|runningNodesThreshold
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|hiveProperties
expr_stmt|;
name|this
operator|.
name|findAppTimeoutMs
operator|=
name|findAppTimeoutMs
expr_stmt|;
name|this
operator|.
name|outputFile
operator|=
name|outputFile
expr_stmt|;
name|this
operator|.
name|refreshIntervalMs
operator|=
name|refreshIntervalMs
expr_stmt|;
name|this
operator|.
name|watchMode
operator|=
name|watchMode
expr_stmt|;
name|this
operator|.
name|watchTimeout
operator|=
name|watchTimeoutMs
expr_stmt|;
name|this
operator|.
name|runningNodesThreshold
operator|=
name|runningNodesThreshold
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|Properties
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|long
name|getFindAppTimeoutMs
parameter_list|()
block|{
return|return
name|findAppTimeoutMs
return|;
block|}
specifier|public
name|String
name|getOutputFile
parameter_list|()
block|{
return|return
name|outputFile
return|;
block|}
specifier|public
name|long
name|getRefreshIntervalMs
parameter_list|()
block|{
return|return
name|refreshIntervalMs
return|;
block|}
specifier|public
name|boolean
name|isWatchMode
parameter_list|()
block|{
return|return
name|watchMode
return|;
block|}
specifier|public
name|long
name|getWatchTimeoutMs
parameter_list|()
block|{
return|return
name|watchTimeout
return|;
block|}
specifier|public
name|float
name|getRunningNodesThreshold
parameter_list|()
block|{
return|return
name|runningNodesThreshold
return|;
block|}
block|}
specifier|private
specifier|final
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
name|commandLine
decl_stmt|;
specifier|public
name|LlapStatusOptionsProcessor
parameter_list|()
block|{
for|for
control|(
name|OptionConstants
name|optionConstant
range|:
name|OptionConstants
operator|.
name|values
argument_list|()
control|)
block|{
name|OptionBuilder
name|optionBuilder
init|=
name|OptionBuilder
operator|.
name|hasArgs
argument_list|(
name|optionConstant
operator|.
name|getNumArgs
argument_list|()
argument_list|)
operator|.
name|withArgName
argument_list|(
name|optionConstant
operator|.
name|getArgName
argument_list|()
argument_list|)
operator|.
name|withLongOpt
argument_list|(
name|optionConstant
operator|.
name|getLongOpt
argument_list|()
argument_list|)
operator|.
name|withDescription
argument_list|(
name|optionConstant
operator|.
name|getDescription
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionConstant
operator|.
name|getShortOpt
argument_list|()
operator|==
literal|null
condition|)
block|{
name|options
operator|.
name|addOption
argument_list|(
name|optionBuilder
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|options
operator|.
name|addOption
argument_list|(
name|optionBuilder
operator|.
name|create
argument_list|(
name|optionConstant
operator|.
name|getShortOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|LlapStatusOptions
name|processOptions
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|commandLine
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|OptionConstants
operator|.
name|HELP
operator|.
name|getShortOpt
argument_list|()
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|name
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|OptionConstants
operator|.
name|NAME
operator|.
name|getLongOpt
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|findAppTimeoutMs
init|=
name|FIND_YARN_APP_TIMEOUT_MS
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|OptionConstants
operator|.
name|FIND_APP_TIMEOUT
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|findAppTimeoutMs
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|OptionConstants
operator|.
name|FIND_APP_TIMEOUT
operator|.
name|getLongOpt
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
name|Properties
name|hiveConf
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|OptionConstants
operator|.
name|HIVECONF
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|hiveConf
operator|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
name|OptionConstants
operator|.
name|HIVECONF
operator|.
name|getLongOpt
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hiveConf
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
name|String
name|outputFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|OptionConstants
operator|.
name|OUTPUT_FILE
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|outputFile
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|OptionConstants
operator|.
name|OUTPUT_FILE
operator|.
name|getLongOpt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|refreshIntervalMs
init|=
name|DEFAULT_STATUS_REFRESH_INTERVAL_MS
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|OptionConstants
operator|.
name|STATUS_REFRESH_INTERVAL
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|refreshIntervalSec
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|OptionConstants
operator|.
name|STATUS_REFRESH_INTERVAL
operator|.
name|getLongOpt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|refreshIntervalSec
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Refresh interval should be>0"
argument_list|)
throw|;
block|}
name|refreshIntervalMs
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|refreshIntervalSec
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
name|boolean
name|watchMode
init|=
name|commandLine
operator|.
name|hasOption
argument_list|(
name|OptionConstants
operator|.
name|WATCH_MODE
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|?
literal|true
else|:
literal|false
decl_stmt|;
name|long
name|watchTimeoutMs
init|=
name|DEFAULT_WATCH_MODE_TIMEOUT_MS
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|OptionConstants
operator|.
name|WATCH_MODE_TIMEOUT
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|watchTimeoutSec
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|OptionConstants
operator|.
name|WATCH_MODE_TIMEOUT
operator|.
name|getLongOpt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|watchTimeoutSec
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Watch timeout should be>0"
argument_list|)
throw|;
block|}
name|watchTimeoutMs
operator|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|watchTimeoutSec
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
name|float
name|runningNodesThreshold
init|=
name|DEFAULT_RUNNING_NODES_THRESHOLD
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|OptionConstants
operator|.
name|RUNNING_NODES_THRESHOLD
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|runningNodesThreshold
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|OptionConstants
operator|.
name|RUNNING_NODES_THRESHOLD
operator|.
name|getLongOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|runningNodesThreshold
argument_list|<
literal|0.0f
operator|||
name|runningNodesThreshold
argument_list|>
literal|1.0f
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Running nodes threshold value should be between 0.0 and 1.0 (inclusive)"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|LlapStatusOptions
argument_list|(
name|name
argument_list|,
name|hiveConf
argument_list|,
name|findAppTimeoutMs
argument_list|,
name|outputFile
argument_list|,
name|refreshIntervalMs
argument_list|,
name|watchMode
argument_list|,
name|watchTimeoutMs
argument_list|,
name|runningNodesThreshold
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|HelpFormatter
name|hf
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|width
init|=
name|hf
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|jlineWidth
init|=
name|TerminalFactory
operator|.
name|get
argument_list|()
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|width
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|160
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|jlineWidth
argument_list|,
name|width
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ignore potentially incorrect values
name|hf
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
name|LlapStatusOptionsProcessor
name|optionsProcessor
init|=
operator|new
name|LlapStatusOptionsProcessor
argument_list|()
decl_stmt|;
name|hf
operator|.
name|printHelp
argument_list|(
name|LLAPSTATUS_CONSTANT
argument_list|,
name|optionsProcessor
operator|.
name|options
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

