begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
operator|.
name|SerDeEncodedDataReader
operator|.
name|CacheWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
operator|.
name|SerDeEncodedDataReader
operator|.
name|DeserializerOrcWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
operator|.
name|SerDeEncodedDataReader
operator|.
name|EncodingWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorDeserializeRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveFileFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|PartitionDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
operator|.
name|LazySimpleDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazySimpleStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BinaryComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_comment
comment|/** The class that writes rows from a text reader to an ORC writer using VectorDeserializeRow. */
end_comment

begin_class
class|class
name|VectorDeserializeOrcWriter
extends|extends
name|EncodingWriter
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|VectorizedRowBatchCtx
name|vrbCtx
decl_stmt|;
specifier|private
name|Writer
name|orcWriter
decl_stmt|;
specifier|private
specifier|final
name|LazySimpleDeserializeRead
name|deserializeRead
decl_stmt|;
specifier|private
specifier|final
name|VectorDeserializeRow
argument_list|<
name|?
argument_list|>
name|vectorDeserializeRow
decl_stmt|;
specifier|private
specifier|final
name|StructObjectInspector
name|destinationOi
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|usesSourceIncludes
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|sourceIncludes
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isAsync
decl_stmt|;
specifier|private
specifier|final
name|Thread
name|orcThread
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|WriteOperation
argument_list|>
name|queue
decl_stmt|;
specifier|private
name|AsyncCallback
name|completion
decl_stmt|;
comment|// Stored here only as async operation context.
specifier|private
specifier|final
name|boolean
index|[]
name|cacheIncludes
decl_stmt|;
specifier|private
name|VectorizedRowBatch
name|sourceBatch
decl_stmt|,
name|destinationBatch
decl_stmt|;
specifier|private
name|List
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|currentBatches
decl_stmt|;
comment|// TODO: if more writers are added, separate out an EncodingWriterFactory
specifier|public
specifier|static
name|EncodingWriter
name|create
parameter_list|(
name|InputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|sourceIf
parameter_list|,
name|Deserializer
name|serDe
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|PartitionDesc
argument_list|>
name|parts
parameter_list|,
name|Configuration
name|daemonConf
parameter_list|,
name|Configuration
name|jobConf
parameter_list|,
name|Path
name|splitPath
parameter_list|,
name|StructObjectInspector
name|sourceOi
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|sourceIncludes
parameter_list|,
name|boolean
index|[]
name|cacheIncludes
parameter_list|,
name|int
name|allocSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Vector SerDe can be disabled both on client and server side.
if|if
condition|(
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|daemonConf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_ENCODE_VECTOR_SERDE_ENABLED
argument_list|)
operator|||
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|jobConf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_ENCODE_VECTOR_SERDE_ENABLED
argument_list|)
operator|||
operator|!
operator|(
name|sourceIf
operator|instanceof
name|TextInputFormat
operator|)
operator|||
operator|!
operator|(
name|serDe
operator|instanceof
name|LazySimpleSerDe
operator|)
condition|)
block|{
return|return
operator|new
name|DeserializerOrcWriter
argument_list|(
name|serDe
argument_list|,
name|sourceOi
argument_list|,
name|allocSize
argument_list|)
return|;
block|}
name|Path
name|path
init|=
name|splitPath
operator|.
name|getFileSystem
argument_list|(
name|daemonConf
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|splitPath
argument_list|)
decl_stmt|;
name|PartitionDesc
name|partDesc
init|=
name|HiveFileFormatUtils
operator|.
name|getFromPathRecursively
argument_list|(
name|parts
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|partDesc
operator|==
literal|null
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Not using VertorDeserializeOrcWriter: no partition desc for "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|DeserializerOrcWriter
argument_list|(
name|serDe
argument_list|,
name|sourceOi
argument_list|,
name|allocSize
argument_list|)
return|;
block|}
name|Properties
name|tblProps
init|=
name|partDesc
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tblProps
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_LAST_COLUMN_TAKES_REST
argument_list|)
argument_list|)
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Not using VertorDeserializeOrcWriter due to "
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_LAST_COLUMN_TAKES_REST
argument_list|)
expr_stmt|;
return|return
operator|new
name|DeserializerOrcWriter
argument_list|(
name|serDe
argument_list|,
name|sourceOi
argument_list|,
name|allocSize
argument_list|)
return|;
block|}
for|for
control|(
name|StructField
name|sf
range|:
name|sourceOi
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|Category
name|c
init|=
name|sf
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Not using VertorDeserializeOrcWriter: "
operator|+
name|c
operator|+
literal|" is not supported"
argument_list|)
expr_stmt|;
return|return
operator|new
name|DeserializerOrcWriter
argument_list|(
name|serDe
argument_list|,
name|sourceOi
argument_list|,
name|allocSize
argument_list|)
return|;
block|}
block|}
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating VertorDeserializeOrcWriter for "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return
operator|new
name|VectorDeserializeOrcWriter
argument_list|(
name|jobConf
argument_list|,
name|tblProps
argument_list|,
name|sourceOi
argument_list|,
name|sourceIncludes
argument_list|,
name|cacheIncludes
argument_list|,
name|allocSize
argument_list|)
return|;
block|}
specifier|private
name|VectorDeserializeOrcWriter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tblProps
parameter_list|,
name|StructObjectInspector
name|sourceOi
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|sourceIncludes
parameter_list|,
name|boolean
index|[]
name|cacheIncludes
parameter_list|,
name|int
name|allocSize
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|sourceOi
argument_list|,
name|allocSize
argument_list|)
expr_stmt|;
comment|// See also: the usage of VectorDeserializeType, for binary. For now, we only want text.
name|this
operator|.
name|vrbCtx
operator|=
name|createVrbCtx
argument_list|(
name|sourceOi
argument_list|,
name|tblProps
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|sourceIncludes
operator|=
name|sourceIncludes
expr_stmt|;
name|this
operator|.
name|cacheIncludes
operator|=
name|cacheIncludes
expr_stmt|;
name|this
operator|.
name|sourceBatch
operator|=
name|vrbCtx
operator|.
name|createVectorizedRowBatch
argument_list|()
expr_stmt|;
name|deserializeRead
operator|=
operator|new
name|LazySimpleDeserializeRead
argument_list|(
name|vrbCtx
operator|.
name|getRowColumnTypeInfos
argument_list|()
argument_list|,
name|vrbCtx
operator|.
name|getRowdataTypePhysicalVariations
argument_list|()
argument_list|,
comment|/* useExternalBuffer */
literal|true
argument_list|,
name|createSerdeParams
argument_list|(
name|conf
argument_list|,
name|tblProps
argument_list|)
argument_list|)
expr_stmt|;
name|vectorDeserializeRow
operator|=
operator|new
name|VectorDeserializeRow
argument_list|<
name|LazySimpleDeserializeRead
argument_list|>
argument_list|(
name|deserializeRead
argument_list|)
expr_stmt|;
name|int
name|colCount
init|=
name|vrbCtx
operator|.
name|getRowColumnTypeInfos
argument_list|()
operator|.
name|length
decl_stmt|;
name|boolean
index|[]
name|includes
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|usesSourceIncludes
operator|=
name|sourceIncludes
operator|.
name|size
argument_list|()
operator|<
name|colCount
expr_stmt|;
if|if
condition|(
name|usesSourceIncludes
condition|)
block|{
comment|// VectorDeserializeRow produces "sparse" VRB when includes are used; we need to write the
comment|// "dense" VRB to ORC. Ideally, we'd use projection columns, but ORC writer doesn't use them.
comment|// In any case, we would also need to build a new OI for OrcWriter config.
comment|// This is why OrcWriter is created after this writer, by the way.
name|this
operator|.
name|destinationBatch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|sourceIncludes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|includes
operator|=
operator|new
name|boolean
index|[
name|colCount
index|]
expr_stmt|;
name|int
name|inclBatchIx
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|childNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|sourceIncludes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|childOis
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|sourceIncludes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|sourceFields
init|=
name|sourceOi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|columnId
range|:
name|sourceIncludes
control|)
block|{
name|includes
index|[
name|columnId
index|]
operator|=
literal|true
expr_stmt|;
assert|assert
name|inclBatchIx
operator|<=
name|columnId
assert|;
comment|// Note that we use the same vectors in both batches. Clever, very clever.
name|destinationBatch
operator|.
name|cols
index|[
name|inclBatchIx
operator|++
index|]
operator|=
name|sourceBatch
operator|.
name|cols
index|[
name|columnId
index|]
expr_stmt|;
name|StructField
name|sourceField
init|=
name|sourceFields
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
decl_stmt|;
name|childNames
operator|.
name|add
argument_list|(
name|sourceField
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|childOis
operator|.
name|add
argument_list|(
name|sourceField
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// This is only used by ORC to derive the structure. Most fields are unused.
name|destinationOi
operator|=
operator|new
name|LazySimpleStructObjectInspector
argument_list|(
name|childNames
argument_list|,
name|childOis
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|destinationBatch
operator|.
name|setPartitionInfo
argument_list|(
name|sourceIncludes
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Includes for deserializer are "
operator|+
name|DebugUtils
operator|.
name|toString
argument_list|(
name|includes
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|vectorDeserializeRow
operator|.
name|init
argument_list|(
name|includes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// No includes - use the standard batch.
name|this
operator|.
name|destinationBatch
operator|=
name|sourceBatch
expr_stmt|;
name|this
operator|.
name|destinationOi
operator|=
name|sourceOi
expr_stmt|;
try|try
block|{
name|vectorDeserializeRow
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|isAsync
operator|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_IO_ENCODE_VECTOR_SERDE_ASYNC_ENABLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAsync
condition|)
block|{
name|currentBatches
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|queue
operator|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
expr_stmt|;
name|orcThread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|orcThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|orcThread
operator|.
name|setName
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-OrcEncode"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|=
literal|null
expr_stmt|;
name|orcThread
operator|=
literal|null
expr_stmt|;
name|currentBatches
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startAsync
parameter_list|(
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|completion
operator|=
name|callback
expr_stmt|;
name|this
operator|.
name|orcThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|VectorizedRowBatchCtx
name|createVrbCtx
parameter_list|(
name|StructObjectInspector
name|oi
parameter_list|,
specifier|final
name|Properties
name|tblProps
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|useDecimal64ColumnVectors
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_VECTORIZED_INPUT_FORMAT_SUPPORTS_ENABLED
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"decimal_64"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|serde
init|=
name|tblProps
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_LIB
argument_list|)
decl_stmt|;
specifier|final
name|String
name|inputFormat
init|=
name|tblProps
operator|.
name|getProperty
argument_list|(
name|hive_metastoreConstants
operator|.
name|FILE_INPUT_FORMAT
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isTextFormat
init|=
name|inputFormat
operator|!=
literal|null
operator|&&
name|inputFormat
operator|.
name|equals
argument_list|(
name|TextInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|serde
operator|!=
literal|null
operator|&&
name|serde
operator|.
name|equals
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DataTypePhysicalVariation
argument_list|>
name|dataTypePhysicalVariations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTextFormat
condition|)
block|{
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|int
name|dataColumnCount
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataColumnCount
condition|;
name|i
operator|++
control|)
block|{
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
init|=
name|DataTypePhysicalVariation
operator|.
name|NONE
decl_stmt|;
if|if
condition|(
name|useDecimal64ColumnVectors
condition|)
block|{
name|TypeInfo
name|typeInfo
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeInfo
operator|instanceof
name|DecimalTypeInfo
condition|)
block|{
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfo
decl_stmt|;
if|if
condition|(
name|HiveDecimalWritable
operator|.
name|isPrecisionDecimal64
argument_list|(
name|decimalTypeInfo
operator|.
name|precision
argument_list|()
argument_list|)
condition|)
block|{
name|dataTypePhysicalVariation
operator|=
name|DataTypePhysicalVariation
operator|.
name|DECIMAL_64
expr_stmt|;
block|}
block|}
block|}
name|dataTypePhysicalVariations
operator|.
name|add
argument_list|(
name|dataTypePhysicalVariation
argument_list|)
expr_stmt|;
block|}
block|}
name|VectorizedRowBatchCtx
name|vrbCtx
init|=
operator|new
name|VectorizedRowBatchCtx
argument_list|()
decl_stmt|;
try|try
block|{
name|vrbCtx
operator|.
name|init
argument_list|(
name|oi
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dataTypePhysicalVariations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|vrbCtx
operator|.
name|setRowDataTypePhysicalVariations
argument_list|(
name|dataTypePhysicalVariations
operator|.
name|toArray
argument_list|(
operator|new
name|DataTypePhysicalVariation
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|vrbCtx
return|;
block|}
specifier|private
specifier|static
name|LazySerDeParameters
name|createSerdeParams
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tblProps
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|new
name|LazySerDeParameters
argument_list|(
name|conf
argument_list|,
name|tblProps
argument_list|,
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|CacheWriter
name|cacheWriter
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|orcWriter
operator|=
name|super
operator|.
name|createOrcWriter
argument_list|(
name|cacheWriter
argument_list|,
name|conf
argument_list|,
name|path
argument_list|,
name|destinationOi
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheWriter
operator|=
name|cacheWriter
expr_stmt|;
block|}
specifier|public
interface|interface
name|AsyncCallback
block|{
name|void
name|onComplete
parameter_list|(
name|VectorDeserializeOrcWriter
name|writer
parameter_list|)
function_decl|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|WriteOperation
name|op
init|=
literal|null
decl_stmt|;
name|int
name|fallbackMs
init|=
literal|8
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// The reason we poll here is that a blocking queue causes the query thread to spend
comment|// non-trivial amount of time signaling when an element is added; we'd rather that the
comment|// time was wasted on this background thread.
name|op
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
break|break;
if|if
condition|(
name|fallbackMs
operator|>
literal|262144
condition|)
block|{
comment|// Arbitrary... we don't expect caller to hang out for 7+ mins.
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"ORC encoder timed out waiting for input"
argument_list|)
expr_stmt|;
name|discardData
argument_list|()
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|fallbackMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"ORC encoder interrupted waiting for input"
argument_list|)
expr_stmt|;
name|discardData
argument_list|()
expr_stmt|;
return|return;
block|}
name|fallbackMs
operator|<<=
literal|1
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|op
operator|.
name|apply
argument_list|(
name|orcWriter
argument_list|,
name|cacheWriter
argument_list|)
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"ORC encoder received a exit event"
argument_list|)
expr_stmt|;
name|completion
operator|.
name|onComplete
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"ORC encoder failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|discardData
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|private
name|void
name|discardData
parameter_list|()
block|{
try|try
block|{
name|cacheWriter
operator|.
name|discardData
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to close an async cache writer"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeOneRow
parameter_list|(
name|Writable
name|row
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sourceBatch
operator|.
name|size
operator|==
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|)
block|{
name|flushBatch
argument_list|()
expr_stmt|;
block|}
name|BinaryComparable
name|binComp
init|=
operator|(
name|BinaryComparable
operator|)
name|row
decl_stmt|;
name|deserializeRead
operator|.
name|set
argument_list|(
name|binComp
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|binComp
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deserialize and append new row using the current batch size as the index.
try|try
block|{
comment|// Not using ByRef now since it's unsafe for text readers. Might be safe for others.
name|vectorDeserializeRow
operator|.
name|deserialize
argument_list|(
name|sourceBatch
argument_list|,
name|sourceBatch
operator|.
name|size
operator|++
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"DeserializeRead detail: "
operator|+
name|vectorDeserializeRow
operator|.
name|getDetailedReadPositionString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|flushBatch
parameter_list|()
throws|throws
name|IOException
block|{
name|addBatchToWriter
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isAsync
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|sourceBatch
operator|.
name|cols
operator|.
name|length
condition|;
operator|++
name|c
control|)
block|{
comment|// This resets vectors in both batches.
name|ColumnVector
name|colVector
init|=
name|sourceBatch
operator|.
name|cols
index|[
name|c
index|]
decl_stmt|;
if|if
condition|(
name|colVector
operator|!=
literal|null
condition|)
block|{
name|colVector
operator|.
name|reset
argument_list|()
expr_stmt|;
name|colVector
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
block|}
name|sourceBatch
operator|.
name|selectedInUse
operator|=
literal|false
expr_stmt|;
name|sourceBatch
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|sourceBatch
operator|.
name|endOfFile
operator|=
literal|false
expr_stmt|;
name|propagateSourceBatchFieldsToDest
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// In addBatchToWriter, we have passed the batch to both ORC and operator pipeline
comment|// (neither ever changes the vectors). We'd need a set of vectors batch to write to.
comment|// TODO: for now, create this from scratch. Ideally we should return the vectors from ops.
comment|//       We could also have the ORC thread create it for us in its spare time...
name|this
operator|.
name|sourceBatch
operator|=
name|vrbCtx
operator|.
name|createVectorizedRowBatch
argument_list|()
expr_stmt|;
if|if
condition|(
name|usesSourceIncludes
condition|)
block|{
name|this
operator|.
name|destinationBatch
operator|=
operator|new
name|VectorizedRowBatch
argument_list|(
name|sourceIncludes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|inclBatchIx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|columnId
range|:
name|sourceIncludes
control|)
block|{
name|destinationBatch
operator|.
name|cols
index|[
name|inclBatchIx
operator|++
index|]
operator|=
name|sourceBatch
operator|.
name|cols
index|[
name|columnId
index|]
expr_stmt|;
block|}
name|destinationBatch
operator|.
name|setPartitionInfo
argument_list|(
name|sourceIncludes
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|destinationBatch
operator|=
name|sourceBatch
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|propagateSourceBatchFieldsToDest
parameter_list|()
block|{
if|if
condition|(
name|destinationBatch
operator|==
name|sourceBatch
condition|)
return|return;
name|destinationBatch
operator|.
name|selectedInUse
operator|=
name|sourceBatch
operator|.
name|selectedInUse
expr_stmt|;
name|destinationBatch
operator|.
name|size
operator|=
name|sourceBatch
operator|.
name|size
expr_stmt|;
name|destinationBatch
operator|.
name|endOfFile
operator|=
name|sourceBatch
operator|.
name|endOfFile
expr_stmt|;
block|}
name|void
name|addBatchToWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|propagateSourceBatchFieldsToDest
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isAsync
condition|)
block|{
name|orcWriter
operator|.
name|addRowBatch
argument_list|(
name|destinationBatch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Lock ColumnVectors so we don't accidentally reset them before they're written out
for|for
control|(
name|ColumnVector
name|cv
range|:
name|destinationBatch
operator|.
name|cols
control|)
block|{
if|if
condition|(
name|cv
operator|!=
literal|null
condition|)
block|{
name|cv
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
block|}
name|currentBatches
operator|.
name|add
argument_list|(
name|destinationBatch
argument_list|)
expr_stmt|;
name|addWriteOp
argument_list|(
operator|new
name|VrbOperation
argument_list|(
name|destinationBatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushIntermediateData
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|sourceBatch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|flushBatch
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeIntermediateFooter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isAsync
condition|)
block|{
name|addWriteOp
argument_list|(
operator|new
name|IntermediateFooterOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|orcWriter
operator|.
name|writeIntermediateFooter
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addWriteOp
parameter_list|(
name|WriteOperation
name|wo
parameter_list|)
throws|throws
name|AssertionError
block|{
if|if
condition|(
name|queue
operator|.
name|offer
argument_list|(
name|wo
argument_list|)
condition|)
return|return;
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Queue full"
argument_list|)
throw|;
comment|// This should never happen with linked list queue.
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCurrentStripeOffsets
parameter_list|(
name|long
name|currentKnownTornStart
parameter_list|,
name|long
name|firstStartOffset
parameter_list|,
name|long
name|lastStartOffset
parameter_list|,
name|long
name|fileOffset
parameter_list|)
block|{
if|if
condition|(
name|isAsync
condition|)
block|{
name|addWriteOp
argument_list|(
operator|new
name|SetStripeDataOperation
argument_list|(
name|currentKnownTornStart
argument_list|,
name|firstStartOffset
argument_list|,
name|lastStartOffset
argument_list|,
name|fileOffset
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cacheWriter
operator|.
name|setCurrentStripeOffsets
argument_list|(
name|currentKnownTornStart
argument_list|,
name|firstStartOffset
argument_list|,
name|lastStartOffset
argument_list|,
name|fileOffset
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|sourceBatch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|addBatchToWriter
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isAsync
condition|)
block|{
name|orcWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|addWriteOp
argument_list|(
operator|new
name|CloseOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|extractCurrentVrbs
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isAsync
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|VectorizedRowBatch
argument_list|>
name|result
init|=
name|currentBatches
decl_stmt|;
name|currentBatches
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
interface|interface
name|WriteOperation
block|{
name|boolean
name|apply
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|CacheWriter
name|cacheWriter
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|VrbOperation
implements|implements
name|WriteOperation
block|{
specifier|private
name|VectorizedRowBatch
name|batch
decl_stmt|;
specifier|public
name|VrbOperation
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
block|{
comment|// LlapIoImpl.LOG.debug("Adding batch " + batch);
name|this
operator|.
name|batch
operator|=
name|batch
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|CacheWriter
name|cacheWriter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// LlapIoImpl.LOG.debug("Writing batch " + batch);
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnVector
name|cv
range|:
name|batch
operator|.
name|cols
control|)
block|{
if|if
condition|(
name|cv
operator|!=
literal|null
condition|)
block|{
assert|assert
operator|(
name|cv
operator|.
name|decRef
argument_list|()
operator|==
literal|0
operator|)
assert|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|IntermediateFooterOperation
implements|implements
name|WriteOperation
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|CacheWriter
name|cacheWriter
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|writeIntermediateFooter
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SetStripeDataOperation
implements|implements
name|WriteOperation
block|{
specifier|private
specifier|final
name|long
name|currentKnownTornStart
decl_stmt|,
name|firstStartOffset
decl_stmt|,
name|lastStartOffset
decl_stmt|,
name|fileOffset
decl_stmt|;
specifier|public
name|SetStripeDataOperation
parameter_list|(
name|long
name|currentKnownTornStart
parameter_list|,
name|long
name|firstStartOffset
parameter_list|,
name|long
name|lastStartOffset
parameter_list|,
name|long
name|fileOffset
parameter_list|)
block|{
name|this
operator|.
name|currentKnownTornStart
operator|=
name|currentKnownTornStart
expr_stmt|;
name|this
operator|.
name|firstStartOffset
operator|=
name|firstStartOffset
expr_stmt|;
name|this
operator|.
name|lastStartOffset
operator|=
name|lastStartOffset
expr_stmt|;
name|this
operator|.
name|fileOffset
operator|=
name|fileOffset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|CacheWriter
name|cacheWriter
parameter_list|)
throws|throws
name|IOException
block|{
name|cacheWriter
operator|.
name|setCurrentStripeOffsets
argument_list|(
name|currentKnownTornStart
argument_list|,
name|firstStartOffset
argument_list|,
name|lastStartOffset
argument_list|,
name|fileOffset
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CloseOperation
implements|implements
name|WriteOperation
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|CacheWriter
name|cacheWriter
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|// The thread should stop after this.
block|}
block|}
specifier|public
name|boolean
index|[]
name|getOriginalCacheIncludes
parameter_list|()
block|{
return|return
name|cacheIncludes
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOnlyWritingIncludedColumns
parameter_list|()
block|{
return|return
name|usesSourceIncludes
return|;
block|}
specifier|public
name|void
name|interrupt
parameter_list|()
block|{
assert|assert
name|orcThread
operator|!=
literal|null
assert|;
name|orcThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

