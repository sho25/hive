begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|TaskAttemptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|launcher
operator|.
name|ContainerLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
operator|.
name|NMCommunicatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
operator|.
name|NMCommunicatorLaunchRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
operator|.
name|container
operator|.
name|AMContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
operator|.
name|container
operator|.
name|AMContainerEventLaunched
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
operator|.
name|container
operator|.
name|AMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|history
operator|.
name|DAGHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|history
operator|.
name|events
operator|.
name|ContainerLaunchedEvent
import|;
end_import

begin_class
specifier|public
class|class
name|LlapContainerLauncher
extends|extends
name|AbstractService
implements|implements
name|ContainerLauncher
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LlapContainerLauncher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AppContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|public
name|LlapContainerLauncher
parameter_list|(
name|AppContext
name|appContext
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|TaskAttemptListener
name|tal
parameter_list|)
block|{
name|super
argument_list|(
name|LlapContainerLauncher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|appContext
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|appContext
operator|.
name|getClock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|NMCommunicatorEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CONTAINER_LAUNCH_REQUEST
case|:
specifier|final
name|NMCommunicatorLaunchRequestEvent
name|launchEvent
init|=
operator|(
name|NMCommunicatorLaunchRequestEvent
operator|)
name|event
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"No-op launch for container: "
operator|+
name|launchEvent
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" succeeded on host: "
operator|+
name|launchEvent
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AMContainerEventLaunched
argument_list|(
name|launchEvent
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerLaunchedEvent
name|lEvt
init|=
operator|new
name|ContainerLaunchedEvent
argument_list|(
name|launchEvent
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
name|context
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getHistoryHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|DAGHistoryEvent
argument_list|(
literal|null
argument_list|,
name|lEvt
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_STOP_REQUEST
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"DEBUG: Ignoring STOP_REQUEST for event: "
operator|+
name|event
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AMContainerEvent
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|AMContainerEventType
operator|.
name|C_NM_STOP_SENT
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_class

end_unit

