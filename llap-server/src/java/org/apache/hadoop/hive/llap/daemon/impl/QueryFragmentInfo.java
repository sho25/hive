begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|FragmentSpecProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|IOSpecProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|mapreduce
operator|.
name|input
operator|.
name|MRInputLegacy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|QueryFragmentInfo
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryFragmentInfo
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QueryInfo
name|queryInfo
decl_stmt|;
specifier|private
specifier|final
name|String
name|vertexName
decl_stmt|;
specifier|private
specifier|final
name|int
name|fragmentNumber
decl_stmt|;
specifier|private
specifier|final
name|int
name|attemptNumber
decl_stmt|;
specifier|private
specifier|final
name|FragmentSpecProto
name|fragmentSpec
decl_stmt|;
specifier|public
name|QueryFragmentInfo
parameter_list|(
name|QueryInfo
name|queryInfo
parameter_list|,
name|String
name|vertexName
parameter_list|,
name|int
name|fragmentNumber
parameter_list|,
name|int
name|attemptNumber
parameter_list|,
name|FragmentSpecProto
name|fragmentSpec
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|queryInfo
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|vertexName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|fragmentSpec
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryInfo
operator|=
name|queryInfo
expr_stmt|;
name|this
operator|.
name|vertexName
operator|=
name|vertexName
expr_stmt|;
name|this
operator|.
name|fragmentNumber
operator|=
name|fragmentNumber
expr_stmt|;
name|this
operator|.
name|attemptNumber
operator|=
name|attemptNumber
expr_stmt|;
name|this
operator|.
name|fragmentSpec
operator|=
name|fragmentSpec
expr_stmt|;
block|}
comment|// Only meant for use by the QueryTracker
name|QueryInfo
name|getQueryInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|queryInfo
return|;
block|}
specifier|public
name|FragmentSpecProto
name|getFragmentSpec
parameter_list|()
block|{
return|return
name|fragmentSpec
return|;
block|}
specifier|public
name|String
name|getVertexName
parameter_list|()
block|{
return|return
name|vertexName
return|;
block|}
specifier|public
name|int
name|getFragmentNumber
parameter_list|()
block|{
return|return
name|fragmentNumber
return|;
block|}
specifier|public
name|int
name|getAttemptNumber
parameter_list|()
block|{
return|return
name|attemptNumber
return|;
block|}
comment|/**    * Check whether a task can run to completion or may end up blocking on it's sources.    * This currently happens via looking up source state.    * TODO: Eventually, this should lookup the Hive Processor to figure out whether    * it's reached a state where it can finish - especially in cases of failures    * after data has been fetched.    *    * @return true if the task can finish, false otherwise    */
specifier|public
name|boolean
name|canFinish
parameter_list|()
block|{
name|List
argument_list|<
name|IOSpecProto
argument_list|>
name|inputSpecList
init|=
name|fragmentSpec
operator|.
name|getInputSpecsList
argument_list|()
decl_stmt|;
name|boolean
name|canFinish
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|inputSpecList
operator|!=
literal|null
operator|&&
operator|!
name|inputSpecList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|IOSpecProto
name|inputSpec
range|:
name|inputSpecList
control|)
block|{
if|if
condition|(
name|isSourceOfInterest
argument_list|(
name|inputSpec
argument_list|)
condition|)
block|{
comment|// Lookup the state in the map.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateProto
name|state
init|=
name|queryInfo
operator|.
name|getSourceStateMap
argument_list|()
operator|.
name|get
argument_list|(
name|inputSpec
operator|.
name|getConnectedVertexName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
operator|&&
name|state
operator|==
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateProto
operator|.
name|S_SUCCEEDED
condition|)
block|{
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot finish due to source: "
operator|+
name|inputSpec
operator|.
name|getConnectedVertexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|canFinish
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|canFinish
return|;
block|}
comment|/**    * Get, and create if required, local-dirs for a fragment    * @return    * @throws IOException    */
specifier|public
name|String
index|[]
name|getLocalDirs
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|queryInfo
operator|.
name|getLocalDirs
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isSourceOfInterest
parameter_list|(
name|IOSpecProto
name|inputSpec
parameter_list|)
block|{
name|String
name|inputClassName
init|=
name|inputSpec
operator|.
name|getIoDescriptor
argument_list|()
operator|.
name|getClassName
argument_list|()
decl_stmt|;
comment|// MRInput is not of interest since it'll always be ready.
return|return
operator|!
name|inputClassName
operator|.
name|equals
argument_list|(
name|MRInputLegacy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|QueryFragmentInfo
name|that
init|=
operator|(
name|QueryFragmentInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|fragmentNumber
operator|!=
name|that
operator|.
name|fragmentNumber
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|attemptNumber
operator|!=
name|that
operator|.
name|attemptNumber
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|vertexName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|vertexName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|vertexName
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|fragmentNumber
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|attemptNumber
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

