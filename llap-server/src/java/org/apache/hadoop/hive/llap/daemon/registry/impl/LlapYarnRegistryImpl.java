begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|registry
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|configuration
operator|.
name|LlapConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|registry
operator|.
name|ServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|registry
operator|.
name|ServiceInstanceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|registry
operator|.
name|ServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperationsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryUtils
operator|.
name|ServiceRecordMarshal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|exceptions
operator|.
name|InvalidRecordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|impl
operator|.
name|zk
operator|.
name|RegistryOperationsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|AddressTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ProtocolTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
class|class
name|LlapYarnRegistryImpl
implements|implements
name|ServiceRegistry
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|LlapYarnRegistryImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RegistryOperationsService
name|client
decl_stmt|;
specifier|private
name|String
name|instanceName
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|ServiceRecordMarshal
name|encoder
decl_stmt|;
specifier|private
specifier|final
name|DynamicServiceInstanceSet
name|instances
init|=
operator|new
name|DynamicServiceInstanceSet
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|UUID
name|uniq
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|hostname
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UNIQUE_IDENTIFIER
init|=
literal|"llap.unique.id"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SERVICE_CLASS
init|=
literal|"org-apache-hive"
decl_stmt|;
specifier|final
name|ScheduledExecutorService
name|refresher
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|long
name|refreshDelay
decl_stmt|;
static|static
block|{
name|String
name|localhost
init|=
literal|"localhost"
decl_stmt|;
try|try
block|{
name|localhost
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|uhe
parameter_list|)
block|{
comment|// ignore
block|}
name|hostname
operator|=
name|localhost
expr_stmt|;
block|}
specifier|public
name|LlapYarnRegistryImpl
parameter_list|(
name|String
name|instanceName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Llap Registry is enabled with registryid: "
operator|+
name|instanceName
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|instanceName
operator|=
name|instanceName
expr_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_SITE_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
comment|// registry reference
name|client
operator|=
operator|(
name|RegistryOperationsService
operator|)
name|RegistryOperationsFactory
operator|.
name|createInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|encoder
operator|=
operator|new
name|RegistryUtils
operator|.
name|ServiceRecordMarshal
argument_list|()
expr_stmt|;
name|refreshDelay
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapConfiguration
operator|.
name|LLAP_DAEMON_SERVICE_REFRESH_INTERVAL
argument_list|,
name|LlapConfiguration
operator|.
name|LLAP_DAEMON_SERVICE_REFRESH_INTERVAL_DEFAULT
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|refreshDelay
operator|>
literal|0
argument_list|,
literal|"Refresh delay for registry has to be positive = %d"
argument_list|,
name|refreshDelay
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Endpoint
name|getRpcEndpoint
parameter_list|()
block|{
specifier|final
name|int
name|rpcPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapConfiguration
operator|.
name|LLAP_DAEMON_RPC_PORT
argument_list|,
name|LlapConfiguration
operator|.
name|LLAP_DAEMON_RPC_PORT_DEFAULT
argument_list|)
decl_stmt|;
return|return
name|RegistryTypeUtils
operator|.
name|ipcEndpoint
argument_list|(
literal|"llap"
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|hostname
argument_list|,
name|rpcPort
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Endpoint
name|getShuffleEndpoint
parameter_list|()
block|{
specifier|final
name|int
name|shufflePort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapConfiguration
operator|.
name|LLAP_DAEMON_YARN_SHUFFLE_PORT
argument_list|,
name|LlapConfiguration
operator|.
name|LLAP_DAEMON_YARN_SHUFFLE_PORT_DEFAULT
argument_list|)
decl_stmt|;
comment|// HTTP today, but might not be
return|return
name|RegistryTypeUtils
operator|.
name|inetAddrEndpoint
argument_list|(
literal|"shuffle"
argument_list|,
name|ProtocolTypes
operator|.
name|PROTOCOL_TCP
argument_list|,
name|hostname
argument_list|,
name|shufflePort
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|String
name|getPath
parameter_list|()
block|{
return|return
name|RegistryPathUtils
operator|.
name|join
argument_list|(
name|RegistryUtils
operator|.
name|componentPath
argument_list|(
name|RegistryUtils
operator|.
name|currentUser
argument_list|()
argument_list|,
name|SERVICE_CLASS
argument_list|,
name|instanceName
argument_list|,
literal|"workers"
argument_list|)
argument_list|,
literal|"worker-"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|ServiceRecord
name|srv
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|srv
operator|.
name|addInternalEndpoint
argument_list|(
name|getRpcEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|srv
operator|.
name|addInternalEndpoint
argument_list|(
name|getShuffleEndpoint
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kv
range|:
name|this
operator|.
name|conf
control|)
block|{
if|if
condition|(
name|kv
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|LlapConfiguration
operator|.
name|LLAP_DAEMON_PREFIX
argument_list|)
operator|||
name|kv
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"hive.llap."
argument_list|)
condition|)
block|{
comment|// TODO: read this somewhere useful, like the task scheduler
name|srv
operator|.
name|set
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// restart sensitive instance id
name|srv
operator|.
name|set
argument_list|(
name|UNIQUE_IDENTIFIER
argument_list|,
name|uniq
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|mknode
argument_list|(
name|RegistryPathUtils
operator|.
name|parentOf
argument_list|(
name|path
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// FIXME: YARN registry needs to expose Ephemeral_Seq nodes& return the paths
name|client
operator|.
name|zkCreate
argument_list|(
name|path
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|,
name|encoder
operator|.
name|toBytes
argument_list|(
name|srv
argument_list|)
argument_list|,
name|client
operator|.
name|getClientAcls
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregister
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Nothing for the zkCreate models
block|}
specifier|private
class|class
name|DynamicServiceInstance
implements|implements
name|ServiceInstance
block|{
specifier|private
specifier|final
name|ServiceRecord
name|srv
decl_stmt|;
specifier|private
name|boolean
name|alive
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
specifier|private
specifier|final
name|int
name|rpcPort
decl_stmt|;
specifier|private
specifier|final
name|int
name|shufflePort
decl_stmt|;
specifier|public
name|DynamicServiceInstance
parameter_list|(
name|ServiceRecord
name|srv
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|srv
operator|=
name|srv
expr_stmt|;
specifier|final
name|Endpoint
name|shuffle
init|=
name|srv
operator|.
name|getInternalEndpoint
argument_list|(
literal|"shuffle"
argument_list|)
decl_stmt|;
specifier|final
name|Endpoint
name|rpc
init|=
name|srv
operator|.
name|getInternalEndpoint
argument_list|(
literal|"llap"
argument_list|)
decl_stmt|;
name|this
operator|.
name|host
operator|=
name|RegistryTypeUtils
operator|.
name|getAddressField
argument_list|(
name|rpc
operator|.
name|addresses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|AddressTypes
operator|.
name|ADDRESS_HOSTNAME_FIELD
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcPort
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|RegistryTypeUtils
operator|.
name|getAddressField
argument_list|(
name|rpc
operator|.
name|addresses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|AddressTypes
operator|.
name|ADDRESS_PORT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|shufflePort
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|RegistryTypeUtils
operator|.
name|getAddressField
argument_list|(
name|shuffle
operator|.
name|addresses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|AddressTypes
operator|.
name|ADDRESS_PORT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getWorkerIdentity
parameter_list|()
block|{
return|return
name|srv
operator|.
name|get
argument_list|(
name|UNIQUE_IDENTIFIER
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRpcPort
parameter_list|()
block|{
return|return
name|rpcPort
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getShufflePort
parameter_list|()
block|{
return|return
name|shufflePort
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAlive
parameter_list|()
block|{
return|return
name|alive
return|;
block|}
specifier|public
name|void
name|kill
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing "
operator|+
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|alive
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|srv
operator|.
name|attributes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
name|int
name|memory
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|srv
operator|.
name|get
argument_list|(
name|LlapConfiguration
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|vCores
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|srv
operator|.
name|get
argument_list|(
name|LlapConfiguration
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
name|memory
argument_list|,
name|vCores
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DynamicServiceInstance [alive="
operator|+
name|alive
operator|+
literal|", host="
operator|+
name|host
operator|+
literal|":"
operator|+
name|rpcPort
operator|+
literal|"]"
return|;
block|}
block|}
specifier|private
class|class
name|DynamicServiceInstanceSet
implements|implements
name|ServiceInstanceSet
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceInstance
argument_list|>
name|instances
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceInstance
argument_list|>
name|getAll
parameter_list|()
block|{
return|return
name|instances
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServiceInstance
name|getInstance
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|refresh
parameter_list|()
throws|throws
name|IOException
block|{
comment|/* call this from wherever */
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceInstance
argument_list|>
name|freshInstances
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServiceInstance
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceRecord
argument_list|>
name|records
init|=
name|RegistryUtils
operator|.
name|listServiceRecords
argument_list|(
name|client
argument_list|,
name|RegistryPathUtils
operator|.
name|parentOf
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|latestKeys
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting to refresh ServiceInstanceSet "
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ServiceRecord
name|rec
range|:
name|records
operator|.
name|values
argument_list|()
control|)
block|{
name|ServiceInstance
name|instance
init|=
operator|new
name|DynamicServiceInstance
argument_list|(
name|rec
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|instances
operator|!=
literal|null
operator|&&
name|instances
operator|.
name|containsKey
argument_list|(
name|instance
operator|.
name|getWorkerIdentity
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
comment|// add a new object
name|freshInstances
operator|.
name|put
argument_list|(
name|instance
operator|.
name|getWorkerIdentity
argument_list|()
argument_list|,
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding new worker "
operator|+
name|instance
operator|.
name|getWorkerIdentity
argument_list|()
operator|+
literal|" which mapped to "
operator|+
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retaining running worker "
operator|+
name|instance
operator|.
name|getWorkerIdentity
argument_list|()
operator|+
literal|" which mapped to "
operator|+
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
name|latestKeys
operator|.
name|add
argument_list|(
name|instance
operator|.
name|getWorkerIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instances
operator|!=
literal|null
condition|)
block|{
comment|// deep-copy before modifying
name|Set
argument_list|<
name|String
argument_list|>
name|oldKeys
init|=
operator|new
name|HashSet
argument_list|(
name|instances
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldKeys
operator|.
name|removeAll
argument_list|(
name|latestKeys
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|k
range|:
name|oldKeys
control|)
block|{
comment|// this is so that people can hold onto ServiceInstance references as placeholders for tasks
specifier|final
name|DynamicServiceInstance
name|dead
init|=
operator|(
name|DynamicServiceInstance
operator|)
name|instances
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|dead
operator|.
name|kill
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting dead worker "
operator|+
name|k
operator|+
literal|" which mapped to "
operator|+
name|dead
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|instances
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|oldKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|instances
operator|.
name|putAll
argument_list|(
name|freshInstances
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|instances
operator|=
name|freshInstances
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|ServiceInstance
argument_list|>
name|getByHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|Set
argument_list|<
name|ServiceInstance
argument_list|>
name|byHost
init|=
operator|new
name|HashSet
argument_list|<
name|ServiceInstance
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceInstance
name|i
range|:
name|instances
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
name|i
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
comment|// all hosts in instances should be alive in this impl
name|byHost
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Locality comparing "
operator|+
name|host
operator|+
literal|" to "
operator|+
name|i
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Returning "
operator|+
name|byHost
operator|.
name|size
argument_list|()
operator|+
literal|" hosts for locality allocation on "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
return|return
name|byHost
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ServiceInstanceSet
name|getInstances
parameter_list|(
name|String
name|component
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
literal|"LLAP"
operator|.
name|equals
argument_list|(
name|component
argument_list|)
argument_list|)
expr_stmt|;
comment|// right now there is only 1 component
if|if
condition|(
name|this
operator|.
name|client
operator|!=
literal|null
condition|)
block|{
name|instances
operator|.
name|refresh
argument_list|()
expr_stmt|;
return|return
name|instances
return|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|this
operator|.
name|client
argument_list|,
literal|"Yarn registry client is not intialized"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|refresher
operator|.
name|scheduleWithFixedDelay
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|instances
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not refresh hosts during scheduled refresh"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|0
argument_list|,
name|refreshDelay
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

