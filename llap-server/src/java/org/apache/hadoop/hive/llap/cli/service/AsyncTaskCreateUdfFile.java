begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|StaticPermanentFunctionChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|ResourceDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/** Create the list of allowed UDFs for the tarball. */
end_comment

begin_class
class|class
name|AsyncTaskCreateUdfFile
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AsyncTaskCreateUdfFile
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|rawFs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|udfDir
decl_stmt|;
specifier|private
specifier|final
name|Path
name|confDir
decl_stmt|;
name|AsyncTaskCreateUdfFile
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|FileSystem
name|rawFs
parameter_list|,
name|Path
name|udfDir
parameter_list|,
name|Path
name|confDir
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|rawFs
operator|=
name|rawFs
expr_stmt|;
name|this
operator|.
name|udfDir
operator|=
name|udfDir
expr_stmt|;
name|this
operator|.
name|confDir
operator|=
name|confDir
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// UDFs
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|allowedUdfs
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ALLOW_PERMANENT_FNS
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|fs
init|)
block|{
name|allowedUdfs
operator|=
name|downloadPermanentFunctions
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|allowedUdfs
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
name|OutputStream
name|os
init|=
name|rawFs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|confDir
argument_list|,
name|StaticPermanentFunctionChecker
operator|.
name|PERMANENT_FUNCTIONS_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|OutputStreamWriter
name|osw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
decl_stmt|;
name|PrintWriter
name|udfStream
init|=
operator|new
name|PrintWriter
argument_list|(
name|osw
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|udfClass
range|:
name|allowedUdfs
control|)
block|{
name|udfStream
operator|.
name|println
argument_list|(
name|udfClass
argument_list|)
expr_stmt|;
block|}
name|udfStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|downloadPermanentFunctions
parameter_list|()
throws|throws
name|HiveException
throws|,
name|URISyntaxException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|udfs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
comment|// disable expensive operations on the metastore
name|hiveConf
operator|.
name|setBoolean
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|INIT_METADATA_COUNT_ENABLED
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolean
argument_list|(
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|METRICS_ENABLED
operator|.
name|getVarname
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// performance problem: ObjectStore does its own new HiveConf()
name|Hive
name|hive
init|=
name|Hive
operator|.
name|getWithFastCheck
argument_list|(
name|hiveConf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResourceDownloader
name|resourceDownloader
init|=
operator|new
name|ResourceDownloader
argument_list|(
name|conf
argument_list|,
name|udfDir
operator|.
name|toUri
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Function
argument_list|>
name|fns
init|=
name|hive
operator|.
name|getAllFunctions
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|URI
argument_list|>
name|srcUris
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Function
name|fn
range|:
name|fns
control|)
block|{
name|String
name|fqfn
init|=
name|fn
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|fn
operator|.
name|getFunctionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|udfs
operator|.
name|containsKey
argument_list|(
name|fn
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Duplicate function names found for "
operator|+
name|fn
operator|.
name|getClassName
argument_list|()
operator|+
literal|" with "
operator|+
name|fqfn
operator|+
literal|" and "
operator|+
name|udfs
operator|.
name|get
argument_list|(
name|fn
operator|.
name|getClassName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|udfs
operator|.
name|put
argument_list|(
name|fn
operator|.
name|getClassName
argument_list|()
argument_list|,
name|fqfn
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceUri
argument_list|>
name|resources
init|=
name|fn
operator|.
name|getResourceUris
argument_list|()
decl_stmt|;
if|if
condition|(
name|resources
operator|==
literal|null
operator|||
name|resources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing resources for "
operator|+
name|fqfn
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|ResourceUri
name|resource
range|:
name|resources
control|)
block|{
name|srcUris
operator|.
name|add
argument_list|(
name|ResourceDownloader
operator|.
name|createURI
argument_list|(
name|resource
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|URI
name|srcUri
range|:
name|srcUris
control|)
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|localUris
init|=
name|resourceDownloader
operator|.
name|downloadExternal
argument_list|(
name|srcUri
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|dst
range|:
name|localUris
control|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Downloaded "
operator|+
name|dst
operator|+
literal|" from "
operator|+
name|srcUri
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|udfs
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
end_class

end_unit

