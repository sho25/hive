begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|decode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|ConsumerFeedback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|EncodedColumnBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|ColumnVectorBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
operator|.
name|EncodedDataProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
operator|.
name|EncodedDataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
operator|.
name|OrcEncodedDataProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_comment
comment|/** Middle layer - gets encoded blocks, produces proto-VRBs */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ColumnVectorProducer
parameter_list|<
name|BatchKey
parameter_list|>
block|{
specifier|private
specifier|final
name|ListeningExecutorService
name|executor
decl_stmt|;
specifier|public
name|ColumnVectorProducer
parameter_list|(
name|ExecutorService
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
operator|(
name|executor
operator|instanceof
name|ListeningExecutorService
operator|)
condition|?
operator|(
name|ListeningExecutorService
operator|)
name|executor
else|:
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|UncaughtErrorHandler
implements|implements
name|FutureCallback
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|EncodedDataConsumer
argument_list|<
name|BatchKey
argument_list|>
name|edc
decl_stmt|;
specifier|private
name|UncaughtErrorHandler
parameter_list|(
name|EncodedDataConsumer
name|edc
parameter_list|)
block|{
name|this
operator|.
name|edc
operator|=
name|edc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
comment|// Successful execution of reader is supposed to call setDone.
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Reader is not supposed to throw AFTER calling setError.
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Unhandled error from reader thread "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|edc
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Reads ColumnVectorBatch-es.    * @param consumer Consumer that will receive the batches asynchronously.    * @return Feedback that can be used to stop reading, and should be used    *         to return consumed batches.    * @throws IOException     */
specifier|public
name|ConsumerFeedback
argument_list|<
name|ColumnVectorBatch
argument_list|>
name|read
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
parameter_list|,
name|SearchArgument
name|sarg
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|Consumer
argument_list|<
name|ColumnVectorBatch
argument_list|>
name|consumer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the source of encoded data.
name|EncodedDataProducer
argument_list|<
name|BatchKey
argument_list|>
name|edp
init|=
name|getEncodedDataProducer
argument_list|()
decl_stmt|;
comment|// Create the consumer of encoded data; it will coordinate decoding to CVBs.
specifier|final
name|EncodedDataConsumer
argument_list|<
name|BatchKey
argument_list|>
name|edc
init|=
name|createConsumer
argument_list|(
name|this
argument_list|,
name|consumer
argument_list|,
name|columnIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Then, get the specific reader of encoded data out of the producer.
name|EncodedDataReader
argument_list|<
name|BatchKey
argument_list|>
name|reader
init|=
name|edp
operator|.
name|createReader
argument_list|(
name|split
argument_list|,
name|columnIds
argument_list|,
name|sarg
argument_list|,
name|columnNames
argument_list|,
name|edc
argument_list|)
decl_stmt|;
comment|// Set the encoded data reader as upstream feedback for encoded data consumer, and start.
name|edc
operator|.
name|init
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|// This is where we send execution on separate thread; the only threading boundary for now.
comment|// TODO: we should NOT do this thing with handler. Reader needs to do cleanup in most cases.
name|UncaughtErrorHandler
name|errorHandler
init|=
operator|new
name|UncaughtErrorHandler
argument_list|(
name|edc
argument_list|)
decl_stmt|;
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|future
argument_list|,
name|errorHandler
argument_list|)
expr_stmt|;
return|return
name|edc
return|;
block|}
specifier|protected
specifier|abstract
name|EncodedDataConsumer
argument_list|<
name|BatchKey
argument_list|>
name|createConsumer
parameter_list|(
name|ColumnVectorProducer
argument_list|<
name|BatchKey
argument_list|>
name|cvp
parameter_list|,
name|Consumer
argument_list|<
name|ColumnVectorBatch
argument_list|>
name|consumer
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|EncodedDataProducer
argument_list|<
name|BatchKey
argument_list|>
name|getEncodedDataProducer
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|void
name|decodeBatch
parameter_list|(
name|EncodedDataConsumer
argument_list|<
name|BatchKey
argument_list|>
name|context
parameter_list|,
name|EncodedColumnBatch
argument_list|<
name|BatchKey
argument_list|>
name|batch
parameter_list|,
name|Consumer
argument_list|<
name|ColumnVectorBatch
argument_list|>
name|downstreamConsumer
parameter_list|)
function_decl|;
block|}
end_class

end_unit

