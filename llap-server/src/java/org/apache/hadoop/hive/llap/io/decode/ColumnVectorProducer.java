begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|decode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|ConsumerFeedback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|EncodedColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|EncodedColumn
operator|.
name|ColumnBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|VectorReader
operator|.
name|ColumnVectorBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
operator|.
name|EncodedDataProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|encoded
operator|.
name|EncodedDataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_comment
comment|/** Middle layer - gets encoded blocks, produces proto-VRBs */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ColumnVectorProducer
parameter_list|<
name|BatchKey
parameter_list|>
block|{
specifier|static
class|class
name|EncodedColumnBatch
block|{
specifier|public
name|EncodedColumnBatch
parameter_list|(
name|int
name|colCount
parameter_list|)
block|{
name|columnDatas
operator|=
operator|new
name|ColumnBuffer
index|[
name|colCount
index|]
expr_stmt|;
name|columnsRemaining
operator|=
name|colCount
expr_stmt|;
block|}
specifier|public
name|ColumnBuffer
index|[]
name|columnDatas
decl_stmt|;
specifier|public
name|int
name|columnsRemaining
decl_stmt|;
block|}
specifier|private
class|class
name|EncodedDataConsumer
implements|implements
name|ConsumerFeedback
argument_list|<
name|ColumnVectorBatch
argument_list|>
implements|,
name|Consumer
argument_list|<
name|EncodedColumn
argument_list|<
name|BatchKey
argument_list|>
argument_list|>
block|{
specifier|private
specifier|volatile
name|boolean
name|isStopped
init|=
literal|false
decl_stmt|;
comment|// TODO: use array, precreate array based on metadata first? Works for ORC. For now keep dumb.
specifier|private
specifier|final
name|HashMap
argument_list|<
name|BatchKey
argument_list|,
name|EncodedColumnBatch
argument_list|>
name|pendingData
init|=
operator|new
name|HashMap
argument_list|<
name|BatchKey
argument_list|,
name|EncodedColumnBatch
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ConsumerFeedback
argument_list|<
name|ColumnBuffer
argument_list|>
name|upstreamFeedback
decl_stmt|;
specifier|private
specifier|final
name|Consumer
argument_list|<
name|ColumnVectorBatch
argument_list|>
name|downstreamConsumer
decl_stmt|;
specifier|private
specifier|final
name|int
name|colCount
decl_stmt|;
specifier|public
name|EncodedDataConsumer
parameter_list|(
name|Consumer
argument_list|<
name|ColumnVectorBatch
argument_list|>
name|consumer
parameter_list|,
name|int
name|colCount
parameter_list|)
block|{
name|this
operator|.
name|downstreamConsumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|colCount
operator|=
name|colCount
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|ConsumerFeedback
argument_list|<
name|ColumnBuffer
argument_list|>
name|upstreamFeedback
parameter_list|)
block|{
name|this
operator|.
name|upstreamFeedback
operator|=
name|upstreamFeedback
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|consumeData
parameter_list|(
name|EncodedColumn
argument_list|<
name|BatchKey
argument_list|>
name|data
parameter_list|)
block|{
name|EncodedColumnBatch
name|targetBatch
init|=
literal|null
decl_stmt|;
name|boolean
name|localIsStopped
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
name|localIsStopped
operator|=
name|isStopped
expr_stmt|;
if|if
condition|(
operator|!
name|localIsStopped
condition|)
block|{
name|targetBatch
operator|=
name|pendingData
operator|.
name|get
argument_list|(
name|data
operator|.
name|batchKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetBatch
operator|==
literal|null
condition|)
block|{
name|targetBatch
operator|=
operator|new
name|EncodedColumnBatch
argument_list|(
name|colCount
argument_list|)
expr_stmt|;
name|pendingData
operator|.
name|put
argument_list|(
name|data
operator|.
name|batchKey
argument_list|,
name|targetBatch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|localIsStopped
condition|)
block|{
name|upstreamFeedback
operator|.
name|returnData
argument_list|(
name|data
operator|.
name|columnData
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|colsRemaining
init|=
operator|-
literal|1
decl_stmt|;
synchronized|synchronized
init|(
name|targetBatch
init|)
block|{
comment|// Check if we are stopped and the batch was already cleaned.
name|localIsStopped
operator|=
operator|(
name|targetBatch
operator|.
name|columnDatas
operator|==
literal|null
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|localIsStopped
condition|)
block|{
name|targetBatch
operator|.
name|columnDatas
index|[
name|data
operator|.
name|columnIndex
index|]
operator|=
name|data
operator|.
name|columnData
expr_stmt|;
name|colsRemaining
operator|=
operator|--
name|targetBatch
operator|.
name|columnsRemaining
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|colsRemaining
condition|)
block|{
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
name|targetBatch
operator|=
name|isStopped
condition|?
literal|null
else|:
name|pendingData
operator|.
name|remove
argument_list|(
name|data
operator|.
name|batchKey
argument_list|)
expr_stmt|;
block|}
comment|// Check if we are stopped and the batch had been removed from map.
name|localIsStopped
operator|=
operator|(
name|targetBatch
operator|==
literal|null
operator|)
expr_stmt|;
comment|// We took the batch out of the map. No more contention with stop possible.
block|}
block|}
block|}
if|if
condition|(
name|localIsStopped
condition|)
block|{
name|upstreamFeedback
operator|.
name|returnData
argument_list|(
name|data
operator|.
name|columnData
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
literal|0
operator|==
name|colsRemaining
condition|)
block|{
name|ColumnVectorProducer
operator|.
name|this
operator|.
name|decodeBatch
argument_list|(
name|data
operator|.
name|batchKey
argument_list|,
name|targetBatch
argument_list|,
name|downstreamConsumer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDone
parameter_list|()
block|{
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
if|if
condition|(
operator|!
name|pendingData
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not all data has been sent downstream: "
operator|+
name|pendingData
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|downstreamConsumer
operator|.
name|setDone
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|downstreamConsumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|dicardPendingData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|upstreamFeedback
operator|.
name|stop
argument_list|()
expr_stmt|;
name|dicardPendingData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|returnData
parameter_list|(
name|ColumnVectorBatch
name|data
parameter_list|)
block|{
comment|// TODO#: this should happen earlier, when data is decoded buffers are not needed
for|for
control|(
name|ColumnBuffer
name|lockedBuffer
range|:
name|data
operator|.
name|lockedBuffers
control|)
block|{
name|upstreamFeedback
operator|.
name|returnData
argument_list|(
name|lockedBuffer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dicardPendingData
parameter_list|(
name|boolean
name|isStopped
parameter_list|)
block|{
name|List
argument_list|<
name|ColumnBuffer
argument_list|>
name|dataToDiscard
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnBuffer
argument_list|>
argument_list|(
name|pendingData
operator|.
name|size
argument_list|()
operator|*
name|colCount
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|EncodedColumnBatch
argument_list|>
name|batches
init|=
operator|new
name|ArrayList
argument_list|<
name|EncodedColumnBatch
argument_list|>
argument_list|(
name|pendingData
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
if|if
condition|(
name|isStopped
condition|)
block|{
name|this
operator|.
name|isStopped
operator|=
literal|true
expr_stmt|;
block|}
name|batches
operator|.
name|addAll
argument_list|(
name|pendingData
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|pendingData
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|EncodedColumnBatch
name|batch
range|:
name|batches
control|)
block|{
synchronized|synchronized
init|(
name|batch
init|)
block|{
for|for
control|(
name|ColumnBuffer
name|b
range|:
name|batch
operator|.
name|columnDatas
control|)
block|{
name|dataToDiscard
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|columnDatas
operator|=
literal|null
expr_stmt|;
block|}
block|}
for|for
control|(
name|ColumnBuffer
name|data
range|:
name|dataToDiscard
control|)
block|{
name|upstreamFeedback
operator|.
name|returnData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Reads ColumnVectorBatch-es.    * @param consumer Consumer that will receive the batches asynchronously.    * @return Feedback that can be used to stop reading, and should be used    *         to return consumed batches.    * @throws IOException     */
specifier|public
name|ConsumerFeedback
argument_list|<
name|ColumnVectorBatch
argument_list|>
name|read
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
parameter_list|,
name|SearchArgument
name|sarg
parameter_list|,
name|Consumer
argument_list|<
name|ColumnVectorBatch
argument_list|>
name|consumer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create the consumer of encoded data; it will coordinate decoding to CVBs.
name|EncodedDataConsumer
name|edc
init|=
operator|new
name|EncodedDataConsumer
argument_list|(
name|consumer
argument_list|,
name|columnIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get the source of encoded data.
name|EncodedDataProducer
argument_list|<
name|BatchKey
argument_list|>
name|edp
init|=
name|getEncodedDataProducer
argument_list|()
decl_stmt|;
comment|// Then, get the specific reader of encoded data out of the producer.
name|EncodedDataReader
argument_list|<
name|BatchKey
argument_list|>
name|reader
init|=
name|edp
operator|.
name|getReader
argument_list|(
name|split
argument_list|,
name|columnIds
argument_list|,
name|sarg
argument_list|,
name|edc
argument_list|)
decl_stmt|;
comment|// Set the encoded data reader as upstream feedback for encoded data consumer, and start.
name|edc
operator|.
name|init
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|reader
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|edc
return|;
block|}
specifier|protected
specifier|abstract
name|EncodedDataProducer
argument_list|<
name|BatchKey
argument_list|>
name|getEncodedDataProducer
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|void
name|decodeBatch
parameter_list|(
name|BatchKey
name|batchKey
parameter_list|,
name|EncodedColumnBatch
name|batch
parameter_list|,
name|Consumer
argument_list|<
name|ColumnVectorBatch
argument_list|>
name|downstreamConsumer
parameter_list|)
function_decl|;
block|}
end_class

end_unit

