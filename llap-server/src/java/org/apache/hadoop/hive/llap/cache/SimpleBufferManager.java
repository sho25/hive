begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|Allocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonCacheMetrics
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleBufferManager
implements|implements
name|BufferUsageManager
block|{
specifier|private
specifier|final
name|Allocator
name|allocator
decl_stmt|;
specifier|private
specifier|final
name|LlapDaemonCacheMetrics
name|metrics
decl_stmt|;
specifier|public
name|SimpleBufferManager
parameter_list|(
name|Allocator
name|allocator
parameter_list|,
name|LlapDaemonCacheMetrics
name|metrics
parameter_list|)
block|{
if|if
condition|(
name|LlapIoImpl
operator|.
name|LOGL
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Simple buffer manager"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|allocator
operator|=
name|allocator
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
block|}
specifier|private
name|boolean
name|lockBuffer
parameter_list|(
name|LlapDataBuffer
name|buffer
parameter_list|)
block|{
name|int
name|rc
init|=
name|buffer
operator|.
name|incRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|<=
literal|0
condition|)
return|return
literal|false
return|;
name|metrics
operator|.
name|incrCacheNumLockedBuffers
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|unlockBuffer
parameter_list|(
name|LlapDataBuffer
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|.
name|decRef
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceCachingEnabled
argument_list|()
condition|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Deallocating "
operator|+
name|buffer
operator|+
literal|" that was not cached"
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|deallocate
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|metrics
operator|.
name|decrCacheNumLockedBuffers
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decRefBuffer
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
name|unlockBuffer
argument_list|(
operator|(
name|LlapDataBuffer
operator|)
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|decRefBuffers
parameter_list|(
name|List
argument_list|<
name|MemoryBuffer
argument_list|>
name|cacheBuffers
parameter_list|)
block|{
for|for
control|(
name|MemoryBuffer
name|b
range|:
name|cacheBuffers
control|)
block|{
name|unlockBuffer
argument_list|(
operator|(
name|LlapDataBuffer
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|incRefBuffer
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{
return|return
name|lockBuffer
argument_list|(
operator|(
name|LlapDataBuffer
operator|)
name|buffer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Allocator
name|getAllocator
parameter_list|()
block|{
return|return
name|allocator
return|;
block|}
block|}
end_class

end_unit

