begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|status
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|TerminalFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Parses, verifies, prints and provides the command line arguments of the Llap Status program.  */
end_comment

begin_class
specifier|public
class|class
name|LlapStatusServiceCommandLine
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"LlapStatusServiceDriverConsole"
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|long
name|DEFAULT_FIND_YARN_APP_TIMEOUT_MS
init|=
literal|20
operator|*
literal|1000L
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|long
name|DEFAULT_STATUS_REFRESH_INTERVAL_MS
init|=
literal|1
operator|*
literal|1000L
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|long
name|DEFAULT_WATCH_MODE_TIMEOUT_MS
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000L
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
name|float
name|DEFAULT_RUNNING_NODES_THRESHOLD
init|=
literal|1.0f
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|NAME
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"name"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"LLAP cluster name"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"name"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'n'
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|FIND_APP_TIMEOUT
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"findAppTimeout"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Amount of time(s) that the tool will sleep to wait for the YARN application to start."
operator|+
literal|"negative values=wait forever, 0=Do not wait. default="
operator|+
operator|(
name|DEFAULT_FIND_YARN_APP_TIMEOUT_MS
operator|/
literal|1000
operator|)
operator|+
literal|"s"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"findAppTimeout"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'f'
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|OUTPUT_FILE
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"outputFile"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"File to which output should be written (Default stdout)"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"outputFile"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'o'
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|WATCH_MODE
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"watch"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Watch mode waits until all LLAP daemons are running or subset of the nodes are running "
operator|+
literal|"(threshold can be specified via -r option) (Default wait until all nodes are running)"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"watch"
argument_list|)
operator|.
name|create
argument_list|(
literal|'w'
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|NOT_LAUNCHED
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"notLaunched"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"In watch mode, do not assume that the application was already launched if there's doubt "
operator|+
literal|"(e.g. if the last application instance has failed)."
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"notLaunched"
argument_list|)
operator|.
name|create
argument_list|(
literal|'l'
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|RUNNING_NODES_THRESHOLD
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"runningNodesThreshold"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"When watch mode is enabled (-w), wait until the specified threshold of nodes are running "
operator|+
literal|"(Default 1.0 which means 100% nodes are running)"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"runningNodesThreshold"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'r'
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|REFRESH_INTERVAL
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"refreshInterval"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Amount of time in seconds to wait until subsequent status checks in watch mode. Valid only "
operator|+
literal|"for watch mode. (Default "
operator|+
operator|(
name|DEFAULT_STATUS_REFRESH_INTERVAL_MS
operator|/
literal|1000
operator|)
operator|+
literal|"s)"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"refreshInterval"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'i'
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|WATCH_TIMEOUT
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"watchTimeout"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Exit watch mode if the desired state is not attained until the specified timeout. (Default "
operator|+
operator|(
name|DEFAULT_WATCH_MODE_TIMEOUT_MS
operator|/
literal|1000
operator|)
operator|+
literal|"s)"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"watchTimeout"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'t'
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|HIVECONF
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"hiveconf"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Use value for given property. Overridden by explicit parameters"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Option
name|HELP
init|=
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Print help information"
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"help"
argument_list|)
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Options
name|OPTIONS
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
static|static
block|{
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|FIND_APP_TIMEOUT
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OUTPUT_FILE
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|WATCH_MODE
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|NOT_LAUNCHED
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|RUNNING_NODES_THRESHOLD
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|REFRESH_INTERVAL
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|WATCH_TIMEOUT
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|HIVECONF
argument_list|)
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|HELP
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|long
name|findAppTimeoutMs
decl_stmt|;
specifier|private
name|String
name|outputFile
decl_stmt|;
specifier|private
name|boolean
name|watchMode
decl_stmt|;
specifier|private
name|boolean
name|isLaunched
decl_stmt|;
specifier|private
name|float
name|runningNodesThreshold
decl_stmt|;
specifier|private
name|long
name|refreshIntervalMs
decl_stmt|;
specifier|private
name|long
name|watchTimeoutMs
decl_stmt|;
specifier|private
name|Properties
name|hiveConf
decl_stmt|;
specifier|private
name|boolean
name|isHelp
decl_stmt|;
specifier|public
specifier|static
name|LlapStatusServiceCommandLine
name|parseArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|LlapStatusServiceCommandLine
name|cl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cl
operator|=
operator|new
name|LlapStatusServiceCommandLine
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Parsing the command line arguments failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|ExitCode
operator|.
name|INCORRECT_USAGE
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|isHelp
argument_list|()
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|cl
return|;
block|}
name|LlapStatusServiceCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"LLAP status invoked with arguments = {}"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|parseCommandLine
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|printArguments
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|parseCommandLine
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
block|{
name|CommandLine
name|cl
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|OPTIONS
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|name
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|NAME
operator|.
name|getLongOpt
argument_list|()
argument_list|)
expr_stmt|;
name|findAppTimeoutMs
operator|=
name|DEFAULT_FIND_YARN_APP_TIMEOUT_MS
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
name|FIND_APP_TIMEOUT
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|findAppTimeoutMs
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|FIND_APP_TIMEOUT
operator|.
name|getLongOpt
argument_list|()
argument_list|)
argument_list|)
operator|*
literal|1000
expr_stmt|;
block|}
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
name|OUTPUT_FILE
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|outputFile
operator|=
name|cl
operator|.
name|getOptionValue
argument_list|(
name|OUTPUT_FILE
operator|.
name|getLongOpt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|watchMode
operator|=
name|cl
operator|.
name|hasOption
argument_list|(
name|WATCH_MODE
operator|.
name|getLongOpt
argument_list|()
argument_list|)
expr_stmt|;
name|isLaunched
operator|=
operator|!
name|cl
operator|.
name|hasOption
argument_list|(
name|NOT_LAUNCHED
operator|.
name|getLongOpt
argument_list|()
argument_list|)
expr_stmt|;
name|runningNodesThreshold
operator|=
name|DEFAULT_RUNNING_NODES_THRESHOLD
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
name|RUNNING_NODES_THRESHOLD
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|runningNodesThreshold
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|RUNNING_NODES_THRESHOLD
operator|.
name|getLongOpt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|runningNodesThreshold
argument_list|<
literal|0.0f
operator|||
name|runningNodesThreshold
argument_list|>
literal|1.0f
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Running nodes threshold value should be between 0.0 and 1.0 (inclusive)"
argument_list|)
throw|;
block|}
block|}
name|refreshIntervalMs
operator|=
name|DEFAULT_STATUS_REFRESH_INTERVAL_MS
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
name|REFRESH_INTERVAL
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|refreshIntervalSec
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|REFRESH_INTERVAL
operator|.
name|getLongOpt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|refreshIntervalSec
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Refresh interval should be>0"
argument_list|)
throw|;
block|}
name|refreshIntervalMs
operator|=
name|refreshIntervalSec
operator|*
literal|1000
expr_stmt|;
block|}
name|watchTimeoutMs
operator|=
name|DEFAULT_WATCH_MODE_TIMEOUT_MS
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
name|WATCH_TIMEOUT
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|watchTimeoutSec
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|cl
operator|.
name|getOptionValue
argument_list|(
name|WATCH_TIMEOUT
operator|.
name|getLongOpt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|watchTimeoutSec
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Watch timeout should be>0"
argument_list|)
throw|;
block|}
name|watchTimeoutMs
operator|=
name|watchTimeoutSec
operator|*
literal|1000
expr_stmt|;
block|}
name|hiveConf
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
if|if
condition|(
name|cl
operator|.
name|hasOption
argument_list|(
name|HIVECONF
operator|.
name|getLongOpt
argument_list|()
argument_list|)
condition|)
block|{
name|hiveConf
operator|=
name|cl
operator|.
name|getOptionProperties
argument_list|(
name|HIVECONF
operator|.
name|getLongOpt
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|isHelp
operator|=
name|cl
operator|.
name|hasOption
argument_list|(
name|HELP
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|HelpFormatter
name|hf
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|width
init|=
name|hf
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|jlineWidth
init|=
name|TerminalFactory
operator|.
name|get
argument_list|()
operator|.
name|getWidth
argument_list|()
decl_stmt|;
name|width
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|160
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|jlineWidth
argument_list|,
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|hf
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
name|hf
operator|.
name|printHelp
argument_list|(
literal|"llapstatus"
argument_list|,
name|OPTIONS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printArguments
parameter_list|()
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"LLAP status running with the following parsed arguments: \n"
operator|+
literal|"\tname                 : "
operator|+
name|name
operator|+
literal|"\n"
operator|+
literal|"\tfindAppTimeoutMs     : "
operator|+
name|findAppTimeoutMs
operator|+
literal|"\n"
operator|+
literal|"\toutputFile           : "
operator|+
name|outputFile
operator|+
literal|"\n"
operator|+
literal|"\twatchMode            : "
operator|+
name|watchMode
operator|+
literal|"\n"
operator|+
literal|"\tisLaunched           : "
operator|+
name|isLaunched
operator|+
literal|"\n"
operator|+
literal|"\trunningNodesThreshold: "
operator|+
name|runningNodesThreshold
operator|+
literal|"\n"
operator|+
literal|"\trefreshIntervalMs    : "
operator|+
name|refreshIntervalMs
operator|+
literal|"\n"
operator|+
literal|"\twatchTimeoutMs       : "
operator|+
name|watchTimeoutMs
operator|+
literal|"\n"
operator|+
literal|"\thiveConf             : "
operator|+
name|hiveConf
argument_list|)
expr_stmt|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
name|long
name|getFindAppTimeoutMs
parameter_list|()
block|{
return|return
name|findAppTimeoutMs
return|;
block|}
name|String
name|getOutputFile
parameter_list|()
block|{
return|return
name|outputFile
return|;
block|}
name|boolean
name|isWatchMode
parameter_list|()
block|{
return|return
name|watchMode
return|;
block|}
name|boolean
name|isLaunched
parameter_list|()
block|{
return|return
name|isLaunched
return|;
block|}
name|float
name|getRunningNodesThreshold
parameter_list|()
block|{
return|return
name|runningNodesThreshold
return|;
block|}
name|long
name|getRefreshIntervalMs
parameter_list|()
block|{
return|return
name|refreshIntervalMs
return|;
block|}
name|long
name|getWatchTimeoutMs
parameter_list|()
block|{
return|return
name|watchTimeoutMs
return|;
block|}
name|Properties
name|getHiveConf
parameter_list|()
block|{
return|return
name|hiveConf
return|;
block|}
name|boolean
name|isHelp
parameter_list|()
block|{
return|return
name|isHelp
return|;
block|}
block|}
end_class

end_unit

