begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteArrayDataOutput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|LlapIo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|LlapProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DaemonId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|GetTokenRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|GetTokenResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|UpdateFragmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|UpdateFragmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|ContainerRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapProtocolBlockingPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapManagementProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapDaemonPolicyProvider
import|;
end_import

begin_class
specifier|public
class|class
name|LlapProtocolServerImpl
extends|extends
name|AbstractService
implements|implements
name|LlapProtocolBlockingPB
implements|,
name|LlapManagementProtocolPB
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapProtocolServerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
enum|enum
name|TokenRequiresSigning
block|{
name|TRUE
block|,
name|FALSE
block|,
name|EXCEPT_OWNER
block|}
specifier|private
specifier|final
name|int
name|numHandlers
decl_stmt|;
specifier|private
specifier|final
name|ContainerRunner
name|containerRunner
decl_stmt|;
specifier|private
specifier|final
name|int
name|srvPort
decl_stmt|,
name|mngPort
decl_stmt|;
specifier|private
name|RPC
operator|.
name|Server
name|server
decl_stmt|,
name|mngServer
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|srvAddress
decl_stmt|,
name|mngAddress
decl_stmt|;
specifier|private
specifier|final
name|SecretManager
name|secretManager
decl_stmt|;
specifier|private
name|String
name|clusterUser
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|isRestrictedToClusterUser
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|DaemonId
name|daemonId
decl_stmt|;
specifier|private
specifier|final
name|LlapDaemonExecutorMetrics
name|executorMetrics
decl_stmt|;
specifier|private
name|TokenRequiresSigning
name|isSigningRequiredConfig
init|=
name|TokenRequiresSigning
operator|.
name|TRUE
decl_stmt|;
specifier|public
name|LlapProtocolServerImpl
parameter_list|(
name|SecretManager
name|secretManager
parameter_list|,
name|int
name|numHandlers
parameter_list|,
name|ContainerRunner
name|containerRunner
parameter_list|,
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|srvAddress
parameter_list|,
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|mngAddress
parameter_list|,
name|int
name|srvPort
parameter_list|,
name|int
name|mngPort
parameter_list|,
name|DaemonId
name|daemonId
parameter_list|,
name|LlapDaemonExecutorMetrics
name|executorMetrics
parameter_list|)
block|{
name|super
argument_list|(
literal|"LlapDaemonProtocolServerImpl"
argument_list|)
expr_stmt|;
name|this
operator|.
name|numHandlers
operator|=
name|numHandlers
expr_stmt|;
name|this
operator|.
name|containerRunner
operator|=
name|containerRunner
expr_stmt|;
name|this
operator|.
name|secretManager
operator|=
name|secretManager
expr_stmt|;
name|this
operator|.
name|srvAddress
operator|=
name|srvAddress
expr_stmt|;
name|this
operator|.
name|srvPort
operator|=
name|srvPort
expr_stmt|;
name|this
operator|.
name|mngAddress
operator|=
name|mngAddress
expr_stmt|;
name|this
operator|.
name|mngPort
operator|=
name|mngPort
expr_stmt|;
name|this
operator|.
name|daemonId
operator|=
name|daemonId
expr_stmt|;
name|this
operator|.
name|executorMetrics
operator|=
name|executorMetrics
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating: "
operator|+
name|LlapProtocolServerImpl
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" with port configured to: "
operator|+
name|srvPort
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|LlapDaemonProtocolProtos
operator|.
name|RegisterDagResponseProto
name|registerDag
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|LlapDaemonProtocolProtos
operator|.
name|RegisterDagRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|containerRunner
operator|.
name|registerDag
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SubmitWorkResponseProto
name|submitWork
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SubmitWorkRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|containerRunner
operator|.
name|submitWork
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SourceStateUpdatedResponseProto
name|sourceStateUpdated
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|SourceStateUpdatedRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|containerRunner
operator|.
name|sourceStateUpdated
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|QueryCompleteResponseProto
name|queryComplete
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|QueryCompleteRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|containerRunner
operator|.
name|queryComplete
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TerminateFragmentResponseProto
name|terminateFragment
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|TerminateFragmentRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|containerRunner
operator|.
name|terminateFragment
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|UpdateFragmentResponseProto
name|updateFragment
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|UpdateFragmentRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
return|return
name|containerRunner
operator|.
name|updateFragment
argument_list|(
name|request
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStart
parameter_list|()
block|{
specifier|final
name|Configuration
name|conf
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|isSigningRequiredConfig
operator|=
name|getSigningConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|BlockingService
name|daemonImpl
init|=
name|LlapDaemonProtocolProtos
operator|.
name|LlapDaemonProtocol
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|BlockingService
name|managementImpl
init|=
name|LlapDaemonProtocolProtos
operator|.
name|LlapManagementProtocol
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|startProtocolServers
argument_list|(
name|conf
argument_list|,
name|daemonImpl
argument_list|,
name|managementImpl
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|this
operator|.
name|clusterUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|isPermissiveManagementAcl
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Management protocol has a '*' ACL."
argument_list|)
expr_stmt|;
name|isRestrictedToClusterUser
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|llapPrincipal
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_KERBEROS_PRINCIPAL
argument_list|)
decl_stmt|,
name|llapKeytab
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_KERBEROS_KEYTAB_FILE
argument_list|)
decl_stmt|;
comment|// Start the protocol server after properly authenticating with daemon keytab.
name|UserGroupInformation
name|daemonUgi
init|=
literal|null
decl_stmt|;
try|try
block|{
name|daemonUgi
operator|=
name|LlapUtil
operator|.
name|loginWithKerberos
argument_list|(
name|llapPrincipal
argument_list|,
name|llapKeytab
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|daemonUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
block|{
name|startProtocolServers
argument_list|(
name|conf
argument_list|,
name|daemonImpl
argument_list|,
name|managementImpl
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|TokenRequiresSigning
name|getSigningConfig
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|signSetting
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_REMOTE_TOKEN_REQUIRES_SIGNING
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|signSetting
condition|)
block|{
case|case
literal|"true"
case|:
return|return
name|TokenRequiresSigning
operator|.
name|TRUE
return|;
case|case
literal|"except_llap_owner"
case|:
return|return
name|TokenRequiresSigning
operator|.
name|EXCEPT_OWNER
return|;
case|case
literal|"false"
case|:
return|return
name|TokenRequiresSigning
operator|.
name|FALSE
return|;
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid value for "
operator|+
name|ConfVars
operator|.
name|LLAP_REMOTE_TOKEN_REQUIRES_SIGNING
operator|.
name|varname
operator|+
literal|": "
operator|+
name|signSetting
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isPermissiveManagementAcl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_VALIDATE_ACLS
argument_list|)
operator|&&
name|AccessControlList
operator|.
name|WILDCARD_ACL_VALUE
operator|.
name|equals
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_MANAGEMENT_ACL
argument_list|)
argument_list|)
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_MANAGEMENT_ACL_DENY
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|startProtocolServers
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|BlockingService
name|daemonImpl
parameter_list|,
name|BlockingService
name|managementImpl
parameter_list|)
block|{
name|LlapDaemonPolicyProvider
name|pp
init|=
operator|new
name|LlapDaemonPolicyProvider
argument_list|()
decl_stmt|;
name|server
operator|=
name|LlapUtil
operator|.
name|startProtocolServer
argument_list|(
name|srvPort
argument_list|,
name|numHandlers
argument_list|,
name|srvAddress
argument_list|,
name|conf
argument_list|,
name|daemonImpl
argument_list|,
name|LlapProtocolBlockingPB
operator|.
name|class
argument_list|,
name|secretManager
argument_list|,
name|pp
argument_list|,
name|ConfVars
operator|.
name|LLAP_SECURITY_ACL
argument_list|,
name|ConfVars
operator|.
name|LLAP_SECURITY_ACL_DENY
argument_list|)
expr_stmt|;
name|mngServer
operator|=
name|LlapUtil
operator|.
name|startProtocolServer
argument_list|(
name|mngPort
argument_list|,
literal|2
argument_list|,
name|mngAddress
argument_list|,
name|conf
argument_list|,
name|managementImpl
argument_list|,
name|LlapManagementProtocolPB
operator|.
name|class
argument_list|,
name|secretManager
argument_list|,
name|pp
argument_list|,
name|ConfVars
operator|.
name|LLAP_MANAGEMENT_ACL
argument_list|,
name|ConfVars
operator|.
name|LLAP_MANAGEMENT_ACL_DENY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStop
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mngServer
operator|!=
literal|null
condition|)
block|{
name|mngServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
name|InetSocketAddress
name|getBindAddress
parameter_list|()
block|{
return|return
name|srvAddress
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
name|InetSocketAddress
name|getManagementBindAddress
parameter_list|()
block|{
return|return
name|mngAddress
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|GetTokenResponseProto
name|getDelegationToken
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|GetTokenRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
if|if
condition|(
name|secretManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Operation not supported on unsecure cluster"
argument_list|)
throw|;
block|}
name|UserGroupInformation
name|callingUser
init|=
literal|null
decl_stmt|;
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|token
init|=
literal|null
decl_stmt|;
try|try
block|{
name|callingUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
comment|// Determine if the user would need to sign fragments.
name|boolean
name|isSigningRequired
init|=
name|determineIfSigningIsRequired
argument_list|(
name|callingUser
argument_list|)
decl_stmt|;
name|token
operator|=
name|secretManager
operator|.
name|createLlapToken
argument_list|(
name|request
operator|.
name|hasAppId
argument_list|()
condition|?
name|request
operator|.
name|getAppId
argument_list|()
else|:
literal|null
argument_list|,
literal|null
argument_list|,
name|isSigningRequired
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|isRestrictedToClusterUser
operator|&&
operator|!
name|clusterUser
operator|.
name|equals
argument_list|(
name|callingUser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Management protocol ACL is too permissive. The access has been"
operator|+
literal|" automatically restricted to "
operator|+
name|clusterUser
operator|+
literal|"; "
operator|+
name|callingUser
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|" is denied access. Please set "
operator|+
name|ConfVars
operator|.
name|LLAP_VALIDATE_ACLS
operator|.
name|varname
operator|+
literal|" to false,"
operator|+
literal|" or adjust "
operator|+
name|ConfVars
operator|.
name|LLAP_MANAGEMENT_ACL
operator|.
name|varname
operator|+
literal|" and "
operator|+
name|ConfVars
operator|.
name|LLAP_MANAGEMENT_ACL_DENY
operator|.
name|varname
operator|+
literal|" to a more restrictive ACL."
argument_list|)
throw|;
block|}
name|ByteArrayDataOutput
name|out
init|=
name|ByteStreams
operator|.
name|newDataOutput
argument_list|()
decl_stmt|;
try|try
block|{
name|token
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ByteString
name|bs
init|=
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|GetTokenResponseProto
name|response
init|=
name|GetTokenResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setToken
argument_list|(
name|bs
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapDaemonProtocolProtos
operator|.
name|PurgeCacheResponseProto
name|purgeCache
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|LlapDaemonProtocolProtos
operator|.
name|PurgeCacheRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LlapDaemonProtocolProtos
operator|.
name|PurgeCacheResponseProto
operator|.
name|Builder
name|responseProtoBuilder
init|=
name|LlapDaemonProtocolProtos
operator|.
name|PurgeCacheResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|LlapIo
argument_list|<
name|?
argument_list|>
name|llapIo
init|=
name|LlapProxy
operator|.
name|getIo
argument_list|()
decl_stmt|;
if|if
condition|(
name|llapIo
operator|!=
literal|null
condition|)
block|{
name|responseProtoBuilder
operator|.
name|setPurgedMemoryBytes
argument_list|(
name|llapIo
operator|.
name|purge
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|responseProtoBuilder
operator|.
name|setPurgedMemoryBytes
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|responseProtoBuilder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|LlapDaemonProtocolProtos
operator|.
name|GetDaemonMetricsResponseProto
name|getDaemonMetrics
parameter_list|(
specifier|final
name|RpcController
name|controller
parameter_list|,
specifier|final
name|LlapDaemonProtocolProtos
operator|.
name|GetDaemonMetricsRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LlapDaemonProtocolProtos
operator|.
name|GetDaemonMetricsResponseProto
operator|.
name|Builder
name|responseProtoBuilder
init|=
name|LlapDaemonProtocolProtos
operator|.
name|GetDaemonMetricsResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|executorMetrics
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|DumpingMetricsCollector
name|dmc
init|=
operator|new
name|DumpingMetricsCollector
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|executorMetrics
operator|.
name|getMetrics
argument_list|(
name|dmc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|data
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
name|responseProtoBuilder
operator|.
name|addMetrics
argument_list|(
name|LlapDaemonProtocolProtos
operator|.
name|MapEntry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|responseProtoBuilder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|determineIfSigningIsRequired
parameter_list|(
name|UserGroupInformation
name|callingUser
parameter_list|)
block|{
switch|switch
condition|(
name|isSigningRequiredConfig
condition|)
block|{
case|case
name|FALSE
case|:
return|return
literal|false
return|;
case|case
name|TRUE
case|:
return|return
literal|true
return|;
comment|// Note that this uses short user name without consideration for Kerberos realm.
comment|// This seems to be the common approach (e.g. for HDFS permissions), but it may be
comment|// better to consider the realm (although not the host, so not the full name).
case|case
name|EXCEPT_OWNER
case|:
return|return
operator|!
name|clusterUser
operator|.
name|equals
argument_list|(
name|callingUser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unknown value "
operator|+
name|isSigningRequiredConfig
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
class|class
name|DumpingMetricsRecordBuilder
extends|extends
name|MetricsRecordBuilder
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|data
decl_stmt|;
specifier|private
name|DumpingMetricsRecordBuilder
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsCollector
name|parent
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|tag
parameter_list|(
name|MetricsInfo
name|metricsInfo
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|add
parameter_list|(
name|MetricsTag
name|metricsTag
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|add
parameter_list|(
name|AbstractMetric
name|abstractMetric
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|setContext
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addCounter
parameter_list|(
name|MetricsInfo
name|metricsInfo
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|data
operator|.
name|put
argument_list|(
name|metricsInfo
operator|.
name|name
argument_list|()
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addCounter
parameter_list|(
name|MetricsInfo
name|metricsInfo
parameter_list|,
name|long
name|l
parameter_list|)
block|{
name|data
operator|.
name|put
argument_list|(
name|metricsInfo
operator|.
name|name
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|metricsInfo
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|data
operator|.
name|put
argument_list|(
name|metricsInfo
operator|.
name|name
argument_list|()
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|metricsInfo
parameter_list|,
name|long
name|l
parameter_list|)
block|{
name|data
operator|.
name|put
argument_list|(
name|metricsInfo
operator|.
name|name
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|metricsInfo
parameter_list|,
name|float
name|v
parameter_list|)
block|{
name|data
operator|.
name|put
argument_list|(
name|metricsInfo
operator|.
name|name
argument_list|()
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|metricsInfo
parameter_list|,
name|double
name|v
parameter_list|)
block|{
name|data
operator|.
name|put
argument_list|(
name|metricsInfo
operator|.
name|name
argument_list|()
argument_list|,
name|Math
operator|.
name|round
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|DumpingMetricsCollector
implements|implements
name|MetricsCollector
block|{
specifier|private
name|MetricsRecordBuilder
name|mrb
decl_stmt|;
name|DumpingMetricsCollector
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|data
parameter_list|)
block|{
name|mrb
operator|=
operator|new
name|DumpingMetricsRecordBuilder
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addRecord
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|mrb
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addRecord
parameter_list|(
name|MetricsInfo
name|metricsInfo
parameter_list|)
block|{
return|return
name|mrb
return|;
block|}
block|}
block|}
end_class

end_unit

