begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|counters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLongArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCacheCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|counters
operator|.
name|TezCounters
import|;
end_import

begin_comment
comment|/**  * Per query counters.  */
end_comment

begin_class
specifier|public
class|class
name|QueryFragmentCounters
implements|implements
name|LowLevelCacheCounters
block|{
specifier|private
specifier|final
name|boolean
name|doUseTimeCounters
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Desc
block|{
name|MACHINE
block|,
name|TABLE
block|,
name|FILE
block|,
name|STRIPES
block|}
specifier|private
specifier|final
name|AtomicLongArray
name|fixedCounters
decl_stmt|;
specifier|private
specifier|final
name|Object
index|[]
name|descs
decl_stmt|;
specifier|private
specifier|final
name|TezCounters
name|tezCounters
decl_stmt|;
specifier|public
name|QueryFragmentCounters
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|TezCounters
name|tezCounters
parameter_list|)
block|{
name|fixedCounters
operator|=
operator|new
name|AtomicLongArray
argument_list|(
name|LlapIOCounters
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|descs
operator|=
operator|new
name|Object
index|[
name|Desc
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|doUseTimeCounters
operator|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_ORC_ENABLE_TIME_COUNTERS
argument_list|)
expr_stmt|;
name|this
operator|.
name|tezCounters
operator|=
name|tezCounters
expr_stmt|;
if|if
condition|(
operator|!
name|doUseTimeCounters
condition|)
block|{
name|setCounter
argument_list|(
name|LlapIOCounters
operator|.
name|TOTAL_IO_TIME_NS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setCounter
argument_list|(
name|LlapIOCounters
operator|.
name|DECODE_TIME_NS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setCounter
argument_list|(
name|LlapIOCounters
operator|.
name|HDFS_TIME_NS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setCounter
argument_list|(
name|LlapIOCounters
operator|.
name|CONSUMER_TIME_NS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|incrCounter
parameter_list|(
name|LlapIOCounters
name|counter
parameter_list|)
block|{
name|incrCounter
argument_list|(
name|counter
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incrCounter
parameter_list|(
name|LlapIOCounters
name|counter
parameter_list|,
name|long
name|delta
parameter_list|)
block|{
name|fixedCounters
operator|.
name|addAndGet
argument_list|(
name|counter
operator|.
name|ordinal
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
if|if
condition|(
name|tezCounters
operator|!=
literal|null
condition|)
block|{
name|tezCounters
operator|.
name|findCounter
argument_list|(
name|LlapIOCounters
operator|.
name|values
argument_list|()
index|[
name|counter
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
operator|.
name|increment
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|long
name|startTimeCounter
parameter_list|()
block|{
return|return
operator|(
name|doUseTimeCounters
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
specifier|public
name|void
name|incrTimeCounter
parameter_list|(
name|LlapIOCounters
name|counter
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
if|if
condition|(
operator|!
name|doUseTimeCounters
condition|)
return|return;
name|long
name|delta
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|fixedCounters
operator|.
name|addAndGet
argument_list|(
name|counter
operator|.
name|ordinal
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
if|if
condition|(
name|tezCounters
operator|!=
literal|null
condition|)
block|{
name|tezCounters
operator|.
name|findCounter
argument_list|(
name|LlapIOCounters
operator|.
name|values
argument_list|()
index|[
name|counter
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
operator|.
name|increment
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setCounter
parameter_list|(
name|LlapIOCounters
name|counter
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|fixedCounters
operator|.
name|set
argument_list|(
name|counter
operator|.
name|ordinal
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|tezCounters
operator|!=
literal|null
condition|)
block|{
name|tezCounters
operator|.
name|findCounter
argument_list|(
name|LlapIOCounters
operator|.
name|values
argument_list|()
index|[
name|counter
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDesc
parameter_list|(
name|Desc
name|key
parameter_list|,
name|Object
name|desc
parameter_list|)
block|{
name|descs
index|[
name|key
operator|.
name|ordinal
argument_list|()
index|]
operator|=
name|desc
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|recordCacheHit
parameter_list|(
name|long
name|bytesHit
parameter_list|)
block|{
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|CACHE_HIT_BYTES
argument_list|,
name|bytesHit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|recordCacheMiss
parameter_list|(
name|long
name|bytesMissed
parameter_list|)
block|{
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|CACHE_MISS_BYTES
argument_list|,
name|bytesMissed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|recordAllocBytes
parameter_list|(
name|long
name|bytesUsed
parameter_list|,
name|long
name|bytesAllocated
parameter_list|)
block|{
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|ALLOCATED_USED_BYTES
argument_list|,
name|bytesUsed
argument_list|)
expr_stmt|;
name|incrCounter
argument_list|(
name|LlapIOCounters
operator|.
name|ALLOCATED_BYTES
argument_list|,
name|bytesAllocated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|recordHdfsTime
parameter_list|(
name|long
name|startTime
parameter_list|)
block|{
name|incrTimeCounter
argument_list|(
name|LlapIOCounters
operator|.
name|HDFS_TIME_NS
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// We rely on NDC information in the logs to map counters to attempt.
comment|// If that is not available, appId should either be passed in, or extracted from NDC.
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Fragment counters for ["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|descs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|descs
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|descs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]: [ "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fixedCounters
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|LlapIOCounters
operator|.
name|values
argument_list|()
index|[
name|i
index|]
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|fixedCounters
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" ]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|TezCounters
name|getTezCounters
parameter_list|()
block|{
return|return
name|tezCounters
return|;
block|}
block|}
end_class

end_unit

