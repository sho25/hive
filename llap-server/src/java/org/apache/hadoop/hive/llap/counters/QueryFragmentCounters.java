begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|counters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Per query counters.  */
end_comment

begin_class
specifier|public
class|class
name|QueryFragmentCounters
block|{
specifier|public
specifier|static
enum|enum
name|Counter
block|{
name|NUM_VECTOR_BATCHES
block|,
name|NUM_DECODED_BATCHES
block|,
name|SELECTED_ROWGROUPS
block|,
name|NUM_ERRORS
block|,
name|ROWS_EMITTED
block|}
specifier|private
name|String
name|appId
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|counterMap
decl_stmt|;
specifier|public
name|QueryFragmentCounters
parameter_list|()
block|{
name|this
argument_list|(
literal|"Not Specified"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|QueryFragmentCounters
parameter_list|(
name|String
name|applicationId
parameter_list|)
block|{
name|this
operator|.
name|appId
operator|=
name|applicationId
expr_stmt|;
name|this
operator|.
name|counterMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|incrCounter
parameter_list|(
name|Counter
name|counter
parameter_list|)
block|{
name|incrCounter
argument_list|(
name|counter
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incrCounter
parameter_list|(
name|Counter
name|counter
parameter_list|,
name|long
name|delta
parameter_list|)
block|{
if|if
condition|(
name|counterMap
operator|.
name|containsKey
argument_list|(
name|counter
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|long
name|val
init|=
name|counterMap
operator|.
name|get
argument_list|(
name|counter
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|counterMap
operator|.
name|put
argument_list|(
name|counter
operator|.
name|name
argument_list|()
argument_list|,
name|val
operator|+
name|delta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setCounter
argument_list|(
name|counter
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setCounter
parameter_list|(
name|Counter
name|counter
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|counterMap
operator|.
name|put
argument_list|(
name|counter
operator|.
name|name
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ApplicationId: "
operator|+
name|appId
operator|+
literal|" Counters: "
operator|+
name|counterMap
return|;
block|}
block|}
end_class

end_unit

