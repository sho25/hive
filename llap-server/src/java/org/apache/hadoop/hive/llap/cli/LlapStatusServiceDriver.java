begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|LlapStatusOptionsProcessor
operator|.
name|LlapStatusOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|configuration
operator|.
name|LlapDaemonConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|ServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|ClusterDescriptionKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|api
operator|.
name|StatusKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|client
operator|.
name|SliderClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|slider
operator|.
name|core
operator|.
name|exceptions
operator|.
name|SliderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|annotate
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|SerializationConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|annotate
operator|.
name|JsonSerialize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LlapStatusServiceDriver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapStatusServiceDriver
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Defining a bunch of configs here instead of in HiveConf. These are experimental, and mainly
comment|// for use when retry handling is fixed in Yarn/Hadoop
specifier|private
specifier|static
specifier|final
name|String
name|CONF_PREFIX
init|=
literal|"hive.llapcli."
decl_stmt|;
comment|// The following two keys should ideally be used to control RM connect timeouts. However,
comment|// they don't seem to work. The IPC timeout needs to be set instead.
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_YARN_RM_TIMEOUT_MAX_WAIT_MS
init|=
name|CONF_PREFIX
operator|+
literal|"yarn.rm.connect.max-wait-ms"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|CONFIG_YARN_RM_TIMEOUT_MAX_WAIT_MS_DEFAULT
init|=
literal|10000l
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_YARN_RM_RETRY_INTERVAL_MS
init|=
name|CONF_PREFIX
operator|+
literal|"yarn.rm.connect.retry-interval.ms"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|CONFIG_YARN_RM_RETRY_INTERVAL_MS_DEFAULT
init|=
literal|5000l
decl_stmt|;
comment|// As of Hadoop 2.7 - this is what controls the RM timeout.
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_IPC_CLIENT_CONNECT_MAX_RETRIES
init|=
name|CONF_PREFIX
operator|+
literal|"ipc.client.max-retries"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CONFIG_IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT
init|=
literal|2
decl_stmt|;
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_IPC_CLIENT_CONNECT_RETRY_INTERVAL_MS
init|=
name|CONF_PREFIX
operator|+
literal|"ipc.client.connect.retry-interval-ms"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|CONFIG_IPC_CLIENT_CONNECT_RETRY_INTERVAL_MS_DEFAULT
init|=
literal|1500l
decl_stmt|;
comment|// As of Hadoop 2.8 - this timeout spec behaves in a strnage manner. "2000,1" means 2000s with 1 retry.
comment|// However it does this - but does it thrice. Essentially - #retries+2 is the number of times the entire config
comment|// is retried. "2000,1" means 3 retries - each with 1 retry with a random 2000ms sleep.
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETRY_POLICY_SPEC
init|=
name|CONF_PREFIX
operator|+
literal|"timeline.service.fs-store.retry.policy.spec"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETRY_POLICY_SPEC_DEFAULT
init|=
literal|"2000, 1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_LLAP_ZK_REGISTRY_TIMEOUT_MS
init|=
name|CONF_PREFIX
operator|+
literal|"zk-registry.timeout-ms"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|CONFIG_LLAP_ZK_REGISTRY_TIMEOUT_MS_DEFAULT
init|=
literal|10000l
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AM_KEY
init|=
literal|"slider-appmaster"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LLAP_KEY
init|=
literal|"LLAP"
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
init|=
operator|new
name|SystemClock
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|final
name|AppStatusBuilder
name|appStatusBuilder
init|=
operator|new
name|AppStatusBuilder
argument_list|()
decl_stmt|;
specifier|public
name|LlapStatusServiceDriver
parameter_list|()
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|(
name|ss
operator|!=
literal|null
operator|)
condition|?
name|ss
operator|.
name|getConf
argument_list|()
else|:
operator|new
name|HiveConf
argument_list|(
name|SessionState
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Parse command line options.    *    * @param args    * @return command line options.    */
specifier|public
name|LlapStatusOptions
name|parseOptions
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|LlapStatusCliException
block|{
name|LlapStatusOptionsProcessor
name|optionsProcessor
init|=
operator|new
name|LlapStatusOptionsProcessor
argument_list|()
decl_stmt|;
name|LlapStatusOptions
name|options
decl_stmt|;
try|try
block|{
name|options
operator|=
name|optionsProcessor
operator|.
name|processOptions
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
name|options
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to parse arguments"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LlapStatusCliException
argument_list|(
name|ExitCode
operator|.
name|INCORRECT_USAGE
argument_list|,
literal|"Incorrect usage"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|run
parameter_list|(
name|LlapStatusOptions
name|options
parameter_list|)
block|{
name|SliderClient
name|sliderClient
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|f
range|:
name|LlapDaemonConfiguration
operator|.
name|DAEMON_CONFIGS
control|)
block|{
name|conf
operator|.
name|addResource
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|reloadConfiguration
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|props
range|:
name|options
operator|.
name|getConf
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|props
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Setup timeouts for various services.
comment|// Once we move to a Hadoop-2.8 dependency, the following paramteer can be used.
comment|// conf.set(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETRY_POLICY_SPEC);
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.timeline-service.entity-group-fs-store.retry-policy-spec"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|CONFIG_TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETRY_POLICY_SPEC
argument_list|,
name|CONFIG_TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETRY_POLICY_SPEC_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|CONFIG_YARN_RM_TIMEOUT_MAX_WAIT_MS
argument_list|,
name|CONFIG_YARN_RM_TIMEOUT_MAX_WAIT_MS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|CONFIG_YARN_RM_RETRY_INTERVAL_MS
argument_list|,
name|CONFIG_YARN_RM_RETRY_INTERVAL_MS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|CONFIG_IPC_CLIENT_CONNECT_MAX_RETRIES
argument_list|,
name|CONFIG_IPC_CLIENT_CONNECT_MAX_RETRIES_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|CONFIG_IPC_CLIENT_CONNECT_RETRY_INTERVAL_MS
argument_list|,
name|CONFIG_IPC_CLIENT_CONNECT_RETRY_INTERVAL_MS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ZOOKEEPER_SESSION_TIMEOUT
argument_list|,
operator|(
name|conf
operator|.
name|getLong
argument_list|(
name|CONFIG_LLAP_ZK_REGISTRY_TIMEOUT_MS
argument_list|,
name|CONFIG_LLAP_ZK_REGISTRY_TIMEOUT_MS_DEFAULT
argument_list|)
operator|+
literal|"ms"
operator|)
argument_list|)
expr_stmt|;
name|String
name|appName
decl_stmt|;
name|appName
operator|=
name|options
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|appName
argument_list|)
condition|)
block|{
name|appName
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
argument_list|)
expr_stmt|;
if|if
condition|(
name|appName
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
operator|&&
name|appName
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// This is a valid slider app name. Parse it out.
name|appName
operator|=
name|appName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Invalid app name. Checked later.
name|appName
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|appName
argument_list|)
condition|)
block|{
name|String
name|message
init|=
literal|"Invalid app name. This must be setup via config or passed in as a parameter."
operator|+
literal|" This tool works with clusters deployed by Slider/YARN"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|ExitCode
operator|.
name|INCORRECT_USAGE
operator|.
name|getInt
argument_list|()
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using appName: {}"
argument_list|,
name|appName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sliderClient
operator|=
name|createSliderClient
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LlapStatusCliException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|getExitCode
argument_list|()
operator|.
name|getInt
argument_list|()
return|;
block|}
comment|// Get the App report from YARN
name|ApplicationReport
name|appReport
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appReport
operator|=
name|getAppReport
argument_list|(
name|appName
argument_list|,
name|sliderClient
argument_list|,
name|options
operator|.
name|getFindAppTimeoutMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LlapStatusCliException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|getExitCode
argument_list|()
operator|.
name|getInt
argument_list|()
return|;
block|}
comment|// Process the report to decide whether to go to slider.
name|ExitCode
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|processAppReport
argument_list|(
name|appReport
argument_list|,
name|appStatusBuilder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LlapStatusCliException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|getExitCode
argument_list|()
operator|.
name|getInt
argument_list|()
return|;
block|}
if|if
condition|(
name|ret
operator|!=
name|ExitCode
operator|.
name|SUCCESS
condition|)
block|{
return|return
name|ret
operator|.
name|getInt
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|EnumSet
operator|.
name|of
argument_list|(
name|State
operator|.
name|APP_NOT_FOUND
argument_list|,
name|State
operator|.
name|COMPLETE
argument_list|,
name|State
operator|.
name|LAUNCHING
argument_list|)
operator|.
name|contains
argument_list|(
name|appStatusBuilder
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|ExitCode
operator|.
name|SUCCESS
operator|.
name|getInt
argument_list|()
return|;
block|}
else|else
block|{
comment|// Get information from slider.
try|try
block|{
name|ret
operator|=
name|populateAppStatusFromSlider
argument_list|(
name|appName
argument_list|,
name|sliderClient
argument_list|,
name|appStatusBuilder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LlapStatusCliException
name|e
parameter_list|)
block|{
comment|// In case of failure, send back whatever is constructed sop far - which wouldbe from the AppReport
name|logError
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|getExitCode
argument_list|()
operator|.
name|getInt
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|ret
operator|!=
name|ExitCode
operator|.
name|SUCCESS
condition|)
block|{
return|return
name|ret
operator|.
name|getInt
argument_list|()
return|;
block|}
else|else
block|{
try|try
block|{
name|ret
operator|=
name|populateAppStatusFromLlapRegistry
argument_list|(
name|appName
argument_list|,
name|appStatusBuilder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LlapStatusCliException
name|e
parameter_list|)
block|{
name|logError
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|e
operator|.
name|getExitCode
argument_list|()
operator|.
name|getInt
argument_list|()
return|;
block|}
block|}
return|return
name|ret
operator|.
name|getInt
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Final AppState: "
operator|+
name|appStatusBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sliderClient
operator|!=
literal|null
condition|)
block|{
name|sliderClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|outputJson
parameter_list|(
name|PrintWriter
name|writer
parameter_list|)
throws|throws
name|LlapStatusCliException
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|SerializationConfig
operator|.
name|Feature
operator|.
name|FAIL_ON_EMPTY_BEANS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setSerializationInclusion
argument_list|(
name|JsonSerialize
operator|.
name|Inclusion
operator|.
name|NON_NULL
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setSerializationInclusion
argument_list|(
name|JsonSerialize
operator|.
name|Inclusion
operator|.
name|NON_EMPTY
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|println
argument_list|(
name|mapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|appStatusBuilder
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create JSON"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LlapStatusCliException
argument_list|(
name|ExitCode
operator|.
name|LLAP_JSON_GENERATION_ERROR
argument_list|,
literal|"Failed to create JSON"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|SliderClient
name|createSliderClient
parameter_list|()
throws|throws
name|LlapStatusCliException
block|{
name|SliderClient
name|sliderClient
decl_stmt|;
try|try
block|{
name|sliderClient
operator|=
operator|new
name|SliderClient
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initHadoopBinding
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Configuration
name|sliderClientConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|sliderClientConf
operator|=
name|sliderClient
operator|.
name|bindArgs
argument_list|(
name|sliderClientConf
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"help"
block|}
argument_list|)
expr_stmt|;
name|sliderClient
operator|.
name|init
argument_list|(
name|sliderClientConf
argument_list|)
expr_stmt|;
name|sliderClient
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|sliderClient
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LlapStatusCliException
argument_list|(
name|ExitCode
operator|.
name|SLIDER_CLIENT_ERROR_CREATE_FAILED
argument_list|,
literal|"Failed to create slider client"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ApplicationReport
name|getAppReport
parameter_list|(
name|String
name|appName
parameter_list|,
name|SliderClient
name|sliderClient
parameter_list|,
name|long
name|timeoutMs
parameter_list|)
throws|throws
name|LlapStatusCliException
block|{
name|long
name|startTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|timeoutTime
init|=
name|timeoutMs
operator|<
literal|0
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
operator|(
name|startTime
operator|+
name|timeoutMs
operator|)
decl_stmt|;
name|ApplicationReport
name|appReport
init|=
literal|null
decl_stmt|;
comment|// TODO HIVE-13454 Maybe add an option to wait for a certain amount of time for the app to
comment|// move to running state. Potentially even wait for the containers to be launched.
comment|//    while (clock.getTime()< timeoutTime&& appReport == null) {
while|while
condition|(
name|appReport
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|appReport
operator|=
name|sliderClient
operator|.
name|getYarnAppListClient
argument_list|()
operator|.
name|findInstance
argument_list|(
name|appName
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeoutMs
operator|==
literal|0
condition|)
block|{
comment|// break immediately if timeout is 0
break|break;
block|}
comment|// Otherwise sleep, and try again.
if|if
condition|(
name|appReport
operator|==
literal|null
condition|)
block|{
name|long
name|remainingTime
init|=
name|Math
operator|.
name|min
argument_list|(
name|timeoutTime
operator|-
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
literal|500l
argument_list|)
decl_stmt|;
if|if
condition|(
name|remainingTime
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|remainingTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// No point separating IOException vs YarnException vs others
throw|throw
operator|new
name|LlapStatusCliException
argument_list|(
name|ExitCode
operator|.
name|YARN_ERROR
argument_list|,
literal|"Failed to get Yarn AppReport"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|appReport
return|;
block|}
comment|/**    * Populates parts of the AppStatus    *    * @param appReport    * @param appStatusBuilder    * @return an ExitCode. An ExitCode other than ExitCode.SUCCESS implies future progress not possible    * @throws LlapStatusCliException    */
specifier|private
name|ExitCode
name|processAppReport
parameter_list|(
name|ApplicationReport
name|appReport
parameter_list|,
name|AppStatusBuilder
name|appStatusBuilder
parameter_list|)
throws|throws
name|LlapStatusCliException
block|{
if|if
condition|(
name|appReport
operator|==
literal|null
condition|)
block|{
name|appStatusBuilder
operator|.
name|setState
argument_list|(
name|State
operator|.
name|APP_NOT_FOUND
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"No Application Found"
argument_list|)
expr_stmt|;
return|return
name|ExitCode
operator|.
name|SUCCESS
return|;
block|}
name|appStatusBuilder
operator|.
name|setAmInfo
argument_list|(
operator|new
name|AmInfo
argument_list|()
operator|.
name|setAppName
argument_list|(
name|appReport
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setAppType
argument_list|(
name|appReport
operator|.
name|getApplicationType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|setAppStartTime
argument_list|(
name|appReport
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|NEW_SAVING
case|:
case|case
name|SUBMITTED
case|:
name|appStatusBuilder
operator|.
name|setState
argument_list|(
name|State
operator|.
name|LAUNCHING
argument_list|)
expr_stmt|;
return|return
name|ExitCode
operator|.
name|SUCCESS
return|;
case|case
name|ACCEPTED
case|:
name|appStatusBuilder
operator|.
name|maybeCreateAndGetAmInfo
argument_list|()
operator|.
name|setAppId
argument_list|(
name|appReport
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|setState
argument_list|(
name|State
operator|.
name|LAUNCHING
argument_list|)
expr_stmt|;
return|return
name|ExitCode
operator|.
name|SUCCESS
return|;
case|case
name|RUNNING
case|:
name|appStatusBuilder
operator|.
name|maybeCreateAndGetAmInfo
argument_list|()
operator|.
name|setAppId
argument_list|(
name|appReport
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the app state is running, get additional information from Slider itself.
return|return
name|ExitCode
operator|.
name|SUCCESS
return|;
case|case
name|FINISHED
case|:
case|case
name|FAILED
case|:
case|case
name|KILLED
case|:
name|appStatusBuilder
operator|.
name|maybeCreateAndGetAmInfo
argument_list|()
operator|.
name|setAppId
argument_list|(
name|appReport
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|setAppFinishTime
argument_list|(
name|appReport
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|setState
argument_list|(
name|State
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
return|return
name|ExitCode
operator|.
name|SUCCESS
return|;
default|default:
throw|throw
operator|new
name|LlapStatusCliException
argument_list|(
name|ExitCode
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Unknown Yarn Application State: "
operator|+
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    *    * @param appName    * @param sliderClient    * @param appStatusBuilder    * @return an ExitCode. An ExitCode other than ExitCode.SUCCESS implies future progress not possible    * @throws LlapStatusCliException    */
specifier|private
name|ExitCode
name|populateAppStatusFromSlider
parameter_list|(
name|String
name|appName
parameter_list|,
name|SliderClient
name|sliderClient
parameter_list|,
name|AppStatusBuilder
name|appStatusBuilder
parameter_list|)
throws|throws
name|LlapStatusCliException
block|{
name|ClusterDescription
name|clusterDescription
decl_stmt|;
try|try
block|{
name|clusterDescription
operator|=
name|sliderClient
operator|.
name|getClusterDescription
argument_list|(
name|appName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SliderException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LlapStatusCliException
argument_list|(
name|ExitCode
operator|.
name|SLIDER_CLIENT_ERROR_OTHER
argument_list|,
literal|"Failed to get cluster description from slider. SliderErrorCode="
operator|+
operator|(
name|e
operator|)
operator|.
name|getExitCode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LlapStatusCliException
argument_list|(
name|ExitCode
operator|.
name|SLIDER_CLIENT_ERROR_OTHER
argument_list|,
literal|"Failed to get cluster description from slider"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|clusterDescription
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Slider ClusterDescription not available"
argument_list|)
expr_stmt|;
return|return
name|ExitCode
operator|.
name|SLIDER_CLIENT_ERROR_OTHER
return|;
comment|// ClusterDescription should always be present.
block|}
else|else
block|{
comment|// Process the Cluster Status returned by slider.
name|appStatusBuilder
operator|.
name|setOriginalConfigurationPath
argument_list|(
name|clusterDescription
operator|.
name|originConfigurationPath
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|setGeneratedConfigurationPath
argument_list|(
name|clusterDescription
operator|.
name|generatedConfigurationPath
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|setAppStartTime
argument_list|(
name|clusterDescription
operator|.
name|createTime
argument_list|)
expr_stmt|;
comment|// Finish populating AMInfo
name|appStatusBuilder
operator|.
name|maybeCreateAndGetAmInfo
argument_list|()
operator|.
name|setAmWebUrl
argument_list|(
name|clusterDescription
operator|.
name|getInfo
argument_list|(
name|StatusKeys
operator|.
name|INFO_AM_WEB_URL
argument_list|)
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|maybeCreateAndGetAmInfo
argument_list|()
operator|.
name|setHostname
argument_list|(
name|clusterDescription
operator|.
name|getInfo
argument_list|(
name|StatusKeys
operator|.
name|INFO_AM_HOSTNAME
argument_list|)
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|maybeCreateAndGetAmInfo
argument_list|()
operator|.
name|setContainerId
argument_list|(
name|clusterDescription
operator|.
name|getInfo
argument_list|(
name|StatusKeys
operator|.
name|INFO_AM_CONTAINER_ID
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clusterDescription
operator|.
name|statistics
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|llapStats
init|=
name|clusterDescription
operator|.
name|statistics
operator|.
name|get
argument_list|(
name|LLAP_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|llapStats
operator|!=
literal|null
condition|)
block|{
name|int
name|desiredContainers
init|=
name|llapStats
operator|.
name|get
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_DESIRED
argument_list|)
decl_stmt|;
name|int
name|liveContainers
init|=
name|llapStats
operator|.
name|get
argument_list|(
name|StatusKeys
operator|.
name|STATISTICS_CONTAINERS_LIVE
argument_list|)
decl_stmt|;
name|appStatusBuilder
operator|.
name|setDesiredInstances
argument_list|(
name|desiredContainers
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|setLiveInstances
argument_list|(
name|liveContainers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|LlapStatusCliException
argument_list|(
name|ExitCode
operator|.
name|SLIDER_CLIENT_ERROR_OTHER
argument_list|,
literal|"Failed to get statistics for LLAP"
argument_list|)
throw|;
comment|// Error since LLAP should always exist.
block|}
comment|// TODO HIVE-13454 Use some information from here such as containers.start.failed
comment|// and containers.failed.recently to provide an estimate of whether this app is healthy or not.
block|}
else|else
block|{
throw|throw
operator|new
name|LlapStatusCliException
argument_list|(
name|ExitCode
operator|.
name|SLIDER_CLIENT_ERROR_OTHER
argument_list|,
literal|"Failed to get statistics"
argument_list|)
throw|;
comment|// Error since statistics should always exist.
block|}
comment|// Code to locate container status via slider. Not using this at the moment.
if|if
condition|(
name|clusterDescription
operator|.
name|status
operator|!=
literal|null
condition|)
block|{
name|Object
name|liveObject
init|=
name|clusterDescription
operator|.
name|status
operator|.
name|get
argument_list|(
name|ClusterDescriptionKeys
operator|.
name|KEY_CLUSTER_LIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|liveObject
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|liveEntity
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
operator|)
name|liveObject
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|llapEntity
init|=
name|liveEntity
operator|.
name|get
argument_list|(
name|LLAP_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|llapEntity
operator|!=
literal|null
condition|)
block|{
comment|// Not a problem. Nothing has come up yet.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|containerEntry
range|:
name|llapEntity
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|containerIdString
init|=
name|containerEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|containerParams
init|=
name|containerEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|host
init|=
operator|(
name|String
operator|)
name|containerParams
operator|.
name|get
argument_list|(
literal|"host"
argument_list|)
decl_stmt|;
name|LlapInstance
name|llapInstance
init|=
operator|new
name|LlapInstance
argument_list|(
name|host
argument_list|,
name|containerIdString
argument_list|)
decl_stmt|;
name|appStatusBuilder
operator|.
name|addNewLlapInstance
argument_list|(
name|llapInstance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ExitCode
operator|.
name|SUCCESS
return|;
block|}
block|}
comment|/**    *    * @param appName    * @param appStatusBuilder    * @return an ExitCode. An ExitCode other than ExitCode.SUCCESS implies future progress not possible    * @throws LlapStatusCliException    */
specifier|private
name|ExitCode
name|populateAppStatusFromLlapRegistry
parameter_list|(
name|String
name|appName
parameter_list|,
name|AppStatusBuilder
name|appStatusBuilder
parameter_list|)
throws|throws
name|LlapStatusCliException
block|{
name|Configuration
name|llapRegistryConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|llapRegistryConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
operator|.
name|varname
argument_list|,
literal|"@"
operator|+
name|appName
argument_list|)
expr_stmt|;
name|LlapRegistryService
name|llapRegistry
decl_stmt|;
try|try
block|{
name|llapRegistry
operator|=
name|LlapRegistryService
operator|.
name|getClient
argument_list|(
name|llapRegistryConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LlapStatusCliException
argument_list|(
name|ExitCode
operator|.
name|LLAP_REGISTRY_ERROR
argument_list|,
literal|"Failed to create llap registry client"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceInstance
argument_list|>
name|serviceInstanceMap
decl_stmt|;
try|try
block|{
name|serviceInstanceMap
operator|=
name|llapRegistry
operator|.
name|getInstances
argument_list|()
operator|.
name|getAll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LlapStatusCliException
argument_list|(
name|ExitCode
operator|.
name|LLAP_REGISTRY_ERROR
argument_list|,
literal|"Failed to get instances from llap registry"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|serviceInstanceMap
operator|==
literal|null
operator|||
name|serviceInstanceMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No information found in the LLAP registry"
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|setLiveInstances
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|setState
argument_list|(
name|State
operator|.
name|LAUNCHING
argument_list|)
expr_stmt|;
name|appStatusBuilder
operator|.
name|clearLlapInstances
argument_list|()
expr_stmt|;
return|return
name|ExitCode
operator|.
name|SUCCESS
return|;
block|}
else|else
block|{
comment|// Tracks instances known by both slider and llap.
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|validatedInstances
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|llapExtraInstances
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ServiceInstance
argument_list|>
name|serviceInstanceEntry
range|:
name|serviceInstanceMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServiceInstance
name|serviceInstance
init|=
name|serviceInstanceEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|containerIdString
init|=
name|serviceInstance
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_CONTAINER_ID
operator|.
name|varname
argument_list|)
decl_stmt|;
name|LlapInstance
name|llapInstance
init|=
name|appStatusBuilder
operator|.
name|removeAndgetLlapInstanceForContainer
argument_list|(
name|containerIdString
argument_list|)
decl_stmt|;
if|if
condition|(
name|llapInstance
operator|!=
literal|null
condition|)
block|{
name|llapInstance
operator|.
name|setMgmtPort
argument_list|(
name|serviceInstance
operator|.
name|getManagementPort
argument_list|()
argument_list|)
expr_stmt|;
name|llapInstance
operator|.
name|setRpcPort
argument_list|(
name|serviceInstance
operator|.
name|getRpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|llapInstance
operator|.
name|setShufflePort
argument_list|(
name|serviceInstance
operator|.
name|getShufflePort
argument_list|()
argument_list|)
expr_stmt|;
name|llapInstance
operator|.
name|setWebUrl
argument_list|(
name|serviceInstance
operator|.
name|getServicesAddress
argument_list|()
argument_list|)
expr_stmt|;
name|llapInstance
operator|.
name|setStatusUrl
argument_list|(
name|serviceInstance
operator|.
name|getServicesAddress
argument_list|()
operator|+
literal|"/status"
argument_list|)
expr_stmt|;
name|validatedInstances
operator|.
name|add
argument_list|(
name|llapInstance
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This likely indicates that an instance has recently restarted
comment|// (the old instance has not been unregistered), and the new instances has not registered yet.
name|llapExtraInstances
operator|.
name|add
argument_list|(
name|containerIdString
argument_list|)
expr_stmt|;
comment|// This instance will not be added back, since it's services are not up yet.
block|}
block|}
name|appStatusBuilder
operator|.
name|setLiveInstances
argument_list|(
name|validatedInstances
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|validatedInstances
operator|.
name|size
argument_list|()
operator|>=
name|appStatusBuilder
operator|.
name|getDesiredInstances
argument_list|()
condition|)
block|{
name|appStatusBuilder
operator|.
name|setState
argument_list|(
name|State
operator|.
name|RUNNING_ALL
argument_list|)
expr_stmt|;
if|if
condition|(
name|validatedInstances
operator|.
name|size
argument_list|()
operator|>
name|appStatusBuilder
operator|.
name|getDesiredInstances
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found more entries in LLAP registry, as compared to desired entries"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|appStatusBuilder
operator|.
name|setState
argument_list|(
name|State
operator|.
name|RUNNING_PARTIAL
argument_list|)
expr_stmt|;
block|}
comment|// At this point, everything that can be consumed from AppStatusBuilder has been consumed.
comment|// Debug only
if|if
condition|(
name|appStatusBuilder
operator|.
name|allInstances
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Containers likely to come up soon.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Potential instances starting up: {}"
argument_list|,
name|appStatusBuilder
operator|.
name|allInstances
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|llapExtraInstances
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Old containers which are likely shutting down
name|LOG
operator|.
name|debug
argument_list|(
literal|"Instances likely to shutdown soon: {}"
argument_list|,
name|llapExtraInstances
argument_list|)
expr_stmt|;
block|}
name|appStatusBuilder
operator|.
name|clearAndAddPreviouslyKnownInstances
argument_list|(
name|validatedInstances
argument_list|)
expr_stmt|;
block|}
return|return
name|ExitCode
operator|.
name|SUCCESS
return|;
block|}
finally|finally
block|{
name|llapRegistry
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
specifier|final
class|class
name|AppStatusBuilder
block|{
specifier|private
name|AmInfo
name|amInfo
decl_stmt|;
specifier|private
name|State
name|state
init|=
name|State
operator|.
name|UNKNOWN
decl_stmt|;
specifier|private
name|String
name|originalConfigurationPath
decl_stmt|;
specifier|private
name|String
name|generatedConfigurationPath
decl_stmt|;
specifier|private
name|Integer
name|desiredInstances
decl_stmt|;
specifier|private
name|Integer
name|liveInstances
decl_stmt|;
specifier|private
name|Long
name|appStartTime
decl_stmt|;
specifier|private
name|Long
name|appFinishTime
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|llapInstances
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|LlapInstance
argument_list|>
name|containerToInstanceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setAmInfo
parameter_list|(
name|AmInfo
name|amInfo
parameter_list|)
block|{
name|this
operator|.
name|amInfo
operator|=
name|amInfo
expr_stmt|;
block|}
specifier|public
name|AppStatusBuilder
name|setState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AppStatusBuilder
name|setOriginalConfigurationPath
parameter_list|(
name|String
name|originalConfigurationPath
parameter_list|)
block|{
name|this
operator|.
name|originalConfigurationPath
operator|=
name|originalConfigurationPath
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AppStatusBuilder
name|setGeneratedConfigurationPath
parameter_list|(
name|String
name|generatedConfigurationPath
parameter_list|)
block|{
name|this
operator|.
name|generatedConfigurationPath
operator|=
name|generatedConfigurationPath
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AppStatusBuilder
name|setAppStartTime
parameter_list|(
name|long
name|appStartTime
parameter_list|)
block|{
name|this
operator|.
name|appStartTime
operator|=
name|appStartTime
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AppStatusBuilder
name|setAppFinishTime
parameter_list|(
name|long
name|finishTime
parameter_list|)
block|{
name|this
operator|.
name|appFinishTime
operator|=
name|finishTime
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AppStatusBuilder
name|setDesiredInstances
parameter_list|(
name|int
name|desiredInstances
parameter_list|)
block|{
name|this
operator|.
name|desiredInstances
operator|=
name|desiredInstances
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AppStatusBuilder
name|setLiveInstances
parameter_list|(
name|int
name|liveInstances
parameter_list|)
block|{
name|this
operator|.
name|liveInstances
operator|=
name|liveInstances
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AppStatusBuilder
name|addNewLlapInstance
parameter_list|(
name|LlapInstance
name|llapInstance
parameter_list|)
block|{
name|this
operator|.
name|llapInstances
operator|.
name|add
argument_list|(
name|llapInstance
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerToInstanceMap
operator|.
name|put
argument_list|(
name|llapInstance
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|llapInstance
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|LlapInstance
name|removeAndgetLlapInstanceForContainer
parameter_list|(
name|String
name|containerIdString
parameter_list|)
block|{
return|return
name|containerToInstanceMap
operator|.
name|remove
argument_list|(
name|containerIdString
argument_list|)
return|;
block|}
specifier|public
name|void
name|clearLlapInstances
parameter_list|()
block|{
name|this
operator|.
name|llapInstances
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerToInstanceMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AppStatusBuilder
name|clearAndAddPreviouslyKnownInstances
parameter_list|(
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|llapInstances
parameter_list|)
block|{
name|clearLlapInstances
argument_list|()
expr_stmt|;
for|for
control|(
name|LlapInstance
name|llapInstance
range|:
name|llapInstances
control|)
block|{
name|addNewLlapInstance
argument_list|(
name|llapInstance
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|JsonIgnore
specifier|public
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|allInstances
parameter_list|()
block|{
return|return
name|this
operator|.
name|llapInstances
return|;
block|}
specifier|public
name|AmInfo
name|getAmInfo
parameter_list|()
block|{
return|return
name|amInfo
return|;
block|}
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|public
name|String
name|getOriginalConfigurationPath
parameter_list|()
block|{
return|return
name|originalConfigurationPath
return|;
block|}
specifier|public
name|String
name|getGeneratedConfigurationPath
parameter_list|()
block|{
return|return
name|generatedConfigurationPath
return|;
block|}
specifier|public
name|Integer
name|getDesiredInstances
parameter_list|()
block|{
return|return
name|desiredInstances
return|;
block|}
specifier|public
name|Integer
name|getLiveInstances
parameter_list|()
block|{
return|return
name|liveInstances
return|;
block|}
specifier|public
name|Long
name|getAppStartTime
parameter_list|()
block|{
return|return
name|appStartTime
return|;
block|}
specifier|public
name|Long
name|getAppFinishTime
parameter_list|()
block|{
return|return
name|appFinishTime
return|;
block|}
specifier|public
name|List
argument_list|<
name|LlapInstance
argument_list|>
name|getLlapInstances
parameter_list|()
block|{
return|return
name|llapInstances
return|;
block|}
annotation|@
name|JsonIgnore
specifier|public
name|AmInfo
name|maybeCreateAndGetAmInfo
parameter_list|()
block|{
if|if
condition|(
name|amInfo
operator|==
literal|null
condition|)
block|{
name|amInfo
operator|=
operator|new
name|AmInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|amInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AppStatusBuilder{"
operator|+
literal|"amInfo="
operator|+
name|amInfo
operator|+
literal|", state="
operator|+
name|state
operator|+
literal|", originalConfigurationPath='"
operator|+
name|originalConfigurationPath
operator|+
literal|'\''
operator|+
literal|", generatedConfigurationPath='"
operator|+
name|generatedConfigurationPath
operator|+
literal|'\''
operator|+
literal|", desiredInstances="
operator|+
name|desiredInstances
operator|+
literal|", liveInstances="
operator|+
name|liveInstances
operator|+
literal|", appStartTime="
operator|+
name|appStartTime
operator|+
literal|", appFinishTime="
operator|+
name|appFinishTime
operator|+
literal|", llapInstances="
operator|+
name|llapInstances
operator|+
literal|", containerToInstanceMap="
operator|+
name|containerToInstanceMap
operator|+
literal|'}'
return|;
block|}
block|}
specifier|static
class|class
name|AmInfo
block|{
specifier|private
name|String
name|appName
decl_stmt|;
specifier|private
name|String
name|appType
decl_stmt|;
specifier|private
name|String
name|appId
decl_stmt|;
specifier|private
name|String
name|containerId
decl_stmt|;
specifier|private
name|String
name|hostname
decl_stmt|;
specifier|private
name|String
name|amWebUrl
decl_stmt|;
specifier|public
name|AmInfo
name|setAppName
parameter_list|(
name|String
name|appName
parameter_list|)
block|{
name|this
operator|.
name|appName
operator|=
name|appName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AmInfo
name|setAppType
parameter_list|(
name|String
name|appType
parameter_list|)
block|{
name|this
operator|.
name|appType
operator|=
name|appType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AmInfo
name|setAppId
parameter_list|(
name|String
name|appId
parameter_list|)
block|{
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AmInfo
name|setContainerId
parameter_list|(
name|String
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AmInfo
name|setHostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|AmInfo
name|setAmWebUrl
parameter_list|(
name|String
name|amWebUrl
parameter_list|)
block|{
name|this
operator|.
name|amWebUrl
operator|=
name|amWebUrl
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getAppName
parameter_list|()
block|{
return|return
name|appName
return|;
block|}
specifier|public
name|String
name|getAppType
parameter_list|()
block|{
return|return
name|appType
return|;
block|}
specifier|public
name|String
name|getAppId
parameter_list|()
block|{
return|return
name|appId
return|;
block|}
specifier|public
name|String
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
specifier|public
name|String
name|getAmWebUrl
parameter_list|()
block|{
return|return
name|amWebUrl
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AmInfo{"
operator|+
literal|"appName='"
operator|+
name|appName
operator|+
literal|'\''
operator|+
literal|", appType='"
operator|+
name|appType
operator|+
literal|'\''
operator|+
literal|", appId='"
operator|+
name|appId
operator|+
literal|'\''
operator|+
literal|", containerId='"
operator|+
name|containerId
operator|+
literal|'\''
operator|+
literal|", hostname='"
operator|+
name|hostname
operator|+
literal|'\''
operator|+
literal|", amWebUrl='"
operator|+
name|amWebUrl
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
specifier|static
class|class
name|LlapInstance
block|{
specifier|private
specifier|final
name|String
name|hostname
decl_stmt|;
specifier|private
specifier|final
name|String
name|containerId
decl_stmt|;
specifier|private
name|String
name|statusUrl
decl_stmt|;
specifier|private
name|String
name|webUrl
decl_stmt|;
specifier|private
name|Integer
name|rpcPort
decl_stmt|;
specifier|private
name|Integer
name|mgmtPort
decl_stmt|;
specifier|private
name|Integer
name|shufflePort
decl_stmt|;
comment|// TODO HIVE-13454 Add additional information such as #executors, container size, etc
specifier|public
name|LlapInstance
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
block|}
specifier|public
name|LlapInstance
name|setWebUrl
parameter_list|(
name|String
name|webUrl
parameter_list|)
block|{
name|this
operator|.
name|webUrl
operator|=
name|webUrl
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|LlapInstance
name|setStatusUrl
parameter_list|(
name|String
name|statusUrl
parameter_list|)
block|{
name|this
operator|.
name|statusUrl
operator|=
name|statusUrl
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|LlapInstance
name|setRpcPort
parameter_list|(
name|int
name|rpcPort
parameter_list|)
block|{
name|this
operator|.
name|rpcPort
operator|=
name|rpcPort
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|LlapInstance
name|setMgmtPort
parameter_list|(
name|int
name|mgmtPort
parameter_list|)
block|{
name|this
operator|.
name|mgmtPort
operator|=
name|mgmtPort
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|LlapInstance
name|setShufflePort
parameter_list|(
name|int
name|shufflePort
parameter_list|)
block|{
name|this
operator|.
name|shufflePort
operator|=
name|shufflePort
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
specifier|public
name|String
name|getStatusUrl
parameter_list|()
block|{
return|return
name|statusUrl
return|;
block|}
specifier|public
name|String
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
specifier|public
name|String
name|getWebUrl
parameter_list|()
block|{
return|return
name|webUrl
return|;
block|}
specifier|public
name|Integer
name|getRpcPort
parameter_list|()
block|{
return|return
name|rpcPort
return|;
block|}
specifier|public
name|Integer
name|getMgmtPort
parameter_list|()
block|{
return|return
name|mgmtPort
return|;
block|}
specifier|public
name|Integer
name|getShufflePort
parameter_list|()
block|{
return|return
name|shufflePort
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"LlapInstance{"
operator|+
literal|"hostname='"
operator|+
name|hostname
operator|+
literal|'\''
operator|+
literal|", containerId='"
operator|+
name|containerId
operator|+
literal|'\''
operator|+
literal|", statusUrl='"
operator|+
name|statusUrl
operator|+
literal|'\''
operator|+
literal|", webUrl='"
operator|+
name|webUrl
operator|+
literal|'\''
operator|+
literal|", rpcPort="
operator|+
name|rpcPort
operator|+
literal|", mgmtPort="
operator|+
name|mgmtPort
operator|+
literal|", shufflePort="
operator|+
name|shufflePort
operator|+
literal|'}'
return|;
block|}
block|}
specifier|static
class|class
name|LlapStatusCliException
extends|extends
name|Exception
block|{
specifier|final
name|ExitCode
name|exitCode
decl_stmt|;
specifier|public
name|LlapStatusCliException
parameter_list|(
name|ExitCode
name|exitCode
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|exitCode
operator|.
name|getInt
argument_list|()
operator|+
literal|": "
operator|+
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
block|}
specifier|public
name|LlapStatusCliException
parameter_list|(
name|ExitCode
name|exitCode
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
block|}
specifier|public
name|ExitCode
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
block|}
enum|enum
name|State
block|{
name|APP_NOT_FOUND
block|,
name|LAUNCHING
block|,
name|RUNNING_PARTIAL
block|,
name|RUNNING_ALL
block|,
name|COMPLETE
block|,
name|UNKNOWN
block|}
specifier|public
enum|enum
name|ExitCode
block|{
name|SUCCESS
argument_list|(
literal|0
argument_list|)
block|,
name|INCORRECT_USAGE
argument_list|(
literal|10
argument_list|)
block|,
name|YARN_ERROR
argument_list|(
literal|20
argument_list|)
block|,
name|SLIDER_CLIENT_ERROR_CREATE_FAILED
argument_list|(
literal|30
argument_list|)
block|,
name|SLIDER_CLIENT_ERROR_OTHER
argument_list|(
literal|31
argument_list|)
block|,
name|LLAP_REGISTRY_ERROR
argument_list|(
literal|40
argument_list|)
block|,
name|LLAP_JSON_GENERATION_ERROR
argument_list|(
literal|50
argument_list|)
block|,
comment|// Error in the script itself - likely caused by an incompatible change, or new functionality / states added.
name|INTERNAL_ERROR
argument_list|(
literal|100
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|exitCode
decl_stmt|;
name|ExitCode
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
block|}
specifier|public
name|int
name|getInt
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|logError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"FAILED: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"FAILED: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LLAP status invoked with arguments = {}"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|ExitCode
operator|.
name|SUCCESS
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|LlapStatusServiceDriver
name|statusServiceDriver
init|=
literal|null
decl_stmt|;
name|LlapStatusOptions
name|options
init|=
literal|null
decl_stmt|;
try|try
block|{
name|statusServiceDriver
operator|=
operator|new
name|LlapStatusServiceDriver
argument_list|()
expr_stmt|;
name|options
operator|=
name|statusServiceDriver
operator|.
name|parseOptions
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logError
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|LlapStatusCliException
condition|)
block|{
name|LlapStatusCliException
name|ce
init|=
operator|(
name|LlapStatusCliException
operator|)
name|t
decl_stmt|;
name|ret
operator|=
name|ce
operator|.
name|getExitCode
argument_list|()
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|ExitCode
operator|.
name|INTERNAL_ERROR
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|!=
literal|0
operator|||
name|options
operator|==
literal|null
condition|)
block|{
comment|// Failure / help
name|System
operator|.
name|exit
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ret
operator|=
name|statusServiceDriver
operator|.
name|run
argument_list|(
name|options
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
name|ExitCode
operator|.
name|SUCCESS
operator|.
name|getInt
argument_list|()
condition|)
block|{
try|try
init|(
name|OutputStream
name|os
init|=
name|options
operator|.
name|getOutputFile
argument_list|()
operator|==
literal|null
condition|?
name|System
operator|.
name|out
else|:
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|options
operator|.
name|getOutputFile
argument_list|()
argument_list|)
argument_list|)
init|; PrintWriter pw = new PrintWriter(             os)
block|)
block|{
name|statusServiceDriver
operator|.
name|outputJson
argument_list|(
name|pw
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|logError
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|LlapStatusCliException
condition|)
block|{
name|LlapStatusCliException
name|ce
init|=
operator|(
name|LlapStatusCliException
operator|)
name|t
decl_stmt|;
name|ret
operator|=
name|ce
operator|.
name|getExitCode
argument_list|()
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|ExitCode
operator|.
name|INTERNAL_ERROR
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LLAP status finished"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Completed processing - exiting with "
operator|+
name|ret
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
parameter_list|(
name|ret
parameter_list|)
constructor_decl|;
block|}
end_class

unit|}
end_unit

