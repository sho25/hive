begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
operator|.
name|LlapIoImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|Ref
import|;
end_import

begin_comment
comment|/** Class used to slowly clean up a map of FileCache-s. */
end_comment

begin_class
specifier|abstract
class|class
name|FileCacheCleanupThread
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|long
name|approxCleanupIntervalSec
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|newEvictions
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|FileCache
argument_list|<
name|T
argument_list|>
argument_list|>
name|fileMap
decl_stmt|;
specifier|public
name|FileCacheCleanupThread
parameter_list|(
name|String
name|name
parameter_list|,
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|FileCache
argument_list|<
name|T
argument_list|>
argument_list|>
name|fileMap
parameter_list|,
name|AtomicInteger
name|newEvictions
parameter_list|,
name|long
name|cleanupInterval
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileMap
operator|=
name|fileMap
expr_stmt|;
name|this
operator|.
name|newEvictions
operator|=
name|newEvictions
expr_stmt|;
name|this
operator|.
name|approxCleanupIntervalSec
operator|=
name|cleanupInterval
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setPriority
argument_list|(
name|Thread
operator|.
name|MIN_PRIORITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|doOneCleanupRound
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cleanup thread has been interrupted"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LlapIoImpl
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Cleanup has failed; the thread will now exit"
argument_list|,
name|t
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|doOneCleanupRound
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|evictionsSinceLast
init|=
name|newEvictions
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|evictionsSinceLast
operator|>
literal|0
condition|)
break|break;
comment|// will be notified by SerDeLowLevelCacheImpl or timeout eventually
synchronized|synchronized
init|(
name|newEvictions
init|)
block|{
name|newEvictions
operator|.
name|wait
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Duration is an estimate; if the size of the map changes, it can be very different.
name|long
name|endTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|approxCleanupIntervalSec
operator|*
literal|1000000000L
decl_stmt|;
name|int
name|leftToCheck
init|=
literal|0
decl_stmt|;
comment|// approximate
for|for
control|(
name|FileCache
argument_list|<
name|T
argument_list|>
name|fc
range|:
name|fileMap
operator|.
name|values
argument_list|()
control|)
block|{
name|leftToCheck
operator|+=
name|getCacheSize
argument_list|(
name|fc
argument_list|)
expr_stmt|;
block|}
comment|// Iterate thru all the filecaches. This is best-effort.
comment|// If these super-long-lived iterators affect the map in some bad way,
comment|// we'd need to sleep once per round instead.
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|FileCache
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|>
name|iter
init|=
name|fileMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Ref
argument_list|<
name|Boolean
argument_list|>
name|isPastEndTime
init|=
name|Ref
operator|.
name|from
argument_list|(
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileCache
argument_list|<
name|T
argument_list|>
name|fc
init|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fc
operator|.
name|incRef
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Something other than cleanup is removing elements from map"
argument_list|)
throw|;
block|}
name|leftToCheck
operator|=
name|cleanUpOneFileCache
argument_list|(
name|fc
argument_list|,
name|leftToCheck
argument_list|,
name|endTime
argument_list|,
name|isPastEndTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCacheSize
argument_list|(
name|fc
argument_list|)
operator|>
literal|0
condition|)
block|{
name|fc
operator|.
name|decRef
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// FileCache might be empty; see if we can remove it. "tryWriteLock"
if|if
condition|(
operator|!
name|fc
operator|.
name|startEvicting
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|getCacheSize
argument_list|(
name|fc
argument_list|)
operator|==
literal|0
condition|)
block|{
name|fc
operator|.
name|commitEvicting
argument_list|()
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fc
operator|.
name|abortEvicting
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|int
name|getCacheSize
parameter_list|(
name|FileCache
argument_list|<
name|T
argument_list|>
name|fc
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|int
name|cleanUpOneFileCache
parameter_list|(
name|FileCache
argument_list|<
name|T
argument_list|>
name|fc
parameter_list|,
name|int
name|leftToCheck
parameter_list|,
name|long
name|endTime
parameter_list|,
name|Ref
argument_list|<
name|Boolean
argument_list|>
name|isPastEndTime
parameter_list|)
throws|throws
name|InterruptedException
function_decl|;
block|}
end_class

end_unit

