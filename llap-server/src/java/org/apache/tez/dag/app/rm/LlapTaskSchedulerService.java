begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|AddressTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|LlapDaemonConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TaskAttemptEndReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezUncheckedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_class
specifier|public
class|class
name|LlapTaskSchedulerService
extends|extends
name|TaskSchedulerService
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LlapTaskSchedulerService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|appCallbackExecutor
decl_stmt|;
specifier|private
specifier|final
name|TaskSchedulerAppCallback
name|appClientDelegate
decl_stmt|;
specifier|private
specifier|final
name|AppContext
name|appContext
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|serviceHosts
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|serviceHostSet
decl_stmt|;
specifier|private
specifier|final
name|ContainerFactory
name|containerFactory
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|containerPort
decl_stmt|;
specifier|private
specifier|final
name|String
name|clientHostname
decl_stmt|;
specifier|private
specifier|final
name|int
name|clientPort
decl_stmt|;
specifier|private
specifier|final
name|String
name|trackingUrl
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isStopped
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Object
argument_list|,
name|ContainerId
argument_list|>
name|runningTasks
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
comment|// Per daemon
specifier|private
specifier|final
name|int
name|memoryPerInstance
decl_stmt|;
specifier|private
specifier|final
name|int
name|coresPerInstance
decl_stmt|;
specifier|private
specifier|final
name|int
name|executorsPerInstance
decl_stmt|;
comment|// Per Executor Thread
specifier|private
specifier|final
name|Resource
name|resourcePerExecutor
decl_stmt|;
specifier|private
specifier|final
name|LlapRegistryService
name|registry
init|=
operator|new
name|LlapRegistryService
argument_list|()
decl_stmt|;
specifier|public
name|LlapTaskSchedulerService
parameter_list|(
name|TaskSchedulerAppCallback
name|appClient
parameter_list|,
name|AppContext
name|appContext
parameter_list|,
name|String
name|clientHostname
parameter_list|,
name|int
name|clientPort
parameter_list|,
name|String
name|trackingUrl
parameter_list|,
name|long
name|customAppIdIdentifier
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Accepting configuration here to allow setting up fields as final
name|super
argument_list|(
name|LlapTaskSchedulerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|appCallbackExecutor
operator|=
name|createAppCallbackExecutorService
argument_list|()
expr_stmt|;
name|this
operator|.
name|appClientDelegate
operator|=
name|createAppCallbackDelegate
argument_list|(
name|appClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|appContext
operator|=
name|appContext
expr_stmt|;
name|this
operator|.
name|serviceHosts
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|serviceHostSet
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerFactory
operator|=
operator|new
name|ContainerFactory
argument_list|(
name|appContext
argument_list|,
name|customAppIdIdentifier
argument_list|)
expr_stmt|;
name|this
operator|.
name|memoryPerInstance
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|coresPerInstance
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_VCPUS_PER_INSTANCE
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_VCPUS_PER_INSTANCE_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorsPerInstance
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientHostname
operator|=
name|clientHostname
expr_stmt|;
name|this
operator|.
name|clientPort
operator|=
name|clientPort
expr_stmt|;
name|this
operator|.
name|trackingUrl
operator|=
name|trackingUrl
expr_stmt|;
name|int
name|memoryPerExecutor
init|=
call|(
name|int
call|)
argument_list|(
name|memoryPerInstance
operator|/
operator|(
name|float
operator|)
name|executorsPerInstance
argument_list|)
decl_stmt|;
name|int
name|coresPerExecutor
init|=
call|(
name|int
call|)
argument_list|(
name|coresPerInstance
operator|/
operator|(
name|float
operator|)
name|executorsPerInstance
argument_list|)
decl_stmt|;
name|this
operator|.
name|resourcePerExecutor
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|memoryPerExecutor
argument_list|,
name|coresPerExecutor
argument_list|)
expr_stmt|;
name|String
name|instanceId
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|instanceId
operator|==
literal|null
operator|||
literal|false
operator|==
name|instanceId
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
name|String
index|[]
name|hosts
init|=
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|hosts
operator|==
literal|null
operator|||
name|hosts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|hosts
operator|=
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|}
expr_stmt|;
name|serviceHosts
operator|.
name|add
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|serviceHostSet
operator|.
name|add
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|containerPort
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_RPC_PORT
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_RPC_PORT_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceHosts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running with configuration: "
operator|+
literal|"memoryPerInstance="
operator|+
name|memoryPerInstance
operator|+
literal|", vcoresPerInstance="
operator|+
name|coresPerInstance
operator|+
literal|", executorsPerInstance="
operator|+
name|executorsPerInstance
operator|+
literal|", resourcePerInstanceInferred="
operator|+
name|resourcePerExecutor
operator|+
literal|", hosts="
operator|+
name|serviceHosts
operator|.
name|toString
argument_list|()
operator|+
literal|", rpcPort="
operator|+
name|containerPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running with configuration: "
operator|+
literal|"memoryPerInstance="
operator|+
name|memoryPerInstance
operator|+
literal|", vcoresPerInstance="
operator|+
name|coresPerInstance
operator|+
literal|", executorsPerInstance="
operator|+
name|executorsPerInstance
operator|+
literal|", resourcePerInstanceInferred="
operator|+
name|resourcePerExecutor
operator|+
literal|", hosts=<pending>"
operator|+
literal|", rpcPort=<pending>"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|registry
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStart
parameter_list|()
block|{
name|registry
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|serviceHosts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading YARN registry for service records"
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceRecord
argument_list|>
name|workers
init|=
name|registry
operator|.
name|getWorkers
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceRecord
name|srv
range|:
name|workers
operator|.
name|values
argument_list|()
control|)
block|{
name|Endpoint
name|rpc
init|=
name|srv
operator|.
name|getInternalEndpoint
argument_list|(
literal|"llap"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpc
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Examining endpoint: "
operator|+
name|rpc
argument_list|)
expr_stmt|;
specifier|final
name|String
name|host
init|=
name|RegistryTypeUtils
operator|.
name|getAddressField
argument_list|(
name|rpc
operator|.
name|addresses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|AddressTypes
operator|.
name|ADDRESS_HOSTNAME_FIELD
argument_list|)
decl_stmt|;
name|serviceHosts
operator|.
name|add
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|serviceHostSet
operator|.
name|add
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The SRV record was "
operator|+
name|srv
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-inited with configuration: "
operator|+
literal|"memoryPerInstance="
operator|+
name|memoryPerInstance
operator|+
literal|", vcoresPerInstance="
operator|+
name|coresPerInstance
operator|+
literal|", executorsPerInstance="
operator|+
name|executorsPerInstance
operator|+
literal|", resourcePerInstanceInferred="
operator|+
name|resourcePerExecutor
operator|+
literal|", hosts="
operator|+
name|serviceHosts
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|TezUncheckedException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isStopped
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|appCallbackExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getAvailableResources
parameter_list|()
block|{
comment|// TODO This needs information about all running executors, and the amount of memory etc available across the cluster.
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
name|Ints
operator|.
name|checkedCast
argument_list|(
name|serviceHosts
operator|.
name|size
argument_list|()
operator|*
name|memoryPerInstance
argument_list|)
argument_list|,
name|serviceHosts
operator|.
name|size
argument_list|()
operator|*
name|coresPerInstance
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getClusterNodeCount
parameter_list|()
block|{
return|return
name|serviceHosts
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetMatchLocalityForAllHeldContainers
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|Resource
name|getTotalResources
parameter_list|()
block|{
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
name|Ints
operator|.
name|checkedCast
argument_list|(
name|serviceHosts
operator|.
name|size
argument_list|()
operator|*
name|memoryPerInstance
argument_list|)
argument_list|,
name|serviceHosts
operator|.
name|size
argument_list|()
operator|*
name|coresPerInstance
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|blacklistNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DEBUG: BlacklistNode not supported"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unblacklistNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DEBUG: unBlacklistNode not supported"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|allocateTask
parameter_list|(
name|Object
name|task
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Object
name|containerSignature
parameter_list|,
name|Object
name|clientCookie
parameter_list|)
block|{
name|String
name|host
init|=
name|selectHost
argument_list|(
name|hosts
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|containerFactory
operator|.
name|createContainer
argument_list|(
name|resourcePerExecutor
argument_list|,
name|priority
argument_list|,
name|host
argument_list|,
name|containerPort
argument_list|)
decl_stmt|;
name|runningTasks
operator|.
name|put
argument_list|(
name|task
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|appClientDelegate
operator|.
name|taskAllocated
argument_list|(
name|task
argument_list|,
name|clientCookie
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|allocateTask
parameter_list|(
name|Object
name|task
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Object
name|containerSignature
parameter_list|,
name|Object
name|clientCookie
parameter_list|)
block|{
name|String
name|host
init|=
name|selectHost
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|containerFactory
operator|.
name|createContainer
argument_list|(
name|resourcePerExecutor
argument_list|,
name|priority
argument_list|,
name|host
argument_list|,
name|containerPort
argument_list|)
decl_stmt|;
name|runningTasks
operator|.
name|put
argument_list|(
name|task
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|appClientDelegate
operator|.
name|taskAllocated
argument_list|(
name|task
argument_list|,
name|clientCookie
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deallocateTask
parameter_list|(
name|Object
name|task
parameter_list|,
name|boolean
name|taskSucceeded
parameter_list|,
name|TaskAttemptEndReason
name|endReason
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|runningTasks
operator|.
name|remove
argument_list|(
name|task
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerId
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not determine ContainerId for task: "
operator|+
name|task
operator|+
literal|" . Could have hit a race condition. Ignoring."
operator|+
literal|" The query may hang since this \"unknown\" container is now taking up a slot permanently"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|appClientDelegate
operator|.
name|containerBeingReleased
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deallocateContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DEBUG: Ignoring deallocateContainer for containerId: "
operator|+
name|containerId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setShouldUnregister
parameter_list|()
block|{    }
annotation|@
name|Override
specifier|public
name|boolean
name|hasUnregistered
parameter_list|()
block|{
comment|// Nothing to do. No registration involved.
return|return
literal|true
return|;
block|}
specifier|private
name|ExecutorService
name|createAppCallbackExecutorService
parameter_list|()
block|{
return|return
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"TaskSchedulerAppCaller #%d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|TaskSchedulerAppCallback
name|createAppCallbackDelegate
parameter_list|(
name|TaskSchedulerAppCallback
name|realAppClient
parameter_list|)
block|{
return|return
operator|new
name|TaskSchedulerAppCallbackWrapper
argument_list|(
name|realAppClient
argument_list|,
name|appCallbackExecutor
argument_list|)
return|;
block|}
specifier|private
name|String
name|selectHost
parameter_list|(
name|String
index|[]
name|requestedHosts
parameter_list|)
block|{
name|String
name|host
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requestedHosts
operator|!=
literal|null
operator|&&
name|requestedHosts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|requestedHosts
argument_list|)
expr_stmt|;
name|host
operator|=
name|requestedHosts
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|serviceHostSet
operator|.
name|contains
argument_list|(
name|host
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Selected host: "
operator|+
name|host
operator|+
literal|" from requested hosts: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|requestedHosts
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Preferred host: "
operator|+
name|host
operator|+
literal|" not present. Attempting to select another one"
argument_list|)
expr_stmt|;
name|host
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|String
name|h
range|:
name|requestedHosts
control|)
block|{
if|if
condition|(
name|serviceHostSet
operator|.
name|contains
argument_list|(
name|h
argument_list|)
condition|)
block|{
name|host
operator|=
name|h
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Requested hosts: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|requestedHosts
argument_list|)
operator|+
literal|" not present. Randomizing the host"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
name|serviceHosts
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|serviceHosts
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Selected random host: "
operator|+
name|host
operator|+
literal|" since the request contained no host information"
argument_list|)
expr_stmt|;
block|}
return|return
name|host
return|;
block|}
specifier|static
class|class
name|ContainerFactory
block|{
specifier|final
name|ApplicationAttemptId
name|customAppAttemptId
decl_stmt|;
name|AtomicInteger
name|nextId
decl_stmt|;
specifier|public
name|ContainerFactory
parameter_list|(
name|AppContext
name|appContext
parameter_list|,
name|long
name|appIdLong
parameter_list|)
block|{
name|this
operator|.
name|nextId
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|appIdLong
argument_list|,
name|appContext
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|customAppAttemptId
operator|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|appContext
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Container
name|createContainer
parameter_list|(
name|Resource
name|capability
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|customAppAttemptId
argument_list|,
name|nextId
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|String
name|nodeHttpAddress
init|=
literal|"hostname:0"
decl_stmt|;
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
name|nodeHttpAddress
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|container
return|;
block|}
block|}
block|}
end_class

end_unit

