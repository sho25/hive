begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Ints
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|binding
operator|.
name|RegistryTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|AddressTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|LlapDaemonConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TaskAttemptEndReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_class
specifier|public
class|class
name|LlapTaskSchedulerService
extends|extends
name|TaskSchedulerService
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LlapTaskSchedulerService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|BACKOFF_FACTOR
init|=
literal|1.2f
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|appCallbackExecutor
decl_stmt|;
specifier|private
specifier|final
name|TaskSchedulerAppCallback
name|appClientDelegate
decl_stmt|;
comment|// Set of active hosts
annotation|@
name|VisibleForTesting
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|NodeInfo
argument_list|>
name|activeHosts
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Populated each time activeHosts is modified
annotation|@
name|VisibleForTesting
name|String
index|[]
name|activeHostList
decl_stmt|;
comment|// Set of all hosts in the system.
annotation|@
name|VisibleForTesting
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|NodeInfo
argument_list|>
name|allHosts
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Tracks currently allocated containers.
specifier|private
specifier|final
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|String
argument_list|>
name|containerToHostMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Tracks tasks which could not be allocated immediately.
annotation|@
name|VisibleForTesting
specifier|final
name|TreeMap
argument_list|<
name|Priority
argument_list|,
name|List
argument_list|<
name|TaskInfo
argument_list|>
argument_list|>
name|pendingTasks
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Priority
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Priority
name|o1
parameter_list|,
name|Priority
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getPriority
argument_list|()
operator|-
name|o2
operator|.
name|getPriority
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Tracks running and queued tasks. Cleared after a task completes.
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Object
argument_list|,
name|TaskInfo
argument_list|>
name|knownTasks
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|final
name|DelayQueue
argument_list|<
name|NodeInfo
argument_list|>
name|disabledNodes
init|=
operator|new
name|DelayQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ContainerFactory
name|containerFactory
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|containerPort
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|private
specifier|final
name|ListeningExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
init|=
name|lock
operator|.
name|readLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
init|=
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
comment|// TODO Track resources used by this application on specific hosts, and make scheduling decisions accordingly.
comment|// Ideally implement in a way where updates from ZK, if they do come, can just be plugged in.
comment|// A heap based on available capacity - which is updated each time stats are updated,
comment|// or anytime assignment numbers are changed. Especially for random allocations (no host request).
comment|// For non-random allocations - Walk through all pending tasks to get local assignments, then start assigning them to non local hosts.
comment|// Also setup a max over-subscribe limit as part of this.
specifier|private
specifier|final
name|AtomicBoolean
name|isStopped
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|nodeReEnableTimeout
decl_stmt|;
comment|// Per daemon
specifier|private
specifier|final
name|int
name|memoryPerInstance
decl_stmt|;
specifier|private
specifier|final
name|int
name|coresPerInstance
decl_stmt|;
specifier|private
specifier|final
name|int
name|executorsPerInstance
decl_stmt|;
comment|// Per Executor Thread
specifier|private
specifier|final
name|Resource
name|resourcePerExecutor
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|initFromRegistry
decl_stmt|;
specifier|private
specifier|final
name|LlapRegistryService
name|registry
init|=
operator|new
name|LlapRegistryService
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PendingTaskSchedulerCallable
name|pendingTaskSchedulerCallable
init|=
operator|new
name|PendingTaskSchedulerCallable
argument_list|()
decl_stmt|;
specifier|private
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|pendingTaskSchedulerFuture
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|private
specifier|final
name|AtomicInteger
name|dagCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Statistics to track allocations
comment|// All of stats variables are visible for testing.
annotation|@
name|VisibleForTesting
name|StatsPerDag
name|dagStats
init|=
operator|new
name|StatsPerDag
argument_list|()
decl_stmt|;
specifier|public
name|LlapTaskSchedulerService
parameter_list|(
name|TaskSchedulerAppCallback
name|appClient
parameter_list|,
name|AppContext
name|appContext
parameter_list|,
name|String
name|clientHostname
parameter_list|,
name|int
name|clientPort
parameter_list|,
name|String
name|trackingUrl
parameter_list|,
name|long
name|customAppIdIdentifier
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Accepting configuration here to allow setting up fields as final
name|super
argument_list|(
name|LlapTaskSchedulerService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|appCallbackExecutor
operator|=
name|createAppCallbackExecutorService
argument_list|()
expr_stmt|;
name|this
operator|.
name|appClientDelegate
operator|=
name|createAppCallbackDelegate
argument_list|(
name|appClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|appContext
operator|.
name|getClock
argument_list|()
expr_stmt|;
name|this
operator|.
name|containerFactory
operator|=
operator|new
name|ContainerFactory
argument_list|(
name|appContext
argument_list|,
name|customAppIdIdentifier
argument_list|)
expr_stmt|;
name|this
operator|.
name|memoryPerInstance
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_MEMORY_PER_INSTANCE_MB_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|coresPerInstance
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_VCPUS_PER_INSTANCE
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_VCPUS_PER_INSTANCE_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorsPerInstance
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeReEnableTimeout
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_TASK_SCHEDULER_NODE_REENABLE_TIMEOUT_MILLIS
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_TASK_SCHEDULER_NODE_REENABLE_TIMEOUT_MILLIS_DEFAULT
argument_list|)
expr_stmt|;
name|int
name|memoryPerExecutor
init|=
call|(
name|int
call|)
argument_list|(
name|memoryPerInstance
operator|/
operator|(
name|float
operator|)
name|executorsPerInstance
argument_list|)
decl_stmt|;
name|int
name|coresPerExecutor
init|=
call|(
name|int
call|)
argument_list|(
name|coresPerInstance
operator|/
operator|(
name|float
operator|)
name|executorsPerInstance
argument_list|)
decl_stmt|;
name|this
operator|.
name|resourcePerExecutor
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|memoryPerExecutor
argument_list|,
name|coresPerExecutor
argument_list|)
expr_stmt|;
name|String
name|instanceId
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|instanceId
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
operator|+
literal|" must be defined"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|instanceId
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
comment|// Manual setup. Not via the service registry
name|initFromRegistry
operator|=
literal|false
expr_stmt|;
name|String
index|[]
name|hosts
init|=
name|conf
operator|.
name|getTrimmedStrings
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|hosts
operator|!=
literal|null
operator|&&
name|hosts
operator|.
name|length
operator|!=
literal|0
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
operator|+
literal|"must be defined"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
name|host
argument_list|,
name|BACKOFF_FACTOR
argument_list|,
name|clock
argument_list|)
decl_stmt|;
name|activeHosts
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|nodeInfo
argument_list|)
expr_stmt|;
name|allHosts
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|nodeInfo
argument_list|)
expr_stmt|;
block|}
name|activeHostList
operator|=
name|activeHosts
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|activeHosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initFromRegistry
operator|=
literal|true
expr_stmt|;
block|}
name|this
operator|.
name|containerPort
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_RPC_PORT
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_RPC_PORT_DEFAULT
argument_list|)
expr_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"LlapScheduler"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
if|if
condition|(
name|activeHosts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running with configuration: "
operator|+
literal|"memoryPerInstance="
operator|+
name|memoryPerInstance
operator|+
literal|", vCoresPerInstance="
operator|+
name|coresPerInstance
operator|+
literal|", executorsPerInstance="
operator|+
name|executorsPerInstance
operator|+
literal|", resourcePerInstanceInferred="
operator|+
name|resourcePerExecutor
operator|+
literal|", hosts="
operator|+
name|allHosts
operator|.
name|keySet
argument_list|()
operator|+
literal|", rpcPort="
operator|+
name|containerPort
operator|+
literal|", nodeReEnableTimeout="
operator|+
name|nodeReEnableTimeout
operator|+
literal|", nodeReEnableBackOffFactor="
operator|+
name|BACKOFF_FACTOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running with configuration: "
operator|+
literal|"memoryPerInstance="
operator|+
name|memoryPerInstance
operator|+
literal|", vCoresPerInstance="
operator|+
name|coresPerInstance
operator|+
literal|", executorsPerInstance="
operator|+
name|executorsPerInstance
operator|+
literal|", resourcePerInstanceInferred="
operator|+
name|resourcePerExecutor
operator|+
literal|", hosts=<pending>"
operator|+
literal|", rpcPort=<pending>"
operator|+
literal|", nodeReEnableTimeout="
operator|+
name|nodeReEnableTimeout
operator|+
literal|", nodeReEnableBackOffFactor="
operator|+
name|BACKOFF_FACTOR
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|initFromRegistry
condition|)
block|{
name|registry
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|IOException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pendingTaskSchedulerFuture
operator|=
name|executor
operator|.
name|submit
argument_list|(
name|pendingTaskSchedulerCallable
argument_list|)
expr_stmt|;
if|if
condition|(
name|initFromRegistry
condition|)
block|{
name|registry
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|activeHosts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading YARN registry for service records"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceRecord
argument_list|>
name|workers
init|=
name|registry
operator|.
name|getWorkers
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceRecord
name|srv
range|:
name|workers
operator|.
name|values
argument_list|()
control|)
block|{
name|Endpoint
name|rpc
init|=
name|srv
operator|.
name|getInternalEndpoint
argument_list|(
literal|"llap"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rpc
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Examining endpoint: "
operator|+
name|rpc
argument_list|)
expr_stmt|;
specifier|final
name|String
name|host
init|=
name|RegistryTypeUtils
operator|.
name|getAddressField
argument_list|(
name|rpc
operator|.
name|addresses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|AddressTypes
operator|.
name|ADDRESS_HOSTNAME_FIELD
argument_list|)
decl_stmt|;
name|NodeInfo
name|nodeInfo
init|=
operator|new
name|NodeInfo
argument_list|(
name|host
argument_list|,
name|BACKOFF_FACTOR
argument_list|,
name|clock
argument_list|)
decl_stmt|;
name|activeHosts
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|nodeInfo
argument_list|)
expr_stmt|;
name|allHosts
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|nodeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The SRV record was "
operator|+
name|srv
argument_list|)
expr_stmt|;
block|}
block|}
name|activeHostList
operator|=
name|activeHosts
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|activeHosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-inited with configuration: "
operator|+
literal|"memoryPerInstance="
operator|+
name|memoryPerInstance
operator|+
literal|", vCoresPerInstance="
operator|+
name|coresPerInstance
operator|+
literal|", executorsPerInstance="
operator|+
name|executorsPerInstance
operator|+
literal|", resourcePerInstanceInferred="
operator|+
name|resourcePerExecutor
operator|+
literal|", hosts="
operator|+
name|allHosts
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceStop
parameter_list|()
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isStopped
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|pendingTaskSchedulerCallable
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|pendingTaskSchedulerFuture
operator|!=
literal|null
condition|)
block|{
name|pendingTaskSchedulerFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
if|if
condition|(
name|initFromRegistry
condition|)
block|{
name|registry
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|appCallbackExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getAvailableResources
parameter_list|()
block|{
comment|// TODO This needs information about all running executors, and the amount of memory etc available across the cluster.
comment|// No lock required until this moves to using something other than allHosts
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
name|Ints
operator|.
name|checkedCast
argument_list|(
name|allHosts
operator|.
name|size
argument_list|()
operator|*
name|memoryPerInstance
argument_list|)
argument_list|,
name|allHosts
operator|.
name|size
argument_list|()
operator|*
name|coresPerInstance
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getClusterNodeCount
parameter_list|()
block|{
comment|// No lock required until this moves to using something other than allHosts
return|return
name|allHosts
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetMatchLocalityForAllHeldContainers
parameter_list|()
block|{
comment|// This is effectively DAG completed, and can be used to reset statistics being tracked.
name|LOG
operator|.
name|info
argument_list|(
literal|"DAG: "
operator|+
name|dagCounter
operator|.
name|get
argument_list|()
operator|+
literal|" completed. Scheduling stats: "
operator|+
name|dagStats
argument_list|)
expr_stmt|;
name|dagCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|dagStats
operator|=
operator|new
name|StatsPerDag
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getTotalResources
parameter_list|()
block|{
comment|// No lock required until this moves to using something other than allHosts
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
name|Ints
operator|.
name|checkedCast
argument_list|(
name|allHosts
operator|.
name|size
argument_list|()
operator|*
name|memoryPerInstance
argument_list|)
argument_list|,
name|allHosts
operator|.
name|size
argument_list|()
operator|*
name|coresPerInstance
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|blacklistNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DEBUG: BlacklistNode not supported"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unblacklistNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DEBUG: unBlacklistNode not supported"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|allocateTask
parameter_list|(
name|Object
name|task
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Object
name|containerSignature
parameter_list|,
name|Object
name|clientCookie
parameter_list|)
block|{
name|TaskInfo
name|taskInfo
init|=
operator|new
name|TaskInfo
argument_list|(
name|task
argument_list|,
name|clientCookie
argument_list|,
name|priority
argument_list|,
name|capability
argument_list|,
name|hosts
argument_list|,
name|racks
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|dagStats
operator|.
name|registerTaskRequest
argument_list|(
name|hosts
argument_list|,
name|racks
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|boolean
name|scheduled
init|=
name|scheduleTask
argument_list|(
name|taskInfo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scheduled
condition|)
block|{
name|addPendingTask
argument_list|(
name|taskInfo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|allocateTask
parameter_list|(
name|Object
name|task
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Object
name|containerSignature
parameter_list|,
name|Object
name|clientCookie
parameter_list|)
block|{
comment|// Container affinity can be implemented as Host affinity for LLAP. Not required until
comment|// 1:1 edges are used in Hive.
name|TaskInfo
name|taskInfo
init|=
operator|new
name|TaskInfo
argument_list|(
name|task
argument_list|,
name|clientCookie
argument_list|,
name|priority
argument_list|,
name|capability
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|dagStats
operator|.
name|registerTaskRequest
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|boolean
name|scheduled
init|=
name|scheduleTask
argument_list|(
name|taskInfo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|scheduled
condition|)
block|{
name|addPendingTask
argument_list|(
name|taskInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This may be invoked before a container is ever assigned to a task. allocateTask... app decides
comment|// the task is no longer required, and asks for a de-allocation.
annotation|@
name|Override
specifier|public
name|boolean
name|deallocateTask
parameter_list|(
name|Object
name|task
parameter_list|,
name|boolean
name|taskSucceeded
parameter_list|,
name|TaskAttemptEndReason
name|endReason
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// Updating several local structures
name|TaskInfo
name|taskInfo
decl_stmt|;
try|try
block|{
name|taskInfo
operator|=
name|knownTasks
operator|.
name|remove
argument_list|(
name|task
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskInfo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not determine ContainerId for task: "
operator|+
name|task
operator|+
literal|" . Could have hit a race condition. Ignoring."
operator|+
literal|" The query may hang since this \"unknown\" container is now taking up a slot permanently"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|taskInfo
operator|.
name|containerId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|taskInfo
operator|.
name|assigned
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Task: "
operator|+
name|task
operator|+
literal|" assigned, but could not find the corresponding containerId."
operator|+
literal|" The query may hang since this \"unknown\" container is now taking up a slot permanently"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring deallocate request for task "
operator|+
name|task
operator|+
literal|" which hasn't been assigned to a container"
argument_list|)
expr_stmt|;
name|removePendingTask
argument_list|(
name|taskInfo
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|String
name|hostForContainer
init|=
name|containerToHostMap
operator|.
name|remove
argument_list|(
name|taskInfo
operator|.
name|containerId
argument_list|)
decl_stmt|;
assert|assert
name|hostForContainer
operator|!=
literal|null
assert|;
name|String
name|assignedHost
init|=
name|taskInfo
operator|.
name|assignedHost
decl_stmt|;
assert|assert
name|assignedHost
operator|!=
literal|null
assert|;
if|if
condition|(
name|taskSucceeded
condition|)
block|{
comment|// The node may have been blacklisted at this point - which means it may not be in the activeNodeList.
name|NodeInfo
name|nodeInfo
init|=
name|allHosts
operator|.
name|get
argument_list|(
name|assignedHost
argument_list|)
decl_stmt|;
assert|assert
name|nodeInfo
operator|!=
literal|null
assert|;
name|nodeInfo
operator|.
name|registerTaskSuccess
argument_list|()
expr_stmt|;
comment|// TODO Consider un-blacklisting the node since at least 1 slot should have become available on the node.
block|}
elseif|else
if|if
condition|(
operator|!
name|taskSucceeded
operator|&&
name|endReason
operator|!=
literal|null
operator|&&
name|EnumSet
operator|.
name|of
argument_list|(
name|TaskAttemptEndReason
operator|.
name|SERVICE_BUSY
argument_list|,
name|TaskAttemptEndReason
operator|.
name|COMMUNICATION_ERROR
argument_list|)
operator|.
name|contains
argument_list|(
name|endReason
argument_list|)
condition|)
block|{
if|if
condition|(
name|endReason
operator|==
name|TaskAttemptEndReason
operator|.
name|COMMUNICATION_ERROR
condition|)
block|{
name|dagStats
operator|.
name|registerCommFailure
argument_list|(
name|taskInfo
operator|.
name|assignedHost
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|endReason
operator|==
name|TaskAttemptEndReason
operator|.
name|SERVICE_BUSY
condition|)
block|{
name|dagStats
operator|.
name|registerTaskRejected
argument_list|(
name|taskInfo
operator|.
name|assignedHost
argument_list|)
expr_stmt|;
block|}
name|disableNode
argument_list|(
name|assignedHost
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|appClientDelegate
operator|.
name|containerBeingReleased
argument_list|(
name|taskInfo
operator|.
name|containerId
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deallocateContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DEBUG: Ignoring deallocateContainer for containerId: "
operator|+
name|containerId
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setShouldUnregister
parameter_list|()
block|{    }
annotation|@
name|Override
specifier|public
name|boolean
name|hasUnregistered
parameter_list|()
block|{
comment|// Nothing to do. No registration involved.
return|return
literal|true
return|;
block|}
specifier|private
name|ExecutorService
name|createAppCallbackExecutorService
parameter_list|()
block|{
return|return
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"TaskSchedulerAppCaller #%d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
name|TaskSchedulerAppCallback
name|createAppCallbackDelegate
parameter_list|(
name|TaskSchedulerAppCallback
name|realAppClient
parameter_list|)
block|{
return|return
operator|new
name|TaskSchedulerAppCallbackWrapper
argument_list|(
name|realAppClient
argument_list|,
name|appCallbackExecutor
argument_list|)
return|;
block|}
comment|/**    * @param requestedHosts the list of preferred hosts. null implies any host    * @return    */
specifier|private
name|String
name|selectHost
parameter_list|(
name|String
index|[]
name|requestedHosts
parameter_list|)
block|{
comment|// TODO Change this to work off of what we think is remaining capacity for a host
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// Read-lock. Not updating any stats at the moment.
try|try
block|{
comment|// Check if any hosts are active. If there's any active host, an allocation will happen.
if|if
condition|(
name|activeHosts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|host
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requestedHosts
operator|!=
literal|null
operator|&&
name|requestedHosts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// Pick the first host always. Weak attempt at cache affinity.
name|Arrays
operator|.
name|sort
argument_list|(
name|requestedHosts
argument_list|)
expr_stmt|;
name|host
operator|=
name|requestedHosts
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|activeHosts
operator|.
name|get
argument_list|(
name|host
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Selected host: "
operator|+
name|host
operator|+
literal|" from requested hosts: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|requestedHosts
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Preferred host: "
operator|+
name|host
operator|+
literal|" not present. Attempting to select another one"
argument_list|)
expr_stmt|;
name|host
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|String
name|h
range|:
name|requestedHosts
control|)
block|{
if|if
condition|(
name|activeHosts
operator|.
name|get
argument_list|(
name|h
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|host
operator|=
name|h
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
name|activeHostList
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|activeHostList
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Requested hosts: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|requestedHosts
argument_list|)
operator|+
literal|" not present. Randomizing the host"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|host
operator|=
name|activeHostList
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|activeHostList
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Selected random host: "
operator|+
name|host
operator|+
literal|" since the request contained no host information"
argument_list|)
expr_stmt|;
block|}
return|return
name|host
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reenableDisabledNode
parameter_list|(
name|NodeInfo
name|nodeInfo
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|nodeInfo
operator|.
name|enableNode
argument_list|()
expr_stmt|;
name|activeHosts
operator|.
name|put
argument_list|(
name|nodeInfo
operator|.
name|hostname
argument_list|,
name|nodeInfo
argument_list|)
expr_stmt|;
name|activeHostList
operator|=
name|activeHosts
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|activeHosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|disableNode
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|NodeInfo
name|nodeInfo
init|=
name|activeHosts
operator|.
name|remove
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeInfo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node: "
operator|+
name|hostname
operator|+
literal|" already disabled, or invalid. Not doing anything."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodeInfo
operator|.
name|disableNode
argument_list|(
name|nodeReEnableTimeout
argument_list|)
expr_stmt|;
name|disabledNodes
operator|.
name|add
argument_list|(
name|nodeInfo
argument_list|)
expr_stmt|;
block|}
name|activeHostList
operator|=
name|activeHosts
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|activeHosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addPendingTask
parameter_list|(
name|TaskInfo
name|taskInfo
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|dagStats
operator|.
name|registerDelayedAllocation
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|tasksAtPriority
init|=
name|pendingTasks
operator|.
name|get
argument_list|(
name|taskInfo
operator|.
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|tasksAtPriority
operator|==
literal|null
condition|)
block|{
name|tasksAtPriority
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|pendingTasks
operator|.
name|put
argument_list|(
name|taskInfo
operator|.
name|priority
argument_list|,
name|tasksAtPriority
argument_list|)
expr_stmt|;
block|}
name|tasksAtPriority
operator|.
name|add
argument_list|(
name|taskInfo
argument_list|)
expr_stmt|;
name|knownTasks
operator|.
name|putIfAbsent
argument_list|(
name|taskInfo
operator|.
name|task
argument_list|,
name|taskInfo
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removePendingTask
parameter_list|(
name|TaskInfo
name|taskInfo
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Priority
name|priority
init|=
name|taskInfo
operator|.
name|priority
decl_stmt|;
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|taskInfoList
init|=
name|pendingTasks
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskInfoList
operator|==
literal|null
operator|||
name|taskInfoList
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|taskInfoList
operator|.
name|remove
argument_list|(
name|taskInfo
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find task: "
operator|+
name|taskInfo
operator|.
name|task
operator|+
literal|" in pending list, at priority: "
operator|+
name|priority
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|schedulePendingTasks
parameter_list|()
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Priority
argument_list|,
name|List
argument_list|<
name|TaskInfo
argument_list|>
argument_list|>
argument_list|>
name|pendingIterator
init|=
name|pendingTasks
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|pendingIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|Priority
argument_list|,
name|List
argument_list|<
name|TaskInfo
argument_list|>
argument_list|>
name|entry
init|=
name|pendingIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TaskInfo
argument_list|>
name|taskListAtPriority
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|TaskInfo
argument_list|>
name|taskIter
init|=
name|taskListAtPriority
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|scheduledAllAtPriority
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|taskIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TaskInfo
name|taskInfo
init|=
name|taskIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|scheduled
init|=
name|scheduleTask
argument_list|(
name|taskInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|scheduled
condition|)
block|{
name|taskIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|scheduledAllAtPriority
operator|=
literal|false
expr_stmt|;
comment|// Don't try assigning tasks at the next priority.
break|break;
block|}
block|}
if|if
condition|(
name|taskListAtPriority
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Remove the entry, if there's nothing left at the specific priority level
name|pendingIterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|scheduledAllAtPriority
condition|)
block|{
comment|// Don't attempt scheduling for additional priorities
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|scheduleTask
parameter_list|(
name|TaskInfo
name|taskInfo
parameter_list|)
block|{
name|String
name|host
init|=
name|selectHost
argument_list|(
name|taskInfo
operator|.
name|requestedHosts
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|Container
name|container
init|=
name|containerFactory
operator|.
name|createContainer
argument_list|(
name|resourcePerExecutor
argument_list|,
name|taskInfo
operator|.
name|priority
argument_list|,
name|host
argument_list|,
name|containerPort
argument_list|)
decl_stmt|;
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// While updating local structures
try|try
block|{
name|dagStats
operator|.
name|registerTaskAllocated
argument_list|(
name|taskInfo
operator|.
name|requestedHosts
argument_list|,
name|taskInfo
operator|.
name|requestedRacks
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|taskInfo
operator|.
name|setAssignmentInfo
argument_list|(
name|host
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|knownTasks
operator|.
name|putIfAbsent
argument_list|(
name|taskInfo
operator|.
name|task
argument_list|,
name|taskInfo
argument_list|)
expr_stmt|;
name|containerToHostMap
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|appClientDelegate
operator|.
name|taskAllocated
argument_list|(
name|taskInfo
operator|.
name|task
argument_list|,
name|taskInfo
operator|.
name|clientCookie
argument_list|,
name|container
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|private
class|class
name|PendingTaskSchedulerCallable
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
name|AtomicBoolean
name|isShutdown
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
while|while
condition|(
operator|!
name|isShutdown
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|NodeInfo
name|nodeInfo
init|=
name|disabledNodes
operator|.
name|take
argument_list|()
decl_stmt|;
comment|// A node became available. Enable the node and try scheduling.
name|reenableDisabledNode
argument_list|(
name|nodeInfo
argument_list|)
expr_stmt|;
name|schedulePendingTasks
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|isShutdown
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Disabled node wait interrupted after shutdown. Stopping the disabled node poll"
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting for disabled nodes."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Interrupted while waiting for disabled nodes"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|// Call this first, then send in an interrupt to the thread.
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|isShutdown
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|NodeInfo
implements|implements
name|Delayed
block|{
specifier|private
specifier|final
name|float
name|constBackOffFactor
decl_stmt|;
specifier|final
name|String
name|hostname
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
name|long
name|expireTimeMillis
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|numSuccessfulTasks
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|numSuccessfulTasksAtLastBlacklist
init|=
operator|-
literal|1
decl_stmt|;
name|float
name|cumulativeBackoffFactor
init|=
literal|1.0f
decl_stmt|;
name|NodeInfo
parameter_list|(
name|String
name|hostname
parameter_list|,
name|float
name|backoffFactor
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|constBackOffFactor
operator|=
name|backoffFactor
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
name|void
name|enableNode
parameter_list|()
block|{
name|expireTimeMillis
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|void
name|disableNode
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
name|long
name|currentTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|numSuccessfulTasksAtLastBlacklist
operator|==
name|numSuccessfulTasks
condition|)
block|{
comment|// Blacklisted again, without any progress. Will never kick in for the first run.
name|cumulativeBackoffFactor
operator|=
name|cumulativeBackoffFactor
operator|*
name|constBackOffFactor
expr_stmt|;
block|}
else|else
block|{
comment|// Was able to execute something before the last blacklist. Reset the exponent.
name|cumulativeBackoffFactor
operator|=
literal|1.0f
expr_stmt|;
block|}
name|expireTimeMillis
operator|=
name|currentTime
operator|+
call|(
name|long
call|)
argument_list|(
name|duration
operator|*
name|cumulativeBackoffFactor
argument_list|)
expr_stmt|;
name|numSuccessfulTasksAtLastBlacklist
operator|=
name|numSuccessfulTasks
expr_stmt|;
block|}
name|void
name|registerTaskSuccess
parameter_list|()
block|{
name|numSuccessfulTasks
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|expireTimeMillis
operator|-
name|clock
operator|.
name|getTime
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|o
parameter_list|)
block|{
name|NodeInfo
name|other
init|=
operator|(
name|NodeInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|expireTimeMillis
operator|>
name|this
operator|.
name|expireTimeMillis
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|other
operator|.
name|expireTimeMillis
operator|<
name|this
operator|.
name|expireTimeMillis
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"NodeInfo{"
operator|+
literal|"constBackOffFactor="
operator|+
name|constBackOffFactor
operator|+
literal|", hostname='"
operator|+
name|hostname
operator|+
literal|'\''
operator|+
literal|", expireTimeMillis="
operator|+
name|expireTimeMillis
operator|+
literal|", numSuccessfulTasks="
operator|+
name|numSuccessfulTasks
operator|+
literal|", numSuccessfulTasksAtLastBlacklist="
operator|+
name|numSuccessfulTasksAtLastBlacklist
operator|+
literal|", cumulativeBackoffFactor="
operator|+
name|cumulativeBackoffFactor
operator|+
literal|'}'
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
class|class
name|StatsPerDag
block|{
name|int
name|numRequestedAllocations
init|=
literal|0
decl_stmt|;
name|int
name|numRequestsWithLocation
init|=
literal|0
decl_stmt|;
name|int
name|numRequestsWithoutLocation
init|=
literal|0
decl_stmt|;
name|int
name|numLocalAllocations
init|=
literal|0
decl_stmt|;
name|int
name|numNonLocalAllocations
init|=
literal|0
decl_stmt|;
name|int
name|numAllocationsNoLocalityRequest
init|=
literal|0
decl_stmt|;
name|int
name|numRejectedTasks
init|=
literal|0
decl_stmt|;
name|int
name|numCommFailures
init|=
literal|0
decl_stmt|;
name|int
name|numDelayedAllocations
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|localityBasedNumAllocationsPerHost
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|numAllocationsPerHost
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"NumRequestedAllocations="
argument_list|)
operator|.
name|append
argument_list|(
name|numRequestedAllocations
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"NumRequestsWithlocation="
argument_list|)
operator|.
name|append
argument_list|(
name|numRequestsWithLocation
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"NumLocalAllocations="
argument_list|)
operator|.
name|append
argument_list|(
name|numLocalAllocations
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"NumNonLocalAllocations="
argument_list|)
operator|.
name|append
argument_list|(
name|numNonLocalAllocations
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"NumRequestsWithoutLocation="
argument_list|)
operator|.
name|append
argument_list|(
name|numRequestsWithoutLocation
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"NumRejectedTasks="
argument_list|)
operator|.
name|append
argument_list|(
name|numRejectedTasks
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"NumCommFailures="
argument_list|)
operator|.
name|append
argument_list|(
name|numCommFailures
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"NumDelayedAllocations="
argument_list|)
operator|.
name|append
argument_list|(
name|numDelayedAllocations
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"LocalityBasedAllocationsPerHost="
argument_list|)
operator|.
name|append
argument_list|(
name|localityBasedNumAllocationsPerHost
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"NumAllocationsPerHost="
argument_list|)
operator|.
name|append
argument_list|(
name|numAllocationsPerHost
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|void
name|registerTaskRequest
parameter_list|(
name|String
index|[]
name|requestedHosts
parameter_list|,
name|String
index|[]
name|requestedRacks
parameter_list|)
block|{
name|numRequestedAllocations
operator|++
expr_stmt|;
comment|// TODO Change after HIVE-9987. For now, there's no rack matching.
if|if
condition|(
name|requestedHosts
operator|!=
literal|null
operator|&&
name|requestedHosts
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|numRequestsWithLocation
operator|++
expr_stmt|;
block|}
else|else
block|{
name|numRequestsWithoutLocation
operator|++
expr_stmt|;
block|}
block|}
name|void
name|registerTaskAllocated
parameter_list|(
name|String
index|[]
name|requestedHosts
parameter_list|,
name|String
index|[]
name|requestedRacks
parameter_list|,
name|String
name|allocatedHost
parameter_list|)
block|{
comment|// TODO Change after HIVE-9987. For now, there's no rack matching.
if|if
condition|(
name|requestedHosts
operator|!=
literal|null
operator|&&
name|requestedHosts
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|requestedHostSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|requestedHosts
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestedHostSet
operator|.
name|contains
argument_list|(
name|allocatedHost
argument_list|)
condition|)
block|{
name|numLocalAllocations
operator|++
expr_stmt|;
name|_registerAllocationInHostMap
argument_list|(
name|allocatedHost
argument_list|,
name|localityBasedNumAllocationsPerHost
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// KKK TODO Log all non-local allocations
name|numNonLocalAllocations
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|numAllocationsNoLocalityRequest
operator|++
expr_stmt|;
block|}
name|_registerAllocationInHostMap
argument_list|(
name|allocatedHost
argument_list|,
name|numAllocationsPerHost
argument_list|)
expr_stmt|;
block|}
name|void
name|registerCommFailure
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|numCommFailures
operator|++
expr_stmt|;
block|}
name|void
name|registerTaskRejected
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|numRejectedTasks
operator|++
expr_stmt|;
block|}
name|void
name|registerDelayedAllocation
parameter_list|()
block|{
name|numDelayedAllocations
operator|++
expr_stmt|;
block|}
specifier|private
name|void
name|_registerAllocationInHostMap
parameter_list|(
name|String
name|host
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|hostMap
parameter_list|)
block|{
name|AtomicInteger
name|val
init|=
name|hostMap
operator|.
name|get
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|hostMap
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|val
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TaskInfo
block|{
specifier|final
name|Object
name|task
decl_stmt|;
specifier|final
name|Object
name|clientCookie
decl_stmt|;
specifier|final
name|Priority
name|priority
decl_stmt|;
specifier|final
name|Resource
name|capability
decl_stmt|;
specifier|final
name|String
index|[]
name|requestedHosts
decl_stmt|;
specifier|final
name|String
index|[]
name|requestedRacks
decl_stmt|;
specifier|final
name|long
name|requestTime
decl_stmt|;
name|ContainerId
name|containerId
decl_stmt|;
name|String
name|assignedHost
decl_stmt|;
specifier|private
name|boolean
name|assigned
init|=
literal|false
decl_stmt|;
specifier|public
name|TaskInfo
parameter_list|(
name|Object
name|task
parameter_list|,
name|Object
name|clientCookie
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|long
name|requestTime
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|clientCookie
operator|=
name|clientCookie
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|capability
operator|=
name|capability
expr_stmt|;
name|this
operator|.
name|requestedHosts
operator|=
name|hosts
expr_stmt|;
name|this
operator|.
name|requestedRacks
operator|=
name|racks
expr_stmt|;
name|this
operator|.
name|requestTime
operator|=
name|requestTime
expr_stmt|;
block|}
name|void
name|setAssignmentInfo
parameter_list|(
name|String
name|host
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|assignedHost
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|assigned
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|ContainerFactory
block|{
specifier|final
name|ApplicationAttemptId
name|customAppAttemptId
decl_stmt|;
name|AtomicInteger
name|nextId
decl_stmt|;
specifier|public
name|ContainerFactory
parameter_list|(
name|AppContext
name|appContext
parameter_list|,
name|long
name|appIdLong
parameter_list|)
block|{
name|this
operator|.
name|nextId
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|appIdLong
argument_list|,
name|appContext
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|customAppAttemptId
operator|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|appContext
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Container
name|createContainer
parameter_list|(
name|Resource
name|capability
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|customAppAttemptId
argument_list|,
name|nextId
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|String
name|nodeHttpAddress
init|=
literal|"hostname:0"
decl_stmt|;
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
name|nodeHttpAddress
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|container
return|;
block|}
block|}
block|}
end_class

end_unit

