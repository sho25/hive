begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|LlapDaemonConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|LlapDaemonProtocolBlockingPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|LlapDaemonProtocolClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|RunContainerRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|AppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|TaskAttemptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
operator|.
name|NMCommunicatorEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
operator|.
name|NMCommunicatorLaunchRequestEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
operator|.
name|container
operator|.
name|AMContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
operator|.
name|container
operator|.
name|AMContainerEventLaunchFailed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
operator|.
name|container
operator|.
name|AMContainerEventLaunched
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
operator|.
name|container
operator|.
name|AMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|history
operator|.
name|DAGHistoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|history
operator|.
name|events
operator|.
name|ContainerLaunchedEvent
import|;
end_import

begin_class
specifier|public
class|class
name|DaemonContainerLauncher
extends|extends
name|AbstractService
implements|implements
name|ContainerLauncher
block|{
comment|// TODO Support interruptability of tasks which haven't yet been launched.
comment|// TODO May need multiple connections per target machine, depending upon how synchronization is handled in the RPC layer
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DaemonContainerLauncher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AppContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|ListeningExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|final
name|String
name|tokenIdentifier
decl_stmt|;
specifier|private
specifier|final
name|TaskAttemptListener
name|tal
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LlapDaemonProtocolBlockingPB
argument_list|>
name|proxyMap
decl_stmt|;
specifier|private
specifier|final
name|int
name|servicePort
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
comment|// Configuration passed in here to set up final parameters
specifier|public
name|DaemonContainerLauncher
parameter_list|(
name|AppContext
name|appContext
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|TaskAttemptListener
name|tal
parameter_list|)
block|{
name|super
argument_list|(
name|DaemonContainerLauncher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|appContext
operator|.
name|getClock
argument_list|()
expr_stmt|;
comment|// TODO Scale this based on numDaemons / threads per daemon
name|int
name|numThreads
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_AM_COMMUNICATOR_NUM_THREADS
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_AM_COMMUNICATOR_NUM_THREADS_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|servicePort
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_RPC_PORT
argument_list|,
name|LlapDaemonConfiguration
operator|.
name|LLAP_DAEMON_RPC_PORT_DEFAULT
argument_list|)
expr_stmt|;
name|ExecutorService
name|localExecutor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"DaemonCommunicator #%2d"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|executor
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|localExecutor
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|appContext
expr_stmt|;
name|this
operator|.
name|tokenIdentifier
operator|=
name|context
operator|.
name|getApplicationID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|tal
operator|=
name|tal
expr_stmt|;
name|this
operator|.
name|proxyMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LlapDaemonProtocolBlockingPB
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|serviceStop
parameter_list|()
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|LlapDaemonProtocolBlockingPB
name|getProxy
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|LlapDaemonProtocolBlockingPB
name|proxy
init|=
name|proxyMap
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
name|proxy
operator|=
operator|new
name|LlapDaemonProtocolClientImpl
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|hostname
argument_list|,
name|servicePort
argument_list|)
expr_stmt|;
name|proxyMap
operator|.
name|put
argument_list|(
name|hostname
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
return|return
name|proxy
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|NMCommunicatorEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CONTAINER_LAUNCH_REQUEST
case|:
name|NMCommunicatorLaunchRequestEvent
name|launchEvent
init|=
operator|(
name|NMCommunicatorLaunchRequestEvent
operator|)
name|event
decl_stmt|;
name|InetSocketAddress
name|address
init|=
name|tal
operator|.
name|getTaskCommunicator
argument_list|(
name|launchEvent
operator|.
name|getTaskCommId
argument_list|()
argument_list|)
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|SubmitCallable
argument_list|(
name|getProxy
argument_list|(
name|launchEvent
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|,
name|launchEvent
argument_list|,
name|tokenIdentifier
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Futures
operator|.
name|addCallback
argument_list|(
name|future
argument_list|,
operator|new
name|SubmitCallback
argument_list|(
name|launchEvent
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|launchEvent
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_STOP_REQUEST
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"DEBUG: Ignoring STOP_REQUEST for event: "
operator|+
name|event
argument_list|)
expr_stmt|;
comment|// TODO should this be sending out a Container terminated message ? Noone tells AMContainer
comment|// that the container is actually done (normally received from RM)
comment|// TODO Sending this out for an unlaunched container is invalid
name|context
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AMContainerEvent
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|AMContainerEventType
operator|.
name|C_NM_STOP_SENT
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
specifier|static
class|class
name|SubmitCallable
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|NMCommunicatorLaunchRequestEvent
name|event
decl_stmt|;
specifier|private
specifier|final
name|String
name|tokenIdentifier
decl_stmt|;
specifier|private
specifier|final
name|String
name|amHost
decl_stmt|;
specifier|private
specifier|final
name|int
name|amPort
decl_stmt|;
specifier|private
specifier|final
name|LlapDaemonProtocolBlockingPB
name|daemonProxy
decl_stmt|;
specifier|private
name|SubmitCallable
parameter_list|(
name|LlapDaemonProtocolBlockingPB
name|daemonProxy
parameter_list|,
name|NMCommunicatorLaunchRequestEvent
name|event
parameter_list|,
name|String
name|tokenIdentifier
parameter_list|,
name|String
name|amHost
parameter_list|,
name|int
name|amPort
parameter_list|)
block|{
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
name|this
operator|.
name|daemonProxy
operator|=
name|daemonProxy
expr_stmt|;
name|this
operator|.
name|tokenIdentifier
operator|=
name|tokenIdentifier
expr_stmt|;
name|this
operator|.
name|amHost
operator|=
name|amHost
expr_stmt|;
name|this
operator|.
name|amPort
operator|=
name|amPort
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|RunContainerRequestProto
operator|.
name|Builder
name|requestBuilder
init|=
name|RunContainerRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// Need the taskAttemptListenerAddress
name|requestBuilder
operator|.
name|setAmHost
argument_list|(
name|amHost
argument_list|)
operator|.
name|setAmPort
argument_list|(
name|amPort
argument_list|)
expr_stmt|;
name|requestBuilder
operator|.
name|setAppAttemptNumber
argument_list|(
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|requestBuilder
operator|.
name|setApplicationIdString
argument_list|(
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|requestBuilder
operator|.
name|setTokenIdentifier
argument_list|(
name|tokenIdentifier
argument_list|)
expr_stmt|;
name|requestBuilder
operator|.
name|setContainerIdString
argument_list|(
name|event
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|requestBuilder
operator|.
name|setCredentialsBinary
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|event
operator|.
name|getContainerLaunchContext
argument_list|()
operator|.
name|getTokens
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|requestBuilder
operator|.
name|setUser
argument_list|(
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|USER
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RunContainerRequestProto
name|request
init|=
name|requestBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|daemonProxy
operator|.
name|runContainer
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
class|class
name|SubmitCallback
implements|implements
name|FutureCallback
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|ContainerId
name|containerId
decl_stmt|;
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
specifier|private
name|SubmitCallback
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container: "
operator|+
name|containerId
operator|+
literal|" launch succeeded on host: "
operator|+
name|host
argument_list|)
expr_stmt|;
name|context
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AMContainerEventLaunched
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerLaunchedEvent
name|lEvt
init|=
operator|new
name|ContainerLaunchedEvent
argument_list|(
name|containerId
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
name|context
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getHistoryHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|DAGHistoryEvent
argument_list|(
literal|null
argument_list|,
name|lEvt
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to launch container: "
operator|+
name|containerId
operator|+
literal|" on host: "
operator|+
name|host
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|sendContainerLaunchFailedMsg
argument_list|(
name|containerId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|void
name|sendContainerLaunchFailedMsg
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|context
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|AMContainerEventLaunchFailed
argument_list|(
name|containerId
argument_list|,
name|t
operator|==
literal|null
condition|?
literal|""
else|:
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

