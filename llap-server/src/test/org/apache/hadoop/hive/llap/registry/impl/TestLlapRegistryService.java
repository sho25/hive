begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|MiniLlapCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapZookeeperRegistryImpl
operator|.
name|ConfigChangeLockResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Llap Registry service related tests. Currently only for configuration change.  */
end_comment

begin_class
specifier|public
class|class
name|TestLlapRegistryService
block|{
specifier|private
specifier|static
name|MiniLlapCluster
name|cluster
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|MiniLlapCluster
operator|.
name|create
argument_list|(
literal|"llap01"
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|2L
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|1L
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_XMX_HEADROOM
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockForConfigChange
parameter_list|()
throws|throws
name|IOException
block|{
name|LlapRegistryService
name|client1
init|=
literal|null
decl_stmt|;
name|LlapRegistryService
name|client2
init|=
literal|null
decl_stmt|;
name|ConfigChangeLockResult
name|result
decl_stmt|;
try|try
block|{
name|client1
operator|=
operator|new
name|LlapRegistryService
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|client1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client1
operator|.
name|start
argument_list|()
expr_stmt|;
name|client2
operator|=
operator|new
name|LlapRegistryService
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|client2
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client2
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|client1
operator|.
name|lockForConfigChange
argument_list|(
literal|10000
argument_list|,
literal|20000
argument_list|)
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|client2
operator|.
name|lockForConfigChange
argument_list|(
literal|30000
argument_list|,
literal|40000
argument_list|)
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
comment|// Can not set to before
name|result
operator|=
name|client1
operator|.
name|lockForConfigChange
argument_list|(
literal|20000
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getNextConfigChangeTime
argument_list|()
argument_list|,
literal|40000
argument_list|)
expr_stmt|;
name|result
operator|=
name|client1
operator|.
name|lockForConfigChange
argument_list|(
literal|30000
argument_list|,
literal|40000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getNextConfigChangeTime
argument_list|()
argument_list|,
literal|40000
argument_list|)
expr_stmt|;
name|result
operator|=
name|client1
operator|.
name|lockForConfigChange
argument_list|(
literal|35000
argument_list|,
literal|45000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getNextConfigChangeTime
argument_list|()
argument_list|,
literal|40000
argument_list|)
expr_stmt|;
comment|// Can start from the previous end timestamp
name|result
operator|=
name|client1
operator|.
name|lockForConfigChange
argument_list|(
literal|40000
argument_list|,
literal|50000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|getNextConfigChangeTime
argument_list|()
argument_list|,
literal|50000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|client1
operator|!=
literal|null
condition|)
block|{
name|client1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|client2
operator|!=
literal|null
condition|)
block|{
name|client2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testLockForConfigChangeInvalid
parameter_list|()
throws|throws
name|IOException
block|{
name|LlapRegistryService
name|client
init|=
literal|null
decl_stmt|;
try|try
block|{
name|client
operator|=
operator|new
name|LlapRegistryService
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|client
operator|.
name|lockForConfigChange
argument_list|(
literal|20000
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

