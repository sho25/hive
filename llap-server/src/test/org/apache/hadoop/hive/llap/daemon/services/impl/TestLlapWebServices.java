begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|services
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_class
specifier|public
class|class
name|TestLlapWebServices
block|{
specifier|private
specifier|static
name|LlapWebServices
name|llapWS
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|int
name|llapWSPort
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|llapWSPort
operator|=
name|MetaStoreTestUtils
operator|.
name|findFreePortExcepting
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_WEB_PORT
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|llapWS
operator|=
operator|new
name|LlapWebServices
argument_list|(
name|llapWSPort
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|llapWS
operator|.
name|init
argument_list|(
operator|new
name|HiveConf
argument_list|()
argument_list|)
expr_stmt|;
name|llapWS
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContextRootUrlRewrite
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|contextRootURL
init|=
literal|"http://localhost:"
operator|+
name|llapWSPort
operator|+
literal|"/"
decl_stmt|;
name|String
name|contextRootContent
init|=
name|getURLResponseAsString
argument_list|(
name|contextRootURL
argument_list|)
decl_stmt|;
name|String
name|indexHtmlUrl
init|=
literal|"http://localhost:"
operator|+
name|llapWSPort
operator|+
literal|"/index.html"
decl_stmt|;
name|String
name|indexHtmlContent
init|=
name|getURLResponseAsString
argument_list|(
name|indexHtmlUrl
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|contextRootContent
argument_list|,
name|indexHtmlContent
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getURLResponseAsString
parameter_list|(
name|String
name|baseURL
parameter_list|)
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|baseURL
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|conn
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|writer
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTests
parameter_list|()
throws|throws
name|Exception
block|{
name|llapWS
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

