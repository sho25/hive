begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|configuration
operator|.
name|LlapDaemonConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|ContainerRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|impl
operator|.
name|LlapManagementProtocolClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapManagementProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapProtocolBlockingPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmissionStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|GetDaemonMetricsRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|GetDaemonMetricsResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|impl
operator|.
name|LlapProtocolClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestLlapDaemonProtocolServerImpl
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testSimpleCall
parameter_list|()
throws|throws
name|ServiceException
throws|,
name|IOException
block|{
name|LlapDaemonConfiguration
name|daemonConf
init|=
operator|new
name|LlapDaemonConfiguration
argument_list|()
decl_stmt|;
name|int
name|numHandlers
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|daemonConf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_RPC_NUM_HANDLERS
argument_list|)
decl_stmt|;
name|ContainerRunner
name|containerRunnerMock
init|=
name|mock
argument_list|(
name|ContainerRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|LlapProtocolServerImpl
name|server
init|=
operator|new
name|LlapProtocolServerImpl
argument_list|(
literal|null
argument_list|,
name|numHandlers
argument_list|,
name|containerRunnerMock
argument_list|,
operator|new
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
argument_list|()
argument_list|,
operator|new
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerRunnerMock
operator|.
name|submitWork
argument_list|(
name|any
argument_list|(
name|SubmitWorkRequestProto
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SubmitWorkResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSubmissionState
argument_list|(
name|SubmissionStateProto
operator|.
name|ACCEPTED
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|serverAddr
init|=
name|server
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|LlapProtocolBlockingPB
name|client
init|=
operator|new
name|LlapProtocolClientImpl
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|serverAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|serverAddr
operator|.
name|getPort
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SubmitWorkResponseProto
name|responseProto
init|=
name|client
operator|.
name|submitWork
argument_list|(
literal|null
argument_list|,
name|SubmitWorkRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAmHost
argument_list|(
literal|"amhost"
argument_list|)
operator|.
name|setAmPort
argument_list|(
literal|2000
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|responseProto
operator|.
name|getSubmissionState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|SubmissionStateProto
operator|.
name|ACCEPTED
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testGetDaemonMetrics
parameter_list|()
throws|throws
name|ServiceException
throws|,
name|IOException
block|{
name|LlapDaemonConfiguration
name|daemonConf
init|=
operator|new
name|LlapDaemonConfiguration
argument_list|()
decl_stmt|;
name|int
name|numHandlers
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|daemonConf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_RPC_NUM_HANDLERS
argument_list|)
decl_stmt|;
name|LlapDaemonExecutorMetrics
name|executorMetrics
init|=
name|LlapDaemonExecutorMetrics
operator|.
name|create
argument_list|(
literal|"LLAP"
argument_list|,
literal|"SessionId"
argument_list|,
name|numHandlers
argument_list|,
operator|new
name|int
index|[]
block|{
literal|30
block|,
literal|60
block|,
literal|300
block|}
argument_list|)
decl_stmt|;
name|LlapProtocolServerImpl
name|server
init|=
operator|new
name|LlapProtocolServerImpl
argument_list|(
literal|null
argument_list|,
name|numHandlers
argument_list|,
literal|null
argument_list|,
operator|new
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
argument_list|()
argument_list|,
operator|new
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|executorMetrics
argument_list|)
decl_stmt|;
name|executorMetrics
operator|.
name|addMetricsFallOffFailedTimeLost
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|executorMetrics
operator|.
name|addMetricsFallOffKilledTimeLost
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|executorMetrics
operator|.
name|addMetricsFallOffSuccessTimeLost
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|executorMetrics
operator|.
name|addMetricsPreemptionTimeLost
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|executorMetrics
operator|.
name|addMetricsPreemptionTimeToKill
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|executorMetrics
operator|.
name|incrExecutorTotalExecutionFailed
argument_list|()
expr_stmt|;
name|executorMetrics
operator|.
name|incrExecutorTotalKilled
argument_list|()
expr_stmt|;
name|executorMetrics
operator|.
name|incrExecutorTotalRequestsHandled
argument_list|()
expr_stmt|;
name|executorMetrics
operator|.
name|incrExecutorTotalSuccess
argument_list|()
expr_stmt|;
name|executorMetrics
operator|.
name|incrTotalEvictedFromWaitQueue
argument_list|()
expr_stmt|;
name|executorMetrics
operator|.
name|incrTotalRejectedRequests
argument_list|()
expr_stmt|;
name|executorMetrics
operator|.
name|setCacheMemoryPerInstance
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|executorMetrics
operator|.
name|setExecutorNumPreemptableRequests
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|executorMetrics
operator|.
name|setExecutorNumQueuedRequests
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|executorMetrics
operator|.
name|setJvmMaxMemory
argument_list|(
literal|18
argument_list|)
expr_stmt|;
name|executorMetrics
operator|.
name|setMemoryPerInstance
argument_list|(
literal|19
argument_list|)
expr_stmt|;
name|executorMetrics
operator|.
name|setNumExecutorsAvailable
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|executorMetrics
operator|.
name|setWaitQueueSize
argument_list|(
literal|21
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|InetSocketAddress
name|serverAddr
init|=
name|server
operator|.
name|getManagementBindAddress
argument_list|()
decl_stmt|;
name|LlapManagementProtocolPB
name|client
init|=
operator|new
name|LlapManagementProtocolClientImpl
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|serverAddr
operator|.
name|getHostName
argument_list|()
argument_list|,
name|serverAddr
operator|.
name|getPort
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GetDaemonMetricsResponseProto
name|responseProto
init|=
name|client
operator|.
name|getDaemonMetrics
argument_list|(
literal|null
argument_list|,
name|GetDaemonMetricsRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|responseProto
operator|.
name|getMetricsCount
argument_list|()
argument_list|)
decl_stmt|;
name|responseProto
operator|.
name|getMetricsList
argument_list|()
operator|.
name|forEach
argument_list|(
name|me
lambda|->
name|result
operator|.
name|put
argument_list|(
name|me
operator|.
name|getKey
argument_list|()
argument_list|,
name|me
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorFallOffFailedTimeLost"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorFallOffFailedTimeLost"
argument_list|)
operator|==
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorFallOffKilledTimeLost"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorFallOffKilledTimeLost"
argument_list|)
operator|==
literal|11
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorFallOffSuccessTimeLost"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorFallOffSuccessTimeLost"
argument_list|)
operator|==
literal|12
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorTotalPreemptionTimeLost"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorTotalPreemptionTimeLost"
argument_list|)
operator|==
literal|13
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorTotalPreemptionTimeToKill"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorTotalPreemptionTimeToKill"
argument_list|)
operator|==
literal|14
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorTotalFailed"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorTotalFailed"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorTotalKilled"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorTotalKilled"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorTotalRequestsHandled"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorTotalRequestsHandled"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorTotalSuccess"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorTotalSuccess"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorTotalEvictedFromWaitQueue"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorTotalEvictedFromWaitQueue"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorTotalRejectedRequests"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorTotalRejectedRequests"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorCacheMemoryPerInstance"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorCacheMemoryPerInstance"
argument_list|)
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorNumPreemptableRequests"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorNumPreemptableRequests"
argument_list|)
operator|==
literal|16
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorNumQueuedRequests"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorNumQueuedRequests"
argument_list|)
operator|==
literal|17
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorJvmMaxMemory"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorJvmMaxMemory"
argument_list|)
operator|==
literal|18
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorMemoryPerInstance"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorMemoryPerInstance"
argument_list|)
operator|==
literal|19
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorNumExecutorsAvailable"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorNumExecutorsAvailable"
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking ExecutorWaitQueueSize"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|"ExecutorWaitQueueSize"
argument_list|)
operator|==
literal|21
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

