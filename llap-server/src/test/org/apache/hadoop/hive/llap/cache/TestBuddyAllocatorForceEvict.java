begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|Allocator
operator|.
name|AllocatorOutOfMemoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|TestBuddyAllocator
operator|.
name|DummyMemoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonCacheMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This relies on allocations basically being sequential, no internal reordering. Rather,  * the specific paths it takes do; all the scenarios should work regardless of allocation.  */
end_comment

begin_class
specifier|public
class|class
name|TestBuddyAllocatorForceEvict
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBuddyAllocatorForceEvict
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DummyMemoryManager
name|MM
init|=
operator|new
name|TestBuddyAllocator
operator|.
name|DummyMemoryManager
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LlapDaemonCacheMetrics
name|METRICS
init|=
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|6000
argument_list|)
specifier|public
name|void
name|testSimple
parameter_list|()
block|{
name|runSimpleTests
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|runSimpleTests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runSimpleTests
parameter_list|(
name|boolean
name|isBruteOnly
parameter_list|)
block|{
name|runSimple1to2Discard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|true
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|runSimple1to2Discard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|runSimple1to2Discard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|256
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|6000
argument_list|)
specifier|public
name|void
name|testSmallBlocks
parameter_list|()
block|{
name|runSmallBlockersTests
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|runSmallBlockersTests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runSmallBlockersTests
parameter_list|(
name|boolean
name|isBruteOnly
parameter_list|)
block|{
name|runSmallBlockersDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|128
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runSmallBlockersDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|128
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runSmallBlockersDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|128
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runSmallBlockersDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|128
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runSmallBlockersDiscard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|128
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runSmallBlockersDiscard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|128
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runSmallBlockersDiscard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|128
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|runSmallBlockersDiscard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|128
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|6000
argument_list|)
specifier|public
name|void
name|testZebra
parameter_list|()
block|{
name|runZebraTests
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|runZebraTests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runZebraTests
parameter_list|(
name|boolean
name|isBruteOnly
parameter_list|)
block|{
name|runZebraDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|runZebraDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|64
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|runZebraDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|16
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|runZebraDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|16
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|runZebraDiscard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|runZebraDiscard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|64
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|runZebraDiscard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|16
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|runZebraDiscard
argument_list|(
name|create
argument_list|(
literal|256
argument_list|,
literal|4
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|16
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|runZebraDiscard
argument_list|(
name|create
argument_list|(
literal|256
argument_list|,
literal|4
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
literal|32
argument_list|,
literal|16
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|6000
argument_list|)
specifier|public
name|void
name|testUnevenZebra
parameter_list|()
block|{
name|runUnevenZebraTests
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|runUnevenZebraTests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runUnevenZebraTests
parameter_list|(
name|boolean
name|isBruteOnly
parameter_list|)
block|{
name|runCustomDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|256
block|,
literal|256
block|,
literal|128
block|,
literal|128
block|,
literal|128
block|,
literal|128
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|4
block|}
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|runCustomDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|256
block|,
literal|256
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|4
block|,
literal|6
block|,
literal|8
block|}
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|runCustomDiscard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|256
block|,
literal|256
block|,
literal|128
block|,
literal|128
block|,
literal|128
block|,
literal|128
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|4
block|}
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|runCustomDiscard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|256
block|,
literal|256
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|4
block|,
literal|6
block|,
literal|8
block|}
argument_list|,
literal|512
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|6000
argument_list|)
specifier|public
name|void
name|testComplex1
parameter_list|()
block|{
name|runComplexTests
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|runComplexTests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runComplexTests
parameter_list|(
name|boolean
name|isBruteOnly
parameter_list|)
block|{
name|runCustomDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|256
block|,
literal|128
block|,
literal|64
block|,
literal|64
block|,
literal|256
block|,
literal|64
block|,
literal|64
block|,
literal|128
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|,
literal|6
block|,
literal|7
block|}
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|runCustomDiscard
argument_list|(
name|create
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|256
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|256
block|,
literal|64
block|,
literal|64
block|,
literal|128
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|7
block|,
literal|8
block|}
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|runCustomDiscard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|256
block|,
literal|128
block|,
literal|64
block|,
literal|64
block|,
literal|256
block|,
literal|64
block|,
literal|64
block|,
literal|128
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|,
literal|6
block|,
literal|7
block|}
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|runCustomDiscard
argument_list|(
name|create
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|,
literal|false
argument_list|,
name|isBruteOnly
argument_list|)
argument_list|,
operator|new
name|int
index|[]
block|{
literal|256
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|64
block|,
literal|256
block|,
literal|64
block|,
literal|64
block|,
literal|128
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|7
block|,
literal|8
block|}
argument_list|,
literal|512
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|MttTestCallableResult
block|{
specifier|public
name|int
name|successes
decl_stmt|,
name|ooms
decl_stmt|,
name|allocSize
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"allocation size "
operator|+
name|allocSize
operator|+
literal|": "
operator|+
name|successes
operator|+
literal|" allocations, "
operator|+
name|ooms
operator|+
literal|" OOMs"
return|;
block|}
block|}
specifier|static
class|class
name|MttTestCallable
implements|implements
name|Callable
argument_list|<
name|MttTestCallableResult
argument_list|>
block|{
specifier|private
specifier|final
name|CountDownLatch
name|cdlIn
decl_stmt|,
name|cdlOut
decl_stmt|;
specifier|private
specifier|final
name|int
name|allocSize
decl_stmt|,
name|allocCount
decl_stmt|,
name|iterCount
decl_stmt|;
specifier|private
specifier|final
name|BuddyAllocator
name|a
decl_stmt|;
specifier|public
name|MttTestCallable
parameter_list|(
name|CountDownLatch
name|cdlIn
parameter_list|,
name|CountDownLatch
name|cdlOut
parameter_list|,
name|BuddyAllocator
name|a
parameter_list|,
name|int
name|allocSize
parameter_list|,
name|int
name|allocCount
parameter_list|,
name|int
name|iterCount
parameter_list|)
block|{
name|this
operator|.
name|cdlIn
operator|=
name|cdlIn
expr_stmt|;
name|this
operator|.
name|cdlOut
operator|=
name|cdlOut
expr_stmt|;
name|this
operator|.
name|a
operator|=
name|a
expr_stmt|;
name|this
operator|.
name|allocSize
operator|=
name|allocSize
expr_stmt|;
name|this
operator|.
name|allocCount
operator|=
name|allocCount
expr_stmt|;
name|this
operator|.
name|iterCount
operator|=
name|iterCount
expr_stmt|;
block|}
specifier|public
name|MttTestCallableResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|" thread starts"
argument_list|)
expr_stmt|;
name|TestBuddyAllocator
operator|.
name|syncThreadStart
argument_list|(
name|cdlIn
argument_list|,
name|cdlOut
argument_list|)
expr_stmt|;
name|MttTestCallableResult
name|result
init|=
operator|new
name|MttTestCallableResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|allocSize
operator|=
name|allocSize
expr_stmt|;
name|List
argument_list|<
name|MemoryBuffer
argument_list|>
name|allocs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|allocCount
argument_list|)
decl_stmt|;
name|LlapAllocatorBuffer
index|[]
name|dest
init|=
operator|new
name|LlapAllocatorBuffer
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterCount
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|allocCount
condition|;
operator|++
name|j
control|)
block|{
try|try
block|{
name|dest
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
name|a
operator|.
name|allocateMultiple
argument_list|(
name|dest
argument_list|,
name|allocSize
argument_list|)
expr_stmt|;
name|LlapAllocatorBuffer
name|buf
init|=
name|dest
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|.
name|incRef
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|allocs
operator|.
name|add
argument_list|(
name|buf
argument_list|)
expr_stmt|;
operator|++
name|result
operator|.
name|successes
expr_stmt|;
name|buf
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AllocatorOutOfMemoryException
name|ex
parameter_list|)
block|{
operator|++
name|result
operator|.
name|ooms
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|MemoryBuffer
name|buf
range|:
name|allocs
control|)
block|{
try|try
block|{
name|a
operator|.
name|deallocate
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
name|allocs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|200000
argument_list|)
specifier|public
name|void
name|testMtt
parameter_list|()
block|{
specifier|final
name|int
name|baseAllocSizeLog2
init|=
literal|3
decl_stmt|,
name|maxAllocSizeLog2
init|=
literal|10
decl_stmt|,
name|totalSize
init|=
literal|8192
decl_stmt|,
name|baseAllocSize
init|=
literal|1
operator|<<
name|baseAllocSizeLog2
decl_stmt|,
name|maxAllocSize
init|=
literal|1
operator|<<
name|maxAllocSizeLog2
decl_stmt|;
specifier|final
name|int
name|threadCount
init|=
name|maxAllocSizeLog2
operator|-
name|baseAllocSizeLog2
operator|+
literal|1
decl_stmt|;
specifier|final
name|int
name|iterCount
init|=
literal|500
decl_stmt|;
specifier|final
name|BuddyAllocator
name|a
init|=
name|create
argument_list|(
name|maxAllocSize
argument_list|,
literal|4
argument_list|,
name|totalSize
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadCount
operator|+
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|cdlIn
init|=
operator|new
name|CountDownLatch
argument_list|(
name|threadCount
argument_list|)
decl_stmt|,
name|cdlOut
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|FutureTask
argument_list|<
name|MttTestCallableResult
argument_list|>
index|[]
name|allocTasks
init|=
operator|new
name|FutureTask
index|[
name|threadCount
index|]
decl_stmt|;
name|FutureTask
argument_list|<
name|Void
argument_list|>
name|dumpTask
init|=
name|createAllocatorDumpTask
argument_list|(
name|a
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|allocSize
init|=
name|baseAllocSize
init|,
name|i
init|=
literal|0
init|;
name|allocSize
operator|<=
name|maxAllocSize
condition|;
name|allocSize
operator|<<=
literal|1
operator|,
operator|++
name|i
control|)
block|{
name|allocTasks
index|[
name|i
index|]
operator|=
operator|new
name|FutureTask
argument_list|<>
argument_list|(
operator|new
name|MttTestCallable
argument_list|(
name|cdlIn
argument_list|,
name|cdlOut
argument_list|,
name|a
argument_list|,
name|allocSize
argument_list|,
name|totalSize
operator|/
name|allocSize
argument_list|,
name|iterCount
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|allocTasks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|execute
argument_list|(
name|dumpTask
argument_list|)
expr_stmt|;
name|runMttTest
argument_list|(
name|a
argument_list|,
name|allocTasks
argument_list|,
name|cdlIn
argument_list|,
name|cdlOut
argument_list|,
name|dumpTask
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|totalSize
argument_list|,
name|maxAllocSize
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|runMttTest
parameter_list|(
name|BuddyAllocator
name|a
parameter_list|,
name|FutureTask
argument_list|<
name|?
argument_list|>
index|[]
name|allocTasks
parameter_list|,
name|CountDownLatch
name|cdlIn
parameter_list|,
name|CountDownLatch
name|cdlOut
parameter_list|,
name|FutureTask
argument_list|<
name|Void
argument_list|>
name|dumpTask
parameter_list|,
name|FutureTask
argument_list|<
name|Void
argument_list|>
name|defragTask
parameter_list|,
name|AtomicBoolean
name|defragStopped
parameter_list|,
name|int
name|totalSize
parameter_list|,
name|int
name|maxAllocSize
parameter_list|)
block|{
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cdlIn
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait for all threads to be ready.
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|cdlOut
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// Release them at the same time.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allocTasks
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|Object
name|result
init|=
name|allocTasks
index|[
name|i
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|tt
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Test callable failed"
argument_list|,
name|tt
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|a
operator|.
name|dumpTestLog
argument_list|()
expr_stmt|;
name|t
operator|=
name|tt
expr_stmt|;
block|}
block|}
block|}
name|dumpTask
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|defragTask
operator|!=
literal|null
condition|)
block|{
name|defragStopped
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|defragTask
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|tt
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Defragmentation thread failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|a
operator|.
name|dumpTestLog
argument_list|()
expr_stmt|;
name|t
operator|=
name|tt
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"One of the errors"
argument_list|,
name|t
argument_list|)
throw|;
block|}
comment|// All the tasks should have deallocated their stuff. Make sure we can allocate everything.
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocator state after all the tasks: "
operator|+
name|a
operator|.
name|testDump
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|allocate
argument_list|(
name|a
argument_list|,
name|totalSize
operator|/
name|maxAllocSize
argument_list|,
name|maxAllocSize
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|tt
parameter_list|)
block|{
name|a
operator|.
name|dumpTestLog
argument_list|()
expr_stmt|;
throw|throw
name|tt
throw|;
block|}
block|}
specifier|public
specifier|static
name|FutureTask
argument_list|<
name|Void
argument_list|>
name|createAllocatorDumpTask
parameter_list|(
specifier|final
name|BuddyAllocator
name|a
parameter_list|)
block|{
return|return
operator|new
name|FutureTask
argument_list|<
name|Void
argument_list|>
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|logs
init|=
literal|40000
decl_stmt|;
comment|// Prevent excessive logging in case of deadlocks or slowness.
while|while
condition|(
operator|(
operator|--
name|logs
operator|)
operator|>=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocator state (MTT): "
operator|+
name|a
operator|.
name|testDump
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|runCustomDiscard
parameter_list|(
name|BuddyAllocator
name|a
parameter_list|,
name|int
index|[]
name|sizes
parameter_list|,
name|int
index|[]
name|dealloc
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|LlapAllocatorBuffer
index|[]
name|initial
init|=
name|prepareCustomFragmentedAllocator
argument_list|(
name|a
argument_list|,
name|sizes
argument_list|,
name|dealloc
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LlapAllocatorBuffer
name|after
init|=
name|allocate
argument_list|(
name|a
argument_list|,
literal|1
argument_list|,
name|size
argument_list|,
name|initial
operator|.
name|length
operator|+
literal|1
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After: "
operator|+
name|a
operator|.
name|testDump
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initial
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|initial
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue;
name|checkTestValue
argument_list|(
name|initial
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|a
operator|.
name|deallocate
argument_list|(
name|initial
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|checkTestValue
argument_list|(
name|after
argument_list|,
name|initial
operator|.
name|length
operator|+
literal|1
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|a
operator|.
name|deallocate
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|runZebraDiscard
parameter_list|(
name|BuddyAllocator
name|a
parameter_list|,
name|int
name|baseSize
parameter_list|,
name|int
name|pairCount
parameter_list|,
name|int
name|allocs
parameter_list|)
block|{
name|LlapAllocatorBuffer
index|[]
name|initial
init|=
name|prepareZebraFragmentedAllocator
argument_list|(
name|a
argument_list|,
name|baseSize
argument_list|,
name|pairCount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|allocFraction
init|=
name|allocs
operator|*
literal|2
decl_stmt|;
name|int
name|bigAllocSize
init|=
name|pairCount
operator|*
literal|2
operator|*
name|baseSize
operator|/
name|allocFraction
decl_stmt|;
name|LlapAllocatorBuffer
index|[]
name|after
init|=
name|allocate
argument_list|(
name|a
argument_list|,
name|allocs
argument_list|,
name|bigAllocSize
argument_list|,
literal|1
operator|+
name|initial
operator|.
name|length
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After: "
operator|+
name|a
operator|.
name|testDump
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pairCount
condition|;
operator|++
name|i
control|)
block|{
name|int
name|ix
init|=
operator|(
name|i
operator|<<
literal|1
operator|)
operator|+
literal|1
decl_stmt|;
name|checkTestValue
argument_list|(
name|initial
index|[
name|ix
index|]
argument_list|,
name|ix
operator|+
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|checkTestValue
argument_list|(
name|after
index|[
literal|0
index|]
argument_list|,
literal|1
operator|+
name|initial
operator|.
name|length
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|LlapAllocatorBuffer
index|[]
name|prepareZebraFragmentedAllocator
parameter_list|(
name|BuddyAllocator
name|a
parameter_list|,
name|int
name|baseSize
parameter_list|,
name|int
name|pairCount
parameter_list|,
name|boolean
name|doIncRef
parameter_list|)
block|{
comment|// Allocate 1-1-... xN; free every other one, allocate N/2 (or N/4).
name|LlapAllocatorBuffer
index|[]
name|initial
init|=
name|allocate
argument_list|(
name|a
argument_list|,
name|pairCount
operator|*
literal|2
argument_list|,
name|baseSize
argument_list|,
literal|1
argument_list|,
name|doIncRef
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pairCount
condition|;
operator|++
name|i
control|)
block|{
name|a
operator|.
name|deallocate
argument_list|(
name|initial
index|[
name|i
operator|<<
literal|1
index|]
argument_list|)
expr_stmt|;
name|initial
index|[
name|i
operator|<<
literal|1
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Before: "
operator|+
name|a
operator|.
name|testDump
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setOomLoggingForTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|initial
return|;
block|}
specifier|private
name|void
name|runSimple1to2Discard
parameter_list|(
name|BuddyAllocator
name|a
parameter_list|,
name|int
name|baseSize
parameter_list|)
block|{
comment|// Allocate 1-1-1-1; free 0&2; allocate 2
name|LlapAllocatorBuffer
index|[]
name|initial
init|=
name|prepareSimpleFragmentedAllocator
argument_list|(
name|a
argument_list|,
name|baseSize
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LlapAllocatorBuffer
index|[]
name|after
init|=
name|allocate
argument_list|(
name|a
argument_list|,
literal|1
argument_list|,
name|baseSize
operator|*
literal|2
argument_list|,
literal|1
operator|+
name|initial
operator|.
name|length
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After: "
operator|+
name|a
operator|.
name|testDump
argument_list|()
argument_list|)
expr_stmt|;
name|checkInitialValues
argument_list|(
name|initial
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkTestValue
argument_list|(
name|after
index|[
literal|0
index|]
argument_list|,
literal|1
operator|+
name|initial
operator|.
name|length
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|a
operator|.
name|deallocate
argument_list|(
name|initial
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|deallocate
argument_list|(
name|initial
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|deallocate
argument_list|(
name|after
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|LlapAllocatorBuffer
index|[]
name|prepareSimpleFragmentedAllocator
parameter_list|(
name|BuddyAllocator
name|a
parameter_list|,
name|int
name|baseSize
parameter_list|,
name|boolean
name|doIncRef
parameter_list|)
block|{
name|LlapAllocatorBuffer
index|[]
name|initial
init|=
name|allocate
argument_list|(
name|a
argument_list|,
literal|4
argument_list|,
name|baseSize
argument_list|,
literal|1
argument_list|,
name|doIncRef
argument_list|)
decl_stmt|;
name|checkInitialValues
argument_list|(
name|initial
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|a
operator|.
name|deallocate
argument_list|(
name|initial
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|deallocate
argument_list|(
name|initial
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Before: "
operator|+
name|a
operator|.
name|testDump
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setOomLoggingForTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|initial
return|;
block|}
specifier|private
name|void
name|runSmallBlockersDiscard
parameter_list|(
name|BuddyAllocator
name|a
parameter_list|,
name|int
name|baseSize
parameter_list|,
name|boolean
name|deallocOneFirst
parameter_list|,
name|boolean
name|deallocOneSecond
parameter_list|)
block|{
name|LlapAllocatorBuffer
index|[]
name|initial
init|=
name|prepareAllocatorWithSmallFragments
argument_list|(
name|a
argument_list|,
name|baseSize
argument_list|,
name|deallocOneFirst
argument_list|,
name|deallocOneSecond
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|bigAllocSize
init|=
name|baseSize
operator|*
literal|4
decl_stmt|;
name|LlapAllocatorBuffer
index|[]
name|after
init|=
name|allocate
argument_list|(
name|a
argument_list|,
literal|1
argument_list|,
name|bigAllocSize
argument_list|,
literal|1
operator|+
name|initial
operator|.
name|length
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After: "
operator|+
name|a
operator|.
name|testDump
argument_list|()
argument_list|)
expr_stmt|;
name|checkInitialValues
argument_list|(
name|initial
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkTestValue
argument_list|(
name|after
index|[
literal|0
index|]
argument_list|,
literal|1
operator|+
name|initial
operator|.
name|length
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|LlapAllocatorBuffer
index|[]
name|prepareAllocatorWithSmallFragments
parameter_list|(
name|BuddyAllocator
name|a
parameter_list|,
name|int
name|baseSize
parameter_list|,
name|boolean
name|deallocOneFirst
parameter_list|,
name|boolean
name|deallocOneSecond
parameter_list|,
name|boolean
name|doIncRef
parameter_list|)
block|{
comment|// Allocate 2-1-1-2-1-1; free 0,3 and optionally 1 or 5; allocate 4
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|LlapAllocatorBuffer
index|[]
name|initial
init|=
operator|new
name|LlapAllocatorBuffer
index|[
literal|6
index|]
decl_stmt|;
name|initial
index|[
name|offset
operator|++
index|]
operator|=
name|allocate
argument_list|(
name|a
argument_list|,
literal|1
argument_list|,
name|baseSize
operator|*
literal|2
argument_list|,
name|offset
operator|+
literal|1
argument_list|,
name|doIncRef
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|MemoryBuffer
index|[]
name|tmp
init|=
name|allocate
argument_list|(
name|a
argument_list|,
literal|2
argument_list|,
name|baseSize
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|initial
argument_list|,
name|offset
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
name|initial
index|[
name|offset
operator|++
index|]
operator|=
name|allocate
argument_list|(
name|a
argument_list|,
literal|1
argument_list|,
name|baseSize
operator|*
literal|2
argument_list|,
name|offset
operator|+
literal|1
argument_list|,
name|doIncRef
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|tmp
operator|=
name|allocate
argument_list|(
name|a
argument_list|,
literal|2
argument_list|,
name|baseSize
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|initial
argument_list|,
name|offset
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|deallocOneFirst
condition|)
block|{
name|a
operator|.
name|deallocate
argument_list|(
name|initial
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deallocOneSecond
condition|)
block|{
name|a
operator|.
name|deallocate
argument_list|(
name|initial
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|deallocate
argument_list|(
name|initial
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|deallocate
argument_list|(
name|initial
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Before: "
operator|+
name|a
operator|.
name|testDump
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setOomLoggingForTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|initial
return|;
block|}
specifier|private
specifier|static
name|void
name|checkInitialValues
parameter_list|(
name|LlapAllocatorBuffer
index|[]
name|bufs
parameter_list|,
name|int
modifier|...
name|indexes
parameter_list|)
block|{
for|for
control|(
name|int
name|index
range|:
name|indexes
control|)
block|{
name|LlapAllocatorBuffer
name|buf
init|=
name|bufs
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|incRefIfNotEvicted
argument_list|(
name|buf
argument_list|,
literal|false
argument_list|)
condition|)
continue|continue;
try|try
block|{
name|checkTestValue
argument_list|(
name|buf
argument_list|,
name|index
operator|+
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|buf
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|incRefIfNotEvicted
parameter_list|(
name|LlapAllocatorBuffer
name|buf
parameter_list|,
name|boolean
name|mustExist
parameter_list|)
block|{
name|int
name|rc
init|=
name|buf
operator|.
name|tryIncRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|==
name|LlapAllocatorBuffer
operator|.
name|INCREF_FAILED
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to incref (bad state) "
operator|+
name|buf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|<=
literal|0
operator|&&
name|mustExist
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to incref (evicted) "
operator|+
name|buf
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
operator|>
literal|0
return|;
comment|// We expect evicted, but not failed.
block|}
specifier|private
specifier|static
name|void
name|checkTestValue
parameter_list|(
name|LlapAllocatorBuffer
name|mem
parameter_list|,
name|long
name|testValue
parameter_list|,
name|String
name|str
parameter_list|,
name|boolean
name|mustExist
parameter_list|)
block|{
if|if
condition|(
operator|!
name|incRefIfNotEvicted
argument_list|(
name|mem
argument_list|,
name|mustExist
argument_list|)
condition|)
return|return;
try|try
block|{
name|TestBuddyAllocator
operator|.
name|checkTestValue
argument_list|(
name|mem
argument_list|,
name|testValue
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mem
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|BuddyAllocator
name|create
parameter_list|(
name|int
name|max
parameter_list|,
name|int
name|arenas
parameter_list|,
name|int
name|total
parameter_list|,
name|boolean
name|isShortcut
parameter_list|,
name|boolean
name|isBruteForceOnly
parameter_list|)
block|{
name|BuddyAllocator
name|result
init|=
operator|new
name|BuddyAllocator
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|8
argument_list|,
name|max
argument_list|,
name|arenas
argument_list|,
name|total
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|MM
argument_list|,
name|METRICS
argument_list|,
name|isBruteForceOnly
condition|?
literal|"brute"
else|:
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isShortcut
condition|)
block|{
name|result
operator|.
name|disableDefragShortcutForTest
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|setOomLoggingForTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|LlapAllocatorBuffer
index|[]
name|allocate
parameter_list|(
name|BuddyAllocator
name|a
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|baseValue
parameter_list|)
block|{
return|return
name|allocate
argument_list|(
name|a
argument_list|,
name|count
argument_list|,
name|size
argument_list|,
name|baseValue
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|LlapAllocatorBuffer
index|[]
name|allocate
parameter_list|(
name|BuddyAllocator
name|a
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|baseValue
parameter_list|,
name|boolean
name|doIncRef
parameter_list|)
block|{
name|LlapAllocatorBuffer
index|[]
name|allocs
init|=
operator|new
name|LlapAllocatorBuffer
index|[
name|count
index|]
decl_stmt|;
try|try
block|{
name|a
operator|.
name|allocateMultiple
argument_list|(
name|allocs
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AllocatorOutOfMemoryException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to allocate "
operator|+
name|allocs
operator|.
name|length
operator|+
literal|" of "
operator|+
name|size
operator|+
literal|"; "
operator|+
name|a
operator|.
name|testDump
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
comment|// Make sure buffers are eligible for discard.
if|if
condition|(
name|doIncRef
condition|)
block|{
name|int
name|rc
init|=
name|allocs
index|[
name|i
index|]
operator|.
name|incRef
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rc
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|TestBuddyAllocator
operator|.
name|putTestValue
argument_list|(
name|allocs
index|[
name|i
index|]
argument_list|,
name|baseValue
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|doIncRef
condition|)
block|{
name|allocs
index|[
name|i
index|]
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|allocs
return|;
block|}
specifier|public
specifier|static
name|LlapAllocatorBuffer
index|[]
name|prepareCustomFragmentedAllocator
parameter_list|(
name|BuddyAllocator
name|a
parameter_list|,
name|int
index|[]
name|sizes
parameter_list|,
name|int
index|[]
name|dealloc
parameter_list|,
name|boolean
name|doIncRef
parameter_list|)
block|{
name|LlapAllocatorBuffer
index|[]
name|initial
init|=
operator|new
name|LlapAllocatorBuffer
index|[
name|sizes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|initial
index|[
name|i
index|]
operator|=
name|allocate
argument_list|(
name|a
argument_list|,
literal|1
argument_list|,
name|sizes
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|doIncRef
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dealloc
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|a
operator|.
name|deallocate
argument_list|(
name|initial
index|[
name|dealloc
index|[
name|i
index|]
index|]
argument_list|)
expr_stmt|;
name|initial
index|[
name|dealloc
index|[
name|i
index|]
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Before: "
operator|+
name|a
operator|.
name|testDump
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setOomLoggingForTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|initial
return|;
block|}
block|}
end_class

end_unit

