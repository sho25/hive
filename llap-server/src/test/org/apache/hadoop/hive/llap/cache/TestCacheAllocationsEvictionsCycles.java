begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|Allocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|metadata
operator|.
name|MetadataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonCacheMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test the full cycle of allocation/accounting/eviction interactions.  */
end_comment

begin_class
specifier|public
class|class
name|TestCacheAllocationsEvictionsCycles
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCacheAllocationsEvictionsCycles
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LlapDaemonCacheMetrics
name|CACHE_METRICS
init|=
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"testCache"
argument_list|,
literal|"testSession"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxSize
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|LowLevelCache
name|dataCache
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|LowLevelCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SerDeLowLevelCacheImpl
name|serdCache
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SerDeLowLevelCacheImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MetadataCache
name|metaDataCache
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MetadataCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BuddyAllocator
name|allocator
decl_stmt|;
specifier|private
name|MemoryManager
name|memoryManager
decl_stmt|;
specifier|private
name|LowLevelCachePolicy
name|cachePolicy
decl_stmt|;
specifier|private
name|EvictionTracker
name|evictionTracker
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Set lambda to 1 so the heap size becomes 1 (LRU).
name|conf
operator|.
name|setDouble
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_LRFU_LAMBDA
operator|.
name|varname
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_LRFU_BP_WRAPPER_SIZE
operator|.
name|varname
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|minBufferSize
init|=
literal|1
decl_stmt|;
name|cachePolicy
operator|=
operator|new
name|LowLevelLrfuCachePolicy
argument_list|(
name|minBufferSize
argument_list|,
name|maxSize
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|memoryManager
operator|=
operator|new
name|LowLevelCacheMemoryManager
argument_list|(
name|maxSize
argument_list|,
name|cachePolicy
argument_list|,
name|CACHE_METRICS
argument_list|)
expr_stmt|;
name|int
name|maxAllocationSize
init|=
literal|1024
decl_stmt|;
name|int
name|minAllocationSize
init|=
literal|8
decl_stmt|;
name|allocator
operator|=
operator|new
name|BuddyAllocator
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|minAllocationSize
argument_list|,
name|maxAllocationSize
argument_list|,
literal|1
argument_list|,
name|maxSize
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|memoryManager
argument_list|,
name|CACHE_METRICS
argument_list|,
literal|"no-force-eviction"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EvictionDispatcher
name|evictionDispatcher
init|=
operator|new
name|EvictionDispatcher
argument_list|(
name|dataCache
argument_list|,
name|serdCache
argument_list|,
name|metaDataCache
argument_list|,
name|allocator
argument_list|)
decl_stmt|;
name|evictionTracker
operator|=
operator|new
name|EvictionTracker
argument_list|(
name|evictionDispatcher
argument_list|)
expr_stmt|;
name|cachePolicy
operator|.
name|setEvictionListener
argument_list|(
name|evictionTracker
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Purge the cache on tear down"
argument_list|)
expr_stmt|;
name|cachePolicy
operator|.
name|purge
argument_list|()
expr_stmt|;
name|allocator
operator|=
literal|null
expr_stmt|;
name|memoryManager
operator|=
literal|null
expr_stmt|;
name|cachePolicy
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Test case to ensure that deallocate it does merge small blocks into bigger ones.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|6_000L
argument_list|)
specifier|public
name|void
name|testMergeOfBlocksAfterDeallocate
parameter_list|()
block|{
comment|// allocate blocks of cacheSize/16, Then deallocate then Allocate of size cacheSize/2
name|MemoryBuffer
index|[]
name|dest
init|=
operator|new
name|MemoryBuffer
index|[
literal|16
index|]
decl_stmt|;
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|dest
control|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|memoryBuffer
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|dest
argument_list|,
literal|64
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Check that everything is allocated
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MemoryBuffer
name|value
range|:
name|dest
control|)
block|{
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
operator|(
name|LlapCacheableBuffer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MemoryBuffer
name|value
range|:
name|dest
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|value
operator|instanceof
name|LlapDataBuffer
argument_list|)
expr_stmt|;
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|value
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|buffer
operator|.
name|getMemoryUsage
argument_list|()
argument_list|,
name|cachePolicy
operator|.
name|evictSomeBlocks
argument_list|(
name|buffer
operator|.
name|getMemoryUsage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|memoryManager
operator|.
name|releaseMemory
argument_list|(
name|buffer
operator|.
name|getMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// All is deAllocated thus used has to be zero
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
name|MemoryBuffer
index|[]
name|dest2
init|=
operator|new
name|MemoryBuffer
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|dest2
control|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|memoryBuffer
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|dest2
argument_list|,
literal|512
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dest2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dest
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|//we are not calling deallocate evict to avoid extra memory manager free calls
name|allocator
operator|.
name|deallocate
argument_list|(
name|dest2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|6_000L
argument_list|)
specifier|public
name|void
name|testSimpleAllocateThenEvictThenAllocate
parameter_list|()
block|{
comment|// Allocate all the cache 16 * 64
name|MemoryBuffer
index|[]
name|dest
init|=
operator|new
name|MemoryBuffer
index|[
literal|16
index|]
decl_stmt|;
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|dest
control|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|memoryBuffer
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|dest
argument_list|,
literal|64
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MemoryBuffer
name|buffer
range|:
name|dest
control|)
block|{
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
operator|(
name|LlapCacheableBuffer
operator|)
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|// allocate bigger blocks
name|dest
operator|=
operator|new
name|MemoryBuffer
index|[
literal|8
index|]
expr_stmt|;
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|dest
argument_list|,
literal|128
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|dest
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|memoryBuffer
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|deallocate
argument_list|(
name|memoryBuffer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|6_000L
argument_list|)
specifier|public
name|void
name|testRandomFragmentation
parameter_list|()
block|{
name|MemoryBuffer
index|[]
name|memBuffers8B
init|=
operator|new
name|MemoryBuffer
index|[
literal|64
index|]
decl_stmt|;
name|MemoryBuffer
index|[]
name|memBuffers16B
init|=
operator|new
name|MemoryBuffer
index|[
literal|16
index|]
decl_stmt|;
name|MemoryBuffer
index|[]
name|memBuffers32B
init|=
operator|new
name|MemoryBuffer
index|[
literal|8
index|]
decl_stmt|;
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|memBuffers8B
control|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|memoryBuffer
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|memBuffers8B
argument_list|,
literal|8
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|memBuffers16B
argument_list|,
literal|16
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|memBuffers32B
argument_list|,
literal|32
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//all the cache is allocated with 8 X 128
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|memBuffers8B
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|memBuffers8B
index|[
name|i
index|]
decl_stmt|;
comment|// this is needed to make sure that the policy adds the buffers to the linked list as buffers ready to be evicted
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
comment|// lock some buffers
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// lock the even buffers
name|buffer
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|memBuffers16B
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|memBuffers16B
index|[
name|i
index|]
decl_stmt|;
comment|// this is needed to make sure that the policy adds the buffers to the linked list as buffers ready to be evicted
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
comment|// lock some buffers
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// lock the even buffers
name|buffer
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|memBuffers32B
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|memBuffers32B
index|[
name|i
index|]
decl_stmt|;
comment|// this is needed to make sure that the policy adds the buffers to the linked list as buffers ready to be evicted
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
comment|// lock some buffers
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// lock the even buffers
name|buffer
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|purge
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|memBuffers32B
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|memoryBuffer
decl_stmt|;
comment|// this is needed to make sure that the policy adds the buffers to the linked list as buffers ready to be evicted
if|if
condition|(
name|buffer
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|memBuffers16B
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|memoryBuffer
decl_stmt|;
comment|// this is needed to make sure that the policy adds the buffers to the linked list as buffers ready to be evicted
if|if
condition|(
name|buffer
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|memBuffers8B
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|memoryBuffer
decl_stmt|;
comment|// this is needed to make sure that the policy adds the buffers to the linked list as buffers ready to be evicted
if|if
condition|(
name|buffer
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxSize
operator|/
literal|2
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
name|memBuffers8B
operator|=
operator|new
name|MemoryBuffer
index|[
literal|64
index|]
expr_stmt|;
name|memBuffers16B
operator|=
operator|new
name|MemoryBuffer
index|[
literal|16
index|]
expr_stmt|;
name|memBuffers32B
operator|=
operator|new
name|MemoryBuffer
index|[
literal|8
index|]
expr_stmt|;
name|evictionTracker
operator|.
name|getEvicted
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|memBuffers16B
argument_list|,
literal|16
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|memBuffers8B
argument_list|,
literal|8
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|memBuffers32B
argument_list|,
literal|32
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|memBuffers32B
operator|.
name|length
operator|/
literal|2
operator|+
name|memBuffers16B
operator|.
name|length
operator|/
literal|2
operator|+
name|memBuffers8B
operator|.
name|length
operator|/
literal|2
argument_list|,
name|evictionTracker
operator|.
name|getEvicted
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|memBuffers8B
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|memoryBuffer
decl_stmt|;
name|allocator
operator|.
name|deallocate
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|memBuffers16B
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|memoryBuffer
decl_stmt|;
name|allocator
operator|.
name|deallocate
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|memBuffers32B
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|memoryBuffer
decl_stmt|;
name|allocator
operator|.
name|deallocate
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|6_000L
argument_list|)
specifier|public
name|void
name|testFragmentation
parameter_list|()
block|{
name|MemoryBuffer
index|[]
name|dest
init|=
operator|new
name|MemoryBuffer
index|[
literal|128
index|]
decl_stmt|;
for|for
control|(
name|MemoryBuffer
name|memoryBuffer
range|:
name|dest
control|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|memoryBuffer
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|dest
argument_list|,
literal|8
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//all the cache is allocated with 8 X 128
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dest
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|dest
index|[
name|i
index|]
decl_stmt|;
comment|// this is needed to make sure that the policy adds the buffers to the linked list as buffers ready to be evicted
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
comment|// lock some buffers
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// lock the even buffers
name|buffer
operator|.
name|incRef
argument_list|()
expr_stmt|;
block|}
block|}
comment|// purge the cache should lead to only evicting the unlocked buffers
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|purge
argument_list|()
argument_list|)
expr_stmt|;
comment|// After purge the used memory should be aligned to the amount of evicted items
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
name|MemoryBuffer
index|[]
name|dest2
init|=
operator|new
name|MemoryBuffer
index|[
literal|1
index|]
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|dest2
argument_list|,
literal|16
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Allocator
operator|.
name|AllocatorOutOfMemoryException
name|e
parameter_list|)
block|{
comment|// we should fail since we have the extreme case where half of the leaf nodes are locked thus
comment|// maximum fragmentation case
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
comment|//We need to make sure that the failed allocation attempt undo the reserved memory.
comment|//https://issues.apache.org/jira/browse/HIVE-21689
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
operator|(
operator|(
name|LowLevelCacheMemoryManager
operator|)
name|memoryManager
operator|)
operator|.
name|getCurrentUsedSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// unlock one buffer
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|LlapDataBuffer
operator|)
name|dest
index|[
literal|0
index|]
operator|)
operator|.
name|isLocked
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LlapDataBuffer
operator|)
name|dest
index|[
literal|0
index|]
operator|)
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|evictionTracker
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// this is needed since purge has removed the locked ones form the list, the assumption is that when we unlock
comment|// a buffer we notify the cache policy.
name|cachePolicy
operator|.
name|notifyUnlock
argument_list|(
operator|(
name|LlapDataBuffer
operator|)
name|dest
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// we should be able to allocate after some extra eviction
name|allocator
operator|.
name|allocateMultiple
argument_list|(
name|dest2
argument_list|,
literal|16
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//we have to see that we have force evicted something to make room for the new allocation
name|Assert
operator|.
name|assertTrue
argument_list|(
name|evictionTracker
operator|.
name|getEvicted
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|EvictionTracker
implements|implements
name|EvictionListener
block|{
specifier|private
specifier|final
name|EvictionListener
name|evictionListener
decl_stmt|;
specifier|private
name|List
argument_list|<
name|LlapCacheableBuffer
argument_list|>
name|evicted
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|EvictionTracker
parameter_list|(
name|EvictionListener
name|evictionListener
parameter_list|)
block|{
name|this
operator|.
name|evictionListener
operator|=
name|evictionListener
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|evicted
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|evictionListener
operator|.
name|notifyEvicted
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|LlapCacheableBuffer
argument_list|>
name|getEvicted
parameter_list|()
block|{
return|return
name|evicted
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|evicted
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

