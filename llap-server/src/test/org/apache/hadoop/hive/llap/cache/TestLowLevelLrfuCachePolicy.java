begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCache
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonCacheMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestLowLevelLrfuCachePolicy
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLowLevelLrfuCachePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testRegression_HIVE_12178
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing wrong list status after eviction"
argument_list|)
expr_stmt|;
name|EvictionTracker
name|et
init|=
operator|new
name|EvictionTracker
argument_list|()
decl_stmt|;
name|int
name|memSize
init|=
literal|2
decl_stmt|,
name|lambda
init|=
literal|1
decl_stmt|;
comment|// Set lambda to 1 so the heap size becomes 1 (LRU).
name|Configuration
name|conf
init|=
name|createConf
argument_list|(
literal|1
argument_list|,
name|memSize
argument_list|,
operator|(
name|double
operator|)
name|lambda
argument_list|)
decl_stmt|;
specifier|final
name|LowLevelLrfuCachePolicy
name|lrfu
init|=
operator|new
name|LowLevelLrfuCachePolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Field
name|f
init|=
name|LowLevelLrfuCachePolicy
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"listLock"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ReentrantLock
name|listLock
init|=
operator|(
name|ReentrantLock
operator|)
name|f
operator|.
name|get
argument_list|(
name|lrfu
argument_list|)
decl_stmt|;
name|LowLevelCacheMemoryManager
name|mm
init|=
operator|new
name|LowLevelCacheMemoryManager
argument_list|(
name|conf
argument_list|,
name|lrfu
argument_list|,
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|lrfu
operator|.
name|setEvictionListener
argument_list|(
name|et
argument_list|)
expr_stmt|;
specifier|final
name|LlapDataBuffer
name|buffer1
init|=
name|LowLevelCacheImpl
operator|.
name|allocateFake
argument_list|()
decl_stmt|;
name|LlapDataBuffer
name|buffer2
init|=
name|LowLevelCacheImpl
operator|.
name|allocateFake
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cache
argument_list|(
name|mm
argument_list|,
name|lrfu
argument_list|,
name|et
argument_list|,
name|buffer1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
argument_list|(
name|mm
argument_list|,
name|lrfu
argument_list|,
name|et
argument_list|,
name|buffer2
argument_list|)
argument_list|)
expr_stmt|;
comment|// buffer2 is now in the heap, buffer1 is in the list. "Use" buffer1 again;
comment|// before we notify though, lock the list, so lock cannot remove it from the list.
name|buffer1
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapCacheableBuffer
operator|.
name|IN_LIST
argument_list|,
name|buffer1
operator|.
name|indexInHeap
argument_list|)
expr_stmt|;
name|listLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
name|otherThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|lrfu
operator|.
name|notifyLock
argument_list|(
name|buffer1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|otherThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|otherThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|listLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Now try to evict with locked buffer still in the list.
name|mm
operator|.
name|reserveMemory
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|buffer2
argument_list|,
name|et
operator|.
name|evicted
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|unlock
argument_list|(
name|lrfu
argument_list|,
name|buffer1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeapSize2
parameter_list|()
block|{
name|testHeapSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeapSize8
parameter_list|()
block|{
name|testHeapSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeapSize30
parameter_list|()
block|{
name|testHeapSize
argument_list|(
literal|30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeapSize64
parameter_list|()
block|{
name|testHeapSize
argument_list|(
literal|64
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|EvictionTracker
implements|implements
name|EvictionListener
block|{
specifier|public
name|List
argument_list|<
name|LlapDataBuffer
argument_list|>
name|evicted
init|=
operator|new
name|ArrayList
argument_list|<
name|LlapDataBuffer
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|notifyEvicted
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{
name|evicted
operator|.
name|add
argument_list|(
operator|(
name|LlapDataBuffer
operator|)
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLfuExtreme
parameter_list|()
block|{
name|int
name|heapSize
init|=
literal|4
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing lambda 0 (LFU)"
argument_list|)
expr_stmt|;
name|Random
name|rdm
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|createConf
argument_list|(
literal|1
argument_list|,
name|heapSize
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|LlapDataBuffer
argument_list|>
name|inserted
init|=
operator|new
name|ArrayList
argument_list|<
name|LlapDataBuffer
argument_list|>
argument_list|(
name|heapSize
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_LRFU_LAMBDA
operator|.
name|varname
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|EvictionTracker
name|et
init|=
operator|new
name|EvictionTracker
argument_list|()
decl_stmt|;
name|LowLevelLrfuCachePolicy
name|lfu
init|=
operator|new
name|LowLevelLrfuCachePolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LowLevelCacheMemoryManager
name|mm
init|=
operator|new
name|LowLevelCacheMemoryManager
argument_list|(
name|conf
argument_list|,
name|lfu
argument_list|,
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|lfu
operator|.
name|setEvictionListener
argument_list|(
name|et
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|heapSize
condition|;
operator|++
name|i
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
name|LowLevelCacheImpl
operator|.
name|allocateFake
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cache
argument_list|(
name|mm
argument_list|,
name|lfu
argument_list|,
name|et
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|inserted
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|inserted
argument_list|,
name|rdm
argument_list|)
expr_stmt|;
comment|// LFU extreme, order of accesses should be ignored, only frequency matters.
comment|// We touch first elements later, but do it less times, so they will be evicted first.
for|for
control|(
name|int
name|i
init|=
name|inserted
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
operator|+
literal|1
condition|;
operator|++
name|j
control|)
block|{
name|lfu
operator|.
name|notifyLock
argument_list|(
name|inserted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|lfu
operator|.
name|notifyUnlock
argument_list|(
name|inserted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|verifyOrder
argument_list|(
name|mm
argument_list|,
name|lfu
argument_list|,
name|et
argument_list|,
name|inserted
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Configuration
name|createConf
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|heapSize
parameter_list|,
name|Double
name|lambda
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_MIN_ALLOC
operator|.
name|varname
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_ORC_CACHE_MAX_SIZE
operator|.
name|varname
argument_list|,
name|heapSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|lambda
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|setDouble
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_LRFU_LAMBDA
operator|.
name|varname
argument_list|,
name|lambda
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
specifier|private
name|Configuration
name|createConf
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|heapSize
parameter_list|)
block|{
return|return
name|createConf
argument_list|(
name|min
argument_list|,
name|heapSize
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLruExtreme
parameter_list|()
block|{
name|int
name|heapSize
init|=
literal|4
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing lambda 1 (LRU)"
argument_list|)
expr_stmt|;
name|Random
name|rdm
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|createConf
argument_list|(
literal|1
argument_list|,
name|heapSize
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|LlapDataBuffer
argument_list|>
name|inserted
init|=
operator|new
name|ArrayList
argument_list|<
name|LlapDataBuffer
argument_list|>
argument_list|(
name|heapSize
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_LRFU_LAMBDA
operator|.
name|varname
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|EvictionTracker
name|et
init|=
operator|new
name|EvictionTracker
argument_list|()
decl_stmt|;
name|LowLevelLrfuCachePolicy
name|lru
init|=
operator|new
name|LowLevelLrfuCachePolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LowLevelCacheMemoryManager
name|mm
init|=
operator|new
name|LowLevelCacheMemoryManager
argument_list|(
name|conf
argument_list|,
name|lru
argument_list|,
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|lru
operator|.
name|setEvictionListener
argument_list|(
name|et
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|heapSize
condition|;
operator|++
name|i
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
name|LowLevelCacheImpl
operator|.
name|allocateFake
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cache
argument_list|(
name|mm
argument_list|,
name|lru
argument_list|,
name|et
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|inserted
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|inserted
argument_list|,
name|rdm
argument_list|)
expr_stmt|;
comment|// LRU extreme, frequency of accesses should be ignored, only order matters.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inserted
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
operator|(
name|inserted
operator|.
name|size
argument_list|()
operator|-
name|i
operator|)
condition|;
operator|++
name|j
control|)
block|{
name|lru
operator|.
name|notifyLock
argument_list|(
name|inserted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|lru
operator|.
name|notifyUnlock
argument_list|(
name|inserted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|verifyOrder
argument_list|(
name|mm
argument_list|,
name|lru
argument_list|,
name|et
argument_list|,
name|inserted
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeadlockResolution
parameter_list|()
block|{
name|int
name|heapSize
init|=
literal|4
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing deadlock resolution"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|LlapDataBuffer
argument_list|>
name|inserted
init|=
operator|new
name|ArrayList
argument_list|<
name|LlapDataBuffer
argument_list|>
argument_list|(
name|heapSize
argument_list|)
decl_stmt|;
name|EvictionTracker
name|et
init|=
operator|new
name|EvictionTracker
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createConf
argument_list|(
literal|1
argument_list|,
name|heapSize
argument_list|)
decl_stmt|;
name|LowLevelLrfuCachePolicy
name|lrfu
init|=
operator|new
name|LowLevelLrfuCachePolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LowLevelCacheMemoryManager
name|mm
init|=
operator|new
name|LowLevelCacheMemoryManager
argument_list|(
name|conf
argument_list|,
name|lrfu
argument_list|,
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|lrfu
operator|.
name|setEvictionListener
argument_list|(
name|et
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|heapSize
condition|;
operator|++
name|i
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
name|LowLevelCacheImpl
operator|.
name|allocateFake
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cache
argument_list|(
name|mm
argument_list|,
name|lrfu
argument_list|,
name|et
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|inserted
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|// Lock the lowest priority buffer; try to evict - we'll evict some other buffer.
name|LlapDataBuffer
name|locked
init|=
name|inserted
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|lock
argument_list|(
name|lrfu
argument_list|,
name|locked
argument_list|)
expr_stmt|;
name|mm
operator|.
name|reserveMemory
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LlapDataBuffer
name|evicted
init|=
name|et
operator|.
name|evicted
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|evicted
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|evicted
operator|.
name|isInvalid
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|locked
argument_list|,
name|evicted
argument_list|)
expr_stmt|;
name|unlock
argument_list|(
name|lrfu
argument_list|,
name|locked
argument_list|)
expr_stmt|;
block|}
comment|// Buffers in test are fakes not linked to cache; notify cache policy explicitly.
specifier|public
name|boolean
name|cache
parameter_list|(
name|LowLevelCacheMemoryManager
name|mm
parameter_list|,
name|LowLevelLrfuCachePolicy
name|lrfu
parameter_list|,
name|EvictionTracker
name|et
parameter_list|,
name|LlapDataBuffer
name|buffer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mm
operator|.
name|reserveMemory
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|buffer
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|lrfu
operator|.
name|cache
argument_list|(
name|buffer
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|lrfu
operator|.
name|notifyUnlock
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|LlapDataBuffer
name|getOneEvictedBuffer
parameter_list|(
name|EvictionTracker
name|et
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|et
operator|.
name|evicted
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|et
operator|.
name|evicted
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// test-specific
name|LlapDataBuffer
name|result
init|=
name|et
operator|.
name|evicted
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|et
operator|.
name|evicted
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|et
operator|.
name|evicted
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|void
name|lock
parameter_list|(
name|LowLevelLrfuCachePolicy
name|lrfu
parameter_list|,
name|LlapDataBuffer
name|locked
parameter_list|)
block|{
name|locked
operator|.
name|incRef
argument_list|()
expr_stmt|;
name|lrfu
operator|.
name|notifyLock
argument_list|(
name|locked
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|unlock
parameter_list|(
name|LowLevelLrfuCachePolicy
name|lrfu
parameter_list|,
name|LlapDataBuffer
name|locked
parameter_list|)
block|{
name|locked
operator|.
name|decRef
argument_list|()
expr_stmt|;
name|lrfu
operator|.
name|notifyUnlock
argument_list|(
name|locked
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testHeapSize
parameter_list|(
name|int
name|heapSize
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing heap size "
operator|+
name|heapSize
argument_list|)
expr_stmt|;
name|Random
name|rdm
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|createConf
argument_list|(
literal|1
argument_list|,
name|heapSize
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_LRFU_LAMBDA
operator|.
name|varname
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
comment|// very small heap, 14 elements
name|EvictionTracker
name|et
init|=
operator|new
name|EvictionTracker
argument_list|()
decl_stmt|;
name|LowLevelLrfuCachePolicy
name|lrfu
init|=
operator|new
name|LowLevelLrfuCachePolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LowLevelCacheMemoryManager
name|mm
init|=
operator|new
name|LowLevelCacheMemoryManager
argument_list|(
name|conf
argument_list|,
name|lrfu
argument_list|,
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|lrfu
operator|.
name|setEvictionListener
argument_list|(
name|et
argument_list|)
expr_stmt|;
comment|// Insert the number of elements plus 2, to trigger 2 evictions.
name|int
name|toEvict
init|=
literal|2
decl_stmt|;
name|ArrayList
argument_list|<
name|LlapDataBuffer
argument_list|>
name|inserted
init|=
operator|new
name|ArrayList
argument_list|<
name|LlapDataBuffer
argument_list|>
argument_list|(
name|heapSize
argument_list|)
decl_stmt|;
name|LlapDataBuffer
index|[]
name|evicted
init|=
operator|new
name|LlapDataBuffer
index|[
name|toEvict
index|]
decl_stmt|;
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|toEvict
operator|<=
name|heapSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|heapSize
operator|+
name|toEvict
condition|;
operator|++
name|i
control|)
block|{
name|LlapDataBuffer
name|buffer
init|=
name|LowLevelCacheImpl
operator|.
name|allocateFake
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cache
argument_list|(
name|mm
argument_list|,
name|lrfu
argument_list|,
name|et
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|LlapDataBuffer
name|evictedBuf
init|=
name|getOneEvictedBuffer
argument_list|(
name|et
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|toEvict
condition|)
block|{
name|evicted
index|[
name|i
index|]
operator|=
name|buffer
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|i
operator|>=
name|heapSize
condition|)
block|{
name|assertSame
argument_list|(
name|evicted
index|[
name|i
operator|-
name|heapSize
index|]
argument_list|,
name|evictedBuf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|evictedBuf
operator|.
name|isInvalid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|evictedBuf
argument_list|)
expr_stmt|;
block|}
name|inserted
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Inserted "
operator|+
name|dumpInserted
argument_list|(
name|inserted
argument_list|)
argument_list|)
expr_stmt|;
comment|// We will touch all blocks in random order.
name|Collections
operator|.
name|shuffle
argument_list|(
name|inserted
argument_list|,
name|rdm
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Touch order "
operator|+
name|dumpInserted
argument_list|(
name|inserted
argument_list|)
argument_list|)
expr_stmt|;
comment|// Lock entire heap; heap is still full; we should not be able to evict or insert.
for|for
control|(
name|LlapDataBuffer
name|buf
range|:
name|inserted
control|)
block|{
name|lock
argument_list|(
name|lrfu
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|mm
operator|.
name|reserveMemory
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|et
operator|.
name|evicted
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Got "
operator|+
name|et
operator|.
name|evicted
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|et
operator|.
name|evicted
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LlapDataBuffer
name|buf
range|:
name|inserted
control|)
block|{
name|unlock
argument_list|(
name|lrfu
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
comment|// To make (almost) sure we get definite order, touch blocks in order large number of times.
for|for
control|(
name|LlapDataBuffer
name|buf
range|:
name|inserted
control|)
block|{
comment|// TODO: this seems to indicate that priorities change too little...
comment|//       perhaps we need to adjust the policy.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
operator|++
name|j
control|)
block|{
name|lrfu
operator|.
name|notifyLock
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|lrfu
operator|.
name|notifyUnlock
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
name|verifyOrder
argument_list|(
name|mm
argument_list|,
name|lrfu
argument_list|,
name|et
argument_list|,
name|inserted
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyOrder
parameter_list|(
name|LowLevelCacheMemoryManager
name|mm
parameter_list|,
name|LowLevelLrfuCachePolicy
name|lrfu
parameter_list|,
name|EvictionTracker
name|et
parameter_list|,
name|ArrayList
argument_list|<
name|LlapDataBuffer
argument_list|>
name|inserted
parameter_list|)
block|{
name|LlapDataBuffer
name|block
decl_stmt|;
comment|// Evict all blocks.
name|et
operator|.
name|evicted
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inserted
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|mm
operator|.
name|reserveMemory
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The map should now be empty.
name|assertFalse
argument_list|(
name|mm
operator|.
name|reserveMemory
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inserted
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|block
operator|=
name|et
operator|.
name|evicted
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|block
operator|.
name|isInvalid
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|inserted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|dumpInserted
parameter_list|(
name|ArrayList
argument_list|<
name|LlapDataBuffer
argument_list|>
name|inserted
parameter_list|)
block|{
name|String
name|debugStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inserted
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|debugStr
operator|+=
literal|", "
expr_stmt|;
name|debugStr
operator|+=
name|inserted
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|debugStr
return|;
block|}
block|}
end_class

end_unit

