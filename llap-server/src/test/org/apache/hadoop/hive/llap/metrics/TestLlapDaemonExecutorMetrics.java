begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|DumpingMetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorAvailableFreeSlots
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorMaxFreeSlotsConfigured
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorMaxFreeSlots
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorNumExecutors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorNumExecutorsAvailable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorNumExecutorsConfigured
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorNumQueuedRequests
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorWaitQueueSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorWaitQueueSizeConfigured
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorMetrics
operator|.
name|TimedAverageMetrics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test class for LlapDaemonExecutorMetrics.  */
end_comment

begin_class
specifier|public
class|class
name|TestLlapDaemonExecutorMetrics
block|{
comment|/**    * Test generated values for TimedAverageMetrics when the time window is smaller than the amount    * of data we have stored.    */
annotation|@
name|Test
specifier|public
name|void
name|testTimedAverageMetricsTimeBound
parameter_list|()
block|{
name|TimedAverageMetrics
name|metrics
decl_stmt|;
comment|// Window 1
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Window size 1"
argument_list|,
literal|100
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Window 1 with multiple data
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Window size 1 with multiple data"
argument_list|,
literal|100
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Single point in the middle
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Single point in the middle"
argument_list|,
literal|50
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Single point at 3/4
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|75
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Single point at 3/4"
argument_list|,
literal|25
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Single point at 1/4
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|25
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Single point at 1/4"
argument_list|,
literal|75
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Multiple points after 1/4
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|,
literal|3
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|25
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Multiple points after 1/4"
argument_list|,
literal|75
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// More points with overflow
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|,
literal|18
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|25
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"More points with overflow"
argument_list|,
literal|100
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|450
argument_list|)
argument_list|)
expr_stmt|;
comment|// Very old points
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|,
literal|20
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|25
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Very old points"
argument_list|,
literal|100
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|add
argument_list|(
literal|1000
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Very old points but not that old"
argument_list|,
literal|10
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test generated values for TimedAverageMetrics when we have less data points than the window.    */
annotation|@
name|Test
specifier|public
name|void
name|testTimedAverageMetricsDataBound
parameter_list|()
block|{
name|TimedAverageMetrics
name|metrics
decl_stmt|;
comment|// Window 1
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Window size 1"
argument_list|,
literal|100
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// Overflow at the bottom
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|3
argument_list|,
literal|100
argument_list|,
literal|4
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Window size 1 with multiple data"
argument_list|,
literal|65
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that TimedAverageMetrics throws an exception if the window size is 0.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AssertionError
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTimedAverageMetricsWindowSizeZero
parameter_list|()
block|{
name|generateTimedAverageMetrics
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|,
literal|2
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test TimedAverageMetrics with changing data to see that we handle array edge cases correctly.    */
annotation|@
name|Test
specifier|public
name|void
name|testTimedAverageMetricsChanging
parameter_list|()
block|{
name|TimedAverageMetrics
name|metrics
decl_stmt|;
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|3
argument_list|,
literal|30
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Position 0"
argument_list|,
literal|40
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|=
name|generateTimedAverageMetrics
argument_list|(
literal|3
argument_list|,
literal|30
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Position windowDataSize - 1"
argument_list|,
literal|30
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the real interfaces of the TimedAverageMetrics.    */
annotation|@
name|Test
specifier|public
name|void
name|testTimedAverageMetricsReal
parameter_list|()
block|{
name|TimedAverageMetrics
name|metrics
init|=
operator|new
name|TimedAverageMetrics
argument_list|(
literal|10
argument_list|,
literal|6
operator|*
literal|1000
operator|*
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|metrics
operator|.
name|add
argument_list|(
literal|100
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Checking the calculated value"
argument_list|,
literal|100
argument_list|,
name|metrics
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check for the maximum expected amount of data for TimedAverageMetrics.    * 15000 data point / 10 minute window / data every 50 ms.    */
annotation|@
name|Test
specifier|public
name|void
name|testTimedAverageMetricsBigData
parameter_list|()
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
comment|// Data range in metrics from [0 / 250s] till [14999 / (1000s - 50ms)]
name|TimedAverageMetrics
name|metrics
init|=
name|generateTimedAverageMetrics
argument_list|(
literal|15000
argument_list|,
literal|10L
operator|*
literal|60L
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
argument_list|,
literal|20000
argument_list|,
operator|-
literal|5000
argument_list|,
literal|1
argument_list|,
name|currentTime
argument_list|,
literal|50L
operator|*
literal|1000L
operator|*
literal|1000L
argument_list|)
decl_stmt|;
comment|// Checking value from [3000/600s] - [14999/1000s] -> 8999.5
name|assertEquals
argument_list|(
literal|"Checking the calculated value"
argument_list|,
literal|9000
argument_list|,
name|metrics
operator|.
name|value
argument_list|(
name|currentTime
operator|+
literal|50L
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|20000L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleAndDerivedMetricsCalculations
parameter_list|()
block|{
name|int
name|numExecutorsConfigured
init|=
literal|4
decl_stmt|;
name|int
name|numExecutors
init|=
literal|2
decl_stmt|;
name|int
name|numExecutorsAvailable
init|=
literal|1
decl_stmt|;
name|int
name|waitQueueSizeConfigured
init|=
literal|10
decl_stmt|;
name|int
name|waitQueueSize
init|=
literal|5
decl_stmt|;
name|int
name|queuedRequests
init|=
literal|3
decl_stmt|;
name|LlapDaemonExecutorMetrics
name|metrics
init|=
name|LlapDaemonExecutorMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
name|numExecutorsConfigured
argument_list|,
name|waitQueueSizeConfigured
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|setNumExecutors
argument_list|(
name|numExecutors
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setNumExecutorsAvailable
argument_list|(
name|numExecutorsAvailable
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setWaitQueueSize
argument_list|(
name|waitQueueSize
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|setExecutorNumQueuedRequests
argument_list|(
name|queuedRequests
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|data
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|getMetrics
argument_list|(
operator|new
name|DumpingMetricsCollector
argument_list|(
name|data
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Simple values
name|assertTrue
argument_list|(
name|numExecutorsConfigured
operator|==
name|data
operator|.
name|get
argument_list|(
name|ExecutorNumExecutorsConfigured
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|numExecutors
operator|==
name|data
operator|.
name|get
argument_list|(
name|ExecutorNumExecutors
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|waitQueueSizeConfigured
operator|==
name|data
operator|.
name|get
argument_list|(
name|ExecutorWaitQueueSizeConfigured
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|waitQueueSize
operator|==
name|data
operator|.
name|get
argument_list|(
name|ExecutorWaitQueueSize
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queuedRequests
operator|==
name|data
operator|.
name|get
argument_list|(
name|ExecutorNumQueuedRequests
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|numExecutorsAvailable
operator|==
name|data
operator|.
name|get
argument_list|(
name|ExecutorNumExecutorsAvailable
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Derived values
name|assertTrue
argument_list|(
operator|(
name|waitQueueSizeConfigured
operator|+
name|numExecutorsConfigured
operator|)
operator|==
name|data
operator|.
name|get
argument_list|(
name|ExecutorMaxFreeSlotsConfigured
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|waitQueueSize
operator|+
name|numExecutors
operator|)
operator|==
name|data
operator|.
name|get
argument_list|(
name|ExecutorMaxFreeSlots
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|waitQueueSize
operator|+
name|numExecutorsAvailable
operator|-
name|queuedRequests
operator|)
operator|==
name|data
operator|.
name|get
argument_list|(
name|ExecutorAvailableFreeSlots
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TimedAverageMetrics
name|generateTimedAverageMetrics
parameter_list|(
name|int
name|windowDataSize
parameter_list|,
name|long
name|windowTimeSize
parameter_list|,
name|int
name|dataNum
parameter_list|,
name|long
name|firstData
parameter_list|,
name|long
name|dataDelta
parameter_list|,
name|long
name|firstTime
parameter_list|,
name|long
name|timeDelta
parameter_list|)
block|{
name|TimedAverageMetrics
name|metrics
init|=
operator|new
name|TimedAverageMetrics
argument_list|(
name|windowDataSize
argument_list|,
name|windowTimeSize
argument_list|,
name|firstTime
operator|-
name|windowTimeSize
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dataNum
condition|;
name|i
operator|++
control|)
block|{
name|metrics
operator|.
name|add
argument_list|(
name|firstTime
operator|+
name|i
operator|*
name|timeDelta
argument_list|,
name|firstData
operator|+
name|i
operator|*
name|dataDelta
argument_list|)
expr_stmt|;
block|}
return|return
name|metrics
return|;
block|}
block|}
end_class

end_unit

