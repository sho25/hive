begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|comparator
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DaemonId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|QueryFailedHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|AMReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|QueryIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapTaskUmbilicalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezTaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TestAMReporter
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testMultipleAM
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|numExecutors
init|=
literal|1
decl_stmt|;
name|int
name|maxThreads
init|=
literal|1
decl_stmt|;
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|localAddress
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|12345
argument_list|)
argument_list|)
decl_stmt|;
name|QueryFailedHandler
name|queryFailedHandler
init|=
name|mock
argument_list|(
name|QueryFailedHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_AM_LIVENESS_HEARTBEAT_INTERVAL_MS
argument_list|,
literal|"100ms"
argument_list|)
expr_stmt|;
name|DaemonId
name|daemonId
init|=
name|mock
argument_list|(
name|DaemonId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|daemonId
operator|.
name|getUniqueNodeIdInCluster
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"nodeId"
argument_list|)
expr_stmt|;
name|SocketFactory
name|socketFactory
init|=
name|mock
argument_list|(
name|SocketFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|AMReporterForTest
name|amReporter
init|=
operator|new
name|AMReporterForTest
argument_list|(
name|numExecutors
argument_list|,
name|maxThreads
argument_list|,
name|localAddress
argument_list|,
name|queryFailedHandler
argument_list|,
name|conf
argument_list|,
name|daemonId
argument_list|,
name|socketFactory
argument_list|)
decl_stmt|;
name|amReporter
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amReporter
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// register two tasks of same query but different am
name|int
name|am1Port
init|=
literal|123
decl_stmt|;
name|int
name|am2Port
init|=
literal|456
decl_stmt|;
name|String
name|am1Location
init|=
literal|"am1"
decl_stmt|;
name|String
name|am2Location
init|=
literal|"am2"
decl_stmt|;
name|String
name|umbilicalUser
init|=
literal|"user"
decl_stmt|;
name|QueryIdentifier
name|queryId
init|=
operator|new
name|QueryIdentifier
argument_list|(
literal|"app"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|amReporter
operator|.
name|registerTask
argument_list|(
name|am1Location
argument_list|,
name|am1Port
argument_list|,
name|umbilicalUser
argument_list|,
literal|null
argument_list|,
name|queryId
argument_list|,
name|mock
argument_list|(
name|TezTaskAttemptID
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|amReporter
operator|.
name|registerTask
argument_list|(
name|am2Location
argument_list|,
name|am2Port
argument_list|,
name|umbilicalUser
argument_list|,
literal|null
argument_list|,
name|queryId
argument_list|,
name|mock
argument_list|(
name|TezTaskAttemptID
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// verify both am get node heartbeat
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|amReporter
operator|.
name|heartbeatedHost
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|amReporter
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
class|class
name|AMReporterForTest
extends|extends
name|AMReporter
block|{
name|Set
argument_list|<
name|AMNodeInfo
argument_list|>
name|heartbeatedHost
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|AMReporterForTest
parameter_list|(
name|int
name|numExecutors
parameter_list|,
name|int
name|maxThreads
parameter_list|,
name|AtomicReference
argument_list|<
name|InetSocketAddress
argument_list|>
name|localAddress
parameter_list|,
name|QueryFailedHandler
name|queryFailedHandler
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|DaemonId
name|daemonId
parameter_list|,
name|SocketFactory
name|socketFactory
parameter_list|)
block|{
name|super
argument_list|(
name|numExecutors
argument_list|,
name|maxThreads
argument_list|,
name|localAddress
argument_list|,
name|queryFailedHandler
argument_list|,
name|conf
argument_list|,
name|daemonId
argument_list|,
name|socketFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|LlapTaskUmbilicalProtocol
name|createUmbilical
parameter_list|(
specifier|final
name|AMNodeInfo
name|amNodeInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|LlapTaskUmbilicalProtocol
name|umbilical
init|=
name|mock
argument_list|(
name|LlapTaskUmbilicalProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|heartbeatedHost
operator|.
name|add
argument_list|(
name|amNodeInfo
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|umbilical
argument_list|)
operator|.
name|nodeHeartbeat
argument_list|(
name|any
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Text
operator|.
name|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|any
argument_list|(
name|LlapTaskUmbilicalProtocol
operator|.
name|TezAttemptArray
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|umbilical
return|;
block|}
block|}
block|}
end_class

end_unit

