begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestEvictingPriorityBlockingQueue
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Element
name|e
decl_stmt|;
name|EvictingPriorityBlockingQueue
argument_list|<
name|Element
argument_list|>
name|queue
init|=
operator|new
name|EvictingPriorityBlockingQueue
argument_list|<>
argument_list|(
operator|new
name|ElementComparator
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Element
index|[]
name|elements
init|=
operator|new
name|Element
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|elements
index|[
name|i
index|]
operator|=
operator|new
name|Element
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|2
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|3
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// 1,2,3
name|e
operator|=
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|4
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//2,3,4
name|e
operator|=
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1,2,3,4
name|e
operator|=
name|queue
operator|.
name|take
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|elements
index|[
literal|4
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//Highest priority at this point should have come out.
comment|//1,2,3
name|e
operator|=
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|4
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|//1,2,3,4
name|e
operator|=
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// Rejected
comment|//1,2,3,4
name|assertTrue
argument_list|(
name|reinsertIfExists
argument_list|(
name|queue
argument_list|,
name|elements
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reinsertIfExists
argument_list|(
name|queue
argument_list|,
name|elements
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//1,2,3,4
name|e
operator|=
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|5
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//2,3,4,5
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|6
index|]
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|7
index|]
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|//1,2,3,4,5,6,7
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if we are able to set the WaitQueueSize dynamically.    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testSetWaitQueueSize
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Element
name|e
decl_stmt|;
name|EvictingPriorityBlockingQueue
argument_list|<
name|Element
argument_list|>
name|queue
init|=
operator|new
name|EvictingPriorityBlockingQueue
argument_list|<>
argument_list|(
operator|new
name|ElementComparator
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Element
index|[]
name|elements
init|=
operator|new
name|Element
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|elements
index|[
name|i
index|]
operator|=
operator|new
name|Element
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|2
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|3
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//0,1,2,3
name|queue
operator|.
name|setWaitQueueSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Not enough space left in the queue
name|e
operator|=
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|4
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|elements
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//1,2,3,4
name|e
operator|=
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|5
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|elements
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//2,3,4,5
comment|// With 2 more it should be enough space left
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|6
index|]
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//2,3,4,5,6
name|e
operator|=
name|queue
operator|.
name|take
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|elements
index|[
literal|6
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//Highest priority at this point should have come out.
comment|//2,3,4,5
name|e
operator|=
name|queue
operator|.
name|take
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|elements
index|[
literal|5
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//Highest priority at this point should have come out.
comment|//2,3,4
name|e
operator|=
name|queue
operator|.
name|take
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|elements
index|[
literal|4
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//Highest priority at this point should have come out.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//2,3
name|assertNull
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|7
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//2,3,7
name|e
operator|=
name|queue
operator|.
name|offer
argument_list|(
name|elements
index|[
literal|8
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|elements
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|//3,7,8
block|}
specifier|private
specifier|static
class|class
name|Element
block|{
specifier|public
name|Element
parameter_list|(
name|int
name|x
parameter_list|)
block|{
name|this
operator|.
name|x
operator|=
name|x
expr_stmt|;
block|}
name|int
name|x
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|o
decl_stmt|;
return|return
name|x
operator|==
name|element
operator|.
name|x
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|x
return|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|reinsertIfExists
parameter_list|(
name|EvictingPriorityBlockingQueue
argument_list|<
name|T
argument_list|>
name|queue
parameter_list|,
name|T
name|e
parameter_list|)
block|{
if|if
condition|(
name|queue
operator|.
name|remove
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|queue
operator|.
name|forceOffer
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
class|class
name|ElementComparator
implements|implements
name|Comparator
argument_list|<
name|Element
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Element
name|o1
parameter_list|,
name|Element
name|o2
parameter_list|)
block|{
return|return
name|o2
operator|.
name|x
operator|-
name|o1
operator|.
name|x
return|;
block|}
block|}
block|}
end_class

end_unit

