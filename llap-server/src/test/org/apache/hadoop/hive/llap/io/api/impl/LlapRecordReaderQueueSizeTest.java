begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_class
specifier|public
class|class
name|LlapRecordReaderQueueSizeTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|END_EXCLUSIVE
init|=
literal|300
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BUFFERED_SIZE
init|=
literal|1
operator|<<
literal|30
decl_stmt|;
comment|//1GB
annotation|@
name|Test
specifier|public
name|void
name|testMaxEqMin
parameter_list|()
block|{
name|int
name|expected
init|=
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxIsEnforced
parameter_list|()
block|{
name|TypeInfo
index|[]
name|cols
init|=
block|{
operator|new
name|DecimalTypeInfo
argument_list|()
block|}
decl_stmt|;
name|int
name|actual
init|=
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
name|cols
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinIsEnforced
parameter_list|()
block|{
name|TypeInfo
index|[]
name|cols
init|=
block|{
operator|new
name|DecimalTypeInfo
argument_list|()
block|}
decl_stmt|;
name|int
name|actual
init|=
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
name|cols
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderDecimal64VsFatDecimals
parameter_list|()
block|{
name|TypeInfo
index|[]
name|cols
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|300
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
operator|new
name|DecimalTypeInfo
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
name|TypeInfo
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|cols
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|75
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// the idea it to see an order of 10 when using fat Decimals
name|actual
operator|=
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|cols
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderDecimal64VsLong
parameter_list|()
block|{
name|TypeInfo
index|[]
name|decimalCols
init|=
name|ArrayOf
argument_list|(
parameter_list|()
lambda|->
operator|new
name|DecimalTypeInfo
argument_list|(
name|TypeDescription
operator|.
name|MAX_DECIMAL64_PRECISION
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|TypeInfo
index|[]
name|longCols
init|=
name|ArrayOf
argument_list|(
parameter_list|()
lambda|->
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|longCols
argument_list|,
literal|true
argument_list|)
argument_list|,
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|decimalCols
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringsColumns
parameter_list|()
block|{
name|TypeInfo
index|[]
name|charsCols
init|=
name|ArrayOf
argument_list|(
parameter_list|()
lambda|->
name|TypeInfoFactory
operator|.
name|charTypeInfo
argument_list|)
decl_stmt|;
name|TypeInfo
index|[]
name|stringCols
init|=
name|ArrayOf
argument_list|(
parameter_list|()
lambda|->
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
name|TypeInfo
index|[]
name|binaryCols
init|=
name|ArrayOf
argument_list|(
parameter_list|()
lambda|->
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|stringCols
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|charsCols
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|binaryCols
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongColumns
parameter_list|()
block|{
name|TypeInfo
index|[]
name|longsCols
init|=
name|ArrayOf
argument_list|(
parameter_list|()
lambda|->
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
decl_stmt|;
name|TypeInfo
index|[]
name|intCols
init|=
name|ArrayOf
argument_list|(
parameter_list|()
lambda|->
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
decl_stmt|;
name|TypeInfo
index|[]
name|byteCols
init|=
name|ArrayOf
argument_list|(
parameter_list|()
lambda|->
name|TypeInfoFactory
operator|.
name|byteTypeInfo
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|75
argument_list|,
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|longsCols
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|75
argument_list|,
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|intCols
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|75
argument_list|,
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|byteCols
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampsColumns
parameter_list|()
block|{
name|TypeInfo
index|[]
name|tsCols
init|=
name|ArrayOf
argument_list|(
parameter_list|()
lambda|->
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
argument_list|)
decl_stmt|;
name|TypeInfo
index|[]
name|intervalCols
init|=
name|ArrayOf
argument_list|(
parameter_list|()
lambda|->
name|TypeInfoFactory
operator|.
name|intervalDayTimeTypeInfo
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|tsCols
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|LlapRecordReader
operator|.
name|determineQueueLimit
argument_list|(
name|MAX_BUFFERED_SIZE
argument_list|,
literal|10000
argument_list|,
literal|5
argument_list|,
name|intervalCols
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|TypeInfo
index|[]
name|ArrayOf
parameter_list|(
name|Supplier
argument_list|<
name|TypeInfo
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|END_EXCLUSIVE
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
name|supplier
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
name|TypeInfo
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
block|}
end_class

end_unit

