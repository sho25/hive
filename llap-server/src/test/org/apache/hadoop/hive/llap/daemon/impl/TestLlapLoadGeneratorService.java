begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Test to make sure that the LLAP nodes are able to start with the load generator.  */
end_comment

begin_class
specifier|public
class|class
name|TestLlapLoadGeneratorService
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLoadGeneratorStops
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|UnknownHostException
block|{
name|LlapLoadGeneratorService
name|service
init|=
operator|new
name|LlapLoadGeneratorService
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEST_LOAD_HOSTNAMES
argument_list|,
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|",???"
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setFloatVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEST_LOAD_UTILIZATION
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEST_LOAD_INTERVAL
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|service
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The number of threads is not correct"
argument_list|,
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
argument_list|,
name|service
operator|.
name|threads
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|service
operator|.
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"The thread ["
operator|+
name|i
operator|+
literal|"] should be alive"
argument_list|,
name|service
operator|.
name|threads
index|[
name|i
index|]
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|service
operator|.
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|State
name|state
init|=
name|service
operator|.
name|threads
index|[
name|i
index|]
operator|.
name|getState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"The thread ["
operator|+
name|i
operator|+
literal|"] should be terminated"
argument_list|,
name|service
operator|.
name|threads
index|[
name|i
index|]
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testLoadGeneratorFails
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|UnknownHostException
block|{
name|LlapLoadGeneratorService
name|service
init|=
operator|new
name|LlapLoadGeneratorService
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEST_LOAD_HOSTNAMES
argument_list|,
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|",???"
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setFloatVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEST_LOAD_UTILIZATION
argument_list|,
literal|1.2f
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TEST_LOAD_INTERVAL
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|service
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

