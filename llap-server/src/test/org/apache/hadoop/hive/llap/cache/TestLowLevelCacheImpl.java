begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DataCache
operator|.
name|DiskRangeListFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRangeList
operator|.
name|CreateHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
operator|.
name|MemoryBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|LowLevelCache
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonCacheMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|encoded
operator|.
name|CacheChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestLowLevelCacheImpl
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLowLevelCacheImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DiskRangeListFactory
name|testFactory
init|=
operator|new
name|DiskRangeListFactory
argument_list|()
block|{
specifier|public
name|DiskRangeList
name|createCacheChunk
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|end
parameter_list|)
block|{
name|CacheChunk
name|cc
init|=
operator|new
name|CacheChunk
argument_list|()
decl_stmt|;
name|cc
operator|.
name|init
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
expr_stmt|;
return|return
name|cc
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
class|class
name|DummyAllocator
implements|implements
name|EvictionAwareAllocator
block|{
annotation|@
name|Override
specifier|public
name|void
name|allocateMultiple
parameter_list|(
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|size
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dest
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|LlapDataBuffer
name|buf
init|=
operator|new
name|LlapDataBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|dest
index|[
name|i
index|]
operator|=
name|buf
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deallocate
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|deallocateEvicted
parameter_list|(
name|MemoryBuffer
name|buffer
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|isDirectAlloc
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxAllocation
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|MemoryBuffer
name|createUnallocated
parameter_list|()
block|{
return|return
operator|new
name|LlapDataBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|allocateMultiple
parameter_list|(
name|MemoryBuffer
index|[]
name|dest
parameter_list|,
name|int
name|size
parameter_list|,
name|BufferObjectFactory
name|factory
parameter_list|)
throws|throws
name|AllocatorOutOfMemoryException
block|{
name|allocateMultiple
argument_list|(
name|dest
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DummyCachePolicy
implements|implements
name|LowLevelCachePolicy
block|{
specifier|public
name|DummyCachePolicy
parameter_list|()
block|{     }
specifier|public
name|void
name|cache
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|,
name|Priority
name|pri
parameter_list|)
block|{     }
specifier|public
name|void
name|notifyLock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{     }
specifier|public
name|void
name|notifyUnlock
parameter_list|(
name|LlapCacheableBuffer
name|buffer
parameter_list|)
block|{     }
specifier|public
name|long
name|evictSomeBlocks
parameter_list|(
name|long
name|memoryToReserve
parameter_list|)
block|{
return|return
name|memoryToReserve
return|;
block|}
specifier|public
name|void
name|setEvictionListener
parameter_list|(
name|EvictionListener
name|listener
parameter_list|)
block|{     }
specifier|public
name|String
name|debugDumpForOom
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
specifier|public
name|void
name|setParentDebugDumper
parameter_list|(
name|LlapOomDebugDump
name|dumper
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|debugDumpShort
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{     }
block|}
comment|/* Example code to test specific scenarios:     LowLevelCacheImpl cache = new LowLevelCacheImpl(         LlapDaemonCacheMetrics.create("test", "1"), new DummyCachePolicy(),         new DummyAllocator(), true, -1); // no cleanup thread     final int FILE = 1;     cache.putFileData(FILE, gaps(3756206, 4261729, 7294767, 7547564), fbs(3), 0, Priority.NORMAL, null);     cache.putFileData(FILE, gaps(7790545, 11051556), fbs(1), 0, Priority.NORMAL, null);     cache.putFileData(FILE, gaps(11864971, 11912961, 13350968, 13393630), fbs(3), 0, Priority.NORMAL, null);     DiskRangeList dr = dr(3756206, 7313562);     MutateHelper mh = new MutateHelper(dr);     dr = dr.insertAfter(dr(7790545, 11051556));     dr = dr.insertAfter(dr(11864971, 13393630));     BooleanRef g = new BooleanRef();     dr = cache.getFileData(FILE, mh.next, 0, testFactory, null, g); */
annotation|@
name|Test
specifier|public
name|void
name|testGetPut
parameter_list|()
block|{
name|LowLevelCacheImpl
name|cache
init|=
operator|new
name|LowLevelCacheImpl
argument_list|(
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|DummyCachePolicy
argument_list|()
argument_list|,
operator|new
name|DummyAllocator
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// no cleanup thread
name|long
name|fn1
init|=
literal|1
decl_stmt|,
name|fn2
init|=
literal|2
decl_stmt|;
name|MemoryBuffer
index|[]
name|fakes
init|=
operator|new
name|MemoryBuffer
index|[]
block|{
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|}
decl_stmt|;
name|verifyRefcount
argument_list|(
name|fakes
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|putFileData
argument_list|(
name|fn1
argument_list|,
name|drs
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|fbs
argument_list|(
name|fakes
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|putFileData
argument_list|(
name|fn2
argument_list|,
name|drs
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|fbs
argument_list|(
name|fakes
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|,
name|fakes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|fakes
index|[
literal|2
index|]
argument_list|,
name|fakes
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
name|fakes
index|[
literal|1
index|]
argument_list|,
name|dr
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRefcount
argument_list|(
name|fakes
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MemoryBuffer
index|[]
name|bufsDiff
init|=
name|fbs
argument_list|(
name|fakes
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|mask
init|=
name|cache
operator|.
name|putFileData
argument_list|(
name|fn1
argument_list|,
name|drs
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|bufsDiff
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mask
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mask
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// 2nd bit set - element 2 was already in cache.
name|assertSame
argument_list|(
name|fakes
index|[
literal|0
index|]
argument_list|,
name|bufsDiff
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Should have been replaced
name|verifyRefcount
argument_list|(
name|fakes
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn1
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|,
name|fakes
index|[
literal|1
index|]
argument_list|,
name|fakes
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|verifyRefcount
argument_list|(
name|fakes
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyCacheGet
parameter_list|(
name|LowLevelCacheImpl
name|cache
parameter_list|,
name|long
name|fileId
parameter_list|,
name|Object
modifier|...
name|stuff
parameter_list|)
block|{
name|CreateHelper
name|list
init|=
operator|new
name|CreateHelper
argument_list|()
decl_stmt|;
name|DiskRangeList
name|iter
init|=
literal|null
decl_stmt|;
name|int
name|intCount
init|=
literal|0
decl_stmt|,
name|lastInt
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|resultCount
init|=
name|stuff
operator|.
name|length
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|stuff
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Integer
condition|)
block|{
operator|--
name|resultCount
expr_stmt|;
name|assertTrue
argument_list|(
name|intCount
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|intCount
operator|==
literal|0
condition|)
block|{
name|lastInt
operator|=
operator|(
name|Integer
operator|)
name|obj
expr_stmt|;
name|intCount
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|addOrMerge
argument_list|(
name|lastInt
argument_list|,
operator|(
name|Integer
operator|)
name|obj
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|intCount
operator|=
literal|0
expr_stmt|;
block|}
continue|continue;
block|}
elseif|else
if|if
condition|(
name|intCount
operator|>=
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|intCount
operator|==
literal|0
argument_list|)
expr_stmt|;
name|intCount
operator|=
operator|-
literal|1
expr_stmt|;
name|iter
operator|=
name|cache
operator|.
name|getFileData
argument_list|(
name|fileId
argument_list|,
name|list
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|testFactory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|resultCount
argument_list|,
name|iter
operator|.
name|listSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|iter
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|MemoryBuffer
condition|)
block|{
name|assertTrue
argument_list|(
name|iter
operator|instanceof
name|CacheChunk
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|obj
argument_list|,
operator|(
operator|(
name|CacheChunk
operator|)
name|iter
operator|)
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|iter
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iter
operator|=
name|iter
operator|.
name|next
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiMatch
parameter_list|()
block|{
name|LowLevelCacheImpl
name|cache
init|=
operator|new
name|LowLevelCacheImpl
argument_list|(
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|DummyCachePolicy
argument_list|()
argument_list|,
operator|new
name|DummyAllocator
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// no cleanup thread
name|long
name|fn
init|=
literal|1
decl_stmt|;
name|MemoryBuffer
index|[]
name|fakes
init|=
operator|new
name|MemoryBuffer
index|[]
block|{
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|}
decl_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|putFileData
argument_list|(
name|fn
argument_list|,
operator|new
name|DiskRange
index|[]
block|{
name|dr
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
block|,
name|dr
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
block|}
argument_list|,
name|fakes
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
name|dr
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|,
name|dr
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|,
name|fakes
index|[
literal|1
index|]
argument_list|,
name|dr
argument_list|(
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|,
name|dr
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|,
name|fakes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
name|dr
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|,
name|dr
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|dr
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
name|dr
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// We don't expect cache requests from the middle.
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|,
name|dr
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|,
name|fakes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|,
name|dr
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|dr
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|,
name|fakes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiMatchNonGranular
parameter_list|()
block|{
name|LowLevelCacheImpl
name|cache
init|=
operator|new
name|LowLevelCacheImpl
argument_list|(
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|DummyCachePolicy
argument_list|()
argument_list|,
operator|new
name|DummyAllocator
argument_list|()
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// no cleanup thread
name|long
name|fn
init|=
literal|1
decl_stmt|;
name|MemoryBuffer
index|[]
name|fakes
init|=
operator|new
name|MemoryBuffer
index|[]
block|{
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|}
decl_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|putFileData
argument_list|(
name|fn
argument_list|,
operator|new
name|DiskRange
index|[]
block|{
name|dr
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
block|,
name|dr
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
block|}
argument_list|,
name|fakes
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// We expect cache requests from the middle here
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|,
name|dr
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
argument_list|,
name|fakes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStaleValueGet
parameter_list|()
block|{
name|LowLevelCacheImpl
name|cache
init|=
operator|new
name|LowLevelCacheImpl
argument_list|(
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|DummyCachePolicy
argument_list|()
argument_list|,
operator|new
name|DummyAllocator
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// no cleanup thread
name|long
name|fn1
init|=
literal|1
decl_stmt|,
name|fn2
init|=
literal|2
decl_stmt|;
name|MemoryBuffer
index|[]
name|fakes
init|=
operator|new
name|MemoryBuffer
index|[]
block|{
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|}
decl_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|putFileData
argument_list|(
name|fn1
argument_list|,
name|drs
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|fbs
argument_list|(
name|fakes
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|putFileData
argument_list|(
name|fn2
argument_list|,
name|drs
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fbs
argument_list|(
name|fakes
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|,
name|fakes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|fakes
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|verifyRefcount
argument_list|(
name|fakes
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|evict
argument_list|(
name|cache
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|evict
argument_list|(
name|cache
argument_list|,
name|fakes
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|dr
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|fakes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|dr
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRefcount
argument_list|(
name|fakes
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStaleValueReplace
parameter_list|()
block|{
name|LowLevelCacheImpl
name|cache
init|=
operator|new
name|LowLevelCacheImpl
argument_list|(
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|DummyCachePolicy
argument_list|()
argument_list|,
operator|new
name|DummyAllocator
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// no cleanup thread
name|long
name|fn1
init|=
literal|1
decl_stmt|,
name|fn2
init|=
literal|2
decl_stmt|;
name|MemoryBuffer
index|[]
name|fakes
init|=
operator|new
name|MemoryBuffer
index|[]
block|{
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|}
decl_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|putFileData
argument_list|(
name|fn1
argument_list|,
name|drs
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|fbs
argument_list|(
name|fakes
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|putFileData
argument_list|(
name|fn2
argument_list|,
name|drs
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fbs
argument_list|(
name|fakes
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|evict
argument_list|(
name|cache
argument_list|,
name|fakes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|evict
argument_list|(
name|cache
argument_list|,
name|fakes
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|long
index|[]
name|mask
init|=
name|cache
operator|.
name|putFileData
argument_list|(
name|fn1
argument_list|,
name|drs
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|fbs
argument_list|(
name|fakes
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mask
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|mask
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Buffers at offset 2& 3 exist; 1 exists and is stale; 4 doesn't
name|assertNull
argument_list|(
name|cache
operator|.
name|putFileData
argument_list|(
name|fn2
argument_list|,
name|drs
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fbs
argument_list|(
name|fakes
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCacheGet
argument_list|(
name|cache
argument_list|,
name|fn1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
name|fakes
index|[
literal|4
index|]
argument_list|,
name|fakes
index|[
literal|1
index|]
argument_list|,
name|fakes
index|[
literal|2
index|]
argument_list|,
name|fakes
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheMetrics
parameter_list|()
block|{
name|CreateHelper
name|list
init|=
operator|new
name|CreateHelper
argument_list|()
decl_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|300
argument_list|,
literal|400
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|400
argument_list|,
literal|500
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|get
argument_list|()
operator|.
name|listSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|list
operator|.
name|get
argument_list|()
operator|.
name|getTotalLength
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|CreateHelper
argument_list|()
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|300
argument_list|,
literal|400
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|400
argument_list|,
literal|500
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|list
operator|.
name|get
argument_list|()
operator|.
name|listSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|list
operator|.
name|get
argument_list|()
operator|.
name|getTotalLength
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|CreateHelper
argument_list|()
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|300
argument_list|,
literal|400
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|400
argument_list|,
literal|500
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|get
argument_list|()
operator|.
name|listSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|list
operator|.
name|get
argument_list|()
operator|.
name|getTotalLength
argument_list|()
argument_list|)
expr_stmt|;
name|LlapDaemonCacheMetrics
name|metrics
init|=
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|LowLevelCacheImpl
name|cache
init|=
operator|new
name|LowLevelCacheImpl
argument_list|(
name|metrics
argument_list|,
operator|new
name|DummyCachePolicy
argument_list|()
argument_list|,
operator|new
name|DummyAllocator
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// no cleanup thread
name|long
name|fn
init|=
literal|1
decl_stmt|;
name|MemoryBuffer
index|[]
name|fakes
init|=
operator|new
name|MemoryBuffer
index|[]
block|{
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|,
name|fb
argument_list|()
block|}
decl_stmt|;
name|cache
operator|.
name|putFileData
argument_list|(
name|fn
argument_list|,
operator|new
name|DiskRange
index|[]
block|{
name|dr
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
block|,
name|dr
argument_list|(
literal|300
argument_list|,
literal|500
argument_list|)
block|,
name|dr
argument_list|(
literal|800
argument_list|,
literal|1000
argument_list|)
block|}
argument_list|,
name|fakes
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getCacheRequestedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getCacheHitBytes
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|CreateHelper
argument_list|()
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getFileData
argument_list|(
name|fn
argument_list|,
name|list
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|testFactory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|metrics
operator|.
name|getCacheRequestedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|metrics
operator|.
name|getCacheHitBytes
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|CreateHelper
argument_list|()
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getFileData
argument_list|(
name|fn
argument_list|,
name|list
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|testFactory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1100
argument_list|,
name|metrics
operator|.
name|getCacheRequestedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|600
argument_list|,
name|metrics
operator|.
name|getCacheHitBytes
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|CreateHelper
argument_list|()
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|300
argument_list|,
literal|500
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|800
argument_list|,
literal|1000
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getFileData
argument_list|(
name|fn
argument_list|,
name|list
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|testFactory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1600
argument_list|,
name|metrics
operator|.
name|getCacheRequestedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1100
argument_list|,
name|metrics
operator|.
name|getCacheHitBytes
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
operator|new
name|CreateHelper
argument_list|()
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|300
argument_list|,
literal|500
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|list
operator|.
name|addOrMerge
argument_list|(
literal|1000
argument_list|,
literal|2000
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getFileData
argument_list|(
name|fn
argument_list|,
name|list
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|testFactory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2800
argument_list|,
name|metrics
operator|.
name|getCacheRequestedBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1300
argument_list|,
name|metrics
operator|.
name|getCacheHitBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMTTWithCleanup
parameter_list|()
block|{
specifier|final
name|LowLevelCacheImpl
name|cache
init|=
operator|new
name|LowLevelCacheImpl
argument_list|(
name|LlapDaemonCacheMetrics
operator|.
name|create
argument_list|(
literal|"test"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
operator|new
name|DummyCachePolicy
argument_list|()
argument_list|,
operator|new
name|DummyAllocator
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|long
name|fn1
init|=
literal|1
decl_stmt|,
name|fn2
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|offsetsToUse
init|=
literal|8
decl_stmt|;
specifier|final
name|CountDownLatch
name|cdlIn
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|4
argument_list|)
decl_stmt|,
name|cdlOut
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|rdmsDone
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Callable
argument_list|<
name|Long
argument_list|>
name|rdmCall
init|=
operator|new
name|Callable
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
specifier|public
name|Long
name|call
parameter_list|()
block|{
name|int
name|gets
init|=
literal|0
decl_stmt|,
name|puts
init|=
literal|0
decl_stmt|;
try|try
block|{
name|Random
name|rdm
init|=
operator|new
name|Random
argument_list|(
literal|1234
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|syncThreadStart
argument_list|(
name|cdlIn
argument_list|,
name|cdlOut
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20000
condition|;
operator|++
name|i
control|)
block|{
name|boolean
name|isGet
init|=
name|rdm
operator|.
name|nextBoolean
argument_list|()
decl_stmt|,
name|isFn1
init|=
name|rdm
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|long
name|fileName
init|=
name|isFn1
condition|?
name|fn1
else|:
name|fn2
decl_stmt|;
name|int
name|fileIndex
init|=
name|isFn1
condition|?
literal|1
else|:
literal|2
decl_stmt|;
name|int
name|count
init|=
name|rdm
operator|.
name|nextInt
argument_list|(
name|offsetsToUse
argument_list|)
decl_stmt|;
if|if
condition|(
name|isGet
condition|)
block|{
name|int
index|[]
name|offsets
init|=
operator|new
name|int
index|[
name|count
index|]
decl_stmt|;
name|count
operator|=
name|generateOffsets
argument_list|(
name|offsetsToUse
argument_list|,
name|rdm
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
name|CreateHelper
name|list
init|=
operator|new
name|CreateHelper
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|list
operator|.
name|addOrMerge
argument_list|(
name|offsets
index|[
name|j
index|]
argument_list|,
name|offsets
index|[
name|j
index|]
operator|+
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|DiskRangeList
name|iter
init|=
name|cache
operator|.
name|getFileData
argument_list|(
name|fileName
argument_list|,
name|list
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|testFactory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|j
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|iter
operator|!=
literal|null
condition|)
block|{
operator|++
name|j
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|iter
operator|instanceof
name|CacheChunk
operator|)
condition|)
block|{
name|iter
operator|=
name|iter
operator|.
name|next
expr_stmt|;
continue|continue;
block|}
operator|++
name|gets
expr_stmt|;
name|LlapAllocatorBuffer
name|result
init|=
call|(
name|LlapAllocatorBuffer
call|)
argument_list|(
operator|(
name|CacheChunk
operator|)
name|iter
argument_list|)
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|makeFakeArenaIndex
argument_list|(
name|fileIndex
argument_list|,
name|offsets
index|[
name|j
index|]
argument_list|)
argument_list|,
name|result
operator|.
name|getArenaIndex
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|decRefBuffer
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iter
operator|=
name|iter
operator|.
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
name|DiskRange
index|[]
name|ranges
init|=
operator|new
name|DiskRange
index|[
name|count
index|]
decl_stmt|;
name|int
index|[]
name|offsets
init|=
operator|new
name|int
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
operator|++
name|j
control|)
block|{
name|int
name|next
init|=
name|rdm
operator|.
name|nextInt
argument_list|(
name|offsetsToUse
argument_list|)
decl_stmt|;
name|ranges
index|[
name|j
index|]
operator|=
name|dr
argument_list|(
name|next
argument_list|,
name|next
operator|+
literal|1
argument_list|)
expr_stmt|;
name|offsets
index|[
name|j
index|]
operator|=
name|next
expr_stmt|;
block|}
name|MemoryBuffer
index|[]
name|buffers
init|=
operator|new
name|MemoryBuffer
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|offsets
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|LlapDataBuffer
name|buf
init|=
name|LowLevelCacheImpl
operator|.
name|allocateFake
argument_list|()
decl_stmt|;
name|buf
operator|.
name|setNewAllocLocation
argument_list|(
name|makeFakeArenaIndex
argument_list|(
name|fileIndex
argument_list|,
name|offsets
index|[
name|j
index|]
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|buffers
index|[
name|j
index|]
operator|=
name|buf
expr_stmt|;
block|}
name|long
index|[]
name|mask
init|=
name|cache
operator|.
name|putFileData
argument_list|(
name|fileName
argument_list|,
name|ranges
argument_list|,
name|buffers
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|NORMAL
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|puts
operator|+=
name|buffers
operator|.
name|length
expr_stmt|;
name|long
name|maskVal
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mask
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mask
operator|.
name|length
argument_list|)
expr_stmt|;
name|maskVal
operator|=
name|mask
index|[
literal|0
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|offsets
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|LlapDataBuffer
name|buf
init|=
call|(
name|LlapDataBuffer
call|)
argument_list|(
name|buffers
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|maskVal
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|makeFakeArenaIndex
argument_list|(
name|fileIndex
argument_list|,
name|offsets
index|[
name|j
index|]
argument_list|)
argument_list|,
name|buf
operator|.
name|getArenaIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|maskVal
operator|>>=
literal|1
expr_stmt|;
name|cache
operator|.
name|decRefBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|rdmsDone
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
operator|(
operator|(
name|long
operator|)
name|gets
operator|)
operator|<<
literal|32
operator|)
operator||
name|puts
return|;
block|}
specifier|private
name|int
name|makeFakeArenaIndex
parameter_list|(
name|int
name|fileIndex
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|fileIndex
operator|<<
literal|12
operator|)
operator|+
name|offset
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|FutureTask
argument_list|<
name|Integer
argument_list|>
name|evictionTask
init|=
operator|new
name|FutureTask
argument_list|<
name|Integer
argument_list|>
argument_list|(
operator|new
name|Callable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|call
parameter_list|()
block|{
name|boolean
name|isFirstFile
init|=
literal|false
decl_stmt|;
name|Random
name|rdm
init|=
operator|new
name|Random
argument_list|(
literal|1234
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|evictions
init|=
literal|0
decl_stmt|;
name|syncThreadStart
argument_list|(
name|cdlIn
argument_list|,
name|cdlOut
argument_list|)
expr_stmt|;
while|while
condition|(
name|rdmsDone
operator|.
name|get
argument_list|()
operator|<
literal|3
condition|)
block|{
name|DiskRangeList
name|head
init|=
operator|new
name|DiskRangeList
argument_list|(
literal|0
argument_list|,
name|offsetsToUse
operator|+
literal|1
argument_list|)
decl_stmt|;
name|isFirstFile
operator|=
operator|!
name|isFirstFile
expr_stmt|;
name|long
name|fileId
init|=
name|isFirstFile
condition|?
name|fn1
else|:
name|fn2
decl_stmt|;
name|head
operator|=
name|cache
operator|.
name|getFileData
argument_list|(
name|fileId
argument_list|,
name|head
argument_list|,
literal|0
argument_list|,
name|testFactory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|DiskRange
index|[]
name|results
init|=
name|head
operator|.
name|listToArray
argument_list|()
decl_stmt|;
name|int
name|startIndex
init|=
name|rdm
operator|.
name|nextInt
argument_list|(
name|results
operator|.
name|length
argument_list|)
decl_stmt|,
name|index
init|=
name|startIndex
decl_stmt|;
name|LlapDataBuffer
name|victim
init|=
literal|null
decl_stmt|;
do|do
block|{
name|DiskRange
name|r
init|=
name|results
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CacheChunk
condition|)
block|{
name|LlapDataBuffer
name|result
init|=
call|(
name|LlapDataBuffer
call|)
argument_list|(
operator|(
name|CacheChunk
operator|)
name|r
argument_list|)
operator|.
name|getBuffer
argument_list|()
decl_stmt|;
name|cache
operator|.
name|decRefBuffer
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|victim
operator|==
literal|null
operator|&&
name|result
operator|.
name|invalidate
argument_list|()
operator|==
name|LlapCacheableBuffer
operator|.
name|INVALIDATE_OK
condition|)
block|{
operator|++
name|evictions
expr_stmt|;
name|victim
operator|=
name|result
expr_stmt|;
block|}
block|}
operator|++
name|index
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|results
operator|.
name|length
condition|)
name|index
operator|=
literal|0
expr_stmt|;
block|}
do|while
condition|(
name|index
operator|!=
name|startIndex
condition|)
do|;
if|if
condition|(
name|victim
operator|==
literal|null
condition|)
continue|continue;
name|cache
operator|.
name|notifyEvicted
argument_list|(
name|victim
argument_list|)
expr_stmt|;
block|}
return|return
name|evictions
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|FutureTask
argument_list|<
name|Long
argument_list|>
name|rdmTask1
init|=
operator|new
name|FutureTask
argument_list|<
name|Long
argument_list|>
argument_list|(
name|rdmCall
argument_list|)
decl_stmt|,
name|rdmTask2
init|=
operator|new
name|FutureTask
argument_list|<
name|Long
argument_list|>
argument_list|(
name|rdmCall
argument_list|)
decl_stmt|,
name|rdmTask3
init|=
operator|new
name|FutureTask
argument_list|<
name|Long
argument_list|>
argument_list|(
name|rdmCall
argument_list|)
decl_stmt|;
name|Executor
name|threadPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|threadPool
operator|.
name|execute
argument_list|(
name|rdmTask1
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|execute
argument_list|(
name|rdmTask2
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|execute
argument_list|(
name|rdmTask3
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|execute
argument_list|(
name|evictionTask
argument_list|)
expr_stmt|;
try|try
block|{
name|cdlIn
operator|.
name|await
argument_list|()
expr_stmt|;
name|cdlOut
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|long
name|result1
init|=
name|rdmTask1
operator|.
name|get
argument_list|()
decl_stmt|,
name|result2
init|=
name|rdmTask2
operator|.
name|get
argument_list|()
decl_stmt|,
name|result3
init|=
name|rdmTask3
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|evictions
init|=
name|evictionTask
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MTT test: task 1: "
operator|+
name|descRdmTask
argument_list|(
name|result1
argument_list|)
operator|+
literal|", task 2: "
operator|+
name|descRdmTask
argument_list|(
name|result2
argument_list|)
operator|+
literal|", task 3: "
operator|+
name|descRdmTask
argument_list|(
name|result3
argument_list|)
operator|+
literal|"; "
operator|+
name|evictions
operator|+
literal|" evictions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|descRdmTask
parameter_list|(
name|long
name|result
parameter_list|)
block|{
return|return
operator|(
name|result
operator|>>>
literal|32
operator|)
operator|+
literal|" successful gets, "
operator|+
operator|(
name|result
operator|&
operator|(
operator|(
literal|1L
operator|<<
literal|32
operator|)
operator|-
literal|1
operator|)
operator|)
operator|+
literal|" puts"
return|;
block|}
specifier|private
name|void
name|syncThreadStart
parameter_list|(
specifier|final
name|CountDownLatch
name|cdlIn
parameter_list|,
specifier|final
name|CountDownLatch
name|cdlOut
parameter_list|)
block|{
name|cdlIn
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|cdlOut
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|evict
parameter_list|(
name|LowLevelCacheImpl
name|cache
parameter_list|,
name|MemoryBuffer
name|fake
parameter_list|)
block|{
name|LlapDataBuffer
name|victimBuffer
init|=
operator|(
name|LlapDataBuffer
operator|)
name|fake
decl_stmt|;
name|int
name|refCount
init|=
name|victimBuffer
operator|.
name|getRefCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|refCount
condition|;
operator|++
name|i
control|)
block|{
name|victimBuffer
operator|.
name|decRef
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|LlapCacheableBuffer
operator|.
name|INVALIDATE_OK
operator|==
name|victimBuffer
operator|.
name|invalidate
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|notifyEvicted
argument_list|(
name|victimBuffer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyRefcount
parameter_list|(
name|MemoryBuffer
index|[]
name|fakes
parameter_list|,
name|int
modifier|...
name|refCounts
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|refCounts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"At "
operator|+
name|i
argument_list|,
name|refCounts
index|[
name|i
index|]
argument_list|,
operator|(
operator|(
name|LlapDataBuffer
operator|)
name|fakes
index|[
name|i
index|]
operator|)
operator|.
name|getRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|MemoryBuffer
index|[]
name|fbs
parameter_list|(
name|MemoryBuffer
index|[]
name|fakes
parameter_list|,
name|int
modifier|...
name|indexes
parameter_list|)
block|{
name|MemoryBuffer
index|[]
name|rv
init|=
operator|new
name|MemoryBuffer
index|[
name|indexes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|rv
index|[
name|i
index|]
operator|=
operator|(
name|indexes
index|[
name|i
index|]
operator|==
operator|-
literal|1
operator|)
condition|?
literal|null
else|:
name|fakes
index|[
name|indexes
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
return|return
name|rv
return|;
block|}
specifier|private
name|MemoryBuffer
index|[]
name|fbs
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|MemoryBuffer
index|[]
name|rv
init|=
operator|new
name|MemoryBuffer
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|rv
index|[
name|i
index|]
operator|=
name|fb
argument_list|()
expr_stmt|;
block|}
return|return
name|rv
return|;
block|}
specifier|private
name|LlapDataBuffer
name|fb
parameter_list|()
block|{
name|LlapDataBuffer
name|fake
init|=
name|LowLevelCacheImpl
operator|.
name|allocateFake
argument_list|()
decl_stmt|;
name|fake
operator|.
name|incRef
argument_list|()
expr_stmt|;
return|return
name|fake
return|;
block|}
specifier|private
name|DiskRangeList
name|dr
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
return|return
operator|new
name|DiskRangeList
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
return|;
block|}
specifier|private
name|DiskRange
index|[]
name|drs
parameter_list|(
name|int
modifier|...
name|offsets
parameter_list|)
block|{
name|DiskRange
index|[]
name|result
init|=
operator|new
name|DiskRange
index|[
name|offsets
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsets
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|DiskRange
argument_list|(
name|offsets
index|[
name|i
index|]
argument_list|,
name|offsets
index|[
name|i
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|DiskRange
index|[]
name|gaps
parameter_list|(
name|int
modifier|...
name|offsets
parameter_list|)
block|{
name|DiskRange
index|[]
name|result
init|=
operator|new
name|DiskRange
index|[
name|offsets
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|new
name|DiskRange
argument_list|(
name|offsets
index|[
name|i
index|]
argument_list|,
name|offsets
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|int
name|generateOffsets
parameter_list|(
name|int
name|offsetsToUse
parameter_list|,
name|Random
name|rdm
parameter_list|,
name|int
index|[]
name|offsets
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|offsets
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|offsets
index|[
name|j
index|]
operator|=
name|rdm
operator|.
name|nextInt
argument_list|(
name|offsetsToUse
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|offsets
argument_list|)
expr_stmt|;
comment|// Values should unique (given how we do the checking and "addOrMerge")
name|int
name|check
init|=
literal|0
decl_stmt|,
name|insert
init|=
literal|0
decl_stmt|,
name|count
init|=
name|offsets
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|check
operator|<
operator|(
name|offsets
operator|.
name|length
operator|-
literal|1
operator|)
condition|)
block|{
if|if
condition|(
name|offsets
index|[
name|check
index|]
operator|==
name|offsets
index|[
name|check
operator|+
literal|1
index|]
condition|)
block|{
operator|--
name|insert
expr_stmt|;
operator|--
name|count
expr_stmt|;
block|}
name|offsets
index|[
operator|++
name|insert
index|]
operator|=
name|offsets
index|[
operator|++
name|check
index|]
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

