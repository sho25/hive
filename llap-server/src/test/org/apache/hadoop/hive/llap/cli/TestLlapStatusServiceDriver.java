begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|LlapStatusOptionsProcessor
operator|.
name|LlapStatusOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|LlapStatusServiceDriver
operator|.
name|ExitCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|LlapStatusServiceDriver
operator|.
name|LlapStatusCliException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|// TODO: write unit tests for the main logic of this class - needs refactoring first, current design isn't testable.
end_comment

begin_class
specifier|public
class|class
name|TestLlapStatusServiceDriver
block|{
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testArgumentParsingDefault
parameter_list|()
throws|throws
name|LlapStatusCliException
block|{
name|LlapStatusServiceDriver
name|driver
init|=
operator|new
name|LlapStatusServiceDriver
argument_list|()
decl_stmt|;
name|LlapStatusOptions
name|parseOptions
init|=
name|driver
operator|.
name|parseOptions
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"findAppTimeout should be the default value if not specified otherwise"
argument_list|,
name|parseOptions
operator|.
name|getFindAppTimeoutMs
argument_list|()
argument_list|,
name|LlapStatusOptionsProcessor
operator|.
name|FIND_YARN_APP_TIMEOUT_MS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"refreshInterval should be the default value if not specified otherwise"
argument_list|,
name|parseOptions
operator|.
name|getRefreshIntervalMs
argument_list|()
argument_list|,
name|LlapStatusOptionsProcessor
operator|.
name|DEFAULT_STATUS_REFRESH_INTERVAL_MS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"watchTimeout should be the default value if not specified otherwise"
argument_list|,
name|parseOptions
operator|.
name|getWatchTimeoutMs
argument_list|()
argument_list|,
name|LlapStatusOptionsProcessor
operator|.
name|DEFAULT_WATCH_MODE_TIMEOUT_MS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"runningNodesThreshold should be the default value if not specified otherwise"
argument_list|,
name|parseOptions
operator|.
name|getRunningNodesThreshold
argument_list|()
argument_list|,
name|LlapStatusOptionsProcessor
operator|.
name|DEFAULT_RUNNING_NODES_THRESHOLD
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hiveConf should be empty properties if not specified otherwise"
argument_list|,
name|parseOptions
operator|.
name|getConf
argument_list|()
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"isLaunched should be the true if not specified otherwise"
argument_list|,
name|parseOptions
operator|.
name|isLaunched
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"watchMode should be the false if not specified otherwise"
argument_list|,
name|parseOptions
operator|.
name|isWatchMode
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNegativeRefreshInterval
parameter_list|()
throws|throws
name|LlapStatusCliException
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|LlapStatusCliException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
name|ExitCode
operator|.
name|INCORRECT_USAGE
operator|.
name|getInt
argument_list|()
operator|+
literal|": Incorrect usage"
argument_list|)
expr_stmt|;
name|LlapStatusServiceDriver
name|driver
init|=
operator|new
name|LlapStatusServiceDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|parseOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--refreshInterval -1"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNegativeWatchTimeout
parameter_list|()
throws|throws
name|LlapStatusCliException
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|LlapStatusCliException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
name|ExitCode
operator|.
name|INCORRECT_USAGE
operator|.
name|getInt
argument_list|()
operator|+
literal|": Incorrect usage"
argument_list|)
expr_stmt|;
name|LlapStatusServiceDriver
name|driver
init|=
operator|new
name|LlapStatusServiceDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|parseOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--watchTimeout -1"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNegativeRunningNodesThreshold
parameter_list|()
throws|throws
name|LlapStatusCliException
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|LlapStatusCliException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
name|ExitCode
operator|.
name|INCORRECT_USAGE
operator|.
name|getInt
argument_list|()
operator|+
literal|": Incorrect usage"
argument_list|)
expr_stmt|;
name|LlapStatusServiceDriver
name|driver
init|=
operator|new
name|LlapStatusServiceDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|parseOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--runningNodesThreshold -1"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRunningNodesThresholdOverOne
parameter_list|()
throws|throws
name|LlapStatusCliException
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|LlapStatusCliException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
name|ExitCode
operator|.
name|INCORRECT_USAGE
operator|.
name|getInt
argument_list|()
operator|+
literal|": Incorrect usage"
argument_list|)
expr_stmt|;
name|LlapStatusServiceDriver
name|driver
init|=
operator|new
name|LlapStatusServiceDriver
argument_list|()
decl_stmt|;
name|driver
operator|.
name|parseOptions
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--runningNodesThreshold 1.1"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

