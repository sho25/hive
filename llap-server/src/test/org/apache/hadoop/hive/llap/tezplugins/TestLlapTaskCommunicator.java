begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezTaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestLlapTaskCommunicator
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testEntityTracker1
parameter_list|()
block|{
name|LlapTaskCommunicator
operator|.
name|EntityTracker
name|entityTracker
init|=
operator|new
name|LlapTaskCommunicator
operator|.
name|EntityTracker
argument_list|()
decl_stmt|;
name|String
name|host1
init|=
literal|"host1"
decl_stmt|;
name|String
name|host2
init|=
literal|"host2"
decl_stmt|;
name|String
name|host3
init|=
literal|"host3"
decl_stmt|;
name|int
name|port
init|=
literal|1451
decl_stmt|;
comment|// Simple container registration and un-registration without any task attempt being involved.
name|ContainerId
name|containerId101
init|=
name|constructContainerId
argument_list|(
literal|101
argument_list|)
decl_stmt|;
name|entityTracker
operator|.
name|registerContainer
argument_list|(
name|containerId101
argument_list|,
name|host1
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|,
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId101
argument_list|)
argument_list|)
expr_stmt|;
name|entityTracker
operator|.
name|unregisterContainer
argument_list|(
name|containerId101
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getContainerAttemptMapForNode
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId101
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|nodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|attemptToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|containerToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Simple task registration and un-registration.
name|ContainerId
name|containerId1
init|=
name|constructContainerId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|taskAttemptId1
init|=
name|constructTaskAttemptId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|entityTracker
operator|.
name|registerTaskAttempt
argument_list|(
name|containerId1
argument_list|,
name|taskAttemptId1
argument_list|,
name|host1
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|,
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|,
name|entityTracker
operator|.
name|getNodeIdForTaskAttempt
argument_list|(
name|taskAttemptId1
argument_list|)
argument_list|)
expr_stmt|;
name|entityTracker
operator|.
name|unregisterTaskAttempt
argument_list|(
name|taskAttemptId1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getContainerAttemptMapForNode
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getNodeIdForTaskAttempt
argument_list|(
name|taskAttemptId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|nodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|attemptToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|containerToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register taskAttempt, unregister container. TaskAttempt should also be unregistered
name|ContainerId
name|containerId201
init|=
name|constructContainerId
argument_list|(
literal|201
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|taskAttemptId201
init|=
name|constructTaskAttemptId
argument_list|(
literal|201
argument_list|)
decl_stmt|;
name|entityTracker
operator|.
name|registerTaskAttempt
argument_list|(
name|containerId201
argument_list|,
name|taskAttemptId201
argument_list|,
name|host1
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|,
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId201
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|,
name|entityTracker
operator|.
name|getNodeIdForTaskAttempt
argument_list|(
name|taskAttemptId201
argument_list|)
argument_list|)
expr_stmt|;
name|entityTracker
operator|.
name|unregisterContainer
argument_list|(
name|containerId201
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getContainerAttemptMapForNode
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId201
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getNodeIdForTaskAttempt
argument_list|(
name|taskAttemptId201
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|nodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|attemptToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|containerToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|entityTracker
operator|.
name|unregisterTaskAttempt
argument_list|(
name|taskAttemptId201
argument_list|)
expr_stmt|;
comment|// No errors
block|}
specifier|private
name|ContainerId
name|constructContainerId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|id
argument_list|)
operator|.
name|when
argument_list|(
name|containerId
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
operator|(
name|long
operator|)
name|id
argument_list|)
operator|.
name|when
argument_list|(
name|containerId
argument_list|)
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
return|return
name|containerId
return|;
block|}
specifier|private
name|TezTaskAttemptID
name|constructTaskAttemptId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|TezTaskAttemptID
name|taskAttemptId
init|=
name|mock
argument_list|(
name|TezTaskAttemptID
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|id
argument_list|)
operator|.
name|when
argument_list|(
name|taskAttemptId
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
return|return
name|taskAttemptId
return|;
block|}
block|}
end_class

end_unit

