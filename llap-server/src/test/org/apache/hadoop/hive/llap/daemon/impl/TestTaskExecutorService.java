begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorTestHelpers
operator|.
name|createMockRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorTestHelpers
operator|.
name|createSubmitWorkRequestProto
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorTestHelpers
operator|.
name|createTaskWrapper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorService
operator|.
name|TaskWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorTestHelpers
operator|.
name|MockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|comparator
operator|.
name|ShortestJobFirstComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|task
operator|.
name|TaskRunner2Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestTaskExecutorService
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testPreemptionQueueComparator
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|TaskWrapper
name|r1
init|=
name|createTaskWrapper
argument_list|(
name|createSubmitWorkRequestProto
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|TaskWrapper
name|r2
init|=
name|createTaskWrapper
argument_list|(
name|createSubmitWorkRequestProto
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|200
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|TaskWrapper
name|r3
init|=
name|createTaskWrapper
argument_list|(
name|createSubmitWorkRequestProto
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|,
literal|300
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|TaskWrapper
name|r4
init|=
name|createTaskWrapper
argument_list|(
name|createSubmitWorkRequestProto
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|400
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|BlockingQueue
argument_list|<
name|TaskWrapper
argument_list|>
name|queue
init|=
operator|new
name|PriorityBlockingQueue
argument_list|<>
argument_list|(
literal|4
argument_list|,
operator|new
name|TaskExecutorService
operator|.
name|PreemptionQueueComparator
argument_list|()
argument_list|)
decl_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|queue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|queue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|r3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|queue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|r4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|queue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r2
argument_list|,
name|queue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r3
argument_list|,
name|queue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r4
argument_list|,
name|queue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testFinishablePreeptsNonFinishable
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|MockRequest
name|r1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|5000l
argument_list|)
decl_stmt|;
name|MockRequest
name|r2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|,
literal|1000l
argument_list|)
decl_stmt|;
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|r1
operator|.
name|awaitStart
argument_list|()
expr_stmt|;
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|r2
operator|.
name|awaitStart
argument_list|()
expr_stmt|;
comment|// Verify r1 was preempted. Also verify that it finished (single executor), otherwise
comment|// r2 could have run anyway.
name|r1
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|r1
operator|.
name|wasPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r1
operator|.
name|hasFinished
argument_list|()
argument_list|)
expr_stmt|;
name|r2
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r2
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl1
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r1
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl2
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r2
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Ensure Data structures are updated in the main TaskScheduler
name|icl1
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
name|icl2
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|taskExecutorService
operator|.
name|shutDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testWaitQueuePreemption
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|MockRequest
name|r1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|,
literal|20000l
argument_list|)
decl_stmt|;
name|MockRequest
name|r2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|)
decl_stmt|;
name|MockRequest
name|r3
init|=
name|createMockRequest
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|300
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|)
decl_stmt|;
name|MockRequest
name|r4
init|=
name|createMockRequest
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|400
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|)
decl_stmt|;
name|MockRequest
name|r5
init|=
name|createMockRequest
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|,
literal|true
argument_list|,
literal|20000l
argument_list|)
decl_stmt|;
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r1
argument_list|)
expr_stmt|;
comment|// TODO HIVE-11687. Remove the awaitStart once offer can handle (waitQueueSize + numFreeExecutionSlots)
comment|// This currently serves to allow the task to be removed from the waitQueue.
name|r1
operator|.
name|awaitStart
argument_list|()
expr_stmt|;
name|Scheduler
operator|.
name|SubmissionState
name|submissionState
init|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|REJECTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|EVICTED_OTHER
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
comment|// Ensure the correct task was preempted.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|r3
operator|.
name|wasPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl1
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r1
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Currently 3 known tasks. 1, 2, 5
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r1
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r2
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r5
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r1
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r1
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|icl1
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
comment|// Two known tasks left. r2 and r5. (r1 complete, r3 evicted, r4 rejected)
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r2
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r5
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r5
operator|.
name|awaitStart
argument_list|()
expr_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl5
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r5
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|r5
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r5
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|icl5
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
comment|// 1 Pending task which is not finishable
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r2
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r2
operator|.
name|awaitStart
argument_list|()
expr_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl2
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r2
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|r2
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r2
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|icl2
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
comment|// 0 Pending task which is not finishable
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|taskExecutorService
operator|.
name|shutDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TaskExecutorServiceForTest
extends|extends
name|TaskExecutorService
block|{
specifier|private
specifier|final
name|Lock
name|iclCreationLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Condition
argument_list|>
name|iclCreationConditions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|TaskExecutorServiceForTest
parameter_list|(
name|int
name|numExecutors
parameter_list|,
name|int
name|waitQueueSize
parameter_list|,
name|String
name|waitQueueComparatorClassName
parameter_list|,
name|boolean
name|enablePreemption
parameter_list|)
block|{
name|super
argument_list|(
name|numExecutors
argument_list|,
name|waitQueueSize
argument_list|,
name|waitQueueComparatorClassName
argument_list|,
name|enablePreemption
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|InternalCompletionListenerForTest
argument_list|>
name|completionListeners
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|InternalCompletionListener
name|createInternalCompletionListener
parameter_list|(
name|TaskWrapper
name|taskWrapper
parameter_list|)
block|{
name|iclCreationLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|InternalCompletionListenerForTest
name|icl
init|=
operator|new
name|InternalCompletionListenerForTest
argument_list|(
name|taskWrapper
argument_list|)
decl_stmt|;
name|completionListeners
operator|.
name|put
argument_list|(
name|taskWrapper
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|icl
argument_list|)
expr_stmt|;
name|Condition
name|condition
init|=
name|iclCreationConditions
operator|.
name|get
argument_list|(
name|taskWrapper
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|condition
operator|==
literal|null
condition|)
block|{
name|condition
operator|=
name|iclCreationLock
operator|.
name|newCondition
argument_list|()
expr_stmt|;
name|iclCreationConditions
operator|.
name|put
argument_list|(
name|taskWrapper
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
name|condition
operator|.
name|signalAll
argument_list|()
expr_stmt|;
return|return
name|icl
return|;
block|}
finally|finally
block|{
name|iclCreationLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|InternalCompletionListenerForTest
name|getInternalCompletionListenerForTest
parameter_list|(
name|String
name|requestId
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|iclCreationLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Condition
name|condition
init|=
name|iclCreationConditions
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
if|if
condition|(
name|condition
operator|==
literal|null
condition|)
block|{
name|condition
operator|=
name|iclCreationLock
operator|.
name|newCondition
argument_list|()
expr_stmt|;
name|iclCreationConditions
operator|.
name|put
argument_list|(
name|requestId
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|completionListeners
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|condition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
return|return
name|completionListeners
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iclCreationLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|InternalCompletionListenerForTest
extends|extends
name|TaskExecutorService
operator|.
name|InternalCompletionListener
block|{
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|completionCondition
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isComplete
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|InternalCompletionListenerForTest
parameter_list|(
name|TaskWrapper
name|taskWrapper
parameter_list|)
block|{
name|super
argument_list|(
name|taskWrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TaskRunner2Result
name|result
parameter_list|)
block|{
name|super
operator|.
name|onSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|markComplete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|super
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|markComplete
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|markComplete
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|isComplete
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|completionCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|awaitCompletion
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|isComplete
operator|.
name|get
argument_list|()
condition|)
block|{
name|completionCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

