begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorTestHelpers
operator|.
name|createMockRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorTestHelpers
operator|.
name|createSubmitWorkRequestProto
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorTestHelpers
operator|.
name|createTaskWrapper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
operator|.
name|initMocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|testhelpers
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|SchedulerFragmentCompletingListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorService
operator|.
name|TaskWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|TaskExecutorTestHelpers
operator|.
name|MockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|impl
operator|.
name|comparator
operator|.
name|ShortestJobFirstComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|task
operator|.
name|TaskRunner2Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_class
specifier|public
class|class
name|TestTaskExecutorService
block|{
annotation|@
name|Mock
specifier|private
name|LlapDaemonExecutorMetrics
name|mockMetrics
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testPreemptionQueueComparator
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|TaskWrapper
name|r1
init|=
name|createTaskWrapper
argument_list|(
name|createSubmitWorkRequestProto
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|TaskWrapper
name|r2
init|=
name|createTaskWrapper
argument_list|(
name|createSubmitWorkRequestProto
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|TaskWrapper
name|r3
init|=
name|createTaskWrapper
argument_list|(
name|createSubmitWorkRequestProto
argument_list|(
literal|3
argument_list|,
literal|6
argument_list|,
literal|300
argument_list|,
literal|400
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|TaskWrapper
name|r4
init|=
name|createTaskWrapper
argument_list|(
name|createSubmitWorkRequestProto
argument_list|(
literal|4
argument_list|,
literal|8
argument_list|,
literal|400
argument_list|,
literal|500
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|TaskWrapper
name|r5
init|=
name|createTaskWrapper
argument_list|(
name|createSubmitWorkRequestProto
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|TaskWrapper
name|r6
init|=
name|createTaskWrapper
argument_list|(
name|createSubmitWorkRequestProto
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|,
literal|400
argument_list|,
literal|500
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|BlockingQueue
argument_list|<
name|TaskWrapper
argument_list|>
name|queue
init|=
operator|new
name|PriorityBlockingQueue
argument_list|<>
argument_list|(
literal|6
argument_list|,
operator|new
name|TaskExecutorService
operator|.
name|PreemptionQueueComparator
argument_list|()
argument_list|)
decl_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|r6
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|r5
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|queue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|queue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|r3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|queue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|r4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r1
argument_list|,
name|queue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r2
argument_list|,
name|queue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r3
argument_list|,
name|queue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r4
argument_list|,
name|queue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r5
argument_list|,
name|queue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r6
argument_list|,
name|queue
operator|.
name|take
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestTaskExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testFinishablePreemptsNonFinishable
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|MockRequest
name|r1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|,
literal|50000000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|10000000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|testPreemptionHelper
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|r1
operator|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|,
literal|5000l
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|r2
operator|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|1000l
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPreemptionHelper
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// No preemption with ducks reversed.
name|r1
operator|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|,
literal|500l
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|r2
operator|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|1000l
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPreemptionHelper
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|//(timeout = 10000)
specifier|public
name|void
name|testDuckPreemptsNonDuck
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|MockRequest
name|r1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|5000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|,
literal|1000l
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|testPreemptionHelper
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|r1
operator|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|,
literal|5000l
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r2
operator|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|,
literal|1000l
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testPreemptionHelper
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testPreemptionHelper
parameter_list|(
name|MockRequest
name|r1
parameter_list|,
name|MockRequest
name|r2
parameter_list|,
name|boolean
name|isPreemted
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|awaitStartAndSchedulerRun
argument_list|(
name|r1
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|awaitStartAndSchedulerRun
argument_list|(
name|r2
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
comment|// Verify r1 was preempted. Also verify that it finished (single executor), otherwise
comment|// r2 could have run anyway.
name|r1
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|isPreemted
argument_list|,
name|r1
operator|.
name|wasPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r1
operator|.
name|hasFinished
argument_list|()
argument_list|)
expr_stmt|;
name|r2
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r2
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl1
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r1
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl2
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r2
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Ensure Data structures are updated in the main TaskScheduler
name|icl1
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
name|icl2
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|taskExecutorService
operator|.
name|shutDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testPreemptionStateOnTaskFlagChanges
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|MockRequest
name|r1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|2000000l
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|fragmentId
init|=
name|r1
operator|.
name|getRequestId
argument_list|()
decl_stmt|;
name|Scheduler
operator|.
name|SubmissionState
name|submissionState
init|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|awaitStartAndSchedulerRun
argument_list|(
name|r1
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|TaskWrapper
name|taskWrapper
init|=
name|taskExecutorService
operator|.
name|preemptionQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|taskWrapper
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskWrapper
operator|.
name|isInPreemptionQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now notify the executorService that the task has moved to finishable state.
name|r1
operator|.
name|setCanUpdateFinishable
argument_list|()
expr_stmt|;
name|taskWrapper
operator|.
name|finishableStateUpdated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TaskWrapper
name|taskWrapper2
init|=
name|taskExecutorService
operator|.
name|preemptionQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|taskWrapper2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskWrapper
operator|.
name|isInPreemptionQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// And got a duck.
name|boolean
name|result
init|=
name|taskExecutorService
operator|.
name|updateFragment
argument_list|(
name|fragmentId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|taskWrapper2
operator|=
name|taskExecutorService
operator|.
name|preemptionQueue
operator|.
name|peek
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|taskWrapper2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|taskWrapper
operator|.
name|isInPreemptionQueue
argument_list|()
argument_list|)
expr_stmt|;
name|r1
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r1
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
comment|// Now start with everything and test losing stuff.
name|fragmentId
operator|=
name|r2
operator|.
name|getRequestId
argument_list|()
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|awaitStartAndSchedulerRun
argument_list|(
name|r2
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|taskWrapper
operator|=
name|taskExecutorService
operator|.
name|preemptionQueue
operator|.
name|peek
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|taskWrapper
argument_list|)
expr_stmt|;
comment|// Lost the duck.
name|result
operator|=
name|taskExecutorService
operator|.
name|updateFragment
argument_list|(
name|fragmentId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|taskWrapper
operator|=
name|taskExecutorService
operator|.
name|preemptionQueue
operator|.
name|peek
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|taskWrapper
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskWrapper
operator|.
name|isInPreemptionQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Gained it again.
name|result
operator|=
name|taskExecutorService
operator|.
name|updateFragment
argument_list|(
name|fragmentId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|taskWrapper2
operator|=
name|taskExecutorService
operator|.
name|preemptionQueue
operator|.
name|peek
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|taskWrapper2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|taskWrapper
operator|.
name|isInPreemptionQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now lost a finishable state.
name|r2
operator|.
name|setCanUpdateFinishable
argument_list|()
expr_stmt|;
name|taskWrapper
operator|.
name|finishableStateUpdated
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|taskWrapper2
operator|=
name|taskExecutorService
operator|.
name|preemptionQueue
operator|.
name|peek
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|taskWrapper2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskWrapper
operator|.
name|isInPreemptionQueue
argument_list|()
argument_list|)
expr_stmt|;
name|r2
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r2
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|taskExecutorService
operator|.
name|shutDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Tests wait queue behaviour for fragments which have reported to the AM, but have not given up their executor slot.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testWaitQueueAcceptAfterAMTaskReport
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
comment|// Fourth is lower priority as a result of canFinish being set to false.
name|MockRequest
name|r1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|200
argument_list|,
literal|2000
argument_list|,
literal|true
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r3
init|=
name|createMockRequest
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|300
argument_list|,
literal|420
argument_list|,
literal|true
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r4
init|=
name|createMockRequest
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|400
argument_list|,
literal|510
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Scheduler
operator|.
name|SubmissionState
name|submissionState
decl_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|r1
operator|.
name|awaitStart
argument_list|()
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|REJECTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
comment|// Mark a fragment as completing, but don't actually complete it yet.
comment|// The wait queue should now have capacity to accept one more fragment.
name|taskExecutorService
operator|.
name|fragmentCompleting
argument_list|(
name|r1
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|SchedulerFragmentCompletingListener
operator|.
name|State
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|taskExecutorService
operator|.
name|waitQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|taskExecutorService
operator|.
name|completingFragmentMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|r1
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r1
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
comment|// r2 can only start once 1 fragment has completed. the map should be clear at this point.
name|awaitStartAndSchedulerRun
argument_list|(
name|r2
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskExecutorService
operator|.
name|completingFragmentMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|taskExecutorService
operator|.
name|shutDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testWaitQueuePreemption
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|MockRequest
name|r1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|200
argument_list|,
literal|330
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r3
init|=
name|createMockRequest
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|300
argument_list|,
literal|420
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r4
init|=
name|createMockRequest
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|400
argument_list|,
literal|510
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r5
init|=
name|createMockRequest
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|,
literal|610
argument_list|,
literal|true
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|testWaitQueuePreemptionHelper
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|r3
argument_list|,
name|r4
argument_list|,
name|r5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testWaitQueuePreemptionDucks
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// Throw in some canFinish variations just for fun.
name|MockRequest
name|r1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockRequest
name|r2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|200
argument_list|,
literal|330
argument_list|,
literal|true
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r3
init|=
name|createMockRequest
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|300
argument_list|,
literal|420
argument_list|,
literal|true
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r4
init|=
name|createMockRequest
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|400
argument_list|,
literal|510
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r5
init|=
name|createMockRequest
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|,
literal|610
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|testWaitQueuePreemptionHelper
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|r3
argument_list|,
name|r4
argument_list|,
name|r5
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testWaitQueuePreemptionHelper
parameter_list|(
name|MockRequest
name|r1
parameter_list|,
name|MockRequest
name|r2
parameter_list|,
name|MockRequest
name|r3
parameter_list|,
name|MockRequest
name|r4
parameter_list|,
name|MockRequest
name|r5
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r1
argument_list|)
expr_stmt|;
comment|// 1 scheduling run will happen, which may or may not pick up this task in the test..
name|awaitStartAndSchedulerRun
argument_list|(
name|r1
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|SubmissionState
name|submissionState
init|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|REJECTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|EVICTED_OTHER
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
comment|// Ensure the correct task was preempted.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|r3
operator|.
name|wasPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl1
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r1
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Currently 3 known tasks. 1, 2, 5
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r1
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r2
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r5
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r1
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r1
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|icl1
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
comment|// Two known tasks left. r2 and r5. (r1 complete, r3 evicted, r4 rejected)
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r2
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r5
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|awaitStartAndSchedulerRun
argument_list|(
name|r5
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl5
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r5
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|r5
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r5
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|icl5
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
comment|// 1 Pending task which is not finishable
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|containsKey
argument_list|(
name|r2
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|awaitStartAndSchedulerRun
argument_list|(
name|r2
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl2
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r2
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|r2
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r2
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|icl2
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
comment|// 0 Pending task which is not finishable
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskExecutorService
operator|.
name|knownTasks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|taskExecutorService
operator|.
name|shutDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testDontKillMultiple
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|MockRequest
name|victim1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|victim2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|runPreemptionGraceTest
argument_list|(
name|victim1
argument_list|,
name|victim2
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|victim1
operator|.
name|wasPreempted
argument_list|()
argument_list|,
name|victim2
operator|.
name|wasPreempted
argument_list|()
argument_list|)
expr_stmt|;
comment|// One and only one.
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testDoKillMultiple
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|MockRequest
name|victim1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|victim2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|runPreemptionGraceTest
argument_list|(
name|victim1
argument_list|,
name|victim2
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|victim1
operator|.
name|wasPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|victim2
operator|.
name|wasPreempted
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests if we can decrease and increase the TaskExecutorService capacity on an active service.    * Already submitted tasks will not be cancelled or rejected because of this change only if a new    * task is submitted with higher priority    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testSetCapacity
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
comment|// Fourth is lower priority as a result of canFinish being set to false.
name|MockRequest
name|r1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000L
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockRequest
name|r2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000L
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockRequest
name|r3
init|=
name|createMockRequest
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000L
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockRequest
name|r4
init|=
name|createMockRequest
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000L
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r5
init|=
name|createMockRequest
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000L
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r6
init|=
name|createMockRequest
argument_list|(
literal|6
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000L
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r7
init|=
name|createMockRequest
argument_list|(
literal|7
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000L
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r8
init|=
name|createMockRequest
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000L
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockRequest
name|r9
init|=
name|createMockRequest
argument_list|(
literal|9
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000L
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Scheduler
operator|.
name|SubmissionState
name|submissionState
decl_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl
decl_stmt|;
comment|// Schedule the first 4 tasks (2 to execute, 2 to the queue)
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
comment|// TaskExecutorService: Executing: r1, r2 + Queued: r3, r4
name|awaitStartAndSchedulerRun
argument_list|(
name|r1
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|awaitStartAndSchedulerRun
argument_list|(
name|r2
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
comment|// Check if the queue and the executing tasks are as expected
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|taskExecutorService
operator|.
name|waitQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskExecutorService
operator|.
name|numSlotsAvailable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the capacity
name|taskExecutorService
operator|.
name|setCapacity
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Check that the actual queue size is not changed, but the available executor size is changed
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|taskExecutorService
operator|.
name|waitQueue
operator|.
name|waitQueueSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|taskExecutorService
operator|.
name|maxParallelExecutors
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|taskExecutorService
operator|.
name|waitQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|taskExecutorService
operator|.
name|numSlotsAvailable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try to schedule one more task, it should be rejected now
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|REJECTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
comment|// TaskExecutorService: Executing: r1, r2 + Queued: r3, r4
comment|// Complete r1
name|r1
operator|.
name|awaitStart
argument_list|()
expr_stmt|;
name|r1
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r1
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|icl
operator|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r1
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|icl
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
comment|// TaskExecutorService: Executing: r2 + Queued: r3, r4
comment|// Check if it is really finished
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|taskExecutorService
operator|.
name|waitQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskExecutorService
operator|.
name|numSlotsAvailable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Complete r2
name|r2
operator|.
name|awaitStart
argument_list|()
expr_stmt|;
name|r2
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r2
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|icl
operator|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r2
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|icl
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
comment|// TaskExecutorService: Executing: r3 + Queued: r4
comment|// Wait for a scheduling attempt, after that wait queue should be reduced
name|awaitStartAndSchedulerRun
argument_list|(
name|r3
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|taskExecutorService
operator|.
name|waitQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskExecutorService
operator|.
name|numSlotsAvailable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try to schedule one more task, it still should be rejected
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|REJECTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
comment|// TaskExecutorService: Executing: r3 + Queued: r4
comment|// Complete r3
name|r3
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r3
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|icl
operator|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r3
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|icl
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
comment|// TaskExecutorService: Executing: r4 + Queued: -
comment|// Try to schedule one more task, it still should accepted finally
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r7
argument_list|)
expr_stmt|;
comment|// TaskExecutorService: Executing: r4 + Queued: r7
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
comment|// Change back the capacity
name|taskExecutorService
operator|.
name|setCapacity
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|taskExecutorService
operator|.
name|waitQueue
operator|.
name|waitQueueSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|taskExecutorService
operator|.
name|maxParallelExecutors
argument_list|)
expr_stmt|;
comment|// TaskExecutorService Executing: r4, r7 + Queued: -
comment|// Wait for a scheduling attempt, the new task should be started
name|awaitStartAndSchedulerRun
argument_list|(
name|r7
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskExecutorService
operator|.
name|waitQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskExecutorService
operator|.
name|numSlotsAvailable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
comment|// TaskExecutorService: Executing: r4, r7 + Queued: r8
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
comment|// TaskExecutorService: Executing: r4, r7 + Queued: r8, r9
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|taskExecutorService
operator|.
name|waitQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskExecutorService
operator|.
name|numSlotsAvailable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|taskExecutorService
operator|.
name|shutDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
specifier|public
name|void
name|testZeroCapacity
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
comment|// Fourth is lower priority as a result of canFinish being set to false.
name|MockRequest
name|r1
init|=
name|createMockRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000L
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockRequest
name|r2
init|=
name|createMockRequest
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|true
argument_list|,
literal|20000L
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Scheduler
operator|.
name|SubmissionState
name|submissionState
decl_stmt|;
comment|// Schedule the first 2 tasks (1 to execute, 1 to the queue)
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|submissionState
operator|=
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Scheduler
operator|.
name|SubmissionState
operator|.
name|ACCEPTED
argument_list|,
name|submissionState
argument_list|)
expr_stmt|;
name|awaitStartAndSchedulerRun
argument_list|(
name|r1
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|setCapacity
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// The queued task should be killed
name|assertTrue
argument_list|(
name|r2
operator|.
name|wasPreempted
argument_list|()
argument_list|)
expr_stmt|;
comment|// The already running should be able to finish
name|assertFalse
argument_list|(
name|r1
operator|.
name|wasPreempted
argument_list|()
argument_list|)
expr_stmt|;
name|r1
operator|.
name|complete
argument_list|()
expr_stmt|;
name|r1
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|r1
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|icl
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|taskExecutorService
operator|.
name|shutDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|,
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetCapacityHighExecutors
parameter_list|()
block|{
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|setCapacity
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|,
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetCapacityHighQueueSize
parameter_list|()
block|{
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|setCapacity
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|,
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetCapacityNegativeExecutors
parameter_list|()
block|{
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|setCapacity
argument_list|(
operator|-
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|,
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSetCapacityNegativeQueueSize
parameter_list|()
block|{
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|setCapacity
argument_list|(
literal|2
argument_list|,
operator|-
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
specifier|public
name|void
name|testCapacityMetricsInitial
parameter_list|()
block|{
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockMetrics
argument_list|)
operator|.
name|setNumExecutors
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockMetrics
argument_list|)
operator|.
name|setWaitQueueSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
specifier|public
name|void
name|testCapacityMetricsModification
parameter_list|()
block|{
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|2
argument_list|,
literal|10
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|)
decl_stmt|;
name|reset
argument_list|(
name|mockMetrics
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|setCapacity
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockMetrics
argument_list|)
operator|.
name|setNumExecutors
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockMetrics
argument_list|)
operator|.
name|setWaitQueueSize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runPreemptionGraceTest
parameter_list|(
name|MockRequest
name|victim1
parameter_list|,
name|MockRequest
name|victim2
parameter_list|,
name|int
name|time
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|MockRequest
name|preemptor
init|=
name|createMockRequest
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|,
literal|20000l
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|victim1
operator|.
name|setSleepAfterKill
argument_list|()
expr_stmt|;
name|victim2
operator|.
name|setSleepAfterKill
argument_list|()
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|(
operator|new
name|SystemClock
argument_list|()
argument_list|)
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TaskExecutorServiceForTest
name|taskExecutorService
init|=
operator|new
name|TaskExecutorServiceForTest
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
name|ShortestJobFirstComparator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|mockMetrics
argument_list|,
name|clock
argument_list|)
decl_stmt|;
name|taskExecutorService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|victim1
argument_list|)
expr_stmt|;
name|awaitStartAndSchedulerRun
argument_list|(
name|victim1
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|victim2
argument_list|)
expr_stmt|;
name|awaitStartAndSchedulerRun
argument_list|(
name|victim2
argument_list|,
name|taskExecutorService
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|schedule
argument_list|(
name|preemptor
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|waitForScheduleRuns
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// Wait for scheduling to run a few times.
name|clock
operator|.
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|taskExecutorService
operator|.
name|waitForScheduleRuns
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// Wait for scheduling to run a few times.
name|victim1
operator|.
name|unblockKill
argument_list|()
expr_stmt|;
name|victim2
operator|.
name|unblockKill
argument_list|()
expr_stmt|;
name|preemptor
operator|.
name|complete
argument_list|()
expr_stmt|;
name|preemptor
operator|.
name|awaitEnd
argument_list|()
expr_stmt|;
name|TaskExecutorServiceForTest
operator|.
name|InternalCompletionListenerForTest
name|icl3
init|=
name|taskExecutorService
operator|.
name|getInternalCompletionListenerForTest
argument_list|(
name|preemptor
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
name|icl3
operator|.
name|awaitCompletion
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|taskExecutorService
operator|.
name|shutDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|awaitStartAndSchedulerRun
parameter_list|(
name|MockRequest
name|mockRequest
parameter_list|,
name|TaskExecutorServiceForTest
name|taskExecutorServiceForTest
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|mockRequest
operator|.
name|awaitStart
argument_list|()
expr_stmt|;
name|taskExecutorServiceForTest
operator|.
name|awaitTryScheduleIfInProgress
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TaskExecutorServiceForTest
extends|extends
name|TaskExecutorService
block|{
specifier|private
specifier|final
name|Lock
name|iclCreationLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Condition
argument_list|>
name|iclCreationConditions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|tryScheduleLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|tryScheduleCondition
init|=
name|tryScheduleLock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isInTrySchedule
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|scheduleAttempts
init|=
literal|0
decl_stmt|;
specifier|public
name|TaskExecutorServiceForTest
parameter_list|(
name|int
name|numExecutors
parameter_list|,
name|int
name|waitQueueSize
parameter_list|,
name|String
name|waitQueueComparatorClassName
parameter_list|,
name|boolean
name|enablePreemption
parameter_list|,
name|LlapDaemonExecutorMetrics
name|metrics
parameter_list|)
block|{
name|this
argument_list|(
name|numExecutors
argument_list|,
name|waitQueueSize
argument_list|,
name|waitQueueComparatorClassName
argument_list|,
name|enablePreemption
argument_list|,
name|metrics
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TaskExecutorServiceForTest
parameter_list|(
name|int
name|numExecutors
parameter_list|,
name|int
name|waitQueueSize
parameter_list|,
name|String
name|waitQueueComparatorClassName
parameter_list|,
name|boolean
name|enablePreemption
parameter_list|,
name|LlapDaemonExecutorMetrics
name|metrics
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|super
argument_list|(
name|numExecutors
argument_list|,
name|waitQueueSize
argument_list|,
name|waitQueueComparatorClassName
argument_list|,
name|enablePreemption
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|,
name|metrics
argument_list|,
name|clock
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|InternalCompletionListenerForTest
argument_list|>
name|completionListeners
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|void
name|tryScheduleUnderLock
parameter_list|(
specifier|final
name|TaskWrapper
name|taskWrapper
parameter_list|)
throws|throws
name|RejectedExecutionException
block|{
name|tryScheduleLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|isInTrySchedule
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|tryScheduleUnderLock
argument_list|(
name|taskWrapper
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|isInTrySchedule
operator|=
literal|false
expr_stmt|;
operator|++
name|scheduleAttempts
expr_stmt|;
name|tryScheduleCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
name|tryScheduleLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|waitForScheduleRuns
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|tryScheduleLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|targetRuns
init|=
name|scheduleAttempts
operator|+
name|n
decl_stmt|;
while|while
condition|(
name|scheduleAttempts
operator|<
name|targetRuns
condition|)
block|{
name|tryScheduleCondition
operator|.
name|await
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tryScheduleLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|awaitTryScheduleIfInProgress
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|tryScheduleLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
name|isInTrySchedule
condition|)
block|{
name|tryScheduleCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tryScheduleLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|InternalCompletionListener
name|createInternalCompletionListener
parameter_list|(
name|TaskWrapper
name|taskWrapper
parameter_list|)
block|{
name|iclCreationLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|InternalCompletionListenerForTest
name|icl
init|=
operator|new
name|InternalCompletionListenerForTest
argument_list|(
name|taskWrapper
argument_list|)
decl_stmt|;
name|completionListeners
operator|.
name|put
argument_list|(
name|taskWrapper
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|icl
argument_list|)
expr_stmt|;
name|Condition
name|condition
init|=
name|iclCreationConditions
operator|.
name|get
argument_list|(
name|taskWrapper
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|condition
operator|==
literal|null
condition|)
block|{
name|condition
operator|=
name|iclCreationLock
operator|.
name|newCondition
argument_list|()
expr_stmt|;
name|iclCreationConditions
operator|.
name|put
argument_list|(
name|taskWrapper
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
name|condition
operator|.
name|signalAll
argument_list|()
expr_stmt|;
return|return
name|icl
return|;
block|}
finally|finally
block|{
name|iclCreationLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|InternalCompletionListenerForTest
name|getInternalCompletionListenerForTest
parameter_list|(
name|String
name|requestId
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|iclCreationLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Condition
name|condition
init|=
name|iclCreationConditions
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
if|if
condition|(
name|condition
operator|==
literal|null
condition|)
block|{
name|condition
operator|=
name|iclCreationLock
operator|.
name|newCondition
argument_list|()
expr_stmt|;
name|iclCreationConditions
operator|.
name|put
argument_list|(
name|requestId
argument_list|,
name|condition
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|completionListeners
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|condition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
return|return
name|completionListeners
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iclCreationLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|InternalCompletionListenerForTest
extends|extends
name|TaskExecutorService
operator|.
name|InternalCompletionListener
block|{
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|completionCondition
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isComplete
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|InternalCompletionListenerForTest
parameter_list|(
name|TaskWrapper
name|taskWrapper
parameter_list|)
block|{
name|super
argument_list|(
name|taskWrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TaskRunner2Result
name|result
parameter_list|)
block|{
name|super
operator|.
name|onSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|markComplete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|super
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|markComplete
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|markComplete
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|isComplete
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|completionCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|awaitCompletion
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|isComplete
operator|.
name|get
argument_list|()
condition|)
block|{
name|completionCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

