begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cli
operator|.
name|service
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration2
operator|.
name|ConfigurationConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|configuration2
operator|.
name|MapConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/** Tests for LlapServiceCommandLine. */
end_comment

begin_class
specifier|public
class|class
name|TestLlapServiceCommandLine
block|{
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testArgumentParsingEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|ParseException
operator|.
name|class
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expectMessage
argument_list|(
literal|"instance must be set"
argument_list|)
expr_stmt|;
operator|new
name|LlapServiceCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArgumentParsingDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|LlapServiceCommandLine
name|cl
init|=
operator|new
name|LlapServiceCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--instances"
block|,
literal|"1"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cl
operator|.
name|getAuxJars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|cl
operator|.
name|getCache
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|,
name|cl
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cl
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|cl
operator|.
name|getExecutors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|cl
operator|.
name|getIoThreads
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|cl
operator|.
name|getIsHBase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|cl
operator|.
name|getIsHiveAux
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cl
operator|.
name|getJavaPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cl
operator|.
name|getLlapQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cl
operator|.
name|getLogger
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cl
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|cl
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|cl
operator|.
name|getXmx
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|cl
operator|.
name|isStarting
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParsingArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|LlapServiceCommandLine
name|cl
init|=
operator|new
name|LlapServiceCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--instances"
block|,
literal|"2"
block|,
literal|"--auxjars"
block|,
literal|"auxjarsVal"
block|,
literal|"--cache"
block|,
literal|"10k"
block|,
literal|"--hiveconf"
block|,
literal|"a=b"
block|,
literal|"--directory"
block|,
literal|"directoryVal"
block|,
literal|"--executors"
block|,
literal|"4"
block|,
literal|"--iothreads"
block|,
literal|"5"
block|,
literal|"--auxhbase"
block|,
literal|"false"
block|,
literal|"--auxhive"
block|,
literal|"false"
block|,
literal|"--javaHome"
block|,
literal|"javaHomeVal"
block|,
literal|"--queue"
block|,
literal|"queueVal"
block|,
literal|"--logger"
block|,
literal|"console"
block|,
literal|"--name"
block|,
literal|"nameVal"
block|,
literal|"--output"
block|,
literal|"outputVal"
block|,
literal|"--size"
block|,
literal|"10m"
block|,
literal|"--xmx"
block|,
literal|"10g"
block|,
literal|"--startImmediately"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"auxjarsVal"
argument_list|,
name|cl
operator|.
name|getAuxJars
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
operator|*
literal|1024
argument_list|,
name|cl
operator|.
name|getCache
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ConfigurationConverter
operator|.
name|getProperties
argument_list|(
operator|new
name|MapConfiguration
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|cl
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"directoryVal"
argument_list|,
name|cl
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cl
operator|.
name|getExecutors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cl
operator|.
name|getIoThreads
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|cl
operator|.
name|getIsHBase
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|cl
operator|.
name|getIsHiveAux
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"javaHomeVal"
argument_list|,
name|cl
operator|.
name|getJavaPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queueVal"
argument_list|,
name|cl
operator|.
name|getLlapQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"console"
argument_list|,
name|cl
operator|.
name|getLogger
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nameVal"
argument_list|,
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"outputVal"
argument_list|,
name|cl
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
name|cl
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
name|cl
operator|.
name|getXmx
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|cl
operator|.
name|isStarting
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalLogger
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|LlapServiceCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--instances"
block|,
literal|"1"
block|,
literal|"--logger"
block|,
literal|"someValue"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalInstances
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|LlapServiceCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--instances"
block|,
literal|"a"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalCache
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|LlapServiceCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--instances"
block|,
literal|"1"
block|,
literal|"--cache"
block|,
literal|"a"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalExecutors
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|LlapServiceCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--instances"
block|,
literal|"1"
block|,
literal|"--executors"
block|,
literal|"a"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalIoThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|LlapServiceCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--instances"
block|,
literal|"1"
block|,
literal|"--iothreads"
block|,
literal|"a"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalSize
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|LlapServiceCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--instances"
block|,
literal|"1"
block|,
literal|"--size"
block|,
literal|"a"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalXmx
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
operator|new
name|LlapServiceCommandLine
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"--instances"
block|,
literal|"1"
block|,
literal|"--xmx"
block|,
literal|"a"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

