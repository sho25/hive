begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|rm
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|configuration
operator|.
name|LlapConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapFixedRegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|TezUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|UserPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|TaskAttemptEndReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|TaskSchedulerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestLlapTaskSchedulerService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLlapTaskSchedulerService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOST1
init|=
literal|"host1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOST2
init|=
literal|"host2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOST3
init|=
literal|"host3"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testSimpleLocalAllocation
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|Object
name|task1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hosts1
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO Verify this is on host1.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testSimpleNoLocalityAllocation
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Object
name|task1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
literal|null
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testPreemption
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Priority
name|priority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|task1
init|=
literal|"task1"
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|Object
name|task2
init|=
literal|"task2"
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|Object
name|task3
init|=
literal|"task3"
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|Object
name|task4
init|=
literal|"task4"
decl_stmt|;
name|Object
name|clientCookie4
init|=
literal|"cookie4"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hosts
argument_list|,
name|priority2
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hosts
argument_list|,
name|priority2
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hosts
argument_list|,
name|priority2
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
operator|==
literal|2
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task4
argument_list|,
name|hosts
argument_list|,
name|priority1
argument_list|,
name|clientCookie4
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numPreemptedTasks
operator|==
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task2
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|INTERNAL_PREEMPTION
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|3
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task4
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie4
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testNodeDisabled
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|10000l
argument_list|)
decl_stmt|;
try|try
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|Object
name|task1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hosts1
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numNonLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|resetAppCallback
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|clock
operator|.
name|setTime
argument_list|(
literal|10000l
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|rejectExecution
argument_list|(
name|task1
argument_list|)
expr_stmt|;
comment|// Verify that the node is blacklisted
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numRejectedTasks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|instanceToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LlapTaskSchedulerService
operator|.
name|NodeInfo
name|disabledNodeInfo
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|disabledNodesQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|disabledNodeInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HOST1
argument_list|,
name|disabledNodeInfo
operator|.
name|serviceInstance
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|10000l
operator|)
argument_list|,
name|disabledNodeInfo
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|10000l
operator|+
literal|10000l
operator|)
argument_list|,
name|disabledNodeInfo
operator|.
name|expireTimeMillis
argument_list|)
expr_stmt|;
name|Object
name|task2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hosts1
argument_list|,
name|priority1
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|2
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie2
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numNonLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testNodeReEnabled
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// Based on actual timing.
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|1000l
argument_list|)
decl_stmt|;
try|try
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|String
index|[]
name|hosts2
init|=
operator|new
name|String
index|[]
block|{
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hosts3
init|=
operator|new
name|String
index|[]
block|{
name|HOST3
block|}
decl_stmt|;
name|Object
name|task1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|task2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|task3
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|clientCookie3
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hosts1
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hosts2
argument_list|,
name|priority1
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hosts3
argument_list|,
name|priority1
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|3
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|resetAppCallback
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|rejectExecution
argument_list|(
name|task1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|rejectExecution
argument_list|(
name|task2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|rejectExecution
argument_list|(
name|task3
argument_list|)
expr_stmt|;
comment|// Verify that the node is blacklisted
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numRejectedTasks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|instanceToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|disabledNodesQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|task4
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|clientCookie4
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|task5
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|clientCookie5
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|task6
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Object
name|clientCookie6
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task4
argument_list|,
name|hosts1
argument_list|,
name|priority1
argument_list|,
name|clientCookie4
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task5
argument_list|,
name|hosts2
argument_list|,
name|priority1
argument_list|,
name|clientCookie5
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task6
argument_list|,
name|hosts3
argument_list|,
name|priority1
argument_list|,
name|clientCookie6
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|6
condition|)
block|{
break|break;
block|}
block|}
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
comment|// which affects the locality matching
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testForceLocalityTest1
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// 2 hosts. 2 per host. 5 requests at the same priority.
comment|// First 3 on host1, Next at host2, Last with no host.
comment|// Third request on host1 should not be allocated immediately.
name|forceLocalityTest1
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testNoForceLocalityCounterTest1
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// 2 hosts. 2 per host. 5 requests at the same priority.
comment|// First 3 on host1, Next at host2, Last with no host.
comment|// Third should allocate on host2, 4th on host2, 5th will wait.
name|forceLocalityTest1
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|forceLocalityTest1
parameter_list|(
name|boolean
name|forceLocality
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|String
index|[]
name|hostsH2
init|=
operator|new
name|String
index|[]
block|{
name|HOST2
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|(
name|forceLocality
condition|?
operator|-
literal|1l
else|:
literal|0l
operator|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|task1
init|=
literal|"task1"
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|Object
name|task2
init|=
literal|"task2"
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|Object
name|task3
init|=
literal|"task3"
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|Object
name|task4
init|=
literal|"task4"
decl_stmt|;
name|Object
name|clientCookie4
init|=
literal|"cookie4"
decl_stmt|;
name|Object
name|task5
init|=
literal|"task5"
decl_stmt|;
name|Object
name|clientCookie5
init|=
literal|"cookie5"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//H1 - should allocate
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
comment|//H1 - should allocate
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
comment|//H1 - no capacity if force, should allocate otherwise
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
comment|//H2 - should allocate
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task4
argument_list|,
name|hostsH2
argument_list|,
name|priority1
argument_list|,
name|clientCookie4
argument_list|)
expr_stmt|;
comment|//No location - should allocate if force, no capacity otherwise
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task5
argument_list|,
literal|null
argument_list|,
name|priority1
argument_list|,
name|clientCookie5
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|4
condition|)
block|{
break|break;
block|}
block|}
comment|// Verify no preemption requests - since everything is at the same priority
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceLocality
condition|)
block|{
comment|// task3 not allocated
name|assertEquals
argument_list|(
name|task4
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task5
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|task3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task4
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Complete one task on host1.
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// Try scheduling again.
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|5
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|argumentCaptor
operator|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceLocality
condition|)
block|{
name|assertEquals
argument_list|(
name|task3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|task5
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testForcedLocalityUnknownHost
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hostsKnown
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|String
index|[]
name|hostsUnknown
init|=
operator|new
name|String
index|[]
block|{
name|HOST2
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hostsKnown
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1l
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|task1
init|=
literal|"task1"
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|Object
name|task2
init|=
literal|"task2"
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Should allocate since H2 is not known.
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsUnknown
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsKnown
argument_list|,
name|priority1
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|2
condition|)
block|{
break|break;
block|}
block|}
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testForcedLocalityPreemption
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Priority
name|priority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|String
index|[]
name|hostsH2
init|=
operator|new
name|String
index|[]
block|{
name|HOST2
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1l
argument_list|)
decl_stmt|;
comment|// Fill up host1 with p2 tasks.
comment|// Leave host2 empty
comment|// Try running p1 task on host1 - should preempt
try|try
block|{
name|Object
name|task1
init|=
literal|"task1"
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|Object
name|task2
init|=
literal|"task2"
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|Object
name|task3
init|=
literal|"task3"
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|Object
name|task4
init|=
literal|"task4"
decl_stmt|;
name|Object
name|clientCookie4
init|=
literal|"cookie4"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
comment|// This request at a lower priority should not affect anything.
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
operator|==
literal|2
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// Allocate t4 at higher priority. t3 should not be allocated,
comment|// and a preemption should be attempted on host1, despite host2 having available capacity
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task4
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie4
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numPreemptedTasks
operator|==
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|INTERNAL_PREEMPTION
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|3
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task4
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie4
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestTaskSchedulerServiceWrapper
block|{
specifier|static
specifier|final
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|TaskSchedulerContext
name|mockAppCallback
init|=
name|mock
argument_list|(
name|TaskSchedulerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|(
operator|new
name|SystemClock
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LlapTaskSchedulerServiceForTest
name|ts
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
literal|2000l
argument_list|)
expr_stmt|;
block|}
name|TestTaskSchedulerServiceWrapper
parameter_list|(
name|long
name|disableTimeoutMillis
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
name|disableTimeoutMillis
argument_list|,
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|,
name|HOST3
block|}
argument_list|,
literal|4
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_TASK_SCHEDULER_WAIT_QUEUE_SIZE
operator|.
name|defaultIntVal
argument_list|)
expr_stmt|;
block|}
name|TestTaskSchedulerServiceWrapper
parameter_list|(
name|long
name|disableTimeoutMillis
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|int
name|numExecutors
parameter_list|,
name|int
name|waitQueueSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
name|disableTimeoutMillis
argument_list|,
name|hosts
argument_list|,
name|numExecutors
argument_list|,
name|waitQueueSize
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
name|TestTaskSchedulerServiceWrapper
parameter_list|(
name|long
name|disableTimeoutMillis
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|int
name|numExecutors
parameter_list|,
name|int
name|waitQueueSize
parameter_list|,
name|long
name|localityDelayMs
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
operator|.
name|varname
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
operator|.
name|varname
argument_list|,
name|numExecutors
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_TASK_SCHEDULER_WAIT_QUEUE_SIZE
operator|.
name|varname
argument_list|,
name|waitQueueSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|LLAP_TASK_SCHEDULER_NODE_REENABLE_MIN_TIMEOUT_MS
operator|.
name|varname
argument_list|,
name|disableTimeoutMillis
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|LlapFixedRegistryImpl
operator|.
name|FIXED_REGISTRY_RESOLVE_HOST_NAMES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|ConfVars
operator|.
name|LLAP_TASK_SCHEDULER_LOCALITY_DELAY
operator|.
name|varname
argument_list|,
name|localityDelayMs
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|when
argument_list|(
name|mockAppCallback
argument_list|)
operator|.
name|getApplicationAttemptId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|11111l
argument_list|)
operator|.
name|when
argument_list|(
name|mockAppCallback
argument_list|)
operator|.
name|getCustomClusterIdentifier
argument_list|()
expr_stmt|;
name|UserPayload
name|userPayload
init|=
name|TezUtils
operator|.
name|createUserPayloadFromConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|userPayload
argument_list|)
operator|.
name|when
argument_list|(
name|mockAppCallback
argument_list|)
operator|.
name|getInitialUserPayload
argument_list|()
expr_stmt|;
name|ts
operator|=
operator|new
name|LlapTaskSchedulerServiceForTest
argument_list|(
name|mockAppCallback
argument_list|,
name|clock
argument_list|)
expr_stmt|;
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ts
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|ts
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// One scheduler pass from the nodes that are added at startup
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|controlScheduler
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
block|}
name|void
name|controlScheduler
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|ts
operator|.
name|forTestsetControlScheduling
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|void
name|signalSchedulerRun
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ts
operator|.
name|forTestSignalSchedulingRun
argument_list|()
expr_stmt|;
block|}
name|void
name|awaitSchedulerRun
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ts
operator|.
name|forTestAwaitSchedulingRun
argument_list|()
expr_stmt|;
block|}
name|void
name|resetAppCallback
parameter_list|()
block|{
name|reset
argument_list|(
name|mockAppCallback
argument_list|)
expr_stmt|;
block|}
name|void
name|shutdown
parameter_list|()
block|{
name|ts
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|void
name|allocateTask
parameter_list|(
name|Object
name|task
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Object
name|clientCookie
parameter_list|)
block|{
name|ts
operator|.
name|allocateTask
argument_list|(
name|task
argument_list|,
name|resource
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|,
name|clientCookie
argument_list|)
expr_stmt|;
block|}
name|void
name|deallocateTask
parameter_list|(
name|Object
name|task
parameter_list|,
name|boolean
name|succeeded
parameter_list|,
name|TaskAttemptEndReason
name|endReason
parameter_list|)
block|{
name|ts
operator|.
name|deallocateTask
argument_list|(
name|task
argument_list|,
name|succeeded
argument_list|,
name|endReason
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|void
name|rejectExecution
parameter_list|(
name|Object
name|task
parameter_list|)
block|{
name|ts
operator|.
name|deallocateTask
argument_list|(
name|task
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|EXECUTOR_BUSY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LlapTaskSchedulerServiceForTest
extends|extends
name|LlapTaskSchedulerService
block|{
specifier|private
name|AtomicBoolean
name|controlScheduling
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|testLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|schedulingCompleteCondition
init|=
name|testLock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|schedulingComplete
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|triggerSchedulingCondition
init|=
name|testLock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|schedulingTriggered
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|numSchedulerRuns
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|LlapTaskSchedulerServiceForTest
parameter_list|(
name|TaskSchedulerContext
name|appClient
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|super
argument_list|(
name|appClient
argument_list|,
name|clock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|schedulePendingTasks
parameter_list|()
block|{
name|testLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|controlScheduling
operator|.
name|get
argument_list|()
condition|)
block|{
while|while
condition|(
operator|!
name|schedulingTriggered
condition|)
block|{
try|try
block|{
name|triggerSchedulingCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|numSchedulerRuns
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|super
operator|.
name|schedulePendingTasks
argument_list|()
expr_stmt|;
name|schedulingTriggered
operator|=
literal|false
expr_stmt|;
name|schedulingComplete
operator|=
literal|true
expr_stmt|;
name|schedulingCompleteCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|testLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Enable or disable test scheduling control.
name|void
name|forTestsetControlScheduling
parameter_list|(
name|boolean
name|control
parameter_list|)
block|{
name|this
operator|.
name|controlScheduling
operator|.
name|set
argument_list|(
name|control
argument_list|)
expr_stmt|;
block|}
name|void
name|forTestSignalSchedulingRun
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|testLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|schedulingTriggered
operator|=
literal|true
expr_stmt|;
name|triggerSchedulingCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|testLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|forTestAwaitSchedulingRun
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|testLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|schedulingComplete
condition|)
block|{
name|schedulingCompleteCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|schedulingComplete
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|testLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

