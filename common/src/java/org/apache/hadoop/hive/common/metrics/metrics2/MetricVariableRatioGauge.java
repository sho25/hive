begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|metrics2
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|RatioGauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsVariable
import|;
end_import

begin_comment
comment|/**  * Combines two numeric metric variables into one gauge type metric displaying their ratio  */
end_comment

begin_class
specifier|public
class|class
name|MetricVariableRatioGauge
extends|extends
name|RatioGauge
block|{
specifier|private
specifier|final
name|MetricsVariable
argument_list|<
name|Integer
argument_list|>
name|numerator
decl_stmt|;
specifier|private
specifier|final
name|MetricsVariable
argument_list|<
name|Integer
argument_list|>
name|denominator
decl_stmt|;
specifier|public
name|MetricVariableRatioGauge
parameter_list|(
name|MetricsVariable
argument_list|<
name|Integer
argument_list|>
name|numerator
parameter_list|,
name|MetricsVariable
argument_list|<
name|Integer
argument_list|>
name|denominator
parameter_list|)
block|{
name|this
operator|.
name|numerator
operator|=
name|numerator
expr_stmt|;
name|this
operator|.
name|denominator
operator|=
name|denominator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Ratio
name|getRatio
parameter_list|()
block|{
name|Integer
name|numValue
init|=
name|numerator
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Integer
name|denomValue
init|=
name|denominator
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|numValue
operator|!=
literal|null
operator|&&
name|denomValue
operator|!=
literal|null
condition|)
block|{
return|return
name|Ratio
operator|.
name|of
argument_list|(
name|numValue
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|denomValue
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Ratio
operator|.
name|of
argument_list|(
literal|0d
argument_list|,
literal|0d
argument_list|)
return|;
block|}
block|}
end_class

end_unit

