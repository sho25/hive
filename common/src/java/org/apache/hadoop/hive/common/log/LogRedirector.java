begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|log
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Class used to redirect output read from a stream to a logger  */
end_comment

begin_class
specifier|public
class|class
name|LogRedirector
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|MAX_ERR_LOG_LINES_FOR_RPC
init|=
literal|1000
decl_stmt|;
specifier|public
interface|interface
name|LogSourceCallback
block|{
name|boolean
name|isAlive
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
specifier|private
specifier|final
name|BufferedReader
name|in
decl_stmt|;
specifier|private
specifier|final
name|LogSourceCallback
name|callback
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|errLogs
decl_stmt|;
specifier|private
name|int
name|numErrLogLines
init|=
literal|0
decl_stmt|;
specifier|public
name|LogRedirector
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|LogSourceCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
specifier|public
name|LogRedirector
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|errLogs
parameter_list|,
name|LogSourceCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|errLogs
operator|=
name|errLogs
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|errLogs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|numErrLogLines
operator|++
operator|<
name|MAX_ERR_LOG_LINES_FOR_RPC
condition|)
block|{
name|errLogs
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|callback
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"I/O error in redirector thread."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// When stopping the process we are redirecting from,
comment|// the streams might be closed during reading.
comment|// We should not log the related exceptions in a visible level
comment|// as they might mislead the user.
name|logger
operator|.
name|debug
argument_list|(
literal|"I/O error in redirector thread while stopping the remote driver"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error in redirector thread."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Start the logredirector in a new thread    * @param name name of the new thread    * @param redirector redirector to start    */
specifier|public
specifier|static
name|void
name|redirect
parameter_list|(
name|String
name|name
parameter_list|,
name|LogRedirector
name|redirector
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|redirector
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

