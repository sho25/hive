begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_class
specifier|public
class|class
name|ObjectPair
parameter_list|<
name|F
parameter_list|,
name|S
parameter_list|>
block|{
specifier|private
name|F
name|first
decl_stmt|;
specifier|private
name|S
name|second
decl_stmt|;
specifier|public
name|ObjectPair
parameter_list|()
block|{}
comment|/**    * Creates a pair. Constructor doesn't infer template args but    * the method does, so the code becomes less ugly.    */
specifier|public
specifier|static
parameter_list|<
name|T1
parameter_list|,
name|T2
parameter_list|>
name|ObjectPair
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
name|create
parameter_list|(
name|T1
name|f
parameter_list|,
name|T2
name|s
parameter_list|)
block|{
return|return
operator|new
name|ObjectPair
argument_list|<
name|T1
argument_list|,
name|T2
argument_list|>
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
return|;
block|}
specifier|public
name|ObjectPair
parameter_list|(
name|F
name|first
parameter_list|,
name|S
name|second
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
name|this
operator|.
name|second
operator|=
name|second
expr_stmt|;
block|}
specifier|public
name|F
name|getFirst
parameter_list|()
block|{
return|return
name|first
return|;
block|}
specifier|public
name|void
name|setFirst
parameter_list|(
name|F
name|first
parameter_list|)
block|{
name|this
operator|.
name|first
operator|=
name|first
expr_stmt|;
block|}
specifier|public
name|S
name|getSecond
parameter_list|()
block|{
return|return
name|second
return|;
block|}
specifier|public
name|void
name|setSecond
parameter_list|(
name|S
name|second
parameter_list|)
block|{
name|this
operator|.
name|second
operator|=
name|second
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|that
operator|instanceof
name|ObjectPair
condition|)
block|{
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|ObjectPair
argument_list|<
name|F
argument_list|,
name|S
argument_list|>
operator|)
name|that
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|ObjectPair
argument_list|<
name|F
argument_list|,
name|S
argument_list|>
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|getFirst
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getFirst
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getSecond
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getSecond
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|first
operator|.
name|hashCode
argument_list|()
operator|*
literal|31
operator|+
name|second
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|first
operator|+
literal|":"
operator|+
name|second
return|;
block|}
block|}
end_class

end_unit

