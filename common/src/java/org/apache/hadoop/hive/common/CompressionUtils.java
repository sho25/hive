begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveStreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|gzip
operator|.
name|GzipCompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|gzip
operator|.
name|GzipCompressorOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|utils
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class contains methods used for the purposes of compression, this class  * should not be accessed from code run in Hadoop.  */
end_comment

begin_class
specifier|public
class|class
name|CompressionUtils
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CompressionUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Archive all the files in the inputFiles into outputFile    *    * @param inputFiles    * @param outputFile    * @throws IOException    */
specifier|public
specifier|static
name|void
name|tar
parameter_list|(
name|String
name|parentDir
parameter_list|,
name|String
index|[]
name|inputFiles
parameter_list|,
name|String
name|outputFile
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
name|outputFile
argument_list|)
argument_list|)
expr_stmt|;
name|TarArchiveOutputStream
name|tOut
init|=
operator|new
name|TarArchiveOutputStream
argument_list|(
operator|new
name|GzipCompressorOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
name|inputFiles
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|TarArchiveEntry
name|tarEntry
init|=
operator|new
name|TarArchiveEntry
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|tOut
operator|.
name|setLongFileMode
argument_list|(
name|TarArchiveOutputStream
operator|.
name|LONGFILE_GNU
argument_list|)
expr_stmt|;
name|tOut
operator|.
name|putArchiveEntry
argument_list|(
name|tarEntry
argument_list|)
expr_stmt|;
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|tOut
argument_list|)
expr_stmt|;
comment|// copy with 8K buffer, not close
block|}
finally|finally
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|tOut
operator|.
name|closeArchiveEntry
argument_list|()
expr_stmt|;
block|}
name|tOut
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// finishes inside
block|}
finally|finally
block|{
comment|// TarArchiveOutputStream seemed not to close files properly in error situation
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|zip
parameter_list|(
name|String
name|parentDir
parameter_list|,
name|String
index|[]
name|inputFiles
parameter_list|,
name|String
name|outputFile
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipOutputStream
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
name|output
operator|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
name|outputFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
name|inputFiles
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|output
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|inputFiles
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Untar an input file into an output file.    *    * The output file is created in the output folder, having the same name as the input file, minus    * the '.tar' extension.    *    * @param inputFileName the input .tar file    * @param outputDirName the output directory file.    * @throws IOException    * @throws FileNotFoundException    *    * @return The {@link List} of {@link File}s with the untared content.    * @throws ArchiveException    */
specifier|public
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|unTar
parameter_list|(
specifier|final
name|String
name|inputFileName
parameter_list|,
specifier|final
name|String
name|outputDirName
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
throws|,
name|ArchiveException
block|{
return|return
name|unTar
argument_list|(
name|inputFileName
argument_list|,
name|outputDirName
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Untar an input file into an output file.    *    * The output file is created in the output folder, having the same name as the input file, minus    * the '.tar' extension.    *    * @param inputFileName the input .tar file    * @param outputDirName the output directory file.    * @throws IOException    * @throws FileNotFoundException    *    * @return The {@link List} of {@link File}s with the untared content.    * @throws ArchiveException    */
specifier|public
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|unTar
parameter_list|(
specifier|final
name|String
name|inputFileName
parameter_list|,
specifier|final
name|String
name|outputDirName
parameter_list|,
name|boolean
name|flatten
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
throws|,
name|ArchiveException
block|{
name|File
name|inputFile
init|=
operator|new
name|File
argument_list|(
name|inputFileName
argument_list|)
decl_stmt|;
name|File
name|outputDir
init|=
operator|new
name|File
argument_list|(
name|outputDirName
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|File
argument_list|>
name|untaredFiles
init|=
operator|new
name|LinkedList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|InputStream
name|is
decl_stmt|;
if|if
condition|(
name|inputFileName
operator|.
name|endsWith
argument_list|(
literal|".gz"
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|GzipCompressorInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|inputFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|inputFile
argument_list|)
expr_stmt|;
block|}
specifier|final
name|TarArchiveInputStream
name|debInputStream
init|=
operator|(
name|TarArchiveInputStream
operator|)
operator|new
name|ArchiveStreamFactory
argument_list|()
operator|.
name|createArchiveInputStream
argument_list|(
literal|"tar"
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|TarArchiveEntry
name|entry
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
operator|(
name|TarArchiveEntry
operator|)
name|debInputStream
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|File
name|outputFile
init|=
operator|new
name|File
argument_list|(
name|outputDir
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outputFile
operator|.
name|toPath
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|startsWith
argument_list|(
name|outputDir
operator|.
name|toPath
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|normalize
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Untarred file is not under the output directory"
argument_list|)
throw|;
block|}
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|flatten
condition|)
block|{
comment|// no sub-directories
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Attempting to write output directory %s."
argument_list|,
name|outputFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Attempting to create output directory %s."
argument_list|,
name|outputFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputFile
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Couldn't create directory %s."
argument_list|,
name|outputFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
specifier|final
name|OutputStream
name|outputFileStream
decl_stmt|;
if|if
condition|(
name|flatten
condition|)
block|{
name|File
name|flatOutputFile
init|=
operator|new
name|File
argument_list|(
name|outputDir
argument_list|,
name|outputFile
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Creating flat output file %s."
argument_list|,
name|flatOutputFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|outputFileStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|flatOutputFile
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Attempting to create output directory %s."
argument_list|,
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Couldn't create directory %s."
argument_list|,
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Creating output file %s."
argument_list|,
name|outputFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|outputFileStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputFileStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|copy
argument_list|(
name|debInputStream
argument_list|,
name|outputFileStream
argument_list|)
expr_stmt|;
name|outputFileStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|untaredFiles
operator|.
name|add
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
name|debInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|untaredFiles
return|;
block|}
block|}
end_class

end_unit

