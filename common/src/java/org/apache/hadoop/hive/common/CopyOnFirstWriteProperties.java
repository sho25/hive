begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Interner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Interners
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * A special subclass of Properties, designed to save memory when many identical  * copies of Properties would otherwise be created. To achieve that, we use the  * 'interned' field, which points to the same Properties object for all instances  * of CopyOnFirstWriteProperties that were created with identical contents.  * However, as soon as any mutating method is called, contents are copied from  * the 'interned' properties into this instance.  */
end_comment

begin_class
specifier|public
class|class
name|CopyOnFirstWriteProperties
extends|extends
name|Properties
block|{
specifier|private
name|Properties
name|interned
decl_stmt|;
specifier|private
specifier|static
name|Interner
argument_list|<
name|Properties
argument_list|>
name|INTERNER
init|=
name|Interners
operator|.
name|newWeakInterner
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Field
name|defaultsField
decl_stmt|;
static|static
block|{
try|try
block|{
name|defaultsField
operator|=
name|Properties
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"defaults"
argument_list|)
expr_stmt|;
name|defaultsField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CopyOnFirstWriteProperties
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
name|setInterned
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|/*************   Public API of java.util.Properties   ************/
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|getProperty
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|list
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|interned
operator|.
name|list
argument_list|(
name|out
argument_list|)
expr_stmt|;
else|else
name|super
operator|.
name|list
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|list
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|interned
operator|.
name|list
argument_list|(
name|out
argument_list|)
expr_stmt|;
else|else
name|super
operator|.
name|list
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|load
parameter_list|(
name|InputStream
name|inStream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
name|super
operator|.
name|load
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|load
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
name|super
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|loadFromXML
parameter_list|(
name|InputStream
name|inStream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
name|super
operator|.
name|loadFromXML
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|?
argument_list|>
name|propertyNames
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|propertyNames
argument_list|()
return|;
else|else
return|return
name|super
operator|.
name|propertyNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|store
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|comments
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|interned
operator|.
name|store
argument_list|(
name|out
argument_list|,
name|comments
argument_list|)
expr_stmt|;
else|else
name|super
operator|.
name|store
argument_list|(
name|out
argument_list|,
name|comments
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeToXML
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|String
name|comment
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|interned
operator|.
name|storeToXML
argument_list|(
name|os
argument_list|,
name|comment
argument_list|)
expr_stmt|;
else|else
name|super
operator|.
name|storeToXML
argument_list|(
name|os
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeToXML
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|String
name|comment
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|interned
operator|.
name|storeToXML
argument_list|(
name|os
argument_list|,
name|comment
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
else|else
name|super
operator|.
name|storeToXML
argument_list|(
name|os
argument_list|,
name|comment
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|stringPropertyNames
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|stringPropertyNames
argument_list|()
return|;
else|else
return|return
name|super
operator|.
name|stringPropertyNames
argument_list|()
return|;
block|}
comment|/*************   Public API of java.util.Hashtable   ************/
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|clone
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
operator|new
name|CopyOnFirstWriteProperties
argument_list|(
name|interned
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|compute
parameter_list|(
name|Object
name|key
parameter_list|,
name|BiFunction
name|remappingFunction
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
comment|// We do this because if function returns null,
comment|// the mapping for key is removed, i.e. the table is mutated.
return|return
name|super
operator|.
name|compute
argument_list|(
name|key
argument_list|,
name|remappingFunction
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|computeIfAbsent
parameter_list|(
name|Object
name|key
parameter_list|,
name|Function
name|mappingFunction
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
name|mappingFunction
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|computeIfPresent
parameter_list|(
name|Object
name|key
parameter_list|,
name|BiFunction
name|remappingFunction
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|computeIfPresent
argument_list|(
name|key
argument_list|,
name|remappingFunction
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|contains
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|contains
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Enumeration
argument_list|<
name|Object
argument_list|>
name|elements
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|elements
argument_list|()
return|;
else|else
return|return
name|super
operator|.
name|elements
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|entrySet
argument_list|()
return|;
else|else
return|return
name|super
operator|.
name|entrySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|forEach
parameter_list|(
name|BiConsumer
name|action
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|interned
operator|.
name|forEach
argument_list|(
name|action
argument_list|)
expr_stmt|;
else|else
name|super
operator|.
name|forEach
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|getOrDefault
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|getOrDefault
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|getOrDefault
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|hashCode
argument_list|()
return|;
else|else
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|isEmpty
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|isEmpty
argument_list|()
return|;
else|else
return|return
name|super
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Enumeration
argument_list|<
name|Object
argument_list|>
name|keys
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|keys
argument_list|()
return|;
else|else
return|return
name|super
operator|.
name|keys
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Object
argument_list|>
name|keySet
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|keySet
argument_list|()
return|;
else|else
return|return
name|super
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|merge
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|BiFunction
name|remappingFunction
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|merge
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|remappingFunction
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|t
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
name|super
operator|.
name|putAll
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|putIfAbsent
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|remove
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|replace
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|replace
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|replaceAll
parameter_list|(
name|BiFunction
name|function
parameter_list|)
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
name|copyFromInternedToThis
argument_list|()
expr_stmt|;
name|super
operator|.
name|replaceAll
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|size
argument_list|()
return|;
else|else
return|return
name|super
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|toString
argument_list|()
return|;
else|else
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|()
block|{
if|if
condition|(
name|interned
operator|!=
literal|null
condition|)
return|return
name|interned
operator|.
name|values
argument_list|()
return|;
else|else
return|return
name|super
operator|.
name|values
argument_list|()
return|;
block|}
comment|/*************   Private implementation ************/
specifier|private
name|void
name|copyFromInternedToThis
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
range|:
name|interned
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|super
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Unfortunately, we cannot directly read a protected field of non-this object
name|this
operator|.
name|defaults
operator|=
operator|(
name|Properties
operator|)
name|defaultsField
operator|.
name|get
argument_list|(
name|interned
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// Shouldn't happen
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|setInterned
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setInterned
parameter_list|(
name|Properties
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|interned
operator|=
name|INTERNER
operator|.
name|intern
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|interned
operator|=
name|p
expr_stmt|;
block|}
block|}
comment|// These methods are required by serialization
specifier|public
name|CopyOnFirstWriteProperties
parameter_list|()
block|{   }
specifier|public
name|Properties
name|getInterned
parameter_list|()
block|{
return|return
name|interned
return|;
block|}
block|}
end_class

end_unit

