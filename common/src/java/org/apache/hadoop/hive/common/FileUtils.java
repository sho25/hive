begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|GlobFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Trash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConfUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|io
operator|.
name|HdfsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ShutdownHookManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Collection of file manipulation utilities common across Hive.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FileUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PathFilter
name|HIDDEN_FILES_PATH_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PathFilter
name|STAGING_DIR_PATH_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Variant of Path.makeQualified that qualifies the input path against the default file system    * indicated by the configuration    *    * This does not require a FileSystem handle in most cases - only requires the Filesystem URI.    * This saves the cost of opening the Filesystem - which can involve RPCs - as well as cause    * errors    *    * @param path    *          path to be fully qualified    * @param conf    *          Configuration file    * @return path qualified relative to default file system    */
specifier|public
specifier|static
name|Path
name|makeQualified
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
comment|// in this case we need to get the working directory
comment|// and this requires a FileSystem handle. So revert to
comment|// original method.
return|return
name|path
operator|.
name|makeQualified
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
name|URI
name|fsUri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|URI
name|pathUri
init|=
name|path
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|pathUri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|pathUri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
comment|// validate/fill-in scheme and authority. this follows logic
comment|// identical to FileSystem.get(URI, conf) - but doesn't actually
comment|// obtain a file system handle
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
comment|// no scheme - use default file system uri
name|scheme
operator|=
name|fsUri
operator|.
name|getScheme
argument_list|()
expr_stmt|;
name|authority
operator|=
name|fsUri
operator|.
name|getAuthority
argument_list|()
expr_stmt|;
if|if
condition|(
name|authority
operator|==
literal|null
condition|)
block|{
name|authority
operator|=
literal|""
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|authority
operator|==
literal|null
condition|)
block|{
comment|// no authority - use default one if it applies
if|if
condition|(
name|scheme
operator|.
name|equals
argument_list|(
name|fsUri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|&&
name|fsUri
operator|.
name|getAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|authority
operator|=
name|fsUri
operator|.
name|getAuthority
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|authority
operator|=
literal|""
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|Path
argument_list|(
name|scheme
argument_list|,
name|authority
argument_list|,
name|pathUri
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|FileUtils
parameter_list|()
block|{
comment|// prevent instantiation
block|}
specifier|public
specifier|static
name|String
name|makePartName
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|vals
parameter_list|)
block|{
return|return
name|makePartName
argument_list|(
name|partCols
argument_list|,
name|vals
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Makes a valid partition name.    * @param partCols The partition keys' names    * @param vals The partition values    * @param defaultStr    *         The default name given to a partition value if the respective value is empty or null.    * @return An escaped, valid partition name.    */
specifier|public
specifier|static
name|String
name|makePartName
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|vals
parameter_list|,
name|String
name|defaultStr
parameter_list|)
block|{
name|StringBuilder
name|name
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|name
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|name
operator|.
name|append
argument_list|(
name|escapePathName
argument_list|(
operator|(
name|partCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|defaultStr
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
name|escapePathName
argument_list|(
name|vals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|defaultStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|name
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * default directory will have the same depth as number of skewed columns    * this will make future operation easy like DML merge, concatenate merge    * @param skewedCols    * @param name    * @return    */
specifier|public
specifier|static
name|String
name|makeDefaultListBucketingDirName
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|skewedCols
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|lbDirName
decl_stmt|;
name|String
name|defaultDir
init|=
name|FileUtils
operator|.
name|escapePathName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|StringBuilder
name|defaultDirPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|skewedCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|defaultDirPath
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|defaultDirPath
operator|.
name|append
argument_list|(
name|defaultDir
argument_list|)
expr_stmt|;
block|}
name|lbDirName
operator|=
name|defaultDirPath
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|lbDirName
return|;
block|}
comment|/**    * Makes a valid list bucketing directory name.    * @param lbCols The skewed keys' names    * @param vals The skewed values    * @return An escaped, valid list bucketing directory name.    */
specifier|public
specifier|static
name|String
name|makeListBucketingDirName
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|lbCols
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|vals
parameter_list|)
block|{
name|StringBuilder
name|name
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lbCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|name
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
block|}
name|name
operator|.
name|append
argument_list|(
name|escapePathName
argument_list|(
operator|(
name|lbCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|name
operator|.
name|append
argument_list|(
name|escapePathName
argument_list|(
name|vals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|name
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// NOTE: This is for generating the internal path name for partitions. Users
comment|// should always use the MetaStore API to get the path name for a partition.
comment|// Users should not directly take partition values and turn it into a path
comment|// name by themselves, because the logic below may change in the future.
comment|//
comment|// In the future, it's OK to add new chars to the escape list, and old data
comment|// won't be corrupt, because the full path name in metastore is stored.
comment|// In that case, Hive will continue to read the old data, but when it creates
comment|// new partitions, it will use new names.
comment|// edit : There are some use cases for which adding new chars does not seem
comment|// to be backward compatible - Eg. if partition was created with name having
comment|// a special char that you want to start escaping, and then you try dropping
comment|// the partition with a hive version that now escapes the special char using
comment|// the list below, then the drop partition fails to work.
specifier|static
name|BitSet
name|charToEscape
init|=
operator|new
name|BitSet
argument_list|(
literal|128
argument_list|)
decl_stmt|;
static|static
block|{
for|for
control|(
name|char
name|c
init|=
literal|0
init|;
name|c
operator|<
literal|' '
condition|;
name|c
operator|++
control|)
block|{
name|charToEscape
operator|.
name|set
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
comment|/**      * ASCII 01-1F are HTTP control characters that need to be escaped.      * \u000A and \u000D are \n and \r, respectively.      */
name|char
index|[]
name|clist
init|=
operator|new
name|char
index|[]
block|{
literal|'\u0001'
block|,
literal|'\u0002'
block|,
literal|'\u0003'
block|,
literal|'\u0004'
block|,
literal|'\u0005'
block|,
literal|'\u0006'
block|,
literal|'\u0007'
block|,
literal|'\u0008'
block|,
literal|'\u0009'
block|,
literal|'\n'
block|,
literal|'\u000B'
block|,
literal|'\u000C'
block|,
literal|'\r'
block|,
literal|'\u000E'
block|,
literal|'\u000F'
block|,
literal|'\u0010'
block|,
literal|'\u0011'
block|,
literal|'\u0012'
block|,
literal|'\u0013'
block|,
literal|'\u0014'
block|,
literal|'\u0015'
block|,
literal|'\u0016'
block|,
literal|'\u0017'
block|,
literal|'\u0018'
block|,
literal|'\u0019'
block|,
literal|'\u001A'
block|,
literal|'\u001B'
block|,
literal|'\u001C'
block|,
literal|'\u001D'
block|,
literal|'\u001E'
block|,
literal|'\u001F'
block|,
literal|'"'
block|,
literal|'#'
block|,
literal|'%'
block|,
literal|'\''
block|,
literal|'*'
block|,
literal|'/'
block|,
literal|':'
block|,
literal|'='
block|,
literal|'?'
block|,
literal|'\\'
block|,
literal|'\u007F'
block|,
literal|'{'
block|,
literal|'['
block|,
literal|']'
block|,
literal|'^'
block|}
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|clist
control|)
block|{
name|charToEscape
operator|.
name|set
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|//On windows, following chars need to be escaped as well
name|char
index|[]
name|winClist
init|=
block|{
literal|' '
block|,
literal|'<'
block|,
literal|'>'
block|,
literal|'|'
block|}
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|winClist
control|)
block|{
name|charToEscape
operator|.
name|set
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|boolean
name|needsEscaping
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|c
operator|>=
literal|0
operator|&&
name|c
operator|<
name|charToEscape
operator|.
name|size
argument_list|()
operator|&&
name|charToEscape
operator|.
name|get
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|escapePathName
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|escapePathName
argument_list|(
name|path
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Escapes a path name.    * @param path The path to escape.    * @param defaultPath    *          The default name for the path, if the given path is empty or null.    * @return An escaped path name.    */
specifier|public
specifier|static
name|String
name|escapePathName
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|defaultPath
parameter_list|)
block|{
comment|// __HIVE_DEFAULT_NULL__ is the system default value for null and empty string.
comment|// TODO: we should allow user to specify default partition or HDFS file location.
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|defaultPath
operator|==
literal|null
condition|)
block|{
comment|//previously, when path is empty or null and no default path is specified,
comment|// __HIVE_DEFAULT_PARTITION__ was the return value for escapePathName
return|return
literal|"__HIVE_DEFAULT_PARTITION__"
return|;
block|}
else|else
block|{
return|return
name|defaultPath
return|;
block|}
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|path
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|needsEscaping
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%1$02X"
argument_list|,
operator|(
name|int
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|unescapePathName
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|path
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'%'
operator|&&
name|i
operator|+
literal|2
operator|<
name|path
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|code
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|code
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|i
operator|+
literal|3
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|code
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|code
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|code
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
continue|continue;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Recursively lists status for all files starting from a particular directory (or individual file    * as base case).    *    * @param fs    *          file system    *    * @param fileStatus    *          starting point in file system    *    * @param results    *          receives enumeration of all files found    */
specifier|public
specifier|static
name|void
name|listStatusRecursively
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|fileStatus
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|listStatusRecursively
argument_list|(
name|fs
argument_list|,
name|fileStatus
argument_list|,
name|HIDDEN_FILES_PATH_FILTER
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|listStatusRecursively
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|fileStatus
parameter_list|,
name|PathFilter
name|filter
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
for|for
control|(
name|FileStatus
name|stat
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|,
name|filter
argument_list|)
control|)
block|{
name|listStatusRecursively
argument_list|(
name|fs
argument_list|,
name|stat
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Find the parent of path that exists, if path does not exist    *    * @param fs    *          file system    * @param path    * @return FileStatus for argument path if it exists or the first ancestor in the path that exists    * @throws IOException    */
specifier|public
specifier|static
name|FileStatus
name|getPathOrParentThatExists
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|stat
init|=
name|FileUtils
operator|.
name|getFileStatusOrNull
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
condition|)
block|{
return|return
name|stat
return|;
block|}
name|Path
name|parentPath
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
return|return
name|getPathOrParentThatExists
argument_list|(
name|fs
argument_list|,
name|parentPath
argument_list|)
return|;
block|}
comment|/**    * Perform a check to determine if the user is able to access the file passed in.    * If the user name passed in is different from the current user, this method will    * attempt to do impersonate the user to do the check; the current user should be    * able to create proxy users in this case.    * @param fs   FileSystem of the path to check    * @param stat FileStatus representing the file    * @param action FsAction that will be checked    * @param user User name of the user that will be checked for access.  If the user name    *             is null or the same as the current user, no user impersonation will be done    *             and the check will be done as the current user. Otherwise the file access    *             check will be performed within a doAs() block to use the access privileges    *             of this user. In this case the user must be configured to impersonate other    *             users, otherwise this check will fail with error.    * @throws IOException    * @throws AccessControlException    * @throws InterruptedException    * @throws Exception    */
specifier|public
specifier|static
name|void
name|checkFileAccessWithImpersonation
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|FileStatus
name|stat
parameter_list|,
specifier|final
name|FsAction
name|action
parameter_list|,
specifier|final
name|String
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|AccessControlException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|Utils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|String
name|currentUser
init|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|currentUser
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|)
block|{
comment|// No need to impersonate user, do the checks as the currently configured user.
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|checkFileAccess
argument_list|(
name|fs
argument_list|,
name|stat
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Otherwise, try user impersonation. Current user must be configured to do user impersonation.
name|UserGroupInformation
name|proxyUser
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|user
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|proxyUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fsAsUser
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|checkFileAccess
argument_list|(
name|fsAsUser
argument_list|,
name|stat
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileSystem
operator|.
name|closeAllForUGI
argument_list|(
name|proxyUser
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check if user userName has permissions to perform the given FsAction action    * on all files under the file whose FileStatus fileStatus is provided    *    * @param fs    * @param fileStatus    * @param userName    * @param action    * @return    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|isActionPermittedForFileHierarchy
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|fileStatus
parameter_list|,
name|String
name|userName
parameter_list|,
name|FsAction
name|action
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|isActionPermittedForFileHierarchy
argument_list|(
name|fs
argument_list|,
name|fileStatus
argument_list|,
name|userName
argument_list|,
name|action
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isActionPermittedForFileHierarchy
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|fileStatus
parameter_list|,
name|String
name|userName
parameter_list|,
name|FsAction
name|action
parameter_list|,
name|boolean
name|recurse
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|isDir
init|=
name|fileStatus
operator|.
name|isDir
argument_list|()
decl_stmt|;
name|FsAction
name|dirActionNeeded
init|=
name|action
decl_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
comment|// for dirs user needs execute privileges as well
name|dirActionNeeded
operator|.
name|and
argument_list|(
name|FsAction
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|checkFileAccessWithImpersonation
argument_list|(
name|fs
argument_list|,
name|fileStatus
argument_list|,
name|action
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|err
parameter_list|)
block|{
comment|// Action not permitted for user
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
operator|!
name|isDir
operator|)
operator|||
operator|(
operator|!
name|recurse
operator|)
condition|)
block|{
comment|// no sub dirs to be checked
return|return
literal|true
return|;
block|}
comment|// check all children
name|FileStatus
index|[]
name|childStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|childStatus
range|:
name|childStatuses
control|)
block|{
comment|// check children recursively - recurse is true if we're here.
if|if
condition|(
operator|!
name|isActionPermittedForFileHierarchy
argument_list|(
name|fs
argument_list|,
name|childStatus
argument_list|,
name|userName
argument_list|,
name|action
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * A best effort attempt to determine if if the file is a local file    * @param conf    * @param fileName    * @return true if it was successfully able to determine that it is a local file    */
specifier|public
specifier|static
name|boolean
name|isLocalFile
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
try|try
block|{
comment|// do best effort to determine if this is a local file
return|return
name|isLocalFile
argument_list|(
name|conf
argument_list|,
operator|new
name|URI
argument_list|(
name|fileName
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create URI from "
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * A best effort attempt to determine if if the file is a local file    * @param conf    * @param fileUri    * @return true if it was successfully able to determine that it is a local file    */
specifier|public
specifier|static
name|boolean
name|isLocalFile
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|URI
name|fileUri
parameter_list|)
block|{
try|try
block|{
comment|// do best effort to determine if this is a local file
name|FileSystem
name|fsForFile
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|fileUri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|LocalFileSystem
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|fsForFile
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get FileSystem for "
operator|+
name|fileUri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isOwnerOfFileHierarchy
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|fileStatus
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|isOwnerOfFileHierarchy
argument_list|(
name|fs
argument_list|,
name|fileStatus
argument_list|,
name|userName
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isOwnerOfFileHierarchy
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|fileStatus
parameter_list|,
name|String
name|userName
parameter_list|,
name|boolean
name|recurse
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fileStatus
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
operator|!
name|fileStatus
operator|.
name|isDir
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|recurse
operator|)
condition|)
block|{
comment|// no sub dirs to be checked
return|return
literal|true
return|;
block|}
comment|// check all children
name|FileStatus
index|[]
name|childStatuses
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|childStatus
range|:
name|childStatuses
control|)
block|{
comment|// check children recursively - recurse is true if we're here.
if|if
condition|(
operator|!
name|isOwnerOfFileHierarchy
argument_list|(
name|fs
argument_list|,
name|childStatus
argument_list|,
name|userName
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Creates the directory and all necessary parent directories.    * @param fs FileSystem to use    * @param f path to create.    * @param inheritPerms whether directory inherits the permission of the last-existing parent path    * @param conf Hive configuration    * @return true if directory created successfully.  False otherwise, including if it exists.    * @throws IOException exception in creating the directory    */
specifier|public
specifier|static
name|boolean
name|mkdir
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|f
parameter_list|,
name|boolean
name|inheritPerms
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating directory if it doesn't exist: "
operator|+
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inheritPerms
condition|)
block|{
comment|//just create the directory
return|return
name|fs
operator|.
name|mkdirs
argument_list|(
name|f
argument_list|)
return|;
block|}
else|else
block|{
comment|//Check if the directory already exists. We want to change the permission
comment|//to that of the parent directory only for newly created directories.
try|try
block|{
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|isDir
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ignore
parameter_list|)
block|{       }
comment|//inherit perms: need to find last existing parent path, and apply its permission on entire subtree.
name|Path
name|lastExistingParent
init|=
name|f
decl_stmt|;
name|Path
name|firstNonExistentParent
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|lastExistingParent
argument_list|)
condition|)
block|{
name|firstNonExistentParent
operator|=
name|lastExistingParent
expr_stmt|;
name|lastExistingParent
operator|=
name|lastExistingParent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|boolean
name|success
init|=
name|fs
operator|.
name|mkdirs
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
try|try
block|{
comment|//set on the entire subtree
if|if
condition|(
name|inheritPerms
condition|)
block|{
name|HdfsUtils
operator|.
name|setFullFileStatus
argument_list|(
name|conf
argument_list|,
operator|new
name|HdfsUtils
operator|.
name|HadoopFileStatus
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|lastExistingParent
argument_list|)
argument_list|,
name|fs
argument_list|,
name|firstNonExistentParent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error setting permissions of "
operator|+
name|firstNonExistentParent
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
comment|/**    * Copies files between filesystems.    */
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|src
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HadoopShims
name|shims
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
decl_stmt|;
name|boolean
name|copied
decl_stmt|;
comment|/* Run distcp if source file/dir is too big */
if|if
condition|(
name|srcFS
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hdfs"
argument_list|)
operator|&&
name|srcFS
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
operator|.
name|getLen
argument_list|()
operator|>
name|conf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_COPYFILE_MAXSIZE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Source is "
operator|+
name|srcFS
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
operator|.
name|getLen
argument_list|()
operator|+
literal|" bytes. (MAX: "
operator|+
name|conf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_COPYFILE_MAXSIZE
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Launch distributed copy (distcp) job."
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|updateJobCredentialProviders
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|copied
operator|=
name|shims
operator|.
name|runDistCp
argument_list|(
name|src
argument_list|,
name|dst
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|copied
operator|&&
name|deleteSource
condition|)
block|{
name|srcFS
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|copied
operator|=
name|FileUtil
operator|.
name|copy
argument_list|(
name|srcFS
argument_list|,
name|src
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
name|deleteSource
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|boolean
name|inheritPerms
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_WAREHOUSE_SUBDIR_INHERIT_PERMS
argument_list|)
decl_stmt|;
if|if
condition|(
name|copied
operator|&&
name|inheritPerms
condition|)
block|{
try|try
block|{
name|HdfsUtils
operator|.
name|setFullFileStatus
argument_list|(
name|conf
argument_list|,
operator|new
name|HdfsUtils
operator|.
name|HadoopFileStatus
argument_list|(
name|conf
argument_list|,
name|dstFS
argument_list|,
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error setting permissions or group of "
operator|+
name|dst
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|copied
return|;
block|}
comment|/**    * Move a particular file or directory to the trash.    * @param fs FileSystem to use    * @param f path of file or directory to move to trash.    * @param conf    * @return true if move successful    * @throws IOException    */
specifier|public
specifier|static
name|boolean
name|moveToTrash
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|f
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleting  "
operator|+
name|f
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
name|result
operator|=
name|Trash
operator|.
name|moveToAppropriateTrash
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Moved to trash: "
operator|+
name|f
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// for whatever failure reason including that trash has lower encryption zone
comment|// retry with force delete
name|LOG
operator|.
name|warn
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|+
literal|"; Force to delete it."
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|boolean
name|renameWithPerms
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|sourcePath
parameter_list|,
name|Path
name|destPath
parameter_list|,
name|boolean
name|inheritPerms
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Renaming "
operator|+
name|sourcePath
operator|+
literal|" to "
operator|+
name|destPath
argument_list|)
expr_stmt|;
comment|// If destPath directory exists, rename call will move the sourcePath
comment|// into destPath without failing. So check it before renaming.
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|destPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot rename the source path. The destination "
operator|+
literal|"path already exists."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|inheritPerms
condition|)
block|{
comment|//just rename the directory
return|return
name|fs
operator|.
name|rename
argument_list|(
name|sourcePath
argument_list|,
name|destPath
argument_list|)
return|;
block|}
else|else
block|{
comment|//rename the directory
if|if
condition|(
name|fs
operator|.
name|rename
argument_list|(
name|sourcePath
argument_list|,
name|destPath
argument_list|)
condition|)
block|{
try|try
block|{
name|HdfsUtils
operator|.
name|setFullFileStatus
argument_list|(
name|conf
argument_list|,
operator|new
name|HdfsUtils
operator|.
name|HadoopFileStatus
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|destPath
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|,
name|fs
argument_list|,
name|destPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error setting permissions or group of "
operator|+
name|destPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**    * @param fs1    * @param fs2    * @return return true if both file system arguments point to same file system    */
specifier|public
specifier|static
name|boolean
name|equalsFileSystem
parameter_list|(
name|FileSystem
name|fs1
parameter_list|,
name|FileSystem
name|fs2
parameter_list|)
block|{
comment|//When file system cache is disabled, you get different FileSystem objects
comment|// for same file system, so '==' can't be used in such cases
comment|//FileSystem api doesn't have a .equals() function implemented, so using
comment|//the uri for comparison. FileSystem already uses uri+Configuration for
comment|//equality in its CACHE .
comment|//Once equality has been added in HDFS-9159, we should make use of it
return|return
name|fs1
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|fs2
operator|.
name|getUri
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Checks if delete can be performed on given path by given user.    * If file does not exist it just returns without throwing an Exception    * @param path    * @param conf    * @param user    * @throws AccessControlException    * @throws InterruptedException    * @throws Exception    */
specifier|public
specifier|static
name|void
name|checkDeletePermission
parameter_list|(
name|Path
name|path
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|AccessControlException
throws|,
name|InterruptedException
throws|,
name|Exception
block|{
comment|// This requires ability to delete the given path.
comment|// The following 2 conditions should be satisfied for this-
comment|// 1. Write permissions on parent dir
comment|// 2. If sticky bit is set on parent dir then one of following should be
comment|// true
comment|//   a. User is owner of the current dir/file
comment|//   b. User is owner of the parent dir
comment|//   Super users are also allowed to drop the file, but there is no good way of checking
comment|//   if a user is a super user. Also super users running hive queries is not a common
comment|//   use case. super users can also do a chown to be able to drop the file
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
comment|// no file/dir to be deleted
return|return;
block|}
specifier|final
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// check user has write permissions on the parent dir
name|FileStatus
name|stat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
comment|// no file/dir to be deleted
return|return;
block|}
name|FileUtils
operator|.
name|checkFileAccessWithImpersonation
argument_list|(
name|fs
argument_list|,
name|stat
argument_list|,
name|FsAction
operator|.
name|WRITE
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|HadoopShims
name|shims
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|shims
operator|.
name|supportStickyBit
argument_list|()
condition|)
block|{
comment|// not supports sticky bit
return|return;
block|}
comment|// check if sticky bit is set on the parent dir
name|FileStatus
name|parStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shims
operator|.
name|hasStickyBit
argument_list|(
name|parStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
condition|)
block|{
comment|// no sticky bit, so write permission on parent dir is sufficient
comment|// no further checks needed
return|return;
block|}
comment|// check if user is owner of parent dir
if|if
condition|(
name|parStatus
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// check if user is owner of current dir/file
name|FileStatus
name|childStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|childStatus
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Permission Denied: User %s can't delete %s because sticky bit is"
operator|+
literal|" set on the parent dir and user does not own this file or its parent"
argument_list|,
name|user
argument_list|,
name|path
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|/**    * Attempts to get file status.  This method differs from the FileSystem API in that it returns    * null instead of throwing FileNotFoundException if the path does not exist.    *    * @param fs file system to check    * @param path file system path to check    * @return FileStatus for path or null if path does not exist    * @throws IOException if there is an I/O error    */
specifier|public
specifier|static
name|FileStatus
name|getFileStatusOrNull
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|deleteDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
comment|/**    * create temporary file and register it to delete-on-exit hook.    * File.deleteOnExit is not used for possible memory leakage.    *    * Make sure to use {@link #deleteTmpFile(File)} after the file is no longer required,    * and has been deleted to avoid a memory leak.    */
specifier|public
specifier|static
name|File
name|createTempFile
parameter_list|(
name|String
name|lScratchDir
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmpDir
init|=
name|lScratchDir
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|File
argument_list|(
name|lScratchDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpDir
operator|!=
literal|null
operator|&&
operator|!
name|tmpDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|tmpDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
comment|// Do another exists to check to handle possible race condition
comment|// Another thread might have created the dir, if that is why
comment|// mkdirs returned false, that is fine
if|if
condition|(
operator|!
name|tmpDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to create temp directory "
operator|+
name|lScratchDir
argument_list|)
throw|;
block|}
block|}
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
name|tmpDir
argument_list|)
decl_stmt|;
name|ShutdownHookManager
operator|.
name|deleteOnExit
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
return|return
name|tmpFile
return|;
block|}
specifier|public
specifier|static
name|File
name|createLocalDirsTempFile
parameter_list|(
name|String
name|localDirList
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|boolean
name|isDirectory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|localDirList
operator|==
literal|null
operator|||
name|localDirList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|createFileInTmp
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
literal|"Local directories not specified"
argument_list|,
name|isDirectory
argument_list|)
return|;
block|}
name|String
index|[]
name|localDirs
init|=
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|localDirList
argument_list|)
decl_stmt|;
if|if
condition|(
name|localDirs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|createFileInTmp
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
literal|"Local directories not specified"
argument_list|,
name|isDirectory
argument_list|)
return|;
block|}
comment|// TODO: we could stagger these to threads by ID, but that can also lead to bad effects.
name|String
name|path
init|=
name|localDirs
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|localDirs
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|createFileInTmp
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
literal|"Empty path for one of the local dirs"
argument_list|,
name|isDirectory
argument_list|)
return|;
block|}
name|File
name|targetDir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|targetDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
return|return
name|createFileInTmp
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
literal|"Cannot access or create "
operator|+
name|targetDir
argument_list|,
name|isDirectory
argument_list|)
return|;
block|}
try|try
block|{
name|File
name|file
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
name|targetDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDirectory
operator|&&
operator|(
operator|!
name|file
operator|.
name|delete
argument_list|()
operator|||
operator|!
name|file
operator|.
name|mkdirs
argument_list|()
operator|)
condition|)
block|{
comment|// TODO: or we could just generate a name ourselves and not do this?
return|return
name|createFileInTmp
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
literal|"Cannot recreate "
operator|+
name|file
operator|+
literal|" as directory"
argument_list|,
name|isDirectory
argument_list|)
return|;
block|}
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error creating a file in "
operator|+
name|targetDir
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
name|createFileInTmp
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
literal|"Cannot create a file in "
operator|+
name|targetDir
argument_list|,
name|isDirectory
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|File
name|createFileInTmp
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|String
name|reason
parameter_list|,
name|boolean
name|isDirectory
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDirectory
operator|&&
operator|(
operator|!
name|file
operator|.
name|delete
argument_list|()
operator|||
operator|!
name|file
operator|.
name|mkdirs
argument_list|()
operator|)
condition|)
block|{
comment|// TODO: or we could just generate a name ourselves and not do this?
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot recreate "
operator|+
name|file
operator|+
literal|" as directory"
argument_list|)
throw|;
block|}
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|reason
operator|+
literal|"; created a tmp file: "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
specifier|public
specifier|static
name|File
name|createLocalDirsTempFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|boolean
name|isDirectory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createLocalDirsTempFile
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"yarn.nodemanager.local-dirs"
argument_list|)
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|,
name|isDirectory
argument_list|)
return|;
block|}
comment|/**    * delete a temporary file and remove it from delete-on-exit hook.    */
specifier|public
specifier|static
name|boolean
name|deleteTmpFile
parameter_list|(
name|File
name|tempFile
parameter_list|)
block|{
if|if
condition|(
name|tempFile
operator|!=
literal|null
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|ShutdownHookManager
operator|.
name|cancelDeleteOnExit
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Return whenever all paths in the collection are schemaless    *     * @param paths    * @return    */
specifier|public
specifier|static
name|boolean
name|pathsContainNoScheme
parameter_list|(
name|Collection
argument_list|<
name|Path
argument_list|>
name|paths
parameter_list|)
block|{
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
if|if
condition|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Returns the deepest candidate path for the given path.    *     * prioritizes on paths including schema / then includes matches without schema    *     * @param path    * @param candidates  the candidate paths    * @return    */
specifier|public
specifier|static
name|Path
name|getParentRegardlessOfScheme
parameter_list|(
name|Path
name|path
parameter_list|,
name|Collection
argument_list|<
name|Path
argument_list|>
name|candidates
parameter_list|)
block|{
name|Path
name|schemalessPath
init|=
name|Path
operator|.
name|getPathWithoutSchemeAndAuthority
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|path
operator|!=
literal|null
operator|&&
name|schemalessPath
operator|!=
literal|null
condition|;
name|path
operator|=
name|path
operator|.
name|getParent
argument_list|()
operator|,
name|schemalessPath
operator|=
name|schemalessPath
operator|.
name|getParent
argument_list|()
control|)
block|{
if|if
condition|(
name|candidates
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
return|return
name|path
return|;
if|if
condition|(
name|candidates
operator|.
name|contains
argument_list|(
name|schemalessPath
argument_list|)
condition|)
return|return
name|schemalessPath
return|;
block|}
comment|// exception?
return|return
literal|null
return|;
block|}
comment|/**    * Checks whenever path is inside the given subtree    *     * return true iff    *  * path = subtree    *  * subtreeContains(path,d) for any descendant of the subtree node    * @param path    the path in question    * @param subtree    *     * @return    */
specifier|public
specifier|static
name|boolean
name|isPathWithinSubtree
parameter_list|(
name|Path
name|path
parameter_list|,
name|Path
name|subtree
parameter_list|)
block|{
while|while
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|subtree
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|path
operator|=
name|path
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Get the URI of the path. Assume to be local file system if no scheme.    */
specifier|public
specifier|static
name|URI
name|getURI
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|URISyntaxException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// if no scheme in the path, we assume it's file on local fs.
name|uri
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
comment|/**    * Given a path string, get all the jars from the folder or the files themselves.    *    * @param pathString  the path string is the comma-separated path list    * @return            the list of the file names in the format of URI formats.    */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getJarFilesByPath
parameter_list|(
name|String
name|pathString
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathString
operator|==
literal|null
operator|||
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|pathString
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
name|String
index|[]
name|paths
init|=
name|pathString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
try|try
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|getURI
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|p
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The jar file path "
operator|+
name|path
operator|+
literal|" doesn't exist"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|fs
operator|.
name|isDirectory
argument_list|(
name|p
argument_list|)
condition|)
block|{
comment|// add all jar files under the folder
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|,
operator|new
name|GlobFilter
argument_list|(
literal|"*.jar"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid file path "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

