begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A class that defines the constant strings used by the statistics implementation.  */
end_comment

begin_class
specifier|public
class|class
name|StatsSetupConst
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StatsSetupConst
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
enum|enum
name|StatDB
block|{
name|fs
block|{
annotation|@
name|Override
specifier|public
name|String
name|getPublisher
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
literal|"org.apache.hadoop.hive.ql.stats.fs.FSStatsPublisher"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAggregator
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
literal|"org.apache.hadoop.hive.ql.stats.fs.FSStatsAggregator"
return|;
block|}
block|}
block|,
name|custom
block|{
annotation|@
name|Override
specifier|public
name|String
name|getPublisher
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_DEFAULT_PUBLISHER
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAggregator
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_DEFAULT_AGGREGATOR
argument_list|)
return|;
block|}
block|}
block|;
specifier|public
specifier|abstract
name|String
name|getPublisher
parameter_list|(
name|Configuration
name|conf
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|String
name|getAggregator
parameter_list|(
name|Configuration
name|conf
parameter_list|)
function_decl|;
block|}
comment|// statistics stored in metastore
comment|/**    * The name of the statistic Num Files to be published or gathered.    */
specifier|public
specifier|static
specifier|final
name|String
name|NUM_FILES
init|=
literal|"numFiles"
decl_stmt|;
comment|/**    * The name of the statistic Num Partitions to be published or gathered.    */
specifier|public
specifier|static
specifier|final
name|String
name|NUM_PARTITIONS
init|=
literal|"numPartitions"
decl_stmt|;
comment|/**    * The name of the statistic Total Size to be published or gathered.    */
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_SIZE
init|=
literal|"totalSize"
decl_stmt|;
comment|/**    * The name of the statistic Row Count to be published or gathered.    */
specifier|public
specifier|static
specifier|final
name|String
name|ROW_COUNT
init|=
literal|"numRows"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RUN_TIME_ROW_COUNT
init|=
literal|"runTimeNumRows"
decl_stmt|;
comment|/**    * The name of the statistic Raw Data Size to be published or gathered.    */
specifier|public
specifier|static
specifier|final
name|String
name|RAW_DATA_SIZE
init|=
literal|"rawDataSize"
decl_stmt|;
comment|/**    * Temp dir for writing stats from tasks.    */
specifier|public
specifier|static
specifier|final
name|String
name|STATS_TMP_LOC
init|=
literal|"hive.stats.tmp.loc"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STATS_FILE_PREFIX
init|=
literal|"tmpstats-"
decl_stmt|;
comment|/**    * @return List of all supported statistics    */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|supportedStats
init|=
block|{
name|NUM_FILES
block|,
name|ROW_COUNT
block|,
name|TOTAL_SIZE
block|,
name|RAW_DATA_SIZE
block|}
decl_stmt|;
comment|/**    * @return List of all statistics that need to be collected during query execution. These are    * statistics that inherently require a scan of the data.    */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|statsRequireCompute
init|=
operator|new
name|String
index|[]
block|{
name|ROW_COUNT
block|,
name|RAW_DATA_SIZE
block|}
decl_stmt|;
comment|/**    * @return List of statistics that can be collected quickly without requiring a scan of the data.    */
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|fastStats
init|=
operator|new
name|String
index|[]
block|{
name|NUM_FILES
block|,
name|TOTAL_SIZE
block|}
decl_stmt|;
comment|// This string constant is used to indicate to AlterHandler that
comment|// alterPartition/alterTable is happening via statsTask or via user.
specifier|public
specifier|static
specifier|final
name|String
name|STATS_GENERATED
init|=
literal|"STATS_GENERATED"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TASK
init|=
literal|"TASK"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"USER"
decl_stmt|;
comment|// This string constant is used by AlterHandler to figure out that it should not attempt to
comment|// update stats. It is set by any client-side task which wishes to signal that no stats
comment|// update should take place, such as with replication.
specifier|public
specifier|static
specifier|final
name|String
name|DO_NOT_UPDATE_STATS
init|=
literal|"DO_NOT_UPDATE_STATS"
decl_stmt|;
comment|//This string constant will be persisted in metastore to indicate whether corresponding
comment|//table or partition's statistics and table or partition's column statistics are accurate or not.
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN_STATS_ACCURATE
init|=
literal|"COLUMN_STATS_ACCURATE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN_STATS
init|=
literal|"COLUMN_STATS"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BASIC_STATS
init|=
literal|"BASIC_STATS"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CASCADE
init|=
literal|"CASCADE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRUE
init|=
literal|"true"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FALSE
init|=
literal|"false"
decl_stmt|;
comment|// The parameter keys for the table statistics. Those keys are excluded from 'show create table' command output.
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|TABLE_PARAMS_STATS_KEYS
init|=
operator|new
name|String
index|[]
block|{
name|COLUMN_STATS_ACCURATE
block|,
name|NUM_FILES
block|,
name|TOTAL_SIZE
block|,
name|ROW_COUNT
block|,
name|RAW_DATA_SIZE
block|,
name|NUM_PARTITIONS
block|}
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|areBasicStatsUptoDate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|JSONObject
name|stats
init|=
name|parseStatsAcc
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&&
name|stats
operator|.
name|has
argument_list|(
name|BASIC_STATS
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|areColumnStatsUptoDate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
name|JSONObject
name|stats
init|=
name|parseStatsAcc
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|stats
operator|.
name|has
argument_list|(
name|COLUMN_STATS
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|JSONObject
name|columns
init|=
name|stats
operator|.
name|getJSONObject
argument_list|(
name|COLUMN_STATS
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|!=
literal|null
operator|&&
name|columns
operator|.
name|has
argument_list|(
name|colName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
comment|// For backward compatibility, if previous value can not be parsed to a
comment|// json object, it will come here.
name|LOG
operator|.
name|debug
argument_list|(
literal|"In StatsSetupConst, JsonParser can not parse COLUMN_STATS."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// It will only throw JSONException when stats.put(BASIC_STATS, TRUE)
comment|// has duplicate key, which is not possible
comment|// note that set basic stats false will wipe out column stats too.
specifier|public
specifier|static
name|void
name|setBasicStatsState
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|setting
parameter_list|)
block|{
if|if
condition|(
name|setting
operator|.
name|equals
argument_list|(
name|FALSE
argument_list|)
condition|)
block|{
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|params
operator|.
name|containsKey
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|)
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|JSONObject
name|stats
init|=
name|parseStatsAcc
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|stats
operator|.
name|put
argument_list|(
name|BASIC_STATS
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
comment|// impossible to throw any json exceptions.
name|LOG
operator|.
name|trace
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|,
name|stats
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|setColumnStatsState
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
block|{
try|try
block|{
name|JSONObject
name|stats
init|=
name|parseStatsAcc
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|)
argument_list|)
decl_stmt|;
name|JSONObject
name|colStats
decl_stmt|;
if|if
condition|(
name|stats
operator|.
name|has
argument_list|(
name|COLUMN_STATS
argument_list|)
condition|)
block|{
name|colStats
operator|=
name|stats
operator|.
name|getJSONObject
argument_list|(
name|COLUMN_STATS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colStats
operator|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
if|if
condition|(
operator|!
name|colStats
operator|.
name|has
argument_list|(
name|colName
argument_list|)
condition|)
block|{
name|colStats
operator|.
name|put
argument_list|(
name|colName
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
name|stats
operator|.
name|put
argument_list|(
name|COLUMN_STATS
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|,
name|stats
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
comment|// impossible to throw any json exceptions.
name|LOG
operator|.
name|trace
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|clearColumnStatsState
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|String
name|statsAcc
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
operator|(
name|statsAcc
operator|=
name|params
operator|.
name|get
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// statsAcc may not be jason format, which will throw exception
name|JSONObject
name|stats
init|=
name|parseStatsAcc
argument_list|(
name|statsAcc
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|.
name|has
argument_list|(
name|COLUMN_STATS
argument_list|)
condition|)
block|{
name|stats
operator|.
name|remove
argument_list|(
name|COLUMN_STATS
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|,
name|stats
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|removeColumnStatsState
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
block|{
name|String
name|statsAcc
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
operator|(
name|statsAcc
operator|=
name|params
operator|.
name|get
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
comment|// statsAcc may not be jason format, which will throw exception
name|JSONObject
name|stats
init|=
name|parseStatsAcc
argument_list|(
name|statsAcc
argument_list|)
decl_stmt|;
try|try
block|{
name|JSONObject
name|colStats
init|=
name|stats
operator|.
name|getJSONObject
argument_list|(
name|COLUMN_STATS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
if|if
condition|(
name|colStats
operator|.
name|has
argument_list|(
name|colName
argument_list|)
condition|)
block|{
name|colStats
operator|.
name|remove
argument_list|(
name|colName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|colStats
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|stats
operator|.
name|put
argument_list|(
name|COLUMN_STATS
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|.
name|remove
argument_list|(
name|COLUMN_STATS
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
name|COLUMN_STATS_ACCURATE
argument_list|,
name|stats
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|setBasicStatsStateForCreateTable
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|setting
parameter_list|)
block|{
if|if
condition|(
name|TRUE
operator|.
name|equals
argument_list|(
name|setting
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|stat
range|:
name|StatsSetupConst
operator|.
name|supportedStats
control|)
block|{
name|params
operator|.
name|put
argument_list|(
name|stat
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
block|}
name|setBasicStatsState
argument_list|(
name|params
argument_list|,
name|setting
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|JSONObject
name|parseStatsAcc
parameter_list|(
name|String
name|statsAcc
parameter_list|)
block|{
if|if
condition|(
name|statsAcc
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|JSONObject
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
return|return
operator|new
name|JSONObject
argument_list|(
name|statsAcc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
return|return
name|statsAccUpgrade
argument_list|(
name|statsAcc
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
specifier|static
name|JSONObject
name|statsAccUpgrade
parameter_list|(
name|String
name|statsAcc
parameter_list|)
block|{
name|JSONObject
name|stats
decl_stmt|;
comment|// old format of statsAcc, e.g., TRUE or FALSE
name|LOG
operator|.
name|debug
argument_list|(
literal|"In StatsSetupConst, JsonParser can not parse statsAcc."
argument_list|)
expr_stmt|;
name|stats
operator|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|statsAcc
operator|.
name|equals
argument_list|(
name|TRUE
argument_list|)
condition|)
block|{
name|stats
operator|.
name|put
argument_list|(
name|BASIC_STATS
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|.
name|put
argument_list|(
name|BASIC_STATS
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JSONException
name|e1
parameter_list|)
block|{
comment|// impossible to throw any json exceptions.
name|LOG
operator|.
name|trace
argument_list|(
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|stats
return|;
block|}
block|}
end_class

end_unit

