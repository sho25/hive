begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|metrics2
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|json
operator|.
name|MetricsModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A metrics reporter for CodahaleMetrics that dumps metrics periodically into a file in JSON format.  */
end_comment

begin_class
specifier|public
class|class
name|JsonFileMetricsReporter
implements|implements
name|CodahaleReporter
block|{
specifier|private
specifier|final
name|MetricRegistry
name|metricRegistry
decl_stmt|;
specifier|private
specifier|final
name|ObjectWriter
name|jsonWriter
decl_stmt|;
specifier|private
specifier|final
name|ScheduledExecutorService
name|executorService
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
specifier|final
name|long
name|interval
decl_stmt|;
specifier|private
specifier|final
name|String
name|pathString
decl_stmt|;
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JsonFileMetricsReporter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|JsonFileMetricsReporter
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|metricRegistry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|jsonWriter
operator|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|registerModule
argument_list|(
operator|new
name|MetricsModule
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
expr_stmt|;
name|executorService
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|interval
operator|=
name|conf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_METRICS_JSON_FILE_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|pathString
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_METRICS_JSON_FILE_LOCATION
argument_list|)
expr_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
name|pathString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
specifier|final
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
name|pathString
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
name|URI
name|tmpPathURI
init|=
name|tmpPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
decl_stmt|;
try|try
block|{
if|if
condition|(
name|tmpPathURI
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
operator|&&
name|tmpPathURI
operator|.
name|getAuthority
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//default local
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|tmpPathURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Unable to access filesystem for path "
operator|+
name|tmpPath
operator|+
literal|". Aborting reporting"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|Runnable
name|task
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|String
name|json
init|=
literal|null
decl_stmt|;
try|try
block|{
name|json
operator|=
name|jsonWriter
operator|.
name|writeValueAsString
argument_list|(
name|metricRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonProcessingException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Unable to convert json to string "
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|BufferedWriter
name|bw
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|.
name|delete
argument_list|(
name|tmpPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bw
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|tmpPath
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bw
operator|.
name|write
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|tmpPath
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0644
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Unable to write to temp file "
operator|+
name|tmpPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
if|if
condition|(
name|bw
operator|!=
literal|null
condition|)
block|{
name|bw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|fs
operator|.
name|rename
argument_list|(
name|tmpPath
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setPermission
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|0644
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Unable to rename temp file "
operator|+
name|tmpPath
operator|+
literal|" to "
operator|+
name|pathString
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// catch all errors (throwable and execptions to prevent subsequent tasks from being suppressed)
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error executing scheduled task "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|executorService
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|task
argument_list|,
literal|0
argument_list|,
name|interval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

