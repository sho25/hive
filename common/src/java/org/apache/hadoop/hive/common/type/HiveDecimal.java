begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_comment
comment|/**  *  * HiveDecimal. Simple wrapper for BigDecimal. Adds fixed max precision and non scientific string  * representation  *  */
end_comment

begin_class
specifier|public
class|class
name|HiveDecimal
implements|implements
name|Comparable
argument_list|<
name|HiveDecimal
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|HiveDecimal
name|ZERO
init|=
operator|new
name|HiveDecimal
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MAX_PRECISION
init|=
literal|36
decl_stmt|;
comment|// multiple of 9 for compact representation
specifier|public
specifier|static
specifier|final
name|HiveDecimal
name|ONE
init|=
operator|new
name|HiveDecimal
argument_list|(
name|BigDecimal
operator|.
name|ONE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ROUND_FLOOR
init|=
name|BigDecimal
operator|.
name|ROUND_FLOOR
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ROUND_CEILING
init|=
name|BigDecimal
operator|.
name|ROUND_CEILING
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ROUND_HALF_UP
init|=
name|BigDecimal
operator|.
name|ROUND_HALF_UP
decl_stmt|;
specifier|private
name|BigDecimal
name|bd
init|=
name|BigDecimal
operator|.
name|ZERO
decl_stmt|;
specifier|public
name|HiveDecimal
parameter_list|(
name|BigDecimal
name|b
parameter_list|)
block|{
name|this
argument_list|(
name|b
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveDecimal
parameter_list|(
name|BigDecimal
name|b
parameter_list|,
name|boolean
name|allowRounding
parameter_list|)
block|{
name|bd
operator|=
name|this
operator|.
name|normalize
argument_list|(
name|b
argument_list|,
name|MAX_PRECISION
argument_list|,
name|allowRounding
argument_list|)
expr_stmt|;
if|if
condition|(
name|bd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"Assignment would result in truncation"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HiveDecimal
parameter_list|(
name|BigInteger
name|unscaled
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|bd
operator|=
name|this
operator|.
name|normalize
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|unscaled
argument_list|,
name|scale
argument_list|)
argument_list|,
name|MAX_PRECISION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|bd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"Assignment would result in truncation"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HiveDecimal
parameter_list|(
name|String
name|dec
parameter_list|)
block|{
name|bd
operator|=
name|this
operator|.
name|normalize
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|dec
argument_list|)
argument_list|,
name|MAX_PRECISION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|bd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"Assignment would result in truncation"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HiveDecimal
parameter_list|(
name|BigInteger
name|bi
parameter_list|)
block|{
name|bd
operator|=
name|this
operator|.
name|normalize
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|bi
argument_list|)
argument_list|,
name|MAX_PRECISION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|bd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"Assignment would result in truncation"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HiveDecimal
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveDecimal
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|bd
operator|.
name|toPlainString
argument_list|()
return|;
block|}
specifier|public
name|HiveDecimal
name|setScale
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|bd
operator|.
name|setScale
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
return|return
name|bd
operator|.
name|compareTo
argument_list|(
name|dec
operator|.
name|bd
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|bd
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|HiveDecimal
operator|)
name|obj
operator|)
operator|.
name|bd
argument_list|)
return|;
block|}
specifier|public
name|int
name|scale
parameter_list|()
block|{
return|return
name|bd
operator|.
name|scale
argument_list|()
return|;
block|}
specifier|public
name|int
name|precision
parameter_list|()
block|{
return|return
name|bd
operator|.
name|precision
argument_list|()
return|;
block|}
specifier|public
name|int
name|intValue
parameter_list|()
block|{
return|return
name|bd
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|double
name|doubleValue
parameter_list|()
block|{
return|return
name|bd
operator|.
name|doubleValue
argument_list|()
return|;
block|}
specifier|public
name|long
name|longValue
parameter_list|()
block|{
return|return
name|bd
operator|.
name|longValue
argument_list|()
return|;
block|}
specifier|public
name|short
name|shortValue
parameter_list|()
block|{
return|return
name|bd
operator|.
name|shortValue
argument_list|()
return|;
block|}
specifier|public
name|float
name|floatValue
parameter_list|()
block|{
return|return
name|bd
operator|.
name|floatValue
argument_list|()
return|;
block|}
specifier|public
name|BigDecimal
name|bigDecimalValue
parameter_list|()
block|{
return|return
name|bd
return|;
block|}
specifier|public
name|byte
name|byteValue
parameter_list|()
block|{
return|return
name|bd
operator|.
name|byteValue
argument_list|()
return|;
block|}
specifier|public
name|HiveDecimal
name|setScale
parameter_list|(
name|int
name|adjustedScale
parameter_list|,
name|int
name|rm
parameter_list|)
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|bd
operator|.
name|setScale
argument_list|(
name|adjustedScale
argument_list|,
name|rm
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|HiveDecimal
name|subtract
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|bd
operator|.
name|subtract
argument_list|(
name|dec
operator|.
name|bd
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|HiveDecimal
name|multiply
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|bd
operator|.
name|multiply
argument_list|(
name|dec
operator|.
name|bd
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|BigInteger
name|unscaledValue
parameter_list|()
block|{
return|return
name|bd
operator|.
name|unscaledValue
argument_list|()
return|;
block|}
specifier|public
name|HiveDecimal
name|scaleByPowerOfTen
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|bd
operator|.
name|scaleByPowerOfTen
argument_list|(
name|n
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|HiveDecimal
name|abs
parameter_list|()
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|bd
operator|.
name|abs
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|HiveDecimal
name|negate
parameter_list|()
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|bd
operator|.
name|negate
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|HiveDecimal
name|add
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|bd
operator|.
name|add
argument_list|(
name|dec
operator|.
name|bd
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|HiveDecimal
name|pow
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|bd
operator|.
name|pow
argument_list|(
name|n
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|HiveDecimal
name|remainder
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|bd
operator|.
name|remainder
argument_list|(
name|dec
operator|.
name|bd
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|HiveDecimal
name|divide
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
return|return
operator|new
name|HiveDecimal
argument_list|(
name|bd
operator|.
name|divide
argument_list|(
name|dec
operator|.
name|bd
argument_list|,
name|MAX_PRECISION
argument_list|,
name|RoundingMode
operator|.
name|HALF_UP
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|BigDecimal
name|trim
parameter_list|(
name|BigDecimal
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Special case for 0, because java doesn't strip zeros correctly on that number.
name|d
operator|=
name|BigDecimal
operator|.
name|ZERO
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|d
operator|.
name|stripTrailingZeros
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|scale
argument_list|()
operator|<
literal|0
condition|)
block|{
comment|// no negative scale decimals
name|d
operator|=
name|d
operator|.
name|setScale
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|d
return|;
block|}
specifier|private
name|BigDecimal
name|normalize
parameter_list|(
name|BigDecimal
name|d
parameter_list|,
name|int
name|precision
parameter_list|,
name|boolean
name|allowRounding
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|d
operator|=
name|trim
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|// compute the number of digits of the decimal
name|int
name|valuePrecision
init|=
name|d
operator|.
name|precision
argument_list|()
operator|+
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|d
operator|.
name|scale
argument_list|()
operator|-
name|d
operator|.
name|precision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuePrecision
operator|>
name|precision
condition|)
block|{
if|if
condition|(
name|allowRounding
condition|)
block|{
comment|// round "half up" until we hit the decimal point
name|int
name|adjustedScale
init|=
name|d
operator|.
name|scale
argument_list|()
operator|-
operator|(
name|valuePrecision
operator|-
name|precision
operator|)
decl_stmt|;
if|if
condition|(
name|adjustedScale
operator|>=
literal|0
condition|)
block|{
name|d
operator|=
name|d
operator|.
name|setScale
argument_list|(
name|adjustedScale
argument_list|,
name|RoundingMode
operator|.
name|HALF_UP
argument_list|)
expr_stmt|;
name|d
operator|=
name|trim
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|d
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|d
return|;
block|}
block|}
end_class

end_unit

