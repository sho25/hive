begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * The sections of a file.  */
end_comment

begin_class
specifier|public
class|class
name|DiskRange
block|{
comment|/** The first address. */
specifier|public
name|long
name|offset
decl_stmt|;
comment|/** The address afterwards. */
specifier|public
name|long
name|end
decl_stmt|;
specifier|public
name|DiskRange
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|end
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
if|if
condition|(
name|end
operator|<
name|offset
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid range "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DiskRange
name|otherR
init|=
operator|(
name|DiskRange
operator|)
name|other
decl_stmt|;
return|return
name|otherR
operator|.
name|offset
operator|==
name|offset
operator|&&
name|otherR
operator|.
name|end
operator|==
name|end
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"range start: "
operator|+
name|offset
operator|+
literal|" end: "
operator|+
name|end
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
name|long
name|len
init|=
name|this
operator|.
name|end
operator|-
name|this
operator|.
name|offset
decl_stmt|;
assert|assert
name|len
operator|<=
name|Integer
operator|.
name|MAX_VALUE
assert|;
return|return
operator|(
name|int
operator|)
name|len
return|;
block|}
comment|// For subclasses
specifier|public
name|boolean
name|hasData
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|DiskRange
name|slice
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|end
parameter_list|)
block|{
comment|// Rather, unexpected usage exception.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|ByteBuffer
name|getData
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

