begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|jsonexplain
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|jsonexplain
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|TezJsonParser
implements|implements
name|JsonParser
block|{
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|stages
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
argument_list|()
decl_stmt|;
empty_stmt|;
specifier|protected
specifier|final
name|Log
name|LOG
decl_stmt|;
comment|// the object that has been printed.
specifier|public
specifier|final
name|Set
argument_list|<
name|Object
argument_list|>
name|printSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// the vertex that should be inlined.<Operator, list of Vertex that is
comment|// inlined>
specifier|public
specifier|final
name|Map
argument_list|<
name|Op
argument_list|,
name|List
argument_list|<
name|Connection
argument_list|>
argument_list|>
name|inlineMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|TezJsonParser
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|LOG
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|extractStagesAndPlans
parameter_list|(
name|JSONObject
name|inputObject
parameter_list|)
throws|throws
name|JSONException
throws|,
name|JsonParseException
throws|,
name|JsonMappingException
throws|,
name|Exception
throws|,
name|IOException
block|{
comment|// extract stages
name|JSONObject
name|dependency
init|=
name|inputObject
operator|.
name|getJSONObject
argument_list|(
literal|"STAGE DEPENDENCIES"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dependency
operator|!=
literal|null
operator|&&
name|dependency
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// iterate for the first time to get all the names of stages.
for|for
control|(
name|String
name|stageName
range|:
name|JSONObject
operator|.
name|getNames
argument_list|(
name|dependency
argument_list|)
control|)
block|{
name|this
operator|.
name|stages
operator|.
name|put
argument_list|(
name|stageName
argument_list|,
operator|new
name|Stage
argument_list|(
name|stageName
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// iterate for the second time to get all the dependency.
for|for
control|(
name|String
name|stageName
range|:
name|JSONObject
operator|.
name|getNames
argument_list|(
name|dependency
argument_list|)
control|)
block|{
name|JSONObject
name|dependentStageNames
init|=
name|dependency
operator|.
name|getJSONObject
argument_list|(
name|stageName
argument_list|)
decl_stmt|;
name|this
operator|.
name|stages
operator|.
name|get
argument_list|(
name|stageName
argument_list|)
operator|.
name|addDependency
argument_list|(
name|dependentStageNames
argument_list|,
name|this
operator|.
name|stages
argument_list|)
expr_stmt|;
block|}
block|}
comment|// extract stage plans
name|JSONObject
name|stagePlans
init|=
name|inputObject
operator|.
name|getJSONObject
argument_list|(
literal|"STAGE PLANS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stagePlans
operator|!=
literal|null
operator|&&
name|stagePlans
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|stageName
range|:
name|JSONObject
operator|.
name|getNames
argument_list|(
name|stagePlans
argument_list|)
control|)
block|{
name|JSONObject
name|stagePlan
init|=
name|stagePlans
operator|.
name|getJSONObject
argument_list|(
name|stageName
argument_list|)
decl_stmt|;
name|this
operator|.
name|stages
operator|.
name|get
argument_list|(
name|stageName
argument_list|)
operator|.
name|extractVertex
argument_list|(
name|stagePlan
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param indentFlag    *          help to generate correct indent    * @return    */
specifier|public
specifier|static
name|String
name|prefixString
parameter_list|(
name|List
argument_list|<
name|Boolean
argument_list|>
name|indentFlag
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|indentFlag
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|indentFlag
operator|.
name|get
argument_list|(
name|index
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"|  "
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @param indentFlag    * @param tail    *          help to generate correct indent with a specific tail    * @return    */
specifier|public
specifier|static
name|String
name|prefixString
parameter_list|(
name|List
argument_list|<
name|Boolean
argument_list|>
name|indentFlag
parameter_list|,
name|String
name|tail
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|indentFlag
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|indentFlag
operator|.
name|get
argument_list|(
name|index
argument_list|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|"|  "
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
block|}
name|int
name|len
init|=
name|sb
operator|.
name|length
argument_list|()
decl_stmt|;
return|return
name|sb
operator|.
name|replace
argument_list|(
name|len
operator|-
name|tail
operator|.
name|length
argument_list|()
argument_list|,
name|len
argument_list|,
name|tail
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|print
parameter_list|(
name|JSONObject
name|inputObject
parameter_list|,
name|PrintStream
name|outputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JsonParser is parsing:"
operator|+
name|inputObject
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|extractStagesAndPlans
argument_list|(
name|inputObject
argument_list|)
expr_stmt|;
name|Printer
name|printer
init|=
operator|new
name|Printer
argument_list|()
decl_stmt|;
comment|// print out the cbo info
if|if
condition|(
name|inputObject
operator|.
name|has
argument_list|(
literal|"cboInfo"
argument_list|)
condition|)
block|{
name|printer
operator|.
name|println
argument_list|(
name|inputObject
operator|.
name|getString
argument_list|(
literal|"cboInfo"
argument_list|)
argument_list|)
expr_stmt|;
name|printer
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|// print out the vertex dependency in root stage
for|for
control|(
name|Stage
name|candidate
range|:
name|this
operator|.
name|stages
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|candidate
operator|.
name|tezStageDependency
operator|!=
literal|null
operator|&&
name|candidate
operator|.
name|tezStageDependency
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|printer
operator|.
name|println
argument_list|(
literal|"Vertex dependency in root stage"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Vertex
argument_list|,
name|List
argument_list|<
name|Connection
argument_list|>
argument_list|>
name|entry
range|:
name|candidate
operator|.
name|tezStageDependency
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<- "
argument_list|)
expr_stmt|;
name|boolean
name|printcomma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Connection
name|connection
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|printcomma
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printcomma
operator|=
literal|true
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|connection
operator|.
name|from
operator|.
name|name
operator|+
literal|" ("
operator|+
name|connection
operator|.
name|type
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|printer
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|printer
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Boolean
argument_list|>
name|indentFlag
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// print out all the stages that have no childStages.
for|for
control|(
name|Stage
name|candidate
range|:
name|this
operator|.
name|stages
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|candidate
operator|.
name|childStages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|candidate
operator|.
name|print
argument_list|(
name|printer
argument_list|,
name|indentFlag
argument_list|)
expr_stmt|;
block|}
block|}
name|outputStream
operator|.
name|println
argument_list|(
name|printer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addInline
parameter_list|(
name|Op
name|op
parameter_list|,
name|Connection
name|connection
parameter_list|)
block|{
name|List
argument_list|<
name|Connection
argument_list|>
name|list
init|=
name|inlineMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|inlineMap
operator|.
name|put
argument_list|(
name|op
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isInline
parameter_list|(
name|Vertex
name|v
parameter_list|)
block|{
for|for
control|(
name|List
argument_list|<
name|Connection
argument_list|>
name|list
range|:
name|inlineMap
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Connection
name|connection
range|:
name|list
control|)
block|{
if|if
condition|(
name|connection
operator|.
name|from
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

