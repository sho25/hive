begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|HiveBaseChar
block|{
specifier|protected
name|String
name|value
decl_stmt|;
specifier|protected
name|HiveBaseChar
parameter_list|()
block|{   }
comment|/**    * Sets the string value to a new value, obeying the max length defined for this object.    * @param val new value    */
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|val
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
name|value
operator|=
name|HiveBaseChar
operator|.
name|enforceMaxLength
argument_list|(
name|val
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|HiveBaseChar
name|val
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
name|setValue
argument_list|(
name|val
operator|.
name|value
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|enforceMaxLength
parameter_list|(
name|String
name|val
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
name|String
name|value
init|=
name|val
decl_stmt|;
if|if
condition|(
name|maxLength
operator|>
literal|0
condition|)
block|{
name|int
name|valLength
init|=
name|val
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|valLength
operator|>
name|maxLength
condition|)
block|{
comment|// Truncate the excess chars to fit the character length.
comment|// Also make sure we take supplementary chars into account.
name|value
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|val
operator|.
name|offsetByCodePoints
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|String
name|getPaddedValue
parameter_list|(
name|String
name|val
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
if|if
condition|(
name|maxLength
operator|<
literal|0
condition|)
block|{
return|return
name|val
return|;
block|}
name|int
name|valLength
init|=
name|val
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|valLength
operator|>
name|maxLength
condition|)
block|{
return|return
name|enforceMaxLength
argument_list|(
name|val
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
if|if
condition|(
name|maxLength
operator|>
name|valLength
condition|)
block|{
comment|// Make sure we pad the right amount of spaces; valLength is in terms of code points,
comment|// while StringUtils.rpad() is based on the number of java chars.
name|int
name|padLength
init|=
name|val
operator|.
name|length
argument_list|()
operator|+
operator|(
name|maxLength
operator|-
name|valLength
operator|)
decl_stmt|;
name|val
operator|=
name|StringUtils
operator|.
name|rightPad
argument_list|(
name|val
argument_list|,
name|padLength
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|int
name|getCharacterLength
parameter_list|()
block|{
return|return
name|value
operator|.
name|codePointCount
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

