begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|jsonexplain
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|jsonexplain
operator|.
name|tez
operator|.
name|Vertex
operator|.
name|VertexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Stage
block|{
comment|//external name is used to show at the console
name|String
name|externalName
decl_stmt|;
comment|//internal name is used to track the stages
specifier|public
specifier|final
name|String
name|internalName
decl_stmt|;
comment|//tezJsonParser
specifier|public
specifier|final
name|TezJsonParser
name|parser
decl_stmt|;
comment|// upstream stages, e.g., root stage
specifier|public
specifier|final
name|List
argument_list|<
name|Stage
argument_list|>
name|parentStages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// downstream stages.
specifier|public
specifier|final
name|List
argument_list|<
name|Stage
argument_list|>
name|childStages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Vertex
argument_list|>
name|vertexs
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Vertex
argument_list|,
name|List
argument_list|<
name|Connection
argument_list|>
argument_list|>
name|tezStageDependency
decl_stmt|;
comment|// some stage may contain only a single operator, e.g., create table operator,
comment|// fetch operator.
name|Op
name|op
decl_stmt|;
specifier|public
name|Stage
parameter_list|(
name|String
name|name
parameter_list|,
name|TezJsonParser
name|tezJsonParser
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|internalName
operator|=
name|name
expr_stmt|;
name|externalName
operator|=
name|name
expr_stmt|;
name|parser
operator|=
name|tezJsonParser
expr_stmt|;
block|}
specifier|public
name|void
name|addDependency
parameter_list|(
name|JSONObject
name|object
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|stages
parameter_list|)
throws|throws
name|JSONException
block|{
if|if
condition|(
name|object
operator|.
name|has
argument_list|(
literal|"DEPENDENT STAGES"
argument_list|)
condition|)
block|{
name|String
name|names
init|=
name|object
operator|.
name|getString
argument_list|(
literal|"DEPENDENT STAGES"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|Stage
name|parent
init|=
name|stages
operator|.
name|get
argument_list|(
name|name
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|parentStages
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|parent
operator|.
name|childStages
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|object
operator|.
name|has
argument_list|(
literal|"CONDITIONAL CHILD TASKS"
argument_list|)
condition|)
block|{
name|String
name|names
init|=
name|object
operator|.
name|getString
argument_list|(
literal|"CONDITIONAL CHILD TASKS"
argument_list|)
decl_stmt|;
name|this
operator|.
name|externalName
operator|=
name|this
operator|.
name|internalName
operator|+
literal|"(CONDITIONAL CHILD TASKS: "
operator|+
name|names
operator|+
literal|")"
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|Stage
name|child
init|=
name|stages
operator|.
name|get
argument_list|(
name|name
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|child
operator|.
name|externalName
operator|=
name|child
operator|.
name|internalName
operator|+
literal|"(CONDITIONAL)"
expr_stmt|;
name|child
operator|.
name|parentStages
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|childStages
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param object    * @throws Exception    *           If the object of stage contains "Tez", we need to extract the    *           vertices and edges Else we need to directly extract operators    *           and/or attributes.    */
specifier|public
name|void
name|extractVertex
parameter_list|(
name|JSONObject
name|object
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|object
operator|.
name|has
argument_list|(
literal|"Tez"
argument_list|)
condition|)
block|{
name|this
operator|.
name|tezStageDependency
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|JSONObject
name|tez
init|=
operator|(
name|JSONObject
operator|)
name|object
operator|.
name|get
argument_list|(
literal|"Tez"
argument_list|)
decl_stmt|;
name|JSONObject
name|vertices
init|=
name|tez
operator|.
name|getJSONObject
argument_list|(
literal|"Vertices:"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tez
operator|.
name|has
argument_list|(
literal|"Edges:"
argument_list|)
condition|)
block|{
name|JSONObject
name|edges
init|=
name|tez
operator|.
name|getJSONObject
argument_list|(
literal|"Edges:"
argument_list|)
decl_stmt|;
comment|// iterate for the first time to get all the vertices
for|for
control|(
name|String
name|to
range|:
name|JSONObject
operator|.
name|getNames
argument_list|(
name|edges
argument_list|)
control|)
block|{
name|vertexs
operator|.
name|put
argument_list|(
name|to
argument_list|,
operator|new
name|Vertex
argument_list|(
name|to
argument_list|,
name|vertices
operator|.
name|getJSONObject
argument_list|(
name|to
argument_list|)
argument_list|,
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// iterate for the second time to get all the vertex dependency
for|for
control|(
name|String
name|to
range|:
name|JSONObject
operator|.
name|getNames
argument_list|(
name|edges
argument_list|)
control|)
block|{
name|Object
name|o
init|=
name|edges
operator|.
name|get
argument_list|(
name|to
argument_list|)
decl_stmt|;
name|Vertex
name|v
init|=
name|vertexs
operator|.
name|get
argument_list|(
name|to
argument_list|)
decl_stmt|;
comment|// 1 to 1 mapping
if|if
condition|(
name|o
operator|instanceof
name|JSONObject
condition|)
block|{
name|JSONObject
name|obj
init|=
operator|(
name|JSONObject
operator|)
name|o
decl_stmt|;
name|String
name|parent
init|=
name|obj
operator|.
name|getString
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|Vertex
name|parentVertex
init|=
name|vertexs
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentVertex
operator|==
literal|null
condition|)
block|{
name|parentVertex
operator|=
operator|new
name|Vertex
argument_list|(
name|parent
argument_list|,
name|vertices
operator|.
name|getJSONObject
argument_list|(
name|parent
argument_list|)
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|vertexs
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|parentVertex
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
name|obj
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
comment|// for union vertex, we reverse the dependency relationship
if|if
condition|(
operator|!
literal|"CONTAINS"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|v
operator|.
name|addDependency
argument_list|(
operator|new
name|Connection
argument_list|(
name|type
argument_list|,
name|parentVertex
argument_list|)
argument_list|)
expr_stmt|;
name|parentVertex
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|parentVertex
operator|.
name|children
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentVertex
operator|.
name|addDependency
argument_list|(
operator|new
name|Connection
argument_list|(
name|type
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|.
name|children
operator|.
name|add
argument_list|(
name|parentVertex
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|tezStageDependency
operator|.
name|put
argument_list|(
name|v
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Connection
argument_list|(
name|type
argument_list|,
name|parentVertex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// 1 to many mapping
name|JSONArray
name|from
init|=
operator|(
name|JSONArray
operator|)
name|o
decl_stmt|;
name|List
argument_list|<
name|Connection
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|from
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|JSONObject
name|obj
init|=
name|from
operator|.
name|getJSONObject
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|parent
init|=
name|obj
operator|.
name|getString
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|Vertex
name|parentVertex
init|=
name|vertexs
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentVertex
operator|==
literal|null
condition|)
block|{
name|parentVertex
operator|=
operator|new
name|Vertex
argument_list|(
name|parent
argument_list|,
name|vertices
operator|.
name|getJSONObject
argument_list|(
name|parent
argument_list|)
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|vertexs
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|parentVertex
argument_list|)
expr_stmt|;
block|}
name|String
name|type
init|=
name|obj
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"CONTAINS"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|v
operator|.
name|addDependency
argument_list|(
operator|new
name|Connection
argument_list|(
name|type
argument_list|,
name|parentVertex
argument_list|)
argument_list|)
expr_stmt|;
name|parentVertex
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|parentVertex
operator|.
name|children
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentVertex
operator|.
name|addDependency
argument_list|(
operator|new
name|Connection
argument_list|(
name|type
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|.
name|children
operator|.
name|add
argument_list|(
name|parentVertex
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
operator|new
name|Connection
argument_list|(
name|type
argument_list|,
name|parentVertex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|tezStageDependency
operator|.
name|put
argument_list|(
name|v
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|vertexName
range|:
name|JSONObject
operator|.
name|getNames
argument_list|(
name|vertices
argument_list|)
control|)
block|{
name|vertexs
operator|.
name|put
argument_list|(
name|vertexName
argument_list|,
operator|new
name|Vertex
argument_list|(
name|vertexName
argument_list|,
name|vertices
operator|.
name|getJSONObject
argument_list|(
name|vertexName
argument_list|)
argument_list|,
name|parser
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The opTree in vertex is extracted
for|for
control|(
name|Vertex
name|v
range|:
name|vertexs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|v
operator|.
name|vertexType
operator|==
name|VertexType
operator|.
name|MAP
operator|||
name|v
operator|.
name|vertexType
operator|==
name|VertexType
operator|.
name|REDUCE
condition|)
block|{
name|v
operator|.
name|extractOpTree
argument_list|()
expr_stmt|;
name|v
operator|.
name|checkMultiReduceOperator
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|String
index|[]
name|names
init|=
name|JSONObject
operator|.
name|getNames
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"Operator"
argument_list|)
condition|)
block|{
name|this
operator|.
name|op
operator|=
name|extractOp
argument_list|(
name|name
argument_list|,
name|object
operator|.
name|getJSONObject
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|object
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|object
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * @param opName    * @param opObj    * @return    * @throws Exception    *           This method address the create table operator, fetch operator,    *           etc    */
name|Op
name|extractOp
parameter_list|(
name|String
name|opName
parameter_list|,
name|JSONObject
name|opObj
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Vertex
name|v
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|opObj
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|names
init|=
name|JSONObject
operator|.
name|getNames
argument_list|(
name|opObj
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|Object
name|o
init|=
name|opObj
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPrintable
argument_list|(
name|o
argument_list|)
operator|&&
operator|!
name|o
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|JSONObject
condition|)
block|{
name|JSONObject
name|attrObj
init|=
operator|(
name|JSONObject
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|attrObj
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"Processor Tree:"
argument_list|)
condition|)
block|{
name|JSONObject
name|object
init|=
operator|new
name|JSONObject
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|object
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|attrObj
argument_list|)
expr_stmt|;
name|v
operator|=
operator|new
name|Vertex
argument_list|(
literal|null
argument_list|,
name|object
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|v
operator|.
name|extractOpTree
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|attrName
range|:
name|JSONObject
operator|.
name|getNames
argument_list|(
name|attrObj
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|attrObj
operator|.
name|get
argument_list|(
name|attrName
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|attrName
argument_list|,
name|attrObj
operator|.
name|get
argument_list|(
name|attrName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unsupported object in "
operator|+
name|this
operator|.
name|internalName
argument_list|)
throw|;
block|}
block|}
block|}
name|Op
name|op
init|=
operator|new
name|Op
argument_list|(
name|opName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|attrs
argument_list|,
literal|null
argument_list|,
name|v
argument_list|,
name|parser
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|addInline
argument_list|(
name|op
argument_list|,
operator|new
name|Connection
argument_list|(
literal|null
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
specifier|private
name|boolean
name|isPrintable
parameter_list|(
name|Object
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|instanceof
name|Boolean
operator|||
name|val
operator|instanceof
name|String
operator|||
name|val
operator|instanceof
name|Integer
operator|||
name|val
operator|instanceof
name|Long
operator|||
name|val
operator|instanceof
name|Byte
operator|||
name|val
operator|instanceof
name|Float
operator|||
name|val
operator|instanceof
name|Double
operator|||
name|val
operator|instanceof
name|Path
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
name|val
operator|.
name|getClass
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|print
parameter_list|(
name|Printer
name|printer
parameter_list|,
name|int
name|indentFlag
parameter_list|)
throws|throws
name|Exception
block|{
comment|// print stagename
if|if
condition|(
name|parser
operator|.
name|printSet
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|)
block|{
name|printer
operator|.
name|println
argument_list|(
name|TezJsonParser
operator|.
name|prefixString
argument_list|(
name|indentFlag
argument_list|)
operator|+
literal|" Please refer to the previous "
operator|+
name|externalName
argument_list|)
expr_stmt|;
return|return;
block|}
name|parser
operator|.
name|printSet
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|printer
operator|.
name|println
argument_list|(
name|TezJsonParser
operator|.
name|prefixString
argument_list|(
name|indentFlag
argument_list|)
operator|+
name|externalName
argument_list|)
expr_stmt|;
comment|// print vertexes
name|indentFlag
operator|++
expr_stmt|;
for|for
control|(
name|Vertex
name|candidate
range|:
name|this
operator|.
name|vertexs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|parser
operator|.
name|isInline
argument_list|(
name|candidate
argument_list|)
operator|&&
name|candidate
operator|.
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|candidate
operator|.
name|print
argument_list|(
name|printer
argument_list|,
name|indentFlag
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|attrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|printer
operator|.
name|println
argument_list|(
name|TezJsonParser
operator|.
name|prefixString
argument_list|(
name|indentFlag
argument_list|)
operator|+
name|TezJsonParserUtils
operator|.
name|attrsToString
argument_list|(
name|attrs
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|print
argument_list|(
name|printer
argument_list|,
name|indentFlag
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|indentFlag
operator|++
expr_stmt|;
comment|// print dependent stages
for|for
control|(
name|Stage
name|stage
range|:
name|this
operator|.
name|parentStages
control|)
block|{
name|stage
operator|.
name|print
argument_list|(
name|printer
argument_list|,
name|indentFlag
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

