begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatterBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|ResolverStyle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|SignStyle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|DAY_OF_MONTH
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|HOUR_OF_DAY
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|MINUTE_OF_HOUR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|MONTH_OF_YEAR
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|SECOND_OF_MINUTE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
operator|.
name|YEAR
import|;
end_import

begin_comment
comment|/**  * This is the internal type for Timestamp.  * The full qualified input format of Timestamp is  * "yyyy-MM-dd HH:mm:ss[.SSS...]", where the time part is optional.  * If time part is absent, a default '00:00:00.0' will be used.  */
end_comment

begin_class
specifier|public
class|class
name|Timestamp
implements|implements
name|Comparable
argument_list|<
name|Timestamp
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|LocalDateTime
name|EPOCH
init|=
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|PARSE_FORMATTER
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|PRINT_FORMATTER
decl_stmt|;
static|static
block|{
name|DateTimeFormatterBuilder
name|builder
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
decl_stmt|;
comment|// Date part
name|builder
operator|.
name|appendValue
argument_list|(
name|YEAR
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
name|SignStyle
operator|.
name|NORMAL
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
operator|.
name|appendValue
argument_list|(
name|MONTH_OF_YEAR
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|SignStyle
operator|.
name|NORMAL
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|'-'
argument_list|)
operator|.
name|appendValue
argument_list|(
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|SignStyle
operator|.
name|NORMAL
argument_list|)
expr_stmt|;
comment|// Time part
name|builder
operator|.
name|optionalStart
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|" "
argument_list|)
operator|.
name|appendValue
argument_list|(
name|HOUR_OF_DAY
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|SignStyle
operator|.
name|NORMAL
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|':'
argument_list|)
operator|.
name|appendValue
argument_list|(
name|MINUTE_OF_HOUR
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|SignStyle
operator|.
name|NORMAL
argument_list|)
operator|.
name|appendLiteral
argument_list|(
literal|':'
argument_list|)
operator|.
name|appendValue
argument_list|(
name|SECOND_OF_MINUTE
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|SignStyle
operator|.
name|NORMAL
argument_list|)
operator|.
name|optionalStart
argument_list|()
operator|.
name|appendFraction
argument_list|(
name|ChronoField
operator|.
name|NANO_OF_SECOND
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
literal|true
argument_list|)
operator|.
name|optionalEnd
argument_list|()
operator|.
name|optionalEnd
argument_list|()
expr_stmt|;
name|PARSE_FORMATTER
operator|=
name|builder
operator|.
name|toFormatter
argument_list|()
operator|.
name|withResolverStyle
argument_list|(
name|ResolverStyle
operator|.
name|LENIENT
argument_list|)
expr_stmt|;
name|builder
operator|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
expr_stmt|;
comment|// Date and time parts
name|builder
operator|.
name|append
argument_list|(
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fractional part
name|builder
operator|.
name|optionalStart
argument_list|()
operator|.
name|appendFraction
argument_list|(
name|ChronoField
operator|.
name|NANO_OF_SECOND
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|,
literal|true
argument_list|)
operator|.
name|optionalEnd
argument_list|()
expr_stmt|;
name|PRINT_FORMATTER
operator|=
name|builder
operator|.
name|toFormatter
argument_list|()
expr_stmt|;
block|}
specifier|private
name|LocalDateTime
name|localDateTime
decl_stmt|;
comment|/* Private constructor */
specifier|private
name|Timestamp
parameter_list|(
name|LocalDateTime
name|localDateTime
parameter_list|)
block|{
name|this
operator|.
name|localDateTime
operator|=
name|localDateTime
operator|!=
literal|null
condition|?
name|localDateTime
else|:
name|EPOCH
expr_stmt|;
block|}
specifier|public
name|Timestamp
parameter_list|()
block|{
name|this
argument_list|(
name|EPOCH
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Timestamp
parameter_list|(
name|Timestamp
name|t
parameter_list|)
block|{
name|this
argument_list|(
name|t
operator|.
name|localDateTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|Timestamp
name|t
parameter_list|)
block|{
name|this
operator|.
name|localDateTime
operator|=
name|t
operator|!=
literal|null
condition|?
name|t
operator|.
name|localDateTime
else|:
name|EPOCH
expr_stmt|;
block|}
specifier|public
name|String
name|format
parameter_list|(
name|DateTimeFormatter
name|formatter
parameter_list|)
block|{
return|return
name|localDateTime
operator|.
name|format
argument_list|(
name|formatter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|format
argument_list|(
name|PRINT_FORMATTER
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|Timestamp
condition|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|Timestamp
operator|)
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Timestamp
name|o
parameter_list|)
block|{
return|return
name|localDateTime
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|localDateTime
argument_list|)
return|;
block|}
specifier|public
name|long
name|toEpochSecond
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|toEpochSecond
argument_list|(
name|ZoneOffset
operator|.
name|UTC
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTimeInSeconds
parameter_list|(
name|long
name|epochSecond
parameter_list|)
block|{
name|setTimeInSeconds
argument_list|(
name|epochSecond
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTimeInSeconds
parameter_list|(
name|long
name|epochSecond
parameter_list|,
name|int
name|nanos
parameter_list|)
block|{
name|localDateTime
operator|=
name|LocalDateTime
operator|.
name|ofEpochSecond
argument_list|(
name|epochSecond
argument_list|,
name|nanos
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|toEpochMilli
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|toInstant
argument_list|(
name|ZoneOffset
operator|.
name|UTC
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
return|;
block|}
specifier|public
name|void
name|setTimeInMillis
parameter_list|(
name|long
name|epochMilli
parameter_list|)
block|{
name|localDateTime
operator|=
name|LocalDateTime
operator|.
name|ofInstant
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|epochMilli
argument_list|)
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTimeInMillis
parameter_list|(
name|long
name|epochMilli
parameter_list|,
name|int
name|nanos
parameter_list|)
block|{
name|localDateTime
operator|=
name|LocalDateTime
operator|.
name|ofInstant
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|epochMilli
argument_list|)
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
operator|.
name|withNano
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNanos
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|getNano
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|valueOf
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
expr_stmt|;
name|LocalDateTime
name|localDateTime
decl_stmt|;
try|try
block|{
name|localDateTime
operator|=
name|LocalDateTime
operator|.
name|parse
argument_list|(
name|s
argument_list|,
name|PARSE_FORMATTER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|e
parameter_list|)
block|{
comment|// Try ISO-8601 format
try|try
block|{
name|localDateTime
operator|=
name|LocalDateTime
operator|.
name|parse
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot create timestamp, parsing error"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|Timestamp
argument_list|(
name|localDateTime
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|getTimestampFromTime
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
name|LocalDateTime
operator|.
name|of
argument_list|(
name|LocalDate
operator|.
name|now
argument_list|()
argument_list|,
name|LocalTime
operator|.
name|parse
argument_list|(
name|s
argument_list|,
name|DateTimeFormatter
operator|.
name|ISO_LOCAL_TIME
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|ofEpochSecond
parameter_list|(
name|long
name|epochSecond
parameter_list|)
block|{
return|return
name|ofEpochSecond
argument_list|(
name|epochSecond
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|ofEpochSecond
parameter_list|(
name|long
name|epochSecond
parameter_list|,
name|int
name|nanos
parameter_list|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
name|LocalDateTime
operator|.
name|ofEpochSecond
argument_list|(
name|epochSecond
argument_list|,
name|nanos
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|ofEpochMilli
parameter_list|(
name|long
name|epochMilli
parameter_list|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
name|LocalDateTime
operator|.
name|ofInstant
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|epochMilli
argument_list|)
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|ofEpochMilli
parameter_list|(
name|long
name|epochMilli
parameter_list|,
name|int
name|nanos
parameter_list|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
name|LocalDateTime
operator|.
name|ofInstant
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|epochMilli
argument_list|)
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
operator|.
name|withNano
argument_list|(
name|nanos
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNanos
parameter_list|(
name|int
name|nanos
parameter_list|)
block|{
name|localDateTime
operator|=
name|localDateTime
operator|.
name|withNano
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getYear
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|getYear
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMonth
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|getMonthValue
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDay
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|getDayOfMonth
argument_list|()
return|;
block|}
specifier|public
name|int
name|getHours
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|getHour
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMinutes
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|getMinute
argument_list|()
return|;
block|}
specifier|public
name|int
name|getSeconds
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|getSecond
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDayOfWeek
parameter_list|()
block|{
return|return
name|localDateTime
operator|.
name|getDayOfWeek
argument_list|()
operator|.
name|plus
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**    * Return a copy of this object.    */
specifier|public
name|Object
name|clone
parameter_list|()
block|{
comment|// LocalDateTime is immutable.
return|return
operator|new
name|Timestamp
argument_list|(
name|this
operator|.
name|localDateTime
argument_list|)
return|;
block|}
specifier|public
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|toSqlTimestamp
parameter_list|()
block|{
name|java
operator|.
name|sql
operator|.
name|Timestamp
name|ts
init|=
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
name|toEpochMilli
argument_list|()
argument_list|)
decl_stmt|;
name|ts
operator|.
name|setNanos
argument_list|(
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ts
return|;
block|}
block|}
end_class

end_unit

