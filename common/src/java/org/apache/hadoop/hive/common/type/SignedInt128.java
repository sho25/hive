begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) Microsoft Corporation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|IntBuffer
import|;
end_import

begin_comment
comment|/**  * This code was originally written for Microsoft PolyBase.  *  * Represents a signed 128-bit integer. This object is much faster and more  * compact than BigInteger, but has many limitations explained in  * {@link UnsignedInt128}. In short, this class is a thin wrapper for  * {@link UnsignedInt128} to make it signed. This object can be used to  * represent a few SQL data types, such as DATETIMEOFFSET in SQLServer.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SignedInt128
extends|extends
name|Number
implements|implements
name|Comparable
argument_list|<
name|SignedInt128
argument_list|>
block|{
comment|/** Maximum value that can be represented in this class. */
specifier|public
specifier|static
specifier|final
name|SignedInt128
name|MAX_VALUE
init|=
operator|new
name|SignedInt128
argument_list|(
literal|0xFFFFFFFF
argument_list|,
literal|0xFFFFFFFF
argument_list|,
literal|0xFFFFFFFF
argument_list|,
literal|0x7FFFFFFF
argument_list|)
decl_stmt|;
comment|/** Minimum value that can be represented in this class. */
specifier|public
specifier|static
specifier|final
name|SignedInt128
name|MIN_VALUE
init|=
operator|new
name|SignedInt128
argument_list|(
literal|0xFFFFFFFF
argument_list|,
literal|0xFFFFFFFF
argument_list|,
literal|0xFFFFFFFF
argument_list|,
literal|0xFFFFFFFF
argument_list|)
decl_stmt|;
comment|/** For Serializable. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/** Magnitude. Core implementation of this object. */
specifier|private
specifier|final
name|UnsignedInt128
name|mag
decl_stmt|;
comment|/**    * Whether the value is negative (zero is NOT negative). When serialized, this    * flag is combined into the most significant integer in mag. In other words,    * this object can use only 127 bits in mag. UnsignedInt128 itself can handle    * 128 bits data.    */
specifier|private
name|boolean
name|negative
decl_stmt|;
comment|/**    * Determines the number of ints to store one value.    *    * @param precision    *          precision (0-38)    * @return the number of ints to store one value    */
specifier|public
specifier|static
name|int
name|getIntsPerElement
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
return|return
name|UnsignedInt128
operator|.
name|getIntsPerElement
argument_list|(
name|precision
argument_list|)
return|;
block|}
comment|/**    * Empty constructor to construct zero.    */
specifier|public
name|SignedInt128
parameter_list|()
block|{
name|this
operator|.
name|negative
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|mag
operator|=
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct this object from a long value.    *    * @param v    *          long value    */
specifier|public
name|SignedInt128
parameter_list|(
name|long
name|v
parameter_list|)
block|{
name|this
operator|.
name|negative
operator|=
name|v
operator|<
literal|0L
expr_stmt|;
name|this
operator|.
name|mag
operator|=
operator|new
name|UnsignedInt128
argument_list|(
name|v
operator|<
literal|0
condition|?
operator|-
name|v
else|:
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct this object from UnsignedInt128. The highest bit of the    * UnsignedInt128 is converted as the sign bit just like conversion between    * int/uint in C++.    *    * @param mag    *          UnsignedInt128 object    */
specifier|public
name|SignedInt128
parameter_list|(
name|UnsignedInt128
name|mag
parameter_list|)
block|{
name|this
operator|.
name|negative
operator|=
name|mag
operator|.
name|getV3
argument_list|()
operator|<
literal|0
expr_stmt|;
name|this
operator|.
name|mag
operator|=
operator|new
name|UnsignedInt128
argument_list|(
name|mag
operator|.
name|getV0
argument_list|()
argument_list|,
name|mag
operator|.
name|getV1
argument_list|()
argument_list|,
name|mag
operator|.
name|getV2
argument_list|()
argument_list|,
name|mag
operator|.
name|getV3
argument_list|()
operator|&
name|SqlMathUtil
operator|.
name|FULLBITS_31
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy Constructor.    *    * @param o    *          object to copy from    */
specifier|public
name|SignedInt128
parameter_list|(
name|SignedInt128
name|o
parameter_list|)
block|{
name|this
operator|.
name|negative
operator|=
name|o
operator|.
name|negative
expr_stmt|;
name|this
operator|.
name|mag
operator|=
operator|new
name|UnsignedInt128
argument_list|(
name|o
operator|.
name|mag
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct this object from the given integers. The highest bit of v3 is    * converted as the sign bit just like conversion between int/uint in C++.    *    * @param v0    *          v0    * @param v1    *          v1    * @param v2    *          v2    * @param v3    *          v3    */
specifier|public
name|SignedInt128
parameter_list|(
name|int
name|v0
parameter_list|,
name|int
name|v1
parameter_list|,
name|int
name|v2
parameter_list|,
name|int
name|v3
parameter_list|)
block|{
name|this
operator|.
name|negative
operator|=
name|v3
operator|<
literal|0
expr_stmt|;
name|this
operator|.
name|mag
operator|=
operator|new
name|UnsignedInt128
argument_list|(
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
operator|&
name|SqlMathUtil
operator|.
name|FULLBITS_31
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs from the given string.    *    * @param str    *          string    */
specifier|public
name|SignedInt128
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|update
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs from the given string with given offset and length.    *    * @param str    *          string    * @param offset    *          offset    * @param length    *          length    */
specifier|public
name|SignedInt128
parameter_list|(
name|char
index|[]
name|str
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|update
argument_list|(
name|str
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/** @return v[0] */
specifier|public
name|int
name|getV0
parameter_list|()
block|{
return|return
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
return|;
block|}
comment|/** @return v[1] */
specifier|public
name|int
name|getV1
parameter_list|()
block|{
return|return
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
return|;
block|}
comment|/** @return v[2] */
specifier|public
name|int
name|getV2
parameter_list|()
block|{
return|return
name|this
operator|.
name|mag
operator|.
name|getV2
argument_list|()
return|;
block|}
comment|/** @return v[3] */
specifier|public
name|int
name|getV3
parameter_list|()
block|{
return|return
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
return|;
block|}
comment|/** Make the value to zero. */
specifier|public
name|void
name|zeroClear
parameter_list|()
block|{
name|this
operator|.
name|mag
operator|.
name|zeroClear
argument_list|()
expr_stmt|;
name|this
operator|.
name|negative
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Update this object with the given long value.    *    * @param v    *          long value    */
specifier|public
name|void
name|update
parameter_list|(
name|long
name|v
parameter_list|)
block|{
name|this
operator|.
name|negative
operator|=
name|v
operator|<
literal|0L
expr_stmt|;
name|this
operator|.
name|mag
operator|.
name|update
argument_list|(
name|v
operator|<
literal|0
condition|?
operator|-
name|v
else|:
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update this object with the value of the given object.    *    * @param o    *          object to copy from    */
specifier|public
name|void
name|update
parameter_list|(
name|SignedInt128
name|o
parameter_list|)
block|{
name|this
operator|.
name|negative
operator|=
name|o
operator|.
name|negative
expr_stmt|;
name|this
operator|.
name|mag
operator|.
name|update
argument_list|(
name|o
operator|.
name|mag
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the value of this object with the given string.    *    * @param str    *          string    */
specifier|public
name|void
name|update
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|update
argument_list|(
name|str
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the value of this object from the given string with given offset    * and length.    *    * @param str    *          string    * @param offset    *          offset    * @param length    *          length    */
specifier|public
name|void
name|update
parameter_list|(
name|char
index|[]
name|str
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|zeroClear
argument_list|()
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|negative
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|str
index|[
name|offset
index|]
operator|==
literal|'-'
condition|)
block|{
name|this
operator|.
name|negative
operator|=
literal|true
expr_stmt|;
operator|++
name|offset
expr_stmt|;
operator|--
name|length
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|str
index|[
name|offset
index|]
operator|==
literal|'+'
condition|)
block|{
operator|++
name|offset
expr_stmt|;
operator|--
name|length
expr_stmt|;
block|}
name|this
operator|.
name|mag
operator|.
name|update
argument_list|(
name|str
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|isZero
argument_list|()
condition|)
block|{
name|this
operator|.
name|negative
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Update this object with the given integers, receiving 128 bits data (full    * ranges).    *    * @param v0    *          v0    * @param v1    *          v1    * @param v2    *          v2    * @param v3    *          v3    */
specifier|public
name|void
name|update128
parameter_list|(
name|int
name|v0
parameter_list|,
name|int
name|v1
parameter_list|,
name|int
name|v2
parameter_list|,
name|int
name|v3
parameter_list|)
block|{
name|this
operator|.
name|negative
operator|=
operator|(
name|v3
operator|<
literal|0
operator|)
expr_stmt|;
name|this
operator|.
name|mag
operator|.
name|update
argument_list|(
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
operator|&
name|SqlMathUtil
operator|.
name|FULLBITS_31
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update this object with the given integers, receiving only 96 bits data.    *    * @param v0    *          v0    * @param v1    *          v1    * @param v2    *          v2    */
specifier|public
name|void
name|update96
parameter_list|(
name|int
name|v0
parameter_list|,
name|int
name|v1
parameter_list|,
name|int
name|v2
parameter_list|)
block|{
name|this
operator|.
name|negative
operator|=
operator|(
name|v2
operator|<
literal|0
operator|)
expr_stmt|;
name|this
operator|.
name|mag
operator|.
name|update
argument_list|(
name|v0
argument_list|,
name|v1
argument_list|,
name|v2
operator|&
name|SqlMathUtil
operator|.
name|FULLBITS_31
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update this object with the given integers, receiving only 64 bits data.    *    * @param v0    *          v0    * @param v1    *          v1    */
specifier|public
name|void
name|update64
parameter_list|(
name|int
name|v0
parameter_list|,
name|int
name|v1
parameter_list|)
block|{
name|this
operator|.
name|negative
operator|=
operator|(
name|v1
operator|<
literal|0
operator|)
expr_stmt|;
name|this
operator|.
name|mag
operator|.
name|update
argument_list|(
name|v0
argument_list|,
name|v1
operator|&
name|SqlMathUtil
operator|.
name|FULLBITS_31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update this object with the given integers, receiving only 32 bits data.    *    * @param v0    *          v0    */
specifier|public
name|void
name|update32
parameter_list|(
name|int
name|v0
parameter_list|)
block|{
name|this
operator|.
name|negative
operator|=
operator|(
name|v0
operator|<
literal|0
operator|)
expr_stmt|;
name|this
operator|.
name|mag
operator|.
name|update
argument_list|(
name|v0
operator|&
name|SqlMathUtil
operator|.
name|FULLBITS_31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the value of this object by reading from the given array, receiving    * 128 bits data (full ranges).    *    * @param array    *          array to read values from    * @param offset    *          offset of the int array    */
specifier|public
name|void
name|update128
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|update128
argument_list|(
name|array
index|[
name|offset
index|]
argument_list|,
name|array
index|[
name|offset
operator|+
literal|1
index|]
argument_list|,
name|array
index|[
name|offset
operator|+
literal|2
index|]
argument_list|,
name|array
index|[
name|offset
operator|+
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the value of this object by reading from the given array, receiving    * only 96 bits data.    *    * @param array    *          array to read values from    * @param offset    *          offset of the int array    */
specifier|public
name|void
name|update96
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|update96
argument_list|(
name|array
index|[
name|offset
index|]
argument_list|,
name|array
index|[
name|offset
operator|+
literal|1
index|]
argument_list|,
name|array
index|[
name|offset
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the value of this object by reading from the given array, receiving    * only 64 bits data.    *    * @param array    *          array to read values from    * @param offset    *          offset of the int array    */
specifier|public
name|void
name|update64
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|update64
argument_list|(
name|array
index|[
name|offset
index|]
argument_list|,
name|array
index|[
name|offset
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the value of this object by reading from the given array, receiving    * only 32 bits data.    *    * @param array    *          array to read values from    * @param offset    *          offset of the int array    */
specifier|public
name|void
name|update32
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|update32
argument_list|(
name|array
index|[
name|offset
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the value of this object by reading from ByteBuffer, receiving 128    * bits data (full ranges).    *    * @param buf    *          ByteBuffer to read values from    */
specifier|public
name|void
name|update128
parameter_list|(
name|IntBuffer
name|buf
parameter_list|)
block|{
name|update128
argument_list|(
name|buf
operator|.
name|get
argument_list|()
argument_list|,
name|buf
operator|.
name|get
argument_list|()
argument_list|,
name|buf
operator|.
name|get
argument_list|()
argument_list|,
name|buf
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the value of this object by reading from ByteBuffer, receiving only    * 96 bits data.    *    * @param buf    *          ByteBuffer to read values from    */
specifier|public
name|void
name|update96
parameter_list|(
name|IntBuffer
name|buf
parameter_list|)
block|{
name|update96
argument_list|(
name|buf
operator|.
name|get
argument_list|()
argument_list|,
name|buf
operator|.
name|get
argument_list|()
argument_list|,
name|buf
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the value of this object by reading from ByteBuffer, receiving only    * 64 bits data.    *    * @param buf    *          ByteBuffer to read values from    */
specifier|public
name|void
name|update64
parameter_list|(
name|IntBuffer
name|buf
parameter_list|)
block|{
name|update64
argument_list|(
name|buf
operator|.
name|get
argument_list|()
argument_list|,
name|buf
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the value of this object by reading from ByteBuffer, receiving only    * 32 bits data.    *    * @param buf    *          ByteBuffer to read values from    */
specifier|public
name|void
name|update32
parameter_list|(
name|IntBuffer
name|buf
parameter_list|)
block|{
name|update32
argument_list|(
name|buf
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serializes the value of this object to the given array, putting 128 bits    * data (full ranges).    *    * @param array    *          array to use    * @param offset    *          offset of the int array    */
specifier|public
name|void
name|serializeTo128
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
assert|assert
operator|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|>=
literal|0
operator|)
assert|;
name|array
index|[
name|offset
index|]
operator|=
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
expr_stmt|;
name|array
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
expr_stmt|;
name|array
index|[
name|offset
operator|+
literal|2
index|]
operator|=
name|this
operator|.
name|mag
operator|.
name|getV2
argument_list|()
expr_stmt|;
name|array
index|[
name|offset
operator|+
literal|3
index|]
operator|=
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator||
operator|(
name|this
operator|.
name|negative
condition|?
name|SqlMathUtil
operator|.
name|NEGATIVE_INT_MASK
else|:
literal|0
operator|)
expr_stmt|;
block|}
comment|/**    * Serializes the value of this object to the given array, putting only 96    * bits data.    *    * @param array    *          array to use    * @param offset    *          offset of the int array    */
specifier|public
name|void
name|serializeTo96
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
assert|assert
operator|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV2
argument_list|()
operator|>=
literal|0
operator|)
assert|;
name|array
index|[
name|offset
index|]
operator|=
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
expr_stmt|;
name|array
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
expr_stmt|;
name|array
index|[
name|offset
operator|+
literal|2
index|]
operator|=
name|this
operator|.
name|mag
operator|.
name|getV2
argument_list|()
operator||
operator|(
name|this
operator|.
name|negative
condition|?
name|SqlMathUtil
operator|.
name|NEGATIVE_INT_MASK
else|:
literal|0
operator|)
expr_stmt|;
block|}
comment|/**    * Serializes the value of this object to the given array, putting only 64    * bits data.    *    * @param array    *          array to use    * @param offset    *          offset of the int array    */
specifier|public
name|void
name|serializeTo64
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
assert|assert
operator|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV2
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
operator|>=
literal|0
operator|)
assert|;
name|array
index|[
name|offset
index|]
operator|=
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
expr_stmt|;
name|array
index|[
name|offset
operator|+
literal|1
index|]
operator|=
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
operator||
operator|(
name|this
operator|.
name|negative
condition|?
name|SqlMathUtil
operator|.
name|NEGATIVE_INT_MASK
else|:
literal|0
operator|)
expr_stmt|;
block|}
comment|/**    * Serializes the value of this object to the given array, putting only 32    * bits data.    *    * @param array    *          array to use    * @param offset    *          offset of the int array    */
specifier|public
name|void
name|serializeTo32
parameter_list|(
name|int
index|[]
name|array
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
assert|assert
operator|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV2
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
operator|>=
literal|0
operator|)
assert|;
name|array
index|[
name|offset
index|]
operator|=
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
operator||
operator|(
name|this
operator|.
name|negative
condition|?
name|SqlMathUtil
operator|.
name|NEGATIVE_INT_MASK
else|:
literal|0
operator|)
expr_stmt|;
block|}
comment|/**    * Serializes the value of this object to ByteBuffer, putting 128 bits data    * (full ranges).    *    * @param buf    *          ByteBuffer to use    */
specifier|public
name|void
name|serializeTo128
parameter_list|(
name|IntBuffer
name|buf
parameter_list|)
block|{
assert|assert
operator|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|>=
literal|0
operator|)
assert|;
name|buf
operator|.
name|put
argument_list|(
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|this
operator|.
name|mag
operator|.
name|getV2
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator||
operator|(
name|this
operator|.
name|negative
condition|?
name|SqlMathUtil
operator|.
name|NEGATIVE_INT_MASK
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serializes the value of this object to ByteBuffer, putting only 96 bits    * data.    *    * @param buf    *          ByteBuffer to use    */
specifier|public
name|void
name|serializeTo96
parameter_list|(
name|IntBuffer
name|buf
parameter_list|)
block|{
assert|assert
operator|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV2
argument_list|()
operator|>=
literal|0
operator|)
assert|;
name|buf
operator|.
name|put
argument_list|(
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|this
operator|.
name|mag
operator|.
name|getV2
argument_list|()
operator||
operator|(
name|this
operator|.
name|negative
condition|?
name|SqlMathUtil
operator|.
name|NEGATIVE_INT_MASK
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serializes the value of this object to ByteBuffer, putting only 64 bits    * data.    *    * @param buf    *          ByteBuffer to use    */
specifier|public
name|void
name|serializeTo64
parameter_list|(
name|IntBuffer
name|buf
parameter_list|)
block|{
assert|assert
operator|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV2
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
operator|>=
literal|0
operator|)
assert|;
name|buf
operator|.
name|put
argument_list|(
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
operator||
operator|(
name|this
operator|.
name|negative
condition|?
name|SqlMathUtil
operator|.
name|NEGATIVE_INT_MASK
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serializes the value of this object to ByteBuffer, putting only 32 bits    * data.    *    * @param buf    *          ByteBuffer to use    */
specifier|public
name|void
name|serializeTo32
parameter_list|(
name|IntBuffer
name|buf
parameter_list|)
block|{
assert|assert
operator|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV2
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
operator|==
literal|0
operator|&&
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
operator|>=
literal|0
operator|)
assert|;
name|buf
operator|.
name|put
argument_list|(
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
operator||
operator|(
name|this
operator|.
name|negative
condition|?
name|SqlMathUtil
operator|.
name|NEGATIVE_INT_MASK
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return Whether this object represents zero.    */
specifier|public
name|boolean
name|isZero
parameter_list|()
block|{
return|return
name|this
operator|.
name|mag
operator|.
name|isZero
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SignedInt128
condition|)
block|{
name|SignedInt128
name|o
init|=
operator|(
name|SignedInt128
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|negative
operator|==
name|o
operator|.
name|negative
operator|&&
name|mag
operator|.
name|equals
argument_list|(
name|o
operator|.
name|mag
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Specialized version.    *    * @param o    *          the object to compare    * @return whether the object is equal to this object    */
specifier|public
name|boolean
name|equals
parameter_list|(
name|SignedInt128
name|o
parameter_list|)
block|{
return|return
name|this
operator|.
name|negative
operator|==
name|o
operator|.
name|negative
operator|&&
name|mag
operator|.
name|equals
argument_list|(
name|o
operator|.
name|mag
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|negative
condition|?
operator|-
name|mag
operator|.
name|hashCode
argument_list|()
else|:
name|mag
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|SignedInt128
name|o
parameter_list|)
block|{
if|if
condition|(
name|negative
condition|)
block|{
if|if
condition|(
name|o
operator|.
name|negative
condition|)
block|{
return|return
name|o
operator|.
name|mag
operator|.
name|compareTo
argument_list|(
name|mag
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|o
operator|.
name|negative
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|mag
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|mag
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|intValue
parameter_list|()
block|{
name|int
name|unsigned
init|=
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
operator|&
name|SqlMathUtil
operator|.
name|FULLBITS_31
decl_stmt|;
return|return
name|this
operator|.
name|negative
condition|?
operator|-
name|unsigned
else|:
name|unsigned
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|longValue
parameter_list|()
block|{
name|long
name|unsigned
init|=
name|SqlMathUtil
operator|.
name|combineInts
argument_list|(
name|this
operator|.
name|mag
operator|.
name|getV0
argument_list|()
argument_list|,
name|this
operator|.
name|mag
operator|.
name|getV1
argument_list|()
argument_list|)
operator|&
name|SqlMathUtil
operator|.
name|FULLBITS_63
decl_stmt|;
return|return
name|this
operator|.
name|negative
condition|?
operator|-
name|unsigned
else|:
name|unsigned
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|floatValue
parameter_list|()
block|{
return|return
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|doubleValue
parameter_list|()
block|{
return|return
name|longValue
argument_list|()
return|;
block|}
comment|/**    * Calculates addition and puts the result into the given object. This method    * is static and not destructive (except the result object).    *    * @param left    *          left operand    * @param right    *          right operand    * @param result    *          object to receive the calculation result    */
specifier|public
specifier|static
name|void
name|add
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|right
parameter_list|,
name|SignedInt128
name|result
parameter_list|)
block|{
name|result
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|result
operator|.
name|addDestructive
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calculates addition and stores the result into this object. This method is    * destructive.    *    * @param right    *          right operand    */
specifier|public
name|void
name|addDestructive
parameter_list|(
name|SignedInt128
name|right
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|negative
operator|==
name|right
operator|.
name|negative
condition|)
block|{
name|this
operator|.
name|mag
operator|.
name|addDestructive
argument_list|(
name|right
operator|.
name|mag
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|<
literal|0
condition|)
block|{
name|SqlMathUtil
operator|.
name|throwOverflowException
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|byte
name|signum
init|=
name|UnsignedInt128
operator|.
name|difference
argument_list|(
name|this
operator|.
name|mag
argument_list|,
name|right
operator|.
name|mag
argument_list|,
name|this
operator|.
name|mag
argument_list|)
decl_stmt|;
name|this
operator|.
name|negative
operator|=
operator|(
name|signum
operator|>
literal|0
condition|?
name|this
operator|.
name|negative
else|:
name|right
operator|.
name|negative
operator|)
expr_stmt|;
block|}
comment|/**    * Calculates subtraction and puts the result into the given object. This    * method is static and not destructive (except the result object).    *    * @param left    *          left operand    * @param right    *          right operand    * @param result    *          object to receive the calculation result    */
specifier|public
specifier|static
name|void
name|subtract
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|right
parameter_list|,
name|SignedInt128
name|result
parameter_list|)
block|{
name|result
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|result
operator|.
name|subtractDestructive
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calculates subtraction and stores the result into this object. This method    * is destructive.    *    * @param right    *          right operand    */
specifier|public
name|void
name|subtractDestructive
parameter_list|(
name|SignedInt128
name|right
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|negative
operator|!=
name|right
operator|.
name|negative
condition|)
block|{
name|this
operator|.
name|mag
operator|.
name|addDestructive
argument_list|(
name|right
operator|.
name|mag
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|<
literal|0
condition|)
block|{
name|SqlMathUtil
operator|.
name|throwOverflowException
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|byte
name|signum
init|=
name|UnsignedInt128
operator|.
name|difference
argument_list|(
name|this
operator|.
name|mag
argument_list|,
name|right
operator|.
name|mag
argument_list|,
name|this
operator|.
name|mag
argument_list|)
decl_stmt|;
name|this
operator|.
name|negative
operator|=
operator|(
name|signum
operator|>
literal|0
condition|?
name|this
operator|.
name|negative
else|:
operator|!
name|this
operator|.
name|negative
operator|)
expr_stmt|;
block|}
comment|/**    * Calculates multiplication and puts the result into the given object. This    * method is static and not destructive (except the result object).    *    * @param left    *          left operand    * @param right    *          right operand    * @param result    *          object to receive the calculation result    */
specifier|public
specifier|static
name|void
name|multiply
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|right
parameter_list|,
name|SignedInt128
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
name|left
operator|||
name|result
operator|==
name|right
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"result object cannot be left or right operand"
argument_list|)
throw|;
block|}
name|result
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|result
operator|.
name|multiplyDestructive
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs multiplication.    *    * @param right    *          right operand. this object is not modified.    */
specifier|public
name|void
name|multiplyDestructive
parameter_list|(
name|SignedInt128
name|right
parameter_list|)
block|{
name|this
operator|.
name|mag
operator|.
name|multiplyDestructive
argument_list|(
name|right
operator|.
name|mag
argument_list|)
expr_stmt|;
name|this
operator|.
name|negative
operator|=
name|this
operator|.
name|negative
operator|^
name|right
operator|.
name|negative
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|<
literal|0
condition|)
block|{
name|SqlMathUtil
operator|.
name|throwOverflowException
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Performs multiplication.    *    * @param right    *          right operand.    */
specifier|public
name|void
name|multiplyDestructive
parameter_list|(
name|int
name|right
parameter_list|)
block|{
if|if
condition|(
name|right
operator|<
literal|0
condition|)
block|{
name|this
operator|.
name|mag
operator|.
name|multiplyDestructive
argument_list|(
operator|-
name|right
argument_list|)
expr_stmt|;
name|this
operator|.
name|negative
operator|=
operator|!
name|this
operator|.
name|negative
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|mag
operator|.
name|multiplyDestructive
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|isZero
argument_list|()
condition|)
block|{
name|this
operator|.
name|negative
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|<
literal|0
condition|)
block|{
name|SqlMathUtil
operator|.
name|throwOverflowException
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Divides this value with the given value. This version is destructive,    * meaning it modifies this object.    *    * @param right    *          the value to divide    * @return remainder    */
specifier|public
name|int
name|divideDestructive
parameter_list|(
name|int
name|right
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
if|if
condition|(
name|right
operator|<
literal|0
condition|)
block|{
name|ret
operator|=
name|this
operator|.
name|mag
operator|.
name|divideDestructive
argument_list|(
operator|-
name|right
argument_list|)
expr_stmt|;
name|this
operator|.
name|negative
operator|=
operator|!
name|this
operator|.
name|negative
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|this
operator|.
name|mag
operator|.
name|divideDestructive
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|ret
operator|&
name|SqlMathUtil
operator|.
name|FULLBITS_31
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|negative
condition|)
block|{
name|ret
operator|=
operator|-
name|ret
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|isZero
argument_list|()
condition|)
block|{
name|this
operator|.
name|negative
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Performs division and puts the quotient into the given object. This method    * is static and not destructive (except the result object).    *    * @param left    *          left operand    * @param right    *          right operand    * @param quotient    *          result object to receive the calculation result    * @param remainder    *          result object to receive the calculation result    */
specifier|public
specifier|static
name|void
name|divide
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|right
parameter_list|,
name|SignedInt128
name|quotient
parameter_list|,
name|SignedInt128
name|remainder
parameter_list|)
block|{
if|if
condition|(
name|quotient
operator|==
name|left
operator|||
name|quotient
operator|==
name|right
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"result object cannot be left or right operand"
argument_list|)
throw|;
block|}
name|quotient
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|quotient
operator|.
name|divideDestructive
argument_list|(
name|right
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs division and puts the quotient into this object.    *    * @param right    *          right operand. this object is not modified.    * @param remainder    *          result object to receive the calculation result    */
specifier|public
name|void
name|divideDestructive
parameter_list|(
name|SignedInt128
name|right
parameter_list|,
name|SignedInt128
name|remainder
parameter_list|)
block|{
name|this
operator|.
name|mag
operator|.
name|divideDestructive
argument_list|(
name|right
operator|.
name|mag
argument_list|,
name|remainder
operator|.
name|mag
argument_list|)
expr_stmt|;
name|remainder
operator|.
name|negative
operator|=
literal|false
expr_stmt|;
comment|// remainder is always positive
name|this
operator|.
name|negative
operator|=
name|this
operator|.
name|negative
operator|^
name|right
operator|.
name|negative
expr_stmt|;
block|}
comment|/**    * Reverses the sign of this object. This method is destructive.    */
specifier|public
name|void
name|negateDestructive
parameter_list|()
block|{
name|this
operator|.
name|negative
operator|=
operator|!
name|this
operator|.
name|negative
expr_stmt|;
block|}
comment|/**    * Makes this object positive. This method is destructive.    */
specifier|public
name|void
name|absDestructive
parameter_list|()
block|{
name|this
operator|.
name|negative
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * This version returns the result as a new object, not modifying the give    * objects.    *    * @param left    *          left operand    * @param result    *          object to receive the calculation result    */
specifier|public
specifier|static
name|void
name|negate
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|result
parameter_list|)
block|{
name|result
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|result
operator|.
name|negateDestructive
argument_list|()
expr_stmt|;
block|}
comment|/**    * This version returns the result as a new object, not modifying the give    * objects.    *    * @param left    *          left operand    * @param result    *          object to receive the calculation result    */
specifier|public
specifier|static
name|void
name|abs
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|result
parameter_list|)
block|{
name|result
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|result
operator|.
name|absDestructive
argument_list|()
expr_stmt|;
block|}
comment|/**    * Adds one to this value. This version is destructive, meaning it modifies    * this object.    */
specifier|public
name|void
name|incrementDestructive
parameter_list|()
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|negative
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|equals
argument_list|(
name|SqlMathUtil
operator|.
name|FULLBITS_32
argument_list|,
name|SqlMathUtil
operator|.
name|FULLBITS_32
argument_list|,
name|SqlMathUtil
operator|.
name|FULLBITS_32
argument_list|,
name|SqlMathUtil
operator|.
name|FULLBITS_31
argument_list|)
condition|)
block|{
name|SqlMathUtil
operator|.
name|throwOverflowException
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mag
operator|.
name|incrementDestructive
argument_list|()
expr_stmt|;
assert|assert
operator|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|>=
literal|0
operator|)
assert|;
block|}
else|else
block|{
assert|assert
operator|(
operator|!
name|this
operator|.
name|mag
operator|.
name|isZero
argument_list|()
operator|)
assert|;
name|this
operator|.
name|mag
operator|.
name|decrementDestructive
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|isZero
argument_list|()
condition|)
block|{
name|this
operator|.
name|negative
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Subtracts one from this value. This version is destructive, meaning it    * modifies this object.    */
specifier|public
name|void
name|decrementDestructive
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|negative
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|equals
argument_list|(
name|SqlMathUtil
operator|.
name|FULLBITS_32
argument_list|,
name|SqlMathUtil
operator|.
name|FULLBITS_32
argument_list|,
name|SqlMathUtil
operator|.
name|FULLBITS_32
argument_list|,
name|SqlMathUtil
operator|.
name|FULLBITS_31
argument_list|)
condition|)
block|{
name|SqlMathUtil
operator|.
name|throwOverflowException
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mag
operator|.
name|incrementDestructive
argument_list|()
expr_stmt|;
assert|assert
operator|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|>=
literal|0
operator|)
assert|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|isZero
argument_list|()
condition|)
block|{
name|this
operator|.
name|negative
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|mag
operator|.
name|incrementDestructive
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|mag
operator|.
name|decrementDestructive
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This version returns the result as a new object, not modifying the give    * objects.    *    * @param left    *          left operand    * @param result    *          object to receive the calculation result    */
specifier|public
specifier|static
name|void
name|increment
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|result
parameter_list|)
block|{
name|result
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|result
operator|.
name|incrementDestructive
argument_list|()
expr_stmt|;
block|}
comment|/**    * This version returns the result as a new object, not modifying the give    * objects.    *    * @param left    *          left operand    * @param result    *          object to receive the calculation result    */
specifier|public
specifier|static
name|void
name|decrement
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|result
parameter_list|)
block|{
name|result
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|result
operator|.
name|decrementDestructive
argument_list|()
expr_stmt|;
block|}
comment|/**    * Right-shift for the given number of bits. This bit-shift is equivalent to    * Java's signed bit shift "&gt;&gt;". This version is destructive, meaning it    * modifies this object. NOTE: So far we don't provide an equivalent of the    * unsigned right bit shift "&gt;&gt;&gt;" because we recommend to simply use    * {@link UnsignedInt128} for unsigned use.    *    * @param bits    *          the number of bits. must be positive    * @param roundUp    *          whether to round up the most significant bit that was discarded    */
specifier|public
name|void
name|shiftRightDestructive
parameter_list|(
name|int
name|bits
parameter_list|,
name|boolean
name|roundUp
parameter_list|)
block|{
name|this
operator|.
name|mag
operator|.
name|shiftRightDestructive
argument_list|(
name|bits
argument_list|,
name|roundUp
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|isZero
argument_list|()
operator|&&
name|this
operator|.
name|negative
condition|)
block|{
name|this
operator|.
name|negative
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Left-shift for the given number of bits. This bit-shift is equivalent to    * Java's signed bit shift "&lt;&lt;". This method does not throw an error    * even if overflow happens. This version is destructive, meaning it modifies    * this object.    *    * @param bits    *          the number of bits. must be positive    */
specifier|public
name|void
name|shiftLeftDestructive
parameter_list|(
name|int
name|bits
parameter_list|)
block|{
name|this
operator|.
name|mag
operator|.
name|shiftLeftDestructive
argument_list|(
name|bits
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|<
literal|0
condition|)
block|{
name|SqlMathUtil
operator|.
name|throwOverflowException
argument_list|()
expr_stmt|;
block|}
assert|assert
operator|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|>=
literal|0
operator|)
assert|;
block|}
comment|/**    * Scale down the value for 10**tenScale (this := this / 10**tenScale). This    * method rounds-up, eg 44/10=4, 45/10=5. This version is destructive, meaning    * it modifies this object.    *    * @param tenScale    *          scaling. must be positive    */
specifier|public
name|void
name|scaleDownTenDestructive
parameter_list|(
name|short
name|tenScale
parameter_list|)
block|{
name|this
operator|.
name|mag
operator|.
name|scaleDownTenDestructive
argument_list|(
name|tenScale
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|isZero
argument_list|()
operator|&&
name|this
operator|.
name|negative
condition|)
block|{
name|this
operator|.
name|negative
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Scale up the value for 10**tenScale (this := this * 10**tenScale). Scaling    * up DOES throw an error when an overflow occurs. For example, 42.scaleUp(1)    * = 420, 42.scaleUp(40) = ArithmeticException. This version is destructive,    * meaning it modifies this object.    *    * @param tenScale    *          scaling. must be positive    */
specifier|public
name|void
name|scaleUpTenDestructive
parameter_list|(
name|short
name|tenScale
parameter_list|)
block|{
name|this
operator|.
name|mag
operator|.
name|scaleUpTenDestructive
argument_list|(
name|tenScale
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|mag
operator|.
name|getV3
argument_list|()
operator|<
literal|0
condition|)
block|{
name|SqlMathUtil
operator|.
name|throwOverflowException
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This version returns the result as a new object, not modifying the give    * objects.    *    * @param left    *          left operand    * @param result    *          object to receive the calculation result    * @param bits    *          the number of bits. must be positive    * @param roundUp    *          whether to round up the most significant bit that was discarded    */
specifier|public
specifier|static
name|void
name|shiftRight
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|result
parameter_list|,
name|int
name|bits
parameter_list|,
name|boolean
name|roundUp
parameter_list|)
block|{
name|result
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|result
operator|.
name|shiftRightDestructive
argument_list|(
name|bits
argument_list|,
name|roundUp
argument_list|)
expr_stmt|;
block|}
comment|/**    * This version returns the result as a new object, not modifying the give    * objects.    *    * @param left    *          left operand    * @param result    *          object to receive the calculation result    * @param bits    *          the number of bits. must be positive    */
specifier|public
specifier|static
name|void
name|shiftLeft
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|result
parameter_list|,
name|int
name|bits
parameter_list|)
block|{
name|result
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|result
operator|.
name|shiftLeftDestructive
argument_list|(
name|bits
argument_list|)
expr_stmt|;
block|}
comment|/**    * This version returns the result as a new object, not modifying the give    * objects.    *    * @param left    *          left operand    * @param result    *          object to receive the calculation result    * @param tenScale    *          scaling. must be positive    */
specifier|public
specifier|static
name|void
name|scaleDownTen
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|result
parameter_list|,
name|short
name|tenScale
parameter_list|)
block|{
name|result
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|result
operator|.
name|scaleDownTenDestructive
argument_list|(
name|tenScale
argument_list|)
expr_stmt|;
block|}
comment|/**    * This version returns the result as a new object, not modifying the give    * objects.    *    * @param left    *          left operand    * @param result    *          object to receive the calculation result    * @param tenScale    *          scaling. must be positive    */
specifier|public
specifier|static
name|void
name|scaleUpTen
parameter_list|(
name|SignedInt128
name|left
parameter_list|,
name|SignedInt128
name|result
parameter_list|,
name|short
name|tenScale
parameter_list|)
block|{
name|result
operator|.
name|update
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|result
operator|.
name|scaleUpTenDestructive
argument_list|(
name|tenScale
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convert this object to {@link BigInteger}. Do not use this method in a    * performance sensitive place.    *    * @return BigInteger to represent this object    */
specifier|public
name|BigInteger
name|toBigIntegerSlow
parameter_list|()
block|{
name|BigInteger
name|bigInt
init|=
name|this
operator|.
name|mag
operator|.
name|toBigIntegerSlow
argument_list|()
decl_stmt|;
return|return
name|this
operator|.
name|negative
condition|?
name|bigInt
operator|.
name|negate
argument_list|()
else|:
name|bigInt
return|;
block|}
comment|/**    * Returns the formal string representation of this value. Unlike the debug    * string returned by {@link #toString()}, this method returns a string that    * can be used to re-construct this object. Remember, toString() is only for    * debugging.    *    * @return string representation of this value    */
specifier|public
name|String
name|toFormalString
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|negative
condition|)
block|{
return|return
literal|"-"
operator|+
name|this
operator|.
name|mag
operator|.
name|toFormalString
argument_list|()
return|;
block|}
return|return
name|this
operator|.
name|mag
operator|.
name|toFormalString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SignedInt128 ("
operator|+
operator|(
name|this
operator|.
name|negative
condition|?
literal|"negative"
else|:
literal|"positive"
operator|)
operator|+
literal|"). mag="
operator|+
name|this
operator|.
name|mag
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

