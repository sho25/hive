begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_comment
comment|/**  * Reusable code for Hive Cli's.  *<p>  * Basic usage is: create an instance (usually a subclass if you want to  * all your own options or processing instructions), parse, and then use  * the resulting information.  *<p>  * See {@link org.apache.hadoop.hive.service.HiveServer} or  *     {@link org.apache.hadoop.hive.metastore.HiveMetaStore}  *     for examples of use.  *  */
end_comment

begin_class
specifier|public
class|class
name|CommonCliOptions
block|{
comment|/**    * Options for parsing the command line.    */
specifier|protected
specifier|final
name|Options
name|OPTIONS
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
specifier|protected
name|CommandLine
name|commandLine
decl_stmt|;
comment|/**    * The name of this cli.    */
specifier|protected
specifier|final
name|String
name|cliname
decl_stmt|;
specifier|private
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
comment|/**    * Create an instance with common options (help, verbose, etc...).    *    * @param cliname the name of the command    * @param includeHiveConf include "hiveconf" as an option if true    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|public
name|CommonCliOptions
parameter_list|(
name|String
name|cliname
parameter_list|,
name|boolean
name|includeHiveConf
parameter_list|)
block|{
name|this
operator|.
name|cliname
operator|=
name|cliname
expr_stmt|;
comment|// [-v|--verbose]
name|OPTIONS
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"v"
argument_list|,
literal|"verbose"
argument_list|,
literal|false
argument_list|,
literal|"Verbose mode"
argument_list|)
argument_list|)
expr_stmt|;
comment|// [-h|--help]
name|OPTIONS
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print help information"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeHiveConf
condition|)
block|{
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withArgName
argument_list|(
literal|"property=value"
argument_list|)
operator|.
name|withLongOpt
argument_list|(
literal|"hiveconf"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Use value for given property"
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add the hiveconf properties to the Java system properties, override    * anything therein.    *    * @return a copy of the properties specified in hiveconf    */
specifier|public
name|Properties
name|addHiveconfToSystemProperties
parameter_list|()
block|{
name|Properties
name|confProps
init|=
name|commandLine
operator|.
name|getOptionProperties
argument_list|(
literal|"hiveconf"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|propKey
range|:
name|confProps
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"hiveconf: "
operator|+
name|propKey
operator|+
literal|"="
operator|+
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|propKey
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"hive.root.logger"
argument_list|)
condition|)
block|{
name|splitAndSetLogger
argument_list|(
name|propKey
argument_list|,
name|confProps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|propKey
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|confProps
return|;
block|}
specifier|public
specifier|static
name|void
name|splitAndSetLogger
parameter_list|(
specifier|final
name|String
name|propKey
parameter_list|,
specifier|final
name|Properties
name|confProps
parameter_list|)
block|{
name|String
name|propVal
init|=
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|propVal
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|)
block|{
name|String
index|[]
name|tokens
init|=
name|propVal
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|Level
operator|.
name|getLevel
argument_list|(
name|token
argument_list|)
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"hive.root.logger"
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"hive.log.level"
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|propKey
argument_list|,
name|confProps
operator|.
name|getProperty
argument_list|(
name|propKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Print usage information for the CLI.    */
specifier|public
name|void
name|printUsage
parameter_list|()
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
name|cliname
argument_list|,
name|OPTIONS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Parse the arguments.    * @param args    */
specifier|public
name|void
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|commandLine
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|OPTIONS
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'h'
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'v'
argument_list|)
condition|)
block|{
name|verbose
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Should the client be verbose.    */
specifier|public
name|boolean
name|isVerbose
parameter_list|()
block|{
return|return
name|verbose
return|;
block|}
block|}
end_class

end_unit

