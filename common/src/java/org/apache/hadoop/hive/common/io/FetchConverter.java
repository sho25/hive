begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|FetchConverter
extends|extends
name|PrintStream
block|{
specifier|protected
specifier|volatile
name|boolean
name|queryfound
decl_stmt|;
specifier|protected
specifier|volatile
name|boolean
name|fetchStarted
decl_stmt|;
specifier|public
name|FetchConverter
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|boolean
name|autoFlush
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|super
argument_list|(
name|out
argument_list|,
name|autoFlush
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|foundQuery
parameter_list|(
name|boolean
name|queryfound
parameter_list|)
block|{
name|this
operator|.
name|queryfound
operator|=
name|queryfound
expr_stmt|;
block|}
specifier|public
name|void
name|fetchStarted
parameter_list|()
block|{
name|fetchStarted
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|println
parameter_list|(
name|String
name|out
parameter_list|)
block|{
if|if
condition|(
name|byPass
argument_list|()
condition|)
block|{
name|printDirect
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|process
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|final
name|void
name|printDirect
parameter_list|(
name|String
name|out
parameter_list|)
block|{
name|super
operator|.
name|println
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|boolean
name|byPass
parameter_list|()
block|{
return|return
operator|!
name|queryfound
operator|||
operator|!
name|fetchStarted
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|process
parameter_list|(
name|String
name|out
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|processFinal
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|byPass
argument_list|()
condition|)
block|{
name|super
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fetchFinished
parameter_list|()
block|{
if|if
condition|(
operator|!
name|byPass
argument_list|()
condition|)
block|{
name|processFinal
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fetchStarted
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

