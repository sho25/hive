begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|cli
package|;
end_package

begin_class
specifier|public
class|class
name|EscapeCRLFHelper
block|{
specifier|private
specifier|static
specifier|final
name|char
name|CARRIAGE_RETURN
init|=
literal|'\r'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
name|LINE_FEED
init|=
literal|'\n'
decl_stmt|;
specifier|public
name|EscapeCRLFHelper
parameter_list|()
block|{   }
comment|/*    * Substitute for any carriage return or line feed characters in line with the escaped    * 2-character sequences \r or \n.    *    * @param line  the string for the CRLF substitution.    * @return If there were no replacements, then just return line.  Otherwise, a new String with    *         escaped CRLF.    */
specifier|public
specifier|static
name|String
name|escapeCRLF
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
literal|null
decl_stmt|;
name|int
name|lastNonCRLFIndex
init|=
literal|0
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|line
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|length
condition|)
block|{
name|char
name|ch
init|=
name|line
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
name|CARRIAGE_RETURN
operator|||
name|ch
operator|==
name|LINE_FEED
condition|)
block|{
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
comment|// We defer allocation until we really need it since in the common case there is
comment|// no CRLF substitution.
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lastNonCRLFIndex
operator|<
name|index
condition|)
block|{
comment|// Copy an intervening non-CRLF characters up to but not including current 'index'.
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|lastNonCRLFIndex
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lastNonCRLFIndex
operator|=
operator|++
name|index
expr_stmt|;
if|if
condition|(
name|ch
operator|==
name|CARRIAGE_RETURN
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\r"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\\n"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|index
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
comment|// No CRLF substitution -- return original line.
return|return
name|line
return|;
block|}
else|else
block|{
if|if
condition|(
name|lastNonCRLFIndex
operator|<
name|index
condition|)
block|{
comment|// Copy an intervening non-CRLF characters up to but not including current 'index'.
name|sb
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|lastNonCRLFIndex
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

