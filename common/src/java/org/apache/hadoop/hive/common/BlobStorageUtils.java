begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Utilities for different blob (object) storage systems  */
end_comment

begin_class
specifier|public
class|class
name|BlobStorageUtils
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|DISABLE_BLOBSTORAGE_AS_SCRATCHDIR
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isBlobStoragePath
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|)
block|{
return|return
operator|(
name|path
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|isBlobStorageScheme
argument_list|(
name|conf
argument_list|,
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isBlobStorageFileSystem
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|)
block|{
return|return
operator|(
name|fs
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|isBlobStorageScheme
argument_list|(
name|conf
argument_list|,
name|fs
operator|.
name|getScheme
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isBlobStorageScheme
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|scheme
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|supportedBlobStoreSchemes
init|=
name|conf
operator|.
name|getStringCollection
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_BLOBSTORE_SUPPORTED_SCHEMES
operator|.
name|varname
argument_list|)
decl_stmt|;
return|return
name|supportedBlobStoreSchemes
operator|.
name|contains
argument_list|(
name|scheme
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isBlobStorageAsScratchDir
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_BLOBSTORE_USE_BLOBSTORE_AS_SCRATCHDIR
operator|.
name|varname
argument_list|,
name|DISABLE_BLOBSTORAGE_AS_SCRATCHDIR
argument_list|)
return|;
block|}
block|}
end_class

end_unit

