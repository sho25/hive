begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|DateTimeException
import|;
end_import

begin_comment
comment|/**  * Utilities for Timestamps and the relevant conversions.  */
end_comment

begin_class
specifier|public
class|class
name|TimestampUtils
block|{
specifier|public
specifier|static
specifier|final
name|BigDecimal
name|BILLION_BIG_DECIMAL
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000000000
argument_list|)
decl_stmt|;
comment|/**    * Convert the timestamp to a double measured in seconds.    * @return double representation of the timestamp, accurate to nanoseconds    */
specifier|public
specifier|static
name|double
name|getDouble
parameter_list|(
name|Timestamp
name|ts
parameter_list|)
block|{
name|long
name|seconds
init|=
name|ts
operator|.
name|toEpochSecond
argument_list|()
decl_stmt|;
return|return
name|seconds
operator|+
operator|(
operator|(
name|double
operator|)
name|ts
operator|.
name|getNanos
argument_list|()
operator|)
operator|/
literal|1000000000
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|doubleToTimestamp
parameter_list|(
name|double
name|f
parameter_list|)
block|{
try|try
block|{
name|long
name|seconds
init|=
operator|(
name|long
operator|)
name|f
decl_stmt|;
comment|// We must ensure the exactness of the double's fractional portion.
comment|// 0.6 as the fraction part will be converted to 0.59999... and
comment|// significantly reduce the savings from binary serialization
name|BigDecimal
name|bd
init|=
operator|new
name|BigDecimal
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
name|bd
operator|=
name|bd
operator|.
name|subtract
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|seconds
argument_list|)
argument_list|)
operator|.
name|multiply
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1000000000
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nanos
init|=
name|bd
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|// Convert to millis
name|long
name|millis
init|=
name|seconds
operator|*
literal|1000
decl_stmt|;
if|if
condition|(
name|nanos
operator|<
literal|0
condition|)
block|{
name|millis
operator|-=
literal|1000
expr_stmt|;
name|nanos
operator|+=
literal|1000000000
expr_stmt|;
block|}
return|return
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|millis
argument_list|,
name|nanos
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|DateTimeException
name|nfe
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Take a HiveDecimal and return the timestamp representation where the fraction part is the    * nanoseconds and integer part is the number of seconds.    * @param dec    * @return    */
specifier|public
specifier|static
name|Timestamp
name|decimalToTimestamp
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
try|try
block|{
name|HiveDecimalWritable
name|nanosWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|dec
argument_list|)
decl_stmt|;
name|nanosWritable
operator|.
name|mutateFractionPortion
argument_list|()
expr_stmt|;
comment|// Clip off seconds portion.
name|nanosWritable
operator|.
name|mutateScaleByPowerOfTen
argument_list|(
literal|9
argument_list|)
expr_stmt|;
comment|// Bring nanoseconds into integer portion.
if|if
condition|(
operator|!
name|nanosWritable
operator|.
name|isSet
argument_list|()
operator|||
operator|!
name|nanosWritable
operator|.
name|isInt
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|nanos
init|=
name|nanosWritable
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nanos
operator|<
literal|0
condition|)
block|{
name|nanos
operator|+=
literal|1000000000
expr_stmt|;
block|}
name|nanosWritable
operator|.
name|setFromLong
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
name|HiveDecimalWritable
name|nanoInstant
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|dec
argument_list|)
decl_stmt|;
name|nanoInstant
operator|.
name|mutateScaleByPowerOfTen
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|nanoInstant
operator|.
name|mutateSubtract
argument_list|(
name|nanosWritable
argument_list|)
expr_stmt|;
name|nanoInstant
operator|.
name|mutateScaleByPowerOfTen
argument_list|(
operator|-
literal|9
argument_list|)
expr_stmt|;
comment|// Back to seconds.
if|if
condition|(
operator|!
name|nanoInstant
operator|.
name|isSet
argument_list|()
operator|||
operator|!
name|nanoInstant
operator|.
name|isLong
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|millis
init|=
name|nanoInstant
operator|.
name|longValue
argument_list|()
operator|*
literal|1000
decl_stmt|;
return|return
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|millis
argument_list|,
name|nanos
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|DateTimeException
name|nfe
parameter_list|)
block|{
comment|// E.g. DateTimeException: Invalid value for Year (valid values -999999999 - 999999999)
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Take a HiveDecimalWritable and return the timestamp representation where the fraction part    * is the nanoseconds and integer part is the number of seconds.    *    * This is a HiveDecimalWritable variation with supplied scratch objects.    * @param decWritable    * @param scratchDecWritable1    * @param scratchDecWritable2    * @return    */
specifier|public
specifier|static
name|Timestamp
name|decimalToTimestamp
parameter_list|(
name|HiveDecimalWritable
name|decWritable
parameter_list|,
name|HiveDecimalWritable
name|scratchDecWritable1
parameter_list|,
name|HiveDecimalWritable
name|scratchDecWritable2
parameter_list|)
block|{
name|HiveDecimalWritable
name|nanosWritable
init|=
name|scratchDecWritable1
decl_stmt|;
name|nanosWritable
operator|.
name|set
argument_list|(
name|decWritable
argument_list|)
expr_stmt|;
name|nanosWritable
operator|.
name|mutateFractionPortion
argument_list|()
expr_stmt|;
comment|// Clip off seconds portion.
name|nanosWritable
operator|.
name|mutateScaleByPowerOfTen
argument_list|(
literal|9
argument_list|)
expr_stmt|;
comment|// Bring nanoseconds into integer portion.
if|if
condition|(
operator|!
name|nanosWritable
operator|.
name|isSet
argument_list|()
operator|||
operator|!
name|nanosWritable
operator|.
name|isInt
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|nanos
init|=
name|nanosWritable
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nanos
operator|<
literal|0
condition|)
block|{
name|nanos
operator|+=
literal|1000000000
expr_stmt|;
block|}
name|nanosWritable
operator|.
name|setFromLong
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
name|HiveDecimalWritable
name|nanoInstant
init|=
name|scratchDecWritable2
decl_stmt|;
name|nanoInstant
operator|.
name|set
argument_list|(
name|decWritable
argument_list|)
expr_stmt|;
name|nanoInstant
operator|.
name|mutateScaleByPowerOfTen
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|nanoInstant
operator|.
name|mutateSubtract
argument_list|(
name|nanosWritable
argument_list|)
expr_stmt|;
name|nanoInstant
operator|.
name|mutateScaleByPowerOfTen
argument_list|(
operator|-
literal|9
argument_list|)
expr_stmt|;
comment|// Back to seconds.
if|if
condition|(
operator|!
name|nanoInstant
operator|.
name|isSet
argument_list|()
operator|||
operator|!
name|nanoInstant
operator|.
name|isLong
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|seconds
init|=
name|nanoInstant
operator|.
name|longValue
argument_list|()
decl_stmt|;
return|return
name|Timestamp
operator|.
name|ofEpochSecond
argument_list|(
name|seconds
argument_list|,
name|nanos
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|decimalToTimestamp
parameter_list|(
name|HiveDecimalV1
name|dec
parameter_list|)
block|{
try|try
block|{
name|BigDecimal
name|nanoInstant
init|=
name|dec
operator|.
name|bigDecimalValue
argument_list|()
operator|.
name|multiply
argument_list|(
name|BILLION_BIG_DECIMAL
argument_list|)
decl_stmt|;
name|int
name|nanos
init|=
name|nanoInstant
operator|.
name|remainder
argument_list|(
name|BILLION_BIG_DECIMAL
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nanos
operator|<
literal|0
condition|)
block|{
name|nanos
operator|+=
literal|1000000000
expr_stmt|;
block|}
name|long
name|seconds
init|=
name|nanoInstant
operator|.
name|subtract
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|nanos
argument_list|)
argument_list|)
operator|.
name|divide
argument_list|(
name|BILLION_BIG_DECIMAL
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
return|return
name|Timestamp
operator|.
name|ofEpochSecond
argument_list|(
name|seconds
argument_list|,
name|nanos
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|DateTimeException
name|nfe
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Rounds the number of milliseconds relative to the epoch down to the nearest whole number of    * seconds. 500 would round to 0, -500 would round to -1.    */
specifier|public
specifier|static
name|long
name|millisToSeconds
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
if|if
condition|(
name|millis
operator|>=
literal|0
condition|)
block|{
return|return
name|millis
operator|/
literal|1000
return|;
block|}
else|else
block|{
return|return
operator|(
name|millis
operator|-
literal|999
operator|)
operator|/
literal|1000
return|;
block|}
block|}
block|}
end_class

end_unit

