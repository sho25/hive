begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLParameters
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLServerSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSSLTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class helps in some aspects of authentication. It creates the proper Thrift classes for the  * given configuration as well as helps with authenticating requests.  */
end_comment

begin_class
specifier|public
class|class
name|HiveAuthUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveAuthUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TTransport
name|getSocketTransport
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|loginTimeout
parameter_list|)
block|{
return|return
operator|new
name|TSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|loginTimeout
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TTransport
name|getSSLSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|loginTimeout
parameter_list|)
throws|throws
name|TTransportException
block|{
comment|// The underlying SSLSocket object is bound to host:port with the given SO_TIMEOUT
name|TSocket
name|tSSLSocket
init|=
name|TSSLTransportFactory
operator|.
name|getClientSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|loginTimeout
argument_list|)
decl_stmt|;
return|return
name|getSSLSocketWithHttps
argument_list|(
name|tSSLSocket
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TTransport
name|getSSLSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|loginTimeout
parameter_list|,
name|String
name|trustStorePath
parameter_list|,
name|String
name|trustStorePassWord
parameter_list|)
throws|throws
name|TTransportException
block|{
name|TSSLTransportFactory
operator|.
name|TSSLTransportParameters
name|params
init|=
operator|new
name|TSSLTransportFactory
operator|.
name|TSSLTransportParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setTrustStore
argument_list|(
name|trustStorePath
argument_list|,
name|trustStorePassWord
argument_list|)
expr_stmt|;
name|params
operator|.
name|requireClientAuth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// The underlying SSLSocket object is bound to host:port with the given SO_TIMEOUT and
comment|// SSLContext created with the given params
name|TSocket
name|tSSLSocket
init|=
name|TSSLTransportFactory
operator|.
name|getClientSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|loginTimeout
argument_list|,
name|params
argument_list|)
decl_stmt|;
return|return
name|getSSLSocketWithHttps
argument_list|(
name|tSSLSocket
argument_list|)
return|;
block|}
comment|// Using endpoint identification algorithm as HTTPS enables us to do
comment|// CNAMEs/subjectAltName verification
specifier|private
specifier|static
name|TSocket
name|getSSLSocketWithHttps
parameter_list|(
name|TSocket
name|tSSLSocket
parameter_list|)
throws|throws
name|TTransportException
block|{
name|SSLSocket
name|sslSocket
init|=
operator|(
name|SSLSocket
operator|)
name|tSSLSocket
operator|.
name|getSocket
argument_list|()
decl_stmt|;
name|SSLParameters
name|sslParams
init|=
name|sslSocket
operator|.
name|getSSLParameters
argument_list|()
decl_stmt|;
name|sslParams
operator|.
name|setEndpointIdentificationAlgorithm
argument_list|(
literal|"HTTPS"
argument_list|)
expr_stmt|;
name|sslSocket
operator|.
name|setSSLParameters
argument_list|(
name|sslParams
argument_list|)
expr_stmt|;
return|return
operator|new
name|TSocket
argument_list|(
name|sslSocket
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TServerSocket
name|getServerSocket
parameter_list|(
name|String
name|hiveHost
parameter_list|,
name|int
name|portNum
parameter_list|)
throws|throws
name|TTransportException
block|{
name|InetSocketAddress
name|serverAddress
decl_stmt|;
if|if
condition|(
name|hiveHost
operator|==
literal|null
operator|||
name|hiveHost
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Wildcard bind
name|serverAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|portNum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|hiveHost
argument_list|,
name|portNum
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TServerSocket
argument_list|(
name|serverAddress
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TServerSocket
name|getServerSSLSocket
parameter_list|(
name|String
name|hiveHost
parameter_list|,
name|int
name|portNum
parameter_list|,
name|String
name|keyStorePath
parameter_list|,
name|String
name|keyStorePassWord
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|sslVersionBlacklist
parameter_list|)
throws|throws
name|TTransportException
throws|,
name|UnknownHostException
block|{
name|TSSLTransportFactory
operator|.
name|TSSLTransportParameters
name|params
init|=
operator|new
name|TSSLTransportFactory
operator|.
name|TSSLTransportParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setKeyStore
argument_list|(
name|keyStorePath
argument_list|,
name|keyStorePassWord
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|serverAddress
decl_stmt|;
if|if
condition|(
name|hiveHost
operator|==
literal|null
operator|||
name|hiveHost
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Wildcard bind
name|serverAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|portNum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|hiveHost
argument_list|,
name|portNum
argument_list|)
expr_stmt|;
block|}
name|TServerSocket
name|thriftServerSocket
init|=
name|TSSLTransportFactory
operator|.
name|getServerSocket
argument_list|(
name|portNum
argument_list|,
literal|0
argument_list|,
name|serverAddress
operator|.
name|getAddress
argument_list|()
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|thriftServerSocket
operator|.
name|getServerSocket
argument_list|()
operator|instanceof
name|SSLServerSocket
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sslVersionBlacklistLocal
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|sslVersion
range|:
name|sslVersionBlacklist
control|)
block|{
name|sslVersionBlacklistLocal
operator|.
name|add
argument_list|(
name|sslVersion
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SSLServerSocket
name|sslServerSocket
init|=
operator|(
name|SSLServerSocket
operator|)
name|thriftServerSocket
operator|.
name|getServerSocket
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|enabledProtocols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|protocol
range|:
name|sslServerSocket
operator|.
name|getEnabledProtocols
argument_list|()
control|)
block|{
if|if
condition|(
name|sslVersionBlacklistLocal
operator|.
name|contains
argument_list|(
name|protocol
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Disabling SSL Protocol: "
operator|+
name|protocol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|enabledProtocols
operator|.
name|add
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
block|}
name|sslServerSocket
operator|.
name|setEnabledProtocols
argument_list|(
name|enabledProtocols
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SSL Server Socket Enabled Protocols: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|sslServerSocket
operator|.
name|getEnabledProtocols
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|thriftServerSocket
return|;
block|}
block|}
end_class

end_unit

