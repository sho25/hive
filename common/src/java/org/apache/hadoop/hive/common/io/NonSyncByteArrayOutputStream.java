begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * A thread-not-safe version of ByteArrayOutputStream, which removes all  * synchronized modifiers.  */
end_comment

begin_class
specifier|public
class|class
name|NonSyncByteArrayOutputStream
extends|extends
name|ByteArrayOutputStream
block|{
specifier|public
name|NonSyncByteArrayOutputStream
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NonSyncByteArrayOutputStream
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|count
return|;
block|}
comment|/**    * {@inheritDoc}    */
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|enLargeBuffer
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|buf
argument_list|,
name|count
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|count
operator|+=
name|length
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
block|{
name|enLargeBuffer
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|buf
index|[
name|count
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|count
operator|+=
literal|1
expr_stmt|;
block|}
specifier|private
name|int
name|enLargeBuffer
parameter_list|(
name|int
name|increment
parameter_list|)
block|{
name|int
name|temp
init|=
name|count
operator|+
name|increment
decl_stmt|;
name|int
name|newLen
init|=
name|temp
decl_stmt|;
if|if
condition|(
name|temp
operator|>
name|buf
operator|.
name|length
condition|)
block|{
if|if
condition|(
operator|(
name|buf
operator|.
name|length
operator|<<
literal|1
operator|)
operator|>
name|temp
condition|)
name|newLen
operator|=
name|buf
operator|.
name|length
operator|<<
literal|1
expr_stmt|;
name|byte
name|newbuf
index|[]
init|=
operator|new
name|byte
index|[
name|newLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|newbuf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|buf
operator|=
name|newbuf
expr_stmt|;
block|}
return|return
name|newLen
return|;
block|}
comment|/**    * {@inheritDoc}    */
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
operator|(
name|off
operator|<
literal|0
operator|)
operator|||
operator|(
name|off
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|enLargeBuffer
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|buf
argument_list|,
name|count
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|count
operator|+=
name|len
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

