begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * HiveStatsUtils.  * A collection of utilities used for hive statistics.  * Used by classes in both metastore and ql package  */
end_comment

begin_class
specifier|public
class|class
name|HiveStatsUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveStatsUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Get all file status from a root path and recursively go deep into certain levels.    *    * @param path    *          the root path    * @param level    *          the depth of directory to explore    * @param fs    *          the file system    * @return array of FileStatus    * @throws IOException    */
specifier|public
specifier|static
name|FileStatus
index|[]
name|getFileStatusRecurse
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|level
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFileStatusRecurse
argument_list|(
name|path
argument_list|,
name|level
argument_list|,
name|fs
argument_list|,
name|FileUtils
operator|.
name|HIDDEN_FILES_PATH_FILTER
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FileStatus
index|[]
name|getFileStatusRecurse
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|level
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFileStatusRecurse
argument_list|(
name|path
argument_list|,
name|level
argument_list|,
name|fs
argument_list|,
name|filter
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FileStatus
index|[]
name|getFileStatusRecurse
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|level
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|PathFilter
name|filter
parameter_list|,
name|boolean
name|allLevelsBelow
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if level is<0, the return all files/directories under the specified path
if|if
condition|(
name|level
operator|<
literal|0
condition|)
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|listStatusRecursively
argument_list|(
name|fs
argument_list|,
name|fileStatus
argument_list|,
name|filter
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// globStatus() API returns empty FileStatus[] when the specified path
comment|// does not exist. But getFileStatus() throw IOException. To mimic the
comment|// similar behavior we will return empty array on exception. For external
comment|// tables, the path of the table will not exists during table creation
return|return
operator|new
name|FileStatus
index|[
literal|0
index|]
return|;
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|// construct a path pattern (e.g., /*/*) to find all dynamically generated paths
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|level
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
name|Path
name|pathPattern
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allLevelsBelow
condition|)
block|{
return|return
name|fs
operator|.
name|globStatus
argument_list|(
name|pathPattern
argument_list|,
name|filter
argument_list|)
return|;
block|}
name|LinkedList
argument_list|<
name|FileStatus
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|status
range|:
name|fs
operator|.
name|globStatus
argument_list|(
name|pathPattern
argument_list|)
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FileStatus
name|status
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|child
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|child
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getNumBitVectorsForNDVEstimation
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numBitVectors
decl_stmt|;
name|float
name|percentageError
init|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_STATS_NDV_ERROR
argument_list|)
decl_stmt|;
if|if
condition|(
name|percentageError
operator|<
literal|0.0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"hive.stats.ndv.error can't be negative"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|2.4
condition|)
block|{
name|numBitVectors
operator|=
literal|1024
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Lowest error achievable is 2.4% but error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 1024 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|3.4
condition|)
block|{
name|numBitVectors
operator|=
literal|1024
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 1024 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|4.8
condition|)
block|{
name|numBitVectors
operator|=
literal|512
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 512 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|6.8
condition|)
block|{
name|numBitVectors
operator|=
literal|256
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 256 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|9.7
condition|)
block|{
name|numBitVectors
operator|=
literal|128
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 128 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|13.8
condition|)
block|{
name|numBitVectors
operator|=
literal|64
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 64 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|19.6
condition|)
block|{
name|numBitVectors
operator|=
literal|32
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 32 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|28.2
condition|)
block|{
name|numBitVectors
operator|=
literal|16
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 16 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|40.9
condition|)
block|{
name|numBitVectors
operator|=
literal|8
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 8 bit vectors.."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|percentageError
operator|<=
literal|61.0
condition|)
block|{
name|numBitVectors
operator|=
literal|4
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 4 bit vectors.."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numBitVectors
operator|=
literal|2
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Error requested is "
operator|+
name|percentageError
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Choosing 2 bit vectors.."
argument_list|)
expr_stmt|;
block|}
return|return
name|numBitVectors
return|;
block|}
block|}
end_class

end_unit

