begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|jsonexplain
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|JsonMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_class
specifier|public
class|class
name|Vertex
block|{
specifier|public
name|String
name|name
decl_stmt|;
comment|// vertex's parent connections.
specifier|public
name|List
argument_list|<
name|Connection
argument_list|>
name|parentConnections
decl_stmt|;
comment|// vertex's children vertex.
specifier|public
name|List
argument_list|<
name|Vertex
argument_list|>
name|children
decl_stmt|;
comment|// the jsonObject for this vertex
specifier|public
name|JSONObject
name|vertexObject
decl_stmt|;
comment|// whether this vertex is a union vertex
specifier|public
name|boolean
name|union
decl_stmt|;
comment|// whether this vertex is dummy (which does not really exists but is created),
comment|// e.g., a dummy vertex for a mergejoin branch
specifier|public
name|boolean
name|dummy
decl_stmt|;
comment|// the rootOps in this vertex
specifier|public
name|List
argument_list|<
name|Op
argument_list|>
name|rootOps
decl_stmt|;
comment|// we create a dummy vertex for a mergejoin branch for a self join if this
comment|// vertex is a mergejoin
specifier|public
name|List
argument_list|<
name|Vertex
argument_list|>
name|mergeJoinDummyVertexs
decl_stmt|;
comment|// whether this vertex has multiple reduce operators
name|boolean
name|hasMultiReduceOp
decl_stmt|;
specifier|public
name|Vertex
parameter_list|(
name|String
name|name
parameter_list|,
name|JSONObject
name|vertexObject
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
operator|&&
name|this
operator|.
name|name
operator|.
name|contains
argument_list|(
literal|"Union"
argument_list|)
condition|)
block|{
name|this
operator|.
name|union
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|union
operator|=
literal|false
expr_stmt|;
block|}
name|this
operator|.
name|dummy
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|vertexObject
operator|=
name|vertexObject
expr_stmt|;
name|this
operator|.
name|parentConnections
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootOps
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|mergeJoinDummyVertexs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|hasMultiReduceOp
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|addDependency
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|JSONException
block|{
name|this
operator|.
name|parentConnections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws JSONException    * @throws JsonParseException    * @throws JsonMappingException    * @throws IOException    * @throws Exception    *           We assume that there is a single top-level Map Operator Tree or a    *           Reduce Operator Tree in a vertex    */
specifier|public
name|void
name|extractOpTree
parameter_list|()
throws|throws
name|JSONException
throws|,
name|JsonParseException
throws|,
name|JsonMappingException
throws|,
name|IOException
throws|,
name|Exception
block|{
if|if
condition|(
name|vertexObject
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|JSONObject
operator|.
name|getNames
argument_list|(
name|vertexObject
argument_list|)
control|)
block|{
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"Map Operator Tree:"
argument_list|)
condition|)
block|{
name|extractOp
argument_list|(
name|vertexObject
operator|.
name|getJSONArray
argument_list|(
name|key
argument_list|)
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"Reduce Operator Tree:"
argument_list|)
operator|||
name|key
operator|.
name|equals
argument_list|(
literal|"Processor Tree:"
argument_list|)
condition|)
block|{
name|extractOp
argument_list|(
name|vertexObject
operator|.
name|getJSONObject
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// this is the case when we have a map-side SMB join
comment|// one input of the join is treated as a dummy vertex
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"Join:"
argument_list|)
condition|)
block|{
name|JSONArray
name|array
init|=
name|vertexObject
operator|.
name|getJSONArray
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|array
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|JSONObject
name|mpOpTree
init|=
name|array
operator|.
name|getJSONObject
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Vertex
name|v
init|=
operator|new
name|Vertex
argument_list|(
literal|""
argument_list|,
name|mpOpTree
argument_list|)
decl_stmt|;
name|v
operator|.
name|extractOpTree
argument_list|()
expr_stmt|;
name|v
operator|.
name|dummy
operator|=
literal|true
expr_stmt|;
name|mergeJoinDummyVertexs
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"unsupported operator tree in vertex "
operator|+
name|this
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * @param operator    * @param parent    * @return    * @throws JSONException    * @throws JsonParseException    * @throws JsonMappingException    * @throws IOException    * @throws Exception    *           assumption: each operator only has one parent but may have many    *           children    */
name|Op
name|extractOp
parameter_list|(
name|JSONObject
name|operator
parameter_list|)
throws|throws
name|JSONException
throws|,
name|JsonParseException
throws|,
name|JsonMappingException
throws|,
name|IOException
throws|,
name|Exception
block|{
name|String
index|[]
name|names
init|=
name|JSONObject
operator|.
name|getNames
argument_list|(
name|operator
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expect only one operator in "
operator|+
name|operator
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|opName
init|=
name|names
index|[
literal|0
index|]
decl_stmt|;
name|JSONObject
name|attrObj
init|=
operator|(
name|JSONObject
operator|)
name|operator
operator|.
name|get
argument_list|(
name|opName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Attr
argument_list|>
name|attrs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Op
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|id
init|=
literal|null
decl_stmt|;
name|String
name|outputVertexName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|attrName
range|:
name|JSONObject
operator|.
name|getNames
argument_list|(
name|attrObj
argument_list|)
control|)
block|{
if|if
condition|(
name|attrName
operator|.
name|equals
argument_list|(
literal|"children"
argument_list|)
condition|)
block|{
name|Object
name|childrenObj
init|=
name|attrObj
operator|.
name|get
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|childrenObj
operator|instanceof
name|JSONObject
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|JSONObject
operator|)
name|childrenObj
operator|)
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|children
operator|.
name|add
argument_list|(
name|extractOp
argument_list|(
operator|(
name|JSONObject
operator|)
name|childrenObj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|childrenObj
operator|instanceof
name|JSONArray
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|JSONArray
operator|)
name|childrenObj
operator|)
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|JSONArray
name|array
init|=
operator|(
operator|(
name|JSONArray
operator|)
name|childrenObj
operator|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|array
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|children
operator|.
name|add
argument_list|(
name|extractOp
argument_list|(
name|array
operator|.
name|getJSONObject
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unsupported operator "
operator|+
name|this
operator|.
name|name
operator|+
literal|"'s children operator is neither a jsonobject nor a jsonarray"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|attrName
operator|.
name|equals
argument_list|(
literal|"OperatorId:"
argument_list|)
condition|)
block|{
name|id
operator|=
name|attrObj
operator|.
name|get
argument_list|(
name|attrName
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attrName
operator|.
name|equals
argument_list|(
literal|"outputname:"
argument_list|)
condition|)
block|{
name|outputVertexName
operator|=
name|attrObj
operator|.
name|get
argument_list|(
name|attrName
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|attrs
operator|.
name|add
argument_list|(
operator|new
name|Attr
argument_list|(
name|attrName
argument_list|,
name|attrObj
operator|.
name|get
argument_list|(
name|attrName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Op
name|op
init|=
operator|new
name|Op
argument_list|(
name|opName
argument_list|,
name|id
argument_list|,
name|outputVertexName
argument_list|,
name|children
argument_list|,
name|attrs
argument_list|,
name|operator
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Op
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|parent
operator|=
name|op
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|rootOps
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
block|}
specifier|public
name|void
name|print
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|List
argument_list|<
name|Boolean
argument_list|>
name|indentFlag
parameter_list|,
name|String
name|type
parameter_list|,
name|Vertex
name|callingVertex
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// print vertexname
if|if
condition|(
name|TezJsonParser
operator|.
name|printSet
operator|.
name|contains
argument_list|(
name|this
argument_list|)
operator|&&
operator|!
name|hasMultiReduceOp
condition|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|TezJsonParser
operator|.
name|prefixString
argument_list|(
name|indentFlag
argument_list|,
literal|"|<-"
argument_list|)
operator|+
literal|" Please refer to the previous "
operator|+
name|this
operator|.
name|name
operator|+
literal|" ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
name|TezJsonParser
operator|.
name|prefixString
argument_list|(
name|indentFlag
argument_list|,
literal|"|<-"
argument_list|)
operator|+
literal|" Please refer to the previous "
operator|+
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|TezJsonParser
operator|.
name|printSet
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|TezJsonParser
operator|.
name|prefixString
argument_list|(
name|indentFlag
argument_list|,
literal|"|<-"
argument_list|)
operator|+
name|this
operator|.
name|name
operator|+
literal|" ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|TezJsonParser
operator|.
name|prefixString
argument_list|(
name|indentFlag
argument_list|)
operator|+
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
comment|// print operators
if|if
condition|(
name|hasMultiReduceOp
operator|&&
operator|!
name|callingVertex
operator|.
name|union
condition|)
block|{
comment|// find the right op
name|Op
name|choose
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Op
name|op
range|:
name|this
operator|.
name|rootOps
control|)
block|{
if|if
condition|(
name|op
operator|.
name|outputVertexName
operator|.
name|equals
argument_list|(
name|callingVertex
operator|.
name|name
argument_list|)
condition|)
block|{
name|choose
operator|=
name|op
expr_stmt|;
block|}
block|}
if|if
condition|(
name|choose
operator|!=
literal|null
condition|)
block|{
name|choose
operator|.
name|print
argument_list|(
name|out
argument_list|,
name|indentFlag
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Can not find the right reduce output operator for vertex "
operator|+
name|this
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Op
name|op
range|:
name|this
operator|.
name|rootOps
control|)
block|{
comment|// dummy vertex is treated as a branch of a join operator
if|if
condition|(
name|this
operator|.
name|dummy
condition|)
block|{
name|op
operator|.
name|print
argument_list|(
name|out
argument_list|,
name|indentFlag
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|op
operator|.
name|print
argument_list|(
name|out
argument_list|,
name|indentFlag
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|union
condition|)
block|{
comment|// print dependent vertexs
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|this
operator|.
name|parentConnections
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|Connection
name|connection
init|=
name|this
operator|.
name|parentConnections
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|unionFlag
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|unionFlag
operator|.
name|addAll
argument_list|(
name|indentFlag
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
name|this
operator|.
name|parentConnections
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|unionFlag
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unionFlag
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|from
operator|.
name|print
argument_list|(
name|out
argument_list|,
name|unionFlag
argument_list|,
name|connection
operator|.
name|type
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * We check if a vertex has multiple reduce operators.    */
specifier|public
name|void
name|checkMultiReduceOperator
parameter_list|()
block|{
comment|// check if it is a reduce vertex and its children is more than 1;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|contains
argument_list|(
literal|"Reduce"
argument_list|)
operator|||
name|this
operator|.
name|rootOps
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
return|return;
block|}
comment|// check if all the child ops are reduce output operators
for|for
control|(
name|Op
name|op
range|:
name|this
operator|.
name|rootOps
control|)
block|{
if|if
condition|(
operator|!
name|op
operator|.
name|name
operator|.
name|contains
argument_list|(
literal|"Reduce"
argument_list|)
condition|)
return|return;
block|}
name|this
operator|.
name|hasMultiReduceOp
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

