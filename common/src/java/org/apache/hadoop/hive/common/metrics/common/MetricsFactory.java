begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_comment
comment|/**  * Class that manages a static Metric instance for this process.  */
end_comment

begin_class
specifier|public
class|class
name|MetricsFactory
block|{
comment|//Volatile ensures that static access returns Metrics instance in fully-initialized state.
comment|//Alternative is to synchronize static access, which has performance penalties.
specifier|private
specifier|volatile
specifier|static
name|Metrics
name|metrics
decl_stmt|;
comment|/**    * Initializes static Metrics instance.    */
specifier|public
specifier|synchronized
specifier|static
name|void
name|init
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|metrics
operator|==
literal|null
condition|)
block|{
name|Class
name|metricsClass
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_METRICS_CLASS
argument_list|)
argument_list|)
decl_stmt|;
name|Constructor
name|constructor
init|=
name|metricsClass
operator|.
name|getConstructor
argument_list|(
name|HiveConf
operator|.
name|class
argument_list|)
decl_stmt|;
name|metrics
operator|=
operator|(
name|Metrics
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns static Metrics instance, null if not initialized or closed.    */
specifier|public
specifier|static
name|Metrics
name|getInstance
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
comment|/**    * Closes and removes static Metrics instance.    */
specifier|public
specifier|synchronized
specifier|static
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|close
argument_list|()
expr_stmt|;
name|metrics
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

