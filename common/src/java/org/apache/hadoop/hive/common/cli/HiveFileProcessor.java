begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * HiveFileProcessor is used for processing a file consist of Hive executable  * statements  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HiveFileProcessor
implements|implements
name|IHiveFileProcessor
block|{
specifier|public
name|int
name|processFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|bufferedReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bufferedReader
operator|=
name|loadFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
return|return
operator|(
name|processReader
argument_list|(
name|bufferedReader
argument_list|)
operator|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|bufferedReader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * load commands into buffered reader from the file    * @param fileName    * @return    * @throws IOException    */
specifier|protected
specifier|abstract
name|BufferedReader
name|loadFile
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * execute the buffered reader which stores the commands    * @param reader the buffered reader    * @return the return code of the execution result    * @throws IOException    */
specifier|protected
name|int
name|processReader
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|line
decl_stmt|;
name|StringBuilder
name|qsb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
name|qsb
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|processLine
argument_list|(
name|qsb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * process the Hive command by lines    * @param line contains a legal Hive command    * @return the return code of the execution result    */
specifier|protected
name|int
name|processLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|int
name|lastRet
init|=
literal|0
decl_stmt|,
name|ret
init|=
literal|0
decl_stmt|;
name|String
name|command
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|oneCmd
range|:
name|line
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|indexOf
argument_list|(
name|oneCmd
argument_list|,
literal|"\\"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|command
operator|+=
name|StringUtils
operator|.
name|join
argument_list|(
name|oneCmd
operator|.
name|split
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|command
operator|+=
name|oneCmd
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|command
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ret
operator|=
name|processCmd
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|command
operator|=
literal|""
expr_stmt|;
name|lastRet
operator|=
name|ret
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
block|}
return|return
name|lastRet
return|;
block|}
comment|/**    * define the processor for each Hive command supported by Hive    * @param cmd    * @return the return code of the execution result    */
specifier|protected
specifier|abstract
name|int
name|processCmd
parameter_list|(
name|String
name|cmd
parameter_list|)
function_decl|;
block|}
end_class

end_unit

