begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|HiveInterruptUtils
block|{
comment|/**    * A list of currently running comments that needs cleanup when the command is canceled    */
specifier|private
specifier|static
name|List
argument_list|<
name|HiveInterruptCallback
argument_list|>
name|interruptCallbacks
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveInterruptCallback
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|HiveInterruptCallback
name|add
parameter_list|(
name|HiveInterruptCallback
name|command
parameter_list|)
block|{
synchronized|synchronized
init|(
name|interruptCallbacks
init|)
block|{
name|interruptCallbacks
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
name|command
return|;
block|}
specifier|public
specifier|static
name|HiveInterruptCallback
name|remove
parameter_list|(
name|HiveInterruptCallback
name|command
parameter_list|)
block|{
synchronized|synchronized
init|(
name|interruptCallbacks
init|)
block|{
name|interruptCallbacks
operator|.
name|remove
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
name|command
return|;
block|}
comment|/**    * Request interruption of current hive command    */
specifier|public
specifier|static
name|void
name|interrupt
parameter_list|()
block|{
synchronized|synchronized
init|(
name|interruptCallbacks
init|)
block|{
for|for
control|(
name|HiveInterruptCallback
name|resource
range|:
operator|new
name|ArrayList
argument_list|<
name|HiveInterruptCallback
argument_list|>
argument_list|(
name|interruptCallbacks
argument_list|)
control|)
block|{
name|resource
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Checks if the current thread has been interrupted and throws RuntimeException is it has.    */
specifier|public
specifier|static
name|void
name|checkInterrupted
parameter_list|()
block|{
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|InterruptedException
name|interrupt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|interrupt
operator|=
name|e
expr_stmt|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Interrupted"
argument_list|,
name|interrupt
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

