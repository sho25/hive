begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LogEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|appender
operator|.
name|routing
operator|.
name|RoutingAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|AppenderControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|LoggerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|impl
operator|.
name|Log4jContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|spi
operator|.
name|DefaultThreadContextMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Utilities common to logging operations.  */
end_comment

begin_class
specifier|public
class|class
name|LogUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_L4J
init|=
literal|"hive-log4j2.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_EXEC_L4J
init|=
literal|"hive-exec-log4j2.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|l4j
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Constants for log masking    */
specifier|private
specifier|static
specifier|final
name|String
name|KEY_TO_MASK_WITH
init|=
literal|"password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MASKED_VALUE
init|=
literal|"###_MASKED_###"
decl_stmt|;
comment|/**    * Constants of the key strings for the logging ThreadContext.    */
specifier|public
specifier|static
specifier|final
name|String
name|SESSIONID_LOG_KEY
init|=
literal|"sessionId"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUERYID_LOG_KEY
init|=
literal|"queryId"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPERATIONLOG_LEVEL_KEY
init|=
literal|"operationLogLevel"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
class|class
name|LogInitializationException
extends|extends
name|Exception
block|{
specifier|public
name|LogInitializationException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initialize log4j.    *    * @return an message suitable for display to the user    * @throws LogInitializationException if log4j fails to initialize correctly    */
specifier|public
specifier|static
name|String
name|initHiveLog4j
parameter_list|()
throws|throws
name|LogInitializationException
block|{
return|return
name|initHiveLog4jCommon
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_LOG4J_FILE
argument_list|)
return|;
block|}
comment|/**    * Initialize log4j for execution mode.    *    * @return an message suitable for display to the user    * @throws LogInitializationException if log4j-exec fails to initialize correctly    */
specifier|public
specifier|static
name|String
name|initHiveExecLog4j
parameter_list|()
throws|throws
name|LogInitializationException
block|{
return|return
name|initHiveLog4jCommon
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_LOG4J_FILE
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|initHiveLog4jCommon
parameter_list|(
name|ConfVars
name|confVarName
parameter_list|)
throws|throws
name|LogInitializationException
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
return|return
name|initHiveLog4jCommon
argument_list|(
name|conf
argument_list|,
name|confVarName
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|String
name|initHiveLog4jCommon
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|ConfVars
name|confVarName
parameter_list|)
throws|throws
name|LogInitializationException
block|{
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|confVarName
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// if log4j configuration file not set, or could not found, use default setting
return|return
name|initHiveLog4jDefault
argument_list|(
name|conf
argument_list|,
literal|""
argument_list|,
name|confVarName
argument_list|)
return|;
block|}
else|else
block|{
comment|// if log4j configuration file found successfully, use HiveConf property value
name|String
name|log4jFileName
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|confVarName
argument_list|)
decl_stmt|;
name|File
name|log4jConfigFile
init|=
operator|new
name|File
argument_list|(
name|log4jFileName
argument_list|)
decl_stmt|;
name|boolean
name|fileExists
init|=
name|log4jConfigFile
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fileExists
condition|)
block|{
comment|// if property specified file not found in local file system
comment|// use default setting
return|return
name|initHiveLog4jDefault
argument_list|(
name|conf
argument_list|,
literal|"Not able to find conf file: "
operator|+
name|log4jConfigFile
argument_list|,
name|confVarName
argument_list|)
return|;
block|}
else|else
block|{
comment|// property speficied file found in local file system
comment|// use the specified file
if|if
condition|(
name|confVarName
operator|==
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_LOG4J_FILE
condition|)
block|{
name|String
name|queryId
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryId
operator|==
literal|null
operator|||
operator|(
name|queryId
operator|=
name|queryId
operator|.
name|trim
argument_list|()
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|queryId
operator|=
literal|"unknown-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
operator|.
name|toString
argument_list|()
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|async
init|=
name|checkAndSetAsyncLogging
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// required for MDC based routing appender so that child threads can inherit the MDC context
name|System
operator|.
name|setProperty
argument_list|(
name|DefaultThreadContextMap
operator|.
name|INHERITABLE_MAP
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Configurator
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|log4jFileName
argument_list|)
expr_stmt|;
name|logConfigLocation
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
literal|"Logging initialized using configuration in "
operator|+
name|log4jConfigFile
operator|+
literal|" Async: "
operator|+
name|async
return|;
block|}
block|}
block|}
specifier|public
specifier|static
name|boolean
name|checkAndSetAsyncLogging
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|boolean
name|asyncLogging
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_ASYNC_LOG_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncLogging
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"Log4jContextSelector"
argument_list|,
literal|"org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
argument_list|)
expr_stmt|;
comment|// default is ClassLoaderContextSelector which is created during automatic logging
comment|// initialization in a static initialization block.
comment|// Changing ContextSelector at runtime requires creating new context factory which will
comment|// internally create new context selector based on system property.
name|LogManager
operator|.
name|setFactory
argument_list|(
operator|new
name|Log4jContextFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|asyncLogging
return|;
block|}
specifier|private
specifier|static
name|String
name|initHiveLog4jDefault
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|logMessage
parameter_list|,
name|ConfVars
name|confVarName
parameter_list|)
throws|throws
name|LogInitializationException
block|{
name|URL
name|hive_l4j
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|confVarName
condition|)
block|{
case|case
name|HIVE_EXEC_LOG4J_FILE
case|:
name|hive_l4j
operator|=
name|LogUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|HIVE_EXEC_L4J
argument_list|)
expr_stmt|;
if|if
condition|(
name|hive_l4j
operator|==
literal|null
condition|)
block|{
name|hive_l4j
operator|=
name|LogUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|HIVE_L4J
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
operator|.
name|toString
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HIVE_LOG4J_FILE
case|:
name|hive_l4j
operator|=
name|LogUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|HIVE_L4J
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|hive_l4j
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|async
init|=
name|checkAndSetAsyncLogging
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|DefaultThreadContextMap
operator|.
name|INHERITABLE_MAP
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|Configurator
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|hive_l4j
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logConfigLocation
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|(
name|logMessage
operator|+
literal|"\n"
operator|+
literal|"Logging initialized using configuration in "
operator|+
name|hive_l4j
operator|+
literal|" Async: "
operator|+
name|async
operator|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|LogInitializationException
argument_list|(
name|logMessage
operator|+
literal|"Unable to initialize logging using "
operator|+
name|LogUtils
operator|.
name|HIVE_L4J
operator|+
literal|", not found on CLASSPATH!"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|logConfigLocation
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|LogInitializationException
block|{
comment|// Log a warning if hive-default.xml is found on the classpath
if|if
condition|(
name|conf
operator|.
name|getHiveDefaultLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|l4j
operator|.
name|warn
argument_list|(
literal|"DEPRECATED: Ignoring hive-default.xml found on the CLASSPATH at "
operator|+
name|conf
operator|.
name|getHiveDefaultLocation
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Look for hive-site.xml on the CLASSPATH and log its location if found.
if|if
condition|(
name|conf
operator|.
name|getHiveSiteLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|l4j
operator|.
name|warn
argument_list|(
literal|"hive-site.xml not found on CLASSPATH"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l4j
operator|.
name|debug
argument_list|(
literal|"Using hive-site.xml found on CLASSPATH at "
operator|+
name|conf
operator|.
name|getHiveSiteLocation
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns MASKED_VALUE if the key contains KEY_TO_MASK_WITH or the original property otherwise.    * Used to mask environment variables, and properties in logs which contain passwords    * @param key The property key to check    * @param value The original value of the property    * @return The masked property value    */
specifier|public
specifier|static
name|String
name|maskIfPassword
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|KEY_TO_MASK_WITH
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|MASKED_VALUE
return|;
block|}
block|}
return|return
name|value
return|;
block|}
comment|/**    * Register logging context so that log system can print QueryId, SessionId, etc for each message    */
specifier|public
specifier|static
name|void
name|registerLoggingContext
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|MDC
operator|.
name|put
argument_list|(
name|SESSIONID_LOG_KEY
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESESSIONID
argument_list|)
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|QUERYID_LOG_KEY
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_LOGGING_OPERATION_ENABLED
argument_list|)
condition|)
block|{
name|MDC
operator|.
name|put
argument_list|(
name|OPERATIONLOG_LEVEL_KEY
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_LOGGING_OPERATION_LEVEL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Unregister logging context    */
specifier|public
specifier|static
name|void
name|unregisterLoggingContext
parameter_list|()
block|{
name|MDC
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Stop the subordinate appender for the operation log so it will not leak a file descriptor.    * @param routingAppenderName the name of the RoutingAppender    * @param queryId the id of the query that is closing    */
specifier|public
specifier|static
name|void
name|stopQueryAppender
parameter_list|(
name|String
name|routingAppenderName
parameter_list|,
name|String
name|queryId
parameter_list|)
block|{
name|LoggerContext
name|context
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
name|configuration
init|=
name|context
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|LoggerConfig
name|loggerConfig
init|=
name|configuration
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Appender
argument_list|>
name|appenders
init|=
name|loggerConfig
operator|.
name|getAppenders
argument_list|()
decl_stmt|;
name|RoutingAppender
name|routingAppender
init|=
operator|(
name|RoutingAppender
operator|)
name|appenders
operator|.
name|get
argument_list|(
name|routingAppenderName
argument_list|)
decl_stmt|;
comment|// routingAppender can be null if it has not been registered
if|if
condition|(
name|routingAppender
operator|!=
literal|null
condition|)
block|{
comment|// The appender is configured to use ${ctx:queryId} by registerRoutingAppender()
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|RoutingAppender
argument_list|>
name|clazz
init|=
name|routingAppender
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|clazz
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getControl"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|LogEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AppenderControl
name|control
init|=
operator|(
name|AppenderControl
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|routingAppender
argument_list|,
name|queryId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Appender
name|subordinateAppender
init|=
name|control
operator|.
name|getAppender
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|subordinateAppender
operator|.
name|isStopped
argument_list|()
condition|)
block|{
comment|// this will cause the subordinate appender to close its output stream.
name|subordinateAppender
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|SecurityException
decl||
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|l4j
operator|.
name|warn
argument_list|(
literal|"Unable to close the operation log appender for query id "
operator|+
name|queryId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

