begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_comment
comment|/**  * Utilities common to logging operations.  */
end_comment

begin_class
specifier|public
class|class
name|LogUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_L4J
init|=
literal|"hive-log4j.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HIVE_EXEC_L4J
init|=
literal|"hive-exec-log4j.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|l4j
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LogUtils
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
class|class
name|LogInitializationException
extends|extends
name|Exception
block|{
specifier|public
name|LogInitializationException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Initialize log4j.    *    * @return an message suitable for display to the user    * @throws LogInitializationException if log4j fails to initialize correctly    */
specifier|public
specifier|static
name|String
name|initHiveLog4j
parameter_list|()
throws|throws
name|LogInitializationException
block|{
return|return
name|initHiveLog4jCommon
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_LOG4J_FILE
argument_list|)
return|;
block|}
comment|/**    * Initialize log4j for execution mode.    *    * @return an message suitable for display to the user    * @throws LogInitializationException if log4j-exec fails to initialize correctly    */
specifier|public
specifier|static
name|String
name|initHiveExecLog4j
parameter_list|()
throws|throws
name|LogInitializationException
block|{
return|return
name|initHiveLog4jCommon
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_LOG4J_FILE
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|initHiveLog4jCommon
parameter_list|(
name|ConfVars
name|confVarName
parameter_list|)
throws|throws
name|LogInitializationException
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|confVarName
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// if log4j configuration file not set, or could not found, use default setting
return|return
name|initHiveLog4jDefault
argument_list|(
name|conf
argument_list|,
literal|""
argument_list|,
name|confVarName
argument_list|)
return|;
block|}
else|else
block|{
comment|// if log4j configuration file found successfully, use HiveConf property value
name|String
name|log4jFileName
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|confVarName
argument_list|)
decl_stmt|;
name|File
name|log4jConfigFile
init|=
operator|new
name|File
argument_list|(
name|log4jFileName
argument_list|)
decl_stmt|;
name|boolean
name|fileExists
init|=
name|log4jConfigFile
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fileExists
condition|)
block|{
comment|// if property specified file not found in local file system
comment|// use default setting
return|return
name|initHiveLog4jDefault
argument_list|(
name|conf
argument_list|,
literal|"Not able to find conf file: "
operator|+
name|log4jConfigFile
argument_list|,
name|confVarName
argument_list|)
return|;
block|}
else|else
block|{
comment|// property speficied file found in local file system
comment|// use the specified file
if|if
condition|(
name|confVarName
operator|==
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_EXEC_LOG4J_FILE
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
operator|.
name|toString
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LogManager
operator|.
name|resetConfiguration
argument_list|()
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|log4jFileName
argument_list|)
expr_stmt|;
name|logConfigLocation
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|(
literal|"Logging initialized using configuration in "
operator|+
name|log4jConfigFile
operator|)
return|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|initHiveLog4jDefault
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|logMessage
parameter_list|,
name|ConfVars
name|confVarName
parameter_list|)
throws|throws
name|LogInitializationException
block|{
name|URL
name|hive_l4j
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|confVarName
condition|)
block|{
case|case
name|HIVE_EXEC_LOG4J_FILE
case|:
name|hive_l4j
operator|=
name|LogUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|HIVE_EXEC_L4J
argument_list|)
expr_stmt|;
if|if
condition|(
name|hive_l4j
operator|==
literal|null
condition|)
block|{
name|hive_l4j
operator|=
name|LogUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|HIVE_L4J
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
operator|.
name|toString
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HIVE_LOG4J_FILE
case|:
name|hive_l4j
operator|=
name|LogUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|HIVE_L4J
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|hive_l4j
operator|!=
literal|null
condition|)
block|{
name|LogManager
operator|.
name|resetConfiguration
argument_list|()
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|hive_l4j
argument_list|)
expr_stmt|;
name|logConfigLocation
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|(
name|logMessage
operator|+
literal|"\n"
operator|+
literal|"Logging initialized using configuration in "
operator|+
name|hive_l4j
operator|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|LogInitializationException
argument_list|(
name|logMessage
operator|+
literal|"Unable to initialize logging using "
operator|+
name|LogUtils
operator|.
name|HIVE_L4J
operator|+
literal|", not found on CLASSPATH!"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|logConfigLocation
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|LogInitializationException
block|{
comment|// Log a warning if hive-default.xml is found on the classpath
if|if
condition|(
name|conf
operator|.
name|getHiveDefaultLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|l4j
operator|.
name|warn
argument_list|(
literal|"DEPRECATED: Ignoring hive-default.xml found on the CLASSPATH at "
operator|+
name|conf
operator|.
name|getHiveDefaultLocation
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Look for hive-site.xml on the CLASSPATH and log its location if found.
if|if
condition|(
name|conf
operator|.
name|getHiveSiteLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|l4j
operator|.
name|warn
argument_list|(
literal|"hive-site.xml not found on CLASSPATH"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l4j
operator|.
name|debug
argument_list|(
literal|"Using hive-site.xml found on CLASSPATH at "
operator|+
name|conf
operator|.
name|getHiveSiteLocation
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

