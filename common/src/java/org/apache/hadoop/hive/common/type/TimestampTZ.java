begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|DateTimeException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatterBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|TextStyle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|TemporalAccessor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * This is the internal type for Timestamp with time zone.  * A wrapper of ZonedDateTime which automatically convert the Zone to UTC.  * The full qualified input format of Timestamp with time zone is  * "yyyy-MM-dd HH:mm:ss[.SSS...] zoneid/zoneoffset", where the time and zone parts are optional.  * If time part is absent, a default '00:00:00.0' will be used.  * If zone part is absent, the system time zone will be used.  * All timestamp with time zone will be converted and stored as UTC retaining the instant.  * E.g. "2017-04-14 18:00:00 Asia/Shanghai" will be converted to  * "2017-04-14 10:00:00.0 Z".  */
end_comment

begin_class
specifier|public
class|class
name|TimestampTZ
implements|implements
name|Comparable
argument_list|<
name|TimestampTZ
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|DateTimeFormatter
name|formatter
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ZoneId
name|UTC
init|=
name|ZoneOffset
operator|.
name|UTC
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ZonedDateTime
name|EPOCH
init|=
name|ZonedDateTime
operator|.
name|ofInstant
argument_list|(
name|Instant
operator|.
name|EPOCH
argument_list|,
name|UTC
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LocalTime
name|DEFAULT_LOCAL_TIME
init|=
name|LocalTime
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|SINGLE_DIGIT_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[\\+-]\\d:\\d\\d"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimestampTZ
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|DateFormat
argument_list|>
name|CONVERT_FORMATTER
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
argument_list|)
decl_stmt|;
static|static
block|{
name|DateTimeFormatterBuilder
name|builder
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
decl_stmt|;
comment|// Date part
name|builder
operator|.
name|append
argument_list|(
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Time part
name|builder
operator|.
name|optionalStart
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
literal|"HH:mm:ss"
argument_list|)
argument_list|)
operator|.
name|optionalStart
argument_list|()
operator|.
name|appendFraction
argument_list|(
name|ChronoField
operator|.
name|NANO_OF_SECOND
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
literal|true
argument_list|)
operator|.
name|optionalEnd
argument_list|()
operator|.
name|optionalEnd
argument_list|()
expr_stmt|;
comment|// Zone part
name|builder
operator|.
name|optionalStart
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|" "
argument_list|)
operator|.
name|optionalEnd
argument_list|()
expr_stmt|;
name|builder
operator|.
name|optionalStart
argument_list|()
operator|.
name|appendZoneText
argument_list|(
name|TextStyle
operator|.
name|NARROW
argument_list|)
operator|.
name|optionalEnd
argument_list|()
expr_stmt|;
name|formatter
operator|=
name|builder
operator|.
name|toFormatter
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ZonedDateTime
name|zonedDateTime
decl_stmt|;
specifier|public
name|TimestampTZ
parameter_list|()
block|{
name|this
argument_list|(
name|EPOCH
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimestampTZ
parameter_list|(
name|ZonedDateTime
name|zonedDateTime
parameter_list|)
block|{
name|setZonedDateTime
argument_list|(
name|zonedDateTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimestampTZ
parameter_list|(
name|long
name|seconds
parameter_list|,
name|int
name|nanos
parameter_list|)
block|{
name|set
argument_list|(
name|seconds
argument_list|,
name|nanos
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|long
name|seconds
parameter_list|,
name|int
name|nanos
parameter_list|)
block|{
name|Instant
name|instant
init|=
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|seconds
argument_list|,
name|nanos
argument_list|)
decl_stmt|;
name|setZonedDateTime
argument_list|(
name|ZonedDateTime
operator|.
name|ofInstant
argument_list|(
name|instant
argument_list|,
name|UTC
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ZonedDateTime
name|getZonedDateTime
parameter_list|()
block|{
return|return
name|zonedDateTime
return|;
block|}
specifier|public
name|void
name|setZonedDateTime
parameter_list|(
name|ZonedDateTime
name|zonedDateTime
parameter_list|)
block|{
name|this
operator|.
name|zonedDateTime
operator|=
name|zonedDateTime
operator|!=
literal|null
condition|?
name|zonedDateTime
operator|.
name|withZoneSameInstant
argument_list|(
name|UTC
argument_list|)
else|:
name|EPOCH
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|zonedDateTime
operator|.
name|format
argument_list|(
name|formatter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|zonedDateTime
operator|.
name|toInstant
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|TimestampTZ
condition|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|TimestampTZ
operator|)
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TimestampTZ
name|o
parameter_list|)
block|{
return|return
name|zonedDateTime
operator|.
name|toInstant
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|zonedDateTime
operator|.
name|toInstant
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|long
name|getEpochSecond
parameter_list|()
block|{
return|return
name|zonedDateTime
operator|.
name|toInstant
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
return|;
block|}
specifier|public
name|int
name|getNanos
parameter_list|()
block|{
return|return
name|zonedDateTime
operator|.
name|toInstant
argument_list|()
operator|.
name|getNano
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TimestampTZ
name|parse
parameter_list|(
name|String
name|s
parameter_list|)
block|{
comment|// need to handle offset with single digital hour, see JDK-8066806
name|s
operator|=
name|handleSingleDigitHourOffset
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|ZonedDateTime
name|zonedDateTime
decl_stmt|;
try|try
block|{
name|zonedDateTime
operator|=
name|ZonedDateTime
operator|.
name|parse
argument_list|(
name|s
argument_list|,
name|formatter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|e
parameter_list|)
block|{
comment|// try to be more tolerant
comment|// if the input is invalid instead of incomplete, we'll hit exception here again
name|TemporalAccessor
name|accessor
init|=
name|formatter
operator|.
name|parse
argument_list|(
name|s
argument_list|)
decl_stmt|;
comment|// LocalDate must be present
name|LocalDate
name|localDate
init|=
name|LocalDate
operator|.
name|from
argument_list|(
name|accessor
argument_list|)
decl_stmt|;
name|LocalTime
name|localTime
decl_stmt|;
name|ZoneId
name|zoneId
decl_stmt|;
try|try
block|{
name|localTime
operator|=
name|LocalTime
operator|.
name|from
argument_list|(
name|accessor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DateTimeException
name|e1
parameter_list|)
block|{
name|localTime
operator|=
name|DEFAULT_LOCAL_TIME
expr_stmt|;
block|}
try|try
block|{
name|zoneId
operator|=
name|ZoneId
operator|.
name|from
argument_list|(
name|accessor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DateTimeException
name|e2
parameter_list|)
block|{
comment|// TODO: in future this may come from user specified zone (via set time zone command)
name|zoneId
operator|=
name|ZoneId
operator|.
name|systemDefault
argument_list|()
expr_stmt|;
block|}
name|zonedDateTime
operator|=
name|ZonedDateTime
operator|.
name|of
argument_list|(
name|localDate
argument_list|,
name|localTime
argument_list|,
name|zoneId
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TimestampTZ
argument_list|(
name|zonedDateTime
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|handleSingleDigitHourOffset
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|SINGLE_DIGIT_PATTERN
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|int
name|index
init|=
name|matcher
operator|.
name|start
argument_list|()
operator|+
literal|1
decl_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|+
literal|"0"
operator|+
name|s
operator|.
name|substring
argument_list|(
name|index
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
specifier|public
specifier|static
name|TimestampTZ
name|parseOrNull
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
return|return
name|parse
argument_list|(
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Invalid string "
operator|+
name|s
operator|+
literal|" for TIMESTAMP WITH TIME ZONE"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
comment|// Converts Date to TimestampTZ. The conversion is done text-wise since
comment|// Date/Timestamp should be treated as description of date/time.
specifier|public
specifier|static
name|TimestampTZ
name|convert
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Date
name|date
parameter_list|)
block|{
name|String
name|s
init|=
name|date
operator|instanceof
name|Timestamp
condition|?
name|date
operator|.
name|toString
argument_list|()
else|:
name|CONVERT_FORMATTER
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|date
argument_list|)
decl_stmt|;
comment|// TODO: in future this may come from user specified zone (via set time zone command)
return|return
name|parse
argument_list|(
name|s
operator|+
literal|" "
operator|+
name|ZoneId
operator|.
name|systemDefault
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

