begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_comment
comment|/**  * This is the internal type for Timestamp with time zone.  * The full qualified input format of Timestamp with time zone is  * "yyyy-MM-dd HH:mm:ss[.SSS...] zoneid/zoneoffset", where the time and zone parts are optional.  * If time part is absent, a default '00:00:00.0' will be used.  * If zone part is absent, the system time zone will be used.  */
end_comment

begin_class
specifier|public
class|class
name|TimestampTZ
implements|implements
name|Comparable
argument_list|<
name|TimestampTZ
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|ZonedDateTime
name|EPOCH
init|=
name|ZonedDateTime
operator|.
name|ofInstant
argument_list|(
name|Instant
operator|.
name|EPOCH
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
decl_stmt|;
specifier|private
name|ZonedDateTime
name|zonedDateTime
decl_stmt|;
specifier|public
name|TimestampTZ
parameter_list|()
block|{
name|this
argument_list|(
name|EPOCH
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimestampTZ
parameter_list|(
name|ZonedDateTime
name|zonedDateTime
parameter_list|)
block|{
name|setZonedDateTime
argument_list|(
name|zonedDateTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimestampTZ
parameter_list|(
name|long
name|seconds
parameter_list|,
name|int
name|nanos
parameter_list|,
name|ZoneId
name|timeZone
parameter_list|)
block|{
name|set
argument_list|(
name|seconds
argument_list|,
name|nanos
argument_list|,
name|timeZone
argument_list|)
expr_stmt|;
block|}
comment|/**    * Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z and    * nanosecond fraction of second. Then, it creates a zoned date-time with the same instant    * as that specified but in the given time-zone.    */
specifier|public
name|void
name|set
parameter_list|(
name|long
name|seconds
parameter_list|,
name|int
name|nanos
parameter_list|,
name|ZoneId
name|timeZone
parameter_list|)
block|{
name|Instant
name|instant
init|=
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|seconds
argument_list|,
name|nanos
argument_list|)
decl_stmt|;
name|setZonedDateTime
argument_list|(
name|ZonedDateTime
operator|.
name|ofInstant
argument_list|(
name|instant
argument_list|,
name|timeZone
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ZonedDateTime
name|getZonedDateTime
parameter_list|()
block|{
return|return
name|zonedDateTime
return|;
block|}
specifier|public
name|void
name|setZonedDateTime
parameter_list|(
name|ZonedDateTime
name|zonedDateTime
parameter_list|)
block|{
name|this
operator|.
name|zonedDateTime
operator|=
name|zonedDateTime
operator|!=
literal|null
condition|?
name|zonedDateTime
else|:
name|EPOCH
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|zonedDateTime
operator|.
name|format
argument_list|(
name|TimestampTZUtil
operator|.
name|FORMATTER
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|zonedDateTime
operator|.
name|toInstant
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|TimestampTZ
condition|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|TimestampTZ
operator|)
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TimestampTZ
name|o
parameter_list|)
block|{
return|return
name|zonedDateTime
operator|.
name|toInstant
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|zonedDateTime
operator|.
name|toInstant
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|long
name|getEpochSecond
parameter_list|()
block|{
return|return
name|zonedDateTime
operator|.
name|toInstant
argument_list|()
operator|.
name|getEpochSecond
argument_list|()
return|;
block|}
specifier|public
name|long
name|toEpochMilli
parameter_list|()
block|{
return|return
name|zonedDateTime
operator|.
name|toInstant
argument_list|()
operator|.
name|toEpochMilli
argument_list|()
return|;
block|}
specifier|public
name|int
name|getNanos
parameter_list|()
block|{
return|return
name|zonedDateTime
operator|.
name|toInstant
argument_list|()
operator|.
name|getNano
argument_list|()
return|;
block|}
block|}
end_class

end_unit

