begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * Generates hive-default.xml.template from HiveConf.ConfVars  */
end_comment

begin_class
specifier|public
class|class
name|GenHiveTemplate
extends|extends
name|Task
block|{
specifier|private
name|String
name|templateFile
decl_stmt|;
specifier|public
name|String
name|getTemplateFile
parameter_list|()
block|{
return|return
name|templateFile
return|;
block|}
specifier|public
name|void
name|setTemplateFile
parameter_list|(
name|String
name|templateFile
parameter_list|)
block|{
name|this
operator|.
name|templateFile
operator|=
name|templateFile
expr_stmt|;
block|}
specifier|private
name|void
name|generate
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|current
init|=
operator|new
name|File
argument_list|(
name|templateFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|exists
argument_list|()
condition|)
block|{
name|ClassLoader
name|loader
init|=
name|GenHiveTemplate
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|loader
operator|.
name|getResource
argument_list|(
literal|"org/apache/hadoop/hive/conf/HiveConf.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
name|file
operator|.
name|lastModified
argument_list|()
operator|<
name|current
operator|.
name|lastModified
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
block|}
name|writeToFile
argument_list|(
name|current
argument_list|,
name|generateTemplate
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Document
name|generateTemplate
parameter_list|()
throws|throws
name|Exception
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|docBuilder
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createProcessingInstruction
argument_list|(
literal|"xml-stylesheet"
argument_list|,
literal|"type=\"text/xsl\" href=\"configuration.xsl\""
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createComment
argument_list|(
literal|"\n"
operator|+
literal|"   Licensed to the Apache Software Foundation (ASF) under one or more\n"
operator|+
literal|"   contributor license agreements.  See the NOTICE file distributed with\n"
operator|+
literal|"   this work for additional information regarding copyright ownership.\n"
operator|+
literal|"   The ASF licenses this file to You under the Apache License, Version 2.0\n"
operator|+
literal|"   (the \"License\"); you may not use this file except in compliance with\n"
operator|+
literal|"   the License.  You may obtain a copy of the License at\n"
operator|+
literal|"\n"
operator|+
literal|"       http://www.apache.org/licenses/LICENSE-2.0\n"
operator|+
literal|"\n"
operator|+
literal|"   Unless required by applicable law or agreed to in writing, software\n"
operator|+
literal|"   distributed under the License is distributed on an \"AS IS\" BASIS,\n"
operator|+
literal|"   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
operator|+
literal|"   See the License for the specific language governing permissions and\n"
operator|+
literal|"   limitations under the License.\n"
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"configuration"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createComment
argument_list|(
literal|" WARNING!!! This file is auto generated for documentation purposes ONLY! "
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createComment
argument_list|(
literal|" WARNING!!! Any changes you make to this file will be ignored by Hive.   "
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createComment
argument_list|(
literal|" WARNING!!! You must make your changes in hive-site.xml instead.         "
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createComment
argument_list|(
literal|" Hive Execution Parameters "
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|ShimLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HiveConf
operator|.
name|ConfVars
name|confVars
range|:
name|HiveConf
operator|.
name|ConfVars
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|confVars
operator|.
name|isExcluded
argument_list|()
condition|)
block|{
comment|// thought of creating template for each shims, but I couldn't generate proper mvn script
continue|continue;
block|}
name|Element
name|property
init|=
name|appendElement
argument_list|(
name|root
argument_list|,
literal|"property"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|appendElement
argument_list|(
name|property
argument_list|,
literal|"key"
argument_list|,
name|confVars
operator|.
name|varname
argument_list|)
expr_stmt|;
name|appendElement
argument_list|(
name|property
argument_list|,
literal|"value"
argument_list|,
name|confVars
operator|.
name|getDefaultExpr
argument_list|()
argument_list|)
expr_stmt|;
name|appendElement
argument_list|(
name|property
argument_list|,
literal|"description"
argument_list|,
name|normalize
argument_list|(
name|confVars
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// wish to add new line here.
block|}
return|return
name|doc
return|;
block|}
specifier|private
name|String
name|normalize
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|int
name|index
init|=
name|description
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
return|return
name|description
return|;
block|}
name|int
name|prev
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|description
operator|.
name|length
argument_list|()
operator|<<
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|index
operator|>
literal|0
condition|;
name|index
operator|=
name|description
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|,
name|prev
operator|=
name|index
operator|+
literal|1
argument_list|)
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\n      "
argument_list|)
operator|.
name|append
argument_list|(
name|description
operator|.
name|substring
argument_list|(
name|prev
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prev
operator|<
name|description
operator|.
name|length
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\n      "
argument_list|)
operator|.
name|append
argument_list|(
name|description
operator|.
name|substring
argument_list|(
name|prev
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|writeToFile
parameter_list|(
name|File
name|template
parameter_list|,
name|Document
name|document
parameter_list|)
throws|throws
name|Exception
block|{
name|Transformer
name|transformer
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
literal|"{http://xml.apache.org/xslt}indent-amount"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|template
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Element
name|appendElement
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|Document
name|document
init|=
name|parent
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|Element
name|child
init|=
name|document
operator|.
name|createElement
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|parent
operator|.
name|appendChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|Text
name|textNode
init|=
name|document
operator|.
name|createTextNode
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|child
operator|.
name|appendChild
argument_list|(
name|textNode
argument_list|)
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
try|try
block|{
name|generate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|GenHiveTemplate
name|gen
init|=
operator|new
name|GenHiveTemplate
argument_list|()
decl_stmt|;
name|gen
operator|.
name|generate
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

