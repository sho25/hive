begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_class
specifier|public
class|class
name|SystemVariables
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|l4j
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SystemVariables
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Pattern
name|varPat
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\$\\{[^\\}\\$\u0020]+\\}"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENV_PREFIX
init|=
literal|"env:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_PREFIX
init|=
literal|"system:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HIVECONF_PREFIX
init|=
literal|"hiveconf:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HIVEVAR_PREFIX
init|=
literal|"hivevar:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SET_COLUMN_NAME
init|=
literal|"set"
decl_stmt|;
specifier|protected
name|String
name|getSubstitute
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|var
parameter_list|)
block|{
name|String
name|val
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|var
operator|.
name|startsWith
argument_list|(
name|SYSTEM_PREFIX
argument_list|)
condition|)
block|{
name|val
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|var
operator|.
name|substring
argument_list|(
name|SYSTEM_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|l4j
operator|.
name|warn
argument_list|(
literal|"Unexpected SecurityException in Configuration"
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|var
operator|.
name|startsWith
argument_list|(
name|ENV_PREFIX
argument_list|)
condition|)
block|{
name|val
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|var
operator|.
name|substring
argument_list|(
name|ENV_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|val
return|;
block|}
specifier|public
name|String
name|substitute
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|expr
parameter_list|)
block|{
name|int
name|depth
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVEVARIABLESUBSTITUTEDEPTH
argument_list|)
decl_stmt|;
return|return
name|substitute
argument_list|(
name|conf
argument_list|,
name|expr
argument_list|,
name|depth
argument_list|)
return|;
block|}
specifier|public
name|String
name|substitute
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|expr
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|Matcher
name|match
init|=
name|varPat
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|String
name|eval
init|=
name|expr
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|depth
condition|;
name|s
operator|++
control|)
block|{
name|match
operator|.
name|reset
argument_list|(
name|eval
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|match
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|eval
return|;
block|}
name|String
name|var
init|=
name|match
operator|.
name|group
argument_list|()
decl_stmt|;
name|var
operator|=
name|var
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|var
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove ${ .. }
name|String
name|val
init|=
name|getSubstitute
argument_list|(
name|conf
argument_list|,
name|var
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|l4j
operator|.
name|debug
argument_list|(
literal|"Interpolation result: "
operator|+
name|eval
argument_list|)
expr_stmt|;
return|return
name|eval
return|;
comment|// return literal, no substitution found
block|}
comment|// substitute
name|eval
operator|=
name|eval
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|match
operator|.
name|start
argument_list|()
argument_list|)
operator|+
name|val
operator|+
name|eval
operator|.
name|substring
argument_list|(
name|match
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Variable substitution depth too large: "
operator|+
name|conf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|HIVEVARIABLESUBSTITUTEDEPTH
argument_list|)
operator|+
literal|" "
operator|+
name|expr
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

