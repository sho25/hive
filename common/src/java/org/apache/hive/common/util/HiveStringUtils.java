begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|text
operator|.
name|translate
operator|.
name|CharSequenceTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|text
operator|.
name|translate
operator|.
name|EntityArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|text
operator|.
name|translate
operator|.
name|LookupTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * HiveStringUtils  * General string utils  *  * Originally copied from o.a.hadoop.util.StringUtils  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
specifier|public
class|class
name|HiveStringUtils
block|{
comment|/**    * Priority of the StringUtils shutdown hook.    */
specifier|public
specifier|static
specifier|final
name|int
name|SHUTDOWN_HOOK_PRIORITY
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DecimalFormat
name|decimalFormat
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CharSequenceTranslator
name|ESCAPE_JAVA
init|=
operator|new
name|LookupTranslator
argument_list|(
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"\""
block|,
literal|"\\\""
block|}
block|,
block|{
literal|"\\"
block|,
literal|"\\\\"
block|}
block|,       }
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LookupTranslator
argument_list|(
name|EntityArrays
operator|.
name|JAVA_CTRL_CHARS_ESCAPE
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CharSequenceTranslator
name|ESCAPE_HIVE_COMMAND
init|=
operator|new
name|LookupTranslator
argument_list|(
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"'"
block|,
literal|"\\'"
block|}
block|,
block|{
literal|";"
block|,
literal|"\\;"
block|}
block|,
block|{
literal|"\\"
block|,
literal|"\\\\"
block|}
block|,       }
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LookupTranslator
argument_list|(
name|EntityArrays
operator|.
name|JAVA_CTRL_CHARS_ESCAPE
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
static|static
block|{
name|NumberFormat
name|numberFormat
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
name|decimalFormat
operator|=
operator|(
name|DecimalFormat
operator|)
name|numberFormat
expr_stmt|;
name|decimalFormat
operator|.
name|applyPattern
argument_list|(
literal|"#.##"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the internalized string, or null if the given string is null.    * @param str The string to intern    * @return The identical string cached in the string pool.    */
specifier|public
specifier|static
name|String
name|intern
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|str
operator|.
name|intern
argument_list|()
return|;
block|}
comment|/**    * Return an interned list with identical contents as the given list.    * @param list The list whose strings will be interned    * @return An identical list with its strings interned.    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|intern
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|newList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|list
control|)
block|{
name|newList
operator|.
name|add
argument_list|(
name|intern
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newList
return|;
block|}
comment|/**    * Return an interned map with identical contents as the given map.    * @param map The map whose strings will be interned    * @return An identical map with its strings interned.    */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|intern
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// nothing to intern
return|return
name|map
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|newMap
operator|.
name|put
argument_list|(
name|intern
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|intern
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newMap
return|;
block|}
comment|/**    * Make a string representation of the exception.    * @param e The exception to stringify    * @return A string with exception name and call stack.    */
specifier|public
specifier|static
name|String
name|stringifyException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|StringWriter
name|stm
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|wrt
init|=
operator|new
name|PrintWriter
argument_list|(
name|stm
argument_list|)
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|wrt
argument_list|)
expr_stmt|;
name|wrt
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|stm
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Given a full hostname, return the word upto the first dot.    * @param fullHostname the full hostname    * @return the hostname to the first dot    */
specifier|public
specifier|static
name|String
name|simpleHostname
parameter_list|(
name|String
name|fullHostname
parameter_list|)
block|{
name|int
name|offset
init|=
name|fullHostname
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|fullHostname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|offset
argument_list|)
return|;
block|}
return|return
name|fullHostname
return|;
block|}
comment|/**    * Format a percentage for presentation to the user.    * @param done the percentage to format (0.0 to 1.0)    * @param digits the number of digits past the decimal point    * @return a string representation of the percentage    */
specifier|public
specifier|static
name|String
name|formatPercent
parameter_list|(
name|double
name|done
parameter_list|,
name|int
name|digits
parameter_list|)
block|{
name|DecimalFormat
name|percentFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00%"
argument_list|)
decl_stmt|;
name|double
name|scale
init|=
name|Math
operator|.
name|pow
argument_list|(
literal|10.0
argument_list|,
name|digits
operator|+
literal|2
argument_list|)
decl_stmt|;
name|double
name|rounded
init|=
name|Math
operator|.
name|floor
argument_list|(
name|done
operator|*
name|scale
argument_list|)
decl_stmt|;
name|percentFormat
operator|.
name|setDecimalSeparatorAlwaysShown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|percentFormat
operator|.
name|setMinimumFractionDigits
argument_list|(
name|digits
argument_list|)
expr_stmt|;
name|percentFormat
operator|.
name|setMaximumFractionDigits
argument_list|(
name|digits
argument_list|)
expr_stmt|;
return|return
name|percentFormat
operator|.
name|format
argument_list|(
name|rounded
operator|/
name|scale
argument_list|)
return|;
block|}
comment|/**    * Given an array of strings, return a comma-separated list of its elements.    * @param strs Array of strings    * @return Empty string if strs.length is 0, comma separated list of strings    * otherwise    */
specifier|public
specifier|static
name|String
name|arrayToString
parameter_list|(
name|String
index|[]
name|strs
parameter_list|)
block|{
if|if
condition|(
name|strs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
name|strs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|1
init|;
name|idx
operator|<
name|strs
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|sbuf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
name|strs
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|sbuf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Given an array of bytes it will convert the bytes to a hex string    * representation of the bytes    * @param bytes    * @param start start index, inclusively    * @param end end index, exclusively    * @return hex string representation of the byte array    */
specifier|public
specifier|static
name|String
name|byteToHexString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bytes == null"
argument_list|)
throw|;
block|}
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%02x"
argument_list|,
name|bytes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Same as byteToHexString(bytes, 0, bytes.length). */
specifier|public
specifier|static
name|String
name|byteToHexString
parameter_list|(
name|byte
name|bytes
index|[]
parameter_list|)
block|{
return|return
name|byteToHexString
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Given a hexstring this will return the byte array corresponding to the    * string    * @param hex the hex String array    * @return a byte array that is a hex string representation of the given    *         string. The size of the byte array is therefore hex.length/2    */
specifier|public
specifier|static
name|byte
index|[]
name|hexStringToByte
parameter_list|(
name|String
name|hex
parameter_list|)
block|{
name|byte
index|[]
name|bts
init|=
operator|new
name|byte
index|[
name|hex
operator|.
name|length
argument_list|()
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bts
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
name|hex
operator|.
name|substring
argument_list|(
literal|2
operator|*
name|i
argument_list|,
literal|2
operator|*
name|i
operator|+
literal|2
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
return|return
name|bts
return|;
block|}
comment|/**    *    * @param uris    */
specifier|public
specifier|static
name|String
name|uriToString
parameter_list|(
name|URI
index|[]
name|uris
parameter_list|)
block|{
if|if
condition|(
name|uris
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|(
name|uris
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|uris
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|uris
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @param str    *          The string array to be parsed into an URI array.    * @return<tt>null</tt> if str is<tt>null</tt>, else the URI array    *         equivalent to str.    * @throws IllegalArgumentException    *           If any string in str violates RFC&nbsp;2396.    */
specifier|public
specifier|static
name|URI
index|[]
name|stringToURI
parameter_list|(
name|String
index|[]
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|URI
index|[]
name|uris
init|=
operator|new
name|URI
index|[
name|str
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|uris
index|[
name|i
index|]
operator|=
operator|new
name|URI
argument_list|(
name|str
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ur
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to create uri for "
operator|+
name|str
index|[
name|i
index|]
argument_list|,
name|ur
argument_list|)
throw|;
block|}
block|}
return|return
name|uris
return|;
block|}
comment|/**    *    * @param str    */
specifier|public
specifier|static
name|Path
index|[]
name|stringToPath
parameter_list|(
name|String
index|[]
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Path
index|[]
name|p
init|=
operator|new
name|Path
index|[
name|str
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|p
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|str
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
comment|/**    *    * Given a finish and start time in long milliseconds, returns a    * String in the format Xhrs, Ymins, Z sec, for the time difference between two times.    * If finish time comes before start time then negative valeus of X, Y and Z wil return.    *    * @param finishTime finish time    * @param startTime start time    */
specifier|public
specifier|static
name|String
name|formatTimeDiff
parameter_list|(
name|long
name|finishTime
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|long
name|timeDiff
init|=
name|finishTime
operator|-
name|startTime
decl_stmt|;
return|return
name|formatTime
argument_list|(
name|timeDiff
argument_list|)
return|;
block|}
comment|/**    *    * Given the time in long milliseconds, returns a    * String in the format Xhrs, Ymins, Z sec.    *    * @param timeDiff The time difference to format    */
specifier|public
specifier|static
name|String
name|formatTime
parameter_list|(
name|long
name|timeDiff
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|long
name|hours
init|=
name|timeDiff
operator|/
operator|(
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|)
decl_stmt|;
name|long
name|rem
init|=
operator|(
name|timeDiff
operator|%
operator|(
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|)
operator|)
decl_stmt|;
name|long
name|minutes
init|=
name|rem
operator|/
operator|(
literal|60
operator|*
literal|1000
operator|)
decl_stmt|;
name|rem
operator|=
name|rem
operator|%
operator|(
literal|60
operator|*
literal|1000
operator|)
expr_stmt|;
name|long
name|seconds
init|=
name|rem
operator|/
literal|1000
decl_stmt|;
if|if
condition|(
name|hours
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|hours
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"hrs, "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minutes
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|minutes
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"mins, "
argument_list|)
expr_stmt|;
block|}
comment|// return "0sec if no difference
name|buf
operator|.
name|append
argument_list|(
name|seconds
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"sec"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Formats time in ms and appends difference (finishTime - startTime)    * as returned by formatTimeDiff().    * If finish time is 0, empty string is returned, if start time is 0    * then difference is not appended to return value.    * @param dateFormat date format to use    * @param finishTime fnish time    * @param startTime start time    * @return formatted value.    */
specifier|public
specifier|static
name|String
name|getFormattedTimeWithDiff
parameter_list|(
name|DateFormat
name|dateFormat
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|finishTime
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|dateFormat
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|finishTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|startTime
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" ("
operator|+
name|formatTimeDiff
argument_list|(
name|finishTime
argument_list|,
name|startTime
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns an arraylist of strings.    * @param str the comma seperated string values    * @return the arraylist of the comma seperated string values    */
specifier|public
specifier|static
name|String
index|[]
name|getStrings
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|values
init|=
name|getStringCollection
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Returns a collection of strings.    * @param str comma seperated string values    * @return an<code>ArrayList</code> of string values    */
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getStringCollection
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
name|values
return|;
block|}
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|str
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**    * Splits a comma separated value<code>String</code>, trimming leading and trailing whitespace on each value.    * @param str a comma separated<code>String</code> with values    * @return a<code>Collection</code> of<code>String</code> values    */
specifier|public
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getTrimmedStringCollection
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getTrimmedStrings
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Splits a comma separated value<code>String</code>, trimming leading and trailing whitespace on each value.    * @param str a comma separated<code>String</code> with values    * @return an array of<code>String</code> values    */
specifier|public
specifier|static
name|String
index|[]
name|getTrimmedStrings
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|str
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|str
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|emptyStringArray
return|;
block|}
return|return
name|str
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s*,\\s*"
argument_list|)
return|;
block|}
specifier|final
specifier|public
specifier|static
name|String
index|[]
name|emptyStringArray
init|=
block|{}
decl_stmt|;
specifier|final
specifier|public
specifier|static
name|char
name|COMMA
init|=
literal|','
decl_stmt|;
specifier|final
specifier|public
specifier|static
name|char
name|EQUALS
init|=
literal|'='
decl_stmt|;
specifier|final
specifier|public
specifier|static
name|String
name|COMMA_STR
init|=
literal|","
decl_stmt|;
specifier|final
specifier|public
specifier|static
name|char
name|ESCAPE_CHAR
init|=
literal|'\\'
decl_stmt|;
comment|/**    * Split a string using the default separator    * @param str a string that may have escaped separator    * @return an array of strings    */
specifier|public
specifier|static
name|String
index|[]
name|split
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|split
argument_list|(
name|str
argument_list|,
name|ESCAPE_CHAR
argument_list|,
name|COMMA
argument_list|)
return|;
block|}
comment|/**    * Split a string using the given separator    * @param str a string that may have escaped separator    * @param escapeChar a char that be used to escape the separator    * @param separator a separator char    * @return an array of strings    */
specifier|public
specifier|static
name|String
index|[]
name|split
parameter_list|(
name|String
name|str
parameter_list|,
name|char
name|escapeChar
parameter_list|,
name|char
name|separator
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|strList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|split
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|index
operator|=
name|findNext
argument_list|(
name|str
argument_list|,
name|separator
argument_list|,
name|escapeChar
argument_list|,
name|index
argument_list|,
name|split
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
operator|++
name|index
expr_stmt|;
comment|// move over the separator for next search
name|strList
operator|.
name|add
argument_list|(
name|split
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|split
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// reset the buffer
block|}
name|strList
operator|.
name|add
argument_list|(
name|split
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove trailing empty split(s)
name|int
name|last
init|=
name|strList
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// last split
while|while
condition|(
operator|--
name|last
operator|>=
literal|0
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|strList
operator|.
name|get
argument_list|(
name|last
argument_list|)
argument_list|)
condition|)
block|{
name|strList
operator|.
name|remove
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
return|return
name|strList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|strList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Split a string using the given separator, with no escaping performed.    * @param str a string to be split. Note that this may not be null.    * @param separator a separator char    * @return an array of strings    */
specifier|public
specifier|static
name|String
index|[]
name|split
parameter_list|(
name|String
name|str
parameter_list|,
name|char
name|separator
parameter_list|)
block|{
comment|// String.split returns a single empty result for splitting the empty
comment|// string.
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|str
argument_list|)
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|""
block|}
return|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|strList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|startIndex
init|=
literal|0
decl_stmt|;
name|int
name|nextIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|nextIndex
operator|=
name|str
operator|.
name|indexOf
argument_list|(
operator|(
name|int
operator|)
name|separator
argument_list|,
name|startIndex
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|strList
operator|.
name|add
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|startIndex
argument_list|,
name|nextIndex
argument_list|)
argument_list|)
expr_stmt|;
name|startIndex
operator|=
name|nextIndex
operator|+
literal|1
expr_stmt|;
block|}
name|strList
operator|.
name|add
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|startIndex
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove trailing empty split(s)
name|int
name|last
init|=
name|strList
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// last split
while|while
condition|(
operator|--
name|last
operator|>=
literal|0
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|strList
operator|.
name|get
argument_list|(
name|last
argument_list|)
argument_list|)
condition|)
block|{
name|strList
operator|.
name|remove
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
return|return
name|strList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|strList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Split a string using the default separator/escape character,    * then unescape the resulting array of strings    * @param str    * @return an array of unescaped strings    */
specifier|public
specifier|static
name|String
index|[]
name|splitAndUnEscape
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|splitAndUnEscape
argument_list|(
name|str
argument_list|,
name|ESCAPE_CHAR
argument_list|,
name|COMMA
argument_list|)
return|;
block|}
comment|/**    * Split a string using the specified separator/escape character,    * then unescape the resulting array of strings using the same escape/separator.    * @param str a string that may have escaped separator    * @param escapeChar a char that be used to escape the separator    * @param separator a separator char    * @return an array of unescaped strings    */
specifier|public
specifier|static
name|String
index|[]
name|splitAndUnEscape
parameter_list|(
name|String
name|str
parameter_list|,
name|char
name|escapeChar
parameter_list|,
name|char
name|separator
parameter_list|)
block|{
name|String
index|[]
name|result
init|=
name|split
argument_list|(
name|str
argument_list|,
name|escapeChar
argument_list|,
name|separator
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|result
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|result
index|[
name|idx
index|]
operator|=
name|unEscapeString
argument_list|(
name|result
index|[
name|idx
index|]
argument_list|,
name|escapeChar
argument_list|,
name|separator
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * In a given string of comma-separated key=value pairs associates the specified value with    * the specified key.    * If the `string` previously contained a mapping for the key, the old value is replaced.    *    * @param key key with which the specified value is to be associated    * @param value value to be associated with the specified key    * @param strKvPairs Comma separated key=value pairs Eg: "k1=v1, k2=v2, k3=v3"    * @return Updated comma separated string of key=value pairs    */
specifier|public
specifier|static
name|String
name|insertValue
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|strKvPairs
parameter_list|)
block|{
name|boolean
name|keyNotFound
init|=
literal|true
decl_stmt|;
name|String
index|[]
name|keyValuePairs
init|=
name|HiveStringUtils
operator|.
name|split
argument_list|(
name|strKvPairs
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyValuePairs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|pair
init|=
name|HiveStringUtils
operator|.
name|split
argument_list|(
name|keyValuePairs
index|[
name|i
index|]
argument_list|,
name|ESCAPE_CHAR
argument_list|,
name|EQUALS
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error parsing the keyvalue pair "
operator|+
name|keyValuePairs
index|[
name|i
index|]
argument_list|)
throw|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|EQUALS
argument_list|)
expr_stmt|;
if|if
condition|(
name|pair
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|keyNotFound
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
operator|(
name|keyValuePairs
operator|.
name|length
operator|-
literal|1
operator|)
operator|||
name|keyNotFound
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|keyNotFound
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
name|EQUALS
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Finds the first occurrence of the separator character ignoring the escaped    * separators starting from the index. Note the substring between the index    * and the position of the separator is passed.    * @param str the source string    * @param separator the character to find    * @param escapeChar character used to escape    * @param start from where to search    * @param split used to pass back the extracted string    */
specifier|public
specifier|static
name|int
name|findNext
parameter_list|(
name|String
name|str
parameter_list|,
name|char
name|separator
parameter_list|,
name|char
name|escapeChar
parameter_list|,
name|int
name|start
parameter_list|,
name|StringBuilder
name|split
parameter_list|)
block|{
name|int
name|numPreEscapes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|curChar
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|numPreEscapes
operator|==
literal|0
operator|&&
name|curChar
operator|==
name|separator
condition|)
block|{
comment|// separator
return|return
name|i
return|;
block|}
else|else
block|{
name|split
operator|.
name|append
argument_list|(
name|curChar
argument_list|)
expr_stmt|;
name|numPreEscapes
operator|=
operator|(
name|curChar
operator|==
name|escapeChar
operator|)
condition|?
operator|(
operator|++
name|numPreEscapes
operator|)
operator|%
literal|2
else|:
literal|0
expr_stmt|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Escape commas in the string using the default escape char    * @param str a string    * @return an escaped string    */
specifier|public
specifier|static
name|String
name|escapeString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|escapeString
argument_list|(
name|str
argument_list|,
name|ESCAPE_CHAR
argument_list|,
name|COMMA
argument_list|)
return|;
block|}
comment|/**    * Escape<code>charToEscape</code> in the string    * with the escape char<code>escapeChar</code>    *    * @param str string    * @param escapeChar escape char    * @param charToEscape the char to be escaped    * @return an escaped string    */
specifier|public
specifier|static
name|String
name|escapeString
parameter_list|(
name|String
name|str
parameter_list|,
name|char
name|escapeChar
parameter_list|,
name|char
name|charToEscape
parameter_list|)
block|{
return|return
name|escapeString
argument_list|(
name|str
argument_list|,
name|escapeChar
argument_list|,
operator|new
name|char
index|[]
block|{
name|charToEscape
block|}
argument_list|)
return|;
block|}
comment|// check if the character array has the character
specifier|private
specifier|static
name|boolean
name|hasChar
parameter_list|(
name|char
index|[]
name|chars
parameter_list|,
name|char
name|character
parameter_list|)
block|{
for|for
control|(
name|char
name|target
range|:
name|chars
control|)
block|{
if|if
condition|(
name|character
operator|==
name|target
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @param charsToEscape array of characters to be escaped    */
specifier|public
specifier|static
name|String
name|escapeString
parameter_list|(
name|String
name|str
parameter_list|,
name|char
name|escapeChar
parameter_list|,
name|char
index|[]
name|charsToEscape
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|curChar
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|curChar
operator|==
name|escapeChar
operator|||
name|hasChar
argument_list|(
name|charsToEscape
argument_list|,
name|curChar
argument_list|)
condition|)
block|{
comment|// special char
name|result
operator|.
name|append
argument_list|(
name|escapeChar
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|curChar
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Escape non-unicode characters. StringEscapeUtil.escapeJava() will escape    * unicode characters as well but in some cases it's not desired.    *    * @param str Original string    * @return Escaped string    */
specifier|public
specifier|static
name|String
name|escapeJava
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|ESCAPE_JAVA
operator|.
name|translate
argument_list|(
name|str
argument_list|)
return|;
block|}
comment|/**    * Escape non-unicode characters, and ', and ;    * Like StringEscapeUtil.escapeJava() will escape    * unicode characters as well but in some cases it's not desired.    *    * @param str Original string    * @return Escaped string    */
specifier|public
specifier|static
name|String
name|escapeHiveCommand
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|ESCAPE_HIVE_COMMAND
operator|.
name|translate
argument_list|(
name|str
argument_list|)
return|;
block|}
comment|/**    * Unescape commas in the string using the default escape char    * @param str a string    * @return an unescaped string    */
specifier|public
specifier|static
name|String
name|unEscapeString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|unEscapeString
argument_list|(
name|str
argument_list|,
name|ESCAPE_CHAR
argument_list|,
name|COMMA
argument_list|)
return|;
block|}
comment|/**    * Unescape<code>charToEscape</code> in the string    * with the escape char<code>escapeChar</code>    *    * @param str string    * @param escapeChar escape char    * @param charToEscape the escaped char    * @return an unescaped string    */
specifier|public
specifier|static
name|String
name|unEscapeString
parameter_list|(
name|String
name|str
parameter_list|,
name|char
name|escapeChar
parameter_list|,
name|char
name|charToEscape
parameter_list|)
block|{
return|return
name|unEscapeString
argument_list|(
name|str
argument_list|,
name|escapeChar
argument_list|,
operator|new
name|char
index|[]
block|{
name|charToEscape
block|}
argument_list|)
return|;
block|}
comment|/**    * @param charsToEscape array of characters to unescape    */
specifier|public
specifier|static
name|String
name|unEscapeString
parameter_list|(
name|String
name|str
parameter_list|,
name|char
name|escapeChar
parameter_list|,
name|char
index|[]
name|charsToEscape
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|(
name|str
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasPreEscape
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|curChar
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasPreEscape
condition|)
block|{
if|if
condition|(
name|curChar
operator|!=
name|escapeChar
operator|&&
operator|!
name|hasChar
argument_list|(
name|charsToEscape
argument_list|,
name|curChar
argument_list|)
condition|)
block|{
comment|// no special char
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal escaped string "
operator|+
name|str
operator|+
literal|" unescaped "
operator|+
name|escapeChar
operator|+
literal|" at "
operator|+
operator|(
name|i
operator|-
literal|1
operator|)
argument_list|)
throw|;
block|}
comment|// otherwise discard the escape char
name|result
operator|.
name|append
argument_list|(
name|curChar
argument_list|)
expr_stmt|;
name|hasPreEscape
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasChar
argument_list|(
name|charsToEscape
argument_list|,
name|curChar
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal escaped string "
operator|+
name|str
operator|+
literal|" unescaped "
operator|+
name|curChar
operator|+
literal|" at "
operator|+
name|i
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|curChar
operator|==
name|escapeChar
condition|)
block|{
name|hasPreEscape
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|curChar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|hasPreEscape
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal escaped string "
operator|+
name|str
operator|+
literal|", not expecting "
operator|+
name|escapeChar
operator|+
literal|" in the end."
argument_list|)
throw|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Return a message for logging.    * @param prefix prefix keyword for the message    * @param msg content of the message    * @return a message for logging    */
specifier|private
specifier|static
name|String
name|toStartupShutdownString
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
index|[]
name|msg
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n/************************************************************"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|msg
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"\n"
operator|+
name|prefix
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"\n************************************************************/"
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Print a log message for starting up and shutting down    * @param clazz the class of the server    * @param args arguments    * @param LOG the target log object    */
specifier|public
specifier|static
name|void
name|startupShutdownMessage
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
index|[]
name|args
parameter_list|,
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
parameter_list|)
block|{
specifier|final
name|String
name|hostname
init|=
name|getHostname
argument_list|()
decl_stmt|;
specifier|final
name|String
name|classname
init|=
name|clazz
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|toStartupShutdownString
argument_list|(
literal|"STARTUP_MSG: "
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Starting "
operator|+
name|classname
block|,
literal|"  host = "
operator|+
name|hostname
block|,
literal|"  args = "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
block|,
literal|"  version = "
operator|+
name|HiveVersionInfo
operator|.
name|getVersion
argument_list|()
block|,
literal|"  classpath = "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
block|,
literal|"  build = "
operator|+
name|HiveVersionInfo
operator|.
name|getUrl
argument_list|()
operator|+
literal|" -r "
operator|+
name|HiveVersionInfo
operator|.
name|getRevision
argument_list|()
operator|+
literal|"; compiled by '"
operator|+
name|HiveVersionInfo
operator|.
name|getUser
argument_list|()
operator|+
literal|"' on "
operator|+
name|HiveVersionInfo
operator|.
name|getDate
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ShutdownHookManager
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
name|toStartupShutdownString
argument_list|(
literal|"SHUTDOWN_MSG: "
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Shutting down "
operator|+
name|classname
operator|+
literal|" at "
operator|+
name|hostname
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|SHUTDOWN_HOOK_PRIORITY
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return hostname without throwing exception.    * @return hostname    */
specifier|public
specifier|static
name|String
name|getHostname
parameter_list|()
block|{
try|try
block|{
return|return
literal|""
operator|+
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|uhe
parameter_list|)
block|{
return|return
literal|""
operator|+
name|uhe
return|;
block|}
block|}
comment|/**    * The traditional binary prefixes, kilo, mega, ..., exa,    * which can be represented by a 64-bit integer.    * TraditionalBinaryPrefix symbol are case insensitive.    */
specifier|public
specifier|static
enum|enum
name|TraditionalBinaryPrefix
block|{
name|KILO
argument_list|(
literal|1024
argument_list|)
block|,
name|MEGA
argument_list|(
name|KILO
operator|.
name|value
operator|<<
literal|10
argument_list|)
block|,
name|GIGA
argument_list|(
name|MEGA
operator|.
name|value
operator|<<
literal|10
argument_list|)
block|,
name|TERA
argument_list|(
name|GIGA
operator|.
name|value
operator|<<
literal|10
argument_list|)
block|,
name|PETA
argument_list|(
name|TERA
operator|.
name|value
operator|<<
literal|10
argument_list|)
block|,
name|EXA
argument_list|(
name|PETA
operator|.
name|value
operator|<<
literal|10
argument_list|)
block|;
specifier|public
specifier|final
name|long
name|value
decl_stmt|;
specifier|public
specifier|final
name|char
name|symbol
decl_stmt|;
name|TraditionalBinaryPrefix
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|symbol
operator|=
name|toString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return The TraditionalBinaryPrefix object corresponding to the symbol.      */
specifier|public
specifier|static
name|TraditionalBinaryPrefix
name|valueOf
parameter_list|(
name|char
name|symbol
parameter_list|)
block|{
name|symbol
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|symbol
argument_list|)
expr_stmt|;
for|for
control|(
name|TraditionalBinaryPrefix
name|prefix
range|:
name|TraditionalBinaryPrefix
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|symbol
operator|==
name|prefix
operator|.
name|symbol
condition|)
block|{
return|return
name|prefix
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown symbol '"
operator|+
name|symbol
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|/**      * Convert a string to long.      * The input string is first be trimmed      * and then it is parsed with traditional binary prefix.      *      * For example,      * "-1230k" will be converted to -1230 * 1024 = -1259520;      * "891g" will be converted to 891 * 1024^3 = 956703965184;      *      * @param s input string      * @return a long value represented by the input string.      */
specifier|public
specifier|static
name|long
name|string2long
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
expr_stmt|;
specifier|final
name|int
name|lastpos
init|=
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
specifier|final
name|char
name|lastchar
init|=
name|s
operator|.
name|charAt
argument_list|(
name|lastpos
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|lastchar
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
return|;
block|}
else|else
block|{
name|long
name|prefix
decl_stmt|;
try|try
block|{
name|prefix
operator|=
name|TraditionalBinaryPrefix
operator|.
name|valueOf
argument_list|(
name|lastchar
argument_list|)
operator|.
name|value
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid size prefix '"
operator|+
name|lastchar
operator|+
literal|"' in '"
operator|+
name|s
operator|+
literal|"'. Allowed prefixes are k, m, g, t, p, e(case insensitive)"
argument_list|)
throw|;
block|}
name|long
name|num
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastpos
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|num
operator|>
operator|(
name|Long
operator|.
name|MAX_VALUE
operator|/
name|prefix
operator|)
operator|||
name|num
operator|<
operator|(
name|Long
operator|.
name|MIN_VALUE
operator|/
name|prefix
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|s
operator|+
literal|" does not fit in a Long"
argument_list|)
throw|;
block|}
return|return
name|num
operator|*
name|prefix
return|;
block|}
block|}
block|}
comment|/**      * Escapes HTML Special characters present in the string.      * @param string      * @return HTML Escaped String representation      */
specifier|public
specifier|static
name|String
name|escapeHTML
parameter_list|(
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|string
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|lastCharacterWasSpace
init|=
literal|false
decl_stmt|;
name|char
index|[]
name|chars
init|=
name|string
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|chars
control|)
block|{
if|if
condition|(
name|c
operator|==
literal|' '
condition|)
block|{
if|if
condition|(
name|lastCharacterWasSpace
condition|)
block|{
name|lastCharacterWasSpace
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastCharacterWasSpace
operator|=
literal|true
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lastCharacterWasSpace
operator|=
literal|false
expr_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'<'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"&lt;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"&gt;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'&'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"&amp;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'"'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"&quot;"
argument_list|)
expr_stmt|;
break|break;
default|default :
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Return an abbreviated English-language desc of the byte length    */
specifier|public
specifier|static
name|String
name|byteDesc
parameter_list|(
name|long
name|len
parameter_list|)
block|{
name|double
name|val
init|=
literal|0.0
decl_stmt|;
name|String
name|ending
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|1024
operator|*
literal|1024
condition|)
block|{
name|val
operator|=
operator|(
literal|1.0
operator|*
name|len
operator|)
operator|/
literal|1024
expr_stmt|;
name|ending
operator|=
literal|" KB"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|<
literal|1024
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|val
operator|=
operator|(
literal|1.0
operator|*
name|len
operator|)
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
expr_stmt|;
name|ending
operator|=
literal|" MB"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|<
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|val
operator|=
operator|(
literal|1.0
operator|*
name|len
operator|)
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|)
expr_stmt|;
name|ending
operator|=
literal|" GB"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|<
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|val
operator|=
operator|(
literal|1.0
operator|*
name|len
operator|)
operator|/
operator|(
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|)
expr_stmt|;
name|ending
operator|=
literal|" TB"
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
operator|(
literal|1.0
operator|*
name|len
operator|)
operator|/
operator|(
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|)
expr_stmt|;
name|ending
operator|=
literal|" PB"
expr_stmt|;
block|}
return|return
name|limitDecimalTo2
argument_list|(
name|val
argument_list|)
operator|+
name|ending
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|String
name|limitDecimalTo2
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|decimalFormat
operator|.
name|format
argument_list|(
name|d
argument_list|)
return|;
block|}
comment|/**    * Concatenates strings, using a separator.    *    * @param separator Separator to join with.    * @param strings Strings to join.    */
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|CharSequence
name|separator
parameter_list|,
name|Iterable
argument_list|<
name|?
argument_list|>
name|strings
parameter_list|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|strings
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Concatenates strings, using a separator. Empty/blank string or null will be    * ignored.    *    * @param strings Strings to join.    * @param separator Separator to join with.    */
specifier|public
specifier|static
name|String
name|joinIgnoringEmpty
parameter_list|(
name|String
index|[]
name|strings
parameter_list|,
name|char
name|separator
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|strings
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|str
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|StringUtils
operator|.
name|join
argument_list|(
name|list
argument_list|,
name|separator
argument_list|)
return|;
block|}
comment|/**    * Convert SOME_STUFF to SomeStuff    *    * @param s input string    * @return camelized string    */
specifier|public
specifier|static
name|String
name|camelize
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
index|[]
name|words
init|=
name|split
argument_list|(
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|,
name|ESCAPE_CHAR
argument_list|,
literal|'_'
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|word
range|:
name|words
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|word
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Checks if b is the first byte of a UTF-8 character.    *    */
specifier|public
specifier|static
name|boolean
name|isUtfStartByte
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
operator|(
name|b
operator|&
literal|0xC0
operator|)
operator|!=
literal|0x80
return|;
block|}
specifier|public
specifier|static
name|int
name|getTextUtfLength
parameter_list|(
name|Text
name|t
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
name|t
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isUtfStartByte
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|len
operator|++
expr_stmt|;
block|}
block|}
return|return
name|len
return|;
block|}
comment|/**    * Checks if b is an ascii character    */
specifier|public
specifier|static
name|boolean
name|isAscii
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
operator|(
name|b
operator|&
literal|0x80
operator|)
operator|==
literal|0
return|;
block|}
comment|/**    * Returns the number of leading whitespace characters in the utf-8 string    */
specifier|public
specifier|static
name|int
name|findLeadingSpaces
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|numSpaces
decl_stmt|;
for|for
control|(
name|numSpaces
operator|=
literal|0
init|;
name|numSpaces
operator|<
name|length
condition|;
operator|++
name|numSpaces
control|)
block|{
name|int
name|curPos
init|=
name|start
operator|+
name|numSpaces
decl_stmt|;
if|if
condition|(
name|isAscii
argument_list|(
name|bytes
index|[
name|curPos
index|]
argument_list|)
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|bytes
index|[
name|curPos
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
break|break;
comment|// non-space character
block|}
return|return
operator|(
name|numSpaces
operator|-
name|start
operator|)
return|;
block|}
comment|/**    * Returns the number of trailing whitespace characters in the utf-8 string    */
specifier|public
specifier|static
name|int
name|findTrailingSpaces
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|numSpaces
decl_stmt|;
for|for
control|(
name|numSpaces
operator|=
literal|0
init|;
name|numSpaces
operator|<
name|length
condition|;
operator|++
name|numSpaces
control|)
block|{
name|int
name|curPos
init|=
name|start
operator|+
operator|(
name|length
operator|-
operator|(
name|numSpaces
operator|+
literal|1
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|isAscii
argument_list|(
name|bytes
index|[
name|curPos
index|]
argument_list|)
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|bytes
index|[
name|curPos
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
break|break;
comment|// non-space character
block|}
block|}
return|return
name|numSpaces
return|;
block|}
comment|/**    * Finds trimmed length of utf-8 string    */
specifier|public
specifier|static
name|int
name|findTrimmedLength
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|leadingSpaces
parameter_list|)
block|{
name|int
name|trailingSpaces
init|=
name|findTrailingSpaces
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|length
operator|=
name|length
operator|-
name|leadingSpaces
expr_stmt|;
comment|// If string is entirely whitespace, no need to apply trailingSpaces.
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|length
operator|=
name|length
operator|-
name|trailingSpaces
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
specifier|public
specifier|static
name|String
name|normalizeIdentifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
return|return
name|identifier
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|quoteComments
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|char
index|[]
name|chars
init|=
name|value
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|commentProvided
argument_list|(
name|chars
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|prev
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|==
literal|0x00
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|chars
argument_list|,
name|prev
argument_list|,
name|i
operator|-
name|prev
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|prev
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|",\'"
argument_list|)
operator|.
name|append
argument_list|(
name|chars
argument_list|,
name|prev
argument_list|,
name|chars
operator|.
name|length
operator|-
name|prev
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|commentProvided
parameter_list|(
name|char
index|[]
name|chars
parameter_list|)
block|{
for|for
control|(
name|char
name|achar
range|:
name|chars
control|)
block|{
if|if
condition|(
name|achar
operator|!=
literal|0x00
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|String
name|getPartitionValWithInvalidCharacter
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|Pattern
name|partitionValidationPattern
parameter_list|)
block|{
if|if
condition|(
name|partitionValidationPattern
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|String
name|partVal
range|:
name|partVals
control|)
block|{
if|if
condition|(
operator|!
name|partitionValidationPattern
operator|.
name|matcher
argument_list|(
name|partVal
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|partVal
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Strip comments from a sql statement, tracking when the statement contains a string literal.    *    * @param statement the input string    * @return a stripped statement    */
specifier|public
specifier|static
name|String
name|removeComments
parameter_list|(
name|String
name|statement
parameter_list|)
block|{
if|if
condition|(
name|statement
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|statement
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
index|[]
name|startQuote
init|=
block|{
operator|-
literal|1
block|}
decl_stmt|;
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|(
name|statement
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|lineWithComments
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|lineNoComments
init|=
name|removeComments
argument_list|(
name|lineWithComments
argument_list|,
name|startQuote
argument_list|)
decl_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|lineNoComments
argument_list|)
expr_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|lineNoComments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Remove comments from the current line of a query.    * Avoid removing comment-like strings inside quotes.    * @param line a line of sql text    * @param startQuote The value -1 indicates that line does not begin inside a string literal.    *                   Other values indicate that line does begin inside a string literal    *                   and the value passed is the delimiter character.    *                   The array type is used to pass int type as input/output parameter.    * @return the line with comments removed.    */
specifier|public
specifier|static
name|String
name|removeComments
parameter_list|(
name|String
name|line
parameter_list|,
name|int
index|[]
name|startQuote
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
operator|||
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|line
return|;
block|}
if|if
condition|(
name|startQuote
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
name|isComment
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
comment|//assume # can only be used at the beginning of line.
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|line
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|startQuote
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
name|index
operator|<
name|line
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|&&
name|line
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|==
literal|'-'
operator|&&
name|line
operator|.
name|charAt
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|==
literal|'-'
condition|)
block|{
comment|// Jump to the end of current line. When a multiple line query is executed with -e parameter,
comment|// it is passed in as one line string separated with '\n'
for|for
control|(
init|;
name|index
operator|<
name|line
operator|.
name|length
argument_list|()
operator|&&
name|line
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|!=
literal|'\n'
condition|;
operator|++
name|index
control|)
empty_stmt|;
continue|continue;
block|}
name|char
name|letter
init|=
name|line
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|startQuote
index|[
literal|0
index|]
operator|==
name|letter
operator|&&
operator|(
name|index
operator|==
literal|0
operator|||
name|line
operator|.
name|charAt
argument_list|(
name|index
operator|-
literal|1
argument_list|)
operator|!=
literal|'\\'
operator|)
condition|)
block|{
name|startQuote
index|[
literal|0
index|]
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Turn escape off.
block|}
elseif|else
if|if
condition|(
name|startQuote
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
operator|(
name|letter
operator|==
literal|'\''
operator|||
name|letter
operator|==
literal|'"'
operator|)
operator|&&
operator|(
name|index
operator|==
literal|0
operator|||
name|line
operator|.
name|charAt
argument_list|(
name|index
operator|-
literal|1
argument_list|)
operator|!=
literal|'\\'
operator|)
condition|)
block|{
name|startQuote
index|[
literal|0
index|]
operator|=
name|letter
expr_stmt|;
comment|// Turn escape on.
block|}
name|builder
operator|.
name|append
argument_list|(
name|letter
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**    * Test whether a line is a comment.    *    * @param line the line to be tested    * @return true if a comment    */
specifier|private
specifier|static
name|boolean
name|isComment
parameter_list|(
name|String
name|line
parameter_list|)
block|{
comment|// SQL92 comment prefix is "--"
comment|// beeline also supports shell-style "#" prefix
name|String
name|lineTrimmed
init|=
name|line
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
name|lineTrimmed
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
operator|||
name|lineTrimmed
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

