begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
specifier|public
class|class
name|HiveTestUtils
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveTestUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|JAVA_FILE_EXT
init|=
literal|".java"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|CLAZZ_FILE_EXT
init|=
literal|".class"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|JAR_FILE_EXT
init|=
literal|".jar"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|TXT_FILE_EXT
init|=
literal|".txt"
decl_stmt|;
specifier|public
specifier|static
name|String
name|getFileFromClasspath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|URL
name|url
init|=
name|ClassLoader
operator|.
name|getSystemResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|url
operator|.
name|getPath
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|executeCmd
parameter_list|(
name|String
index|[]
name|cmdArr
parameter_list|,
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Process
name|p1
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmdArr
argument_list|,
literal|null
argument_list|,
name|dir
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|BufferedReader
name|input
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|p1
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|line
operator|=
name|input
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to execute the command due the exception "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|p1
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|File
name|genLocalJarForTest
parameter_list|(
name|String
name|pathToClazzFile
parameter_list|,
name|String
name|clazzName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|u
init|=
name|pathToClazzFile
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|File
name|parentDir
init|=
name|dir
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
name|clazzName
operator|+
name|JAVA_FILE_EXT
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|dir
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|executeCmd
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"javac"
block|,
name|clazzName
operator|+
name|JAVA_FILE_EXT
block|}
argument_list|,
name|parentDir
argument_list|)
expr_stmt|;
name|executeCmd
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"jar"
block|,
literal|"cf"
block|,
name|clazzName
operator|+
name|JAR_FILE_EXT
block|,
name|clazzName
operator|+
name|CLAZZ_FILE_EXT
block|}
argument_list|,
name|parentDir
argument_list|)
expr_stmt|;
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
name|clazzName
operator|+
name|CLAZZ_FILE_EXT
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|parentDir
argument_list|,
name|clazzName
operator|+
name|JAR_FILE_EXT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

