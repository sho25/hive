begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|MutableDateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeFieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeParserBucket
import|;
end_import

begin_comment
comment|/**  * Timestamp parser using Joda DateTimeFormatter. Parser accepts 0 or more date time format  * patterns. If no format patterns are provided it will default to the normal Timestamp parsing.  * Datetime formats are compatible with Java SimpleDateFormat. Also added special case pattern  * "millis" to parse the string as milliseconds since Unix epoch.  * Since this uses Joda DateTimeFormatter, this parser should be thread safe.  */
end_comment

begin_class
specifier|public
class|class
name|TimestampParser
block|{
specifier|protected
specifier|final
specifier|static
name|String
index|[]
name|stringArray
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|millisFormatString
init|=
literal|"millis"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|DateTime
name|startingDateValue
init|=
operator|new
name|DateTime
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|protected
name|String
index|[]
name|formatStrings
init|=
literal|null
decl_stmt|;
specifier|protected
name|DateTimeFormatter
name|fmt
init|=
literal|null
decl_stmt|;
specifier|public
name|TimestampParser
parameter_list|()
block|{   }
specifier|public
name|TimestampParser
parameter_list|(
name|TimestampParser
name|tsParser
parameter_list|)
block|{
name|this
argument_list|(
name|tsParser
operator|.
name|formatStrings
operator|==
literal|null
condition|?
literal|null
else|:
name|Arrays
operator|.
name|copyOf
argument_list|(
name|tsParser
operator|.
name|formatStrings
argument_list|,
name|tsParser
operator|.
name|formatStrings
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimestampParser
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|formatStrings
parameter_list|)
block|{
name|this
argument_list|(
name|formatStrings
operator|==
literal|null
condition|?
literal|null
else|:
name|formatStrings
operator|.
name|toArray
argument_list|(
name|stringArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimestampParser
parameter_list|(
name|String
index|[]
name|formatStrings
parameter_list|)
block|{
name|this
operator|.
name|formatStrings
operator|=
name|formatStrings
expr_stmt|;
comment|// create formatter that includes all of the input patterns
if|if
condition|(
name|formatStrings
operator|!=
literal|null
operator|&&
name|formatStrings
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|DateTimeParser
index|[]
name|parsers
init|=
operator|new
name|DateTimeParser
index|[
name|formatStrings
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|formatStrings
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|String
name|formatString
init|=
name|formatStrings
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|formatString
operator|.
name|equalsIgnoreCase
argument_list|(
name|millisFormatString
argument_list|)
condition|)
block|{
comment|// Use milliseconds parser if pattern matches our special-case millis pattern string
name|parsers
index|[
name|idx
index|]
operator|=
operator|new
name|MillisDateFormatParser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parsers
index|[
name|idx
index|]
operator|=
name|DateTimeFormat
operator|.
name|forPattern
argument_list|(
name|formatString
argument_list|)
operator|.
name|getParser
argument_list|()
expr_stmt|;
block|}
block|}
name|fmt
operator|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|null
argument_list|,
name|parsers
argument_list|)
operator|.
name|toFormatter
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Parse the input string and return a timestamp value    * @param strValue    * @return    * @throws IllegalArgumentException if input string cannot be parsed into timestamp    */
specifier|public
name|Timestamp
name|parseTimestamp
parameter_list|(
name|String
name|strValue
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|fmt
operator|!=
literal|null
condition|)
block|{
comment|// reset value in case any date fields are missing from the date pattern
name|MutableDateTime
name|mdt
init|=
operator|new
name|MutableDateTime
argument_list|(
name|startingDateValue
argument_list|)
decl_stmt|;
comment|// Using parseInto() avoids throwing exception when parsing,
comment|// allowing fallback to default timestamp parsing if custom patterns fail.
name|int
name|ret
init|=
name|fmt
operator|.
name|parseInto
argument_list|(
name|mdt
argument_list|,
name|strValue
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Only accept parse results if we parsed the entire string
if|if
condition|(
name|ret
operator|==
name|strValue
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
name|mdt
operator|.
name|getMillis
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|// Otherwise try default timestamp parsing
return|return
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|strValue
argument_list|)
return|;
block|}
comment|/**    * DateTimeParser to parse the date string as the millis since Unix epoch    */
specifier|public
specifier|static
class|class
name|MillisDateFormatParser
implements|implements
name|DateTimeParser
block|{
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Matcher
argument_list|>
name|numericMatcher
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Matcher
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Matcher
name|initialValue
parameter_list|()
block|{
return|return
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(-?\\d+)(\\.\\d+)?$"
argument_list|)
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|DateTimeFieldType
index|[]
name|dateTimeFields
init|=
block|{
name|DateTimeFieldType
operator|.
name|year
argument_list|()
block|,
name|DateTimeFieldType
operator|.
name|monthOfYear
argument_list|()
block|,
name|DateTimeFieldType
operator|.
name|dayOfMonth
argument_list|()
block|,
name|DateTimeFieldType
operator|.
name|hourOfDay
argument_list|()
block|,
name|DateTimeFieldType
operator|.
name|minuteOfHour
argument_list|()
block|,
name|DateTimeFieldType
operator|.
name|secondOfMinute
argument_list|()
block|,
name|DateTimeFieldType
operator|.
name|millisOfSecond
argument_list|()
block|}
decl_stmt|;
specifier|public
name|int
name|estimateParsedLength
parameter_list|()
block|{
return|return
literal|13
return|;
comment|// Shouldn't hit 14 digits until year 2286
block|}
specifier|public
name|int
name|parseInto
parameter_list|(
name|DateTimeParserBucket
name|bucket
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|String
name|substr
init|=
name|text
operator|.
name|substring
argument_list|(
name|position
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|numericMatcher
operator|.
name|get
argument_list|()
decl_stmt|;
name|matcher
operator|.
name|reset
argument_list|(
name|substr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// Joda DateTime only has precision to millis, cut off any fractional portion
name|long
name|millis
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|DateTime
name|dt
init|=
operator|new
name|DateTime
argument_list|(
name|millis
argument_list|)
decl_stmt|;
for|for
control|(
name|DateTimeFieldType
name|field
range|:
name|dateTimeFields
control|)
block|{
name|bucket
operator|.
name|saveField
argument_list|(
name|field
argument_list|,
name|dt
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|substr
operator|.
name|length
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

