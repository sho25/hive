begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|TemporalAccessor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|TemporalField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Timestamp parser using JDK DateTimeFormatter. Parser accepts 0 or more date  * time format patterns. If no format patterns are provided it will default to  * the normal Timestamp parsing. Datetime formats are compatible with Java  * SimpleDateFormat.  *  * In addition to accepting format patterns, this parser provides support for  * three pre-defined formats:  *  *<table border="1">  *<thead>  *<tr>  *<th>Formatter</th>  *<th>Description</th>  *<th>Example</th>  *<th>Example Output</th>  *</tr>  *</thead>  *<tr>  *<td><b>millis</b></td>  *<td>Milliseconds since EPOCH</td>  *<td>1420509274123</td>  *<td>2015-01-06T01:54:34Z</td>  *</tr>  *<tr>  *<td><b>iso8601</b></td>  *<td>Parses ISO-8601 timestamp format</td>  *<td>'2011-12-03T10:15:30Z'</td>  *<td>2011-12-03T10:15:30Z</td>  *</tr>  *<tr>  *<td><b>rfc1123</b></td>  *<td>Parses RFC 1123 timestamp format</td>  *<td>'Tue, 3 Jun 2008 11:05:30 GMT'</td>  *<td>2008-06-03T11:05:30Z</td>  *</tr>  *</table>  *  * @see java.text.SimpleDateFormat  * @see DateTimeFormatter  */
end_comment

begin_class
specifier|public
class|class
name|TimestampParser
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimestampParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MILLIS_FORMAT_STR
init|=
literal|"millis"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ISO_8601_FORMAT_STR
init|=
literal|"iso8601"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RFC_1123_FORMAT_STR
init|=
literal|"rfc1123"
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|DateTimeFormatter
argument_list|>
name|dtFormatters
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|supportMillisEpoch
decl_stmt|;
comment|/**    * Create a default Timestamp parser with no formats defined.    *    * @see Timestamp#valueOf(String)    */
specifier|public
name|TimestampParser
parameter_list|()
block|{
name|this
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a Timestamp parser based on an existing one.    *    * @param tsParser The source TimestampParser    */
specifier|public
name|TimestampParser
parameter_list|(
specifier|final
name|TimestampParser
name|tsParser
parameter_list|)
block|{
name|this
operator|.
name|dtFormatters
operator|=
name|tsParser
operator|.
name|dtFormatters
expr_stmt|;
name|this
operator|.
name|supportMillisEpoch
operator|=
name|tsParser
operator|.
name|supportMillisEpoch
expr_stmt|;
block|}
comment|/**    * Create a Timestamp parser which parses zero or more time stamp formats.    *    * @param formatStrings The format strings    */
specifier|public
name|TimestampParser
parameter_list|(
specifier|final
name|String
index|[]
name|formatStrings
parameter_list|)
block|{
name|this
argument_list|(
name|formatStrings
operator|==
literal|null
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|formatStrings
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a timestamp parser with one ore more date patterns. When parsing,    * the first pattern in the list is selected for parsing first, so if one    * format is more common than others, include it first in the list. If it    * fails, the next is chosen, and so on. If none of these patterns succeeds, a    * default formatting is expected.    *    * @see DateTimeFormatter    * @see Timestamp#valueOf(String)    * @param patterns a collection of timestamp formats    */
specifier|public
name|TimestampParser
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|)
block|{
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|patternSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|patterns
argument_list|)
decl_stmt|;
name|this
operator|.
name|supportMillisEpoch
operator|=
name|patternSet
operator|.
name|remove
argument_list|(
name|MILLIS_FORMAT_STR
argument_list|)
expr_stmt|;
if|if
condition|(
name|patternSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|dtFormatters
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|dtFormatters
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|patternText
range|:
name|patternSet
control|)
block|{
specifier|final
name|DateTimeFormatter
name|formatter
decl_stmt|;
switch|switch
condition|(
name|patternText
condition|)
block|{
case|case
name|ISO_8601_FORMAT_STR
case|:
name|formatter
operator|=
name|DateTimeFormatter
operator|.
name|ISO_INSTANT
expr_stmt|;
break|break;
case|case
name|RFC_1123_FORMAT_STR
case|:
name|formatter
operator|=
name|DateTimeFormatter
operator|.
name|RFC_1123_DATE_TIME
expr_stmt|;
break|break;
default|default:
name|formatter
operator|=
name|DateTimeFormatter
operator|.
name|ofPattern
argument_list|(
name|patternText
argument_list|)
expr_stmt|;
break|break;
block|}
name|this
operator|.
name|dtFormatters
operator|.
name|add
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Parse the input string and return a timestamp value.    *    * @param text The timestamp text    * @return A timestamp based on the text provided    * @throws IllegalArgumentException if input text cannot be parsed into    *           timestamp    */
specifier|public
name|Timestamp
name|parseTimestamp
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|supportMillisEpoch
condition|)
block|{
try|try
block|{
comment|// support for milliseconds that include nanoseconds as well
comment|// example: "1420509274123.456789"
specifier|final
name|long
name|millis
init|=
operator|new
name|BigDecimal
argument_list|(
name|text
argument_list|)
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|RoundingMode
operator|.
name|DOWN
argument_list|)
operator|.
name|longValueExact
argument_list|()
decl_stmt|;
return|return
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|millis
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not format millis: {}"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|DateTimeFormatter
name|formatter
range|:
name|this
operator|.
name|dtFormatters
control|)
block|{
try|try
block|{
specifier|final
name|TemporalAccessor
name|parsed
init|=
name|formatter
operator|.
name|parse
argument_list|(
name|text
argument_list|)
decl_stmt|;
specifier|final
name|Instant
name|inst
init|=
name|Instant
operator|.
name|from
argument_list|(
name|wrap
argument_list|(
name|parsed
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|inst
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|dtpe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not parse timestamp text: {}"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|text
argument_list|)
return|;
block|}
comment|/**    * The goal of this class is to return a timestamp. A timestamp represents a    * single moment (instant) on the time line. However, some strings will not    * contain enough information to assign it to one instant in time. For    * example, if no time zone information is supplied, or a date is supplied,    * but no time. In those cases, they need to be populated manually. This    * method accepts all the data parsed from the supplied String and assigns it    * reasonable defaults if fields are missing.    *    * @param in The fields populated by parsing the supplied string    * @return The fields populated with default values if required    */
specifier|private
name|TemporalAccessor
name|wrap
parameter_list|(
specifier|final
name|TemporalAccessor
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|.
name|isSupported
argument_list|(
name|ChronoField
operator|.
name|INSTANT_SECONDS
argument_list|)
operator|&&
name|in
operator|.
name|isSupported
argument_list|(
name|ChronoField
operator|.
name|NANO_OF_SECOND
argument_list|)
condition|)
block|{
return|return
name|in
return|;
block|}
return|return
operator|new
name|DefaultingTemporalAccessor
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/**    * Class to wrap a TemporalAccessor and add fields with reasonable defaults.    */
specifier|private
specifier|static
class|class
name|DefaultingTemporalAccessor
implements|implements
name|TemporalAccessor
block|{
specifier|private
specifier|static
specifier|final
name|EnumSet
argument_list|<
name|ChronoField
argument_list|>
name|FIELDS
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|ChronoField
operator|.
name|YEAR
argument_list|,
name|ChronoField
operator|.
name|MONTH_OF_YEAR
argument_list|,
name|ChronoField
operator|.
name|DAY_OF_MONTH
argument_list|,
name|ChronoField
operator|.
name|HOUR_OF_DAY
argument_list|,
name|ChronoField
operator|.
name|MINUTE_OF_HOUR
argument_list|,
name|ChronoField
operator|.
name|SECOND_OF_MINUTE
argument_list|,
name|ChronoField
operator|.
name|MILLI_OF_SECOND
argument_list|,
name|ChronoField
operator|.
name|NANO_OF_SECOND
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TemporalAccessor
name|wrapped
decl_stmt|;
name|DefaultingTemporalAccessor
parameter_list|(
name|TemporalAccessor
name|in
parameter_list|)
block|{
name|ZonedDateTime
name|dateTime
init|=
name|ZonedDateTime
operator|.
name|ofInstant
argument_list|(
name|Instant
operator|.
name|EPOCH
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
decl_stmt|;
for|for
control|(
name|ChronoField
name|field
range|:
name|FIELDS
control|)
block|{
if|if
condition|(
name|in
operator|.
name|isSupported
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|dateTime
operator|=
name|dateTime
operator|.
name|with
argument_list|(
name|field
argument_list|,
name|in
operator|.
name|getLong
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|wrapped
operator|=
name|dateTime
operator|.
name|toInstant
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|(
name|TemporalField
name|field
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|getLong
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSupported
parameter_list|(
name|TemporalField
name|field
parameter_list|)
block|{
return|return
name|wrapped
operator|.
name|isSupported
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

