begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_class
specifier|public
class|class
name|HiveCompat
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveCompat
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Enum to represent a level of backward compatibility support.    *    */
specifier|public
enum|enum
name|CompatLevel
block|{
name|HIVE_0_12
argument_list|(
literal|"0.12"
argument_list|,
literal|0
argument_list|,
literal|12
argument_list|)
block|,
name|HIVE_0_13
argument_list|(
literal|"0.13"
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
block|;
specifier|public
specifier|final
name|String
name|value
decl_stmt|;
specifier|public
specifier|final
name|int
name|majorVersion
decl_stmt|;
specifier|public
specifier|final
name|int
name|minorVersion
decl_stmt|;
name|CompatLevel
parameter_list|(
name|String
name|val
parameter_list|,
name|int
name|majorVersion
parameter_list|,
name|int
name|minorVersion
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|majorVersion
operator|=
name|majorVersion
expr_stmt|;
name|this
operator|.
name|minorVersion
operator|=
name|minorVersion
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_COMPAT_LEVEL
init|=
name|CompatLevel
operator|.
name|HIVE_0_12
operator|.
name|value
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LATEST_COMPAT_LEVEL
init|=
name|getLastCompatLevel
argument_list|()
operator|.
name|value
decl_stmt|;
comment|/**    * Returned the configured compatibility level    * @param hconf Hive configuration    * @return    */
specifier|public
specifier|static
name|CompatLevel
name|getCompatLevel
parameter_list|(
name|HiveConf
name|hconf
parameter_list|)
block|{
return|return
name|getCompatLevel
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hconf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPAT
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CompatLevel
name|getCompatLevel
parameter_list|(
name|String
name|compatStr
parameter_list|)
block|{
if|if
condition|(
name|compatStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"latest"
argument_list|)
condition|)
block|{
name|compatStr
operator|=
name|LATEST_COMPAT_LEVEL
expr_stmt|;
block|}
for|for
control|(
name|CompatLevel
name|cl
range|:
name|CompatLevel
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|cl
operator|.
name|value
operator|.
name|equals
argument_list|(
name|compatStr
argument_list|)
condition|)
block|{
return|return
name|cl
return|;
block|}
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not find CompatLevel for "
operator|+
name|compatStr
operator|+
literal|", using default of "
operator|+
name|DEFAULT_COMPAT_LEVEL
argument_list|)
expr_stmt|;
return|return
name|getCompatLevel
argument_list|(
name|DEFAULT_COMPAT_LEVEL
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CompatLevel
name|getLastCompatLevel
parameter_list|()
block|{
name|CompatLevel
index|[]
name|compatLevels
init|=
name|CompatLevel
operator|.
name|values
argument_list|()
decl_stmt|;
return|return
name|compatLevels
index|[
name|compatLevels
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
block|}
end_class

end_unit

