begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ProcessUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_comment
comment|/**  * Servlet that runs async-profiler as web-endpoint.  * Following options from async-profiler can be specified as query paramater.  * //  -e event          profiling event: cpu|alloc|lock|cache-misses etc.  * //  -d duration       run profiling for<duration> seconds (integer)  * //  -i interval       sampling interval in nanoseconds (long)  * //  -j jstackdepth    maximum Java stack depth (integer)  * //  -b bufsize        frame buffer size (long)  * //  -t                profile different threads separately  * //  -s                simple class names instead of FQN  * //  -o fmt[,fmt...]   output format: summary|traces|flat|collapsed|svg|tree|jfr  * //  --width px        SVG width pixels (integer)  * //  --height px       SVG frame height pixels (integer)  * //  --minwidth px     skip frames smaller than px (double)  * //  --reverse         generate stack-reversed FlameGraph / Call tree  * Example:  * - To collect 30 second CPU profile of current process (returns FlameGraph svg)  * curl "http://localhost:10002/prof"  * - To collect 1 minute CPU profile of current process and output in tree format (html)  * curl "http://localhost:10002/prof?output=tree&duration=60"  * - To collect 30 second heap allocation profile of current process (returns FlameGraph svg)  * curl "http://localhost:10002/prof?event=alloc"  * - To collect lock contention profile of current process (returns FlameGraph svg)  * curl "http://localhost:10002/prof?event=lock"  * Following event types are supported (default is 'cpu') (NOTE: not all OS'es support all events)  * // Perf events:  * //    cpu  * //    page-faults  * //    context-switches  * //    cycles  * //    instructions  * //    cache-references  * //    cache-misses  * //    branches  * //    branch-misses  * //    bus-cycles  * //    L1-dcache-load-misses  * //    LLC-load-misses  * //    dTLB-load-misses  * //    mem:breakpoint  * //    trace:tracepoint  * // Java events:  * //    alloc  * //    lock  */
end_comment

begin_class
specifier|public
class|class
name|ProfileServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProfileServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS_CONTROL_ALLOW_METHODS
init|=
literal|"Access-Control-Allow-Methods"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALLOWED_METHODS
init|=
literal|"GET"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS_CONTROL_ALLOW_ORIGIN
init|=
literal|"Access-Control-Allow-Origin"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_TYPE_TEXT
init|=
literal|"text/plain; charset=utf-8"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ASYNC_PROFILER_HOME_ENV
init|=
literal|"ASYNC_PROFILER_HOME"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ASYNC_PROFILER_HOME_SYSTEM_PROPERTY
init|=
literal|"async.profiler.home"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROFILER_SCRIPT
init|=
literal|"/profiler.sh"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_DURATION_SECONDS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|ID_GEN
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|OUTPUT_DIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
literal|"/prof-output"
decl_stmt|;
enum|enum
name|Event
block|{
name|CPU
argument_list|(
literal|"cpu"
argument_list|)
block|,
name|ALLOC
argument_list|(
literal|"alloc"
argument_list|)
block|,
name|LOCK
argument_list|(
literal|"lock"
argument_list|)
block|,
name|PAGE_FAULTS
argument_list|(
literal|"page-faults"
argument_list|)
block|,
name|CONTEXT_SWITCHES
argument_list|(
literal|"context-switches"
argument_list|)
block|,
name|CYCLES
argument_list|(
literal|"cycles"
argument_list|)
block|,
name|INSTRUCTIONS
argument_list|(
literal|"instructions"
argument_list|)
block|,
name|CACHE_REFERENCES
argument_list|(
literal|"cache-references"
argument_list|)
block|,
name|CACHE_MISSES
argument_list|(
literal|"cache-misses"
argument_list|)
block|,
name|BRANCHES
argument_list|(
literal|"branches"
argument_list|)
block|,
name|BRANCH_MISSES
argument_list|(
literal|"branch-misses"
argument_list|)
block|,
name|BUS_CYCLES
argument_list|(
literal|"bus-cycles"
argument_list|)
block|,
name|L1_DCACHE_LOAD_MISSES
argument_list|(
literal|"L1-dcache-load-misses"
argument_list|)
block|,
name|LLC_LOAD_MISSES
argument_list|(
literal|"LLC-load-misses"
argument_list|)
block|,
name|DTLB_LOAD_MISSES
argument_list|(
literal|"dTLB-load-misses"
argument_list|)
block|,
name|MEM_BREAKPOINT
argument_list|(
literal|"mem:breakpoint"
argument_list|)
block|,
name|TRACE_TRACEPOINT
argument_list|(
literal|"trace:tracepoint"
argument_list|)
block|,;
specifier|private
name|String
name|internalName
decl_stmt|;
name|Event
parameter_list|(
specifier|final
name|String
name|internalName
parameter_list|)
block|{
name|this
operator|.
name|internalName
operator|=
name|internalName
expr_stmt|;
block|}
specifier|public
name|String
name|getInternalName
parameter_list|()
block|{
return|return
name|internalName
return|;
block|}
specifier|public
specifier|static
name|Event
name|fromInternalName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Event
name|event
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getInternalName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|event
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
enum|enum
name|Output
block|{
name|SUMMARY
block|,
name|TRACES
block|,
name|FLAT
block|,
name|COLLAPSED
block|,
name|SVG
block|,
name|TREE
block|,
name|JFR
block|}
specifier|private
name|Lock
name|profilerLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
name|Integer
name|pid
decl_stmt|;
specifier|private
name|String
name|asyncProfilerHome
decl_stmt|;
specifier|private
name|Process
name|process
decl_stmt|;
specifier|public
name|ProfileServlet
parameter_list|()
block|{
name|this
operator|.
name|asyncProfilerHome
operator|=
name|getAsyncProfilerHome
argument_list|()
expr_stmt|;
name|this
operator|.
name|pid
operator|=
name|ProcessUtils
operator|.
name|getPid
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Servlet process PID: {} asyncProfilerHome: {}"
argument_list|,
name|pid
argument_list|,
name|asyncProfilerHome
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doGet
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|HttpServer
operator|.
name|isInstrumentationAccessAllowed
argument_list|(
name|getServletContext
argument_list|()
argument_list|,
name|req
argument_list|,
name|resp
argument_list|)
condition|)
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
name|setResponseHeader
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"Unauthorized: Instrumentation access is not allowed!"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// make sure async profiler home is set
if|if
condition|(
name|asyncProfilerHome
operator|==
literal|null
operator|||
name|asyncProfilerHome
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
name|setResponseHeader
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"ASYNC_PROFILER_HOME env is not set."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if pid is explicitly specified, use it else default to current process
name|pid
operator|=
name|getInteger
argument_list|(
name|req
argument_list|,
literal|"pid"
argument_list|,
name|pid
argument_list|)
expr_stmt|;
comment|// if pid is not specified in query param and if current process pid cannot be determined
if|if
condition|(
name|pid
operator|==
literal|null
condition|)
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
name|setResponseHeader
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"'pid' query parameter unspecified or unable to determine PID of current process."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|int
name|duration
init|=
name|getInteger
argument_list|(
name|req
argument_list|,
literal|"duration"
argument_list|,
name|DEFAULT_DURATION_SECONDS
argument_list|)
decl_stmt|;
specifier|final
name|Output
name|output
init|=
name|getOutput
argument_list|(
name|req
argument_list|)
decl_stmt|;
specifier|final
name|Event
name|event
init|=
name|getEvent
argument_list|(
name|req
argument_list|)
decl_stmt|;
specifier|final
name|Long
name|interval
init|=
name|getLong
argument_list|(
name|req
argument_list|,
literal|"interval"
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|jstackDepth
init|=
name|getInteger
argument_list|(
name|req
argument_list|,
literal|"jstackdepth"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Long
name|bufsize
init|=
name|getLong
argument_list|(
name|req
argument_list|,
literal|"bufsize"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|thread
init|=
name|req
operator|.
name|getParameterMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"thread"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|simple
init|=
name|req
operator|.
name|getParameterMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"simple"
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|width
init|=
name|getInteger
argument_list|(
name|req
argument_list|,
literal|"width"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|height
init|=
name|getInteger
argument_list|(
name|req
argument_list|,
literal|"height"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Double
name|minwidth
init|=
name|getMinWidth
argument_list|(
name|req
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|reverse
init|=
name|req
operator|.
name|getParameterMap
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"reverse"
argument_list|)
decl_stmt|;
if|if
condition|(
name|process
operator|==
literal|null
operator|||
operator|!
name|process
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
name|int
name|lockTimeoutSecs
init|=
literal|3
decl_stmt|;
if|if
condition|(
name|profilerLock
operator|.
name|tryLock
argument_list|(
name|lockTimeoutSecs
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
try|try
block|{
name|File
name|outputFile
init|=
operator|new
name|File
argument_list|(
name|OUTPUT_DIR
argument_list|,
literal|"async-prof-pid-"
operator|+
name|pid
operator|+
literal|"-"
operator|+
name|event
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"-"
operator|+
name|ID_GEN
operator|.
name|incrementAndGet
argument_list|()
operator|+
literal|"."
operator|+
name|output
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|cmd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|asyncProfilerHome
operator|+
name|PROFILER_SCRIPT
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|event
operator|.
name|getInternalName
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
literal|""
operator|+
name|duration
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
literal|"-o"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|output
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
literal|"-f"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|outputFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|interval
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|add
argument_list|(
literal|"-i"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|interval
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jstackDepth
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|add
argument_list|(
literal|"-j"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|jstackDepth
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bufsize
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|add
argument_list|(
literal|"-b"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|bufsize
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|thread
condition|)
block|{
name|cmd
operator|.
name|add
argument_list|(
literal|"-t"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|simple
condition|)
block|{
name|cmd
operator|.
name|add
argument_list|(
literal|"-s"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|width
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|add
argument_list|(
literal|"--width"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|width
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|height
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|add
argument_list|(
literal|"--height"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|height
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minwidth
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|add
argument_list|(
literal|"--minwidth"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|add
argument_list|(
name|minwidth
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reverse
condition|)
block|{
name|cmd
operator|.
name|add
argument_list|(
literal|"--reverse"
argument_list|)
expr_stmt|;
block|}
name|cmd
operator|.
name|add
argument_list|(
name|pid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|=
name|ProcessUtils
operator|.
name|runCmdAsync
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
comment|// set response and set refresh header to output location
name|setResponseHeader
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_ACCEPTED
argument_list|)
expr_stmt|;
name|String
name|relativeUrl
init|=
literal|"/prof-output/"
operator|+
name|outputFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"Started ["
operator|+
name|event
operator|.
name|getInternalName
argument_list|()
operator|+
literal|"] profiling. This page will automatically redirect to "
operator|+
name|relativeUrl
operator|+
literal|" after "
operator|+
name|duration
operator|+
literal|" seconds.\n\ncommand:\n"
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|cmd
argument_list|)
argument_list|)
expr_stmt|;
comment|// to avoid auto-refresh by ProfileOutputServlet, refreshDelay can be specified via url param
name|int
name|refreshDelay
init|=
name|getInteger
argument_list|(
name|req
argument_list|,
literal|"refreshDelay"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// instead of sending redirect, set auto-refresh so that browsers will refresh with redirected url
name|resp
operator|.
name|setHeader
argument_list|(
literal|"Refresh"
argument_list|,
operator|(
name|duration
operator|+
name|refreshDelay
operator|)
operator|+
literal|";"
operator|+
name|relativeUrl
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|profilerLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|setResponseHeader
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"Unable to acquire lock. Another instance of profiler might be running."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to acquire lock in {} seconds. Another instance of profiler might be running."
argument_list|,
name|lockTimeoutSecs
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while acquiring profile lock."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setResponseHeader
argument_list|(
name|resp
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
name|resp
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"Another instance of profiler is already running."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Integer
name|getInteger
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|String
name|param
parameter_list|,
specifier|final
name|Integer
name|defaultValue
parameter_list|)
block|{
specifier|final
name|String
name|value
init|=
name|req
operator|.
name|getParameter
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|defaultValue
return|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
specifier|private
name|Long
name|getLong
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|String
name|param
parameter_list|)
block|{
specifier|final
name|String
name|value
init|=
name|req
operator|.
name|getParameter
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Double
name|getMinWidth
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|)
block|{
specifier|final
name|String
name|value
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"minwidth"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Event
name|getEvent
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|)
block|{
specifier|final
name|String
name|eventArg
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"event"
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventArg
operator|!=
literal|null
condition|)
block|{
name|Event
name|event
init|=
name|Event
operator|.
name|fromInternalName
argument_list|(
name|eventArg
argument_list|)
decl_stmt|;
return|return
name|event
operator|==
literal|null
condition|?
name|Event
operator|.
name|CPU
else|:
name|event
return|;
block|}
return|return
name|Event
operator|.
name|CPU
return|;
block|}
specifier|private
name|Output
name|getOutput
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|)
block|{
specifier|final
name|String
name|outputArg
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"output"
argument_list|)
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getParameter
argument_list|(
literal|"output"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Output
operator|.
name|valueOf
argument_list|(
name|outputArg
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
name|Output
operator|.
name|SVG
return|;
block|}
block|}
return|return
name|Output
operator|.
name|SVG
return|;
block|}
specifier|private
name|void
name|setResponseHeader
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_METHODS
argument_list|,
name|ALLOWED_METHODS
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_ORIGIN
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
name|CONTENT_TYPE_TEXT
argument_list|)
expr_stmt|;
block|}
specifier|static
name|String
name|getAsyncProfilerHome
parameter_list|()
block|{
name|String
name|asyncProfilerHome
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ASYNC_PROFILER_HOME_ENV
argument_list|)
decl_stmt|;
comment|// if ENV is not set, see if -Dasync.profiler.home=/path/to/async/profiler/home is set
if|if
condition|(
name|asyncProfilerHome
operator|==
literal|null
operator|||
name|asyncProfilerHome
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|asyncProfilerHome
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|ASYNC_PROFILER_HOME_SYSTEM_PROPERTY
argument_list|)
expr_stmt|;
block|}
return|return
name|asyncProfilerHome
return|;
block|}
block|}
end_class

end_unit

