begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|http
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|ServerAuthException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|UserAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|authentication
operator|.
name|DeferredAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|authentication
operator|.
name|LoginAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|UserIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|B64Code
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|jpam
operator|.
name|Pam
import|;
end_import

begin_comment
comment|/*    This class authenticates HS2 web UI via PAM. To authenticate use     * httpGet with header name "Authorization"    * and header value "Basic authB64Code"      where  authB64Code is Base64 string for "login:password"  */
end_comment

begin_class
specifier|public
class|class
name|PamAuthenticator
extends|extends
name|LoginAuthenticator
block|{
specifier|private
specifier|final
name|String
name|pamServiceNames
decl_stmt|;
specifier|public
name|PamAuthenticator
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|super
argument_list|()
expr_stmt|;
name|pamServiceNames
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_PAM_SERVICES
argument_list|)
expr_stmt|;
if|if
condition|(
name|pamServiceNames
operator|==
literal|null
operator|||
name|pamServiceNames
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"No PAM services are set."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAuthMethod
parameter_list|()
block|{
return|return
literal|"pam"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Authentication
name|validateRequest
parameter_list|(
name|ServletRequest
name|req
parameter_list|,
name|ServletResponse
name|res
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
throws|throws
name|ServerAuthException
block|{
name|HttpServletRequest
name|request
init|=
operator|(
name|HttpServletRequest
operator|)
name|req
decl_stmt|;
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|res
decl_stmt|;
name|String
name|credentials
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HttpHeader
operator|.
name|AUTHORIZATION
operator|.
name|asString
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|mandatory
condition|)
return|return
operator|new
name|DeferredAuthentication
argument_list|(
name|this
argument_list|)
return|;
if|if
condition|(
name|credentials
operator|!=
literal|null
condition|)
block|{
name|int
name|space
init|=
name|credentials
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|space
operator|>
literal|0
condition|)
block|{
name|String
name|method
init|=
name|credentials
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|space
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"basic"
operator|.
name|equalsIgnoreCase
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|credentials
operator|=
name|credentials
operator|.
name|substring
argument_list|(
name|space
operator|+
literal|1
argument_list|)
expr_stmt|;
name|credentials
operator|=
name|B64Code
operator|.
name|decode
argument_list|(
name|credentials
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|credentials
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|String
name|username
init|=
name|credentials
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|credentials
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|UserIdentity
name|user
init|=
name|login
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|UserAuthentication
argument_list|(
name|getAuthMethod
argument_list|()
argument_list|,
name|user
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|DeferredAuthentication
operator|.
name|isDeferred
argument_list|(
name|response
argument_list|)
condition|)
return|return
name|Authentication
operator|.
name|UNAUTHENTICATED
return|;
name|response
operator|.
name|setHeader
argument_list|(
name|HttpHeader
operator|.
name|WWW_AUTHENTICATE
operator|.
name|asString
argument_list|()
argument_list|,
literal|"basic realm=\""
operator|+
name|_loginService
operator|.
name|getName
argument_list|()
operator|+
literal|'"'
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
return|return
name|Authentication
operator|.
name|SEND_CONTINUE
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServerAuthException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|UserIdentity
name|login
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|UserIdentity
name|user
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|authenticate
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
condition|)
block|{
name|user
operator|=
operator|new
name|PamUserIdentity
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
return|return
name|user
return|;
block|}
specifier|private
name|boolean
name|authenticate
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|String
index|[]
name|pamServices
init|=
name|pamServiceNames
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|errorMsg
init|=
literal|"Error authenticating with the PAM service: "
decl_stmt|;
for|for
control|(
name|String
name|pamService
range|:
name|pamServices
control|)
block|{
try|try
block|{
name|Pam
name|pam
init|=
operator|new
name|Pam
argument_list|(
name|pamService
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pam
operator|.
name|authenticateSuccessful
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Catch the exception caused by missing jpam.so which otherwise would
comment|// crashes the thread and causes the client hanging rather than notifying
comment|// the client nicely
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|errorMsg
operator|+
name|pamService
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|secureResponse
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|,
name|ServletResponse
name|servletResponse
parameter_list|,
name|boolean
name|b
parameter_list|,
name|Authentication
operator|.
name|User
name|user
parameter_list|)
throws|throws
name|ServerAuthException
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

