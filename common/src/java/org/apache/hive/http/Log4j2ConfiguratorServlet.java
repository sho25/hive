begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|LoggerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A servlet to configure log4j2.  *<br/>  * HTTP GET returns all loggers and it's log level in JSON formatted response.  *<br/>  * HTTP POST is used for configuring the loggers. POST data should be in the same format as GET's response.  * To configure (add/update existing loggers), use HTTP POST with logger names and level in the following JSON format.  *  *<br/>  *<pre>  *<code>{  *  "loggers": [ {  *    "logger" : "",  *    "level" : "INFO"  *  }, {  *    "logger" : "LlapIoOrc",  *    "level" : "WARN"  *  }, {  *    "logger" : "org.apache.zookeeper.server.NIOServerCnxn",  *    "level" : "WARN"  *  }]  * }<code>  *</pre>  *  *<br/>  * Example usage:  *<li>  *    Returns all loggers with levels in JSON format:  *<pre>  *      curl http://hostame:port/conflog  *</pre>  *</li>  *<li>  *    Set root logger to INFO:  *<pre>  *      curl -v -H "Content-Type: application/json" -X POST -d '{ "loggers" : [ { "logger" : "", "level" : "INFO" } ] }'  *      http://hostame:port/conflog  *</pre>  *</li>  *<li>  *    Set logger with level:  *<pre>  *      curl -v -H "Content-Type: application/json" -X POST -d '{ "loggers" : [  *      { "logger" : "LlapIoOrc", "level" : "INFO" } ] }' http://hostame:port/conflog  *</pre>  *</li>  *<li>  *    Set log level for all classes under a package:  *<pre>  *      curl -v -H "Content-Type: application/json" -X POST -d '{ "loggers" : [  *      { "logger" : "org.apache.orc", "level" : "INFO" } ] }' http://hostame:port/conflog  *</pre>  *</li>  *<li>  *    Set log levels for multiple loggers:  *<pre>  *      curl -v -H "Content-Type: application/json" -X POST -d '{ "loggers" : [ { "logger" : "", "level" : "INFO" },  *      { "logger" : "LlapIoOrc", "level" : "WARN" },  *      { "logger" : "org.apache.hadoop.hive.llap.daemon.impl.LlapDaemon", "level" : "INFO" },  *      { "logger" : "org.apache.orc", "level" : "INFO" } ] }' http://hostame:port/conflog  *</pre>  *</li>  *<br/>  * Response Status Codes:  *<br/>  *<li>200 - OK : If the POST data is valid and if the request succeeds or if GET request succeeds.</li>  *<li>401 - UNAUTHORIZED : If the user does not have privileges to access instrumentation servlets.  *                      Refer<code>hadoop.security.instrumentation.requires.admin</code> config for more info.</li>  *<li>400 - BAD_REQUEST : If the POST data is not a valid JSON.</li>  *<li>500 - INTERNAL_SERVER_ERROR : If GET requests throws any IOException during JSON output generation.</li>  */
end_comment

begin_class
specifier|public
class|class
name|Log4j2ConfiguratorServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Log4j2ConfiguratorServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS_CONTROL_ALLOW_METHODS
init|=
literal|"Access-Control-Allow-Methods"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALLOWED_METHODS
init|=
literal|"POST, GET"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACCESS_CONTROL_ALLOW_ORIGIN
init|=
literal|"Access-Control-Allow-Origin"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_TYPE_JSON_UTF8
init|=
literal|"application/json; charset=utf8"
decl_stmt|;
specifier|private
specifier|transient
name|LoggerContext
name|context
decl_stmt|;
specifier|private
specifier|transient
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
class|class
name|ConfLoggers
block|{
specifier|private
name|List
argument_list|<
name|ConfLogger
argument_list|>
name|loggers
decl_stmt|;
specifier|public
name|ConfLoggers
parameter_list|()
block|{
name|this
operator|.
name|loggers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ConfLogger
argument_list|>
name|getLoggers
parameter_list|()
block|{
return|return
name|loggers
return|;
block|}
specifier|public
name|void
name|setLoggers
parameter_list|(
specifier|final
name|List
argument_list|<
name|ConfLogger
argument_list|>
name|loggers
parameter_list|)
block|{
name|this
operator|.
name|loggers
operator|=
name|loggers
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ConfLogger
block|{
specifier|private
name|String
name|logger
decl_stmt|;
specifier|private
name|String
name|level
decl_stmt|;
comment|// no-arg ctor required for JSON deserialization
specifier|public
name|ConfLogger
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ConfLogger
parameter_list|(
name|String
name|logger
parameter_list|,
name|String
name|level
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
specifier|public
name|String
name|getLogger
parameter_list|()
block|{
return|return
name|logger
operator|==
literal|null
condition|?
name|logger
else|:
name|logger
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|public
name|void
name|setLogger
parameter_list|(
specifier|final
name|String
name|logger
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
specifier|public
name|String
name|getLevel
parameter_list|()
block|{
return|return
name|level
operator|==
literal|null
condition|?
name|level
else|:
name|level
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
specifier|public
name|void
name|setLevel
parameter_list|(
specifier|final
name|String
name|level
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
block|}
comment|/**    * Initialize this servlet.    */
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|context
operator|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|=
name|context
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|HttpServer
operator|.
name|isInstrumentationAccessAllowed
argument_list|(
name|getServletContext
argument_list|()
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
return|return;
block|}
name|setResponseHeader
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// list the loggers and their levels
name|listLoggers
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setResponseHeader
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|CONTENT_TYPE_JSON_UTF8
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_METHODS
argument_list|,
name|ALLOWED_METHODS
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|ACCESS_CONTROL_ALLOW_ORIGIN
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doPost
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|HttpServer
operator|.
name|isInstrumentationAccessAllowed
argument_list|(
name|getServletContext
argument_list|()
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
return|return;
block|}
name|setResponseHeader
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|String
name|dataJson
init|=
name|request
operator|.
name|getReader
argument_list|()
operator|.
name|lines
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
try|try
block|{
name|ConfLoggers
name|confLoggers
init|=
name|objectMapper
operator|.
name|readValue
argument_list|(
name|dataJson
argument_list|,
name|ConfLoggers
operator|.
name|class
argument_list|)
decl_stmt|;
name|configureLogger
argument_list|(
name|confLoggers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error configuring log4j2 via /conflog endpoint."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureLogger
parameter_list|(
specifier|final
name|ConfLoggers
name|confLoggers
parameter_list|)
block|{
if|if
condition|(
name|confLoggers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ConfLogger
name|logger
range|:
name|confLoggers
operator|.
name|getLoggers
argument_list|()
control|)
block|{
name|String
name|loggerName
init|=
name|logger
operator|.
name|getLogger
argument_list|()
decl_stmt|;
name|Level
name|logLevel
init|=
name|Level
operator|.
name|getLevel
argument_list|(
name|logger
operator|.
name|getLevel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|logLevel
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invalid log level: {} for logger: {}. Ignoring reconfiguration."
argument_list|,
name|loggerName
argument_list|,
name|logger
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LoggerConfig
name|loggerConfig
init|=
name|conf
operator|.
name|getLoggerConfig
argument_list|(
name|loggerName
argument_list|)
decl_stmt|;
comment|// if the logger name is not found, root logger is returned. We don't want to change root logger level
comment|// since user either requested a new logger or specified invalid input. In which, we will add the logger
comment|// that user requested.
if|if
condition|(
operator|!
name|loggerName
operator|.
name|equals
argument_list|(
name|LogManager
operator|.
name|ROOT_LOGGER_NAME
argument_list|)
operator|&&
name|loggerConfig
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|LogManager
operator|.
name|ROOT_LOGGER_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Requested logger ({}) not found. Adding as new logger with {} level"
argument_list|,
name|loggerName
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
block|}
comment|// requested logger not found. Add the new logger with the requested level
name|conf
operator|.
name|addLogger
argument_list|(
name|loggerName
argument_list|,
operator|new
name|LoggerConfig
argument_list|(
name|loggerName
argument_list|,
name|logLevel
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating logger ({}) to {} level"
argument_list|,
name|loggerName
argument_list|,
name|logLevel
argument_list|)
expr_stmt|;
block|}
comment|// update the log level for the specified logger
name|loggerConfig
operator|.
name|setLevel
argument_list|(
name|logLevel
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|updateLoggers
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|listLoggers
parameter_list|(
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|response
operator|.
name|getWriter
argument_list|()
expr_stmt|;
name|ConfLoggers
name|confLoggers
init|=
operator|new
name|ConfLoggers
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|LoggerConfig
argument_list|>
name|loggerConfigs
init|=
name|conf
operator|.
name|getLoggers
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|loggerConfigs
operator|.
name|forEach
argument_list|(
name|lc
lambda|->
name|confLoggers
operator|.
name|getLoggers
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ConfLogger
argument_list|(
name|lc
operator|.
name|getName
argument_list|()
argument_list|,
name|lc
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|objectMapper
operator|.
name|writerWithDefaultPrettyPrinter
argument_list|()
operator|.
name|writeValue
argument_list|(
name|writer
argument_list|,
name|confLoggers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught an exception while processing Log4j2 configuration request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

