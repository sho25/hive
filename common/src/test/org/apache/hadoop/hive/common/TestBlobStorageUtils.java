begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|BlobStorageUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
specifier|public
class|class
name|TestBlobStorageUtils
block|{
specifier|private
specifier|static
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_BLOBSTORE_SUPPORTED_SCHEMES
operator|.
name|varname
argument_list|,
literal|"s3a,swift"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_BLOBSTORE_USE_BLOBSTORE_AS_SCRATCHDIR
operator|.
name|varname
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidAndInvalidPaths
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Valid paths
name|assertTrue
argument_list|(
name|isBlobStoragePath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"s3a://bucket/path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isBlobStoragePath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"swift://bucket/path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Invalid paths
name|assertFalse
argument_list|(
name|isBlobStoragePath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/tmp/a-path"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isBlobStoragePath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"s3fs://tmp/file"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isBlobStoragePath
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isBlobStorageFileSystem
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isBlobStoragePath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidAndInvalidFileSystems
parameter_list|()
block|{
name|FileSystem
name|fs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* Valid FileSystem schemes */
name|doReturn
argument_list|(
literal|"s3a"
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getScheme
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|isBlobStorageFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|"swift"
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getScheme
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|isBlobStorageFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Invalid FileSystem schemes */
name|doReturn
argument_list|(
literal|"hdfs"
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getScheme
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|isBlobStorageFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|""
argument_list|)
operator|.
name|when
argument_list|(
name|fs
argument_list|)
operator|.
name|getScheme
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|isBlobStorageFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isBlobStorageFileSystem
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidAndInvalidSchemes
parameter_list|()
block|{
comment|// Valid schemes
name|assertTrue
argument_list|(
name|isBlobStorageScheme
argument_list|(
name|conf
argument_list|,
literal|"s3a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isBlobStorageScheme
argument_list|(
name|conf
argument_list|,
literal|"swift"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Invalid schemes
name|assertFalse
argument_list|(
name|isBlobStorageScheme
argument_list|(
name|conf
argument_list|,
literal|"hdfs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isBlobStorageScheme
argument_list|(
name|conf
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isBlobStorageScheme
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

