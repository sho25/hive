begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveDecimal
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPrecisionScaleEnforcement
parameter_list|()
block|{
name|String
name|decStr
init|=
literal|"1786135888657847525803324040144343378.09799306448796128931113691624"
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1786135888657847525803324040144343378.0979930644879612893111369162"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Decimal precision should not go above maximum"
argument_list|,
name|dec
operator|.
name|precision
argument_list|()
operator|<=
name|HiveDecimal
operator|.
name|MAX_PRECISION
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Decimal scale should not go above maximum"
argument_list|,
name|dec
operator|.
name|scale
argument_list|()
operator|<=
name|HiveDecimal
operator|.
name|MAX_SCALE
argument_list|)
expr_stmt|;
name|BigDecimal
name|bd
init|=
operator|new
name|BigDecimal
argument_list|(
name|decStr
argument_list|)
decl_stmt|;
name|BigDecimal
name|bd1
init|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|bd
argument_list|,
literal|20
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|bd1
argument_list|)
expr_stmt|;
name|bd1
operator|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|bd
argument_list|,
literal|45
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1786135888657847525803324040144343378.09799"
argument_list|,
name|bd1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bd1
operator|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|bd
argument_list|,
literal|45
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|bd1
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bd
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1786135888657847525803324040144343378.09799306448796128931113691624"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"-1786135888657847525803324040144343378.0979930644879612893111369162"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"005.34000"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dec
operator|.
name|precision
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dec
operator|.
name|scale
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"178613588865784752580332404014434337809799306448796128931113691624"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiply
parameter_list|()
block|{
name|HiveDecimal
name|dec1
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.1786135888657847525803"
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.123456789"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec1
operator|.
name|multiply
argument_list|(
name|dec2
argument_list|)
argument_list|)
expr_stmt|;
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1786135888657847525803232322323234442321.4"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"178613588865784752580302323232.3"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec1
operator|.
name|multiply
argument_list|(
name|dec2
argument_list|)
argument_list|)
expr_stmt|;
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"47.324"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9232.309"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"436909.791116"
argument_list|,
name|dec1
operator|.
name|multiply
argument_list|(
name|dec2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPow
parameter_list|()
block|{
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.1415926"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dec
operator|.
name|pow
argument_list|(
literal|2
argument_list|)
argument_list|,
name|dec
operator|.
name|multiply
argument_list|(
name|dec
argument_list|)
argument_list|)
expr_stmt|;
name|HiveDecimal
name|dec1
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.17861358882"
argument_list|)
decl_stmt|;
name|dec1
operator|=
name|dec1
operator|.
name|pow
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDivide
parameter_list|()
block|{
name|HiveDecimal
name|dec1
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.14"
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dec1
operator|.
name|divide
argument_list|(
name|dec2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPlus
parameter_list|()
block|{
name|HiveDecimal
name|dec1
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"99999999999999999999999999999999999"
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dec1
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testException
parameter_list|()
block|{
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.1415.926"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3abc43"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

