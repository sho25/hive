begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_class
specifier|public
class|class
name|TestTimestampTZ
block|{
annotation|@
name|Test
specifier|public
name|void
name|testConvertToUTC
parameter_list|()
block|{
name|String
name|s
init|=
literal|"2017-04-14 18:00:00 Asia/Shanghai"
decl_stmt|;
name|TimestampTZ
name|timestampTZ
init|=
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|s
argument_list|,
name|ZoneId
operator|.
name|of
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2017-04-14 10:00:00.0 UTC"
argument_list|,
name|timestampTZ
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComparison
parameter_list|()
block|{
name|String
name|s1
init|=
literal|"2017-04-14 18:00:00 Asia/Shanghai"
decl_stmt|;
name|String
name|s2
init|=
literal|"2017-04-14 10:00:00.00 GMT"
decl_stmt|;
name|String
name|s3
init|=
literal|"2017-04-14 18:00:00 UTC+08:00"
decl_stmt|;
name|String
name|s4
init|=
literal|"2017-04-14 18:00:00 Europe/London"
decl_stmt|;
name|TimestampTZ
name|tstz1
init|=
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|TimestampTZ
name|tstz2
init|=
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|s2
argument_list|)
decl_stmt|;
name|TimestampTZ
name|tstz3
init|=
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|s3
argument_list|)
decl_stmt|;
name|TimestampTZ
name|tstz4
init|=
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|s4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tstz1
argument_list|,
name|tstz2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tstz1
argument_list|,
name|tstz3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tstz1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|tstz2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tstz1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|tstz3
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tstz1
operator|.
name|compareTo
argument_list|(
name|tstz4
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDST
parameter_list|()
block|{
name|String
name|s1
init|=
literal|"2005-04-03 02:01:00 America/Los_Angeles"
decl_stmt|;
name|String
name|s2
init|=
literal|"2005-04-03 03:01:00 America/Los_Angeles"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|s1
argument_list|)
argument_list|,
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFromToInstant
parameter_list|()
block|{
name|String
name|s1
init|=
literal|"2017-04-14 18:00:00 UTC"
decl_stmt|;
name|TimestampTZ
name|tstz
init|=
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|long
name|seconds
init|=
name|tstz
operator|.
name|getEpochSecond
argument_list|()
decl_stmt|;
name|int
name|nanos
init|=
name|tstz
operator|.
name|getNanos
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tstz
argument_list|,
operator|new
name|TimestampTZ
argument_list|(
name|seconds
argument_list|,
name|nanos
argument_list|,
name|ZoneId
operator|.
name|of
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nanos
operator|+=
literal|123000000
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2017-04-14 18:00:00.123 UTC"
argument_list|,
operator|new
name|TimestampTZ
argument_list|(
name|seconds
argument_list|,
name|nanos
argument_list|,
name|ZoneId
operator|.
name|of
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|seconds
operator|-=
literal|3
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2017-04-14 17:59:57.123 UTC"
argument_list|,
operator|new
name|TimestampTZ
argument_list|(
name|seconds
argument_list|,
name|nanos
argument_list|,
name|ZoneId
operator|.
name|of
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVariations
parameter_list|()
block|{
comment|// Omitting zone or time part is allowed
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
literal|"2017-01-01 13:33:00"
argument_list|,
name|ZoneId
operator|.
name|of
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
literal|"2017-11-08 Europe/London"
argument_list|)
expr_stmt|;
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
literal|"2017-05-20"
argument_list|,
name|ZoneId
operator|.
name|of
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
literal|"2017-11-08GMT"
argument_list|)
expr_stmt|;
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
literal|"2017-10-11 GMT+8:00"
argument_list|)
expr_stmt|;
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
literal|"2017-05-08 07:45:00-3:00"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidStrings
parameter_list|()
block|{
comment|// invalid zone
try|try
block|{
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
literal|"2017-01-01 13:33:00 foo"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invalid timezone ID should cause exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// invalid time part
try|try
block|{
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
literal|"2017-01-01 13:33:61"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invalid time should cause exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertFromTimestamp
parameter_list|()
block|{
name|TimeZone
name|defaultZone
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Use system zone when converting from timestamp to timestamptz
name|String
name|s
init|=
literal|"2017-06-12 23:12:56.34"
decl_stmt|;
name|TimestampTZ
name|tstz1
init|=
name|TimestampTZUtil
operator|.
name|convert
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|,
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"Europe/London"
argument_list|)
operator|.
name|toZoneId
argument_list|()
argument_list|)
decl_stmt|;
name|TimestampTZ
name|tstz2
init|=
name|TimestampTZUtil
operator|.
name|convert
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|,
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Los_Angeles"
argument_list|)
operator|.
name|toZoneId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tstz1
operator|.
name|compareTo
argument_list|(
name|tstz2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|defaultZone
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConvertFromTimestamp2
parameter_list|()
block|{
name|TimeZone
name|defaultZone
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Use system zone when converting from timestamp to timestamptz
name|String
name|s
init|=
literal|"2017-06-12 23:12:56.34"
decl_stmt|;
name|TimestampTZ
name|tstz1
init|=
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|s
operator|+
literal|" "
operator|+
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"Europe/London"
argument_list|)
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|TimestampTZ
name|tstz2
init|=
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|s
operator|+
literal|" "
operator|+
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Los_Angeles"
argument_list|)
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tstz1
operator|.
name|compareTo
argument_list|(
name|tstz2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|defaultZone
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

