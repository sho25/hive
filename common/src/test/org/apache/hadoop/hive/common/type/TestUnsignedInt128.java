begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Testcases for {@link UnsignedInt128}  *  * This code was based on code from Microsoft's PolyBase.  */
end_comment

begin_class
specifier|public
class|class
name|TestUnsignedInt128
block|{
specifier|private
name|UnsignedInt128
name|zero
decl_stmt|;
specifier|private
name|UnsignedInt128
name|one
decl_stmt|;
specifier|private
name|UnsignedInt128
name|two
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|zero
operator|=
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|one
operator|=
operator|new
name|UnsignedInt128
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|two
operator|=
operator|new
name|UnsignedInt128
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|assertNotEquals
argument_list|(
name|one
operator|.
name|hashCode
argument_list|()
argument_list|,
name|two
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|zero
operator|.
name|hashCode
argument_list|()
argument_list|,
name|one
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|zero
operator|.
name|hashCode
argument_list|()
argument_list|,
name|two
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zero
operator|.
name|hashCode
argument_list|()
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|one
operator|.
name|hashCode
argument_list|()
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|1
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|two
operator|.
name|hashCode
argument_list|()
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|2
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNotEquals
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNotEquals
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNotEquals
parameter_list|(
name|UnsignedInt128
name|a
parameter_list|,
name|UnsignedInt128
name|b
parameter_list|)
block|{
name|assertTrue
argument_list|(
operator|!
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|assertNotEquals
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|zero
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|zero
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zero
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|one
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|two
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareTo
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|one
operator|.
name|compareTo
argument_list|(
name|two
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|two
operator|.
name|compareTo
argument_list|(
name|one
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|one
operator|.
name|compareTo
argument_list|(
name|zero
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zero
operator|.
name|compareTo
argument_list|(
name|two
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareToScaleTen
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|zero
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zero
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zero
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|12
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|one
operator|.
name|compareToScaleTen
argument_list|(
name|zero
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|one
operator|.
name|compareToScaleTen
argument_list|(
name|zero
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|one
operator|.
name|compareToScaleTen
argument_list|(
name|zero
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|3
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zero
operator|.
name|compareToScaleTen
argument_list|(
name|one
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zero
operator|.
name|compareToScaleTen
argument_list|(
name|one
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|zero
operator|.
name|compareToScaleTen
argument_list|(
name|one
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|30
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|30
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|30
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|68
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|68
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|10
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|60
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|30
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|10
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|11
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|12
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|13
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|30
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000001L
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
operator|<
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|68000000000L
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000001L
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|68000000000L
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|68000000000L
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|679999999999L
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0x10000000000000L
argument_list|)
operator|.
name|shiftLeftConstructive
argument_list|(
literal|32
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0xA0000000000000L
argument_list|)
operator|.
name|shiftLeftConstructive
argument_list|(
literal|32
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0x10000000000000L
argument_list|)
operator|.
name|shiftLeftConstructive
argument_list|(
literal|32
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0xA0000000000000L
argument_list|)
operator|.
name|shiftLeftConstructive
argument_list|(
literal|32
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0x10000000000000L
argument_list|)
operator|.
name|shiftLeftConstructive
argument_list|(
literal|32
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0xA0000000000000L
argument_list|)
operator|.
name|shiftLeftConstructive
argument_list|(
literal|32
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0x10000000000000L
argument_list|)
operator|.
name|shiftLeftConstructive
argument_list|(
literal|32
argument_list|)
operator|.
name|compareToScaleTen
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|0xA0000000000000L
argument_list|)
operator|.
name|shiftLeftConstructive
argument_list|(
literal|32
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|2
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToFormalString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|zero
operator|.
name|toFormalString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|one
operator|.
name|toFormalString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"30"
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|30
argument_list|)
operator|.
name|toFormalString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"680000000000"
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
operator|.
name|toFormalString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"6800000000000"
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|6800000000000L
argument_list|)
operator|.
name|toFormalString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"68"
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|68
argument_list|)
operator|.
name|toFormalString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zero
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|one
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|30
argument_list|)
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|"30"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|680000000000L
argument_list|)
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|"680000000000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|6800000000000L
argument_list|)
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|"6800000000000"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|68
argument_list|)
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|"68"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsignedInt128
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0L
argument_list|,
operator|new
name|UnsignedInt128
argument_list|()
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsignedInt128UnsignedInt128
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1L
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
name|one
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
name|two
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsignedInt128IntIntIntInt
parameter_list|()
block|{
name|assertEquals
argument_list|(
operator|(
operator|(
name|long
operator|)
literal|11
operator|)
operator|<<
literal|32L
operator||
literal|23L
argument_list|,
operator|new
name|UnsignedInt128
argument_list|(
literal|23
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testZeroClear
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|one
operator|.
name|isZero
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|two
operator|.
name|isZero
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|0L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|0L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|two
operator|.
name|zeroClear
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|0L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|one
operator|.
name|isZero
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|two
operator|.
name|isZero
argument_list|()
argument_list|)
expr_stmt|;
name|one
operator|.
name|zeroClear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|one
operator|.
name|isZero
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|two
operator|.
name|isZero
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddDestructive
parameter_list|()
block|{
name|one
operator|.
name|addDestructive
argument_list|(
name|two
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|big
init|=
operator|new
name|UnsignedInt128
argument_list|(
operator|(
literal|1L
operator|<<
literal|62
operator|)
operator|+
literal|3L
argument_list|)
decl_stmt|;
name|UnsignedInt128
name|tmp
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|54
condition|;
operator|++
name|i
control|)
block|{
name|tmp
operator|.
name|addDestructive
argument_list|(
name|big
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
operator|*
literal|54
argument_list|,
name|tmp
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0x80000000
argument_list|,
name|tmp
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
comment|// (54 % 4)<< 62
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|tmp
operator|.
name|getV2
argument_list|()
argument_list|)
expr_stmt|;
comment|// 54/4
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tmp
operator|.
name|getV3
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1L
operator|<<
literal|62
operator|)
operator|+
literal|3L
argument_list|,
name|big
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|huge
init|=
name|one
operator|.
name|shiftLeftConstructive
argument_list|(
literal|127
argument_list|)
decl_stmt|;
name|UnsignedInt128
name|huge2
init|=
name|one
operator|.
name|shiftLeftConstructive
argument_list|(
literal|127
argument_list|)
decl_stmt|;
try|try
block|{
name|huge2
operator|.
name|addDestructive
argument_list|(
name|huge
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubtractDestructive
parameter_list|()
block|{
name|two
operator|.
name|subtractDestructive
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|one
operator|.
name|subtractDestructive
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|UnsignedInt128
name|big
init|=
operator|new
name|UnsignedInt128
argument_list|(
operator|(
literal|1L
operator|<<
literal|62
operator|)
operator|+
operator|(
literal|3L
operator|<<
literal|34
operator|)
operator|+
literal|3L
argument_list|)
decl_stmt|;
name|big
operator|.
name|shiftLeftDestructive
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|tmp
init|=
operator|new
name|UnsignedInt128
argument_list|(
operator|(
literal|1L
operator|<<
literal|61
operator|)
operator|+
literal|5L
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|shiftLeftDestructive
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|big
operator|.
name|subtractDestructive
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|big
operator|.
name|subtractDestructive
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|3
operator|<<
literal|6
operator|)
operator|-
literal|2
operator|*
operator|(
literal|5
operator|<<
literal|6
operator|)
argument_list|,
name|big
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|3
operator|<<
literal|8
operator|)
operator|-
literal|1
argument_list|,
name|big
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|big
operator|.
name|getV2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|big
operator|.
name|getV3
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiplyDestructiveInt
parameter_list|()
block|{
name|two
operator|.
name|multiplyDestructive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|two
operator|.
name|multiplyDestructive
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|five
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|five
operator|.
name|multiplyDestructive
argument_list|(
literal|6432346
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6432346
operator|*
literal|5
argument_list|,
name|five
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|five
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|five
operator|.
name|getV2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|five
operator|.
name|getV3
argument_list|()
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|big
init|=
operator|new
name|UnsignedInt128
argument_list|(
operator|(
literal|1L
operator|<<
literal|62
operator|)
operator|+
operator|(
literal|3L
operator|<<
literal|34
operator|)
operator|+
literal|3L
argument_list|)
decl_stmt|;
name|big
operator|.
name|multiplyDestructive
argument_list|(
literal|96
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
literal|96
argument_list|,
name|big
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|96
operator|*
operator|(
literal|3
operator|<<
literal|2
operator|)
argument_list|,
name|big
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|96
operator|/
literal|4
argument_list|,
name|big
operator|.
name|getV2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|big
operator|.
name|getV3
argument_list|()
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|tmp
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|shiftLeftDestructive
argument_list|(
literal|126
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|multiplyDestructive
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|tmp
operator|.
name|multiplyDestructive
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShiftDestructive
parameter_list|()
block|{
name|UnsignedInt128
name|big
init|=
operator|new
name|UnsignedInt128
argument_list|(
operator|(
literal|1L
operator|<<
literal|62
operator|)
operator|+
operator|(
literal|23L
operator|<<
literal|32
operator|)
operator|+
literal|89L
argument_list|)
decl_stmt|;
name|big
operator|.
name|shiftLeftDestructive
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|89
operator|*
literal|4
argument_list|,
name|big
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
operator|*
literal|4
argument_list|,
name|big
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|big
operator|.
name|getV2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|big
operator|.
name|getV3
argument_list|()
argument_list|)
expr_stmt|;
name|big
operator|.
name|shiftLeftDestructive
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|big
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|89
operator|*
literal|4
argument_list|,
name|big
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
operator|*
literal|4
argument_list|,
name|big
operator|.
name|getV2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|big
operator|.
name|getV3
argument_list|()
argument_list|)
expr_stmt|;
name|big
operator|.
name|shiftRightDestructive
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|big
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|89
argument_list|,
name|big
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
operator|+
operator|(
literal|1
operator|<<
literal|30
operator|)
argument_list|,
name|big
operator|.
name|getV2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|big
operator|.
name|getV3
argument_list|()
argument_list|)
expr_stmt|;
name|big
operator|.
name|shiftRightDestructive
argument_list|(
literal|32
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|89
argument_list|,
name|big
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
operator|+
operator|(
literal|1
operator|<<
literal|30
operator|)
argument_list|,
name|big
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|big
operator|.
name|getV2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|big
operator|.
name|getV3
argument_list|()
argument_list|)
expr_stmt|;
comment|// test rounding
name|UnsignedInt128
name|tmp
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|17
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|tmp
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|shiftRightDestructive
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|tmp
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|shiftRightDestructive
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tmp
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|shiftRightDestructive
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tmp
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|shiftRightDestructive
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tmp
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|shiftRightDestructive
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tmp
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|shiftRightDestructive
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tmp
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiplyDestructiveUnsignedInt128
parameter_list|()
block|{
name|two
operator|.
name|multiplyDestructive
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|two
operator|.
name|multiplyDestructive
argument_list|(
name|two
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|five
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|five
operator|.
name|multiplyDestructive
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|6432346
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6432346
operator|*
literal|5
argument_list|,
name|five
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|five
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|five
operator|.
name|getV2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|five
operator|.
name|getV3
argument_list|()
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|big
init|=
operator|new
name|UnsignedInt128
argument_list|(
operator|(
literal|1L
operator|<<
literal|62
operator|)
operator|+
operator|(
literal|3L
operator|<<
literal|34
operator|)
operator|+
literal|3L
argument_list|)
decl_stmt|;
name|big
operator|.
name|multiplyDestructive
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|96
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
literal|96
argument_list|,
name|big
operator|.
name|getV0
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|96
operator|*
operator|(
literal|3
operator|<<
literal|2
operator|)
argument_list|,
name|big
operator|.
name|getV1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|96
operator|/
literal|4
argument_list|,
name|big
operator|.
name|getV2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|big
operator|.
name|getV3
argument_list|()
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|tmp
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|shiftLeftDestructive
argument_list|(
literal|126
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|multiplyDestructive
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|tmp
operator|.
name|multiplyDestructive
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
name|UnsignedInt128
name|complicated1
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|0xF9892FCA
argument_list|,
literal|0x59D109AD
argument_list|,
literal|0x0534AB4C
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BigInteger
name|bigInteger1
init|=
name|complicated1
operator|.
name|toBigIntegerSlow
argument_list|()
decl_stmt|;
name|UnsignedInt128
name|complicated2
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|54234234
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BigInteger
name|bigInteger2
init|=
name|complicated2
operator|.
name|toBigIntegerSlow
argument_list|()
decl_stmt|;
name|complicated1
operator|.
name|multiplyDestructive
argument_list|(
name|complicated2
argument_list|)
expr_stmt|;
name|BigInteger
name|ans
init|=
name|bigInteger1
operator|.
name|multiply
argument_list|(
name|bigInteger2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ans
argument_list|,
name|complicated1
operator|.
name|toBigIntegerSlow
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|UnsignedInt128
name|complicated3
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|0xF9892FCA
argument_list|,
literal|0x59D109AD
argument_list|,
literal|0x0534AB4C
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|complicated3
operator|.
name|multiplyDestructive
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|54234234
argument_list|,
literal|9845
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiplyScaleDownTenDestructiveScaleTen
parameter_list|()
block|{
for|for
control|(
name|int
name|scale
init|=
literal|0
init|;
name|scale
operator|<
literal|38
condition|;
operator|++
name|scale
control|)
block|{
name|UnsignedInt128
name|right
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|right
operator|.
name|scaleUpTenDestructive
argument_list|(
operator|(
name|short
operator|)
name|scale
argument_list|)
expr_stmt|;
block|{
comment|// 10000000....000
name|UnsignedInt128
name|leftJust
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|leftJust
operator|.
name|scaleUpTenDestructive
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|leftInc
init|=
name|leftJust
operator|.
name|incrementConstructive
argument_list|()
decl_stmt|;
name|UnsignedInt128
name|leftDec
init|=
name|leftJust
operator|.
name|decrementConstructive
argument_list|()
decl_stmt|;
if|if
condition|(
name|scale
operator|+
literal|10
operator|<=
literal|38
condition|)
block|{
name|leftJust
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|100000L
argument_list|,
name|leftJust
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|leftInc
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|100000L
argument_list|,
name|leftInc
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|leftDec
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|100000L
argument_list|,
name|leftDec
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|leftJust
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|0L
argument_list|,
name|leftJust
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|leftInc
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|0L
argument_list|,
name|leftInc
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|leftDec
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|0L
argument_list|,
name|leftDec
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|// 10000500....00
name|UnsignedInt128
name|leftHalfJust
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|leftHalfJust
operator|.
name|scaleUpTenDestructive
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|)
expr_stmt|;
name|leftHalfJust
operator|.
name|addDestructive
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|leftHalfJust
operator|.
name|scaleUpTenDestructive
argument_list|(
operator|(
name|short
operator|)
literal|9
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|leftHalfInc
init|=
name|leftHalfJust
operator|.
name|incrementConstructive
argument_list|()
decl_stmt|;
name|UnsignedInt128
name|leftHalfDec
init|=
name|leftHalfJust
operator|.
name|decrementConstructive
argument_list|()
decl_stmt|;
if|if
condition|(
name|scale
operator|+
literal|10
operator|<=
literal|38
condition|)
block|{
name|leftHalfJust
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|100001L
argument_list|,
name|leftHalfJust
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|leftHalfInc
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|100001L
argument_list|,
name|leftHalfInc
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|leftHalfDec
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|100000L
argument_list|,
name|leftHalfDec
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|leftHalfJust
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|0L
argument_list|,
name|leftHalfJust
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|leftHalfInc
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|0L
argument_list|,
name|leftHalfInc
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|leftHalfDec
operator|.
name|multiplyScaleDownTenDestructive
argument_list|(
name|right
argument_list|,
call|(
name|short
call|)
argument_list|(
name|scale
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"scale="
operator|+
name|scale
argument_list|,
literal|0L
argument_list|,
name|leftHalfDec
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDivideDestructiveInt
parameter_list|()
block|{
name|two
operator|.
name|divideDestructive
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|one
operator|.
name|divideDestructive
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|var1
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|1234234662345L
argument_list|)
decl_stmt|;
name|var1
operator|.
name|divideDestructive
argument_list|(
literal|642337
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234234662345L
operator|/
literal|642337L
argument_list|,
name|var1
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|complicated1
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|0xF9892FCA
argument_list|,
literal|0x59D109AD
argument_list|,
literal|0x0534AB4C
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BigInteger
name|bigInteger1
init|=
name|complicated1
operator|.
name|toBigIntegerSlow
argument_list|()
decl_stmt|;
name|complicated1
operator|.
name|divideDestructive
argument_list|(
literal|1534223465
argument_list|)
expr_stmt|;
name|BigInteger
name|bigInteger2
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|1534223465
argument_list|)
decl_stmt|;
name|BigInteger
name|ans
init|=
name|bigInteger1
operator|.
name|divide
argument_list|(
name|bigInteger2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ans
argument_list|,
name|complicated1
operator|.
name|toBigIntegerSlow
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|complicated1
operator|.
name|divideDestructive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDivideDestructiveUnsignedInt128
parameter_list|()
block|{
name|UnsignedInt128
name|remainder
init|=
operator|new
name|UnsignedInt128
argument_list|()
decl_stmt|;
name|two
operator|.
name|divideDestructive
argument_list|(
name|one
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|zero
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
name|one
operator|.
name|divideDestructive
argument_list|(
name|two
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|one
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|two
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|1
argument_list|)
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|var1
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|1234234662345L
argument_list|)
decl_stmt|;
name|var1
operator|.
name|divideDestructive
argument_list|(
operator|new
name|UnsignedInt128
argument_list|(
literal|642337
argument_list|)
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234234662345L
operator|/
literal|642337L
argument_list|,
name|var1
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234234662345L
operator|%
literal|642337L
argument_list|,
name|remainder
operator|.
name|asLong
argument_list|()
argument_list|)
expr_stmt|;
name|UnsignedInt128
name|complicated1
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|0xF9892FCA
argument_list|,
literal|0x59D109AD
argument_list|,
literal|0x0534AB4C
argument_list|,
literal|0x42395ADC
argument_list|)
decl_stmt|;
name|UnsignedInt128
name|complicated2
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|0xF09DC19A
argument_list|,
literal|0x00001234
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BigInteger
name|bigInteger1
init|=
name|complicated1
operator|.
name|toBigIntegerSlow
argument_list|()
decl_stmt|;
name|BigInteger
name|bigInteger2
init|=
name|complicated2
operator|.
name|toBigIntegerSlow
argument_list|()
decl_stmt|;
name|complicated1
operator|.
name|divideDestructive
argument_list|(
name|complicated2
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
name|BigInteger
name|ans
init|=
name|bigInteger1
operator|.
name|divide
argument_list|(
name|bigInteger2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ans
argument_list|,
name|complicated1
operator|.
name|toBigIntegerSlow
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|complicated1
operator|.
name|divideDestructive
argument_list|(
name|zero
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArithmeticException
name|ex
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDivideDestructiveUnsignedInt128Again
parameter_list|()
block|{
name|UnsignedInt128
name|complicated1
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|0xF9892FCA
argument_list|,
literal|0x59D109AD
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|UnsignedInt128
name|complicated2
init|=
operator|new
name|UnsignedInt128
argument_list|(
literal|0xF09DC19A
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BigInteger
name|bigInteger1
init|=
name|complicated1
operator|.
name|toBigIntegerSlow
argument_list|()
decl_stmt|;
name|BigInteger
name|bigInteger2
init|=
name|complicated2
operator|.
name|toBigIntegerSlow
argument_list|()
decl_stmt|;
name|complicated1
operator|.
name|divideDestructive
argument_list|(
name|complicated2
argument_list|,
operator|new
name|UnsignedInt128
argument_list|()
argument_list|)
expr_stmt|;
name|BigInteger
name|ans
init|=
name|bigInteger1
operator|.
name|divide
argument_list|(
name|bigInteger2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ans
argument_list|,
name|complicated1
operator|.
name|toBigIntegerSlow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigIntConversion
parameter_list|()
block|{
name|BigInteger
name|bigInteger
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|0x1ABCDEF0123456L
argument_list|)
decl_stmt|;
name|UnsignedInt128
name|uInt128
init|=
operator|new
name|UnsignedInt128
argument_list|(
name|bigInteger
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bigInteger
argument_list|,
name|uInt128
operator|.
name|toBigIntegerSlow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

