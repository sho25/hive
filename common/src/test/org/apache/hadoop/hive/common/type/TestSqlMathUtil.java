begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This code was based on code from Microsoft's PolyBase.  */
end_comment

begin_class
specifier|public
class|class
name|TestSqlMathUtil
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDivision
parameter_list|()
block|{
block|{
name|int
index|[]
name|dividend
init|=
operator|new
name|int
index|[]
block|{
literal|1
operator|+
literal|33
block|,
literal|2
operator|+
literal|21
block|,
literal|3
block|,
literal|4
operator|+
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|0
block|}
decl_stmt|;
name|int
index|[]
name|divisor
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
decl_stmt|;
name|int
index|[]
name|quotient
init|=
operator|new
name|int
index|[
literal|5
index|]
decl_stmt|;
name|int
index|[]
name|remainder
init|=
name|SqlMathUtil
operator|.
name|divideMultiPrecision
argument_list|(
name|dividend
argument_list|,
name|divisor
argument_list|,
name|quotient
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|10
block|,
literal|0
block|}
argument_list|,
name|quotient
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|33
block|,
literal|21
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
block|}
block|{
name|int
index|[]
name|dividend
init|=
operator|new
name|int
index|[]
block|{
literal|0xF7000000
block|,
literal|0
block|,
literal|0x39000000
block|,
literal|0
block|}
decl_stmt|;
name|int
index|[]
name|divisor
init|=
operator|new
name|int
index|[]
block|{
literal|0xF700
block|,
literal|0
block|,
literal|0x3900
block|,
literal|0
block|}
decl_stmt|;
name|int
index|[]
name|quotient
init|=
operator|new
name|int
index|[
literal|5
index|]
decl_stmt|;
name|int
index|[]
name|remainder
init|=
name|SqlMathUtil
operator|.
name|divideMultiPrecision
argument_list|(
name|dividend
argument_list|,
name|divisor
argument_list|,
name|quotient
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0x10000
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|quotient
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Zero dividend
name|int
index|[]
name|dividend
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|int
index|[]
name|divisor
init|=
operator|new
name|int
index|[]
block|{
literal|0xF700
block|,
literal|0
block|,
literal|0x3900
block|,
literal|0
block|}
decl_stmt|;
name|int
index|[]
name|quotient
init|=
operator|new
name|int
index|[
literal|5
index|]
decl_stmt|;
name|int
index|[]
name|remainder
init|=
name|SqlMathUtil
operator|.
name|divideMultiPrecision
argument_list|(
name|dividend
argument_list|,
name|divisor
argument_list|,
name|quotient
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|quotient
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

