begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveChar
block|{
annotation|@
name|Rule
specifier|public
name|ConcurrentRule
name|concurrentRule
init|=
operator|new
name|ConcurrentRule
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|RepeatingRule
name|repeatingRule
init|=
operator|new
name|RepeatingRule
argument_list|()
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testBasic
parameter_list|()
block|{
name|HiveChar
name|hc
init|=
operator|new
name|HiveChar
argument_list|(
literal|"abc"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abc       "
argument_list|,
name|hc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc       "
argument_list|,
name|hc
operator|.
name|getPaddedValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|hc
operator|.
name|getStrippedValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hc
operator|.
name|getCharacterLength
argument_list|()
argument_list|)
expr_stmt|;
name|hc
operator|.
name|setValue
argument_list|(
literal|"abc123"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123"
argument_list|,
name|hc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123"
argument_list|,
name|hc
operator|.
name|getPaddedValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123"
argument_list|,
name|hc
operator|.
name|getStrippedValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|hc
operator|.
name|getCharacterLength
argument_list|()
argument_list|)
expr_stmt|;
name|hc
operator|.
name|setValue
argument_list|(
literal|"xyz"
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xyz            "
argument_list|,
name|hc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xyz            "
argument_list|,
name|hc
operator|.
name|getPaddedValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xyz"
argument_list|,
name|hc
operator|.
name|getStrippedValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hc
operator|.
name|getCharacterLength
argument_list|()
argument_list|)
expr_stmt|;
name|hc
operator|.
name|setValue
argument_list|(
literal|"abc   "
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc  "
argument_list|,
name|hc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|hc
operator|.
name|getStrippedValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hc
operator|.
name|getCharacterLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testStringLength
parameter_list|()
block|{
name|HiveChar
name|hc
init|=
operator|new
name|HiveChar
argument_list|()
decl_stmt|;
name|hc
operator|.
name|setValue
argument_list|(
literal|"0123456789"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"01234"
argument_list|,
name|hc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hc
operator|.
name|setValue
argument_list|(
literal|"0123456789"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0123456789"
argument_list|,
name|hc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hc
operator|.
name|setValue
argument_list|(
literal|"0123456789"
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0123456789     "
argument_list|,
name|hc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testComparison
parameter_list|()
block|{
name|HiveChar
name|hc1
init|=
operator|new
name|HiveChar
argument_list|()
decl_stmt|;
name|HiveChar
name|hc2
init|=
operator|new
name|HiveChar
argument_list|()
decl_stmt|;
comment|// Identical strings
name|hc1
operator|.
name|setValue
argument_list|(
literal|"abc"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hc2
operator|.
name|setValue
argument_list|(
literal|"abc"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hc1
argument_list|,
name|hc2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hc2
argument_list|,
name|hc1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hc1
operator|.
name|compareTo
argument_list|(
name|hc2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hc2
operator|.
name|compareTo
argument_list|(
name|hc1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unequal strings
name|hc1
operator|.
name|setValue
argument_list|(
literal|"abc"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hc1
operator|.
name|setValue
argument_list|(
literal|"123"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hc1
operator|.
name|equals
argument_list|(
name|hc2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hc2
operator|.
name|equals
argument_list|(
name|hc1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|hc1
operator|.
name|compareTo
argument_list|(
name|hc2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|hc2
operator|.
name|compareTo
argument_list|(
name|hc1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trailing spaces are not significant
name|hc1
operator|.
name|setValue
argument_list|(
literal|"abc"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hc2
operator|.
name|setValue
argument_list|(
literal|"abc"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|hc1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc  "
argument_list|,
name|hc2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hc1
argument_list|,
name|hc2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hc2
argument_list|,
name|hc1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hc1
operator|.
name|compareTo
argument_list|(
name|hc2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hc2
operator|.
name|compareTo
argument_list|(
name|hc1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Leading space is significant
name|hc1
operator|.
name|setValue
argument_list|(
literal|" abc"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|hc2
operator|.
name|setValue
argument_list|(
literal|"abc"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hc1
operator|.
name|equals
argument_list|(
name|hc2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hc2
operator|.
name|equals
argument_list|(
name|hc1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|hc1
operator|.
name|compareTo
argument_list|(
name|hc2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|hc2
operator|.
name|compareTo
argument_list|(
name|hc1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

