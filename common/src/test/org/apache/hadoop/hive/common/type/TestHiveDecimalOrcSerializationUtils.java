begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritableV1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|SerializationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|RandomTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|TimestampUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveDecimalOrcSerializationUtils
extends|extends
name|HiveDecimalTestBase
block|{
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
specifier|public
name|void
name|testSerializationUtilsWriteRead
parameter_list|()
block|{
name|testSerializationUtilsWriteRead
argument_list|(
literal|"0.00"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"234.79"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"-12.25"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"99999999999999999999999999999999"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"-99999999999999999999999999999999"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"99999999999999999999999999999999999999"
argument_list|)
expr_stmt|;
comment|//                               12345678901234567890123456789012345678
name|testSerializationUtilsWriteRead
argument_list|(
literal|"-99999999999999999999999999999999999999"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"999999999999.99999999999999999999"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"-999999.99999999999999999999999999"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"9999999999999999999999.9999999999999999"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"-9999999999999999999999999999999.9999999"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"4611686018427387903"
argument_list|)
expr_stmt|;
comment|// 2^62 - 1
name|testSerializationUtilsWriteRead
argument_list|(
literal|"-4611686018427387903"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"4611686018427387904"
argument_list|)
expr_stmt|;
comment|// 2^62
name|testSerializationUtilsWriteRead
argument_list|(
literal|"-4611686018427387904"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"42535295865117307932921825928971026431"
argument_list|)
expr_stmt|;
comment|// 2^62*2^63 - 1
name|testSerializationUtilsWriteRead
argument_list|(
literal|"-42535295865117307932921825928971026431"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"42535295865117307932921825928971026432"
argument_list|)
expr_stmt|;
comment|// 2^62*2^63
name|testSerializationUtilsWriteRead
argument_list|(
literal|"-42535295865117307932921825928971026432"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"54216721532321902598.70"
argument_list|)
expr_stmt|;
name|testSerializationUtilsWriteRead
argument_list|(
literal|"-906.62545207002374150309544832320"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testSerializationUtilsWriteRead
parameter_list|(
name|String
name|string
parameter_list|)
block|{
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ START ~~~~~~~~~~~~~~~~~");
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER dec " + dec.toString());
name|BigInteger
name|bigInteger
init|=
name|dec
operator|.
name|unscaledValue
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|dec
operator|.
name|scale
argument_list|()
decl_stmt|;
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER bigInteger " + bigInteger.toString());
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER scale " + scale);
comment|//---------------------------------------------------
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|oldDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER oldDec " + oldDec.toString());
name|BigInteger
name|oldBigInteger
init|=
name|oldDec
operator|.
name|unscaledValue
argument_list|()
decl_stmt|;
name|int
name|oldScale
init|=
name|oldDec
operator|.
name|scale
argument_list|()
decl_stmt|;
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER oldBigInteger " + oldBigInteger.toString());
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER oldScale " + oldScale);
comment|//---------------------------------------------------
name|long
index|[]
name|scratchLongs
init|=
operator|new
name|long
index|[
name|HiveDecimal
operator|.
name|SCRATCH_LONGS_LEN
index|]
decl_stmt|;
name|int
name|which
init|=
literal|0
decl_stmt|;
try|try
block|{
name|ByteArrayOutputStream
name|outputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dec
operator|.
name|serializationUtilsWrite
argument_list|(
name|outputStream
argument_list|,
name|scratchLongs
argument_list|)
condition|)
block|{
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER serializationUtilsWrite failed");
name|fail
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|bytes
init|=
name|outputStream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|outputStreamExpected
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|SerializationUtils
operator|.
name|writeBigInteger
argument_list|(
name|outputStreamExpected
argument_list|,
name|bigInteger
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytesExpected
init|=
name|outputStreamExpected
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER check streams");
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER bytes1        " + displayBytes(bytes, 0, bytes.length));
if|if
condition|(
operator|!
name|StringExpr
operator|.
name|equal
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|bytesExpected
argument_list|,
literal|0
argument_list|,
name|bytesExpected
operator|.
name|length
argument_list|)
condition|)
block|{
comment|// Tailing zeroes difference ok.
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER streams not equal");
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER bytesExpected " + displayBytes(bytesExpected, 0, bytesExpected.length));
block|}
comment|// Deserialize and check...
name|which
operator|=
literal|1
expr_stmt|;
name|ByteArrayInputStream
name|byteArrayInputStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|BigInteger
name|deserializedBigInteger
init|=
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|byteArrayInputStream
argument_list|)
decl_stmt|;
name|which
operator|=
literal|2
expr_stmt|;
name|ByteArrayInputStream
name|byteArrayInputStreamExpected
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytesExpected
argument_list|)
decl_stmt|;
name|BigInteger
name|deserializedBigIntegerExpected
init|=
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|byteArrayInputStreamExpected
argument_list|)
decl_stmt|;
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER deserialized equals " +
comment|//    deserializedBigInteger.equals(deserializedBigIntegerExpected));
if|if
condition|(
operator|!
name|deserializedBigInteger
operator|.
name|equals
argument_list|(
name|deserializedBigIntegerExpected
argument_list|)
condition|)
block|{
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER deserializedBigInteger " + deserializedBigInteger.toString() +
comment|//    " deserializedBigIntegerExpected " + deserializedBigIntegerExpected.toString());
name|fail
argument_list|()
expr_stmt|;
block|}
name|which
operator|=
literal|3
expr_stmt|;
name|ByteArrayInputStream
name|byteArrayInputStreamRead
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|byte
index|[]
name|scratchBytes
init|=
operator|new
name|byte
index|[
name|HiveDecimal
operator|.
name|SCRATCH_BUFFER_LEN_SERIALIZATION_UTILS_READ
index|]
decl_stmt|;
name|HiveDecimal
name|readHiveDecimal
init|=
name|HiveDecimal
operator|.
name|serializationUtilsRead
argument_list|(
name|byteArrayInputStreamRead
argument_list|,
name|scale
argument_list|,
name|scratchBytes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|readHiveDecimal
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER read readHiveDecimal " + readHiveDecimal.toString() +
comment|//    " dec " + dec.toString() + " (scale parameter " + scale + ")");
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER read toString equals " +
comment|//    readHiveDecimal.toString().equals(dec.toString()));
name|assertEquals
argument_list|(
name|readHiveDecimal
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER read equals " +
comment|//    readHiveDecimal.equals(dec));
name|assertEquals
argument_list|(
name|readHiveDecimal
argument_list|,
name|dec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER " + e + " which " + which);
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// System.out.println("TEST_FAST_SERIALIZATION_UTILS_WRITE_BIG_INTEGER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  END  ~~~~~~~~~~~~~~~~~");
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomSerializationUtilsRead
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestRandomSerializationUtilsRead
argument_list|(
name|standardAlphabet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomSerializationUtilsReadSparse
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|digitAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomSerializationUtilsRead
argument_list|(
name|digitAlphabet
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestRandomSerializationUtilsRead
parameter_list|(
name|String
name|digitAlphabet
parameter_list|)
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|2389
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigInteger
name|bigInteger
init|=
name|randHiveBigInteger
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|)
decl_stmt|;
name|doTestSerializationUtilsRead
argument_list|(
name|r
argument_list|,
name|bigInteger
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializationUtilsReadSpecial
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|9923
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestSerializationUtilsRead
argument_list|(
name|r
argument_list|,
name|bigDecimal
operator|.
name|unscaledValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestSerializationUtilsRead
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigInteger
name|bigInteger
parameter_list|)
throws|throws
name|IOException
block|{
comment|// System.out.println("TEST_SERIALIZATION_UTILS_READ bigInteger " + bigInteger);
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigInteger
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigInteger
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// System.out.println("TEST_SERIALIZATION_UTILS_READ oldDec " + oldDec);
comment|// System.out.println("TEST_SERIALIZATION_UTILS_READ dec " + dec);
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bigInteger
argument_list|,
name|oldDec
operator|.
name|unscaledValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bigInteger
argument_list|,
name|dec
operator|.
name|unscaledValue
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|outputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|SerializationUtils
operator|.
name|writeBigInteger
argument_list|(
name|outputStream
argument_list|,
name|bigInteger
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|outputStream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|byteArrayInputStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|BigInteger
name|deserializedBigInteger
init|=
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|byteArrayInputStream
argument_list|)
decl_stmt|;
comment|// Verify SerializationUtils first.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bigInteger
argument_list|,
name|deserializedBigInteger
argument_list|)
expr_stmt|;
comment|// Now HiveDecimal
name|byte
index|[]
name|scratchBytes
init|=
operator|new
name|byte
index|[
name|HiveDecimal
operator|.
name|SCRATCH_BUFFER_LEN_SERIALIZATION_UTILS_READ
index|]
decl_stmt|;
name|byteArrayInputStream
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|HiveDecimal
name|resultDec
init|=
name|dec
operator|.
name|serializationUtilsRead
argument_list|(
name|byteArrayInputStream
argument_list|,
name|dec
operator|.
name|scale
argument_list|()
argument_list|,
name|scratchBytes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dec
operator|.
name|toString
argument_list|()
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//----------------------------------------------------------------------------------------------
comment|// Add scale.
name|int
name|scale
init|=
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|38
operator|+
literal|1
argument_list|)
decl_stmt|;
name|BigDecimal
name|bigDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|bigInteger
argument_list|,
name|scale
argument_list|)
decl_stmt|;
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// System.out.println("TEST_SERIALIZATION_UTILS_READ with scale oldDec " + oldDec);
comment|// System.out.println("TEST_SERIALIZATION_UTILS_READ with scale dec " + dec);
name|outputStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|SerializationUtils
operator|.
name|writeBigInteger
argument_list|(
name|outputStream
argument_list|,
name|dec
operator|.
name|unscaledValue
argument_list|()
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|outputStream
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
comment|// Now HiveDecimal
name|byteArrayInputStream
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|serializationUtilsRead
argument_list|(
name|byteArrayInputStream
argument_list|,
name|dec
operator|.
name|scale
argument_list|()
argument_list|,
name|scratchBytes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dec
operator|.
name|toString
argument_list|()
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomSerializationUtilsWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestRandomSerializationUtilsWrite
argument_list|(
name|standardAlphabet
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomSerializationUtilsWriteFractionsOnly
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestRandomSerializationUtilsWrite
argument_list|(
name|standardAlphabet
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomSerializationUtilsWriteSparse
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|digitAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomSerializationUtilsWrite
argument_list|(
name|digitAlphabet
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestRandomSerializationUtilsWrite
parameter_list|(
name|String
name|digitAlphabet
parameter_list|,
name|boolean
name|fractionsOnly
parameter_list|)
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|823
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigInteger
name|bigInteger
init|=
name|randHiveBigInteger
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|)
decl_stmt|;
name|doTestSerializationUtilsWrite
argument_list|(
name|r
argument_list|,
name|bigInteger
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializationUtilsWriteSpecial
parameter_list|()
throws|throws
name|IOException
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|998737
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestSerializationUtilsWrite
argument_list|(
name|r
argument_list|,
name|bigDecimal
operator|.
name|unscaledValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestSerializationUtilsWrite
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigInteger
name|bigInteger
parameter_list|)
throws|throws
name|IOException
block|{
comment|// System.out.println("TEST_SERIALIZATION_UTILS_WRITE bigInteger " + bigInteger);
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigInteger
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigInteger
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// System.out.println("TEST_SERIALIZATION_UTILS_WRITE oldDec " + oldDec);
comment|// System.out.println("TEST_SERIALIZATION_UTILS_WRITE dec " + dec);
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bigInteger
argument_list|,
name|oldDec
operator|.
name|unscaledValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bigInteger
argument_list|,
name|dec
operator|.
name|unscaledValue
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|outputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|SerializationUtils
operator|.
name|writeBigInteger
argument_list|(
name|outputStream
argument_list|,
name|bigInteger
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|outputStream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|byteArrayInputStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|BigInteger
name|deserializedBigInteger
init|=
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|byteArrayInputStream
argument_list|)
decl_stmt|;
comment|// Verify SerializationUtils first.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bigInteger
argument_list|,
name|deserializedBigInteger
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|decOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|long
index|[]
name|scratchLongs
init|=
operator|new
name|long
index|[
name|HiveDecimal
operator|.
name|SCRATCH_LONGS_LEN
index|]
decl_stmt|;
name|boolean
name|successful
init|=
name|dec
operator|.
name|serializationUtilsWrite
argument_list|(
name|decOutputStream
argument_list|,
name|scratchLongs
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|successful
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decBytes
init|=
name|decOutputStream
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringExpr
operator|.
name|equal
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|decBytes
argument_list|,
literal|0
argument_list|,
name|decBytes
operator|.
name|length
argument_list|)
condition|)
block|{
comment|// Tailing zeroes difference ok...
comment|// System.out.println("TEST_SERIALIZATION_UTILS_WRITE streams not equal");
comment|// System.out.println("TEST_SERIALIZATION_UTILS_WRITE bytes " + displayBytes(bytes, 0, bytes.length));
comment|// System.out.println("TEST_SERIALIZATION_UTILS_WRITE decBytes " + displayBytes(decBytes, 0, decBytes.length));
block|}
name|ByteArrayInputStream
name|decByteArrayInputStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|decBytes
argument_list|)
decl_stmt|;
name|BigInteger
name|decDeserializedBigInteger
init|=
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|decByteArrayInputStream
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bigInteger
argument_list|,
name|decDeserializedBigInteger
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

