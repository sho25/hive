begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_class
specifier|public
class|class
name|TestFileUtils
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFileUtils
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|isPathWithinSubtree_samePrefix
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/somedir1"
argument_list|)
decl_stmt|;
name|Path
name|subtree
init|=
operator|new
name|Path
argument_list|(
literal|"/somedir"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|FileUtils
operator|.
name|isPathWithinSubtree
argument_list|(
name|path
argument_list|,
name|subtree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isPathWithinSubtree_rootIsInside
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|Path
name|subtree
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|isPathWithinSubtree
argument_list|(
name|path
argument_list|,
name|subtree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isPathWithinSubtree_descendantInside
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"/foo/bar"
argument_list|)
decl_stmt|;
name|Path
name|subtree
init|=
operator|new
name|Path
argument_list|(
literal|"/foo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|isPathWithinSubtree
argument_list|(
name|path
argument_list|,
name|subtree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isPathWithinSubtree_relativeWalk
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"foo/../../bar"
argument_list|)
decl_stmt|;
name|Path
name|subtree
init|=
operator|new
name|Path
argument_list|(
literal|"../bar"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|isPathWithinSubtree
argument_list|(
name|path
argument_list|,
name|subtree
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getParentRegardlessOfScheme_badCases
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"proto://host1/foo/bar/baz"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|candidates
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"badproto://host1/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|candidates
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"proto://badhost1/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|candidates
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"proto://host1:71/foo/bar/baz"
argument_list|)
argument_list|)
expr_stmt|;
name|candidates
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"proto://host1/badfoo"
argument_list|)
argument_list|)
expr_stmt|;
name|candidates
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/badfoo"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|res
init|=
name|FileUtils
operator|.
name|getParentRegardlessOfScheme
argument_list|(
name|path
argument_list|,
name|candidates
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"none of these paths may match"
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getParentRegardlessOfScheme_priority
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"proto://host1/foo/bar/baz"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|expectedPath
decl_stmt|;
name|candidates
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
literal|"proto://host1/"
argument_list|)
argument_list|)
expr_stmt|;
name|candidates
operator|.
name|add
argument_list|(
name|expectedPath
operator|=
operator|new
name|Path
argument_list|(
literal|"proto://host1/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|res
init|=
name|FileUtils
operator|.
name|getParentRegardlessOfScheme
argument_list|(
name|path
argument_list|,
name|candidates
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getParentRegardlessOfScheme_root
parameter_list|()
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"proto://host1/foo"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|expectedPath
decl_stmt|;
name|candidates
operator|.
name|add
argument_list|(
name|expectedPath
operator|=
operator|new
name|Path
argument_list|(
literal|"proto://host1/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|res
init|=
name|FileUtils
operator|.
name|getParentRegardlessOfScheme
argument_list|(
name|path
argument_list|,
name|candidates
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetJarFilesByPath
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|tmpDir
init|=
name|Files
operator|.
name|createTempDir
argument_list|()
decl_stmt|;
name|String
name|jarFileName1
init|=
name|tmpDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"a.jar"
decl_stmt|;
name|String
name|jarFileName2
init|=
name|tmpDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"b.jar"
decl_stmt|;
name|File
name|jarFile1
init|=
operator|new
name|File
argument_list|(
name|jarFileName1
argument_list|)
decl_stmt|;
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|touch
argument_list|(
name|jarFile1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|jars
init|=
name|FileUtils
operator|.
name|getJarFilesByPath
argument_list|(
name|tmpDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"file://"
operator|+
name|jarFileName1
argument_list|)
argument_list|,
name|jars
argument_list|)
expr_stmt|;
name|jars
operator|=
name|FileUtils
operator|.
name|getJarFilesByPath
argument_list|(
literal|"/folder/not/exist"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|jars
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|jarFile2
init|=
operator|new
name|File
argument_list|(
name|jarFileName2
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|touch
argument_list|(
name|jarFile2
argument_list|)
expr_stmt|;
name|String
name|newPath
init|=
literal|"file://"
operator|+
name|jarFileName1
operator|+
literal|","
operator|+
literal|"file://"
operator|+
name|jarFileName2
operator|+
literal|",/file/not/exist"
decl_stmt|;
name|jars
operator|=
name|FileUtils
operator|.
name|getJarFilesByPath
argument_list|(
name|newPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"file://"
operator|+
name|jarFileName1
argument_list|,
literal|"file://"
operator|+
name|jarFileName2
argument_list|)
argument_list|,
name|jars
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to copy file to reloading folder"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRelativePathToAbsolutePath
parameter_list|()
throws|throws
name|IOException
block|{
name|LocalFileSystem
name|localFileSystem
init|=
operator|new
name|LocalFileSystem
argument_list|()
decl_stmt|;
name|Path
name|actualPath
init|=
name|FileUtils
operator|.
name|makeAbsolute
argument_list|(
name|localFileSystem
argument_list|,
operator|new
name|Path
argument_list|(
literal|"relative/path"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|expectedPath
init|=
operator|new
name|Path
argument_list|(
name|localFileSystem
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|,
literal|"relative/path"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
operator|.
name|toString
argument_list|()
argument_list|,
name|actualPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|absolutePath
init|=
operator|new
name|Path
argument_list|(
literal|"/absolute/path"
argument_list|)
decl_stmt|;
name|Path
name|unchangedPath
init|=
name|FileUtils
operator|.
name|makeAbsolute
argument_list|(
name|localFileSystem
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/absolute/path"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|unchangedPath
operator|.
name|toString
argument_list|()
argument_list|,
name|absolutePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsPathWithinSubtree
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|splitPath
init|=
operator|new
name|Path
argument_list|(
literal|"file:///user/hive/warehouse/src/data.txt"
argument_list|)
decl_stmt|;
name|Path
name|splitPathWithNoSchema
init|=
name|Path
operator|.
name|getPathWithoutSchemeAndAuthority
argument_list|(
name|splitPath
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Path
argument_list|>
name|parents
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|populateParentPaths
argument_list|(
name|parents
argument_list|,
name|splitPath
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|populateParentPaths
argument_list|(
name|parents
argument_list|,
name|splitPathWithNoSchema
argument_list|)
expr_stmt|;
name|Path
name|key
init|=
operator|new
name|Path
argument_list|(
literal|"/user/hive/warehouse/src"
argument_list|)
decl_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPath
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPathWithNoSchema
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyIfParentsContainPath
argument_list|(
name|key
argument_list|,
name|parents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Path
argument_list|(
literal|"/user/hive/warehouse/src_2"
argument_list|)
expr_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPath
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPathWithNoSchema
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyIfParentsContainPath
argument_list|(
name|key
argument_list|,
name|parents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Path
argument_list|(
literal|"/user/hive/warehouse/src/data.txt"
argument_list|)
expr_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPath
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPathWithNoSchema
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyIfParentsContainPath
argument_list|(
name|key
argument_list|,
name|parents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Path
argument_list|(
literal|"file:///user/hive/warehouse/src"
argument_list|)
expr_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPath
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPathWithNoSchema
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyIfParentsContainPath
argument_list|(
name|key
argument_list|,
name|parents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Path
argument_list|(
literal|"file:///user/hive/warehouse/src_2"
argument_list|)
expr_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPath
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPathWithNoSchema
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyIfParentsContainPath
argument_list|(
name|key
argument_list|,
name|parents
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|Path
argument_list|(
literal|"file:///user/hive/warehouse/src/data.txt"
argument_list|)
expr_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPath
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyIsPathWithInSubTree
argument_list|(
name|splitPathWithNoSchema
argument_list|,
name|key
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyIfParentsContainPath
argument_list|(
name|key
argument_list|,
name|parents
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIsPathWithInSubTree
parameter_list|(
name|Path
name|splitPath
parameter_list|,
name|Path
name|key
parameter_list|,
name|boolean
name|expected
parameter_list|)
block|{
name|boolean
name|result
init|=
name|FileUtils
operator|.
name|isPathWithinSubtree
argument_list|(
name|splitPath
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"splitPath="
operator|+
name|splitPath
operator|+
literal|", key="
operator|+
name|key
argument_list|,
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIfParentsContainPath
parameter_list|(
name|Path
name|key
parameter_list|,
name|Set
argument_list|<
name|Path
argument_list|>
name|parents
parameter_list|,
name|boolean
name|expected
parameter_list|)
block|{
name|boolean
name|result
init|=
name|parents
operator|.
name|contains
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"key="
operator|+
name|key
argument_list|,
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopyWithDistcp
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|copySrc
init|=
operator|new
name|Path
argument_list|(
literal|"copySrc"
argument_list|)
decl_stmt|;
name|Path
name|copyDst
init|=
operator|new
name|Path
argument_list|(
literal|"copyDst"
argument_list|)
decl_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|TestFileUtils
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"hdfs:///"
argument_list|)
argument_list|)
expr_stmt|;
name|ContentSummary
name|mockContentSummary
init|=
name|mock
argument_list|(
name|ContentSummary
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContentSummary
operator|.
name|getFileCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContentSummary
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|getContentSummary
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContentSummary
argument_list|)
expr_stmt|;
name|HadoopShims
name|shims
init|=
name|mock
argument_list|(
name|HadoopShims
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shims
operator|.
name|runDistCp
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|copySrc
argument_list|)
argument_list|,
name|copyDst
argument_list|,
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|copy
argument_list|(
name|mockFs
argument_list|,
name|copySrc
argument_list|,
name|mockFs
argument_list|,
name|copyDst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|,
name|shims
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|shims
argument_list|)
operator|.
name|runDistCp
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|copySrc
argument_list|)
argument_list|,
name|copyDst
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCopyWithDistCpAs
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|copySrc
init|=
operator|new
name|Path
argument_list|(
literal|"copySrc"
argument_list|)
decl_stmt|;
name|Path
name|copyDst
init|=
operator|new
name|Path
argument_list|(
literal|"copyDst"
argument_list|)
decl_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|TestFileUtils
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|copySrc
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|doAsUser
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_DISTCP_DOAS_USER
argument_list|)
decl_stmt|;
name|HadoopShims
name|shims
init|=
name|mock
argument_list|(
name|HadoopShims
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|shims
operator|.
name|runDistCpAs
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|copySrc
argument_list|)
argument_list|,
name|copyDst
argument_list|,
name|conf
argument_list|,
name|doAsUser
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|shims
operator|.
name|runDistCp
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|copySrc
argument_list|)
argument_list|,
name|copyDst
argument_list|,
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// doAs when asked
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FileUtils
operator|.
name|distCp
argument_list|(
name|fs
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|copySrc
argument_list|)
argument_list|,
name|copyDst
argument_list|,
literal|false
argument_list|,
name|doAsUser
argument_list|,
name|conf
argument_list|,
name|shims
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|shims
argument_list|)
operator|.
name|runDistCpAs
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|copySrc
argument_list|)
argument_list|,
name|copyDst
argument_list|,
name|conf
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
comment|// don't doAs when not asked
name|Assert
operator|.
name|assertFalse
argument_list|(
name|FileUtils
operator|.
name|distCp
argument_list|(
name|fs
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|copySrc
argument_list|)
argument_list|,
name|copyDst
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
name|shims
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|shims
argument_list|)
operator|.
name|runDistCp
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|copySrc
argument_list|)
argument_list|,
name|copyDst
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// When distcp is done with doAs, the delete should also be done as doAs. But in current code its broken. This
comment|// should be fixed. For now check is added to avoid wrong usage. So if doAs is set, delete source should be false.
try|try
block|{
name|FileUtils
operator|.
name|distCp
argument_list|(
name|fs
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|copySrc
argument_list|)
argument_list|,
name|copyDst
argument_list|,
literal|true
argument_list|,
name|doAsUser
argument_list|,
name|conf
argument_list|,
name|shims
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should throw IOException as doAs is called with delete source set to true"
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Distcp is called with doAsUser and delete source set as true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

