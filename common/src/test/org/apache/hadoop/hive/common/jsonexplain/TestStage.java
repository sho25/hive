begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|jsonexplain
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|jsonexplain
operator|.
name|tez
operator|.
name|TezJsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestStage
block|{
specifier|private
name|Stage
name|uut
decl_stmt|;
specifier|private
name|Stage
name|stageA
decl_stmt|;
specifier|private
name|Stage
name|stageB
decl_stmt|;
specifier|private
name|TezJsonParser
name|tezJsonParser
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|this
operator|.
name|tezJsonParser
operator|=
operator|new
name|TezJsonParser
argument_list|()
expr_stmt|;
name|this
operator|.
name|uut
operator|=
operator|new
name|Stage
argument_list|(
literal|"uut"
argument_list|,
name|tezJsonParser
argument_list|)
expr_stmt|;
name|this
operator|.
name|stageA
operator|=
operator|new
name|Stage
argument_list|(
literal|"stage-a"
argument_list|,
name|tezJsonParser
argument_list|)
expr_stmt|;
name|this
operator|.
name|stageB
operator|=
operator|new
name|Stage
argument_list|(
literal|"stage-b"
argument_list|,
name|tezJsonParser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddDependencyNonRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|children
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|children
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|stageA
argument_list|)
expr_stmt|;
name|children
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
name|stageB
argument_list|)
expr_stmt|;
name|String
name|jsonString
init|=
literal|"{\"DEPENDENT STAGES\":\"a,b\"}"
decl_stmt|;
name|JSONObject
name|names
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|uut
operator|.
name|addDependency
argument_list|(
name|names
argument_list|,
name|children
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|uut
operator|.
name|parentStages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stageA
argument_list|,
name|uut
operator|.
name|parentStages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stageB
argument_list|,
name|uut
operator|.
name|parentStages
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stageA
operator|.
name|childStages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uut
argument_list|,
name|stageA
operator|.
name|childStages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stageB
operator|.
name|childStages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uut
argument_list|,
name|stageB
operator|.
name|childStages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddDependencyRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|children
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|children
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|stageA
argument_list|)
expr_stmt|;
name|children
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
name|stageB
argument_list|)
expr_stmt|;
name|String
name|jsonString
init|=
literal|"{\"ROOT STAGE\":\"X\",\"DEPENDENT STAGES\":\"a,b\"}"
decl_stmt|;
name|JSONObject
name|names
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|uut
operator|.
name|addDependency
argument_list|(
name|names
argument_list|,
name|children
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|uut
operator|.
name|parentStages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stageA
operator|.
name|childStages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stageB
operator|.
name|childStages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractVertexNonTez
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsonString
init|=
literal|"{\"OperatorName\":{\"a\":\"A\",\"b\":\"B\"},"
operator|+
literal|"\"attr1\":\"ATTR1\"}"
decl_stmt|;
name|JSONObject
name|object
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|uut
operator|.
name|extractVertex
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OperatorName"
argument_list|,
name|uut
operator|.
name|op
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uut
operator|.
name|attrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ATTR1"
argument_list|,
name|uut
operator|.
name|attrs
operator|.
name|get
argument_list|(
literal|"attr1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractVertexTezNoEdges
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsonString
init|=
literal|"{\"Tez\":{\"a\":\"A\",\"Vertices:\":{\"v1\":{}}}}"
decl_stmt|;
name|JSONObject
name|object
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|uut
operator|.
name|extractVertex
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uut
operator|.
name|vertexs
operator|.
name|containsKey
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractVertexTezWithOneEdge
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsonString
init|=
literal|"{\"Tez\":{\"a\":\"A\","
operator|+
literal|"\"Vertices:\":{\"v1\":{},\"v2\":{}},"
operator|+
literal|"\"Edges:\":{\"v2\":{\"parent\":\"v1\",\"type\":\"TYPE\"}}}}"
decl_stmt|;
name|JSONObject
name|object
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|uut
operator|.
name|extractVertex
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uut
operator|.
name|vertexs
operator|.
name|containsKey
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uut
operator|.
name|vertexs
operator|.
name|containsKey
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|get
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|parentConnections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|get
argument_list|(
literal|"v2"
argument_list|)
operator|.
name|parentConnections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|get
argument_list|(
literal|"v2"
argument_list|)
operator|.
name|parentConnections
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|from
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TYPE"
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|get
argument_list|(
literal|"v2"
argument_list|)
operator|.
name|parentConnections
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractVertexTezWithOneToManyEdge
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsonString
init|=
literal|"{\"Tez\":{\"a\":\"A\","
operator|+
literal|"\"Vertices:\":{\"v1\":{},\"v2\":{},\"v3\":{}},"
operator|+
literal|"\"Edges:\":{\"v1\":[{\"parent\":\"v2\",\"type\":\"TYPE1\"},"
operator|+
literal|"{\"parent\":\"v3\",\"type\":\"TYPE2\"}]}}}"
decl_stmt|;
name|JSONObject
name|object
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|uut
operator|.
name|extractVertex
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uut
operator|.
name|vertexs
operator|.
name|containsKey
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uut
operator|.
name|vertexs
operator|.
name|containsKey
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|uut
operator|.
name|vertexs
operator|.
name|containsKey
argument_list|(
literal|"v3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|get
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|parentConnections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|get
argument_list|(
literal|"v2"
argument_list|)
operator|.
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|get
argument_list|(
literal|"v3"
argument_list|)
operator|.
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|get
argument_list|(
literal|"v2"
argument_list|)
operator|.
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|get
argument_list|(
literal|"v3"
argument_list|)
operator|.
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TYPE1"
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|get
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|parentConnections
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TYPE2"
argument_list|,
name|uut
operator|.
name|vertexs
operator|.
name|get
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|parentConnections
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractOpEmptyObject
parameter_list|()
throws|throws
name|Exception
block|{
name|JSONObject
name|object
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|Op
name|result
init|=
name|uut
operator|.
name|extractOp
argument_list|(
literal|"op-name"
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"op-name"
argument_list|,
name|result
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|attrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|vertex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractOpSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsonString
init|=
literal|"{\"a\":\"A\",\"b\":\"B\"}"
decl_stmt|;
name|JSONObject
name|object
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|Op
name|result
init|=
name|uut
operator|.
name|extractOp
argument_list|(
literal|"op-name"
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"op-name"
argument_list|,
name|result
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|attrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|vertex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtract
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsonString
init|=
literal|"{\"b\":{\"b2\":\"B2\",\"b1\":\"B1\"},"
operator|+
literal|"\"Processor Tree:\":{\"a1\":{\"t1\":\"T1\"}}}"
decl_stmt|;
name|JSONObject
name|object
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|Op
name|result
init|=
name|uut
operator|.
name|extractOp
argument_list|(
literal|"op-name"
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"op-name"
argument_list|,
name|result
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|attrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|attrs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"B1"
argument_list|,
name|result
operator|.
name|attrs
operator|.
name|get
argument_list|(
literal|"b1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B2"
argument_list|,
name|result
operator|.
name|attrs
operator|.
name|get
argument_list|(
literal|"b2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|vertex
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

