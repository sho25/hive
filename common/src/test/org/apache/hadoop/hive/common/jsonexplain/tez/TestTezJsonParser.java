begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|jsonexplain
operator|.
name|tez
package|;
end_package

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TestTezJsonParser
block|{
specifier|private
name|TezJsonParser
name|uut
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|uut
operator|=
operator|new
name|TezJsonParser
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractStagesAndPlans
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jsonString
init|=
literal|"{\"STAGE DEPENDENCIES\":{\"s1\":{\"ROOT STAGE\":\"\"},"
operator|+
literal|"\"s2\":{\"DEPENDENT STAGES\":\"s1\"}},\"STAGE PLANS\":{}}"
decl_stmt|;
name|JSONObject
name|input
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|uut
operator|.
name|extractStagesAndPlans
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|uut
operator|.
name|stages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uut
operator|.
name|stages
operator|.
name|get
argument_list|(
literal|"s1"
argument_list|)
operator|.
name|childStages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s2"
argument_list|,
name|uut
operator|.
name|stages
operator|.
name|get
argument_list|(
literal|"s1"
argument_list|)
operator|.
name|childStages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|internalName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|uut
operator|.
name|stages
operator|.
name|get
argument_list|(
literal|"s2"
argument_list|)
operator|.
name|childStages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|uut
operator|.
name|stages
operator|.
name|get
argument_list|(
literal|"s1"
argument_list|)
operator|.
name|parentStages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uut
operator|.
name|stages
operator|.
name|get
argument_list|(
literal|"s2"
argument_list|)
operator|.
name|parentStages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"s1"
argument_list|,
name|uut
operator|.
name|stages
operator|.
name|get
argument_list|(
literal|"s2"
argument_list|)
operator|.
name|parentStages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|internalName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

