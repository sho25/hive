begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ndv
operator|.
name|fm
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javolution
operator|.
name|util
operator|.
name|FastBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ndv
operator|.
name|NumDistinctValueEstimatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestFMSketchSerialization
block|{
specifier|private
name|FastBitSet
index|[]
name|deserialize
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|numBitVectors
parameter_list|)
block|{
name|FastBitSet
index|[]
name|b
init|=
operator|new
name|FastBitSet
index|[
name|numBitVectors
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numBitVectors
condition|;
name|j
operator|++
control|)
block|{
name|b
index|[
name|j
index|]
operator|=
operator|new
name|FastBitSet
argument_list|(
name|FMSketch
operator|.
name|BIT_VECTOR_SIZE
argument_list|)
expr_stmt|;
name|b
index|[
name|j
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|int
name|vectorIndex
init|=
literal|0
decl_stmt|;
comment|/*      * Parse input string to obtain the indexes that are set in the bitvector.      * When a toString() is called on a FastBitSet object to serialize it, the      * serialization adds { and } to the beginning and end of the return String.      * Skip "{", "}", ",", " " in the input string.      */
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|;
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|i
operator|=
name|i
operator|+
literal|1
expr_stmt|;
comment|// Move on to the next bit vector
if|if
condition|(
name|c
operator|==
literal|'}'
condition|)
block|{
name|vectorIndex
operator|=
name|vectorIndex
operator|+
literal|1
expr_stmt|;
block|}
comment|// Encountered a numeric value; Extract out the entire number
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
name|String
name|t
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
name|t
operator|=
name|t
operator|+
name|c
expr_stmt|;
name|c
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|+
literal|1
expr_stmt|;
while|while
condition|(
name|c
operator|!=
literal|','
operator|&&
name|c
operator|!=
literal|'}'
condition|)
block|{
name|t
operator|=
name|t
operator|+
name|c
expr_stmt|;
name|c
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|+
literal|1
expr_stmt|;
block|}
name|int
name|bitIndex
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|t
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|bitIndex
operator|>=
literal|0
operator|)
assert|;
assert|assert
operator|(
name|vectorIndex
operator|<
name|numBitVectors
operator|)
assert|;
name|b
index|[
name|vectorIndex
index|]
operator|.
name|set
argument_list|(
name|bitIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'}'
condition|)
block|{
name|vectorIndex
operator|=
name|vectorIndex
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
return|return
name|b
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerDe
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|bitVectors
init|=
literal|"{0, 4, 5, 7}{0, 1}{0, 1, 2}{0, 1, 4}{0}{0, 2}{0, 3}{0, 2, 3, 4}{0, 1, 4}{0, 1}{0}{0, 1, 3, 8}{0, 2}{0, 2}{0, 9}{0, 1, 4}"
decl_stmt|;
name|FastBitSet
index|[]
name|fastBitSet
init|=
name|deserialize
argument_list|(
name|bitVectors
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|FMSketch
name|sketch
init|=
operator|new
name|FMSketch
argument_list|(
literal|16
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|sketch
operator|.
name|setBitVector
argument_list|(
name|fastBitSet
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|sketch
operator|.
name|estimateNumDistinctValues
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|sketch
operator|.
name|serialize
argument_list|()
decl_stmt|;
name|FMSketch
name|newSketch
init|=
operator|(
name|FMSketch
operator|)
name|NumDistinctValueEstimatorFactory
operator|.
name|getNumDistinctValueEstimator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|sketch
operator|.
name|equals
argument_list|(
name|newSketch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newSketch
operator|.
name|estimateNumDistinctValues
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newSketch
operator|.
name|serialize
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

