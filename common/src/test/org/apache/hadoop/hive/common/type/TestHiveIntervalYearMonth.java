begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveIntervalYearMonth
block|{
annotation|@
name|Rule
specifier|public
name|ConcurrentRule
name|concurrentRule
init|=
operator|new
name|ConcurrentRule
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|RepeatingRule
name|repeatingRule
init|=
operator|new
name|RepeatingRule
argument_list|()
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testGetters
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveIntervalYearMonth
name|i1
init|=
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|i1
operator|.
name|getYears
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|i1
operator|.
name|getMonths
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testCompare
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveIntervalYearMonth
name|i1
init|=
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|HiveIntervalYearMonth
name|i2
init|=
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|HiveIntervalYearMonth
name|i3
init|=
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// compareTo()
name|assertEquals
argument_list|(
name|i1
operator|+
literal|" compareTo "
operator|+
name|i1
argument_list|,
literal|0
argument_list|,
name|i1
operator|.
name|compareTo
argument_list|(
name|i1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i1
operator|+
literal|" compareTo "
operator|+
name|i2
argument_list|,
literal|0
argument_list|,
name|i1
operator|.
name|compareTo
argument_list|(
name|i2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i2
operator|+
literal|" compareTo "
operator|+
name|i1
argument_list|,
literal|0
argument_list|,
name|i2
operator|.
name|compareTo
argument_list|(
name|i1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i3
operator|+
literal|" compareTo "
operator|+
name|i3
argument_list|,
literal|0
argument_list|,
name|i3
operator|.
name|compareTo
argument_list|(
name|i3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|+
literal|" compareTo "
operator|+
name|i3
argument_list|,
literal|0
operator|>
name|i1
operator|.
name|compareTo
argument_list|(
name|i3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i3
operator|+
literal|" compareTo "
operator|+
name|i1
argument_list|,
literal|0
operator|<
name|i3
operator|.
name|compareTo
argument_list|(
name|i1
argument_list|)
argument_list|)
expr_stmt|;
comment|// equals()
name|assertTrue
argument_list|(
name|i1
operator|+
literal|" equals "
operator|+
name|i1
argument_list|,
name|i1
operator|.
name|equals
argument_list|(
name|i1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i1
operator|+
literal|" equals "
operator|+
name|i2
argument_list|,
name|i1
operator|.
name|equals
argument_list|(
name|i2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i1
operator|+
literal|" equals "
operator|+
name|i3
argument_list|,
name|i1
operator|.
name|equals
argument_list|(
name|i3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|i3
operator|+
literal|" equals "
operator|+
name|i1
argument_list|,
name|i3
operator|.
name|equals
argument_list|(
name|i1
argument_list|)
argument_list|)
expr_stmt|;
comment|// hashCode()
name|assertEquals
argument_list|(
name|i1
operator|+
literal|" hashCode "
operator|+
name|i1
argument_list|,
name|i1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|i1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i1
operator|+
literal|" hashCode "
operator|+
name|i1
argument_list|,
name|i1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|i2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testValueOf
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveIntervalYearMonth
name|i1
init|=
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"1-2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|i1
operator|.
name|getYears
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|i1
operator|.
name|getMonths
argument_list|()
argument_list|)
expr_stmt|;
name|HiveIntervalYearMonth
name|i2
init|=
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"+8-9"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|i2
operator|.
name|getYears
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|i2
operator|.
name|getMonths
argument_list|()
argument_list|)
expr_stmt|;
name|HiveIntervalYearMonth
name|i3
init|=
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"-10-11"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|10
argument_list|,
name|i3
operator|.
name|getYears
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|11
argument_list|,
name|i3
operator|.
name|getMonths
argument_list|()
argument_list|)
expr_stmt|;
name|HiveIntervalYearMonth
name|i4
init|=
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"-0-0"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|i4
operator|.
name|getYears
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|i4
operator|.
name|getMonths
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalid values
name|String
index|[]
name|invalidValues
init|=
block|{
literal|null
block|,
literal|"abc"
block|,
literal|"0-12"
block|,
literal|"0 1:2:3"
block|}
decl_stmt|;
for|for
control|(
name|String
name|invalidValue
range|:
name|invalidValues
control|)
block|{
name|boolean
name|caughtException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|invalidValue
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|err
parameter_list|)
block|{
name|caughtException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected exception"
argument_list|,
name|caughtException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"0-0"
argument_list|,
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"0-0"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1-2"
argument_list|,
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"1-2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1-2"
argument_list|,
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"-1-2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1-0"
argument_list|,
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"1-0"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1-0"
argument_list|,
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"-1-0"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0-0"
argument_list|,
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"-0-0"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testNormalize
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveIntervalYearMonth
name|i1
init|=
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|1
argument_list|,
operator|-
literal|6
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"0-6"
argument_list|)
argument_list|,
name|i1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|i1
operator|.
name|getYears
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|i1
operator|.
name|getMonths
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"0-0"
argument_list|)
argument_list|,
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"0-0"
argument_list|)
argument_list|,
operator|new
name|HiveIntervalYearMonth
argument_list|(
operator|-
literal|1
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"0-4"
argument_list|)
argument_list|,
operator|new
name|HiveIntervalYearMonth
argument_list|(
operator|-
literal|1
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"0-11"
argument_list|)
argument_list|,
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"-0-11"
argument_list|)
argument_list|,
operator|new
name|HiveIntervalYearMonth
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// -5 years + 121 months = -5 years + 10 years + 1 month = 5 years 1 month
name|assertEquals
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"5-1"
argument_list|)
argument_list|,
operator|new
name|HiveIntervalYearMonth
argument_list|(
operator|-
literal|5
argument_list|,
literal|121
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

