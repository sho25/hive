begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestHiveConfUtil  *  */
end_comment

begin_class
specifier|public
class|class
name|TestHiveConfUtil
block|{
specifier|private
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dummyBoolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dummy"
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"dummy2"
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"3dummy"
argument_list|,
literal|"aaa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHideNonStringVar
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"dummyBoolean"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"dummyBoolean"
argument_list|)
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|stripConfigurations
argument_list|(
name|conf
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"dummyBoolean"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"dummyBoolean"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"dummyBoolean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHideStringVar
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|stripConfigurations
argument_list|(
name|conf
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHideMultipleVars
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"dummy2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"3dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|HiveConfUtil
operator|.
name|stripConfigurations
argument_list|(
name|conf
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"dummy2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"3dummy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

