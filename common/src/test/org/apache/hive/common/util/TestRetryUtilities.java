begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|RetryUtilities
operator|.
name|ExponentiallyDecayingBatchWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|RetryUtilities
operator|.
name|RetryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestRetryUtilities
block|{
specifier|private
class|class
name|DummyExponentiallyDecayingBatchWork
extends|extends
name|ExponentiallyDecayingBatchWork
argument_list|<
name|Void
argument_list|>
block|{
specifier|public
name|DummyExponentiallyDecayingBatchWork
parameter_list|(
name|int
name|batchSize
parameter_list|,
name|int
name|reducingFactor
parameter_list|,
name|int
name|throwException
parameter_list|)
block|{
name|super
argument_list|(
name|batchSize
argument_list|,
name|reducingFactor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|exceptionCount
operator|=
name|throwException
expr_stmt|;
block|}
specifier|public
name|DummyExponentiallyDecayingBatchWork
parameter_list|(
name|int
name|batchSize
parameter_list|,
name|int
name|reducingFactor
parameter_list|,
name|int
name|throwException
parameter_list|,
name|int
name|maxRetries
parameter_list|)
block|{
name|super
argument_list|(
name|batchSize
argument_list|,
name|reducingFactor
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
name|this
operator|.
name|exceptionCount
operator|=
name|throwException
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|batchSizes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|exceptionCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|execute
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
name|batchSizes
operator|.
name|add
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|exceptionCount
operator|>
literal|0
condition|)
block|{
name|exceptionCount
operator|--
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Dummy exception"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|batchSizes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
index|[]
name|getBatchSizes
parameter_list|()
block|{
name|int
index|[]
name|ret
init|=
operator|new
name|int
index|[
name|batchSizes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|b
range|:
name|batchSizes
control|)
block|{
name|ret
index|[
name|i
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testZeroBatchSize
parameter_list|()
block|{
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNegativeBatchSize
parameter_list|()
block|{
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testZeroDecayingFactor
parameter_list|()
block|{
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOneDecayingFactor
parameter_list|()
block|{
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNegativeMaxRetries
parameter_list|()
block|{
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNumberOfAttempts
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test perfectly divisible batchsize and decaying factor
name|DummyExponentiallyDecayingBatchWork
name|dummy
init|=
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|dummy
operator|.
name|run
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of executions of execute method"
argument_list|,
literal|1
argument_list|,
name|dummy
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// there were no exception. Batchsize doesn't change until there is an exception
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|10
block|}
argument_list|,
name|dummy
operator|.
name|getBatchSizes
argument_list|()
argument_list|)
expr_stmt|;
comment|// test batchsize is not divisible by decaying factor
name|dummy
operator|=
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|11
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dummy
operator|.
name|run
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of executions of execute method"
argument_list|,
literal|1
argument_list|,
name|dummy
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// there were no exception. Batchsize doesn't change until there is an exception
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|11
block|}
argument_list|,
name|dummy
operator|.
name|getBatchSizes
argument_list|()
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|11
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// batches will be sized 11,3
name|dummy
operator|.
name|run
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of executions of execute method"
argument_list|,
literal|2
argument_list|,
name|dummy
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|11
block|,
literal|3
block|}
argument_list|,
name|dummy
operator|.
name|getBatchSizes
argument_list|()
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|11
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// batches will be sized 11,3,1
name|dummy
operator|.
name|run
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of executions of execute method"
argument_list|,
literal|3
argument_list|,
name|dummy
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|11
block|,
literal|3
block|,
literal|1
block|}
argument_list|,
name|dummy
operator|.
name|getBatchSizes
argument_list|()
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|12
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// batches will be sized 12,4,1
name|dummy
operator|.
name|run
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of executions of execute method"
argument_list|,
literal|3
argument_list|,
name|dummy
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|12
block|,
literal|4
block|,
literal|1
block|}
argument_list|,
name|dummy
operator|.
name|getBatchSizes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testZeroMaxRetriesValue
parameter_list|()
throws|throws
name|Exception
block|{
name|DummyExponentiallyDecayingBatchWork
name|dummy
init|=
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|dummy
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// batches will be sized 10, 5, 2, 1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of executions of execute method"
argument_list|,
literal|4
argument_list|,
name|dummy
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|5
block|,
literal|2
block|,
literal|1
block|}
argument_list|,
name|dummy
operator|.
name|getBatchSizes
argument_list|()
argument_list|)
expr_stmt|;
name|dummy
operator|=
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|17
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// batches will be sized 17, 8, 4, 2, 1
name|dummy
operator|.
name|run
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of executions of execute method"
argument_list|,
literal|5
argument_list|,
name|dummy
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
operator|new
name|int
index|[]
block|{
literal|17
block|,
literal|8
block|,
literal|4
block|,
literal|2
block|,
literal|1
block|}
argument_list|,
name|dummy
operator|.
name|getBatchSizes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RetryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRetriesExhausted
parameter_list|()
throws|throws
name|Exception
block|{
comment|// attempts at execute will be made using batchsizes 11, 3, 1, throws retry exception
name|DummyExponentiallyDecayingBatchWork
name|dummy
init|=
operator|new
name|DummyExponentiallyDecayingBatchWork
argument_list|(
literal|11
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|dummy
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

