begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|HashFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|hash
operator|.
name|Hashing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Tests for Murmur3 variants.  */
end_comment

begin_class
specifier|public
class|class
name|TestMurmur3
block|{
annotation|@
name|Test
specifier|public
name|void
name|testHashCodesM3_32_string
parameter_list|()
block|{
name|String
name|key
init|=
literal|"test"
decl_stmt|;
name|int
name|seed
init|=
literal|123
decl_stmt|;
name|HashFunction
name|hf
init|=
name|Hashing
operator|.
name|murmur3_32
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|int
name|hc1
init|=
name|hf
operator|.
name|hashBytes
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|asInt
argument_list|()
decl_stmt|;
name|int
name|hc2
init|=
name|Murmur3
operator|.
name|hash32
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hc1
argument_list|,
name|hc2
argument_list|)
expr_stmt|;
name|key
operator|=
literal|"testkey"
expr_stmt|;
name|hc1
operator|=
name|hf
operator|.
name|hashBytes
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|asInt
argument_list|()
expr_stmt|;
name|hc2
operator|=
name|Murmur3
operator|.
name|hash32
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hc1
argument_list|,
name|hc2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodesM3_32_ints
parameter_list|()
block|{
name|int
name|seed
init|=
literal|123
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|HashFunction
name|hf
init|=
name|Hashing
operator|.
name|murmur3_32
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|val
init|=
name|rand
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|val
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
name|int
name|hc1
init|=
name|hf
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
operator|.
name|asInt
argument_list|()
decl_stmt|;
name|int
name|hc2
init|=
name|Murmur3
operator|.
name|hash32
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hc1
argument_list|,
name|hc2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodesM3_32_longs
parameter_list|()
block|{
name|int
name|seed
init|=
literal|123
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|HashFunction
name|hf
init|=
name|Hashing
operator|.
name|murmur3_32
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|long
name|val
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
operator|.
name|putLong
argument_list|(
name|val
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
name|int
name|hc1
init|=
name|hf
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
operator|.
name|asInt
argument_list|()
decl_stmt|;
name|int
name|hc2
init|=
name|Murmur3
operator|.
name|hash32
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hc1
argument_list|,
name|hc2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodesM3_32_double
parameter_list|()
block|{
name|int
name|seed
init|=
literal|123
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|HashFunction
name|hf
init|=
name|Hashing
operator|.
name|murmur3_32
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|double
name|val
init|=
name|rand
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
operator|.
name|putDouble
argument_list|(
name|val
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
name|int
name|hc1
init|=
name|hf
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
operator|.
name|asInt
argument_list|()
decl_stmt|;
name|int
name|hc2
init|=
name|Murmur3
operator|.
name|hash32
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hc1
argument_list|,
name|hc2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodesM3_128_string
parameter_list|()
block|{
name|String
name|key
init|=
literal|"test"
decl_stmt|;
name|int
name|seed
init|=
literal|123
decl_stmt|;
name|HashFunction
name|hf
init|=
name|Hashing
operator|.
name|murmur3_128
argument_list|(
name|seed
argument_list|)
decl_stmt|;
comment|// guava stores the hashcodes in little endian order
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|16
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
decl_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|hf
operator|.
name|hashBytes
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|asBytes
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|long
name|gl1
init|=
name|buf
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|gl2
init|=
name|buf
operator|.
name|getLong
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|long
index|[]
name|hc
init|=
name|Murmur3
operator|.
name|hash128
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|long
name|m1
init|=
name|hc
index|[
literal|0
index|]
decl_stmt|;
name|long
name|m2
init|=
name|hc
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|gl1
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gl2
argument_list|,
name|m2
argument_list|)
expr_stmt|;
name|key
operator|=
literal|"testkey128_testkey128"
expr_stmt|;
name|buf
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|16
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|hf
operator|.
name|hashBytes
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|asBytes
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|gl1
operator|=
name|buf
operator|.
name|getLong
argument_list|()
expr_stmt|;
name|gl2
operator|=
name|buf
operator|.
name|getLong
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|hc
operator|=
name|Murmur3
operator|.
name|hash128
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|,
name|seed
argument_list|)
expr_stmt|;
name|m1
operator|=
name|hc
index|[
literal|0
index|]
expr_stmt|;
name|m2
operator|=
name|hc
index|[
literal|1
index|]
expr_stmt|;
name|assertEquals
argument_list|(
name|gl1
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gl2
argument_list|,
name|m2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodesM3_128_ints
parameter_list|()
block|{
name|int
name|seed
init|=
literal|123
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|HashFunction
name|hf
init|=
name|Hashing
operator|.
name|murmur3_128
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|val
init|=
name|rand
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
operator|.
name|putInt
argument_list|(
name|val
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
comment|// guava stores the hashcodes in little endian order
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|16
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
decl_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|hf
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
operator|.
name|asBytes
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|long
name|gl1
init|=
name|buf
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|gl2
init|=
name|buf
operator|.
name|getLong
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|long
index|[]
name|hc
init|=
name|Murmur3
operator|.
name|hash128
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|long
name|m1
init|=
name|hc
index|[
literal|0
index|]
decl_stmt|;
name|long
name|m2
init|=
name|hc
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|gl1
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gl2
argument_list|,
name|m2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodesM3_128_longs
parameter_list|()
block|{
name|int
name|seed
init|=
literal|123
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|HashFunction
name|hf
init|=
name|Hashing
operator|.
name|murmur3_128
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|long
name|val
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
operator|.
name|putLong
argument_list|(
name|val
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
comment|// guava stores the hashcodes in little endian order
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|16
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
decl_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|hf
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
operator|.
name|asBytes
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|long
name|gl1
init|=
name|buf
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|gl2
init|=
name|buf
operator|.
name|getLong
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|long
index|[]
name|hc
init|=
name|Murmur3
operator|.
name|hash128
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|long
name|m1
init|=
name|hc
index|[
literal|0
index|]
decl_stmt|;
name|long
name|m2
init|=
name|hc
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|gl1
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gl2
argument_list|,
name|m2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCodesM3_128_double
parameter_list|()
block|{
name|int
name|seed
init|=
literal|123
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|HashFunction
name|hf
init|=
name|Hashing
operator|.
name|murmur3_128
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|double
name|val
init|=
name|rand
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
operator|.
name|putDouble
argument_list|(
name|val
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
comment|// guava stores the hashcodes in little endian order
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|16
argument_list|)
operator|.
name|order
argument_list|(
name|ByteOrder
operator|.
name|LITTLE_ENDIAN
argument_list|)
decl_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|hf
operator|.
name|hashBytes
argument_list|(
name|data
argument_list|)
operator|.
name|asBytes
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|long
name|gl1
init|=
name|buf
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|long
name|gl2
init|=
name|buf
operator|.
name|getLong
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|long
index|[]
name|hc
init|=
name|Murmur3
operator|.
name|hash128
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
argument_list|,
name|seed
argument_list|)
decl_stmt|;
name|long
name|m1
init|=
name|hc
index|[
literal|0
index|]
decl_stmt|;
name|long
name|m2
init|=
name|hc
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|gl1
argument_list|,
name|m1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|gl2
argument_list|,
name|m2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

