begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test suite for parsing timestamps.  */
end_comment

begin_class
specifier|public
class|class
name|TestTimestampParser
block|{
comment|/**    * No timestamp patterns, should default to normal timestamp format.    *    * @see Timestamp#valueOf(String)    */
annotation|@
name|Test
specifier|public
name|void
name|testDefault
parameter_list|()
block|{
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1945-12-31 23:59:59.0"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31 23:59:59.0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1945-12-31 23:59:59.1234"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31 23:59:59.1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01 00:00:00"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1970-01-01 00:00:00"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1945-12-31T23:59:59"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31 23:59:59"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDefaultInvalid
parameter_list|()
block|{
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|()
decl_stmt|;
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"12345"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPattern1
parameter_list|()
block|{
comment|// Timestamp pattern matching expects fractional seconds length to match
comment|// the number of 'S' in the pattern. So if you want to match .1, .12, .123,
comment|// you need 3 different patterns with .S, .SS, .SSS
comment|// ISO-8601 timestamps
specifier|final
name|String
index|[]
name|patterns
init|=
block|{
literal|"yyyy-MM-dd'T'HH:mm:ss"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.S"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.SS"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.SSS"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSS"
block|}
decl_stmt|;
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|(
name|patterns
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1945-12-31 23:59:59.0"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31T23:59:59.0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2001-01-01 00:00:00.100"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"2001-01-01T00:00:00.100"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2001-01-01 00:00:00.001"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"2001-01-01T00:00:00.001"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1945-12-31T23:59:59.123"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31T23:59:59.123"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1945-12-31T23:59:59.123"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31T23:59:59.1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01 00:00:00"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1970-01-01T00:00:00"
argument_list|)
argument_list|)
expr_stmt|;
comment|/** Default timestamp format still works? */
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1945-12-31 23:59:59.1234"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31 23:59:59.1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1945-12-31 23:59:59.12345"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31T23:59:59.12345"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPatternInvalid1
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|patterns
init|=
block|{
literal|"yyyy-MM-dd'T'HH:mm:ss"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.S"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.SS"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.SSS"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSS"
block|}
decl_stmt|;
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|(
name|patterns
argument_list|)
decl_stmt|;
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31-23:59:59"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPatternInvalid2
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|patterns
init|=
block|{
literal|"yyyy-MM-dd'T'HH:mm:ss"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.S"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.SS"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.SSS"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss.SSSS"
block|}
decl_stmt|;
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|(
name|patterns
argument_list|)
decl_stmt|;
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"12345"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMillisParser
parameter_list|()
block|{
comment|// Also try other patterns
specifier|final
name|String
index|[]
name|patterns
init|=
block|{
literal|"millis"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss"
block|}
decl_stmt|;
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|(
name|patterns
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
operator|-
literal|1000000L
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"-1000000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
literal|1420509274123L
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1420509274123"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
literal|1420509274123L
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1420509274123.456789"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMillisParserInvalid1
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|patterns
init|=
block|{
literal|"millis"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss"
block|}
decl_stmt|;
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|(
name|patterns
argument_list|)
decl_stmt|;
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1420509274123-"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMillisParserInvalid2
parameter_list|()
block|{
comment|// Also try other patterns
specifier|final
name|String
index|[]
name|patterns
init|=
block|{
literal|"millis"
block|,
literal|"yyyy-MM-dd'T'HH:mm:ss"
block|}
decl_stmt|;
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|(
name|patterns
argument_list|)
decl_stmt|;
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31-23:59:59"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for pattern that does not contain all date fields.    */
annotation|@
name|Test
specifier|public
name|void
name|testPatternShort
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|patterns
init|=
block|{
literal|"MM:dd:ss"
block|,
literal|"HH:mm"
block|}
decl_stmt|;
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|(
name|patterns
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1970-01-01 05:06:00"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"05:06"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1970-05-06 00:00:07"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"05:06:07"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1945-12-31 23:59:59"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31T23:59:59"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPatternTimeZone
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|patterns
init|=
block|{
literal|"yyyy-MM-dd'T'HH:mm:ssX"
block|}
decl_stmt|;
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|(
name|patterns
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1945-12-31 23:59:59"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31T23:59:59Z"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPatternISO8601
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|patterns
init|=
block|{
literal|"iso8601"
block|}
decl_stmt|;
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|(
name|patterns
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"1945-12-31 23:59:59"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"1945-12-31T23:59:59Z"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPatternRFC1123
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|patterns
init|=
block|{
literal|"rfc1123"
block|}
decl_stmt|;
specifier|final
name|TimestampParser
name|tsp
init|=
operator|new
name|TimestampParser
argument_list|(
name|patterns
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2008-06-03 11:05:30"
argument_list|)
argument_list|,
name|tsp
operator|.
name|parseTimestamp
argument_list|(
literal|"Tue, 3 Jun 2008 11:05:30 GMT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

