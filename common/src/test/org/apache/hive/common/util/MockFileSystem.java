begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_class
specifier|public
class|class
name|MockFileSystem
extends|extends
name|FileSystem
block|{
specifier|final
name|List
argument_list|<
name|MockFile
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|MockFile
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|MockFile
argument_list|,
name|FileStatus
argument_list|>
name|fileStatusMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|workingDir
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
comment|// statics for when the mock fs is created via FileSystem.get
specifier|private
specifier|static
name|String
name|blockedUgi
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|List
argument_list|<
name|MockFile
argument_list|>
name|globalFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|MockFile
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Statistics
name|statistics
decl_stmt|;
specifier|public
name|boolean
name|allowDelete
init|=
literal|false
decl_stmt|;
specifier|public
name|MockFileSystem
parameter_list|()
block|{
comment|// empty
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|statistics
operator|=
name|getStatistics
argument_list|(
literal|"mock"
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MockFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|MockFile
modifier|...
name|files
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|files
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|statistics
operator|=
name|getStatistics
argument_list|(
literal|"mock"
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setBlockedUgi
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|blockedUgi
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|files
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
literal|"mock:///"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"huh?"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
comment|// increments file modification time
specifier|public
name|void
name|touch
parameter_list|(
name|MockFile
name|file
parameter_list|)
block|{
if|if
condition|(
name|fileStatusMap
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|FileStatus
name|fileStatus
init|=
name|fileStatusMap
operator|.
name|get
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatusNew
init|=
operator|new
name|FileStatus
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getReplication
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getModificationTime
argument_list|()
operator|+
literal|1
argument_list|,
name|fileStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getPermission
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getOwner
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getGroup
argument_list|()
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|fileStatusMap
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|fileStatusNew
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
class|class
name|MockAccessDenied
extends|extends
name|IOException
block|{   }
annotation|@
name|Override
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|MockInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File not found: "
operator|+
name|path
argument_list|)
throw|;
block|}
specifier|public
name|MockFile
name|findFile
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
for|for
control|(
name|MockFile
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|path
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|file
return|;
block|}
block|}
for|for
control|(
name|MockFile
name|file
range|:
name|globalFiles
control|)
block|{
if|if
condition|(
name|file
operator|.
name|path
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|file
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|checkAccess
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|blockedUgi
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
operator|!
name|blockedUgi
operator|.
name|equals
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
condition|)
return|return;
throw|throw
operator|new
name|MockAccessDenied
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|fsPermission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|MockFile
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|blockSize
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MockOutputStream
argument_list|(
name|file
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
return|return
name|create
argument_list|(
name|path
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
literal|true
argument_list|,
name|bufferSize
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|256
operator|*
literal|1024
argument_list|,
name|progressable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|path
parameter_list|,
name|Path
name|path2
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|isRecursive
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
return|return
name|allowDelete
operator|&&
name|isRecursive
operator|&&
name|deleteMatchingFiles
argument_list|(
name|files
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
argument_list|()
block|{
specifier|private
name|Iterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|iterator
init|=
name|listLocatedFileStatuses
argument_list|(
name|f
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|LocatedFileStatus
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|List
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedFileStatuses
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LocatedFileStatus
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|pathname
init|=
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|pathnameAsDir
init|=
name|pathname
operator|+
literal|"/"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dirs
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|createLocatedStatus
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|findMatchingLocatedFiles
argument_list|(
name|files
argument_list|,
name|pathnameAsDir
argument_list|,
name|dirs
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|findMatchingLocatedFiles
argument_list|(
name|globalFiles
argument_list|,
name|pathnameAsDir
argument_list|,
name|dirs
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// for each directory add it once
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|createLocatedDirectory
argument_list|(
operator|new
name|MockPath
argument_list|(
name|this
argument_list|,
name|pathnameAsDir
operator|+
name|dir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|pathname
init|=
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|pathnameAsDir
init|=
name|pathname
operator|+
literal|"/"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dirs
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
name|createStatus
argument_list|(
name|file
argument_list|)
block|}
return|;
block|}
name|findMatchingFiles
argument_list|(
name|files
argument_list|,
name|pathnameAsDir
argument_list|,
name|dirs
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|findMatchingFiles
argument_list|(
name|globalFiles
argument_list|,
name|pathnameAsDir
argument_list|,
name|dirs
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// for each directory add it once
for|for
control|(
name|String
name|dir
range|:
name|dirs
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|createDirectory
argument_list|(
operator|new
name|MockPath
argument_list|(
name|this
argument_list|,
name|pathnameAsDir
operator|+
name|dir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|findMatchingFiles
parameter_list|(
name|List
argument_list|<
name|MockFile
argument_list|>
name|files
parameter_list|,
name|String
name|pathnameAsDir
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|dirs
parameter_list|,
name|List
argument_list|<
name|FileStatus
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|MockFile
name|file
range|:
name|files
control|)
block|{
name|String
name|filename
init|=
name|file
operator|.
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
name|pathnameAsDir
argument_list|)
condition|)
block|{
name|String
name|tail
init|=
name|filename
operator|.
name|substring
argument_list|(
name|pathnameAsDir
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nextSlash
init|=
name|tail
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextSlash
operator|>
literal|0
condition|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|tail
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nextSlash
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|createStatus
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|deleteMatchingFiles
parameter_list|(
name|List
argument_list|<
name|MockFile
argument_list|>
name|files
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Iterator
argument_list|<
name|MockFile
argument_list|>
name|fileIter
init|=
name|files
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|fileIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MockFile
name|file
init|=
name|fileIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
name|file
operator|.
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|filename
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|filename
operator|.
name|length
argument_list|()
operator|<=
name|path
operator|.
name|length
argument_list|()
operator|||
name|filename
operator|.
name|charAt
argument_list|(
name|path
operator|.
name|length
argument_list|()
argument_list|)
operator|!=
literal|'/'
condition|)
continue|continue;
if|if
condition|(
name|file
operator|.
name|cannotDelete
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
assert|assert
operator|!
name|file
operator|.
name|isDeleted
assert|;
name|file
operator|.
name|isDeleted
operator|=
literal|true
expr_stmt|;
name|fileIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|findMatchingLocatedFiles
parameter_list|(
name|List
argument_list|<
name|MockFile
argument_list|>
name|files
parameter_list|,
name|String
name|pathnameAsDir
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|dirs
parameter_list|,
name|List
argument_list|<
name|LocatedFileStatus
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|MockFile
name|file
range|:
name|files
control|)
block|{
name|String
name|filename
init|=
name|file
operator|.
name|path
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|startsWith
argument_list|(
name|pathnameAsDir
argument_list|)
condition|)
block|{
name|String
name|tail
init|=
name|filename
operator|.
name|substring
argument_list|(
name|pathnameAsDir
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nextSlash
init|=
name|tail
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextSlash
operator|>
literal|0
condition|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|tail
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nextSlash
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|createLocatedStatus
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|workingDir
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|fsPermission
parameter_list|)
block|{
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|FileStatus
name|createStatus
parameter_list|(
name|MockFile
name|file
parameter_list|)
block|{
if|if
condition|(
name|fileStatusMap
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
name|fileStatusMap
operator|.
name|get
argument_list|(
name|file
argument_list|)
return|;
block|}
name|FileStatus
name|fileStatus
init|=
operator|new
name|FileStatus
argument_list|(
name|file
operator|.
name|length
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|file
operator|.
name|blockSize
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|644
argument_list|)
argument_list|,
literal|"owen"
argument_list|,
literal|"group"
argument_list|,
name|file
operator|.
name|path
argument_list|)
decl_stmt|;
name|fileStatusMap
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|fileStatus
argument_list|)
expr_stmt|;
return|return
name|fileStatus
return|;
block|}
specifier|private
name|FileStatus
name|createDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|755
argument_list|)
argument_list|,
literal|"owen"
argument_list|,
literal|"group"
argument_list|,
name|dir
argument_list|)
return|;
block|}
specifier|private
name|LocatedFileStatus
name|createLocatedStatus
parameter_list|(
name|MockFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStatus
init|=
name|createStatus
argument_list|(
name|file
argument_list|)
decl_stmt|;
return|return
operator|new
name|LocatedFileStatus
argument_list|(
name|fileStatus
argument_list|,
name|getFileBlockLocationsImpl
argument_list|(
name|fileStatus
argument_list|,
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|LocatedFileStatus
name|createLocatedDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStatus
init|=
name|createDirectory
argument_list|(
name|dir
argument_list|)
decl_stmt|;
return|return
operator|new
name|LocatedFileStatus
argument_list|(
name|fileStatus
argument_list|,
name|getFileBlockLocationsImpl
argument_list|(
name|fileStatus
argument_list|,
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|checkAccess
argument_list|()
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|String
name|pathnameAsDir
init|=
name|path
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
return|return
name|createStatus
argument_list|(
name|file
argument_list|)
return|;
for|for
control|(
name|MockFile
name|dir
range|:
name|files
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|path
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|pathnameAsDir
argument_list|)
condition|)
block|{
return|return
name|createDirectory
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
for|for
control|(
name|MockFile
name|dir
range|:
name|globalFiles
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|path
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|pathnameAsDir
argument_list|)
condition|)
block|{
return|return
name|createDirectory
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|path
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|FileStatus
name|stat
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getFileBlockLocationsImpl
argument_list|(
name|stat
argument_list|,
name|start
argument_list|,
name|len
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|BlockLocation
index|[]
name|getFileBlockLocationsImpl
parameter_list|(
specifier|final
name|FileStatus
name|stat
parameter_list|,
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|long
name|len
parameter_list|,
specifier|final
name|boolean
name|updateStats
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|updateStats
condition|)
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|checkAccess
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|BlockLocation
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|BlockLocation
argument_list|>
argument_list|()
decl_stmt|;
name|MockFile
name|file
init|=
name|findFile
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MockBlock
name|block
range|:
name|file
operator|.
name|blocks
control|)
block|{
if|if
condition|(
name|getOverlap
argument_list|(
name|block
operator|.
name|offset
argument_list|,
name|block
operator|.
name|length
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|topology
init|=
operator|new
name|String
index|[
name|block
operator|.
name|hosts
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topology
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|topology
index|[
name|i
index|]
operator|=
literal|"/rack/ "
operator|+
name|block
operator|.
name|hosts
index|[
name|i
index|]
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|BlockLocation
argument_list|(
name|block
operator|.
name|hosts
argument_list|,
name|block
operator|.
name|hosts
argument_list|,
name|topology
argument_list|,
name|block
operator|.
name|offset
argument_list|,
name|block
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|BlockLocation
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
return|return
operator|new
name|BlockLocation
index|[
literal|0
index|]
return|;
block|}
comment|/**    * Compute the number of bytes that overlap between the two ranges.    * @param offset1 start of range1    * @param length1 length of range1    * @param offset2 start of range2    * @param length2 length of range2    * @return the number of bytes in the overlap range    */
specifier|private
specifier|static
name|long
name|getOverlap
parameter_list|(
name|long
name|offset1
parameter_list|,
name|long
name|length1
parameter_list|,
name|long
name|offset2
parameter_list|,
name|long
name|length2
parameter_list|)
block|{
comment|// c/p from OrcInputFormat
name|long
name|end1
init|=
name|offset1
operator|+
name|length1
decl_stmt|;
name|long
name|end2
init|=
name|offset2
operator|+
name|length2
decl_stmt|;
if|if
condition|(
name|end2
operator|<=
name|offset1
operator|||
name|end1
operator|<=
name|offset2
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|end1
argument_list|,
name|end2
argument_list|)
operator|-
name|Math
operator|.
name|max
argument_list|(
name|offset1
argument_list|,
name|offset2
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"mockFs{files:["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"]}"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|addGlobalFile
parameter_list|(
name|MockFile
name|mockFile
parameter_list|)
block|{
name|globalFiles
operator|.
name|add
argument_list|(
name|mockFile
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|clearGlobalFiles
parameter_list|()
block|{
name|globalFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|MockBlock
block|{
name|int
name|offset
decl_stmt|;
name|int
name|length
decl_stmt|;
specifier|final
name|String
index|[]
name|hosts
decl_stmt|;
specifier|public
name|MockBlock
parameter_list|(
name|String
modifier|...
name|hosts
parameter_list|)
block|{
name|this
operator|.
name|hosts
operator|=
name|hosts
expr_stmt|;
block|}
specifier|public
name|void
name|setOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"block{offset: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", length: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", hosts: ["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|hosts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"]}"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MockFile
block|{
specifier|public
specifier|final
name|Path
name|path
decl_stmt|;
specifier|public
name|int
name|blockSize
decl_stmt|;
specifier|public
name|int
name|length
decl_stmt|;
specifier|public
name|MockBlock
index|[]
name|blocks
decl_stmt|;
specifier|public
name|byte
index|[]
name|content
decl_stmt|;
specifier|public
name|boolean
name|cannotDelete
init|=
literal|false
decl_stmt|;
comment|// This is purely for testing convenience; has no bearing on FS operations such as list.
specifier|public
name|boolean
name|isDeleted
init|=
literal|false
decl_stmt|;
specifier|public
name|MockFile
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|byte
index|[]
name|content
parameter_list|,
name|MockBlock
modifier|...
name|blocks
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|content
operator|.
name|length
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MockBlock
name|block
range|:
name|blocks
control|)
block|{
name|block
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|block
operator|.
name|length
operator|=
name|Math
operator|.
name|min
argument_list|(
name|length
operator|-
name|offset
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|block
operator|.
name|length
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|path
operator|.
name|hashCode
argument_list|()
operator|+
literal|31
operator|*
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|MockFile
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
operator|(
name|MockFile
operator|)
name|obj
operator|)
operator|.
name|path
operator|.
name|equals
argument_list|(
name|this
operator|.
name|path
argument_list|)
operator|&&
operator|(
operator|(
name|MockFile
operator|)
name|obj
operator|)
operator|.
name|length
operator|==
name|this
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"mockFile{path: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", blkSize: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|blockSize
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", len: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", blocks: ["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|blocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"]}"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|static
class|class
name|MockInputStream
extends|extends
name|FSInputStream
block|{
specifier|final
name|MockFile
name|file
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|public
name|MockInputStream
parameter_list|(
name|MockFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|offset
operator|=
operator|(
name|int
operator|)
name|offset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|offset
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|l
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|<
name|file
operator|.
name|length
condition|)
block|{
return|return
name|file
operator|.
name|content
index|[
name|offset
operator|++
index|]
operator|&
literal|0xff
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MockPath
extends|extends
name|Path
block|{
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|public
name|MockPath
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|fs
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MockOutputStream
extends|extends
name|FSDataOutputStream
block|{
specifier|public
specifier|final
name|MockFile
name|file
decl_stmt|;
specifier|public
name|MockOutputStream
parameter_list|(
name|MockFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|DataOutputBuffer
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
comment|/**      * Set the blocks and their location for the file.      * Must be called after the stream is closed or the block length will be      * wrong.      * @param blocks the list of blocks      */
specifier|public
name|void
name|setBlocks
parameter_list|(
name|MockBlock
modifier|...
name|blocks
parameter_list|)
block|{
name|file
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|file
operator|.
name|length
operator|&&
name|i
operator|<
name|blocks
operator|.
name|length
condition|)
block|{
name|blocks
index|[
name|i
index|]
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|blocks
index|[
name|i
index|]
operator|.
name|length
operator|=
name|Math
operator|.
name|min
argument_list|(
name|file
operator|.
name|length
operator|-
name|offset
argument_list|,
name|file
operator|.
name|blockSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|blocks
index|[
name|i
index|]
operator|.
name|length
expr_stmt|;
name|i
operator|+=
literal|1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataOutputBuffer
name|buf
init|=
operator|(
name|DataOutputBuffer
operator|)
name|getWrappedStream
argument_list|()
decl_stmt|;
name|file
operator|.
name|length
operator|=
name|buf
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|file
operator|.
name|content
operator|=
operator|new
name|byte
index|[
name|file
operator|.
name|length
index|]
expr_stmt|;
name|MockBlock
name|block
init|=
operator|new
name|MockBlock
argument_list|(
literal|"host1"
argument_list|)
decl_stmt|;
name|block
operator|.
name|setLength
argument_list|(
name|file
operator|.
name|length
argument_list|)
expr_stmt|;
name|setBlocks
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|file
operator|.
name|content
argument_list|,
literal|0
argument_list|,
name|file
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Out stream to "
operator|+
name|file
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|MockFile
name|file
parameter_list|)
block|{
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

