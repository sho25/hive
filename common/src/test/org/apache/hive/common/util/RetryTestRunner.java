begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|AssumptionViolatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|runners
operator|.
name|model
operator|.
name|EachTestNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|RunNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|StoppedByUserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|BlockJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|FrameworkMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|InitializationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_comment
comment|/**  * JUnit test runner that reruns test on failure.  */
end_comment

begin_class
specifier|public
class|class
name|RetryTestRunner
extends|extends
name|BlockJUnit4ClassRunner
block|{
comment|// TODO: should this be configurable via annotation or extending @RunWith annotation?
specifier|static
specifier|final
name|int
name|DEFAULT_RETRY_COUNT
init|=
literal|2
decl_stmt|;
comment|// test is executed 3 times in worst case 1 original + 2 retries
specifier|private
specifier|final
name|int
name|retryCount
decl_stmt|;
specifier|private
name|int
name|failedAttempts
init|=
literal|0
decl_stmt|;
specifier|public
name|RetryTestRunner
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|)
throws|throws
name|InitializationError
block|{
name|super
argument_list|(
name|klass
argument_list|)
expr_stmt|;
name|this
operator|.
name|retryCount
operator|=
name|DEFAULT_RETRY_COUNT
expr_stmt|;
block|}
comment|// from ParentRunner, retried under exception (notified only after exhausting retryCount)
comment|// invoked for test classes
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|RunNotifier
name|notifier
parameter_list|)
block|{
specifier|final
name|Description
name|description
init|=
name|getDescription
argument_list|()
decl_stmt|;
specifier|final
name|EachTestNotifier
name|testNotifier
init|=
operator|new
name|EachTestNotifier
argument_list|(
name|notifier
argument_list|,
name|description
argument_list|)
decl_stmt|;
specifier|final
name|Statement
name|statement
init|=
name|classBlock
argument_list|(
name|notifier
argument_list|)
decl_stmt|;
try|try
block|{
name|statement
operator|.
name|evaluate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssumptionViolatedException
name|e
parameter_list|)
block|{
name|testNotifier
operator|.
name|fireTestIgnored
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StoppedByUserException
name|e
parameter_list|)
block|{
comment|// not retrying when user explicitly stops the test
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// retry on any other exception
name|retry
argument_list|(
name|description
argument_list|,
name|testNotifier
argument_list|,
name|statement
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// invoked for test methods
annotation|@
name|Override
specifier|protected
name|void
name|runChild
parameter_list|(
specifier|final
name|FrameworkMethod
name|method
parameter_list|,
specifier|final
name|RunNotifier
name|notifier
parameter_list|)
block|{
specifier|final
name|Description
name|description
init|=
name|describeChild
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|getAnnotation
argument_list|(
name|Ignore
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|notifier
operator|.
name|fireTestIgnored
argument_list|(
name|description
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|runTestUnit
argument_list|(
name|methodBlock
argument_list|(
name|method
argument_list|)
argument_list|,
name|description
argument_list|,
name|notifier
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|runTestUnit
parameter_list|(
specifier|final
name|Statement
name|statement
parameter_list|,
specifier|final
name|Description
name|description
parameter_list|,
specifier|final
name|RunNotifier
name|notifier
parameter_list|)
block|{
specifier|final
name|EachTestNotifier
name|eachNotifier
init|=
operator|new
name|EachTestNotifier
argument_list|(
name|notifier
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|eachNotifier
operator|.
name|fireTestStarted
argument_list|()
expr_stmt|;
try|try
block|{
name|statement
operator|.
name|evaluate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssumptionViolatedException
name|e
parameter_list|)
block|{
name|eachNotifier
operator|.
name|addFailedAssumption
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|retry
argument_list|(
name|description
argument_list|,
name|eachNotifier
argument_list|,
name|statement
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|eachNotifier
operator|.
name|fireTestFinished
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|retry
parameter_list|(
specifier|final
name|Description
name|description
parameter_list|,
specifier|final
name|EachTestNotifier
name|notifier
parameter_list|,
specifier|final
name|Statement
name|statement
parameter_list|,
specifier|final
name|Throwable
name|currentThrowable
parameter_list|)
block|{
name|Throwable
name|caughtThrowable
init|=
name|currentThrowable
decl_stmt|;
while|while
condition|(
name|retryCount
operator|>
name|failedAttempts
condition|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|description
operator|+
literal|" Caught: "
operator|+
operator|(
name|currentThrowable
operator|==
literal|null
condition|?
literal|"exception"
else|:
name|currentThrowable
operator|.
name|getMessage
argument_list|()
operator|)
operator|+
literal|". Retrying test "
operator|+
name|failedAttempts
operator|+
literal|"/"
operator|+
name|retryCount
argument_list|)
expr_stmt|;
name|statement
operator|.
name|evaluate
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failedAttempts
operator|++
expr_stmt|;
name|caughtThrowable
operator|=
name|t
expr_stmt|;
block|}
block|}
name|notifier
operator|.
name|addFailure
argument_list|(
name|caughtThrowable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

