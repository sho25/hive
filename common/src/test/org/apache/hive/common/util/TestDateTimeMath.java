begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestDateTimeMath
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTimestampIntervalYearMonthArithmetic
parameter_list|()
throws|throws
name|Exception
block|{
name|char
name|plus
init|=
literal|'+'
decl_stmt|;
name|char
name|minus
init|=
literal|'-'
decl_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"0-0"
argument_list|,
literal|"2001-01-01 01:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.456"
argument_list|,
name|plus
argument_list|,
literal|"1-1"
argument_list|,
literal|"2002-02-01 01:02:03.456"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.456"
argument_list|,
name|plus
argument_list|,
literal|"10-0"
argument_list|,
literal|"2011-01-01 01:02:03.456"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.456"
argument_list|,
name|plus
argument_list|,
literal|"0-11"
argument_list|,
literal|"2001-12-01 01:02:03.456"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-03-01 01:02:03.500"
argument_list|,
name|plus
argument_list|,
literal|"1-11"
argument_list|,
literal|"2003-02-01 01:02:03.500"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.500"
argument_list|,
name|plus
argument_list|,
literal|"-1-1"
argument_list|,
literal|"1999-12-01 01:02:03.500"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.500"
argument_list|,
name|plus
argument_list|,
literal|"-0-0"
argument_list|,
literal|"2001-01-01 01:02:03.500"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.123456789"
argument_list|,
name|plus
argument_list|,
literal|"-0-0"
argument_list|,
literal|"2001-01-01 01:02:03.123456789"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|minus
argument_list|,
literal|"0-0"
argument_list|,
literal|"2001-01-01 01:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|minus
argument_list|,
literal|"10-0"
argument_list|,
literal|"1991-01-01 01:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|minus
argument_list|,
literal|"-10-0"
argument_list|,
literal|"2011-01-01 01:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|minus
argument_list|,
literal|"8-2"
argument_list|,
literal|"1992-11-01 01:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|minus
argument_list|,
literal|"-8-2"
argument_list|,
literal|"2009-03-01 01:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.123456789"
argument_list|,
name|minus
argument_list|,
literal|"8-2"
argument_list|,
literal|"1992-11-01 01:02:03.123456789"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|null
argument_list|,
name|plus
argument_list|,
literal|"1-1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|null
argument_list|,
name|minus
argument_list|,
literal|"1-1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|minus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// End of the month behavior
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-28 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2001-02-28 01:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-29 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2001-02-28 01:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-30 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2001-02-28 01:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-31 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2001-02-28 01:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-02-28 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2001-03-28 01:02:03"
argument_list|)
expr_stmt|;
comment|// Test that timestamp arithmetic is done in UTC and then converted back to local timezone,
comment|// matching Oracle behavior.
name|TimeZone
name|originalTz
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
try|try
block|{
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Los_Angeles"
argument_list|)
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"0-6"
argument_list|,
literal|"2001-07-01 02:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-07-01 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"0-6"
argument_list|,
literal|"2002-01-01 00:02:03"
argument_list|)
expr_stmt|;
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"0-6"
argument_list|,
literal|"2001-07-01 01:02:03"
argument_list|)
expr_stmt|;
name|checkTimestampIntervalYearMonthArithmetic
argument_list|(
literal|"2001-07-01 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"0-6"
argument_list|,
literal|"2002-01-01 01:02:03"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|originalTz
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateIntervalYearMonthArithmetic
parameter_list|()
throws|throws
name|Exception
block|{
name|char
name|plus
init|=
literal|'+'
decl_stmt|;
name|char
name|minus
init|=
literal|'-'
decl_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01"
argument_list|,
name|plus
argument_list|,
literal|"0-0"
argument_list|,
literal|"2001-01-01"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2001-02-01"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01"
argument_list|,
name|plus
argument_list|,
literal|"0-6"
argument_list|,
literal|"2001-07-01"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01"
argument_list|,
name|plus
argument_list|,
literal|"1-0"
argument_list|,
literal|"2002-01-01"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01"
argument_list|,
name|plus
argument_list|,
literal|"1-1"
argument_list|,
literal|"2002-02-01"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-10-10"
argument_list|,
name|plus
argument_list|,
literal|"1-6"
argument_list|,
literal|"2003-04-10"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2003-04-10"
argument_list|,
name|plus
argument_list|,
literal|"-1-6"
argument_list|,
literal|"2001-10-10"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01"
argument_list|,
name|minus
argument_list|,
literal|"0-0"
argument_list|,
literal|"2001-01-01"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01"
argument_list|,
name|minus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2000-12-01"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01"
argument_list|,
name|minus
argument_list|,
literal|"1-0"
argument_list|,
literal|"2000-01-01"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01"
argument_list|,
name|minus
argument_list|,
literal|"1-1"
argument_list|,
literal|"1999-12-01"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-10-10"
argument_list|,
name|minus
argument_list|,
literal|"1-6"
argument_list|,
literal|"2000-04-10"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2003-04-10"
argument_list|,
name|minus
argument_list|,
literal|"-1-6"
argument_list|,
literal|"2004-10-10"
argument_list|)
expr_stmt|;
comment|// end of month behavior
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-28"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2001-02-28"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-29"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2001-02-28"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-30"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2001-02-28"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-31"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2001-02-28"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-31"
argument_list|,
name|plus
argument_list|,
literal|"0-2"
argument_list|,
literal|"2001-03-31"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2001-02-28"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2001-03-28"
argument_list|)
expr_stmt|;
comment|// leap year
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2004-01-28"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2004-02-28"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2004-01-29"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2004-02-29"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2004-01-30"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2004-02-29"
argument_list|)
expr_stmt|;
name|checkDateIntervalDayTimeArithmetic
argument_list|(
literal|"2004-01-31"
argument_list|,
name|plus
argument_list|,
literal|"0-1"
argument_list|,
literal|"2004-02-29"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalYearMonthArithmetic
parameter_list|()
throws|throws
name|Exception
block|{
name|char
name|plus
init|=
literal|'+'
decl_stmt|;
name|char
name|minus
init|=
literal|'-'
decl_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"0-0"
argument_list|,
name|plus
argument_list|,
literal|"0-0"
argument_list|,
literal|"0-0"
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"0-0"
argument_list|,
name|plus
argument_list|,
literal|"4-5"
argument_list|,
literal|"4-5"
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"4-5"
argument_list|,
name|plus
argument_list|,
literal|"0-0"
argument_list|,
literal|"4-5"
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"0-0"
argument_list|,
name|plus
argument_list|,
literal|"1-1"
argument_list|,
literal|"1-1"
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"1-1"
argument_list|,
name|plus
argument_list|,
literal|"0-0"
argument_list|,
literal|"1-1"
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"0-0"
argument_list|,
name|minus
argument_list|,
literal|"0-0"
argument_list|,
literal|"0-0"
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"0-0"
argument_list|,
name|minus
argument_list|,
literal|"1-0"
argument_list|,
literal|"-1-0"
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"1-2"
argument_list|,
name|minus
argument_list|,
literal|"1-1"
argument_list|,
literal|"0-1"
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"0-0"
argument_list|,
name|minus
argument_list|,
literal|"1-1"
argument_list|,
literal|"-1-1"
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"-1-1"
argument_list|,
name|minus
argument_list|,
literal|"1-1"
argument_list|,
literal|"-2-2"
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"-1-1"
argument_list|,
name|minus
argument_list|,
literal|"-1-1"
argument_list|,
literal|"0-0"
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|null
argument_list|,
name|plus
argument_list|,
literal|"1-1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"1-1"
argument_list|,
name|plus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|null
argument_list|,
name|minus
argument_list|,
literal|"1-1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkIntervalYearMonthArithmetic
argument_list|(
literal|"1-1"
argument_list|,
name|minus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampIntervalDayTimeArithmetic
parameter_list|()
throws|throws
name|Exception
block|{
name|char
name|plus
init|=
literal|'+'
decl_stmt|;
name|char
name|minus
init|=
literal|'-'
decl_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1"
argument_list|,
literal|"2001-01-02 02:03:04"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.456"
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1"
argument_list|,
literal|"2001-01-02 02:03:04.456"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.456"
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1.555"
argument_list|,
literal|"2001-01-02 02:03:05.011"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1.555555555"
argument_list|,
literal|"2001-01-02 02:03:04.555555555"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.456"
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1.555555555"
argument_list|,
literal|"2001-01-02 02:03:05.011555555"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.500"
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1.499"
argument_list|,
literal|"2001-01-02 02:03:04.999"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.500"
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1.500"
argument_list|,
literal|"2001-01-02 02:03:05.0"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.500"
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1.501"
argument_list|,
literal|"2001-01-02 02:03:05.001"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.500000000"
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1.4999999999"
argument_list|,
literal|"2001-01-02 02:03:04.999999999"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.500000000"
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1.500"
argument_list|,
literal|"2001-01-02 02:03:05.0"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03.500000000"
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1.500000001"
argument_list|,
literal|"2001-01-02 02:03:05.000000001"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|minus
argument_list|,
literal|"0 01:02:03"
argument_list|,
literal|"2001-01-01 00:00:00"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|minus
argument_list|,
literal|"0 0:0:0"
argument_list|,
literal|"2001-01-01 01:02:03"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|null
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1.555555555"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|null
argument_list|,
name|minus
argument_list|,
literal|"1 1:1:1.555555555"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2001-01-01 01:02:03"
argument_list|,
name|minus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Try some time zone boundaries
name|TimeZone
name|originalTz
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
try|try
block|{
comment|// America/Los_Angeles DST dates - 2015-03-08 02:00:00/2015-11-01 02:00:00
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Los_Angeles"
argument_list|)
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2015-03-08 01:59:58"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:01"
argument_list|,
literal|"2015-03-08 01:59:59"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2015-03-08 01:59:59"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:01"
argument_list|,
literal|"2015-03-08 03:00:00"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2015-03-08 03:00:00"
argument_list|,
name|minus
argument_list|,
literal|"0 0:0:01"
argument_list|,
literal|"2015-03-08 01:59:59"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2015-03-08 01:59:59.995"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:0.005"
argument_list|,
literal|"2015-03-08 03:00:00"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2015-03-08 01:59:59.995"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:0.0051"
argument_list|,
literal|"2015-03-08 03:00:00.0001"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2015-03-08 03:00:00"
argument_list|,
name|minus
argument_list|,
literal|"0 0:0:0.005"
argument_list|,
literal|"2015-03-08 01:59:59.995"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2015-11-01 01:59:58"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:01"
argument_list|,
literal|"2015-11-01 01:59:59"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2015-11-01 01:59:59"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:01"
argument_list|,
literal|"2015-11-01 02:00:00"
argument_list|)
expr_stmt|;
comment|// UTC has no such adjustment
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2015-03-08 01:59:58"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:01"
argument_list|,
literal|"2015-03-08 01:59:59"
argument_list|)
expr_stmt|;
name|checkTsIntervalDayTimeArithmetic
argument_list|(
literal|"2015-03-08 01:59:59"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:01"
argument_list|,
literal|"2015-03-08 02:00:00"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|originalTz
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntervalDayTimeArithmetic
parameter_list|()
throws|throws
name|Exception
block|{
name|char
name|plus
init|=
literal|'+'
decl_stmt|;
name|char
name|minus
init|=
literal|'-'
decl_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"0 0:0:0"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:0"
argument_list|,
literal|"0 0:0:0"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"0 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"6 0:0:0.0001"
argument_list|,
literal|"6 01:02:03.0001"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"6 0:0:0.0001"
argument_list|,
name|plus
argument_list|,
literal|"0 01:02:03"
argument_list|,
literal|"6 01:02:03.0001"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"0 01:02:03"
argument_list|,
name|plus
argument_list|,
literal|"1 10:10:10.0001"
argument_list|,
literal|"1 11:12:13.0001"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"1 10:10:10.0001"
argument_list|,
name|plus
argument_list|,
literal|"0 01:02:03"
argument_list|,
literal|"1 11:12:13.0001"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"0 0:0:0.900000000"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:0.099999999"
argument_list|,
literal|"0 0:0:0.999999999"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"0 0:0:0.900000001"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:0.099999999"
argument_list|,
literal|"0 0:0:1"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"0 0:0:0.900000002"
argument_list|,
name|plus
argument_list|,
literal|"0 0:0:0.099999999"
argument_list|,
literal|"0 0:0:1.000000001"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"0 0:0:0"
argument_list|,
name|minus
argument_list|,
literal|"0 0:0:0"
argument_list|,
literal|"0 0:0:0"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"0 0:0:0"
argument_list|,
name|minus
argument_list|,
literal|"0 0:0:0.123"
argument_list|,
literal|"-0 0:0:0.123"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"3 4:5:6.789"
argument_list|,
name|minus
argument_list|,
literal|"1 1:1:1.111"
argument_list|,
literal|"2 3:4:5.678"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"0 0:0:0.0"
argument_list|,
name|minus
argument_list|,
literal|"1 1:1:1.111"
argument_list|,
literal|"-1 1:1:1.111"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"-1 1:1:1.222"
argument_list|,
name|minus
argument_list|,
literal|"1 1:1:1.111"
argument_list|,
literal|"-2 2:2:2.333"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"-1 1:1:1.111"
argument_list|,
name|minus
argument_list|,
literal|"-1 1:1:1.111"
argument_list|,
literal|"0 0:0:0"
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|null
argument_list|,
name|plus
argument_list|,
literal|"1 1:1:1.111"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"1 1:1:1.111"
argument_list|,
name|plus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|null
argument_list|,
name|minus
argument_list|,
literal|"1 1:1:1.111"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkIntervalDayTimeArithmetic
argument_list|(
literal|"1 1:1:1.111"
argument_list|,
name|minus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampSubtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTsArithmetic
argument_list|(
literal|"2001-01-01 00:00:00"
argument_list|,
literal|"2001-01-01 00:00:00"
argument_list|,
literal|"0 0:0:0"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"2002-02-02 01:01:01"
argument_list|,
literal|"2001-01-01 00:00:00"
argument_list|,
literal|"397 1:1:1"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"2001-01-01 00:00:00"
argument_list|,
literal|"2002-02-02 01:01:01"
argument_list|,
literal|"-397 1:1:1"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"2015-01-01 00:00:00"
argument_list|,
literal|"2014-12-31 00:00:00"
argument_list|,
literal|"1 0:0:0"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"2014-12-31 00:00:00"
argument_list|,
literal|"2015-01-01 00:00:00"
argument_list|,
literal|"-1 0:0:0"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"2015-01-01 00:00:00"
argument_list|,
literal|"2014-12-31 23:59:59"
argument_list|,
literal|"0 0:0:01"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"2014-12-31 23:59:59"
argument_list|,
literal|"2015-01-01 00:00:00"
argument_list|,
literal|"-0 0:0:01"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"2015-01-01 00:00:00"
argument_list|,
literal|"2014-12-31 23:59:59.9999"
argument_list|,
literal|"0 0:0:00.0001"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"2014-12-31 23:59:59.9999"
argument_list|,
literal|"2015-01-01 00:00:00"
argument_list|,
literal|"-0 0:0:00.0001"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"2015-01-01 00:00:00"
argument_list|,
literal|"2014-12-31 11:12:13.000000001"
argument_list|,
literal|"0 12:47:46.999999999"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"2014-12-31 11:12:13.000000001"
argument_list|,
literal|"2015-01-01 00:00:00"
argument_list|,
literal|"-0 12:47:46.999999999"
argument_list|)
expr_stmt|;
comment|// Test that timestamp arithmetic is done in UTC and then converted back to local timezone,
comment|// matching Oracle behavior.
name|TimeZone
name|originalTz
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
try|try
block|{
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"America/Los_Angeles"
argument_list|)
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"1999-12-15 00:00:00"
argument_list|,
literal|"1999-09-15 00:00:00"
argument_list|,
literal|"91 1:0:0"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"1999-09-15 00:00:00"
argument_list|,
literal|"1999-12-15 00:00:00"
argument_list|,
literal|"-91 1:0:0"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"1999-12-15 00:00:00"
argument_list|,
literal|"1995-09-15 00:00:00"
argument_list|,
literal|"1552 1:0:0"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"1995-09-15 00:00:00"
argument_list|,
literal|"1999-12-15 00:00:00"
argument_list|,
literal|"-1552 1:0:0"
argument_list|)
expr_stmt|;
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"1999-12-15 00:00:00"
argument_list|,
literal|"1999-09-15 00:00:00"
argument_list|,
literal|"91 0:0:0"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"1999-09-15 00:00:00"
argument_list|,
literal|"1999-12-15 00:00:00"
argument_list|,
literal|"-91 0:0:0"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"1999-12-15 00:00:00"
argument_list|,
literal|"1995-09-15 00:00:00"
argument_list|,
literal|"1552 0:0:0"
argument_list|)
expr_stmt|;
name|checkTsArithmetic
argument_list|(
literal|"1995-09-15 00:00:00"
argument_list|,
literal|"1999-12-15 00:00:00"
argument_list|,
literal|"-1552 0:0:0"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|originalTz
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkTimestampIntervalYearMonthArithmetic
parameter_list|(
name|String
name|left
parameter_list|,
name|char
name|operationType
parameter_list|,
name|String
name|right
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|Timestamp
name|leftTs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|left
operator|!=
literal|null
condition|)
block|{
name|leftTs
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
name|HiveIntervalYearMonth
name|rightInterval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|right
operator|!=
literal|null
condition|)
block|{
name|rightInterval
operator|=
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
name|Timestamp
name|expectedResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
name|expectedResult
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
name|Timestamp
name|testResult
init|=
literal|null
decl_stmt|;
name|DateTimeMath
name|dtm
init|=
operator|new
name|DateTimeMath
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|operationType
condition|)
block|{
case|case
literal|'-'
case|:
name|testResult
operator|=
name|dtm
operator|.
name|subtract
argument_list|(
name|leftTs
argument_list|,
name|rightInterval
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|testResult
operator|=
name|dtm
operator|.
name|add
argument_list|(
name|leftTs
argument_list|,
name|rightInterval
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid operation "
operator|+
name|operationType
argument_list|)
throw|;
block|}
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s %s %s"
argument_list|,
name|leftTs
argument_list|,
name|operationType
argument_list|,
name|rightInterval
argument_list|)
argument_list|,
name|expectedResult
argument_list|,
name|testResult
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkDateIntervalDayTimeArithmetic
parameter_list|(
name|String
name|left
parameter_list|,
name|char
name|operationType
parameter_list|,
name|String
name|right
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|Date
name|leftDt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|left
operator|!=
literal|null
condition|)
block|{
name|leftDt
operator|=
name|Date
operator|.
name|valueOf
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
name|HiveIntervalYearMonth
name|rightInterval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|right
operator|!=
literal|null
condition|)
block|{
name|rightInterval
operator|=
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
name|Date
name|expectedResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
name|expectedResult
operator|=
name|Date
operator|.
name|valueOf
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
name|Date
name|testResult
init|=
literal|null
decl_stmt|;
name|DateTimeMath
name|dtm
init|=
operator|new
name|DateTimeMath
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|operationType
condition|)
block|{
case|case
literal|'-'
case|:
name|testResult
operator|=
name|dtm
operator|.
name|subtract
argument_list|(
name|leftDt
argument_list|,
name|rightInterval
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|testResult
operator|=
name|dtm
operator|.
name|add
argument_list|(
name|leftDt
argument_list|,
name|rightInterval
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid operation "
operator|+
name|operationType
argument_list|)
throw|;
block|}
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s %s %s"
argument_list|,
name|leftDt
argument_list|,
name|operationType
argument_list|,
name|rightInterval
argument_list|)
argument_list|,
name|expectedResult
argument_list|,
name|testResult
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkIntervalYearMonthArithmetic
parameter_list|(
name|String
name|left
parameter_list|,
name|char
name|operationType
parameter_list|,
name|String
name|right
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveIntervalYearMonth
name|leftInterval
init|=
name|left
operator|==
literal|null
condition|?
literal|null
else|:
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|HiveIntervalYearMonth
name|rightInterval
init|=
name|right
operator|==
literal|null
condition|?
literal|null
else|:
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|right
argument_list|)
decl_stmt|;
name|HiveIntervalYearMonth
name|expectedResult
init|=
name|expected
operator|==
literal|null
condition|?
literal|null
else|:
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|HiveIntervalYearMonth
name|testResult
init|=
literal|null
decl_stmt|;
name|DateTimeMath
name|dtm
init|=
operator|new
name|DateTimeMath
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|operationType
condition|)
block|{
case|case
literal|'-'
case|:
name|testResult
operator|=
name|dtm
operator|.
name|subtract
argument_list|(
name|leftInterval
argument_list|,
name|rightInterval
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|testResult
operator|=
name|dtm
operator|.
name|add
argument_list|(
name|leftInterval
argument_list|,
name|rightInterval
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid operation "
operator|+
name|operationType
argument_list|)
throw|;
block|}
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s %s %s"
argument_list|,
name|leftInterval
argument_list|,
name|operationType
argument_list|,
name|rightInterval
argument_list|)
argument_list|,
name|expectedResult
argument_list|,
name|testResult
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkTsIntervalDayTimeArithmetic
parameter_list|(
name|String
name|left
parameter_list|,
name|char
name|operationType
parameter_list|,
name|String
name|right
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|Timestamp
name|leftTs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|left
operator|!=
literal|null
condition|)
block|{
name|leftTs
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
name|HiveIntervalDayTime
name|rightInterval
init|=
name|right
operator|==
literal|null
condition|?
literal|null
else|:
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|right
argument_list|)
decl_stmt|;
name|Timestamp
name|expectedResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
name|expectedResult
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
name|Timestamp
name|testResult
init|=
literal|null
decl_stmt|;
name|DateTimeMath
name|dtm
init|=
operator|new
name|DateTimeMath
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|operationType
condition|)
block|{
case|case
literal|'-'
case|:
name|testResult
operator|=
name|dtm
operator|.
name|subtract
argument_list|(
name|leftTs
argument_list|,
name|rightInterval
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|testResult
operator|=
name|dtm
operator|.
name|add
argument_list|(
name|leftTs
argument_list|,
name|rightInterval
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid operation "
operator|+
name|operationType
argument_list|)
throw|;
block|}
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s %s %s"
argument_list|,
name|leftTs
argument_list|,
name|operationType
argument_list|,
name|rightInterval
argument_list|)
argument_list|,
name|expectedResult
argument_list|,
name|testResult
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkIntervalDayTimeArithmetic
parameter_list|(
name|String
name|left
parameter_list|,
name|char
name|operationType
parameter_list|,
name|String
name|right
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveIntervalDayTime
name|leftInterval
init|=
name|left
operator|==
literal|null
condition|?
literal|null
else|:
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|HiveIntervalDayTime
name|rightInterval
init|=
name|right
operator|==
literal|null
condition|?
literal|null
else|:
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|right
argument_list|)
decl_stmt|;
name|HiveIntervalDayTime
name|expectedResult
init|=
name|expected
operator|==
literal|null
condition|?
literal|null
else|:
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|HiveIntervalDayTime
name|testResult
init|=
literal|null
decl_stmt|;
name|DateTimeMath
name|dtm
init|=
operator|new
name|DateTimeMath
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|operationType
condition|)
block|{
case|case
literal|'-'
case|:
name|testResult
operator|=
name|dtm
operator|.
name|subtract
argument_list|(
name|leftInterval
argument_list|,
name|rightInterval
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|testResult
operator|=
name|dtm
operator|.
name|add
argument_list|(
name|leftInterval
argument_list|,
name|rightInterval
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid operation "
operator|+
name|operationType
argument_list|)
throw|;
block|}
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s %s %s"
argument_list|,
name|leftInterval
argument_list|,
name|operationType
argument_list|,
name|rightInterval
argument_list|)
argument_list|,
name|expectedResult
argument_list|,
name|testResult
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|checkTsArithmetic
parameter_list|(
name|String
name|left
parameter_list|,
name|String
name|right
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|Timestamp
name|leftTs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|left
operator|!=
literal|null
condition|)
block|{
name|leftTs
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
name|Timestamp
name|rightTs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|left
operator|!=
literal|null
condition|)
block|{
name|rightTs
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
name|HiveIntervalDayTime
name|expectedResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
name|expectedResult
operator|=
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
name|DateTimeMath
name|dtm
init|=
operator|new
name|DateTimeMath
argument_list|()
decl_stmt|;
name|HiveIntervalDayTime
name|testResult
init|=
name|dtm
operator|.
name|subtract
argument_list|(
name|leftTs
argument_list|,
name|rightTs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s - %s"
argument_list|,
name|leftTs
argument_list|,
name|rightTs
argument_list|)
argument_list|,
name|expectedResult
argument_list|,
name|testResult
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

