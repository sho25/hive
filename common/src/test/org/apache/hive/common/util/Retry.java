begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_comment
comment|/**  * JUnit test rule that reruns test on failure. With Retry test rule only the test method will be retried,  * the test class will not be re-initialized.  */
end_comment

begin_class
specifier|public
class|class
name|Retry
implements|implements
name|TestRule
block|{
specifier|private
specifier|final
name|int
name|retryCount
decl_stmt|;
specifier|public
name|Retry
parameter_list|()
block|{
name|this
argument_list|(
name|RetryTestRunner
operator|.
name|DEFAULT_RETRY_COUNT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Retry
parameter_list|(
specifier|final
name|int
name|retryCount
parameter_list|)
block|{
name|this
operator|.
name|retryCount
operator|=
name|retryCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Statement
name|apply
parameter_list|(
name|Statement
name|base
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
return|return
operator|new
name|RetryingStatement
argument_list|(
name|base
argument_list|,
name|description
argument_list|)
return|;
block|}
specifier|private
class|class
name|RetryingStatement
extends|extends
name|Statement
block|{
specifier|private
specifier|final
name|Statement
name|wrappedStatement
decl_stmt|;
specifier|private
specifier|final
name|Description
name|description
decl_stmt|;
specifier|private
name|RetryingStatement
parameter_list|(
name|Statement
name|wrappedStatement
parameter_list|,
specifier|final
name|Description
name|description
parameter_list|)
block|{
name|this
operator|.
name|wrappedStatement
operator|=
name|wrappedStatement
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|failedAttempts
init|=
literal|0
decl_stmt|;
name|boolean
name|retry
decl_stmt|;
do|do
block|{
try|try
block|{
name|wrappedStatement
operator|.
name|evaluate
argument_list|()
expr_stmt|;
name|retry
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
if|if
condition|(
name|retryCount
operator|>
name|failedAttempts
condition|)
block|{
name|failedAttempts
operator|++
expr_stmt|;
name|retry
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|description
operator|+
literal|" Caught: "
operator|+
name|throwable
operator|.
name|getMessage
argument_list|()
operator|+
literal|". Retrying test "
operator|+
name|failedAttempts
operator|+
literal|"/"
operator|+
name|retryCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|throwable
throw|;
block|}
block|}
block|}
do|while
condition|(
name|retry
condition|)
do|;
block|}
block|}
block|}
end_class

end_unit

