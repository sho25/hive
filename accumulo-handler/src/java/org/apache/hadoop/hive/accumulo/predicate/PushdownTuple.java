begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|DoubleCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|IntCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|LongCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|PrimitiveComparison
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|StringCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeConstantEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * For use in IteratorSetting construction.  *  * encapsulates a constant byte [], PrimitiveCompare instance, and CompareOp instance.  */
end_comment

begin_class
specifier|public
class|class
name|PushdownTuple
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PushdownTuple
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|constVal
decl_stmt|;
specifier|private
name|PrimitiveComparison
name|pCompare
decl_stmt|;
specifier|private
name|CompareOp
name|cOpt
decl_stmt|;
specifier|public
name|PushdownTuple
parameter_list|(
name|IndexSearchCondition
name|sc
parameter_list|,
name|PrimitiveComparison
name|pCompare
parameter_list|,
name|CompareOp
name|cOpt
parameter_list|)
throws|throws
name|SerDeException
block|{
name|ExprNodeConstantEvaluator
name|eval
init|=
operator|new
name|ExprNodeConstantEvaluator
argument_list|(
name|sc
operator|.
name|getConstantDesc
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|pCompare
operator|=
name|pCompare
expr_stmt|;
name|this
operator|.
name|cOpt
operator|=
name|cOpt
expr_stmt|;
name|Writable
name|writable
init|=
operator|(
name|Writable
operator|)
name|eval
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|constVal
operator|=
name|getConstantAsBytes
argument_list|(
name|writable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|cce
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|" Column type mismatch in where clause "
operator|+
name|sc
operator|.
name|getComparisonExpr
argument_list|()
operator|.
name|getExprString
argument_list|()
operator|+
literal|" found type "
operator|+
name|sc
operator|.
name|getConstantDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
operator|+
literal|" instead of "
operator|+
name|sc
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getConstVal
parameter_list|()
block|{
return|return
name|constVal
return|;
block|}
specifier|public
name|PrimitiveComparison
name|getpCompare
parameter_list|()
block|{
return|return
name|pCompare
return|;
block|}
specifier|public
name|CompareOp
name|getcOpt
parameter_list|()
block|{
return|return
name|cOpt
return|;
block|}
comment|/**    *    * @return byte [] value from writable.    * @throws SerDeException    */
specifier|public
name|byte
index|[]
name|getConstantAsBytes
parameter_list|(
name|Writable
name|writable
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|pCompare
operator|instanceof
name|StringCompare
condition|)
block|{
return|return
name|writable
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|pCompare
operator|instanceof
name|DoubleCompare
condition|)
block|{
name|byte
index|[]
name|bts
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|double
name|val
init|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bts
argument_list|)
operator|.
name|putDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|bts
return|;
block|}
elseif|else
if|if
condition|(
name|pCompare
operator|instanceof
name|IntCompare
condition|)
block|{
name|byte
index|[]
name|bts
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|int
name|val
init|=
operator|(
operator|(
name|IntWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bts
argument_list|)
operator|.
name|putInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|bts
return|;
block|}
elseif|else
if|if
condition|(
name|pCompare
operator|instanceof
name|LongCompare
condition|)
block|{
name|byte
index|[]
name|bts
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|long
name|val
init|=
operator|(
operator|(
name|LongWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bts
argument_list|)
operator|.
name|putLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|bts
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Unsupported primitive category: "
operator|+
name|pCompare
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

