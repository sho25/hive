begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|AccumuloHiveConstants
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ROWID
init|=
literal|":rowID"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|COLON
init|=
literal|':'
decl_stmt|,
name|COMMA
init|=
literal|','
decl_stmt|,
name|ESCAPE
init|=
literal|'\\'
decl_stmt|,
name|POUND
init|=
literal|'#'
decl_stmt|,
name|ASTERISK
init|=
literal|'*'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ESCAPED_COLON
init|=
name|Character
operator|.
name|toString
argument_list|(
name|ESCAPE
argument_list|)
operator|+
name|Character
operator|.
name|toString
argument_list|(
name|COLON
argument_list|)
decl_stmt|;
comment|// Escape the escape
specifier|public
specifier|static
specifier|final
name|String
name|ESCAPED_COLON_REGEX
init|=
name|Character
operator|.
name|toString
argument_list|(
name|ESCAPE
argument_list|)
operator|+
name|Character
operator|.
name|toString
argument_list|(
name|ESCAPE
argument_list|)
operator|+
name|Character
operator|.
name|toString
argument_list|(
name|COLON
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ESCAPED_ASTERISK
init|=
name|Character
operator|.
name|toString
argument_list|(
name|ESCAPE
argument_list|)
operator|+
name|Character
operator|.
name|toString
argument_list|(
name|ASTERISK
argument_list|)
decl_stmt|;
comment|// Escape the escape, and escape the asterisk
specifier|public
specifier|static
specifier|final
name|String
name|ESCAPED_ASERTISK_REGEX
init|=
name|Character
operator|.
name|toString
argument_list|(
name|ESCAPE
argument_list|)
operator|+
name|Character
operator|.
name|toString
argument_list|(
name|ESCAPE
argument_list|)
operator|+
name|Character
operator|.
name|toString
argument_list|(
name|ESCAPE
argument_list|)
operator|+
name|Character
operator|.
name|toString
argument_list|(
name|ASTERISK
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Charset
name|UTF_8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

