begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloHiveConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|TooManyAccumuloColumnsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ColumnMapper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ColumnMapper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|columnMappings
decl_stmt|;
specifier|private
name|int
name|rowIdOffset
decl_stmt|;
specifier|private
name|HiveAccumuloRowIdColumnMapping
name|rowIdMapping
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|ColumnEncoding
name|defaultEncoding
decl_stmt|;
comment|/**    * Create a mapping from Hive columns (rowID and column) to Accumulo columns (column family and    * qualifier). The ordering of the {@link ColumnMapping}s is important as it aligns with the    * ordering of the columns for the Hive table schema.    *    * @param serializedColumnMappings    *          Comma-separated list of designators that map to Accumulo columns whose offsets    *          correspond to the Hive table schema    * @throws TooManyAccumuloColumnsException    */
specifier|public
name|ColumnMapper
parameter_list|(
name|String
name|serializedColumnMappings
parameter_list|,
name|String
name|defaultStorageType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
parameter_list|)
throws|throws
name|TooManyAccumuloColumnsException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|serializedColumnMappings
argument_list|)
expr_stmt|;
name|String
index|[]
name|parsedColumnMappingValue
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|serializedColumnMappings
argument_list|,
name|AccumuloHiveConstants
operator|.
name|COMMA
argument_list|)
decl_stmt|;
name|columnMappings
operator|=
operator|new
name|ArrayList
argument_list|<
name|ColumnMapping
argument_list|>
argument_list|(
name|parsedColumnMappingValue
operator|.
name|length
argument_list|)
expr_stmt|;
name|rowIdOffset
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Determine the default encoding type (specified on the table, or the global default
comment|// if none was provided)
if|if
condition|(
literal|null
operator|==
name|defaultStorageType
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|defaultStorageType
argument_list|)
condition|)
block|{
name|defaultEncoding
operator|=
name|ColumnEncoding
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|defaultEncoding
operator|=
name|ColumnEncoding
operator|.
name|get
argument_list|(
name|defaultStorageType
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parsedColumnMappingValue
operator|.
name|length
operator|>
name|columnNames
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TooManyAccumuloColumnsException
argument_list|(
literal|"Found "
operator|+
name|parsedColumnMappingValue
operator|.
name|length
operator|+
literal|" columns, but only know of "
operator|+
name|columnNames
operator|.
name|size
argument_list|()
operator|+
literal|" Hive column names"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parsedColumnMappingValue
operator|.
name|length
operator|>
name|columnTypes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TooManyAccumuloColumnsException
argument_list|(
literal|"Found "
operator|+
name|parsedColumnMappingValue
operator|.
name|length
operator|+
literal|" columns, but only know of "
operator|+
name|columnNames
operator|.
name|size
argument_list|()
operator|+
literal|" Hive column types"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parsedColumnMappingValue
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|columnMappingStr
init|=
name|parsedColumnMappingValue
index|[
name|i
index|]
decl_stmt|;
comment|// Create the mapping for this column, with configured encoding
name|ColumnMapping
name|columnMapping
init|=
name|ColumnMappingFactory
operator|.
name|get
argument_list|(
name|columnMappingStr
argument_list|,
name|defaultEncoding
argument_list|,
name|columnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|columnTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnMapping
operator|instanceof
name|HiveAccumuloRowIdColumnMapping
condition|)
block|{
if|if
condition|(
operator|-
literal|1
operator|!=
name|rowIdOffset
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Column mapping should only have one definition with a value of "
operator|+
name|AccumuloHiveConstants
operator|.
name|ROWID
argument_list|)
throw|;
block|}
name|rowIdOffset
operator|=
name|i
expr_stmt|;
name|rowIdMapping
operator|=
operator|(
name|HiveAccumuloRowIdColumnMapping
operator|)
name|columnMapping
expr_stmt|;
block|}
name|columnMappings
operator|.
name|add
argument_list|(
name|columnMapping
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|columnMappings
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|ColumnMapping
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|columnMappings
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|getColumnMappings
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|columnMappings
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasRowIdMapping
parameter_list|()
block|{
return|return
literal|null
operator|!=
name|rowIdMapping
return|;
block|}
specifier|public
name|HiveAccumuloRowIdColumnMapping
name|getRowIdMapping
parameter_list|()
block|{
return|return
name|rowIdMapping
return|;
block|}
specifier|public
name|int
name|getRowIdOffset
parameter_list|()
block|{
return|return
name|rowIdOffset
return|;
block|}
specifier|public
name|String
name|getTypesString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnMapping
name|columnMapping
range|:
name|columnMappings
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|AccumuloHiveConstants
operator|.
name|COLON
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnMapping
operator|instanceof
name|HiveAccumuloRowIdColumnMapping
condition|)
block|{
comment|// the rowID column is a string
name|sb
operator|.
name|append
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnMapping
operator|instanceof
name|HiveAccumuloColumnMapping
condition|)
block|{
comment|// a normal column is also a string
name|sb
operator|.
name|append
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|columnMapping
operator|instanceof
name|HiveAccumuloMapColumnMapping
condition|)
block|{
comment|// TODO can we be more precise than string,string?
name|sb
operator|.
name|append
argument_list|(
name|serdeConstants
operator|.
name|MAP_TYPE_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot process ColumnMapping of type "
operator|+
name|columnMapping
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|ColumnMapping
name|getColumnMappingForHiveColumn
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|hiveColumns
parameter_list|,
name|String
name|hiveColumnName
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|hiveColumns
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|hiveColumnName
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|columnMappings
operator|.
name|size
argument_list|()
operator|<=
name|hiveColumns
operator|.
name|size
argument_list|()
argument_list|,
literal|"Expected equal number of column mappings and Hive columns, "
operator|+
name|columnMappings
operator|+
literal|", "
operator|+
name|hiveColumns
argument_list|)
expr_stmt|;
name|int
name|hiveColumnOffset
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|hiveColumnOffset
operator|<
name|hiveColumns
operator|.
name|size
argument_list|()
operator|&&
name|hiveColumnOffset
operator|<
name|columnMappings
operator|.
name|size
argument_list|()
condition|;
name|hiveColumnOffset
operator|++
control|)
block|{
if|if
condition|(
name|hiveColumns
operator|.
name|get
argument_list|(
name|hiveColumnOffset
argument_list|)
operator|.
name|equals
argument_list|(
name|hiveColumnName
argument_list|)
condition|)
block|{
return|return
name|columnMappings
operator|.
name|get
argument_list|(
name|hiveColumnOffset
argument_list|)
return|;
block|}
block|}
name|log
operator|.
name|error
argument_list|(
literal|"Could not find offset for Hive column with name '"
operator|+
name|hiveColumnName
operator|+
literal|"' with columns "
operator|+
name|hiveColumns
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find offset for Hive column with name "
operator|+
name|hiveColumnName
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|columnMappings
argument_list|)
operator|.
name|append
argument_list|(
literal|", rowIdOffset: "
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|rowIdOffset
argument_list|)
operator|.
name|append
argument_list|(
literal|", defaultEncoding: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|defaultEncoding
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

