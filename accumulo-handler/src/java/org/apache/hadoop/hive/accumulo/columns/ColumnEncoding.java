begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloHiveConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Encapsulate the encoding of values within the given column in Accumulo  */
end_comment

begin_enum
specifier|public
enum|enum
name|ColumnEncoding
block|{
name|STRING
argument_list|(
literal|"string"
argument_list|,
literal|"s"
argument_list|)
block|,
name|BINARY
argument_list|(
literal|"binary"
argument_list|,
literal|"b"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnEncoding
argument_list|>
name|CODE_CACHE
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnEncoding
argument_list|>
argument_list|()
block|,
name|NAME_CACHE
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnEncoding
argument_list|>
argument_list|()
block|;
static|static
block|{
name|CODE_CACHE
operator|.
name|put
argument_list|(
name|STRING
operator|.
name|getCode
argument_list|()
argument_list|,
name|STRING
argument_list|)
expr_stmt|;
name|CODE_CACHE
operator|.
name|put
argument_list|(
name|BINARY
operator|.
name|getCode
argument_list|()
argument_list|,
name|BINARY
argument_list|)
expr_stmt|;
name|NAME_CACHE
operator|.
name|put
argument_list|(
name|STRING
operator|.
name|getName
argument_list|()
argument_list|,
name|STRING
argument_list|)
expr_stmt|;
name|NAME_CACHE
operator|.
name|put
argument_list|(
name|BINARY
operator|.
name|getName
argument_list|()
argument_list|,
name|BINARY
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|code
decl_stmt|;
specifier|private
name|ColumnEncoding
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|code
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|String
name|getCode
parameter_list|()
block|{
return|return
name|code
return|;
block|}
comment|/**    * Get the ColumnEncoding which has the given code.    *    * @param code    *          The one-character 'code' which uniquely identifies the ColumnEncoding    * @return The ColumnEncoding with the code equal to the provided argument    */
specifier|public
specifier|static
name|ColumnEncoding
name|fromCode
parameter_list|(
name|String
name|code
parameter_list|)
block|{
if|if
condition|(
operator|!
name|CODE_CACHE
operator|.
name|containsKey
argument_list|(
name|code
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ColumnEncoding defined with code "
operator|+
name|code
argument_list|)
throw|;
block|}
return|return
name|CODE_CACHE
operator|.
name|get
argument_list|(
name|code
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ColumnEncoding
name|fromName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|NAME_CACHE
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ColumnEncoding defined with name "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|NAME_CACHE
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ColumnEncoding
name|get
parameter_list|(
name|String
name|nameOrCode
parameter_list|)
block|{
name|ColumnEncoding
name|encoding
init|=
name|CODE_CACHE
operator|.
name|get
argument_list|(
name|nameOrCode
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|encoding
condition|)
block|{
return|return
name|encoding
return|;
block|}
name|encoding
operator|=
name|NAME_CACHE
operator|.
name|get
argument_list|(
name|nameOrCode
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|encoding
condition|)
block|{
return|return
name|encoding
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ColumnEncoding defined for "
operator|+
name|nameOrCode
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|ColumnEncoding
name|getFromMapping
parameter_list|(
name|String
name|columnMapping
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|columnMapping
argument_list|)
expr_stmt|;
name|String
name|encoding
init|=
name|getColumnEncoding
argument_list|(
name|columnMapping
argument_list|)
decl_stmt|;
return|return
name|get
argument_list|(
name|encoding
argument_list|)
return|;
block|}
comment|/**    * Determines if a custom encoding was specified for the give column.    *    * @param columnMapping    *          The mapping from Hive column to an Accumulo column    * @return True if the column mapping string specifies an encoding, false otherwise    */
specifier|public
specifier|static
name|boolean
name|hasColumnEncoding
parameter_list|(
name|String
name|columnMapping
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|columnMapping
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
name|columnMapping
operator|.
name|lastIndexOf
argument_list|(
name|AccumuloHiveConstants
operator|.
name|POUND
argument_list|)
decl_stmt|;
comment|// Make sure that the '#' wasn't escaped
if|if
condition|(
literal|0
operator|<
name|offset
operator|&&
name|AccumuloHiveConstants
operator|.
name|ESCAPE
operator|==
name|columnMapping
operator|.
name|charAt
argument_list|(
name|offset
operator|-
literal|1
argument_list|)
condition|)
block|{
comment|// The encoding name/codes don't contain pound signs
return|return
literal|false
return|;
block|}
return|return
operator|-
literal|1
operator|!=
name|offset
return|;
block|}
specifier|public
specifier|static
name|String
name|getColumnEncoding
parameter_list|(
name|String
name|columnMapping
parameter_list|)
block|{
name|int
name|offset
init|=
name|columnMapping
operator|.
name|lastIndexOf
argument_list|(
name|AccumuloHiveConstants
operator|.
name|POUND
argument_list|)
decl_stmt|;
comment|// Make sure that the '#' wasn't escaped
if|if
condition|(
literal|0
operator|<
name|offset
operator|&&
name|AccumuloHiveConstants
operator|.
name|ESCAPE
operator|==
name|columnMapping
operator|.
name|charAt
argument_list|(
name|offset
operator|-
literal|1
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Column mapping did not contain a column encoding: "
operator|+
name|columnMapping
argument_list|)
throw|;
block|}
return|return
name|columnMapping
operator|.
name|substring
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ColumnEncoding
name|getDefault
parameter_list|()
block|{
return|return
name|STRING
return|;
block|}
comment|/**    * Removes the column encoding code and separator from the original column mapping string. Throws    * an IllegalArgumentException if this method is called on a string that doesn't contain a code.    *    * @param columnMapping    *          The mapping from Hive column to Accumulo column    * @return The column mapping with the code removed    */
specifier|public
specifier|static
name|String
name|stripCode
parameter_list|(
name|String
name|columnMapping
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|columnMapping
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
name|columnMapping
operator|.
name|lastIndexOf
argument_list|(
name|AccumuloHiveConstants
operator|.
name|POUND
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|offset
operator|||
operator|(
literal|0
operator|<
name|offset
operator|&&
name|AccumuloHiveConstants
operator|.
name|ESCAPE
operator|==
name|columnMapping
operator|.
name|charAt
argument_list|(
name|offset
operator|-
literal|1
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Provided column mapping does not define a column encoding"
argument_list|)
throw|;
block|}
return|return
name|columnMapping
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isMapEncoding
parameter_list|(
name|String
name|columnEncoding
parameter_list|)
block|{
return|return
operator|-
literal|1
operator|!=
name|columnEncoding
operator|.
name|indexOf
argument_list|(
name|AccumuloHiveConstants
operator|.
name|COLON
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Entry
argument_list|<
name|ColumnEncoding
argument_list|,
name|ColumnEncoding
argument_list|>
name|getMapEncoding
parameter_list|(
name|String
name|columnEncoding
parameter_list|)
block|{
name|int
name|index
init|=
name|columnEncoding
operator|.
name|indexOf
argument_list|(
name|AccumuloHiveConstants
operator|.
name|COLON
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|index
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Serialized column encoding did not contain a pair of encodings to split"
argument_list|)
throw|;
block|}
name|String
name|encoding1
init|=
name|columnEncoding
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|,
name|encoding2
operator|=
name|columnEncoding
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|get
argument_list|(
name|encoding1
argument_list|)
argument_list|,
name|get
argument_list|(
name|encoding2
argument_list|)
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

