begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloHiveConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * ColumnMapping for combining Accumulo columns into a single Hive Map. Expects ColumnEncoding  * values for both the Key and Value of the Map.  */
end_comment

begin_class
specifier|public
class|class
name|HiveAccumuloMapColumnMapping
extends|extends
name|ColumnMapping
block|{
specifier|protected
specifier|final
name|String
name|columnFamily
decl_stmt|,
name|columnQualifierPrefix
decl_stmt|;
specifier|protected
specifier|final
name|ColumnEncoding
name|keyEncoding
decl_stmt|,
name|valueEncoding
decl_stmt|;
comment|/**    * @param columnFamily    *          The column family that all qualifiers within should be placed into the same Hive map    * @param columnQualifierPrefix    *          The column qualifier prefix to include in the map, null is treated as an empty prefix    * @param keyEncoding    *          The encoding scheme for keys in this column family    * @param valueEncoding    *          The encoding scheme for the Accumulo values    */
specifier|public
name|HiveAccumuloMapColumnMapping
parameter_list|(
name|String
name|columnFamily
parameter_list|,
name|String
name|columnQualifierPrefix
parameter_list|,
name|ColumnEncoding
name|keyEncoding
parameter_list|,
name|ColumnEncoding
name|valueEncoding
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|columnType
parameter_list|)
block|{
comment|// Try to make something reasonable to pass up to the base class
name|super
argument_list|(
operator|(
literal|null
operator|==
name|columnFamily
condition|?
literal|""
else|:
name|columnFamily
operator|)
operator|+
name|AccumuloHiveConstants
operator|.
name|COLON
argument_list|,
name|valueEncoding
argument_list|,
name|columnName
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|columnFamily
argument_list|,
literal|"Must provide a column family"
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnFamily
operator|=
name|columnFamily
expr_stmt|;
name|this
operator|.
name|columnQualifierPrefix
operator|=
operator|(
literal|null
operator|==
name|columnQualifierPrefix
operator|)
condition|?
literal|""
else|:
name|columnQualifierPrefix
expr_stmt|;
name|this
operator|.
name|keyEncoding
operator|=
name|keyEncoding
expr_stmt|;
name|this
operator|.
name|valueEncoding
operator|=
name|valueEncoding
expr_stmt|;
block|}
specifier|public
name|String
name|getColumnFamily
parameter_list|()
block|{
return|return
name|columnFamily
return|;
block|}
specifier|public
name|String
name|getColumnQualifierPrefix
parameter_list|()
block|{
return|return
name|columnQualifierPrefix
return|;
block|}
specifier|public
name|ColumnEncoding
name|getKeyEncoding
parameter_list|()
block|{
return|return
name|keyEncoding
return|;
block|}
specifier|public
name|ColumnEncoding
name|getValueEncoding
parameter_list|()
block|{
return|return
name|valueEncoding
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|HiveAccumuloMapColumnMapping
condition|)
block|{
name|HiveAccumuloMapColumnMapping
name|other
init|=
operator|(
name|HiveAccumuloMapColumnMapping
operator|)
name|o
decl_stmt|;
return|return
name|columnFamily
operator|.
name|equals
argument_list|(
name|other
operator|.
name|columnFamily
argument_list|)
operator|&&
name|columnQualifierPrefix
operator|.
name|equals
argument_list|(
name|other
operator|.
name|columnQualifierPrefix
argument_list|)
operator|&&
name|keyEncoding
operator|.
name|equals
argument_list|(
name|other
operator|.
name|keyEncoding
argument_list|)
operator|&&
name|valueEncoding
operator|.
name|equals
argument_list|(
name|other
operator|.
name|valueEncoding
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashCodeBuilder
name|hcb
init|=
operator|new
name|HashCodeBuilder
argument_list|(
literal|23
argument_list|,
literal|31
argument_list|)
decl_stmt|;
name|hcb
operator|.
name|append
argument_list|(
name|columnFamily
argument_list|)
operator|.
name|append
argument_list|(
name|columnQualifierPrefix
argument_list|)
operator|.
name|append
argument_list|(
name|keyEncoding
argument_list|)
operator|.
name|append
argument_list|(
name|valueEncoding
argument_list|)
expr_stmt|;
return|return
name|hcb
operator|.
name|toHashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|columnFamily
operator|+
literal|":"
operator|+
name|columnQualifierPrefix
operator|+
literal|"* encoding: "
operator|+
name|keyEncoding
operator|+
literal|":"
operator|+
name|valueEncoding
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

