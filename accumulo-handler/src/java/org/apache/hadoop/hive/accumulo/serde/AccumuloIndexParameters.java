begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloDefaultIndexScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloIndexScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloIndexScannerException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Accumulo Index Parameters for Hive tables.  */
end_comment

begin_class
specifier|public
class|class
name|AccumuloIndexParameters
block|{
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_ROWIDS
init|=
literal|20000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_SCANNER
init|=
literal|"accumulo.index.scanner"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_INDEX_ROWS
init|=
literal|"accumulo.index.rows.max"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDEXED_COLUMNS
init|=
literal|"accumulo.indexed.columns"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDEXTABLE_NAME
init|=
literal|"accumulo.indextable.name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|EMPTY_SET
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|AccumuloIndexParameters
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|String
name|getIndexTable
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|INDEXTABLE_NAME
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMaxIndexRows
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_INDEX_ROWS
argument_list|,
name|DEFAULT_MAX_ROWIDS
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|getIndexColumns
parameter_list|()
block|{
name|String
name|colmap
init|=
name|conf
operator|.
name|get
argument_list|(
name|INDEXED_COLUMNS
argument_list|)
decl_stmt|;
if|if
condition|(
name|colmap
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|colmap
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
name|col
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cols
return|;
block|}
return|return
name|EMPTY_SET
return|;
block|}
specifier|public
specifier|final
name|Authorizations
name|getTableAuths
parameter_list|()
block|{
name|String
name|auths
init|=
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|AUTHORIZATIONS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|auths
operator|!=
literal|null
operator|&&
operator|!
name|auths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|Authorizations
argument_list|(
name|auths
operator|.
name|trim
argument_list|()
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|Authorizations
argument_list|()
return|;
block|}
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
specifier|final
name|AccumuloIndexScanner
name|createScanner
parameter_list|()
throws|throws
name|AccumuloIndexScannerException
block|{
name|AccumuloIndexScanner
name|handler
decl_stmt|;
name|String
name|classname
init|=
name|conf
operator|.
name|get
argument_list|(
name|INDEX_SCANNER
argument_list|)
decl_stmt|;
if|if
condition|(
name|classname
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|handler
operator|=
operator|(
name|AccumuloIndexScanner
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|classname
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AccumuloIndexScannerException
argument_list|(
literal|"Cannot use index scanner class: "
operator|+
name|classname
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|handler
operator|=
operator|new
name|AccumuloDefaultIndexScanner
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|handler
return|;
block|}
block|}
end_class

end_unit

