begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|mr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mapreduce
operator|.
name|AccumuloInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|util
operator|.
name|PeekingIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloHiveRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|PrimitiveComparisonFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Translate the {@link Key} {@link Value} pairs from {@link AccumuloInputFormat} to a  * {@link Writable} for consumption by the {@link AccumuloSerDe}.  */
end_comment

begin_class
specifier|public
class|class
name|HiveAccumuloRecordReader
implements|implements
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|AccumuloHiveRow
argument_list|>
block|{
specifier|private
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|PeekingIterator
argument_list|<
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
argument_list|>
name|recordReader
decl_stmt|;
specifier|private
name|int
name|iteratorCount
decl_stmt|;
specifier|public
name|HiveAccumuloRecordReader
parameter_list|(
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|PeekingIterator
argument_list|<
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
argument_list|>
name|recordReader
parameter_list|,
name|int
name|iteratorCount
parameter_list|)
block|{
name|this
operator|.
name|recordReader
operator|=
name|recordReader
expr_stmt|;
name|this
operator|.
name|iteratorCount
operator|=
name|iteratorCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|recordReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Text
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|Text
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AccumuloHiveRow
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|AccumuloHiveRow
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|recordReader
operator|.
name|getProgress
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|Text
name|rowKey
parameter_list|,
name|AccumuloHiveRow
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|key
init|=
name|recordReader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|PeekingIterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|iter
init|=
name|recordReader
operator|.
name|createValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|recordReader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|iter
argument_list|)
condition|)
block|{
name|row
operator|.
name|clear
argument_list|()
expr_stmt|;
name|row
operator|.
name|setRowId
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Key
argument_list|>
name|keys
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Value
argument_list|>
name|values
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// collect key/values for this row.
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|kv
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iteratorCount
operator|==
literal|0
condition|)
block|{
comment|// no encoded values, we can push directly to row.
name|pushToValue
argument_list|(
name|keys
argument_list|,
name|values
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iteratorCount
condition|;
name|i
operator|++
control|)
block|{
comment|// each iterator creates a level of encoding.
name|SortedMap
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|decoded
init|=
name|PrimitiveComparisonFilter
operator|.
name|decodeRow
argument_list|(
name|keys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|keys
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|decoded
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|decoded
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pushToValue
argument_list|(
name|keys
argument_list|,
name|values
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|// after decoding we can push to value.
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// flatten key/value pairs into row object for use in Serde.
specifier|private
name|void
name|pushToValue
parameter_list|(
name|List
argument_list|<
name|Key
argument_list|>
name|keys
parameter_list|,
name|List
argument_list|<
name|Value
argument_list|>
name|values
parameter_list|,
name|AccumuloHiveRow
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|Key
argument_list|>
name|kIter
init|=
name|keys
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Value
argument_list|>
name|vIter
init|=
name|values
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|kIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Key
name|k
init|=
name|kIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Value
name|v
init|=
name|vIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
name|k
operator|.
name|getColumnFamily
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|k
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|v
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

