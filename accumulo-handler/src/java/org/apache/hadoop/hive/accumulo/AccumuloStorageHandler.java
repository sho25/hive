begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|admin
operator|.
name|TableOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mapred
operator|.
name|AccumuloInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mapred
operator|.
name|AccumuloOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|impl
operator|.
name|InputConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|impl
operator|.
name|OutputConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|security
operator|.
name|tokens
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|fate
operator|.
name|Fate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|start
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|trace
operator|.
name|instrument
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|mr
operator|.
name|HiveAccumuloTableInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|mr
operator|.
name|HiveAccumuloTableOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|AccumuloPredicateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloSerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|DefaultStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStoragePredicateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Create table mapping to Accumulo for Hive. Handle predicate pushdown if necessary.  */
end_comment

begin_class
specifier|public
class|class
name|AccumuloStorageHandler
extends|extends
name|DefaultStorageHandler
implements|implements
name|HiveMetaHook
implements|,
name|HiveStoragePredicateHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AccumuloStorageHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PREFIX
init|=
literal|"default"
decl_stmt|;
specifier|protected
name|AccumuloPredicateHandler
name|predicateHandler
init|=
name|AccumuloPredicateHandler
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|protected
name|AccumuloConnectionParameters
name|connectionParams
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|HiveAccumuloHelper
name|helper
init|=
operator|new
name|HiveAccumuloHelper
argument_list|()
decl_stmt|;
comment|/**    * Push down table properties into the JobConf.    *    * @param desc    *          Hive table description    * @param jobProps    *          Properties that will be added to the JobConf by Hive    */
annotation|@
name|Override
specifier|public
name|void
name|configureTableJobProperties
parameter_list|(
name|TableDesc
name|desc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProps
parameter_list|)
block|{
comment|// Should not be getting invoked, configureInputJobProperties or configureOutputJobProperties
comment|// should be invoked instead.
name|configureInputJobProperties
argument_list|(
name|desc
argument_list|,
name|jobProps
argument_list|)
expr_stmt|;
name|configureOutputJobProperties
argument_list|(
name|desc
argument_list|,
name|jobProps
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getTableName
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Use TBLPROPERTIES
name|String
name|tableName
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|tableName
condition|)
block|{
return|return
name|tableName
return|;
block|}
comment|// Then try SERDEPROPERTIES
name|tableName
operator|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|TABLE_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|tableName
condition|)
block|{
return|return
name|tableName
return|;
block|}
comment|// Use the hive table name, ignoring the default database
if|if
condition|(
name|DEFAULT_PREFIX
operator|.
name|equals
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|table
operator|.
name|getTableName
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
return|;
block|}
block|}
specifier|protected
name|String
name|getTableName
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|)
block|{
name|Properties
name|props
init|=
name|tableDesc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|tableName
condition|)
block|{
return|return
name|tableName
return|;
block|}
name|tableName
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|hive_metastoreConstants
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableName
operator|.
name|startsWith
argument_list|(
name|DEFAULT_PREFIX
operator|+
literal|"."
argument_list|)
condition|)
block|{
return|return
name|tableName
operator|.
name|substring
argument_list|(
name|DEFAULT_PREFIX
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|connectionParams
operator|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|AbstractSerDe
argument_list|>
name|getSerDeClass
parameter_list|()
block|{
return|return
name|AccumuloSerDe
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|HiveMetaHook
name|getMetaHook
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|HiveAuthorizationProvider
name|getAuthorizationProvider
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureInputJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
block|{
name|Properties
name|props
init|=
name|tableDesc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|jobProperties
operator|.
name|put
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|tableName
condition|)
block|{
name|tableName
operator|=
name|getTableName
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
name|jobProperties
operator|.
name|put
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|TABLE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|String
name|useIterators
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|ITERATOR_PUSHDOWN_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|useIterators
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|useIterators
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|&&
operator|!
name|useIterators
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected value of true or false for "
operator|+
name|AccumuloSerDeParameters
operator|.
name|ITERATOR_PUSHDOWN_KEY
argument_list|)
throw|;
block|}
name|jobProperties
operator|.
name|put
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|ITERATOR_PUSHDOWN_KEY
argument_list|,
name|useIterators
argument_list|)
expr_stmt|;
block|}
name|String
name|storageType
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|DEFAULT_STORAGE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|storageType
condition|)
block|{
name|jobProperties
operator|.
name|put
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|DEFAULT_STORAGE_TYPE
argument_list|,
name|storageType
argument_list|)
expr_stmt|;
block|}
name|String
name|authValue
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|AUTHORIZATIONS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|authValue
condition|)
block|{
name|jobProperties
operator|.
name|put
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|AUTHORIZATIONS_KEY
argument_list|,
name|authValue
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Computed input job properties of "
operator|+
name|jobProperties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureOutputJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
block|{
name|Properties
name|props
init|=
name|tableDesc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|// Adding these job properties will make them available to the OutputFormat in checkOutputSpecs
name|jobProperties
operator|.
name|put
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|TABLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|tableName
condition|)
block|{
name|tableName
operator|=
name|getTableName
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
name|jobProperties
operator|.
name|put
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|TABLE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|DEFAULT_STORAGE_TYPE
argument_list|)
condition|)
block|{
name|jobProperties
operator|.
name|put
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|DEFAULT_STORAGE_TYPE
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|DEFAULT_STORAGE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|VISIBILITY_LABEL_KEY
argument_list|)
condition|)
block|{
name|jobProperties
operator|.
name|put
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|VISIBILITY_LABEL_KEY
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|VISIBILITY_LABEL_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|getInputFormatClass
parameter_list|()
block|{
return|return
name|HiveAccumuloTableInputFormat
operator|.
name|class
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|getOutputFormatClass
parameter_list|()
block|{
return|return
name|HiveAccumuloTableOutputFormat
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|isExternal
init|=
name|isExternalTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Location can't be specified for Accumulo"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|String
name|columnMapping
init|=
name|serdeParams
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnMapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
operator|+
literal|" missing from SERDEPROPERTIES"
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|tblName
init|=
name|getTableName
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|Connector
name|connector
init|=
name|connectionParams
operator|.
name|getConnector
argument_list|()
decl_stmt|;
name|TableOperations
name|tableOpts
init|=
name|connector
operator|.
name|tableOperations
argument_list|()
decl_stmt|;
comment|// Attempt to create the table, taking EXTERNAL into consideration
if|if
condition|(
operator|!
name|tableOpts
operator|.
name|exists
argument_list|(
name|tblName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isExternal
condition|)
block|{
name|tableOpts
operator|.
name|create
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Accumulo table "
operator|+
name|tblName
operator|+
literal|" doesn't exist even though declared external"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isExternal
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table "
operator|+
name|tblName
operator|+
literal|" already exists in Accumulo. Use CREATE EXTERNAL TABLE to register with Hive."
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|AccumuloSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AccumuloException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|boolean
name|isExternalTable
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// Same as commitDropTable where we always delete the data (accumulo table)
name|commitDropTable
argument_list|(
name|table
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitDropTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|tblName
init|=
name|getTableName
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isExternalTable
argument_list|(
name|table
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|deleteData
condition|)
block|{
name|TableOperations
name|tblOpts
init|=
name|connectionParams
operator|.
name|getConnector
argument_list|()
operator|.
name|tableOperations
argument_list|()
decl_stmt|;
if|if
condition|(
name|tblOpts
operator|.
name|exists
argument_list|(
name|tblName
argument_list|)
condition|)
block|{
name|tblOpts
operator|.
name|delete
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|AccumuloException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AccumuloSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDropTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackDropTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// do nothing
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|DecomposedPredicate
name|decomposePredicate
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|Deserializer
name|deserializer
parameter_list|,
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|deserializer
operator|instanceof
name|AccumuloSerDe
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected an AccumuloSerDe but got "
operator|+
name|deserializer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|AccumuloSerDe
name|serDe
init|=
operator|(
name|AccumuloSerDe
operator|)
name|deserializer
decl_stmt|;
if|if
condition|(
name|serDe
operator|.
name|getIteratorPushdown
argument_list|()
condition|)
block|{
return|return
name|predicateHandler
operator|.
name|decompose
argument_list|(
name|conf
argument_list|,
name|desc
argument_list|)
return|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Set to ignore Accumulo iterator pushdown, skipping predicate handler."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|configureJobConf
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
block|{
try|try
block|{
name|Utils
operator|.
name|addDependencyJars
argument_list|(
name|jobConf
argument_list|,
name|Tracer
operator|.
name|class
argument_list|,
name|Fate
operator|.
name|class
argument_list|,
name|Connector
operator|.
name|class
argument_list|,
name|Main
operator|.
name|class
argument_list|,
name|ZooKeeper
operator|.
name|class
argument_list|,
name|AccumuloStorageHandler
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not add necessary Accumulo dependencies to classpath"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Properties
name|tblProperties
init|=
name|tableDesc
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|AccumuloSerDeParameters
name|serDeParams
init|=
literal|null
decl_stmt|;
try|try
block|{
name|serDeParams
operator|=
operator|new
name|AccumuloSerDeParameters
argument_list|(
name|jobConf
argument_list|,
name|tblProperties
argument_list|,
name|AccumuloSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not instantiate AccumuloSerDeParameters"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|serDeParams
operator|.
name|getRowIdFactory
argument_list|()
operator|.
name|addDependencyJars
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not add necessary dependencies for "
operator|+
name|serDeParams
operator|.
name|getRowIdFactory
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// When Kerberos is enabled, we have to add the Accumulo delegation token to the
comment|// Job so that it gets passed down to the YARN/Tez task.
if|if
condition|(
name|connectionParams
operator|.
name|useSasl
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Obtain a delegation token from Accumulo
name|Connector
name|conn
init|=
name|connectionParams
operator|.
name|getConnector
argument_list|()
decl_stmt|;
name|AuthenticationToken
name|token
init|=
name|helper
operator|.
name|getDelegationToken
argument_list|(
name|conn
argument_list|)
decl_stmt|;
comment|// Make sure the Accumulo token is set in the Configuration (only a stub of the Accumulo
comment|// AuthentiationToken is serialized, not the entire token). configureJobConf may be
comment|// called multiple times with the same JobConf which results in an error from Accumulo
comment|// MapReduce API. Catch the error, log a debug message and just keep going
try|try
block|{
name|InputConfigurator
operator|.
name|setConnectorInfo
argument_list|(
name|AccumuloInputFormat
operator|.
name|class
argument_list|,
name|jobConf
argument_list|,
name|connectionParams
operator|.
name|getAccumuloUserName
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// The implementation balks when this method is invoked multiple times
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring IllegalArgumentException about re-setting connector information"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|OutputConfigurator
operator|.
name|setConnectorInfo
argument_list|(
name|AccumuloOutputFormat
operator|.
name|class
argument_list|,
name|jobConf
argument_list|,
name|connectionParams
operator|.
name|getAccumuloUserName
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// The implementation balks when this method is invoked multiple times
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring IllegalArgumentException about re-setting connector information"
argument_list|)
expr_stmt|;
block|}
comment|// Convert the Accumulo token in a Hadoop token
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|accumuloToken
init|=
name|helper
operator|.
name|getHadoopToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Adding Hadoop Token for Accumulo to Job's Credentials"
argument_list|)
expr_stmt|;
comment|// Add the Hadoop token to the JobConf
name|helper
operator|.
name|mergeTokenIntoJobConf
argument_list|(
name|jobConf
argument_list|,
name|accumuloToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to obtain DelegationToken for "
operator|+
name|connectionParams
operator|.
name|getAccumuloUserName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

