begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|admin
operator|.
name|SecurityOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|security
operator|.
name|tokens
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helper class to hold common methods across the InputFormat, OutputFormat and StorageHandler.  */
end_comment

begin_class
specifier|public
class|class
name|HiveAccumuloHelper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveAccumuloHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Constant from Accumulo's DelegationTokenImpl
specifier|public
specifier|static
specifier|final
name|Text
name|ACCUMULO_SERVICE
init|=
operator|new
name|Text
argument_list|(
literal|"ACCUMULO_AUTH_TOKEN"
argument_list|)
decl_stmt|;
comment|// Constants for DelegationToken reflection to continue to support 1.6
specifier|private
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_CONFIG_CLASS_NAME
init|=
literal|"org.apache.accumulo.core.client.admin.DelegationTokenConfig"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_IMPL_CLASS_NAME
init|=
literal|"org.apache.accumulo.core.client.impl.DelegationTokenImpl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_DELEGATION_TOKEN_METHOD_NAME
init|=
literal|"getDelegationToken"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_IDENTIFIER_METHOD_NAME
init|=
literal|"getIdentifier"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_PASSWORD_METHOD_NAME
init|=
literal|"getPassword"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_SERVICE_NAME_METHOD_NAME
init|=
literal|"getServiceName"
decl_stmt|;
comment|// Constants for ClientConfiguration and setZooKeeperInstance reflection
comment|// to continue to support 1.5
specifier|private
specifier|static
specifier|final
name|String
name|CLIENT_CONFIGURATION_CLASS_NAME
init|=
literal|"org.apache.accumulo.core.client.ClientConfiguration"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOAD_DEFAULT_METHOD_NAME
init|=
literal|"loadDefault"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_PROPERTY_METHOD_NAME
init|=
literal|"setProperty"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INSTANCE_ZOOKEEPER_HOST
init|=
literal|"instance.zookeeper.host"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INSTANCE_NAME
init|=
literal|"instance.name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INSTANCE_RPC_SASL_ENABLED
init|=
literal|"instance.rpc.sasl.enabled"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_ZOOKEEPER_INSTANCE_METHOD_NAME
init|=
literal|"setZooKeeperInstance"
decl_stmt|;
comment|// Constants for unwrapping the DelegationTokenStub into a DelegationTokenImpl
specifier|private
specifier|static
specifier|final
name|String
name|CONFIGURATOR_BASE_CLASS_NAME
init|=
literal|"org.apache.accumulo.core.client.mapreduce.lib.impl.ConfiguratorBase"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UNWRAP_AUTHENTICATION_TOKEN_METHOD_NAME
init|=
literal|"unwrapAuthenticationToken"
decl_stmt|;
comment|/**    * Extract the appropriate Token for Accumulo from the provided {@code user} and add it to the    * {@link JobConf}'s credentials.    *    * @param user    *          User containing tokens    * @param jobConf    *          The configuration for the job    * @throws IOException    *           If the correct token is not found or the Token fails to be merged with the    *           configuration    */
specifier|public
name|void
name|addTokenFromUserToJobConf
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|user
argument_list|,
literal|"Provided UGI was null"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|jobConf
argument_list|,
literal|"JobConf was null"
argument_list|)
expr_stmt|;
comment|// Accumulo token already in Configuration, but the Token isn't in the Job credentials like the
comment|// AccumuloInputFormat expects
name|Token
argument_list|<
name|?
argument_list|>
name|accumuloToken
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokens
init|=
name|user
operator|.
name|getTokens
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|ACCUMULO_SERVICE
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
name|accumuloToken
operator|=
name|token
expr_stmt|;
break|break;
block|}
block|}
comment|// If we didn't find the Token, we can't proceed. Log the tokens for debugging.
if|if
condition|(
literal|null
operator|==
name|accumuloToken
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not find accumulo token in user: "
operator|+
name|tokens
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not find Accumulo Token in user's tokens"
argument_list|)
throw|;
block|}
comment|// Add the Hadoop token back to the Job, the configuration still has the necessary
comment|// Accumulo token information.
name|mergeTokenIntoJobConf
argument_list|(
name|jobConf
argument_list|,
name|accumuloToken
argument_list|)
expr_stmt|;
block|}
comment|/**    * Merge the provided<code>Token</code> into the JobConf.    *    * @param jobConf    *          JobConf to merge token into    * @param accumuloToken    *          The Token    * @throws IOException    *           If the merging fails    */
specifier|public
name|void
name|mergeTokenIntoJobConf
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Token
argument_list|<
name|?
argument_list|>
name|accumuloToken
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|accumuloJobConf
init|=
operator|new
name|JobConf
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|accumuloJobConf
operator|.
name|getCredentials
argument_list|()
operator|.
name|addToken
argument_list|(
name|accumuloToken
operator|.
name|getService
argument_list|()
argument_list|,
name|accumuloToken
argument_list|)
expr_stmt|;
comment|// Merge them together.
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|mergeCredentials
argument_list|(
name|jobConf
argument_list|,
name|accumuloJobConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Obtain a DelegationToken from Accumulo in a backwards compatible manner.    *    * @param conn    *          The Accumulo connector    * @return The DelegationToken instance    * @throws IOException    *           If the token cannot be obtained    */
specifier|public
name|AuthenticationToken
name|getDelegationToken
parameter_list|(
name|Connector
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|DELEGATION_TOKEN_CONFIG_CLASS_NAME
argument_list|)
decl_stmt|;
comment|// DelegationTokenConfig delegationTokenConfig = new DelegationTokenConfig();
name|Object
name|delegationTokenConfig
init|=
name|clz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SecurityOperations
name|secOps
init|=
name|conn
operator|.
name|securityOperations
argument_list|()
decl_stmt|;
name|Method
name|getDelegationTokenMethod
init|=
name|secOps
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|GET_DELEGATION_TOKEN_METHOD_NAME
argument_list|,
name|clz
argument_list|)
decl_stmt|;
comment|// secOps.getDelegationToken(delegationTokenConfig)
return|return
operator|(
name|AuthenticationToken
operator|)
name|getDelegationTokenMethod
operator|.
name|invoke
argument_list|(
name|secOps
argument_list|,
name|delegationTokenConfig
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to obtain DelegationToken from Accumulo"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|getHadoopToken
parameter_list|(
name|AuthenticationToken
name|delegationToken
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// DelegationTokenImpl class
name|Class
argument_list|<
name|?
argument_list|>
name|delegationTokenClass
init|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|DELEGATION_TOKEN_IMPL_CLASS_NAME
argument_list|)
decl_stmt|;
comment|// Methods on DelegationToken
name|Method
name|getIdentifierMethod
init|=
name|delegationTokenClass
operator|.
name|getMethod
argument_list|(
name|GET_IDENTIFIER_METHOD_NAME
argument_list|)
decl_stmt|;
name|Method
name|getPasswordMethod
init|=
name|delegationTokenClass
operator|.
name|getMethod
argument_list|(
name|GET_PASSWORD_METHOD_NAME
argument_list|)
decl_stmt|;
name|Method
name|getServiceNameMethod
init|=
name|delegationTokenClass
operator|.
name|getMethod
argument_list|(
name|GET_SERVICE_NAME_METHOD_NAME
argument_list|)
decl_stmt|;
comment|// Treat the TokenIdentifier implementation as the abstract class to avoid dependency issues
comment|// AuthenticationTokenIdentifier identifier = delegationToken.getIdentifier();
name|TokenIdentifier
name|identifier
init|=
operator|(
name|TokenIdentifier
operator|)
name|getIdentifierMethod
operator|.
name|invoke
argument_list|(
name|delegationToken
argument_list|)
decl_stmt|;
comment|// new Token<AuthenticationTokenIdentifier>(identifier.getBytes(),
comment|//     delegationToken.getPassword(), identifier.getKind(), delegationToken.getServiceName());
return|return
operator|new
name|Token
argument_list|<
name|TokenIdentifier
argument_list|>
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|getPasswordMethod
operator|.
name|invoke
argument_list|(
name|delegationToken
argument_list|)
argument_list|,
name|identifier
operator|.
name|getKind
argument_list|()
argument_list|,
operator|(
name|Text
operator|)
name|getServiceNameMethod
operator|.
name|invoke
argument_list|(
name|delegationToken
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create Hadoop token from Accumulo DelegationToken"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Construct a<code>ClientConfiguration</code> instance in a backwards-compatible way. Allows us    * to support Accumulo 1.5    *    * @param zookeepers    *          ZooKeeper hosts    * @param instanceName    *          Instance name    * @param useSasl    *          Is SASL enabled    * @return A ClientConfiguration instance    * @throws IOException    *           If the instance fails to be created    */
specifier|public
name|Object
name|getClientConfiguration
parameter_list|(
name|String
name|zookeepers
parameter_list|,
name|String
name|instanceName
parameter_list|,
name|boolean
name|useSasl
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// Construct a new instance of ClientConfiguration
name|Class
argument_list|<
name|?
argument_list|>
name|clientConfigClass
init|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|CLIENT_CONFIGURATION_CLASS_NAME
argument_list|)
decl_stmt|;
name|Method
name|loadDefaultMethod
init|=
name|clientConfigClass
operator|.
name|getMethod
argument_list|(
name|LOAD_DEFAULT_METHOD_NAME
argument_list|)
decl_stmt|;
name|Object
name|clientConfig
init|=
name|loadDefaultMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Set instance and zookeeper hosts
name|Method
name|setPropertyMethod
init|=
name|clientConfigClass
operator|.
name|getMethod
argument_list|(
name|SET_PROPERTY_METHOD_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|setPropertyMethod
operator|.
name|invoke
argument_list|(
name|clientConfig
argument_list|,
name|INSTANCE_ZOOKEEPER_HOST
argument_list|,
name|zookeepers
argument_list|)
expr_stmt|;
name|setPropertyMethod
operator|.
name|invoke
argument_list|(
name|clientConfig
argument_list|,
name|INSTANCE_NAME
argument_list|,
name|instanceName
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSasl
condition|)
block|{
comment|// Defaults to not using SASL, set true if SASL is being used
name|setPropertyMethod
operator|.
name|invoke
argument_list|(
name|clientConfig
argument_list|,
name|INSTANCE_RPC_SASL_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|clientConfig
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to instantiate and invoke methods on ClientConfiguration"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Wrapper around<code>setZooKeeperInstance(Configuration, ClientConfiguration)</code> which only    * exists in 1.6.0 and newer. Support backwards compat.    *    * @param jobConf    *          The JobConf    * @param inputOrOutputFormatClass    *          The InputFormat or OutputFormat class    * @param zookeepers    *          ZooKeeper hosts    * @param instanceName    *          Accumulo instance name    * @param useSasl    *          Is SASL enabled    * @throws IOException    *           When invocation of the method fails    */
specifier|public
name|void
name|setZooKeeperInstance
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|inputOrOutputFormatClass
parameter_list|,
name|String
name|zookeepers
parameter_list|,
name|String
name|instanceName
parameter_list|,
name|boolean
name|useSasl
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clientConfigClass
init|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|CLIENT_CONFIGURATION_CLASS_NAME
argument_list|)
decl_stmt|;
comment|// get the ClientConfiguration
name|Object
name|clientConfig
init|=
name|getClientConfiguration
argument_list|(
name|zookeepers
argument_list|,
name|instanceName
argument_list|,
name|useSasl
argument_list|)
decl_stmt|;
comment|// AccumuloOutputFormat.setZooKeeperInstance(JobConf, ClientConfiguration) or
comment|// AccumuloInputFormat.setZooKeeperInstance(JobConf, ClientConfiguration)
name|Method
name|setZooKeeperMethod
init|=
name|inputOrOutputFormatClass
operator|.
name|getMethod
argument_list|(
name|SET_ZOOKEEPER_INSTANCE_METHOD_NAME
argument_list|,
name|JobConf
operator|.
name|class
argument_list|,
name|clientConfigClass
argument_list|)
decl_stmt|;
name|setZooKeeperMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|jobConf
argument_list|,
name|clientConfig
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to invoke setZooKeeperInstance method"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Wrapper around<code>ConfiguratorBase.unwrapAuthenticationToken</code> which only exists in    * 1.7.0 and new. Uses reflection to not break compat.    *    * @param jobConf    *          JobConf object    * @param token    *          The DelegationTokenStub instance    * @return A DelegationTokenImpl created from the Token in the Job's credentials    * @throws IOException    *           If the token fails to be unwrapped    */
specifier|public
name|AuthenticationToken
name|unwrapAuthenticationToken
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|AuthenticationToken
name|token
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|configuratorBaseClass
init|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|CONFIGURATOR_BASE_CLASS_NAME
argument_list|)
decl_stmt|;
name|Method
name|unwrapAuthenticationTokenMethod
init|=
name|configuratorBaseClass
operator|.
name|getMethod
argument_list|(
name|UNWRAP_AUTHENTICATION_TOKEN_METHOD_NAME
argument_list|,
name|JobConf
operator|.
name|class
argument_list|,
name|AuthenticationToken
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// ConfiguratorBase.unwrapAuthenticationToken(conf, token);
return|return
operator|(
name|AuthenticationToken
operator|)
name|unwrapAuthenticationTokenMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|jobConf
argument_list|,
name|token
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to unwrap AuthenticationToken"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

