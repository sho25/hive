begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|admin
operator|.
name|DelegationTokenConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|impl
operator|.
name|DelegationTokenImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mapred
operator|.
name|AccumuloOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|impl
operator|.
name|InputConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|impl
operator|.
name|OutputConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mapred
operator|.
name|AccumuloInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|security
operator|.
name|tokens
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|fate
operator|.
name|Fate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|start
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|trace
operator|.
name|instrument
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|impl
operator|.
name|AuthenticationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|JarUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helper class to hold common methods across the InputFormat, OutputFormat and StorageHandler.  */
end_comment

begin_class
specifier|public
class|class
name|HiveAccumuloHelper
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveAccumuloHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Constant from Accumulo's AuthenticationTokenIdentifier
specifier|public
specifier|static
specifier|final
name|Text
name|ACCUMULO_SERVICE
init|=
operator|new
name|Text
argument_list|(
literal|"ACCUMULO_AUTH_TOKEN"
argument_list|)
decl_stmt|;
comment|/**    * Extract the appropriate Token for Accumulo from the provided {@code user} and add it to the    * {@link JobConf}'s credentials.    *    * @param user    *          User containing tokens    * @param jobConf    *          The configuration for the job    * @throws IOException    *           If the correct token is not found or the Token fails to be merged with the    *           configuration    */
specifier|public
name|void
name|addTokenFromUserToJobConf
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|user
argument_list|,
literal|"Provided UGI was null"
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|jobConf
argument_list|,
literal|"JobConf was null"
argument_list|)
expr_stmt|;
comment|// Accumulo token already in Configuration, but the Token isn't in the Job credentials like the
comment|// AccumuloInputFormat expects
name|Token
argument_list|<
name|?
argument_list|>
name|accumuloToken
init|=
name|getAccumuloToken
argument_list|(
name|user
argument_list|)
decl_stmt|;
comment|// If we didn't find the Token, we can't proceed. Log the tokens for debugging.
if|if
condition|(
literal|null
operator|==
name|accumuloToken
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not find accumulo token in user: "
operator|+
name|user
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not find Accumulo Token in user's tokens"
argument_list|)
throw|;
block|}
comment|// Add the Hadoop token back to the Job, the configuration still has the necessary
comment|// Accumulo token information.
name|mergeTokenIntoJobConf
argument_list|(
name|jobConf
argument_list|,
name|accumuloToken
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
name|getAccumuloToken
parameter_list|(
name|UserGroupInformation
name|user
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|user
argument_list|,
literal|"Provided UGI was null"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|tokens
init|=
name|user
operator|.
name|getTokens
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|ACCUMULO_SERVICE
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|token
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Merge the provided<code>Token</code> into the JobConf.    *    * @param jobConf    *          JobConf to merge token into    * @param accumuloToken    *          The Token    * @throws IOException    *           If the merging fails    */
specifier|public
name|void
name|mergeTokenIntoJobConf
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Token
argument_list|<
name|?
argument_list|>
name|accumuloToken
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|accumuloJobConf
init|=
operator|new
name|JobConf
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|accumuloJobConf
operator|.
name|getCredentials
argument_list|()
operator|.
name|addToken
argument_list|(
name|accumuloToken
operator|.
name|getService
argument_list|()
argument_list|,
name|accumuloToken
argument_list|)
expr_stmt|;
comment|// Merge them together.
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|mergeCredentials
argument_list|(
name|jobConf
argument_list|,
name|accumuloJobConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Obtain a DelegationToken from Accumulo.    *    * @param conn    *          The Accumulo connector    * @return The DelegationToken instance    * @throws IOException    *           If the token cannot be obtained    */
specifier|public
name|AuthenticationToken
name|getDelegationToken
parameter_list|(
name|Connector
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|DelegationTokenConfig
name|config
init|=
operator|new
name|DelegationTokenConfig
argument_list|()
decl_stmt|;
return|return
name|conn
operator|.
name|securityOperations
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
name|config
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|AccumuloException
decl||
name|AccumuloSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to obtain DelegationToken"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|getHadoopToken
parameter_list|(
name|AuthenticationToken
name|token
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|token
operator|instanceof
name|DelegationTokenImpl
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected a DelegationTokenImpl but found "
operator|+
operator|(
name|token
operator|!=
literal|null
condition|?
name|token
operator|.
name|getClass
argument_list|()
else|:
literal|"null"
operator|)
argument_list|)
throw|;
block|}
name|DelegationTokenImpl
name|dt
init|=
operator|(
name|DelegationTokenImpl
operator|)
name|token
decl_stmt|;
try|try
block|{
name|AuthenticationTokenIdentifier
name|identifier
init|=
name|dt
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
return|return
operator|new
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|dt
operator|.
name|getPassword
argument_list|()
argument_list|,
name|identifier
operator|.
name|getKind
argument_list|()
argument_list|,
name|dt
operator|.
name|getServiceName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create Hadoop token from Accumulo DelegationToken"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Construct a<code>ClientConfiguration</code> instance.    *    * @param zookeepers    *          ZooKeeper hosts    * @param instanceName    *          Instance name    * @param useSasl    *          Is SASL enabled    * @return A ClientConfiguration instance    */
specifier|public
name|ClientConfiguration
name|getClientConfiguration
parameter_list|(
name|String
name|zookeepers
parameter_list|,
name|String
name|instanceName
parameter_list|,
name|boolean
name|useSasl
parameter_list|)
block|{
return|return
name|ClientConfiguration
operator|.
name|loadDefault
argument_list|()
operator|.
name|withInstance
argument_list|(
name|instanceName
argument_list|)
operator|.
name|withZkHosts
argument_list|(
name|zookeepers
argument_list|)
operator|.
name|withSasl
argument_list|(
name|useSasl
argument_list|)
return|;
block|}
specifier|public
name|void
name|updateInputFormatConfWithAccumuloToken
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|UserGroupInformation
name|currentUser
parameter_list|,
name|AccumuloConnectionParameters
name|cnxnParams
parameter_list|)
throws|throws
name|IOException
block|{
name|updateConfWithAccumuloToken
argument_list|(
name|jobConf
argument_list|,
name|currentUser
argument_list|,
name|cnxnParams
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateOutputFormatConfWithAccumuloToken
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|UserGroupInformation
name|currentUser
parameter_list|,
name|AccumuloConnectionParameters
name|cnxnParams
parameter_list|)
throws|throws
name|IOException
block|{
name|updateConfWithAccumuloToken
argument_list|(
name|jobConf
argument_list|,
name|currentUser
argument_list|,
name|cnxnParams
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|void
name|updateConfWithAccumuloToken
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|UserGroupInformation
name|currentUser
parameter_list|,
name|AccumuloConnectionParameters
name|cnxnParams
parameter_list|,
name|boolean
name|isInputFormat
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|getAccumuloToken
argument_list|(
name|currentUser
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|addTokenFromUserToJobConf
argument_list|(
name|currentUser
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Connector
name|connector
init|=
name|cnxnParams
operator|.
name|getConnector
argument_list|()
decl_stmt|;
comment|// If we have Kerberos credentials, we should obtain the delegation token
name|AuthenticationToken
name|token
init|=
name|getDelegationToken
argument_list|(
name|connector
argument_list|)
decl_stmt|;
comment|// Send the DelegationToken down to the Configuration for Accumulo to use
if|if
condition|(
name|isInputFormat
condition|)
block|{
name|setInputFormatConnectorInfo
argument_list|(
name|jobConf
argument_list|,
name|cnxnParams
operator|.
name|getAccumuloUserName
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setOutputFormatConnectorInfo
argument_list|(
name|jobConf
argument_list|,
name|cnxnParams
operator|.
name|getAccumuloUserName
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
comment|// Convert the Accumulo token in a Hadoop token
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|accumuloToken
init|=
name|getHadoopToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
comment|// Add the Hadoop token to the JobConf
name|mergeTokenIntoJobConf
argument_list|(
name|jobConf
argument_list|,
name|accumuloToken
argument_list|)
expr_stmt|;
comment|// Make sure the UGI contains the token too for good measure
if|if
condition|(
operator|!
name|currentUser
operator|.
name|addToken
argument_list|(
name|accumuloToken
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to add Accumulo Token to UGI"
argument_list|)
throw|;
block|}
try|try
block|{
name|addTokenFromUserToJobConf
argument_list|(
name|currentUser
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Current user did not contain necessary delegation Tokens "
operator|+
name|currentUser
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|AccumuloException
decl||
name|AccumuloSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to acquire Accumulo DelegationToken"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|boolean
name|hasKerberosCredentials
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
comment|// Allows mocking in testing.
return|return
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
operator|==
name|AuthenticationMethod
operator|.
name|KERBEROS
return|;
block|}
comment|/**    * Calls {@link AccumuloInputFormat#setConnectorInfo(JobConf, String, AuthenticationToken)},    * suppressing exceptions due to setting the configuration multiple times.    */
specifier|public
name|void
name|setInputFormatConnectorInfo
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|username
parameter_list|,
name|AuthenticationToken
name|token
parameter_list|)
throws|throws
name|AccumuloSecurityException
block|{
try|try
block|{
name|AccumuloInputFormat
operator|.
name|setConnectorInfo
argument_list|(
name|conf
argument_list|,
name|username
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// AccumuloInputFormat complains if you re-set an already set value. We just don't care.
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring exception setting Accumulo Connector instance for user "
operator|+
name|username
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Calls {@link AccumuloOutputFormat#setConnectorInfo(JobConf, String, AuthenticationToken)}    * suppressing exceptions due to setting the configuration multiple times.    */
specifier|public
name|void
name|setOutputFormatConnectorInfo
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|username
parameter_list|,
name|AuthenticationToken
name|token
parameter_list|)
throws|throws
name|AccumuloSecurityException
block|{
try|try
block|{
name|AccumuloOutputFormat
operator|.
name|setConnectorInfo
argument_list|(
name|conf
argument_list|,
name|username
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// AccumuloOutputFormat complains if you re-set an already set value. We just don't care.
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring exception setting Accumulo Connector instance for user "
operator|+
name|username
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Calls {@link AccumuloInputFormat#setZooKeeperInstance(JobConf, ClientConfiguration)},    * suppressing exceptions due to setting the configuration multiple times.    */
specifier|public
name|void
name|setInputFormatZooKeeperInstance
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|instanceName
parameter_list|,
name|String
name|zookeepers
parameter_list|,
name|boolean
name|isSasl
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ClientConfiguration
name|clientConf
init|=
name|getClientConfiguration
argument_list|(
name|zookeepers
argument_list|,
name|instanceName
argument_list|,
name|isSasl
argument_list|)
decl_stmt|;
name|AccumuloInputFormat
operator|.
name|setZooKeeperInstance
argument_list|(
name|conf
argument_list|,
name|clientConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// AccumuloInputFormat complains if you re-set an already set value. We just don't care.
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring exception setting ZooKeeper instance of "
operator|+
name|instanceName
operator|+
literal|" at "
operator|+
name|zookeepers
argument_list|,
name|ise
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Calls {@link AccumuloOutputFormat#setZooKeeperInstance(JobConf, ClientConfiguration)},    * suppressing exceptions due to setting the configuration multiple times.    */
specifier|public
name|void
name|setOutputFormatZooKeeperInstance
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|instanceName
parameter_list|,
name|String
name|zookeepers
parameter_list|,
name|boolean
name|isSasl
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ClientConfiguration
name|clientConf
init|=
name|getClientConfiguration
argument_list|(
name|zookeepers
argument_list|,
name|instanceName
argument_list|,
name|isSasl
argument_list|)
decl_stmt|;
name|AccumuloOutputFormat
operator|.
name|setZooKeeperInstance
argument_list|(
name|conf
argument_list|,
name|clientConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// AccumuloOutputFormat complains if you re-set an already set value. We just don't care.
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring exception setting ZooKeeper instance of "
operator|+
name|instanceName
operator|+
literal|" at "
operator|+
name|zookeepers
argument_list|,
name|ise
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Calls {@link AccumuloInputFormat#setMockInstance(JobConf, String)}, suppressing exceptions due    * to setting the configuration multiple times.    */
specifier|public
name|void
name|setInputFormatMockInstance
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|instanceName
parameter_list|)
block|{
try|try
block|{
name|AccumuloInputFormat
operator|.
name|setMockInstance
argument_list|(
name|conf
argument_list|,
name|instanceName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// AccumuloInputFormat complains if you re-set an already set value. We just don't care.
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring exception setting mock instance of "
operator|+
name|instanceName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Calls {@link AccumuloOutputFormat#setMockInstance(JobConf, String)}, suppressing exceptions    * due to setting the configuration multiple times.    */
specifier|public
name|void
name|setOutputFormatMockInstance
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|String
name|instanceName
parameter_list|)
block|{
try|try
block|{
name|AccumuloOutputFormat
operator|.
name|setMockInstance
argument_list|(
name|conf
argument_list|,
name|instanceName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// AccumuloOutputFormat complains if you re-set an already set value. We just don't care.
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring exception setting mock instance of "
operator|+
name|instanceName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sets all jars requried by Accumulo input/output tasks in the configuration to be dynamically    * loaded when the task is executed.    */
specifier|public
name|void
name|loadDependentJars
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classesToLoad
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Tracer
operator|.
name|class
argument_list|,
name|Fate
operator|.
name|class
argument_list|,
name|Connector
operator|.
name|class
argument_list|,
name|Main
operator|.
name|class
argument_list|,
name|ZooKeeper
operator|.
name|class
argument_list|,
name|AccumuloStorageHandler
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|classesToLoad
operator|.
name|add
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.htrace.Trace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to load class for HTrace jar, trying to continue"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|JarUtils
operator|.
name|addDependencyJars
argument_list|(
name|conf
argument_list|,
name|classesToLoad
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not add necessary Accumulo dependencies to classpath"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Obtains an Accumulo DelegationToken and sets it in the configuration for input and output jobs.    * The Accumulo token is converted into a Hadoop-style token and returned to the caller.    *    * @return A Hadoop-style token which contains the Accumulo DelegationToken    */
specifier|public
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|setConnectorInfoForInputAndOutput
parameter_list|(
name|AccumuloConnectionParameters
name|params
parameter_list|,
name|Connector
name|conn
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Obtain a delegation token from Accumulo
name|AuthenticationToken
name|token
init|=
name|getDelegationToken
argument_list|(
name|conn
argument_list|)
decl_stmt|;
comment|// Make sure the Accumulo token is set in the Configuration (only a stub of the Accumulo
comment|// AuthentiationToken is serialized, not the entire token). configureJobConf may be
comment|// called multiple times with the same JobConf which results in an error from Accumulo
comment|// MapReduce API. Catch the error, log a debug message and just keep going
try|try
block|{
name|InputConfigurator
operator|.
name|setConnectorInfo
argument_list|(
name|AccumuloInputFormat
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|params
operator|.
name|getAccumuloUserName
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// The implementation balks when this method is invoked multiple times
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring IllegalArgumentException about re-setting connector information"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|OutputConfigurator
operator|.
name|setConnectorInfo
argument_list|(
name|AccumuloOutputFormat
operator|.
name|class
argument_list|,
name|conf
argument_list|,
name|params
operator|.
name|getAccumuloUserName
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// The implementation balks when this method is invoked multiple times
name|log
operator|.
name|debug
argument_list|(
literal|"Ignoring IllegalArgumentException about re-setting connector information"
argument_list|)
expr_stmt|;
block|}
return|return
name|getHadoopToken
argument_list|(
name|token
argument_list|)
return|;
block|}
block|}
end_class

end_unit

