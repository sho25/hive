begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|ColumnVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|HiveAccumuloColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|HiveAccumuloMapColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
operator|.
name|SerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Serializes a Struct to an Accumulo row as per the definition provided by the  * {@link ColumnMapping}s  */
end_comment

begin_class
specifier|public
class|class
name|AccumuloRowSerializer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AccumuloRowSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|rowIdOffset
decl_stmt|;
specifier|private
specifier|final
name|ByteStream
operator|.
name|Output
name|output
decl_stmt|;
specifier|private
specifier|final
name|SerDeParameters
name|serDeParams
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|mappings
decl_stmt|;
specifier|private
specifier|final
name|ColumnVisibility
name|visibility
decl_stmt|;
specifier|private
specifier|final
name|AccumuloRowIdFactory
name|rowIdFactory
decl_stmt|;
specifier|public
name|AccumuloRowSerializer
parameter_list|(
name|int
name|primaryKeyOffset
parameter_list|,
name|SerDeParameters
name|serDeParams
parameter_list|,
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|mappings
parameter_list|,
name|ColumnVisibility
name|visibility
parameter_list|,
name|AccumuloRowIdFactory
name|rowIdFactory
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|primaryKeyOffset
operator|>=
literal|0
argument_list|,
literal|"A valid offset to the mapping for the Accumulo RowID is required, received "
operator|+
name|primaryKeyOffset
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowIdOffset
operator|=
name|primaryKeyOffset
expr_stmt|;
name|this
operator|.
name|output
operator|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
expr_stmt|;
name|this
operator|.
name|serDeParams
operator|=
name|serDeParams
expr_stmt|;
name|this
operator|.
name|mappings
operator|=
name|mappings
expr_stmt|;
name|this
operator|.
name|visibility
operator|=
name|visibility
expr_stmt|;
name|this
operator|.
name|rowIdFactory
operator|=
name|rowIdFactory
expr_stmt|;
block|}
specifier|public
name|Mutation
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
if|if
condition|(
name|objInspector
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" can only serialize struct types, but we got: "
operator|+
name|objInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
comment|// Prepare the field ObjectInspectors
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|columnValues
init|=
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|obj
argument_list|)
decl_stmt|;
comment|// Fail if we try to access an offset out of bounds
if|if
condition|(
name|rowIdOffset
operator|>=
name|fields
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attempted to access field outside of definition for struct. Have "
operator|+
name|fields
operator|.
name|size
argument_list|()
operator|+
literal|" fields and tried to access offset "
operator|+
name|rowIdOffset
argument_list|)
throw|;
block|}
name|StructField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|rowIdOffset
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|columnValues
operator|.
name|get
argument_list|(
name|rowIdOffset
argument_list|)
decl_stmt|;
comment|// The ObjectInspector for the row ID
name|ObjectInspector
name|fieldObjectInspector
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Serializing rowId with "
operator|+
name|value
operator|+
literal|" in "
operator|+
name|field
operator|+
literal|" using "
operator|+
name|rowIdFactory
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Serialize the row component using the RowIdFactory. In the normal case, this will just
comment|// delegate back to the "local" serializeRowId method
name|byte
index|[]
name|data
init|=
name|rowIdFactory
operator|.
name|serializeRowId
argument_list|(
name|value
argument_list|,
name|field
argument_list|,
name|output
argument_list|)
decl_stmt|;
comment|// Set that as the row id in the mutation
name|Mutation
name|mutation
init|=
operator|new
name|Mutation
argument_list|(
name|data
argument_list|)
decl_stmt|;
comment|// Each column in the row
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rowIdOffset
operator|==
name|i
condition|)
block|{
continue|continue;
block|}
comment|// Get the relevant information for this column
name|field
operator|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|value
operator|=
name|columnValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// Despite having a fixed schema from Hive, we have sparse columns in Accumulo
if|if
condition|(
literal|null
operator|==
name|value
condition|)
block|{
continue|continue;
block|}
comment|// The ObjectInspector for the current column
name|fieldObjectInspector
operator|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
comment|// Make sure we got the right implementation of a ColumnMapping
name|ColumnMapping
name|mapping
init|=
name|mappings
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|instanceof
name|HiveAccumuloColumnMapping
condition|)
block|{
name|serializeColumnMapping
argument_list|(
operator|(
name|HiveAccumuloColumnMapping
operator|)
name|mapping
argument_list|,
name|fieldObjectInspector
argument_list|,
name|value
argument_list|,
name|mutation
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mapping
operator|instanceof
name|HiveAccumuloMapColumnMapping
condition|)
block|{
name|serializeColumnMapping
argument_list|(
operator|(
name|HiveAccumuloMapColumnMapping
operator|)
name|mapping
argument_list|,
name|fieldObjectInspector
argument_list|,
name|value
argument_list|,
name|mutation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Mapping for "
operator|+
name|field
operator|.
name|getFieldName
argument_list|()
operator|+
literal|" was not a HiveColumnMapping, but was "
operator|+
name|mapping
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|mutation
return|;
block|}
specifier|protected
name|void
name|serializeColumnMapping
parameter_list|(
name|HiveAccumuloColumnMapping
name|columnMapping
parameter_list|,
name|ObjectInspector
name|fieldObjectInspector
parameter_list|,
name|Object
name|value
parameter_list|,
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the serialized value for the column
name|byte
index|[]
name|serializedValue
init|=
name|getSerializedValue
argument_list|(
name|fieldObjectInspector
argument_list|,
name|value
argument_list|,
name|output
argument_list|,
name|columnMapping
argument_list|)
decl_stmt|;
comment|// Put it all in the Mutation
name|mutation
operator|.
name|put
argument_list|(
name|columnMapping
operator|.
name|getColumnFamilyBytes
argument_list|()
argument_list|,
name|columnMapping
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|,
name|visibility
argument_list|,
name|serializedValue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serialize the Hive Map into an Accumulo row    */
specifier|protected
name|void
name|serializeColumnMapping
parameter_list|(
name|HiveAccumuloMapColumnMapping
name|columnMapping
parameter_list|,
name|ObjectInspector
name|fieldObjectInspector
parameter_list|,
name|Object
name|value
parameter_list|,
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
name|MapObjectInspector
name|mapObjectInspector
init|=
operator|(
name|MapObjectInspector
operator|)
name|fieldObjectInspector
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|mapObjectInspector
operator|.
name|getMap
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ObjectInspector
name|keyObjectInspector
init|=
name|mapObjectInspector
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|,
name|valueObjectInspector
init|=
name|mapObjectInspector
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfBytes
init|=
name|columnMapping
operator|.
name|getColumnFamily
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|,
name|cqPrefixBytes
init|=
name|columnMapping
operator|.
name|getColumnQualifierPrefix
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cqBytes
decl_stmt|,
name|valueBytes
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// If the cq prefix is non-empty, add it to the CQ before we set the mutation
if|if
condition|(
literal|0
operator|<
name|cqPrefixBytes
operator|.
name|length
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|cqPrefixBytes
argument_list|,
literal|0
argument_list|,
name|cqPrefixBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// Write the "suffix" of the cq
name|writeWithLevel
argument_list|(
name|keyObjectInspector
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|output
argument_list|,
name|columnMapping
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cqBytes
operator|=
name|output
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Write the value
name|writeWithLevel
argument_list|(
name|valueObjectInspector
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|output
argument_list|,
name|columnMapping
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|valueBytes
operator|=
name|output
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|mutation
operator|.
name|put
argument_list|(
name|cfBytes
argument_list|,
name|cqBytes
argument_list|,
name|visibility
argument_list|,
name|valueBytes
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Serialize an Accumulo rowid    */
specifier|protected
name|byte
index|[]
name|serializeRowId
parameter_list|(
name|Object
name|rowId
parameter_list|,
name|StructField
name|rowIdField
parameter_list|,
name|ColumnMapping
name|rowIdMapping
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rowId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Accumulo rowId cannot be NULL"
argument_list|)
throw|;
block|}
comment|// Reset the buffer we're going to use
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ObjectInspector
name|rowIdFieldOI
init|=
name|rowIdField
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|String
name|rowIdMappingType
init|=
name|rowIdMapping
operator|.
name|getColumnType
argument_list|()
decl_stmt|;
name|TypeInfo
name|rowIdTypeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|rowIdMappingType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rowIdFieldOI
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
argument_list|)
operator|&&
name|rowIdTypeInfo
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
comment|// we always serialize the String type using the escaped algorithm for LazyString
name|writeString
argument_list|(
name|output
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|rowId
argument_list|,
name|rowIdFieldOI
argument_list|)
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|// use the serialization option switch to write primitive values as either a variable
comment|// length UTF8 string or a fixed width bytes if serializing in binary format
name|getSerializedValue
argument_list|(
name|rowIdFieldOI
argument_list|,
name|rowId
argument_list|,
name|output
argument_list|,
name|rowIdMapping
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * Compute the serialized value from the given element and object inspectors. Based on the Hive    * types, represented through the ObjectInspectors for the whole object and column within the    * object, serialize the object appropriately.    *    * @param fieldObjectInspector    *          ObjectInspector for the column value being serialized    * @param value    *          The Object itself being serialized    * @param output    *          A temporary buffer to reduce object creation    * @return The serialized bytes from the provided value.    * @throws IOException    *           An error occurred when performing IO to serialize the data    */
specifier|protected
name|byte
index|[]
name|getSerializedValue
parameter_list|(
name|ObjectInspector
name|fieldObjectInspector
parameter_list|,
name|Object
name|value
parameter_list|,
name|ByteStream
operator|.
name|Output
name|output
parameter_list|,
name|ColumnMapping
name|mapping
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Reset the buffer we're going to use
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Start by only serializing primitives as-is
if|if
condition|(
name|fieldObjectInspector
operator|.
name|getCategory
argument_list|()
operator|==
name|ObjectInspector
operator|.
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|writeSerializedPrimitive
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|fieldObjectInspector
argument_list|,
name|output
argument_list|,
name|value
argument_list|,
name|mapping
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We only accept a struct, which means that we're already nested one level deep
name|writeWithLevel
argument_list|(
name|fieldObjectInspector
argument_list|,
name|value
argument_list|,
name|output
argument_list|,
name|mapping
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|output
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * Recursively serialize an Object using its {@link ObjectInspector}, respecting the    * separators defined by the {@link SerDeParameters}.    * @param oi ObjectInspector for the current object    * @param value The current object    * @param output A buffer output is written to    * @param mapping The mapping for this Hive column    * @param level The current level/offset for the SerDe separator    * @throws IOException    */
specifier|protected
name|void
name|writeWithLevel
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|value
parameter_list|,
name|ByteStream
operator|.
name|Output
name|output
parameter_list|,
name|ColumnMapping
name|mapping
parameter_list|,
name|int
name|level
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
if|if
condition|(
name|mapping
operator|.
name|getEncoding
argument_list|()
operator|==
name|ColumnEncoding
operator|.
name|BINARY
condition|)
block|{
name|this
operator|.
name|writeBinary
argument_list|(
name|output
argument_list|,
name|value
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|writeString
argument_list|(
name|output
argument_list|,
name|value
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
argument_list|)
expr_stmt|;
block|}
return|return;
case|case
name|LIST
case|:
name|char
name|separator
init|=
operator|(
name|char
operator|)
name|serDeParams
operator|.
name|getSeparators
argument_list|()
index|[
name|level
index|]
decl_stmt|;
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|loi
operator|.
name|getList
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|ObjectInspector
name|eoi
init|=
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No objects found when serializing list"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|writeWithLevel
argument_list|(
name|eoi
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|output
argument_list|,
name|mapping
argument_list|,
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|MAP
case|:
name|char
name|sep
init|=
operator|(
name|char
operator|)
name|serDeParams
operator|.
name|getSeparators
argument_list|()
index|[
name|level
index|]
decl_stmt|;
name|char
name|keyValueSeparator
init|=
operator|(
name|char
operator|)
name|serDeParams
operator|.
name|getSeparators
argument_list|()
index|[
name|level
operator|+
literal|1
index|]
decl_stmt|;
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|ObjectInspector
name|koi
init|=
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|voi
init|=
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|moi
operator|.
name|getMap
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No object found when serializing map"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|write
argument_list|(
name|sep
argument_list|)
expr_stmt|;
block|}
name|writeWithLevel
argument_list|(
name|koi
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|output
argument_list|,
name|mapping
argument_list|,
name|level
operator|+
literal|2
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|keyValueSeparator
argument_list|)
expr_stmt|;
name|writeWithLevel
argument_list|(
name|voi
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|output
argument_list|,
name|mapping
argument_list|,
name|level
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
case|case
name|STRUCT
case|:
name|sep
operator|=
operator|(
name|char
operator|)
name|serDeParams
operator|.
name|getSeparators
argument_list|()
index|[
name|level
index|]
expr_stmt|;
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|list
operator|=
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No object found when serializing struct"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|sep
argument_list|)
expr_stmt|;
block|}
name|writeWithLevel
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|output
argument_list|,
name|mapping
argument_list|,
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown category type: "
operator|+
name|oi
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Serialize the given primitive to the given output buffer, using the provided encoding    * mechanism.    *    * @param objectInspector    *          The PrimitiveObjectInspector for this Object    * @param output    *          A buffer to write the serialized value to    * @param value    *          The Object being serialized    * @param encoding    *          The means in which the Object should be serialized    * @throws IOException    */
specifier|protected
name|void
name|writeSerializedPrimitive
parameter_list|(
name|PrimitiveObjectInspector
name|objectInspector
parameter_list|,
name|ByteStream
operator|.
name|Output
name|output
parameter_list|,
name|Object
name|value
parameter_list|,
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Despite STRING being a primitive, it can't be serialized as binary
if|if
condition|(
name|objectInspector
operator|.
name|getPrimitiveCategory
argument_list|()
operator|!=
name|PrimitiveCategory
operator|.
name|STRING
operator|&&
name|ColumnEncoding
operator|.
name|BINARY
operator|==
name|encoding
condition|)
block|{
name|writeBinary
argument_list|(
name|output
argument_list|,
name|value
argument_list|,
name|objectInspector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeString
argument_list|(
name|output
argument_list|,
name|value
argument_list|,
name|objectInspector
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|writeBinary
parameter_list|(
name|ByteStream
operator|.
name|Output
name|output
parameter_list|,
name|Object
name|value
parameter_list|,
name|PrimitiveObjectInspector
name|inspector
parameter_list|)
throws|throws
name|IOException
block|{
name|LazyUtils
operator|.
name|writePrimitive
argument_list|(
name|output
argument_list|,
name|value
argument_list|,
name|inspector
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeString
parameter_list|(
name|ByteStream
operator|.
name|Output
name|output
parameter_list|,
name|Object
name|value
parameter_list|,
name|PrimitiveObjectInspector
name|inspector
parameter_list|)
throws|throws
name|IOException
block|{
name|LazyUtils
operator|.
name|writePrimitiveUTF8
argument_list|(
name|output
argument_list|,
name|value
argument_list|,
name|inspector
argument_list|,
name|serDeParams
operator|.
name|isEscaped
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|getEscapeChar
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|getNeedsEscape
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ColumnVisibility
name|getVisibility
parameter_list|()
block|{
return|return
name|visibility
return|;
block|}
block|}
end_class

end_unit

