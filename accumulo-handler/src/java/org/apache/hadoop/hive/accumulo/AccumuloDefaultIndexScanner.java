begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloIndexParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloSerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|EMPTY_SET
import|;
end_import

begin_comment
comment|/**  * This default index scanner expects indexes to be in the same format as presto's  * accumulo index tables defined as:  * [rowid=field value] [cf=cfname_cqname] [cq=rowid] [visibility] [value=""]  *<p>  * This handler looks for the following hive serde properties:  * 'accumulo.indextable.name' = 'table_idx' (required - name of the corresponding index table)  * 'accumulo.indexed.columns' = 'name,age,phone' (optional - comma separated list of indexed  *                      hive columns if not defined or defined as '*' all columns are  *                      assumed to be indexed )  * 'accumulo.index.rows.max' = '20000' (optional - maximum number of match indexes to use  *                      before converting to a full table scan default=20000'  *                      Note: This setting controls the size of the in-memory list of rowids  *                      each search predicate. Using large values for this setting or having  *                      very large rowid values may require additional memory to prevent  *                      out of memory errors  * 'accumulo.index.scanner'  = 'org.apache.hadoop.hive.accumulo.AccumuloDefaultIndexScanner'  *                      (optional - name of the index scanner)  *<p>  * To implement your own index table scheme it should be as simple as sub-classing  * this class and overriding getIndexRowRanges() and optionally init() if you need more  * config settings  */
end_comment

begin_class
specifier|public
class|class
name|AccumuloDefaultIndexScanner
implements|implements
name|AccumuloIndexScanner
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AccumuloDefaultIndexScanner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AccumuloConnectionParameters
name|connectParams
decl_stmt|;
specifier|private
name|AccumuloIndexParameters
name|indexParams
decl_stmt|;
specifier|private
name|int
name|maxRowIds
decl_stmt|;
specifier|private
name|Authorizations
name|auths
decl_stmt|;
specifier|private
name|String
name|indexTable
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|indexColumns
init|=
name|EMPTY_SET
decl_stmt|;
specifier|private
name|Connector
name|connect
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|colMap
decl_stmt|;
comment|/**    * Initialize object based on configuration.    *    * @param conf - Hive configuration    */
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|connectParams
operator|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|indexParams
operator|=
operator|new
name|AccumuloIndexParameters
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|maxRowIds
operator|=
name|indexParams
operator|.
name|getMaxIndexRows
argument_list|()
expr_stmt|;
name|auths
operator|=
name|indexParams
operator|.
name|getTableAuths
argument_list|()
expr_stmt|;
name|indexTable
operator|=
name|indexParams
operator|.
name|getIndexTable
argument_list|()
expr_stmt|;
name|indexColumns
operator|=
name|indexParams
operator|.
name|getIndexColumns
argument_list|()
expr_stmt|;
name|colMap
operator|=
name|createColumnMap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a list of rowid ranges by scanning a column index.    *    * @param column     - the hive column name    * @param indexRange - Key range to scan on the index table    * @return List of matching rowid ranges or null if too many matches found    * if index values are not found a newline range is added to list to    * short-circuit the query    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Range
argument_list|>
name|getIndexRowRanges
parameter_list|(
name|String
name|column
parameter_list|,
name|Range
name|indexRange
parameter_list|)
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|rowIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|()
decl_stmt|;
name|Scanner
name|scan
init|=
literal|null
decl_stmt|;
name|String
name|col
init|=
name|this
operator|.
name|colMap
operator|.
name|get
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Searching tab="
operator|+
name|indexTable
operator|+
literal|" column="
operator|+
name|column
operator|+
literal|" range="
operator|+
name|indexRange
argument_list|)
expr_stmt|;
name|Connector
name|conn
init|=
name|getConnector
argument_list|()
decl_stmt|;
name|scan
operator|=
name|conn
operator|.
name|createScanner
argument_list|(
name|indexTable
argument_list|,
name|auths
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setRange
argument_list|(
name|indexRange
argument_list|)
expr_stmt|;
name|Text
name|cf
init|=
operator|new
name|Text
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using Column Family="
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|fetchColumnFamily
argument_list|(
name|cf
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|entry
range|:
name|scan
control|)
block|{
name|rowIds
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// if we have too many results return null for a full scan
if|if
condition|(
name|rowIds
operator|.
name|size
argument_list|()
operator|>
name|maxRowIds
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// no hits on the index so return a no match range
if|if
condition|(
name|rowIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found 0 index matches"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|rowIds
operator|.
name|size
argument_list|()
operator|+
literal|" index matches"
argument_list|)
expr_stmt|;
block|}
return|return
name|rowIds
return|;
block|}
catch|catch
parameter_list|(
name|AccumuloException
decl||
name|AccumuloSecurityException
decl||
name|TableNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to scan index table: "
operator|+
name|indexTable
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|scan
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// assume the index is bad and do a full scan
name|LOG
operator|.
name|debug
argument_list|(
literal|"Index lookup failed for table "
operator|+
name|indexTable
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * Test if column is defined in the index table.    *    * @param column - hive column name    * @return true if the column is defined as part of the index table    */
annotation|@
name|Override
specifier|public
name|boolean
name|isIndexed
parameter_list|(
name|String
name|column
parameter_list|)
block|{
return|return
name|indexTable
operator|!=
literal|null
operator|&&
operator|(
name|indexColumns
operator|.
name|isEmpty
argument_list|()
operator|||
name|indexColumns
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
operator|||
name|this
operator|.
name|indexColumns
operator|.
name|contains
argument_list|(
name|column
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|||
name|this
operator|.
name|indexColumns
operator|.
name|contains
argument_list|(
name|column
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createColumnMap
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|colsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|accColString
init|=
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|)
decl_stmt|;
if|if
condition|(
name|accColString
operator|!=
literal|null
operator|&&
operator|!
name|accColString
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|accCols
init|=
name|accColString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|hiveCols
init|=
name|conf
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|accCols
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|colsMap
operator|.
name|put
argument_list|(
name|hiveCols
index|[
name|i
index|]
argument_list|,
name|accCols
index|[
name|i
index|]
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|colsMap
return|;
block|}
specifier|protected
name|Connector
name|getConnector
parameter_list|()
throws|throws
name|AccumuloSecurityException
throws|,
name|AccumuloException
block|{
if|if
condition|(
name|connect
operator|==
literal|null
condition|)
block|{
name|connect
operator|=
name|connectParams
operator|.
name|getConnector
argument_list|()
expr_stmt|;
block|}
return|return
name|connect
return|;
block|}
specifier|public
name|void
name|setConnectParams
parameter_list|(
name|AccumuloConnectionParameters
name|connectParams
parameter_list|)
block|{
name|this
operator|.
name|connectParams
operator|=
name|connectParams
expr_stmt|;
block|}
specifier|public
name|AccumuloConnectionParameters
name|getConnectParams
parameter_list|()
block|{
return|return
name|connectParams
return|;
block|}
specifier|public
name|AccumuloIndexParameters
name|getIndexParams
parameter_list|()
block|{
return|return
name|indexParams
return|;
block|}
specifier|public
name|int
name|getMaxRowIds
parameter_list|()
block|{
return|return
name|maxRowIds
return|;
block|}
specifier|public
name|Authorizations
name|getAuths
parameter_list|()
block|{
return|return
name|auths
return|;
block|}
specifier|public
name|String
name|getIndexTable
parameter_list|()
block|{
return|return
name|indexTable
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getIndexColumns
parameter_list|()
block|{
return|return
name|indexColumns
return|;
block|}
specifier|public
name|Connector
name|getConnect
parameter_list|()
block|{
return|return
name|connect
return|;
block|}
block|}
end_class

end_unit

