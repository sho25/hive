begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloIndexParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloIndexScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloIndexScannerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloIndexLexicoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|HiveAccumuloRowIdColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|Equal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|GreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|GreaterThanOrEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|LessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|LessThanOrEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessorCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|UTF8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|AccumuloRangeGenerator
implements|implements
name|NodeProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AccumuloRangeGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AccumuloPredicateHandler
name|predicateHandler
decl_stmt|;
specifier|private
specifier|final
name|HiveAccumuloRowIdColumnMapping
name|rowIdMapping
decl_stmt|;
specifier|private
specifier|final
name|String
name|hiveRowIdColumnName
decl_stmt|;
specifier|private
name|AccumuloIndexScanner
name|indexScanner
decl_stmt|;
specifier|public
name|AccumuloRangeGenerator
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|AccumuloPredicateHandler
name|predicateHandler
parameter_list|,
name|HiveAccumuloRowIdColumnMapping
name|rowIdMapping
parameter_list|,
name|String
name|hiveRowIdColumnName
parameter_list|)
block|{
name|this
operator|.
name|predicateHandler
operator|=
name|predicateHandler
expr_stmt|;
name|this
operator|.
name|rowIdMapping
operator|=
name|rowIdMapping
expr_stmt|;
name|this
operator|.
name|hiveRowIdColumnName
operator|=
name|hiveRowIdColumnName
expr_stmt|;
try|try
block|{
name|this
operator|.
name|indexScanner
operator|=
operator|new
name|AccumuloIndexParameters
argument_list|(
name|conf
argument_list|)
operator|.
name|createScanner
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccumuloIndexScannerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexScanner
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|AccumuloIndexScanner
name|getIndexScanner
parameter_list|()
block|{
return|return
name|indexScanner
return|;
block|}
specifier|public
name|void
name|setIndexScanner
parameter_list|(
name|AccumuloIndexScanner
name|indexScanner
parameter_list|)
block|{
name|this
operator|.
name|indexScanner
operator|=
name|indexScanner
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
parameter_list|,
name|NodeProcessorCtx
name|procCtx
parameter_list|,
name|Object
modifier|...
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// If it's not some operator, pass it back
if|if
condition|(
operator|!
operator|(
name|nd
operator|instanceof
name|ExprNodeGenericFuncDesc
operator|)
condition|)
block|{
return|return
name|nd
return|;
block|}
name|ExprNodeGenericFuncDesc
name|func
init|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|nd
decl_stmt|;
comment|// 'and' nodes need to be intersected
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpAnd
argument_list|(
name|func
argument_list|)
condition|)
block|{
return|return
name|processAndOpNode
argument_list|(
name|nd
argument_list|,
name|nodeOutputs
argument_list|)
return|;
comment|// 'or' nodes need to be merged
block|}
elseif|else
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpOr
argument_list|(
name|func
argument_list|)
condition|)
block|{
return|return
name|processOrOpNode
argument_list|(
name|nd
argument_list|,
name|nodeOutputs
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|FunctionRegistry
operator|.
name|isOpNot
argument_list|(
name|func
argument_list|)
condition|)
block|{
comment|// TODO handle negations
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Negations not yet implemented"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|processExpression
argument_list|(
name|func
argument_list|,
name|nodeOutputs
argument_list|)
return|;
block|}
block|}
specifier|protected
name|Object
name|processAndOpNode
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Object
index|[]
name|nodeOutputs
parameter_list|)
block|{
comment|// We might have multiple ranges coming from children
name|List
argument_list|<
name|Range
argument_list|>
name|andRanges
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|nodeOutput
range|:
name|nodeOutputs
control|)
block|{
comment|// null signifies nodes that are irrelevant to the generation
comment|// of Accumulo Ranges
if|if
condition|(
literal|null
operator|==
name|nodeOutput
condition|)
block|{
continue|continue;
block|}
comment|// When an AND has no children (some conjunction over a field that isn't the column
comment|// mapped to the Accumulo rowid) and when a conjunction generates Ranges which are empty
comment|// (the children of the conjunction are disjoint), these two cases need to be kept separate.
comment|//
comment|// A null `andRanges` implies that ranges couldn't be computed, while an empty List
comment|// of Ranges implies that there are no possible Ranges to lookup.
if|if
condition|(
literal|null
operator|==
name|andRanges
condition|)
block|{
name|andRanges
operator|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// The child is a single Range
if|if
condition|(
name|nodeOutput
operator|instanceof
name|Range
condition|)
block|{
name|Range
name|childRange
init|=
operator|(
name|Range
operator|)
name|nodeOutput
decl_stmt|;
comment|// No existing ranges, just accept the current
if|if
condition|(
name|andRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|andRanges
operator|.
name|add
argument_list|(
name|childRange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// For each range we have, intersect them. If they don't overlap
comment|// the range can be discarded
name|List
argument_list|<
name|Range
argument_list|>
name|newRanges
init|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Range
name|andRange
range|:
name|andRanges
control|)
block|{
name|Range
name|intersectedRange
init|=
name|andRange
operator|.
name|clip
argument_list|(
name|childRange
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|intersectedRange
condition|)
block|{
name|newRanges
operator|.
name|add
argument_list|(
name|intersectedRange
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Set the newly-constructed ranges as the current state
name|andRanges
operator|=
name|newRanges
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|nodeOutput
operator|instanceof
name|List
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Range
argument_list|>
name|childRanges
init|=
operator|(
name|List
argument_list|<
name|Range
argument_list|>
operator|)
name|nodeOutput
decl_stmt|;
comment|// No ranges, use the ranges from the child
if|if
condition|(
name|andRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|andRanges
operator|.
name|addAll
argument_list|(
name|childRanges
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|newRanges
init|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|()
decl_stmt|;
comment|// Cartesian product of our ranges, to the child ranges
for|for
control|(
name|Range
name|andRange
range|:
name|andRanges
control|)
block|{
for|for
control|(
name|Range
name|childRange
range|:
name|childRanges
control|)
block|{
name|Range
name|intersectedRange
init|=
name|andRange
operator|.
name|clip
argument_list|(
name|childRange
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Retain only valid intersections (discard disjoint ranges)
if|if
condition|(
literal|null
operator|!=
name|intersectedRange
condition|)
block|{
name|newRanges
operator|.
name|add
argument_list|(
name|intersectedRange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Set the newly-constructed ranges as the current state
name|andRanges
operator|=
name|newRanges
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Expected Range from {} but got {}"
argument_list|,
name|nd
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected Range but got "
operator|+
name|nodeOutput
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|andRanges
return|;
block|}
specifier|protected
name|Object
name|processOrOpNode
parameter_list|(
name|Node
name|nd
parameter_list|,
name|Object
index|[]
name|nodeOutputs
parameter_list|)
block|{
name|List
argument_list|<
name|Range
argument_list|>
name|orRanges
init|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|(
name|nodeOutputs
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|nodeOutput
range|:
name|nodeOutputs
control|)
block|{
if|if
condition|(
name|nodeOutput
operator|instanceof
name|Range
condition|)
block|{
name|orRanges
operator|.
name|add
argument_list|(
operator|(
name|Range
operator|)
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodeOutput
operator|instanceof
name|List
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Range
argument_list|>
name|childRanges
init|=
operator|(
name|List
argument_list|<
name|Range
argument_list|>
operator|)
name|nodeOutput
decl_stmt|;
name|orRanges
operator|.
name|addAll
argument_list|(
name|childRanges
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Expected Range from {} but got {}"
argument_list|,
name|nd
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected Range but got "
operator|+
name|nodeOutput
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Try to merge multiple ranges together
if|if
condition|(
name|orRanges
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
name|Range
operator|.
name|mergeOverlapping
argument_list|(
name|orRanges
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|1
operator|==
name|orRanges
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Return just the single Range
return|return
name|orRanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
comment|// No ranges, just return the empty list
return|return
name|orRanges
return|;
block|}
block|}
specifier|protected
name|Object
name|processExpression
parameter_list|(
name|ExprNodeGenericFuncDesc
name|func
parameter_list|,
name|Object
index|[]
name|nodeOutputs
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// a binary operator (gt, lt, ge, le, eq, ne)
name|GenericUDF
name|genericUdf
init|=
name|func
operator|.
name|getGenericUDF
argument_list|()
decl_stmt|;
comment|// Find the argument to the operator which is a constant
name|ExprNodeConstantDesc
name|constantDesc
init|=
literal|null
decl_stmt|;
name|ExprNodeColumnDesc
name|columnDesc
init|=
literal|null
decl_stmt|;
name|ExprNodeDesc
name|leftHandNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|nodeOutput
range|:
name|nodeOutputs
control|)
block|{
if|if
condition|(
name|nodeOutput
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
comment|// Ordering of constant and column in expression is important in correct range generation
if|if
condition|(
literal|null
operator|==
name|leftHandNode
condition|)
block|{
name|leftHandNode
operator|=
operator|(
name|ExprNodeDesc
operator|)
name|nodeOutput
expr_stmt|;
block|}
name|constantDesc
operator|=
operator|(
name|ExprNodeConstantDesc
operator|)
name|nodeOutput
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodeOutput
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
comment|// Ordering of constant and column in expression is important in correct range generation
if|if
condition|(
literal|null
operator|==
name|leftHandNode
condition|)
block|{
name|leftHandNode
operator|=
operator|(
name|ExprNodeDesc
operator|)
name|nodeOutput
expr_stmt|;
block|}
name|columnDesc
operator|=
operator|(
name|ExprNodeColumnDesc
operator|)
name|nodeOutput
expr_stmt|;
block|}
block|}
comment|// If it's constant = constant or column = column, we can't fetch any ranges
comment|// TODO We can try to be smarter and push up the value to some node which
comment|// we can generate ranges from e.g. rowid> (4 + 5)
if|if
condition|(
literal|null
operator|==
name|constantDesc
operator|||
literal|null
operator|==
name|columnDesc
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ConstantObjectInspector
name|objInspector
init|=
name|constantDesc
operator|.
name|getWritableObjectInspector
argument_list|()
decl_stmt|;
comment|// Reject any clauses that are against a column that isn't the rowId mapping or indexed
if|if
condition|(
operator|!
name|this
operator|.
name|hiveRowIdColumnName
operator|.
name|equals
argument_list|(
name|columnDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|indexScanner
operator|!=
literal|null
operator|&&
name|this
operator|.
name|indexScanner
operator|.
name|isIndexed
argument_list|(
name|columnDesc
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getIndexedRowIds
argument_list|(
name|genericUdf
argument_list|,
name|leftHandNode
argument_list|,
name|columnDesc
operator|.
name|getColumn
argument_list|()
argument_list|,
name|objInspector
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
name|Text
name|constText
init|=
name|getConstantText
argument_list|(
name|objInspector
argument_list|)
decl_stmt|;
return|return
name|getRange
argument_list|(
name|genericUdf
argument_list|,
name|leftHandNode
argument_list|,
name|constText
argument_list|)
return|;
block|}
specifier|private
name|Range
name|getRange
parameter_list|(
name|GenericUDF
name|genericUdf
parameter_list|,
name|ExprNodeDesc
name|leftHandNode
parameter_list|,
name|Text
name|constText
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CompareOp
argument_list|>
name|opClz
decl_stmt|;
try|try
block|{
name|opClz
operator|=
name|predicateHandler
operator|.
name|getCompareOpClass
argument_list|(
name|genericUdf
operator|.
name|getUdfName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchCompareOpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unhandled UDF class: "
operator|+
name|genericUdf
operator|.
name|getUdfName
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|leftHandNode
operator|instanceof
name|ExprNodeConstantDesc
condition|)
block|{
return|return
name|getConstantOpColumnRange
argument_list|(
name|opClz
argument_list|,
name|constText
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|leftHandNode
operator|instanceof
name|ExprNodeColumnDesc
condition|)
block|{
return|return
name|getColumnOpConstantRange
argument_list|(
name|opClz
argument_list|,
name|constText
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected column or constant on LHS of expression"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Text
name|getConstantText
parameter_list|(
name|ConstantObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Text
name|constText
decl_stmt|;
switch|switch
condition|(
name|rowIdMapping
operator|.
name|getEncoding
argument_list|()
condition|)
block|{
case|case
name|STRING
case|:
name|constText
operator|=
name|getUtf8Value
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
try|try
block|{
name|constText
operator|=
name|getBinaryValue
argument_list|(
name|objInspector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Unable to parse unknown encoding: "
operator|+
name|rowIdMapping
operator|.
name|getEncoding
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|constText
return|;
block|}
specifier|protected
name|Range
name|getConstantOpColumnRange
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CompareOp
argument_list|>
name|opClz
parameter_list|,
name|Text
name|constText
parameter_list|)
block|{
if|if
condition|(
name|opClz
operator|.
name|equals
argument_list|(
name|Equal
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// 100 == x
return|return
operator|new
name|Range
argument_list|(
name|constText
argument_list|)
return|;
comment|// single row
block|}
elseif|else
if|if
condition|(
name|opClz
operator|.
name|equals
argument_list|(
name|GreaterThanOrEqual
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// 100>= x
return|return
operator|new
name|Range
argument_list|(
literal|null
argument_list|,
name|constText
argument_list|)
return|;
comment|// neg-infinity to end inclusive
block|}
elseif|else
if|if
condition|(
name|opClz
operator|.
name|equals
argument_list|(
name|GreaterThan
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// 100> x
return|return
operator|new
name|Range
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
name|constText
argument_list|,
literal|false
argument_list|)
return|;
comment|// neg-infinity to end exclusive
block|}
elseif|else
if|if
condition|(
name|opClz
operator|.
name|equals
argument_list|(
name|LessThanOrEqual
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// 100<= x
return|return
operator|new
name|Range
argument_list|(
name|constText
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
comment|// start inclusive to infinity
block|}
elseif|else
if|if
condition|(
name|opClz
operator|.
name|equals
argument_list|(
name|LessThan
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// 100< x
return|return
operator|new
name|Range
argument_list|(
name|constText
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
comment|// start exclusive to infinity
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not process "
operator|+
name|opClz
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Range
name|getColumnOpConstantRange
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|CompareOp
argument_list|>
name|opClz
parameter_list|,
name|Text
name|constText
parameter_list|)
block|{
if|if
condition|(
name|opClz
operator|.
name|equals
argument_list|(
name|Equal
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|new
name|Range
argument_list|(
name|constText
argument_list|)
return|;
comment|// start inclusive to end inclusive
block|}
elseif|else
if|if
condition|(
name|opClz
operator|.
name|equals
argument_list|(
name|GreaterThanOrEqual
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|new
name|Range
argument_list|(
name|constText
argument_list|,
literal|null
argument_list|)
return|;
comment|// start inclusive to infinity inclusive
block|}
elseif|else
if|if
condition|(
name|opClz
operator|.
name|equals
argument_list|(
name|GreaterThan
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|new
name|Range
argument_list|(
name|constText
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
comment|// start exclusive to infinity inclusive
block|}
elseif|else
if|if
condition|(
name|opClz
operator|.
name|equals
argument_list|(
name|LessThanOrEqual
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|new
name|Range
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
name|constText
argument_list|,
literal|true
argument_list|)
return|;
comment|// neg-infinity to start inclusive
block|}
elseif|else
if|if
condition|(
name|opClz
operator|.
name|equals
argument_list|(
name|LessThan
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|new
name|Range
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
name|constText
argument_list|,
literal|false
argument_list|)
return|;
comment|// neg-infinity to start exclusive
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not process "
operator|+
name|opClz
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Object
name|getIndexedRowIds
parameter_list|(
name|GenericUDF
name|genericUdf
parameter_list|,
name|ExprNodeDesc
name|leftHandNode
parameter_list|,
name|String
name|columnName
parameter_list|,
name|ConstantObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SemanticException
block|{
name|Text
name|constText
init|=
name|getConstantText
argument_list|(
name|objInspector
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|constText
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encoded
init|=
name|AccumuloIndexLexicoder
operator|.
name|encodeValue
argument_list|(
name|value
argument_list|,
name|leftHandNode
operator|.
name|getTypeString
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Range
name|range
init|=
name|getRange
argument_list|(
name|genericUdf
argument_list|,
name|leftHandNode
argument_list|,
operator|new
name|Text
argument_list|(
name|encoded
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexScanner
operator|!=
literal|null
condition|)
block|{
return|return
name|indexScanner
operator|.
name|getIndexRowRanges
argument_list|(
name|columnName
argument_list|,
name|range
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Text
name|getUtf8Value
parameter_list|(
name|ConstantObjectInspector
name|objInspector
parameter_list|)
block|{
comment|// TODO is there a more correct way to get the literal value for the Object?
return|return
operator|new
name|Text
argument_list|(
name|objInspector
operator|.
name|getWritableConstantValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Attempts to construct the binary value from the given inspector. Falls back to UTF8 encoding    * when the value cannot be coerced into binary.    *    * @return Binary value when possible, utf8 otherwise    * @throws IOException    */
specifier|protected
name|Text
name|getBinaryValue
parameter_list|(
name|ConstantObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|objInspector
operator|instanceof
name|PrimitiveObjectInspector
condition|)
block|{
name|LazyUtils
operator|.
name|writePrimitive
argument_list|(
name|out
argument_list|,
name|objInspector
operator|.
name|getWritableConstantValue
argument_list|()
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|objInspector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|getUtf8Value
argument_list|(
name|objInspector
argument_list|)
return|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|Text
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

