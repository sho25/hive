begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|mr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|impl
operator|.
name|OutputConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Extension of OutputConfigurtion to support indexing.  */
end_comment

begin_class
specifier|public
class|class
name|IndexOutputConfigurator
extends|extends
name|OutputConfigurator
block|{
comment|/**    * Accumulo Write options.    */
specifier|public
specifier|static
enum|enum
name|WriteOpts
block|{
name|DEFAULT_TABLE_NAME
block|,
name|INDEX_TABLE_NAME
block|,
name|INDEX_COLUMNS
block|,
name|COLUMN_TYPES
block|,
name|BINARY_ENCODING
block|,
name|BATCH_WRITER_CONFIG
block|;
specifier|private
name|WriteOpts
parameter_list|()
block|{     }
block|}
specifier|public
specifier|static
name|void
name|setIndexTableName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implementingClass
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|enumToConfKey
argument_list|(
name|implementingClass
argument_list|,
name|WriteOpts
operator|.
name|INDEX_TABLE_NAME
argument_list|)
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getIndexTableName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implementingClass
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|enumToConfKey
argument_list|(
name|implementingClass
argument_list|,
name|WriteOpts
operator|.
name|INDEX_TABLE_NAME
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|setIndexColumns
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implementingClass
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|tableName
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|enumToConfKey
argument_list|(
name|implementingClass
argument_list|,
name|WriteOpts
operator|.
name|INDEX_COLUMNS
argument_list|)
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getIndexColumns
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implementingClass
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|enumToConfKey
argument_list|(
name|implementingClass
argument_list|,
name|WriteOpts
operator|.
name|INDEX_COLUMNS
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|setRecordEncoding
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implementingClass
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Boolean
name|isBinary
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|enumToConfKey
argument_list|(
name|implementingClass
argument_list|,
name|WriteOpts
operator|.
name|BINARY_ENCODING
argument_list|)
argument_list|,
name|isBinary
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Boolean
name|getRecordEncoding
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|implementingClass
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|enumToConfKey
argument_list|(
name|implementingClass
argument_list|,
name|WriteOpts
operator|.
name|BINARY_ENCODING
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

