begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|ColumnVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloConnectionParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|HiveAccumuloRowIdColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|AccumuloSerDeParameters
extends|extends
name|AccumuloConnectionParameters
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COLUMN_MAPPINGS
init|=
literal|"accumulo.columns.mapping"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ITERATOR_PUSHDOWN_KEY
init|=
literal|"accumulo.iterator.pushdown"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|ITERATOR_PUSHDOWN_DEFAULT
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_STORAGE_TYPE
init|=
literal|"accumulo.default.storage"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VISIBILITY_LABEL_KEY
init|=
literal|"accumulo.visibility.label"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ColumnVisibility
name|DEFAULT_VISIBILITY_LABEL
init|=
operator|new
name|ColumnVisibility
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTHORIZATIONS_KEY
init|=
literal|"accumulo.authorizations"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPOSITE_ROWID_FACTORY
init|=
literal|"accumulo.composite.rowid.factory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPOSITE_ROWID_CLASS
init|=
literal|"accumulo.composite.rowid"
decl_stmt|;
specifier|protected
specifier|final
name|ColumnMapper
name|columnMapper
decl_stmt|;
specifier|private
name|Properties
name|tableProperties
decl_stmt|;
specifier|private
name|String
name|serdeName
decl_stmt|;
specifier|private
name|LazySerDeParameters
name|lazySerDeParameters
decl_stmt|;
specifier|private
name|AccumuloRowIdFactory
name|rowIdFactory
decl_stmt|;
specifier|public
name|AccumuloSerDeParameters
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tableProperties
parameter_list|,
name|String
name|serdeName
parameter_list|)
throws|throws
name|SerDeException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableProperties
operator|=
name|tableProperties
expr_stmt|;
name|this
operator|.
name|serdeName
operator|=
name|serdeName
expr_stmt|;
name|lazySerDeParameters
operator|=
operator|new
name|LazySerDeParameters
argument_list|(
name|conf
argument_list|,
name|tableProperties
argument_list|,
name|serdeName
argument_list|)
expr_stmt|;
comment|// The default encoding for this table when not otherwise specified
name|String
name|defaultStorage
init|=
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|DEFAULT_STORAGE_TYPE
argument_list|)
decl_stmt|;
name|columnMapper
operator|=
operator|new
name|ColumnMapper
argument_list|(
name|getColumnMappingValue
argument_list|()
argument_list|,
name|defaultStorage
argument_list|,
name|lazySerDeParameters
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|lazySerDeParameters
operator|.
name|getColumnTypes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Constructed column mapping "
operator|+
name|columnMapper
argument_list|)
expr_stmt|;
comment|// Generate types for column mapping
if|if
condition|(
literal|null
operator|==
name|getColumnTypeValue
argument_list|()
condition|)
block|{
name|tableProperties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|columnMapper
operator|.
name|getTypesString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnMapper
operator|.
name|size
argument_list|()
operator|<
name|lazySerDeParameters
operator|.
name|getColumnNames
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TooManyHiveColumnsException
argument_list|(
literal|"You have more "
operator|+
name|COLUMN_MAPPINGS
operator|+
literal|" fields than hive columns"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|columnMapper
operator|.
name|size
argument_list|()
operator|>
name|lazySerDeParameters
operator|.
name|getColumnNames
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TooManyAccumuloColumnsException
argument_list|(
literal|"You have more hive columns than fields mapped with "
operator|+
name|COLUMN_MAPPINGS
argument_list|)
throw|;
block|}
name|this
operator|.
name|rowIdFactory
operator|=
name|initRowIdFactory
argument_list|(
name|conf
argument_list|,
name|tableProperties
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AccumuloRowIdFactory
name|initRowIdFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|AccumuloRowIdFactory
name|keyFactory
init|=
name|createRowIdFactory
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyFactory
operator|!=
literal|null
condition|)
block|{
name|keyFactory
operator|.
name|init
argument_list|(
name|this
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
return|return
name|keyFactory
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|protected
name|AccumuloRowIdFactory
name|createRowIdFactory
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Try to load the composite factory if one was provided
name|String
name|factoryClassName
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|COMPOSITE_ROWID_FACTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|factoryClassName
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Loading CompositeRowIdFactory class "
operator|+
name|factoryClassName
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|factoryClazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|factoryClassName
argument_list|)
decl_stmt|;
return|return
operator|(
name|AccumuloRowIdFactory
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|factoryClazz
argument_list|,
name|job
argument_list|)
return|;
block|}
comment|// See if a custom CompositeKey class was provided
name|String
name|keyClassName
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|COMPOSITE_ROWID_CLASS
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyClassName
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Loading CompositeRowId class "
operator|+
name|keyClassName
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|keyClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|keyClassName
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|AccumuloCompositeRowId
argument_list|>
name|compositeRowIdClass
init|=
name|keyClass
operator|.
name|asSubclass
argument_list|(
name|AccumuloCompositeRowId
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompositeAccumuloRowIdFactory
argument_list|(
name|compositeRowIdClass
argument_list|)
return|;
block|}
return|return
operator|new
name|DefaultAccumuloRowIdFactory
argument_list|()
return|;
block|}
specifier|public
name|LazySerDeParameters
name|getSerDeParameters
parameter_list|()
block|{
return|return
name|lazySerDeParameters
return|;
block|}
specifier|public
name|Properties
name|getTableProperties
parameter_list|()
block|{
return|return
name|tableProperties
return|;
block|}
specifier|public
name|String
name|getColumnTypeValue
parameter_list|()
block|{
return|return
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSerDeName
parameter_list|()
block|{
return|return
name|serdeName
return|;
block|}
specifier|public
name|String
name|getColumnMappingValue
parameter_list|()
block|{
return|return
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|COLUMN_MAPPINGS
argument_list|)
return|;
block|}
specifier|public
name|HiveAccumuloRowIdColumnMapping
name|getRowIdColumnMapping
parameter_list|()
block|{
return|return
name|columnMapper
operator|.
name|getRowIdMapping
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getIteratorPushdown
parameter_list|()
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|ITERATOR_PUSHDOWN_KEY
argument_list|,
name|ITERATOR_PUSHDOWN_DEFAULT
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getHiveColumnNames
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|lazySerDeParameters
operator|.
name|getColumnNames
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|getHiveColumnTypes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|lazySerDeParameters
operator|.
name|getColumnTypes
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ColumnMapper
name|getColumnMapper
parameter_list|()
block|{
return|return
name|columnMapper
return|;
block|}
specifier|public
name|int
name|getRowIdOffset
parameter_list|()
block|{
return|return
name|columnMapper
operator|.
name|getRowIdOffset
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|getColumnMappings
parameter_list|()
block|{
return|return
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
return|;
block|}
specifier|public
name|AccumuloRowIdFactory
name|getRowIdFactory
parameter_list|()
block|{
return|return
name|rowIdFactory
return|;
block|}
specifier|public
name|String
name|getRowIdHiveColumnName
parameter_list|()
block|{
name|int
name|rowIdOffset
init|=
name|columnMapper
operator|.
name|getRowIdOffset
argument_list|()
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|rowIdOffset
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|hiveColumnNames
init|=
name|lazySerDeParameters
operator|.
name|getColumnNames
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|>
name|rowIdOffset
operator|||
name|hiveColumnNames
operator|.
name|size
argument_list|()
operator|<=
name|rowIdOffset
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Tried to find rowID offset at position "
operator|+
name|rowIdOffset
operator|+
literal|" from Hive columns "
operator|+
name|hiveColumnNames
argument_list|)
throw|;
block|}
return|return
name|hiveColumnNames
operator|.
name|get
argument_list|(
name|rowIdOffset
argument_list|)
return|;
block|}
specifier|public
name|ColumnMapping
name|getColumnMappingForHiveColumn
parameter_list|(
name|String
name|hiveColumn
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hiveColumnNames
init|=
name|lazySerDeParameters
operator|.
name|getColumnNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|offset
init|=
literal|0
init|;
name|offset
operator|<
name|hiveColumnNames
operator|.
name|size
argument_list|()
operator|&&
name|offset
operator|<
name|columnMapper
operator|.
name|size
argument_list|()
condition|;
name|offset
operator|++
control|)
block|{
name|String
name|hiveColumnName
init|=
name|hiveColumnNames
operator|.
name|get
argument_list|(
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveColumn
operator|.
name|equals
argument_list|(
name|hiveColumnName
argument_list|)
condition|)
block|{
return|return
name|columnMapper
operator|.
name|get
argument_list|(
name|offset
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"Could not find column mapping for Hive column "
operator|+
name|hiveColumn
argument_list|)
throw|;
block|}
specifier|public
name|TypeInfo
name|getTypeForHiveColumn
parameter_list|(
name|String
name|hiveColumn
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|hiveColumnNames
init|=
name|lazySerDeParameters
operator|.
name|getColumnNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|hiveColumnTypes
init|=
name|lazySerDeParameters
operator|.
name|getColumnTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hiveColumnNames
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|hiveColumnTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|columnName
init|=
name|hiveColumnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|hiveColumn
operator|.
name|equals
argument_list|(
name|columnName
argument_list|)
condition|)
block|{
return|return
name|hiveColumnTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"Could not find Hive column type for "
operator|+
name|hiveColumn
argument_list|)
throw|;
block|}
comment|/**    * Extracts the table property to allow a custom ColumnVisibility label to be set on updates to be    * written to an Accumulo table. The value in the table property must be a properly formatted    * {@link ColumnVisibility}. If not value is present in the table properties, an empty    * ColumnVisibility is returned.    *    * @return The ColumnVisibility to be applied to all updates sent to Accumulo    */
specifier|public
name|ColumnVisibility
name|getTableVisibilityLabel
parameter_list|()
block|{
name|String
name|visibilityLabel
init|=
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|VISIBILITY_LABEL_KEY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|visibilityLabel
operator|||
name|visibilityLabel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|DEFAULT_VISIBILITY_LABEL
return|;
block|}
return|return
operator|new
name|ColumnVisibility
argument_list|(
name|visibilityLabel
argument_list|)
return|;
block|}
comment|/**    * Extracts the table property to allow dynamic Accumulo Authorizations to be used when reading    * data from an Accumulo table. If no Authorizations are provided in the table properties, null is    * returned to preserve the functionality to read all data that the current user has access to.    *    * @return The Authorizations that should be used to read data from Accumulo, null if no    *         configuration is supplied.    */
specifier|public
name|Authorizations
name|getAuthorizations
parameter_list|()
block|{
name|String
name|authorizationStr
init|=
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|AUTHORIZATIONS_KEY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|getAuthorizationsFromValue
argument_list|(
name|authorizationStr
argument_list|)
return|;
block|}
comment|/**    * Create an Authorizations object when the provided value is not null. Will return null,    * otherwise.    *    * @param authorizationStr    *          Configuration value to parse    * @return Authorization object or null    */
specifier|protected
specifier|static
name|Authorizations
name|getAuthorizationsFromValue
parameter_list|(
name|String
name|authorizationStr
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|authorizationStr
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Authorizations
argument_list|(
name|authorizationStr
argument_list|)
return|;
block|}
comment|/**    * Extract any configuration on Authorizations to be used from the provided Configuration. If a    * non-null value is not present in the configuration, a null object is returned    *    * @return Authorization built from configuration value, null if no value is present in conf    */
specifier|public
specifier|static
name|Authorizations
name|getAuthorizationsFromConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|authorizationStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|AUTHORIZATIONS_KEY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|getAuthorizationsFromValue
argument_list|(
name|authorizationStr
argument_list|)
return|;
block|}
block|}
end_class

end_unit

