begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|IteratorSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|HiveAccumuloColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|DoubleCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|Equal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|GreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|GreaterThanOrEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|IntCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|LessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|LessThanOrEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|Like
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|LongCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|NotEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|PrimitiveComparison
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|StringCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloSerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexPredicateAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFLike
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  *  * Supporting operations dealing with Hive Predicate pushdown to iterators and ranges.  *  * See {@link PrimitiveComparisonFilter}  *  */
end_comment

begin_class
specifier|public
class|class
name|AccumuloPredicateHandler
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Range
argument_list|>
name|TOTAL_RANGE
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|Range
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AccumuloPredicateHandler
name|handler
init|=
operator|new
name|AccumuloPredicateHandler
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|CompareOp
argument_list|>
argument_list|>
name|compareOps
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|PrimitiveComparison
argument_list|>
argument_list|>
name|pComparisons
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
comment|// Want to start sufficiently "high" enough in the iterator stack
specifier|private
specifier|static
name|int
name|iteratorCount
init|=
literal|50
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AccumuloPredicateHandler
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|compareOps
operator|.
name|put
argument_list|(
name|GenericUDFOPEqual
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Equal
operator|.
name|class
argument_list|)
expr_stmt|;
name|compareOps
operator|.
name|put
argument_list|(
name|GenericUDFOPNotEqual
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|NotEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|compareOps
operator|.
name|put
argument_list|(
name|GenericUDFOPGreaterThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|GreaterThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|compareOps
operator|.
name|put
argument_list|(
name|GenericUDFOPEqualOrGreaterThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|GreaterThanOrEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|compareOps
operator|.
name|put
argument_list|(
name|GenericUDFOPEqualOrLessThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|LessThanOrEqual
operator|.
name|class
argument_list|)
expr_stmt|;
name|compareOps
operator|.
name|put
argument_list|(
name|GenericUDFOPLessThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|LessThan
operator|.
name|class
argument_list|)
expr_stmt|;
name|compareOps
operator|.
name|put
argument_list|(
name|UDFLike
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Like
operator|.
name|class
argument_list|)
expr_stmt|;
name|pComparisons
operator|.
name|put
argument_list|(
literal|"bigint"
argument_list|,
name|LongCompare
operator|.
name|class
argument_list|)
expr_stmt|;
name|pComparisons
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|IntCompare
operator|.
name|class
argument_list|)
expr_stmt|;
name|pComparisons
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|DoubleCompare
operator|.
name|class
argument_list|)
expr_stmt|;
name|pComparisons
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
name|StringCompare
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|AccumuloPredicateHandler
name|getInstance
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
comment|/**    *    * @return set of all UDF class names with matching CompareOpt implementations.    */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|cOpKeyset
parameter_list|()
block|{
return|return
name|compareOps
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**    *    * @return set of all hive data types with matching PrimitiveCompare implementations.    */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|pComparisonKeyset
parameter_list|()
block|{
return|return
name|pComparisons
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**    *    * @param udfType    *          GenericUDF classname to lookup matching CompareOpt    * @return Class<? extends CompareOpt/>    */
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|CompareOp
argument_list|>
name|getCompareOpClass
parameter_list|(
name|String
name|udfType
parameter_list|)
throws|throws
name|NoSuchCompareOpException
block|{
if|if
condition|(
operator|!
name|compareOps
operator|.
name|containsKey
argument_list|(
name|udfType
argument_list|)
condition|)
throw|throw
operator|new
name|NoSuchCompareOpException
argument_list|(
literal|"Null compare op for specified key: "
operator|+
name|udfType
argument_list|)
throw|;
return|return
name|compareOps
operator|.
name|get
argument_list|(
name|udfType
argument_list|)
return|;
block|}
specifier|public
name|CompareOp
name|getCompareOp
parameter_list|(
name|String
name|udfType
parameter_list|,
name|IndexSearchCondition
name|sc
parameter_list|)
throws|throws
name|NoSuchCompareOpException
throws|,
name|SerDeException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CompareOp
argument_list|>
name|clz
init|=
name|getCompareOpClass
argument_list|(
name|udfType
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|clz
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Column type mismatch in WHERE clause "
operator|+
name|sc
operator|.
name|getComparisonExpr
argument_list|()
operator|.
name|getExprString
argument_list|()
operator|+
literal|" found type "
operator|+
name|sc
operator|.
name|getConstantDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
operator|+
literal|" instead of "
operator|+
name|sc
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Could not instantiate class for WHERE clause"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Could not instantiate class for WHERE clause"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    *    * @param type    *          String hive column lookup matching PrimitiveCompare    * @return Class<? extends></?>    */
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|PrimitiveComparison
argument_list|>
name|getPrimitiveComparisonClass
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|NoSuchPrimitiveComparisonException
block|{
if|if
condition|(
operator|!
name|pComparisons
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
throw|throw
operator|new
name|NoSuchPrimitiveComparisonException
argument_list|(
literal|"Null primitive comparison for specified key: "
operator|+
name|type
argument_list|)
throw|;
return|return
name|pComparisons
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|PrimitiveComparison
name|getPrimitiveComparison
parameter_list|(
name|String
name|type
parameter_list|,
name|IndexSearchCondition
name|sc
parameter_list|)
throws|throws
name|NoSuchPrimitiveComparisonException
throws|,
name|SerDeException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|PrimitiveComparison
argument_list|>
name|clz
init|=
name|getPrimitiveComparisonClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|clz
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Column type mismatch in WHERE clause "
operator|+
name|sc
operator|.
name|getComparisonExpr
argument_list|()
operator|.
name|getExprString
argument_list|()
operator|+
literal|" found type "
operator|+
name|sc
operator|.
name|getConstantDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
operator|+
literal|" instead of "
operator|+
name|sc
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Could not instantiate class for WHERE clause"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Could not instantiate class for WHERE clause"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|AccumuloPredicateHandler
parameter_list|()
block|{}
comment|/**    * Loop through search conditions and build ranges for predicates involving rowID column, if any.    */
specifier|public
name|List
argument_list|<
name|Range
argument_list|>
name|getRanges
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ColumnMapper
name|columnMapper
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
operator|!
name|columnMapper
operator|.
name|hasRowIdMapping
argument_list|()
condition|)
block|{
return|return
name|TOTAL_RANGE
return|;
block|}
name|int
name|rowIdOffset
init|=
name|columnMapper
operator|.
name|getRowIdOffset
argument_list|()
decl_stmt|;
name|String
index|[]
name|hiveColumnNamesArr
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|hiveColumnNamesArr
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find Hive columns in configuration"
argument_list|)
throw|;
block|}
comment|// Already verified that we should have the rowId mapping
name|String
name|hiveRowIdColumnName
init|=
name|hiveColumnNamesArr
index|[
name|rowIdOffset
index|]
decl_stmt|;
name|ExprNodeDesc
name|root
init|=
name|this
operator|.
name|getExpression
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// No expression, therefore scan the whole table
if|if
condition|(
literal|null
operator|==
name|root
condition|)
block|{
return|return
name|TOTAL_RANGE
return|;
block|}
name|Object
name|result
init|=
name|generateRanges
argument_list|(
name|columnMapper
argument_list|,
name|hiveRowIdColumnName
argument_list|,
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|result
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Calculated null set of ranges, scanning full table"
argument_list|)
expr_stmt|;
return|return
name|TOTAL_RANGE
return|;
block|}
elseif|else
if|if
condition|(
name|result
operator|instanceof
name|Range
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Computed a single Range for the query: "
operator|+
name|result
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
name|Range
operator|)
name|result
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|result
operator|instanceof
name|List
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Computed a collection of Ranges for the query: "
operator|+
name|result
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
operator|(
name|List
argument_list|<
name|Range
argument_list|>
operator|)
name|result
decl_stmt|;
return|return
name|ranges
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unhandled return from Range generation: "
operator|+
name|result
argument_list|)
throw|;
block|}
block|}
comment|/**    * Encapsulates the traversal over some {@link ExprNodeDesc} tree for the generation of Accumuluo    * Ranges using expressions involving the Accumulo rowid-mapped Hive column    *    * @param columnMapper    *          Mapping of Hive to Accumulo columns for the query    * @param hiveRowIdColumnName    *          Name of the hive column mapped to the Accumulo rowid    * @param root    *          Root of some ExprNodeDesc tree to traverse, the WHERE clause    * @return An object representing the result from the ExprNodeDesc tree traversal using the    *         AccumuloRangeGenerator    */
specifier|protected
name|Object
name|generateRanges
parameter_list|(
name|ColumnMapper
name|columnMapper
parameter_list|,
name|String
name|hiveRowIdColumnName
parameter_list|,
name|ExprNodeDesc
name|root
parameter_list|)
block|{
name|AccumuloRangeGenerator
name|rangeGenerator
init|=
operator|new
name|AccumuloRangeGenerator
argument_list|(
name|handler
argument_list|,
name|columnMapper
operator|.
name|getRowIdMapping
argument_list|()
argument_list|,
name|hiveRowIdColumnName
argument_list|)
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|rangeGenerator
argument_list|,
name|Collections
operator|.
expr|<
name|Rule
argument_list|,
name|NodeProcessor
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|roots
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|roots
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|roots
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|nodeOutput
operator|.
name|get
argument_list|(
name|root
argument_list|)
return|;
block|}
comment|/**    * Loop through search conditions and build iterator settings for predicates involving columns    * other than rowID, if any.    *    * @param conf    *          Configuration    * @throws SerDeException    */
specifier|public
name|List
argument_list|<
name|IteratorSetting
argument_list|>
name|getIterators
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ColumnMapper
name|columnMapper
parameter_list|)
throws|throws
name|SerDeException
block|{
name|List
argument_list|<
name|IteratorSetting
argument_list|>
name|itrs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|boolean
name|shouldPushdown
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|ITERATOR_PUSHDOWN_KEY
argument_list|,
name|AccumuloSerDeParameters
operator|.
name|ITERATOR_PUSHDOWN_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldPushdown
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Iterator pushdown is disabled for this table"
argument_list|)
expr_stmt|;
return|return
name|itrs
return|;
block|}
name|int
name|rowIdOffset
init|=
name|columnMapper
operator|.
name|getRowIdOffset
argument_list|()
decl_stmt|;
name|String
index|[]
name|hiveColumnNamesArr
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|hiveColumnNamesArr
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find Hive columns in configuration"
argument_list|)
throw|;
block|}
name|String
name|hiveRowIdColumnName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rowIdOffset
operator|>=
literal|0
operator|&&
name|rowIdOffset
operator|<
name|hiveColumnNamesArr
operator|.
name|length
condition|)
block|{
name|hiveRowIdColumnName
operator|=
name|hiveColumnNamesArr
index|[
name|rowIdOffset
index|]
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|hiveColumnNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|hiveColumnNamesArr
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|sc
range|:
name|getSearchConditions
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|String
name|col
init|=
name|sc
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveRowIdColumnName
operator|==
literal|null
operator|||
operator|!
name|hiveRowIdColumnName
operator|.
name|equals
argument_list|(
name|col
argument_list|)
condition|)
block|{
name|HiveAccumuloColumnMapping
name|mapping
init|=
operator|(
name|HiveAccumuloColumnMapping
operator|)
name|columnMapper
operator|.
name|getColumnMappingForHiveColumn
argument_list|(
name|hiveColumnNames
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|itrs
operator|.
name|add
argument_list|(
name|toSetting
argument_list|(
name|mapping
argument_list|,
name|sc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"num iterators = "
operator|+
name|itrs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|itrs
return|;
block|}
comment|/**    * Create an IteratorSetting for the right qualifier, constant, CompareOpt, and PrimitiveCompare    * type.    *    * @param accumuloColumnMapping    *          ColumnMapping to filter    * @param sc    *          IndexSearchCondition    * @return IteratorSetting    * @throws SerDeException    */
specifier|public
name|IteratorSetting
name|toSetting
parameter_list|(
name|HiveAccumuloColumnMapping
name|accumuloColumnMapping
parameter_list|,
name|IndexSearchCondition
name|sc
parameter_list|)
throws|throws
name|SerDeException
block|{
name|iteratorCount
operator|++
expr_stmt|;
specifier|final
name|IteratorSetting
name|is
init|=
operator|new
name|IteratorSetting
argument_list|(
name|iteratorCount
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|FILTER_PREFIX
operator|+
name|iteratorCount
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|type
init|=
name|sc
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|comparisonOpStr
init|=
name|sc
operator|.
name|getComparisonOp
argument_list|()
decl_stmt|;
name|PushdownTuple
name|tuple
decl_stmt|;
try|try
block|{
name|tuple
operator|=
operator|new
name|PushdownTuple
argument_list|(
name|sc
argument_list|,
name|getPrimitiveComparison
argument_list|(
name|type
argument_list|,
name|sc
argument_list|)
argument_list|,
name|getCompareOp
argument_list|(
name|comparisonOpStr
argument_list|,
name|sc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchPrimitiveComparisonException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"No configured PrimitiveComparison class for "
operator|+
name|type
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchCompareOpException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"No configured CompareOp class for "
operator|+
name|comparisonOpStr
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|,
name|tuple
operator|.
name|getpCompare
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|,
name|tuple
operator|.
name|getcOpt
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|,
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|tuple
operator|.
name|getConstVal
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|,
name|accumuloColumnMapping
operator|.
name|serialize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|is
return|;
block|}
specifier|public
name|ExprNodeDesc
name|getExpression
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|filteredExprSerialized
init|=
name|conf
operator|.
name|get
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredExprSerialized
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|Utilities
operator|.
name|deserializeExpression
argument_list|(
name|filteredExprSerialized
argument_list|)
return|;
block|}
comment|/**    *    * @param conf    *          Configuration    * @return list of IndexSearchConditions from the filter expression.    */
specifier|public
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|getSearchConditions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|sConditions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|filterExpr
init|=
name|getExpression
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|filterExpr
condition|)
block|{
return|return
name|sConditions
return|;
block|}
name|IndexPredicateAnalyzer
name|analyzer
init|=
name|newAnalyzer
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|residual
init|=
name|analyzer
operator|.
name|analyzePredicate
argument_list|(
name|filterExpr
argument_list|,
name|sConditions
argument_list|)
decl_stmt|;
if|if
condition|(
name|residual
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected residual predicate: "
operator|+
name|residual
operator|.
name|getExprString
argument_list|()
argument_list|)
throw|;
return|return
name|sConditions
return|;
block|}
comment|/**    *    * @param conf    *          Configuration    * @param desc    *          predicate expression node.    * @return DecomposedPredicate containing translated search conditions the analyzer can support.    */
specifier|public
name|DecomposedPredicate
name|decompose
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ExprNodeDesc
name|desc
parameter_list|)
block|{
name|IndexPredicateAnalyzer
name|analyzer
init|=
name|newAnalyzer
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|sConditions
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|residualPredicate
init|=
name|analyzer
operator|.
name|analyzePredicate
argument_list|(
name|desc
argument_list|,
name|sConditions
argument_list|)
decl_stmt|;
if|if
condition|(
name|sConditions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"nothing to decompose. Returning"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|DecomposedPredicate
name|decomposedPredicate
init|=
operator|new
name|DecomposedPredicate
argument_list|()
decl_stmt|;
name|decomposedPredicate
operator|.
name|pushedPredicate
operator|=
name|analyzer
operator|.
name|translateSearchConditions
argument_list|(
name|sConditions
argument_list|)
expr_stmt|;
name|decomposedPredicate
operator|.
name|residualPredicate
operator|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|residualPredicate
expr_stmt|;
return|return
name|decomposedPredicate
return|;
block|}
comment|/**    * Build an analyzer that allows comparison opts from compareOpts map, and all columns from table    * definition.    */
specifier|private
name|IndexPredicateAnalyzer
name|newAnalyzer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|IndexPredicateAnalyzer
name|analyzer
init|=
operator|new
name|IndexPredicateAnalyzer
argument_list|()
decl_stmt|;
name|analyzer
operator|.
name|clearAllowedColumnNames
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|op
range|:
name|cOpKeyset
argument_list|()
control|)
block|{
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|hiveColumnNames
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|hiveColumnNames
control|)
block|{
name|analyzer
operator|.
name|allowColumnName
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
return|return
name|analyzer
return|;
block|}
block|}
end_class

end_unit

