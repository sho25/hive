begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloHiveConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_comment
comment|/**  * A Hive column which maps to a column family and column qualifier pair in Accumulo  */
end_comment

begin_class
specifier|public
class|class
name|HiveAccumuloColumnMapping
extends|extends
name|ColumnMapping
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|HiveAccumuloColumnMapping
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|columnFamily
decl_stmt|,
name|columnQualifier
decl_stmt|;
specifier|protected
name|byte
index|[]
name|columnFamilyBytes
decl_stmt|,
name|columnQualifierBytes
decl_stmt|;
specifier|public
name|HiveAccumuloColumnMapping
parameter_list|(
name|String
name|cf
parameter_list|,
name|String
name|cq
parameter_list|,
name|ColumnEncoding
name|encoding
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|columnType
parameter_list|)
block|{
name|super
argument_list|(
name|cf
operator|+
name|AccumuloHiveConstants
operator|.
name|COLON
operator|+
name|cq
argument_list|,
name|encoding
argument_list|,
name|columnName
argument_list|,
name|columnType
argument_list|)
expr_stmt|;
name|columnFamily
operator|=
name|cf
expr_stmt|;
name|columnQualifier
operator|=
name|cq
expr_stmt|;
block|}
specifier|public
name|String
name|getColumnFamily
parameter_list|()
block|{
return|return
name|this
operator|.
name|columnFamily
return|;
block|}
comment|/**    * Cached bytes for the columnFamily. Modifications to the bytes will affect those stored in this    * ColumnMapping -- such modifications are highly recommended against.    *    * @return UTF8 formatted bytes    */
specifier|public
name|byte
index|[]
name|getColumnFamilyBytes
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|columnFamilyBytes
condition|)
block|{
name|columnFamilyBytes
operator|=
name|columnFamily
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
return|return
name|columnFamilyBytes
return|;
block|}
specifier|public
name|String
name|getColumnQualifier
parameter_list|()
block|{
return|return
name|this
operator|.
name|columnQualifier
return|;
block|}
comment|/**    * Cached bytes for the columnQualifier. Modifications to the bytes will affect those stored in    * this ColumnMapping -- such modifications are highly recommended against.    *    * @return UTF8 formatted bytes    */
specifier|public
name|byte
index|[]
name|getColumnQualifierBytes
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|columnQualifierBytes
condition|)
block|{
name|columnQualifierBytes
operator|=
name|columnQualifier
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
return|return
name|columnQualifierBytes
return|;
block|}
specifier|public
name|String
name|serialize
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|columnFamily
argument_list|)
operator|.
name|append
argument_list|(
name|AccumuloHiveConstants
operator|.
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|columnQualifier
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|columnQualifier
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|columnFamily
operator|+
literal|":"
operator|+
name|columnQualifier
operator|+
literal|", encoding "
operator|+
name|encoding
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

