begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|mr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|BatchWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|MultiTableBatchWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|MutationsRejectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mapred
operator|.
name|AccumuloOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|ColumnUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|KeyExtent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|ColumnVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloIndexLexicoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Extension of AccumuloOutputFormat to support indexing.  */
end_comment

begin_class
specifier|public
class|class
name|AccumuloIndexedOutputFormat
extends|extends
name|AccumuloOutputFormat
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AccumuloIndexedOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|CLASS
init|=
name|AccumuloOutputFormat
operator|.
name|class
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTES
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|public
specifier|static
name|void
name|setIndexTableName
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|IndexOutputConfigurator
operator|.
name|setIndexTableName
argument_list|(
name|CLASS
argument_list|,
name|job
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|String
name|getIndexTableName
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
return|return
name|IndexOutputConfigurator
operator|.
name|getIndexTableName
argument_list|(
name|CLASS
argument_list|,
name|job
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|setIndexColumns
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|String
name|fields
parameter_list|)
block|{
name|IndexOutputConfigurator
operator|.
name|setIndexColumns
argument_list|(
name|CLASS
argument_list|,
name|job
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|String
name|getIndexColumns
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
return|return
name|IndexOutputConfigurator
operator|.
name|getIndexColumns
argument_list|(
name|CLASS
argument_list|,
name|job
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|setStringEncoding
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|Boolean
name|isStringEncoding
parameter_list|)
block|{
name|IndexOutputConfigurator
operator|.
name|setRecordEncoding
argument_list|(
name|CLASS
argument_list|,
name|job
argument_list|,
name|isStringEncoding
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|Boolean
name|getStringEncoding
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
return|return
name|IndexOutputConfigurator
operator|.
name|getRecordEncoding
argument_list|(
name|CLASS
argument_list|,
name|job
argument_list|)
return|;
block|}
specifier|public
name|RecordWriter
argument_list|<
name|Text
argument_list|,
name|Mutation
argument_list|>
name|getRecordWriter
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|String
name|name
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|new
name|AccumuloIndexedOutputFormat
operator|.
name|AccumuloRecordWriter
argument_list|(
name|job
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|AccumuloRecordWriter
implements|implements
name|RecordWriter
argument_list|<
name|Text
argument_list|,
name|Mutation
argument_list|>
block|{
specifier|private
name|MultiTableBatchWriter
name|mtbw
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Text
argument_list|,
name|BatchWriter
argument_list|>
name|bws
init|=
literal|null
decl_stmt|;
specifier|private
name|Text
name|defaultTableName
init|=
literal|null
decl_stmt|;
specifier|private
name|Text
name|indexTableName
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|simulate
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|createTables
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|isStringEncoded
init|=
literal|true
decl_stmt|;
specifier|private
name|long
name|mutCount
init|=
literal|0L
decl_stmt|;
specifier|private
name|long
name|valCount
init|=
literal|0L
decl_stmt|;
specifier|private
name|Connector
name|conn
decl_stmt|;
specifier|private
name|AccumuloIndexDefinition
name|indexDef
init|=
literal|null
decl_stmt|;
specifier|protected
name|AccumuloRecordWriter
parameter_list|(
name|JobConf
name|job
parameter_list|)
throws|throws
name|AccumuloException
throws|,
name|AccumuloSecurityException
throws|,
name|IOException
block|{
name|Level
name|l
init|=
name|AccumuloIndexedOutputFormat
operator|.
name|getLogLevel
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|setLevel
argument_list|(
name|AccumuloIndexedOutputFormat
operator|.
name|getLogLevel
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|isStringEncoded
operator|=
name|AccumuloIndexedOutputFormat
operator|.
name|getStringEncoding
argument_list|(
name|job
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|simulate
operator|=
name|AccumuloIndexedOutputFormat
operator|.
name|getSimulationMode
argument_list|(
name|job
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|createTables
operator|=
name|AccumuloIndexedOutputFormat
operator|.
name|canCreateTables
argument_list|(
name|job
argument_list|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|simulate
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulating output only. No writes to tables will occur"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|bws
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|String
name|tname
init|=
name|AccumuloIndexedOutputFormat
operator|.
name|getDefaultTableName
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|this
operator|.
name|defaultTableName
operator|=
name|tname
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Text
argument_list|(
name|tname
argument_list|)
expr_stmt|;
name|String
name|iname
init|=
name|AccumuloIndexedOutputFormat
operator|.
name|getIndexTableName
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|iname
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Index Table = "
operator|+
name|iname
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexTableName
operator|=
operator|new
name|Text
argument_list|(
name|iname
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexDef
operator|=
name|createIndexDefinition
argument_list|(
name|job
argument_list|,
name|tname
argument_list|,
name|iname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|simulate
condition|)
block|{
name|this
operator|.
name|conn
operator|=
name|AccumuloIndexedOutputFormat
operator|.
name|getInstance
argument_list|(
name|job
argument_list|)
operator|.
name|getConnector
argument_list|(
name|AccumuloIndexedOutputFormat
operator|.
name|getPrincipal
argument_list|(
name|job
argument_list|)
argument_list|,
name|AccumuloIndexedOutputFormat
operator|.
name|getAuthenticationToken
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|mtbw
operator|=
name|this
operator|.
name|conn
operator|.
name|createMultiTableBatchWriter
argument_list|(
name|AccumuloIndexedOutputFormat
operator|.
name|getBatchWriterOptions
argument_list|(
name|job
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|AccumuloIndexDefinition
name|createIndexDefinition
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|String
name|tname
parameter_list|,
name|String
name|iname
parameter_list|)
block|{
name|AccumuloIndexDefinition
name|def
init|=
operator|new
name|AccumuloIndexDefinition
argument_list|(
name|tname
argument_list|,
name|iname
argument_list|)
decl_stmt|;
name|String
name|cols
init|=
name|AccumuloIndexedOutputFormat
operator|.
name|getIndexColumns
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Index Cols = "
operator|+
name|cols
argument_list|)
expr_stmt|;
name|def
operator|.
name|setColumnTuples
argument_list|(
name|cols
argument_list|)
expr_stmt|;
return|return
name|def
return|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Text
name|table
parameter_list|,
name|Mutation
name|mutation
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|table
operator|==
literal|null
operator|||
name|table
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|table
operator|=
name|this
operator|.
name|defaultTableName
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|simulate
operator|&&
name|table
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No table or default table specified. Try simulation mode next time"
argument_list|)
throw|;
block|}
else|else
block|{
operator|++
name|this
operator|.
name|mutCount
expr_stmt|;
name|this
operator|.
name|valCount
operator|+=
operator|(
name|long
operator|)
name|mutation
operator|.
name|size
argument_list|()
expr_stmt|;
name|this
operator|.
name|printMutation
argument_list|(
name|table
argument_list|,
name|mutation
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|simulate
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|bws
operator|.
name|containsKey
argument_list|(
name|table
argument_list|)
condition|)
block|{
try|try
block|{
name|this
operator|.
name|addTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|var5
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|var5
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|var5
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|indexTableName
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|bws
operator|.
name|containsKey
argument_list|(
name|indexTableName
argument_list|)
condition|)
block|{
try|try
block|{
name|this
operator|.
name|addTable
argument_list|(
name|indexTableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|var6
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|var6
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|var6
argument_list|)
throw|;
block|}
block|}
try|try
block|{
operator|(
operator|(
name|BatchWriter
operator|)
name|this
operator|.
name|bws
operator|.
name|get
argument_list|(
name|table
argument_list|)
operator|)
operator|.
name|addMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MutationsRejectedException
name|var4
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|var4
argument_list|)
throw|;
block|}
comment|// if this table has an associated index table then attempt to build
comment|// index mutations
if|if
condition|(
name|indexTableName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|idxMuts
init|=
name|getIndexMutations
argument_list|(
name|mutation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idxMuts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|BatchWriter
name|writer
init|=
name|this
operator|.
name|bws
operator|.
name|get
argument_list|(
name|indexTableName
argument_list|)
decl_stmt|;
for|for
control|(
name|Mutation
name|m
range|:
name|idxMuts
control|)
block|{
name|writer
operator|.
name|addMutation
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MutationsRejectedException
name|var4
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|var4
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|addTable
parameter_list|(
name|Text
name|tableName
parameter_list|)
throws|throws
name|AccumuloException
throws|,
name|AccumuloSecurityException
block|{
if|if
condition|(
name|this
operator|.
name|simulate
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Simulating adding table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|BatchWriter
name|bw
init|=
literal|null
decl_stmt|;
name|String
name|table
init|=
name|tableName
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|createTables
operator|&&
operator|!
name|this
operator|.
name|conn
operator|.
name|tableOperations
argument_list|()
operator|.
name|exists
argument_list|(
name|table
argument_list|)
condition|)
block|{
try|try
block|{
name|this
operator|.
name|conn
operator|.
name|tableOperations
argument_list|()
operator|.
name|create
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccumuloSecurityException
name|var8
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Accumulo security violation creating "
operator|+
name|table
argument_list|,
name|var8
argument_list|)
expr_stmt|;
throw|throw
name|var8
throw|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|var9
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Table Exists "
operator|+
name|table
argument_list|,
name|var9
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|bw
operator|=
name|this
operator|.
name|mtbw
operator|.
name|getBatchWriter
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|var5
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Accumulo table "
operator|+
name|table
operator|+
literal|" doesn't exist and cannot be created."
argument_list|,
name|var5
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AccumuloException
argument_list|(
name|var5
argument_list|)
throw|;
block|}
if|if
condition|(
name|bw
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|bws
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|bw
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|printMutation
parameter_list|(
name|Text
name|table
parameter_list|,
name|Mutation
name|m
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Table %s row key: %s"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|table
block|,
name|this
operator|.
name|hexDump
argument_list|(
name|m
operator|.
name|getRow
argument_list|()
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
name|itr
init|=
name|m
operator|.
name|getUpdates
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ColumnUpdate
name|cu
init|=
operator|(
name|ColumnUpdate
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Table %s column: %s:%s"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|table
block|,
name|this
operator|.
name|hexDump
argument_list|(
name|cu
operator|.
name|getColumnFamily
argument_list|()
argument_list|)
block|,
name|this
operator|.
name|hexDump
argument_list|(
name|cu
operator|.
name|getColumnQualifier
argument_list|()
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Table %s security: %s"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|table
block|,
operator|(
operator|new
name|ColumnVisibility
argument_list|(
name|cu
operator|.
name|getColumnVisibility
argument_list|()
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Table %s value: %s"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|table
block|,
name|this
operator|.
name|hexDump
argument_list|(
name|cu
operator|.
name|getValue
argument_list|()
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|m
operator|.
name|getUpdates
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|Mutation
argument_list|>
name|getIndexMutations
parameter_list|(
name|Mutation
name|baseMut
parameter_list|)
block|{
name|List
name|indexMuts
init|=
operator|new
name|ArrayList
argument_list|<
name|Mutation
argument_list|>
argument_list|()
decl_stmt|;
comment|// nothing to do if there is not a index definition for this table
if|if
condition|(
literal|null
operator|!=
name|indexDef
condition|)
block|{
name|byte
index|[]
name|rowId
init|=
name|baseMut
operator|.
name|getRow
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnUpdate
name|cu
range|:
name|baseMut
operator|.
name|getUpdates
argument_list|()
control|)
block|{
name|String
name|cf
init|=
operator|new
name|String
argument_list|(
name|cu
operator|.
name|getColumnFamily
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|cq
init|=
operator|new
name|String
argument_list|(
name|cu
operator|.
name|getColumnQualifier
argument_list|()
argument_list|)
decl_stmt|;
comment|// if this columnFamily/columnQualifier pair is defined in the index build a new mutation
comment|// so key=value, cf=columnFamily_columnQualifer, cq=rowKey, cv=columnVisibility value=[]
name|String
name|colType
init|=
name|indexDef
operator|.
name|getColType
argument_list|(
name|cf
argument_list|,
name|cq
argument_list|)
decl_stmt|;
if|if
condition|(
name|colType
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Building index for column %s:%s"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|cf
block|,
name|cq
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Mutation
name|m
init|=
operator|new
name|Mutation
argument_list|(
name|AccumuloIndexLexicoder
operator|.
name|encodeValue
argument_list|(
name|cu
operator|.
name|getValue
argument_list|()
argument_list|,
name|colType
argument_list|,
name|isStringEncoded
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|colFam
init|=
name|cf
operator|+
literal|"_"
operator|+
name|cq
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|colFam
operator|.
name|getBytes
argument_list|()
argument_list|,
name|rowId
argument_list|,
operator|new
name|ColumnVisibility
argument_list|(
name|cu
operator|.
name|getColumnVisibility
argument_list|()
argument_list|)
argument_list|,
name|EMPTY_BYTES
argument_list|)
expr_stmt|;
name|indexMuts
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|indexMuts
return|;
block|}
specifier|private
name|String
name|hexDump
parameter_list|(
name|byte
index|[]
name|ba
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|arr
init|=
name|ba
decl_stmt|;
name|int
name|len
init|=
name|ba
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|byte
name|b
init|=
name|arr
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|>
literal|32
operator|&&
name|b
operator|<
literal|126
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"x%02x"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
name|b
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"mutations written: "
operator|+
name|this
operator|.
name|mutCount
operator|+
literal|", values written: "
operator|+
name|this
operator|.
name|valCount
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|simulate
condition|)
block|{
try|try
block|{
name|this
operator|.
name|mtbw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MutationsRejectedException
name|var7
parameter_list|)
block|{
if|if
condition|(
name|var7
operator|.
name|getAuthorizationFailuresMap
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|Map
name|tables
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Map
operator|.
name|Entry
name|ke
decl_stmt|;
name|Object
name|secCodes
decl_stmt|;
for|for
control|(
name|Iterator
name|itr
init|=
name|var7
operator|.
name|getAuthorizationFailuresMap
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
operator|(
operator|(
name|Set
operator|)
name|secCodes
operator|)
operator|.
name|addAll
argument_list|(
operator|(
name|Collection
operator|)
name|ke
operator|.
name|getValue
argument_list|()
argument_list|)
control|)
block|{
name|ke
operator|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|itr
operator|.
name|next
argument_list|()
expr_stmt|;
name|secCodes
operator|=
operator|(
name|Set
operator|)
name|tables
operator|.
name|get
argument_list|(
operator|(
operator|(
name|KeyExtent
operator|)
name|ke
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getTableId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|secCodes
operator|==
literal|null
condition|)
block|{
name|secCodes
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
operator|(
operator|(
name|KeyExtent
operator|)
name|ke
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getTableId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|secCodes
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Not authorized to write to tables : "
operator|+
name|tables
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var7
operator|.
name|getConstraintViolationSummaries
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Constraint violations : "
operator|+
name|var7
operator|.
name|getConstraintViolationSummaries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|var7
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

