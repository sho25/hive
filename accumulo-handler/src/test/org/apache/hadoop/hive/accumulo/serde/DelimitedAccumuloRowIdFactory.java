begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Example AccumuloRowIdFactory which accepts a delimiter that is used to separate the components of  * some struct to place in the rowId.  */
end_comment

begin_class
specifier|public
class|class
name|DelimitedAccumuloRowIdFactory
extends|extends
name|DefaultAccumuloRowIdFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DelimitedAccumuloRowIdFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACCUMULO_COMPOSITE_DELIMITER
init|=
literal|"accumulo.composite.delimiter"
decl_stmt|;
specifier|private
name|byte
name|separator
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|AccumuloSerDeParameters
name|accumuloSerDeParams
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|SerDeException
block|{
name|super
operator|.
name|init
argument_list|(
name|accumuloSerDeParams
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|String
name|delimiter
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|ACCUMULO_COMPOSITE_DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|delimiter
operator|||
name|delimiter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Did not find expected delimiter in configuration: "
operator|+
name|ACCUMULO_COMPOSITE_DELIMITER
argument_list|)
throw|;
block|}
if|if
condition|(
name|delimiter
operator|.
name|length
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Configured delimiter is longer than one character, only using first character"
argument_list|)
expr_stmt|;
block|}
name|separator
operator|=
operator|(
name|byte
operator|)
name|delimiter
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Initialized DelimitedAccumuloRowIdFactory with separator of '"
operator|+
name|separator
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|createRowIdObjectInspector
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|SerDeException
block|{
return|return
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|type
argument_list|,
operator|new
name|byte
index|[]
block|{
name|separator
block|}
argument_list|,
literal|0
argument_list|,
name|serdeParams
operator|.
name|getNullSequence
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|isEscaped
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LazyObjectBase
name|createRowId
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|)
throws|throws
name|SerDeException
block|{
name|LazyObjectBase
name|lazyObj
init|=
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|inspector
argument_list|,
name|ColumnEncoding
operator|.
name|BINARY
operator|==
name|rowIdMapping
operator|.
name|getEncoding
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created "
operator|+
name|lazyObj
operator|.
name|getClass
argument_list|()
operator|+
literal|" for rowId with inspector "
operator|+
name|inspector
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|lazyObj
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|serializeRowId
parameter_list|(
name|Object
name|object
parameter_list|,
name|StructField
name|field
parameter_list|,
name|ByteStream
operator|.
name|Output
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|inspector
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"invalid type value "
operator|+
name|inspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
name|StructObjectInspector
name|structOI
init|=
operator|(
name|StructObjectInspector
operator|)
name|inspector
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|elements
init|=
name|structOI
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|structOI
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StructField
name|structField
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|output
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|writeWithLevel
argument_list|(
name|structField
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|o
argument_list|,
name|output
argument_list|,
name|rowIdMapping
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|output
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

