begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test basic operations on AccumuloHiveRow  */
end_comment

begin_class
specifier|public
class|class
name|TestAccumuloHiveRow
block|{
annotation|@
name|Test
specifier|public
name|void
name|testHasFamilyAndQualifier
parameter_list|()
block|{
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
comment|// Add some columns
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|row
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|,
literal|"cq"
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check that we don't find unexpected columns
name|assertFalse
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf0"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"cq1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"cq0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that we do find all expected columns
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"cq"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetValueFromColumn
parameter_list|()
block|{
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
comment|// Should return null when there is no column
name|assertNull
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|row
operator|.
name|add
argument_list|(
literal|"cf"
argument_list|,
literal|"cq"
operator|+
name|i
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"cq0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertArrayEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"cq"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWritableEmptyRow
parameter_list|()
throws|throws
name|IOException
block|{
name|AccumuloHiveRow
name|emptyRow
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|emptyRow
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|AccumuloHiveRow
name|emptyCopy
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|emptyCopy
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|emptyRow
argument_list|,
name|emptyCopy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWritableWithColumns
parameter_list|()
throws|throws
name|IOException
block|{
name|AccumuloHiveRow
name|rowWithColumns
init|=
operator|new
name|AccumuloHiveRow
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|rowWithColumns
operator|.
name|add
argument_list|(
literal|"cf"
argument_list|,
literal|"cq1"
argument_list|,
literal|"1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|rowWithColumns
operator|.
name|add
argument_list|(
literal|"cf"
argument_list|,
literal|"cq2"
argument_list|,
literal|"2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|rowWithColumns
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|AccumuloHiveRow
name|copy
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|copy
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowWithColumns
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

