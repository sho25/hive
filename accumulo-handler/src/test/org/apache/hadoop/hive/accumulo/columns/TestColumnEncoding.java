begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloHiveConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|TestColumnEncoding
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidCodeThrowsException
parameter_list|()
block|{
name|ColumnEncoding
operator|.
name|fromCode
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringEncoding
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
name|ColumnEncoding
operator|.
name|fromCode
argument_list|(
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryEncoding
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnEncoding
operator|.
name|BINARY
argument_list|,
name|ColumnEncoding
operator|.
name|fromCode
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingColumnEncoding
parameter_list|()
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ColumnEncoding
operator|.
name|hasColumnEncoding
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnEncodingSpecified
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ColumnEncoding
operator|.
name|hasColumnEncoding
argument_list|(
literal|"foo:bar#s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEscapedPoundIsNoEncodingSpecified
parameter_list|()
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ColumnEncoding
operator|.
name|hasColumnEncoding
argument_list|(
literal|"foo:b\\#ar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEscapedPoundWithRealPound
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ColumnEncoding
operator|.
name|hasColumnEncoding
argument_list|(
literal|"foo:b\\#ar#b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParse
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
name|ColumnEncoding
operator|.
name|getFromMapping
argument_list|(
literal|"foo:bar#s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseWithEscapedPound
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnEncoding
operator|.
name|BINARY
argument_list|,
name|ColumnEncoding
operator|.
name|getFromMapping
argument_list|(
literal|"fo\\#o:bar#b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMissingEncodingOnParse
parameter_list|()
block|{
name|ColumnEncoding
operator|.
name|getFromMapping
argument_list|(
literal|"foo:bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStripCode
parameter_list|()
block|{
name|String
name|mapping
init|=
literal|"foo:bar"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|ColumnEncoding
operator|.
name|stripCode
argument_list|(
name|mapping
operator|+
name|AccumuloHiveConstants
operator|.
name|POUND
operator|+
name|ColumnEncoding
operator|.
name|BINARY
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testStripNonExistentCodeFails
parameter_list|()
block|{
name|ColumnEncoding
operator|.
name|stripCode
argument_list|(
literal|"foo:bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStripCodeWithEscapedPound
parameter_list|()
block|{
name|String
name|mapping
init|=
literal|"foo:ba\\#r"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mapping
argument_list|,
name|ColumnEncoding
operator|.
name|stripCode
argument_list|(
name|mapping
operator|+
name|AccumuloHiveConstants
operator|.
name|POUND
operator|+
name|ColumnEncoding
operator|.
name|BINARY
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapEncoding
parameter_list|()
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ColumnEncoding
operator|.
name|isMapEncoding
argument_list|(
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ColumnEncoding
operator|.
name|isMapEncoding
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ColumnEncoding
operator|.
name|isMapEncoding
argument_list|(
literal|"binary"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ColumnEncoding
operator|.
name|isMapEncoding
argument_list|(
literal|"s:s"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ColumnEncoding
operator|.
name|isMapEncoding
argument_list|(
literal|"s:string"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ColumnEncoding
operator|.
name|isMapEncoding
argument_list|(
literal|"string:s"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ColumnEncoding
operator|.
name|isMapEncoding
argument_list|(
literal|"string:string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapEncodingParsing
parameter_list|()
block|{
name|Entry
argument_list|<
name|ColumnEncoding
argument_list|,
name|ColumnEncoding
argument_list|>
name|stringString
init|=
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|)
decl_stmt|,
name|stringBinary
init|=
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
name|ColumnEncoding
operator|.
name|BINARY
argument_list|)
decl_stmt|,
name|binaryBinary
init|=
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|ColumnEncoding
operator|.
name|BINARY
argument_list|,
name|ColumnEncoding
operator|.
name|BINARY
argument_list|)
decl_stmt|,
name|binaryString
init|=
name|Maps
operator|.
name|immutableEntry
argument_list|(
name|ColumnEncoding
operator|.
name|BINARY
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringString
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"s:s"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringString
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"s:string"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringString
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"string:s"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringString
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"string:string"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringBinary
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"s:b"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringBinary
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"string:b"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringBinary
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"s:binary"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringBinary
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"string:binary"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binaryString
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"b:s"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binaryString
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"b:string"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binaryString
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"binary:s"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binaryString
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"binary:string"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binaryBinary
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"b:b"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binaryBinary
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"binary:b"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binaryBinary
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"b:binary"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binaryBinary
argument_list|,
name|ColumnEncoding
operator|.
name|getMapEncoding
argument_list|(
literal|"binary:binary"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

