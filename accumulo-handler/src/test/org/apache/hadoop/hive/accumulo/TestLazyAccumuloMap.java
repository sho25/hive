begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|HiveAccumuloMapColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazyMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|TestLazyAccumuloMap
block|{
specifier|protected
name|byte
index|[]
name|toBytes
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStringMapWithProjection
parameter_list|()
throws|throws
name|SerDeException
block|{
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|,
literal|"bar"
argument_list|,
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|"cf2"
argument_list|,
literal|"foo1"
argument_list|,
literal|"bar1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|"cf3"
argument_list|,
literal|"bar1"
argument_list|,
literal|"foo1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|HiveAccumuloMapColumnMapping
name|mapping
init|=
operator|new
name|HiveAccumuloMapColumnMapping
argument_list|(
literal|"cf1"
argument_list|,
literal|null
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
literal|"column"
argument_list|,
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Map of Integer to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<string,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyAccumuloMap
name|map
init|=
operator|new
name|LazyAccumuloMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
decl_stmt|;
name|map
operator|.
name|init
argument_list|(
name|row
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|map
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|map
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntMap
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|"2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"2"
argument_list|)
argument_list|,
literal|"4"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"3"
argument_list|)
argument_list|,
literal|"6"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|HiveAccumuloMapColumnMapping
name|mapping
init|=
operator|new
name|HiveAccumuloMapColumnMapping
argument_list|(
literal|"cf1"
argument_list|,
literal|null
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
literal|"column"
argument_list|,
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Map of Integer to Integer
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<int,int>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyAccumuloMap
name|map
init|=
operator|new
name|LazyAccumuloMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
decl_stmt|;
name|map
operator|.
name|init
argument_list|(
name|row
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|map
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyInteger
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|map
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyInteger
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|map
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|6
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyInteger
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryIntMap
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|toBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|toBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|toBytes
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|toBytes
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|toBytes
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|HiveAccumuloMapColumnMapping
name|mapping
init|=
operator|new
name|HiveAccumuloMapColumnMapping
argument_list|(
literal|"cf1"
argument_list|,
literal|null
argument_list|,
name|ColumnEncoding
operator|.
name|BINARY
argument_list|,
name|ColumnEncoding
operator|.
name|BINARY
argument_list|,
literal|"column"
argument_list|,
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Map of Integer to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<int,int>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyAccumuloMap
name|map
init|=
operator|new
name|LazyAccumuloMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
decl_stmt|;
name|map
operator|.
name|init
argument_list|(
name|row
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|map
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyInteger
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|map
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyInteger
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|map
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|6
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyInteger
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixedSerializationMap
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|"2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|toBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|"4"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cf1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|toBytes
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
literal|"6"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|HiveAccumuloMapColumnMapping
name|mapping
init|=
operator|new
name|HiveAccumuloMapColumnMapping
argument_list|(
literal|"cf1"
argument_list|,
literal|null
argument_list|,
name|ColumnEncoding
operator|.
name|BINARY
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
literal|"column"
argument_list|,
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Map of Integer to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<int,int>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyAccumuloMap
name|map
init|=
operator|new
name|LazyAccumuloMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
decl_stmt|;
name|map
operator|.
name|init
argument_list|(
name|row
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|map
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyInteger
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|map
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyInteger
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|map
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|6
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyInteger
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

