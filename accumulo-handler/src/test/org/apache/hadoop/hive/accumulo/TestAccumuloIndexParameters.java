begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloIndexParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloSerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|TestAccumuloIndexParameters
block|{
specifier|public
specifier|static
class|class
name|MockAccumuloIndexScanner
implements|implements
name|AccumuloIndexScanner
block|{
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|isIndexed
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Range
argument_list|>
name|getIndexRowRanges
parameter_list|(
name|String
name|column
parameter_list|,
name|Range
name|indexRange
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultScanner
parameter_list|()
block|{
try|try
block|{
name|AccumuloIndexScanner
name|scanner
init|=
operator|new
name|AccumuloIndexParameters
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|createScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|instanceof
name|AccumuloDefaultIndexScanner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccumuloIndexScannerException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception thrown"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserHandler
parameter_list|()
throws|throws
name|AccumuloIndexScannerException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloIndexParameters
operator|.
name|INDEX_SCANNER
argument_list|,
name|MockAccumuloIndexScanner
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AccumuloIndexScanner
name|scanner
init|=
operator|new
name|AccumuloIndexParameters
argument_list|(
name|conf
argument_list|)
operator|.
name|createScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|instanceof
name|MockAccumuloIndexScanner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadHandler
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloIndexParameters
operator|.
name|INDEX_SCANNER
argument_list|,
literal|"a.class.does.not.exist.IndexHandler"
argument_list|)
expr_stmt|;
try|try
block|{
name|AccumuloIndexScanner
name|scanner
init|=
operator|new
name|AccumuloIndexParameters
argument_list|(
name|conf
argument_list|)
operator|.
name|createScanner
argument_list|()
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|AccumuloIndexScannerException
name|e
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Failed to throw exception for class not found"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getIndexColumns
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloIndexParameters
operator|.
name|INDEXED_COLUMNS
argument_list|,
literal|"a,b,c"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|cols
init|=
operator|new
name|AccumuloIndexParameters
argument_list|(
name|conf
argument_list|)
operator|.
name|getIndexColumns
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cols
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing column a"
argument_list|,
name|cols
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing column b"
argument_list|,
name|cols
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing column c"
argument_list|,
name|cols
operator|.
name|contains
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getMaxIndexRows
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|AccumuloIndexParameters
operator|.
name|MAX_INDEX_ROWS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|int
name|maxRows
init|=
operator|new
name|AccumuloIndexParameters
argument_list|(
name|conf
argument_list|)
operator|.
name|getMaxIndexRows
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|maxRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getAuths
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|AUTHORIZATIONS_KEY
argument_list|,
literal|"public,open"
argument_list|)
expr_stmt|;
name|Authorizations
name|auths
init|=
operator|new
name|AccumuloIndexParameters
argument_list|(
name|conf
argument_list|)
operator|.
name|getTableAuths
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|auths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing auth public"
argument_list|,
name|auths
operator|.
name|contains
argument_list|(
literal|"public"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Missing auth open"
argument_list|,
name|auths
operator|.
name|contains
argument_list|(
literal|"open"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

