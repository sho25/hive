begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|AccumuloSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|TestAccumuloConnectionParameters
block|{
annotation|@
name|Test
specifier|public
name|void
name|testInstantiatesWithNullConfiguration
parameter_list|()
block|{
comment|// TableDesc#getDeserializer() passes a null Configuration into the SerDe.
comment|// We shouldn't fail immediately in this case
name|AccumuloConnectionParameters
name|cnxnParams
init|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// We should fail if we try to get info out of the params
try|try
block|{
name|cnxnParams
operator|.
name|getAccumuloInstanceName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should have gotten an NPE"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMissingInstanceName
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|ZOOKEEPERS
argument_list|,
literal|"localhost:2181"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|USER_NAME
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|USER_PASS
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|AccumuloConnectionParameters
name|cnxnParams
init|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|cnxnParams
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMissingZooKeepers
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|INSTANCE_NAME
argument_list|,
literal|"accumulo"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|USER_NAME
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|USER_PASS
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|AccumuloConnectionParameters
name|cnxnParams
init|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|cnxnParams
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMissingUserName
parameter_list|()
throws|throws
name|AccumuloException
throws|,
name|AccumuloSecurityException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|INSTANCE_NAME
argument_list|,
literal|"accumulo"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|ZOOKEEPERS
argument_list|,
literal|"localhost:2181"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|USER_PASS
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|Instance
name|instance
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Instance
operator|.
name|class
argument_list|)
decl_stmt|;
name|AccumuloConnectionParameters
name|cnxnParams
init|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Provide an instance of the code doesn't try to make a real Instance
comment|// We just want to test that we fail before trying to make a connector
comment|// with null username
name|cnxnParams
operator|.
name|getConnector
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMissingPassword
parameter_list|()
throws|throws
name|AccumuloException
throws|,
name|AccumuloSecurityException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|INSTANCE_NAME
argument_list|,
literal|"accumulo"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|ZOOKEEPERS
argument_list|,
literal|"localhost:2181"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloConnectionParameters
operator|.
name|USER_NAME
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|Instance
name|instance
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Instance
operator|.
name|class
argument_list|)
decl_stmt|;
name|AccumuloConnectionParameters
name|cnxnParams
init|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Provide an instance of the code doesn't try to make a real Instance
comment|// We just want to test that we fail before trying to make a connector
comment|// with null password
name|cnxnParams
operator|.
name|getConnector
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

