begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloHiveConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|TestAccumuloDefaultIndexScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|HiveAccumuloRowIdColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloSerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultGraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|DefaultRuleDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|GraphWalker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|NodeProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lib
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|UDFToString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|TestAccumuloRangeGenerator
block|{
specifier|private
name|AccumuloPredicateHandler
name|handler
decl_stmt|;
specifier|private
name|HiveAccumuloRowIdColumnMapping
name|rowIdMapping
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|handler
operator|=
name|AccumuloPredicateHandler
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|rowIdMapping
operator|=
operator|new
name|HiveAccumuloRowIdColumnMapping
argument_list|(
name|AccumuloHiveConstants
operator|.
name|ROWID
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
literal|"row"
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRangeConjunction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// rowId>= 'f'
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// rowId<= 'm'
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"m"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
comment|// And UDF
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
comment|// Should generate [f,m]
name|List
argument_list|<
name|Range
argument_list|>
name|expectedRanges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Range
argument_list|(
operator|new
name|Key
argument_list|(
literal|"f"
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|new
name|Key
argument_list|(
literal|"m\0"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|AccumuloRangeGenerator
name|rangeGenerator
init|=
operator|new
name|AccumuloRangeGenerator
argument_list|(
name|conf
argument_list|,
name|handler
argument_list|,
name|rowIdMapping
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|rangeGenerator
argument_list|,
name|Collections
operator|.
expr|<
name|Rule
argument_list|,
name|NodeProcessor
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|both
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|Object
name|result
init|=
name|nodeOutput
operator|.
name|get
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Result from graph walk was not a List"
argument_list|,
name|result
operator|instanceof
name|List
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Range
argument_list|>
name|actualRanges
init|=
operator|(
name|List
argument_list|<
name|Range
argument_list|>
operator|)
name|result
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRanges
argument_list|,
name|actualRanges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRangeDisjunction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// rowId>= 'f'
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// rowId<= 'm'
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"m"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
comment|// Or UDF
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPOr
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
comment|// Should generate (-inf,+inf)
name|List
argument_list|<
name|Range
argument_list|>
name|expectedRanges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Range
argument_list|()
argument_list|)
decl_stmt|;
name|AccumuloRangeGenerator
name|rangeGenerator
init|=
operator|new
name|AccumuloRangeGenerator
argument_list|(
name|conf
argument_list|,
name|handler
argument_list|,
name|rowIdMapping
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|rangeGenerator
argument_list|,
name|Collections
operator|.
expr|<
name|Rule
argument_list|,
name|NodeProcessor
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|both
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|Object
name|result
init|=
name|nodeOutput
operator|.
name|get
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Result from graph walk was not a List"
argument_list|,
name|result
operator|instanceof
name|List
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Range
argument_list|>
name|actualRanges
init|=
operator|(
name|List
argument_list|<
name|Range
argument_list|>
operator|)
name|result
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRanges
argument_list|,
name|actualRanges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRangeConjunctionWithDisjunction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// rowId>= 'h'
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"h"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// rowId<= 'd'
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
comment|// rowId>= 'q'
name|ExprNodeDesc
name|column3
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant3
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"q"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children3
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|column3
argument_list|)
expr_stmt|;
name|children3
operator|.
name|add
argument_list|(
name|constant3
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node3
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children3
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node3
argument_list|)
expr_stmt|;
comment|// Or UDF, (rowId<= 'd' or rowId>= 'q')
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|orFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|orFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|orFilters
operator|.
name|add
argument_list|(
name|node3
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|orNode
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPOr
argument_list|()
argument_list|,
name|orFilters
argument_list|)
decl_stmt|;
comment|// And UDF, (rowId>= 'h' and (rowId<= 'd' or rowId>= 'q'))
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|andFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|andFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|andFilters
operator|.
name|add
argument_list|(
name|orNode
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|andFilters
argument_list|)
decl_stmt|;
comment|// Should generate ['q', +inf)
name|List
argument_list|<
name|Range
argument_list|>
name|expectedRanges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Range
argument_list|(
operator|new
name|Key
argument_list|(
literal|"q"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|AccumuloRangeGenerator
name|rangeGenerator
init|=
operator|new
name|AccumuloRangeGenerator
argument_list|(
name|conf
argument_list|,
name|handler
argument_list|,
name|rowIdMapping
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|rangeGenerator
argument_list|,
name|Collections
operator|.
expr|<
name|Rule
argument_list|,
name|NodeProcessor
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|both
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|Object
name|result
init|=
name|nodeOutput
operator|.
name|get
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Result from graph walk was not a List"
argument_list|,
name|result
operator|instanceof
name|List
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Range
argument_list|>
name|actualRanges
init|=
operator|(
name|List
argument_list|<
name|Range
argument_list|>
operator|)
name|result
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRanges
argument_list|,
name|actualRanges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartialRangeConjunction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// rowId>= 'f'
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// anythingElse<= 'foo'
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"anythingElse"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
comment|// And UDF
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
comment|// Should generate [f,+inf)
name|List
argument_list|<
name|Range
argument_list|>
name|expectedRanges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Range
argument_list|(
operator|new
name|Key
argument_list|(
literal|"f"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|AccumuloRangeGenerator
name|rangeGenerator
init|=
operator|new
name|AccumuloRangeGenerator
argument_list|(
name|conf
argument_list|,
name|handler
argument_list|,
name|rowIdMapping
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|rangeGenerator
argument_list|,
name|Collections
operator|.
expr|<
name|Rule
argument_list|,
name|NodeProcessor
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|both
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|Object
name|result
init|=
name|nodeOutput
operator|.
name|get
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Result from graph walk was not a List"
argument_list|,
name|result
operator|instanceof
name|List
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Range
argument_list|>
name|actualRanges
init|=
operator|(
name|List
argument_list|<
name|Range
argument_list|>
operator|)
name|result
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRanges
argument_list|,
name|actualRanges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateRangeConjunction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// rowId>= '2014-01-01'
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|,
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2014-01-01"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// rowId<= '2014-07-01'
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|dateTypeInfo
argument_list|,
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2014-07-01"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPLessThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
comment|// And UDF
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
comment|// Should generate [2014-01-01, 2014-07-01)
name|List
argument_list|<
name|Range
argument_list|>
name|expectedRanges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Range
argument_list|(
operator|new
name|Key
argument_list|(
literal|"2014-01-01"
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|new
name|Key
argument_list|(
literal|"2014-07-01"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|AccumuloRangeGenerator
name|rangeGenerator
init|=
operator|new
name|AccumuloRangeGenerator
argument_list|(
name|conf
argument_list|,
name|handler
argument_list|,
name|rowIdMapping
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|rangeGenerator
argument_list|,
name|Collections
operator|.
expr|<
name|Rule
argument_list|,
name|NodeProcessor
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|both
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|Object
name|result
init|=
name|nodeOutput
operator|.
name|get
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Result from graph walk was not a List"
argument_list|,
name|result
operator|instanceof
name|List
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Range
argument_list|>
name|actualRanges
init|=
operator|(
name|List
argument_list|<
name|Range
argument_list|>
operator|)
name|result
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRanges
argument_list|,
name|actualRanges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCastExpression
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 40 and 50
name|ExprNodeDesc
name|fourty
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|40
argument_list|)
decl_stmt|,
name|fifty
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|50
argument_list|)
decl_stmt|;
comment|// +
name|GenericUDFOPPlus
name|plus
init|=
operator|new
name|GenericUDFOPPlus
argument_list|()
decl_stmt|;
comment|// 40 + 50
name|ExprNodeGenericFuncDesc
name|addition
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|plus
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|fourty
argument_list|,
name|fifty
argument_list|)
argument_list|)
decl_stmt|;
comment|// cast(.... as string)
name|UDFToString
name|stringCast
init|=
operator|new
name|UDFToString
argument_list|()
decl_stmt|;
name|GenericUDFBridge
name|stringCastBridge
init|=
operator|new
name|GenericUDFBridge
argument_list|(
literal|"cast"
argument_list|,
literal|false
argument_list|,
name|stringCast
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// cast (40 + 50 as string)
name|ExprNodeGenericFuncDesc
name|cast
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|stringCastBridge
argument_list|,
literal|"cast"
argument_list|,
name|Collections
operator|.
expr|<
name|ExprNodeDesc
operator|>
name|singletonList
argument_list|(
name|addition
argument_list|)
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|key
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"key"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|key
argument_list|,
name|cast
argument_list|)
argument_list|)
decl_stmt|;
name|AccumuloRangeGenerator
name|rangeGenerator
init|=
operator|new
name|AccumuloRangeGenerator
argument_list|(
name|conf
argument_list|,
name|handler
argument_list|,
name|rowIdMapping
argument_list|,
literal|"key"
argument_list|)
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|rangeGenerator
argument_list|,
name|Collections
operator|.
expr|<
name|Rule
argument_list|,
name|NodeProcessor
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|// Don't fail -- would be better to actually compute a range of [90,+inf)
name|Object
name|result
init|=
name|nodeOutput
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRangeOverNonRowIdField
parameter_list|()
throws|throws
name|Exception
block|{
comment|// foo>= 'f'
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// foo<= 'm'
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"foo"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"m"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
comment|// And UDF
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
name|AccumuloRangeGenerator
name|rangeGenerator
init|=
operator|new
name|AccumuloRangeGenerator
argument_list|(
name|conf
argument_list|,
name|handler
argument_list|,
name|rowIdMapping
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|rangeGenerator
argument_list|,
name|Collections
operator|.
expr|<
name|Rule
argument_list|,
name|NodeProcessor
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|both
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|// Filters are not over the rowid, therefore scan everything
name|Object
name|result
init|=
name|nodeOutput
operator|.
name|get
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRangeOverStringIndexedField
parameter_list|()
throws|throws
name|Exception
block|{
comment|// age>= '10'
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"age"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"10"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// age<= '50'
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"age"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"50"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
comment|// And UDF
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
name|AccumuloRangeGenerator
name|rangeGenerator
init|=
operator|new
name|AccumuloRangeGenerator
argument_list|(
name|conf
argument_list|,
name|handler
argument_list|,
name|rowIdMapping
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|rangeGenerator
operator|.
name|setIndexScanner
argument_list|(
name|TestAccumuloDefaultIndexScanner
operator|.
name|buildMockHandler
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|rangeGenerator
argument_list|,
name|Collections
operator|.
expr|<
name|Rule
argument_list|,
name|NodeProcessor
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|both
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|// Filters are using an index which should match 3 rows
name|Object
name|result
init|=
name|nodeOutput
operator|.
name|get
argument_list|(
name|both
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|List
condition|)
block|{
name|List
name|results
init|=
operator|(
name|List
operator|)
name|result
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"does not contain row1"
argument_list|,
name|results
operator|.
name|contains
argument_list|(
operator|new
name|Range
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"does not contain row2"
argument_list|,
name|results
operator|.
name|contains
argument_list|(
operator|new
name|Range
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"does not contain row3"
argument_list|,
name|results
operator|.
name|contains
argument_list|(
operator|new
name|Range
argument_list|(
literal|"row3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Results not a list"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRangeOverIntegerIndexedField
parameter_list|()
throws|throws
name|Exception
block|{
comment|// cars>= 2
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|"cars"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|//  cars<= 9
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|"cars"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
comment|// And UDF
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
name|AccumuloRangeGenerator
name|rangeGenerator
init|=
operator|new
name|AccumuloRangeGenerator
argument_list|(
name|conf
argument_list|,
name|handler
argument_list|,
name|rowIdMapping
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|rangeGenerator
operator|.
name|setIndexScanner
argument_list|(
name|TestAccumuloDefaultIndexScanner
operator|.
name|buildMockHandler
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|rangeGenerator
argument_list|,
name|Collections
operator|.
expr|<
name|Rule
argument_list|,
name|NodeProcessor
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|both
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|// Filters are using an index which should match 3 rows
name|Object
name|result
init|=
name|nodeOutput
operator|.
name|get
argument_list|(
name|both
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|List
condition|)
block|{
name|List
name|results
init|=
operator|(
name|List
operator|)
name|result
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"does not contain row1"
argument_list|,
name|results
operator|.
name|contains
argument_list|(
operator|new
name|Range
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"does not contain row2"
argument_list|,
name|results
operator|.
name|contains
argument_list|(
operator|new
name|Range
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"does not contain row3"
argument_list|,
name|results
operator|.
name|contains
argument_list|(
operator|new
name|Range
argument_list|(
literal|"row3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Results not a list"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRangeOverBooleanIndexedField
parameter_list|()
throws|throws
name|Exception
block|{
comment|// mgr == true
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
literal|"mgr"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqual
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|AccumuloRangeGenerator
name|rangeGenerator
init|=
operator|new
name|AccumuloRangeGenerator
argument_list|(
name|conf
argument_list|,
name|handler
argument_list|,
name|rowIdMapping
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|rangeGenerator
operator|.
name|setIndexScanner
argument_list|(
name|TestAccumuloDefaultIndexScanner
operator|.
name|buildMockHandler
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
operator|new
name|DefaultRuleDispatcher
argument_list|(
name|rangeGenerator
argument_list|,
name|Collections
operator|.
expr|<
name|Rule
argument_list|,
name|NodeProcessor
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GraphWalker
name|ogw
init|=
operator|new
name|DefaultGraphWalker
argument_list|(
name|disp
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Node
argument_list|>
name|topNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|topNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
name|nodeOutput
init|=
operator|new
name|HashMap
argument_list|<
name|Node
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ogw
operator|.
name|startWalking
argument_list|(
name|topNodes
argument_list|,
name|nodeOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SemanticException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|// Filters are using an index which should match 2 rows
name|Object
name|result
init|=
name|nodeOutput
operator|.
name|get
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|List
condition|)
block|{
name|List
name|results
init|=
operator|(
name|List
operator|)
name|result
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"does not contain row1"
argument_list|,
name|results
operator|.
name|contains
argument_list|(
operator|new
name|Range
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"does not contain row3"
argument_list|,
name|results
operator|.
name|contains
argument_list|(
operator|new
name|Range
argument_list|(
literal|"row3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Results not a list"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

