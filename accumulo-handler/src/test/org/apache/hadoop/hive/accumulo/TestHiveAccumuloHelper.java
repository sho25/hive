begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveAccumuloHelper
block|{
specifier|private
name|HiveAccumuloHelper
name|helper
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|helper
operator|=
operator|new
name|HiveAccumuloHelper
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenMerge
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|helper
operator|.
name|mergeTokenIntoJobConf
argument_list|(
name|jobConf
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokens
init|=
name|jobConf
operator|.
name|getCredentials
argument_list|()
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
argument_list|,
name|tokens
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenToConfFromUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
literal|"service"
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|ugi
operator|.
name|getTokens
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HiveAccumuloHelper
operator|.
name|ACCUMULO_SERVICE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|helper
operator|.
name|addTokenFromUserToJobConf
argument_list|(
name|ugi
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|credTokens
init|=
name|jobConf
operator|.
name|getCredentials
argument_list|()
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|credTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|service
argument_list|,
name|credTokens
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

