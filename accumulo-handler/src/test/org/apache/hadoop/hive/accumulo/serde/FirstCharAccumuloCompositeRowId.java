begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazySimpleStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Gets the first character of each string in a struct  */
end_comment

begin_class
specifier|public
class|class
name|FirstCharAccumuloCompositeRowId
extends|extends
name|AccumuloCompositeRowId
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|FirstCharAccumuloCompositeRowId
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Properties
name|tbl
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
name|int
name|start
decl_stmt|,
name|length
decl_stmt|;
specifier|private
name|String
name|bytesAsString
decl_stmt|;
specifier|public
name|FirstCharAccumuloCompositeRowId
parameter_list|(
name|LazySimpleStructObjectInspector
name|oi
parameter_list|,
name|Properties
name|tbl
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|this
operator|.
name|tbl
operator|=
name|tbl
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ByteArrayRef
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
operator|.
name|getData
argument_list|()
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getField
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
if|if
condition|(
name|bytesAsString
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|bytesAsString
operator|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Data: "
operator|+
name|bytesAsString
operator|+
literal|", "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
comment|// The separator for the hive row would be using \x02, so the separator for this struct would be
comment|// \x02 + 1 = \x03
name|char
name|separator
init|=
call|(
name|char
call|)
argument_list|(
operator|(
name|int
operator|)
name|oi
operator|.
name|getSeparator
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Separator: "
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%04x"
argument_list|,
operator|(
name|int
operator|)
name|separator
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the character/byte at the offset in the string equal to the fieldID
name|String
index|[]
name|fieldBytes
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|bytesAsString
argument_list|,
name|separator
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Fields: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|fieldBytes
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|toLazyObject
argument_list|(
name|fieldID
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|fieldBytes
index|[
name|fieldID
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

