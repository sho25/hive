begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|IteratorSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|DoubleCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|Equal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|GreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|GreaterThanOrEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|IntCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|LessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|LessThanOrEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|LongCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|NotEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|PrimitiveComparison
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|StringCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloSerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|TooManyAccumuloColumnsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FunctionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|JavaIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestAccumuloPredicateHandler
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TestAccumuloPredicateHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AccumuloPredicateHandler
name|handler
init|=
name|AccumuloPredicateHandler
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
name|JobConf
name|conf
decl_stmt|;
specifier|private
name|ColumnMapper
name|columnMapper
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|TooManyAccumuloColumnsException
block|{
name|FunctionRegistry
operator|.
name|getFunctionNames
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"field1"
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
init|=
name|Arrays
operator|.
expr|<
name|TypeInfo
operator|>
name|asList
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|columnNames
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,string"
argument_list|)
expr_stmt|;
name|String
name|columnMappingStr
init|=
literal|"cf:f1,:rowID"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
name|columnMappingStr
argument_list|)
expr_stmt|;
name|columnMapper
operator|=
operator|new
name|ColumnMapper
argument_list|(
name|columnMappingStr
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
operator|.
name|getName
argument_list|()
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRowIDSearchCondition
parameter_list|()
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"hi"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqual
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|sConditions
init|=
name|handler
operator|.
name|getSearchConditions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sConditions
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|()
specifier|public
name|void
name|testRangeEqual
parameter_list|()
throws|throws
name|SerDeException
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqual
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|handler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ranges
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Range
name|range
init|=
name|ranges
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|isStartKeyInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEndKeyInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|afterEndKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aab"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|beforeStartKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|()
specifier|public
name|void
name|testRangeGreaterThan
parameter_list|()
throws|throws
name|SerDeException
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|handler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ranges
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Range
name|range
init|=
name|ranges
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|isStartKeyInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEndKeyInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|afterEndKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ccccc"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aab"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|beforeStartKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|beforeStartKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeGreaterThanOrEqual
parameter_list|()
throws|throws
name|SerDeException
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|handler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ranges
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Range
name|range
init|=
name|ranges
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|isStartKeyInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEndKeyInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|afterEndKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ccccc"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aab"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|beforeStartKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeLessThan
parameter_list|()
throws|throws
name|SerDeException
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|handler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ranges
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Range
name|range
init|=
name|ranges
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|isStartKeyInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEndKeyInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|contains
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|afterEndKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ccccc"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|afterEndKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aab"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|afterEndKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rangeLessThanOrEqual
parameter_list|()
throws|throws
name|SerDeException
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|handler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ranges
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Range
name|range
init|=
name|ranges
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|isStartKeyInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|isEndKeyInclusive
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|afterEndKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ccccc"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|contains
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|range
operator|.
name|afterEndKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aab"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|range
operator|.
name|afterEndKey
argument_list|(
operator|new
name|Key
argument_list|(
operator|new
name|Text
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisjointRanges
parameter_list|()
throws|throws
name|SerDeException
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"bbb"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|handler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
comment|// Impossible to get ranges for row<= 'aaa' and row>= 'bbb'
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleRanges
parameter_list|()
throws|throws
name|SerDeException
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"bbb"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPLessThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|handler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Range
name|range
init|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Range
argument_list|(
operator|new
name|Key
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|new
name|Key
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPushdownTuple
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|NoSuchPrimitiveComparisonException
throws|,
name|NoSuchCompareOpException
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|"field1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqual
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|sConditions
init|=
name|handler
operator|.
name|getSearchConditions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sConditions
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|IndexSearchCondition
name|sc
init|=
name|sConditions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PushdownTuple
name|tuple
init|=
operator|new
name|PushdownTuple
argument_list|(
name|sConditions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|handler
operator|.
name|getPrimitiveComparison
argument_list|(
name|sc
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
argument_list|,
name|sc
argument_list|)
argument_list|,
name|handler
operator|.
name|getCompareOp
argument_list|(
name|sc
operator|.
name|getComparisonOp
argument_list|()
argument_list|,
name|sc
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedVal
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|expectedVal
argument_list|)
operator|.
name|putInt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|tuple
operator|.
name|getConstVal
argument_list|()
argument_list|,
name|expectedVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tuple
operator|.
name|getcOpt
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|Equal
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tuple
operator|.
name|getpCompare
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|IntCompare
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchPrimitiveComparisonException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testPushdownColumnTypeNotSupported
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|NoSuchPrimitiveComparisonException
throws|,
name|NoSuchCompareOpException
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|,
literal|"field1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|floatTypeInfo
argument_list|,
literal|5.5f
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqual
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|sConditions
init|=
name|handler
operator|.
name|getSearchConditions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sConditions
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|IndexSearchCondition
name|sc
init|=
name|sConditions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|handler
operator|.
name|getPrimitiveComparison
argument_list|(
name|sc
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPushdownComparisonOptNotSupported
parameter_list|()
block|{
try|try
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"field1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPNotNull
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|sConditions
init|=
name|handler
operator|.
name|getSearchConditions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sConditions
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|IndexSearchCondition
name|sc
init|=
name|sConditions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
operator|new
name|PushdownTuple
argument_list|(
name|sc
argument_list|,
name|handler
operator|.
name|getPrimitiveComparison
argument_list|(
name|sc
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
argument_list|,
name|sc
argument_list|)
argument_list|,
name|handler
operator|.
name|getCompareOp
argument_list|(
name|sc
operator|.
name|getComparisonOp
argument_list|()
argument_list|,
name|sc
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail: compare op not registered for index analyzer. Should leave undesirable residual predicate"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unexpected residual predicate: field1 is not null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIteratorIgnoreRowIDFields
parameter_list|()
block|{
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"bbb"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|IteratorSetting
argument_list|>
name|iterators
init|=
name|handler
operator|.
name|getIterators
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|iterators
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIgnoreIteratorPushdown
parameter_list|()
throws|throws
name|TooManyAccumuloColumnsException
block|{
comment|// Override what's placed in the Configuration by setup()
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"field1"
argument_list|,
literal|"field2"
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
init|=
name|Arrays
operator|.
expr|<
name|TypeInfo
operator|>
name|asList
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|columnNames
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,int,string"
argument_list|)
expr_stmt|;
name|String
name|columnMappingStr
init|=
literal|"cf:f1,cf:f2,:rowID"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
name|columnMappingStr
argument_list|)
expr_stmt|;
name|columnMapper
operator|=
operator|new
name|ColumnMapper
argument_list|(
name|columnMappingStr
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
operator|.
name|getName
argument_list|()
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"field1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|"field2"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|ITERATOR_PUSHDOWN_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|IteratorSetting
argument_list|>
name|iterators
init|=
name|handler
operator|.
name|getIterators
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|iterators
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateIteratorSettings
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Override what's placed in the Configuration by setup()
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"field1"
argument_list|,
literal|"field2"
argument_list|,
literal|"rid"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
init|=
name|Arrays
operator|.
expr|<
name|TypeInfo
operator|>
name|asList
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|columnNames
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,int,string"
argument_list|)
expr_stmt|;
name|String
name|columnMappingStr
init|=
literal|"cf:f1,cf:f2,:rowID"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
name|columnMappingStr
argument_list|)
expr_stmt|;
name|columnMapper
operator|=
operator|new
name|ColumnMapper
argument_list|(
name|columnMappingStr
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
operator|.
name|getName
argument_list|()
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"field1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"aaa"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|"field2"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IteratorSetting
argument_list|>
name|iterators
init|=
name|handler
operator|.
name|getIterators
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|iterators
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|IteratorSetting
name|is1
init|=
name|iterators
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|IteratorSetting
name|is2
init|=
name|iterators
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|foundQual
init|=
literal|false
decl_stmt|;
name|boolean
name|foundPCompare
init|=
literal|false
decl_stmt|;
name|boolean
name|foundCOpt
init|=
literal|false
decl_stmt|;
name|boolean
name|foundConst
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|option
range|:
name|is1
operator|.
name|getOptions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|optKey
init|=
name|option
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|optKey
operator|.
name|equals
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|)
condition|)
block|{
name|foundQual
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|option
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"cf:f1"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optKey
operator|.
name|equals
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|)
condition|)
block|{
name|foundConst
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|option
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
literal|"aaa"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optKey
operator|.
name|equals
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|)
condition|)
block|{
name|foundCOpt
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|option
operator|.
name|getValue
argument_list|()
argument_list|,
name|LessThanOrEqual
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optKey
operator|.
name|equals
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|)
condition|)
block|{
name|foundPCompare
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|option
operator|.
name|getValue
argument_list|()
argument_list|,
name|StringCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundConst
operator|&
name|foundCOpt
operator|&
name|foundPCompare
operator|&
name|foundQual
argument_list|)
expr_stmt|;
name|foundQual
operator|=
literal|false
expr_stmt|;
name|foundPCompare
operator|=
literal|false
expr_stmt|;
name|foundCOpt
operator|=
literal|false
expr_stmt|;
name|foundConst
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|option
range|:
name|is2
operator|.
name|getOptions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|optKey
init|=
name|option
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|optKey
operator|.
name|equals
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|)
condition|)
block|{
name|foundQual
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|option
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"cf:f2"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optKey
operator|.
name|equals
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|)
condition|)
block|{
name|foundConst
operator|=
literal|true
expr_stmt|;
name|byte
index|[]
name|intVal
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|intVal
argument_list|)
operator|.
name|putInt
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|option
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|intVal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optKey
operator|.
name|equals
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|)
condition|)
block|{
name|foundCOpt
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|option
operator|.
name|getValue
argument_list|()
argument_list|,
name|GreaterThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optKey
operator|.
name|equals
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|)
condition|)
block|{
name|foundPCompare
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
name|option
operator|.
name|getValue
argument_list|()
argument_list|,
name|IntCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundConst
operator|&
name|foundCOpt
operator|&
name|foundPCompare
operator|&
name|foundQual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicOptLookup
parameter_list|()
throws|throws
name|NoSuchCompareOpException
block|{
name|boolean
name|foundEqual
init|=
literal|false
decl_stmt|;
name|boolean
name|foundNotEqual
init|=
literal|false
decl_stmt|;
name|boolean
name|foundGreaterThanOrEqual
init|=
literal|false
decl_stmt|;
name|boolean
name|foundGreaterThan
init|=
literal|false
decl_stmt|;
name|boolean
name|foundLessThanOrEqual
init|=
literal|false
decl_stmt|;
name|boolean
name|foundLessThan
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|opt
range|:
name|handler
operator|.
name|cOpKeyset
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|CompareOp
argument_list|>
name|compOpt
init|=
name|handler
operator|.
name|getCompareOpClass
argument_list|(
name|opt
argument_list|)
decl_stmt|;
if|if
condition|(
name|compOpt
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|Equal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundEqual
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compOpt
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|NotEqual
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundNotEqual
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compOpt
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|GreaterThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundGreaterThan
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compOpt
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|GreaterThanOrEqual
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundGreaterThanOrEqual
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compOpt
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|LessThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundLessThan
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compOpt
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|LessThanOrEqual
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundLessThanOrEqual
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Did not find Equal comparison op"
argument_list|,
name|foundEqual
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find NotEqual comparison op"
argument_list|,
name|foundNotEqual
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find GreaterThan comparison op"
argument_list|,
name|foundGreaterThan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find GreaterThanOrEqual comparison op"
argument_list|,
name|foundGreaterThanOrEqual
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find LessThan comparison op"
argument_list|,
name|foundLessThan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find LessThanOrEqual comparison op"
argument_list|,
name|foundLessThanOrEqual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchCompareOpException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNoOptFound
parameter_list|()
throws|throws
name|NoSuchCompareOpException
block|{
name|handler
operator|.
name|getCompareOpClass
argument_list|(
literal|"blah"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveComparsionLookup
parameter_list|()
throws|throws
name|NoSuchPrimitiveComparisonException
block|{
name|boolean
name|foundLong
init|=
literal|false
decl_stmt|;
name|boolean
name|foundString
init|=
literal|false
decl_stmt|;
name|boolean
name|foundInt
init|=
literal|false
decl_stmt|;
name|boolean
name|foundDouble
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|handler
operator|.
name|pComparisonKeyset
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|PrimitiveComparison
argument_list|>
name|pCompare
init|=
name|handler
operator|.
name|getPrimitiveComparisonClass
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|pCompare
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|DoubleCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundDouble
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCompare
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|LongCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundLong
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCompare
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|IntCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundInt
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCompare
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|StringCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundString
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Did not find DoubleCompare op"
argument_list|,
name|foundDouble
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find LongCompare op"
argument_list|,
name|foundLong
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find IntCompare op"
argument_list|,
name|foundInt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find StringCompare op"
argument_list|,
name|foundString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowRangeIntersection
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// rowId>= 'f'
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// rowId<= 'm'
name|ExprNodeDesc
name|column2
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"rid"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
literal|"m"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children2
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|column2
argument_list|)
expr_stmt|;
name|children2
operator|.
name|add
argument_list|(
name|constant2
argument_list|)
expr_stmt|;
name|ExprNodeDesc
name|node2
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|bothFilters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|bothFilters
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|both
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|bothFilters
argument_list|)
decl_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|both
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
comment|// Should make ['f', 'm\0')
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|handler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Range
argument_list|(
operator|new
name|Key
argument_list|(
literal|"f"
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|new
name|Key
argument_list|(
literal|"m\0"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|,
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowRangeGeneration
parameter_list|()
throws|throws
name|SerDeException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"key"
argument_list|,
literal|"column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
init|=
name|Arrays
operator|.
expr|<
name|TypeInfo
operator|>
name|asList
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|columnNames
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,string"
argument_list|)
expr_stmt|;
name|String
name|columnMappingStr
init|=
literal|":rowID,cf:f1"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
name|columnMappingStr
argument_list|)
expr_stmt|;
name|columnMapper
operator|=
operator|new
name|ColumnMapper
argument_list|(
name|columnMappingStr
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
operator|.
name|getName
argument_list|()
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
comment|// 100< key
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|"key"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
comment|// Should make (100, +inf)
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|handler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Range
argument_list|(
operator|new
name|Text
argument_list|(
literal|"100"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryRangeGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"key"
argument_list|,
literal|"column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
init|=
name|Arrays
operator|.
expr|<
name|TypeInfo
operator|>
name|asList
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|columnNames
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"int,string"
argument_list|)
expr_stmt|;
name|String
name|columnMappingStr
init|=
literal|":rowID#b,cf:f1"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
name|columnMappingStr
argument_list|)
expr_stmt|;
name|columnMapper
operator|=
operator|new
name|ColumnMapper
argument_list|(
name|columnMappingStr
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
operator|.
name|getName
argument_list|()
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
name|int
name|intValue
init|=
literal|100
decl_stmt|;
comment|// Make binary integer value in the bytearray
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|JavaIntObjectInspector
name|intOI
init|=
operator|(
name|JavaIntObjectInspector
operator|)
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|LazyUtils
operator|.
name|writePrimitive
argument_list|(
name|baos
argument_list|,
name|intValue
argument_list|,
name|intOI
argument_list|)
expr_stmt|;
comment|// 100< key
name|ExprNodeDesc
name|column
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
literal|"key"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|intValue
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constant
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
operator|new
name|GenericUDFOPLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|String
name|filterExpr
init|=
name|Utilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
comment|// Should make (100, +inf)
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|handler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Range
argument_list|(
operator|new
name|Text
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|,
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullRangeGeneratorOutput
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// The AccumuloRangeGenerator produces an Object (due to the limitations of the
comment|// traversal interface) which requires interpretation of that Object into Ranges.
comment|// Changes in the return object from the AccumuloRangeGenerator must also represent
comment|// a change in the AccumuloPredicateHandler.
name|AccumuloPredicateHandler
name|mockHandler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AccumuloPredicateHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|root
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExprNodeDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|hiveRowIdColumnName
init|=
literal|"rid"
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|generateRanges
argument_list|(
name|columnMapper
argument_list|,
name|hiveRowIdColumnName
argument_list|,
name|root
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|getExpression
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// A null result from AccumuloRangeGenerator is all ranges
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Range
argument_list|()
argument_list|)
argument_list|,
name|mockHandler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyListRangeGeneratorOutput
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// The AccumuloRangeGenerator produces an Object (due to the limitations of the
comment|// traversal interface) which requires interpretation of that Object into Ranges.
comment|// Changes in the return object from the AccumuloRangeGenerator must also represent
comment|// a change in the AccumuloPredicateHandler.
name|AccumuloPredicateHandler
name|mockHandler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AccumuloPredicateHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|root
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExprNodeDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|hiveRowIdColumnName
init|=
literal|"rid"
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|generateRanges
argument_list|(
name|columnMapper
argument_list|,
name|hiveRowIdColumnName
argument_list|,
name|root
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|getExpression
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// A null result from AccumuloRangeGenerator is all ranges
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|mockHandler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleRangeGeneratorOutput
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// The AccumuloRangeGenerator produces an Object (due to the limitations of the
comment|// traversal interface) which requires interpretation of that Object into Ranges.
comment|// Changes in the return object from the AccumuloRangeGenerator must also represent
comment|// a change in the AccumuloPredicateHandler.
name|AccumuloPredicateHandler
name|mockHandler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AccumuloPredicateHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|root
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExprNodeDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|hiveRowIdColumnName
init|=
literal|"rid"
decl_stmt|;
name|Range
name|r
init|=
operator|new
name|Range
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|generateRanges
argument_list|(
name|columnMapper
argument_list|,
name|hiveRowIdColumnName
argument_list|,
name|root
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|getExpression
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// A null result from AccumuloRangeGenerator is all ranges
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|r
argument_list|)
argument_list|,
name|mockHandler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManyRangesGeneratorOutput
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// The AccumuloRangeGenerator produces an Object (due to the limitations of the
comment|// traversal interface) which requires interpretation of that Object into Ranges.
comment|// Changes in the return object from the AccumuloRangeGenerator must also represent
comment|// a change in the AccumuloPredicateHandler.
name|AccumuloPredicateHandler
name|mockHandler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AccumuloPredicateHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|root
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExprNodeDesc
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|hiveRowIdColumnName
init|=
literal|"rid"
decl_stmt|;
name|Range
name|r1
init|=
operator|new
name|Range
argument_list|(
literal|"a"
argument_list|)
decl_stmt|,
name|r2
init|=
operator|new
name|Range
argument_list|(
literal|"z"
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|generateRanges
argument_list|(
name|columnMapper
argument_list|,
name|hiveRowIdColumnName
argument_list|,
name|root
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockHandler
operator|.
name|getExpression
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|root
argument_list|)
expr_stmt|;
comment|// A null result from AccumuloRangeGenerator is all ranges
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|,
name|mockHandler
operator|.
name|getRanges
argument_list|(
name|conf
argument_list|,
name|columnMapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

