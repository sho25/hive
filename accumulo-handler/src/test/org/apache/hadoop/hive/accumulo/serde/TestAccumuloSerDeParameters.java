begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|ColumnVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|TestAccumuloSerDeParameters
block|{
annotation|@
name|Test
specifier|public
name|void
name|testParseColumnVisibility
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowid,cf:f2,cf:f3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"field1,field2,field3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_TYPE_NAME
argument_list|,
literal|"string,string,string"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|VISIBILITY_LABEL_KEY
argument_list|,
literal|"foo&bar"
argument_list|)
expr_stmt|;
name|AccumuloSerDeParameters
name|params
init|=
operator|new
name|AccumuloSerDeParameters
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|,
name|AccumuloSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnVisibility
name|cv
init|=
name|params
operator|.
name|getTableVisibilityLabel
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|ColumnVisibility
argument_list|(
literal|"foo&bar"
argument_list|)
argument_list|,
name|cv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseAuthorizationsFromConf
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|AUTHORIZATIONS_KEY
argument_list|,
literal|"foo,bar"
argument_list|)
expr_stmt|;
name|Authorizations
name|auths
init|=
name|AccumuloSerDeParameters
operator|.
name|getAuthorizationsFromConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Authorizations
argument_list|(
literal|"foo,bar"
argument_list|)
argument_list|,
name|auths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseAuthorizationsFromnProperties
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowid,cf:f2,cf:f3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"field1,field2,field3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,string,string"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|AUTHORIZATIONS_KEY
argument_list|,
literal|"foo,bar"
argument_list|)
expr_stmt|;
name|AccumuloSerDeParameters
name|params
init|=
operator|new
name|AccumuloSerDeParameters
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|,
name|AccumuloSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Authorizations
name|auths
init|=
name|params
operator|.
name|getAuthorizations
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Authorizations
argument_list|(
literal|"foo,bar"
argument_list|)
argument_list|,
name|auths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullAuthsFromProperties
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowid,cf:f2,cf:f3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"field1,field2,field3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,string,string"
argument_list|)
expr_stmt|;
name|AccumuloSerDeParameters
name|params
init|=
operator|new
name|AccumuloSerDeParameters
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|,
name|AccumuloSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Authorizations
name|auths
init|=
name|params
operator|.
name|getAuthorizations
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|auths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullAuthsFromConf
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Authorizations
name|auths
init|=
name|AccumuloSerDeParameters
operator|.
name|getAuthorizationsFromConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|auths
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

