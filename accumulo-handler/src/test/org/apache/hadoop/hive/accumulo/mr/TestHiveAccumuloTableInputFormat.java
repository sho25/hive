begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|mr
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|BatchWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|BatchWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|IteratorSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|ZooKeeperInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|mock
operator|.
name|MockInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|client
operator|.
name|security
operator|.
name|tokens
operator|.
name|PasswordToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|Authorizations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|ColumnVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloConnectionParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloHiveConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloHiveRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|ColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|HiveAccumuloColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|HiveAccumuloRowIdColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|AccumuloPredicateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|PrimitiveComparisonFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|DoubleCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|Equal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|GreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|GreaterThanOrEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|IntCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|LessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|LongCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|predicate
operator|.
name|compare
operator|.
name|StringCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|AccumuloSerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
operator|.
name|TooManyAccumuloColumnsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveAccumuloTableInputFormat
block|{
specifier|public
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"user"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PASS
init|=
literal|"password"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_TABLE
init|=
literal|"table1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Text
name|COLUMN_FAMILY
init|=
operator|new
name|Text
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|NAME
init|=
operator|new
name|Text
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|SID
init|=
operator|new
name|Text
argument_list|(
literal|"sid"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|DEGREES
init|=
operator|new
name|Text
argument_list|(
literal|"dgrs"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|MILLIS
init|=
operator|new
name|Text
argument_list|(
literal|"mills"
argument_list|)
decl_stmt|;
specifier|private
name|Instance
name|mockInstance
decl_stmt|;
specifier|private
name|Connector
name|con
decl_stmt|;
specifier|private
name|HiveAccumuloTableInputFormat
name|inputformat
decl_stmt|;
specifier|private
name|JobConf
name|conf
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|test
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createMockKeyValues
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make a MockInstance here, by setting the instance name to be the same as this mock instance
comment|// we can "trick" the InputFormat into using a MockInstance
name|mockInstance
operator|=
operator|new
name|MockInstance
argument_list|(
name|test
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|inputformat
operator|=
operator|new
name|HiveAccumuloTableInputFormat
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|JobConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|TABLE_NAME
argument_list|,
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|USE_MOCK_INSTANCE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|INSTANCE_NAME
argument_list|,
name|test
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|USER_NAME
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|USER_PASS
argument_list|,
name|PASS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|ZOOKEEPERS
argument_list|,
literal|"localhost:2181"
argument_list|)
expr_stmt|;
comment|// not used for mock, but
comment|// required by input format.
name|columnNames
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"name"
argument_list|,
literal|"sid"
argument_list|,
literal|"dgrs"
argument_list|,
literal|"mills"
argument_list|)
expr_stmt|;
name|columnTypes
operator|=
name|Arrays
operator|.
expr|<
name|TypeInfo
operator|>
name|asList
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|"cf:name,cf:sid,cf:dgrs,cf:mills"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"name,sid,dgrs,mills"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,int,double,bigint"
argument_list|)
expr_stmt|;
name|con
operator|=
name|mockInstance
operator|.
name|getConnector
argument_list|(
name|USER
argument_list|,
operator|new
name|PasswordToken
argument_list|(
name|PASS
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|tableOperations
argument_list|()
operator|.
name|create
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|con
operator|.
name|securityOperations
argument_list|()
operator|.
name|changeUserAuthorizations
argument_list|(
name|USER
argument_list|,
operator|new
name|Authorizations
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|BatchWriterConfig
name|writerConf
init|=
operator|new
name|BatchWriterConfig
argument_list|()
decl_stmt|;
name|BatchWriter
name|writer
init|=
name|con
operator|.
name|createBatchWriter
argument_list|(
name|TEST_TABLE
argument_list|,
name|writerConf
argument_list|)
decl_stmt|;
name|Mutation
name|m1
init|=
operator|new
name|Mutation
argument_list|(
operator|new
name|Text
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|m1
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|,
operator|new
name|Value
argument_list|(
literal|"brian"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|SID
argument_list|,
operator|new
name|Value
argument_list|(
name|parseIntBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|DEGREES
argument_list|,
operator|new
name|Value
argument_list|(
name|parseDoubleBytes
argument_list|(
literal|"44.5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m1
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|MILLIS
argument_list|,
operator|new
name|Value
argument_list|(
name|parseLongBytes
argument_list|(
literal|"555"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Mutation
name|m2
init|=
operator|new
name|Mutation
argument_list|(
operator|new
name|Text
argument_list|(
literal|"r2"
argument_list|)
argument_list|)
decl_stmt|;
name|m2
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|,
operator|new
name|Value
argument_list|(
literal|"mark"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m2
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|SID
argument_list|,
operator|new
name|Value
argument_list|(
name|parseIntBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m2
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|DEGREES
argument_list|,
operator|new
name|Value
argument_list|(
name|parseDoubleBytes
argument_list|(
literal|"55.5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m2
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|MILLIS
argument_list|,
operator|new
name|Value
argument_list|(
name|parseLongBytes
argument_list|(
literal|"666"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Mutation
name|m3
init|=
operator|new
name|Mutation
argument_list|(
operator|new
name|Text
argument_list|(
literal|"r3"
argument_list|)
argument_list|)
decl_stmt|;
name|m3
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|,
operator|new
name|Value
argument_list|(
literal|"dennis"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m3
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|SID
argument_list|,
operator|new
name|Value
argument_list|(
name|parseIntBytes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m3
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|DEGREES
argument_list|,
operator|new
name|Value
argument_list|(
name|parseDoubleBytes
argument_list|(
literal|"65.5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m3
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|MILLIS
argument_list|,
operator|new
name|Value
argument_list|(
name|parseLongBytes
argument_list|(
literal|"777"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addMutation
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addMutation
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addMutation
argument_list|(
name|m3
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|parseIntBytes
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|parseLongBytes
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|parseDoubleBytes
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|val
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHiveAccumuloRecord
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"unused"
argument_list|)
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inputformat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|splits
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|AccumuloHiveRow
argument_list|>
name|reader
init|=
name|inputformat
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Text
name|rowId
init|=
operator|new
name|Text
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
name|COLUMN_FAMILY
operator|.
name|toString
argument_list|()
argument_list|,
name|NAME
operator|.
name|toString
argument_list|()
argument_list|,
literal|"brian"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|COLUMN_FAMILY
operator|.
name|toString
argument_list|()
argument_list|,
name|SID
operator|.
name|toString
argument_list|()
argument_list|,
name|parseIntBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|COLUMN_FAMILY
operator|.
name|toString
argument_list|()
argument_list|,
name|DEGREES
operator|.
name|toString
argument_list|()
argument_list|,
name|parseDoubleBytes
argument_list|(
literal|"44.5"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|COLUMN_FAMILY
operator|.
name|toString
argument_list|()
argument_list|,
name|MILLIS
operator|.
name|toString
argument_list|()
argument_list|,
name|parseLongBytes
argument_list|(
literal|"555"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowId
operator|.
name|toString
argument_list|()
argument_list|,
name|row
operator|.
name|getRowId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"brian"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|SID
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|parseIntBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|SID
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|DEGREES
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|parseDoubleBytes
argument_list|(
literal|"44.5"
argument_list|)
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|DEGREES
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|MILLIS
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|parseLongBytes
argument_list|(
literal|"555"
argument_list|)
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|MILLIS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetOnlyName
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"unused"
argument_list|)
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inputformat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|splits
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|AccumuloHiveRow
argument_list|>
name|reader
init|=
name|inputformat
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Text
name|rowId
init|=
operator|new
name|Text
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|getRowId
argument_list|()
argument_list|,
name|rowId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|,
literal|"brian"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|rowId
operator|=
operator|new
name|Text
argument_list|(
literal|"r2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|getRowId
argument_list|()
argument_list|,
name|rowId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|,
literal|"mark"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|rowId
operator|=
operator|new
name|Text
argument_list|(
literal|"r3"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|getRowId
argument_list|()
argument_list|,
name|rowId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|,
literal|"dennis"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDegreesAndMillis
parameter_list|()
throws|throws
name|Exception
block|{
name|Connector
name|con
init|=
name|mockInstance
operator|.
name|getConnector
argument_list|(
name|USER
argument_list|,
operator|new
name|PasswordToken
argument_list|(
name|PASS
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Scanner
name|scan
init|=
name|con
operator|.
name|createScanner
argument_list|(
name|TEST_TABLE
argument_list|,
operator|new
name|Authorizations
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
decl_stmt|;
name|IteratorSetting
name|is
init|=
operator|new
name|IteratorSetting
argument_list|(
literal|1
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|FILTER_PREFIX
operator|+
literal|1
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|,
name|DoubleCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|,
name|GreaterThanOrEqual
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|,
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|parseDoubleBytes
argument_list|(
literal|"55.6"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|,
literal|"cf:dgrs"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addScanIterator
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|IteratorSetting
name|is2
init|=
operator|new
name|IteratorSetting
argument_list|(
literal|2
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|FILTER_PREFIX
operator|+
literal|2
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|is2
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|,
name|LongCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is2
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|,
name|LessThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is2
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|,
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|parseLongBytes
argument_list|(
literal|"778"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|is2
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|,
literal|"cf:mills"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addScanIterator
argument_list|(
name|is2
argument_list|)
expr_stmt|;
name|boolean
name|foundDennis
init|=
literal|false
decl_stmt|;
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|kv
range|:
name|scan
control|)
block|{
name|boolean
name|foundName
init|=
literal|false
decl_stmt|;
name|boolean
name|foundSid
init|=
literal|false
decl_stmt|;
name|boolean
name|foundDegrees
init|=
literal|false
decl_stmt|;
name|boolean
name|foundMillis
init|=
literal|false
decl_stmt|;
name|SortedMap
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|items
init|=
name|PrimitiveComparisonFilter
operator|.
name|decodeRow
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|item
range|:
name|items
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SortedMap
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|nestedItems
init|=
name|PrimitiveComparisonFilter
operator|.
name|decodeRow
argument_list|(
name|item
operator|.
name|getKey
argument_list|()
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|nested
range|:
name|nestedItems
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|nested
operator|.
name|getKey
argument_list|()
operator|.
name|getRow
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"r3"
argument_list|)
condition|)
block|{
name|foundDennis
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|nested
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|NAME
argument_list|)
condition|)
block|{
name|foundName
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nested
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|SID
argument_list|)
condition|)
block|{
name|foundSid
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nested
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|DEGREES
argument_list|)
condition|)
block|{
name|foundDegrees
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nested
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|MILLIS
argument_list|)
condition|)
block|{
name|foundMillis
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|totalCount
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|foundDegrees
operator|&
name|foundMillis
operator|&
name|foundName
operator|&
name|foundSid
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|foundDennis
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGreaterThan1Sid
parameter_list|()
throws|throws
name|Exception
block|{
name|Connector
name|con
init|=
name|mockInstance
operator|.
name|getConnector
argument_list|(
name|USER
argument_list|,
operator|new
name|PasswordToken
argument_list|(
name|PASS
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Scanner
name|scan
init|=
name|con
operator|.
name|createScanner
argument_list|(
name|TEST_TABLE
argument_list|,
operator|new
name|Authorizations
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
decl_stmt|;
name|IteratorSetting
name|is
init|=
operator|new
name|IteratorSetting
argument_list|(
literal|1
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|FILTER_PREFIX
operator|+
literal|1
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|,
name|IntCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|,
name|GreaterThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|,
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|parseIntBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|,
literal|"cf:sid"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addScanIterator
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|boolean
name|foundMark
init|=
literal|false
decl_stmt|;
name|boolean
name|foundDennis
init|=
literal|false
decl_stmt|;
name|int
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|kv
range|:
name|scan
control|)
block|{
name|boolean
name|foundName
init|=
literal|false
decl_stmt|;
name|boolean
name|foundSid
init|=
literal|false
decl_stmt|;
name|boolean
name|foundDegrees
init|=
literal|false
decl_stmt|;
name|boolean
name|foundMillis
init|=
literal|false
decl_stmt|;
name|SortedMap
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|items
init|=
name|PrimitiveComparisonFilter
operator|.
name|decodeRow
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|item
range|:
name|items
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|item
operator|.
name|getKey
argument_list|()
operator|.
name|getRow
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"r2"
argument_list|)
condition|)
block|{
name|foundMark
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|getKey
argument_list|()
operator|.
name|getRow
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"r3"
argument_list|)
condition|)
block|{
name|foundDennis
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|item
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|NAME
argument_list|)
condition|)
block|{
name|foundName
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|SID
argument_list|)
condition|)
block|{
name|foundSid
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|DEGREES
argument_list|)
condition|)
block|{
name|foundDegrees
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|MILLIS
argument_list|)
condition|)
block|{
name|foundMillis
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|totalCount
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|foundDegrees
operator|&
name|foundMillis
operator|&
name|foundName
operator|&
name|foundSid
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|foundDennis
operator|&
name|foundMark
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNameEqualBrian
parameter_list|()
throws|throws
name|Exception
block|{
name|Connector
name|con
init|=
name|mockInstance
operator|.
name|getConnector
argument_list|(
name|USER
argument_list|,
operator|new
name|PasswordToken
argument_list|(
name|PASS
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Scanner
name|scan
init|=
name|con
operator|.
name|createScanner
argument_list|(
name|TEST_TABLE
argument_list|,
operator|new
name|Authorizations
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
decl_stmt|;
name|IteratorSetting
name|is
init|=
operator|new
name|IteratorSetting
argument_list|(
literal|1
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|FILTER_PREFIX
operator|+
literal|1
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|,
name|StringCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|,
name|Equal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|,
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
literal|"brian"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|,
literal|"cf:name"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addScanIterator
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|boolean
name|foundName
init|=
literal|false
decl_stmt|;
name|boolean
name|foundSid
init|=
literal|false
decl_stmt|;
name|boolean
name|foundDegrees
init|=
literal|false
decl_stmt|;
name|boolean
name|foundMillis
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|kv
range|:
name|scan
control|)
block|{
name|SortedMap
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|items
init|=
name|PrimitiveComparisonFilter
operator|.
name|decodeRow
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|item
range|:
name|items
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|item
operator|.
name|getKey
argument_list|()
operator|.
name|getRow
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|NAME
argument_list|)
condition|)
block|{
name|foundName
operator|=
literal|true
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
literal|"brian"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|SID
argument_list|)
condition|)
block|{
name|foundSid
operator|=
literal|true
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|parseIntBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|DEGREES
argument_list|)
condition|)
block|{
name|foundDegrees
operator|=
literal|true
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|parseDoubleBytes
argument_list|(
literal|"44.5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|getKey
argument_list|()
operator|.
name|getColumnQualifier
argument_list|()
operator|.
name|equals
argument_list|(
name|MILLIS
argument_list|)
condition|)
block|{
name|foundMillis
operator|=
literal|true
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|item
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|parseLongBytes
argument_list|(
literal|"555"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|foundDegrees
operator|&
name|foundMillis
operator|&
name|foundName
operator|&
name|foundSid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNone
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"unused"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|"cf:f1"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inputformat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|splits
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|AccumuloHiveRow
argument_list|>
name|reader
init|=
name|inputformat
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Text
name|rowId
init|=
operator|new
name|Text
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|setRowId
argument_list|(
literal|"r1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIteratorNotInSplitsCompensation
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"unused"
argument_list|)
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inputformat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|InputSplit
name|split
init|=
name|splits
index|[
literal|0
index|]
decl_stmt|;
name|IteratorSetting
name|is
init|=
operator|new
name|IteratorSetting
argument_list|(
literal|1
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|FILTER_PREFIX
operator|+
literal|1
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|,
name|StringCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|,
name|Equal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|,
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|is
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|,
literal|"cf:cq"
argument_list|)
expr_stmt|;
comment|// Mock out the predicate handler because it's just easier
name|AccumuloPredicateHandler
name|predicateHandler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AccumuloPredicateHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|predicateHandler
operator|.
name|getIterators
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|JobConf
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ColumnMapper
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set it on our inputformat
name|inputformat
operator|.
name|predicateHandler
operator|=
name|predicateHandler
expr_stmt|;
name|inputformat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// The code should account for the bug and update the iterators on the split
name|List
argument_list|<
name|IteratorSetting
argument_list|>
name|settingsOnSplit
init|=
operator|(
operator|(
name|HiveAccumuloSplit
operator|)
name|split
operator|)
operator|.
name|getSplit
argument_list|()
operator|.
name|getIterators
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|settingsOnSplit
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|is
argument_list|,
name|settingsOnSplit
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnMappingsToPairs
parameter_list|()
block|{
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|mappings
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnMapping
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|columns
init|=
operator|new
name|HashSet
argument_list|<
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Row ID
name|mappings
operator|.
name|add
argument_list|(
operator|new
name|HiveAccumuloRowIdColumnMapping
argument_list|(
name|AccumuloHiveConstants
operator|.
name|ROWID
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
literal|"row"
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some cf:cq
name|mappings
operator|.
name|add
argument_list|(
operator|new
name|HiveAccumuloColumnMapping
argument_list|(
literal|"person"
argument_list|,
literal|"name"
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
literal|"col1"
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
operator|new
name|HiveAccumuloColumnMapping
argument_list|(
literal|"person"
argument_list|,
literal|"age"
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
literal|"col2"
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|add
argument_list|(
operator|new
name|HiveAccumuloColumnMapping
argument_list|(
literal|"person"
argument_list|,
literal|"height"
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
literal|"col3"
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bare cf
name|mappings
operator|.
name|add
argument_list|(
operator|new
name|HiveAccumuloColumnMapping
argument_list|(
literal|"city"
argument_list|,
literal|"name"
argument_list|,
name|ColumnEncoding
operator|.
name|STRING
argument_list|,
literal|"col4"
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"person"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"person"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"age"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"person"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"height"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Null qualifier would mean all qualifiers in that family, want an empty qualifier
name|columns
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|(
operator|new
name|Text
argument_list|(
literal|"city"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|columns
argument_list|,
name|inputformat
operator|.
name|getPairCollection
argument_list|(
name|mappings
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigureMockAccumuloInputFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|AccumuloConnectionParameters
name|accumuloParams
init|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ColumnMapper
name|columnMapper
init|=
operator|new
name|ColumnMapper
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|DEFAULT_STORAGE_TYPE
argument_list|)
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|cfCqPairs
init|=
name|inputformat
operator|.
name|getPairCollection
argument_list|(
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IteratorSetting
argument_list|>
name|iterators
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|Range
argument_list|()
argument_list|)
decl_stmt|;
name|HiveAccumuloTableInputFormat
name|mockInputFormat
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HiveAccumuloTableInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Call out to the real configure method
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
name|mockInstance
argument_list|,
name|con
argument_list|,
name|accumuloParams
argument_list|,
name|columnMapper
argument_list|,
name|iterators
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Also compute the correct cf:cq pairs so we can assert the right argument was passed
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|getPairCollection
argument_list|(
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
expr_stmt|;
name|mockInputFormat
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
name|mockInstance
argument_list|,
name|con
argument_list|,
name|accumuloParams
argument_list|,
name|columnMapper
argument_list|,
name|iterators
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Verify that the correct methods are invoked on AccumuloInputFormat
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setMockInstance
argument_list|(
name|conf
argument_list|,
name|mockInstance
operator|.
name|getInstanceName
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setConnectorInfo
argument_list|(
name|conf
argument_list|,
name|USER
argument_list|,
operator|new
name|PasswordToken
argument_list|(
name|PASS
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setInputTableName
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setScanAuthorizations
argument_list|(
name|conf
argument_list|,
name|con
operator|.
name|securityOperations
argument_list|()
operator|.
name|getUserAuthorizations
argument_list|(
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|addIterators
argument_list|(
name|conf
argument_list|,
name|iterators
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setRanges
argument_list|(
name|conf
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|fetchColumns
argument_list|(
name|conf
argument_list|,
name|cfCqPairs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigureAccumuloInputFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|AccumuloConnectionParameters
name|accumuloParams
init|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ColumnMapper
name|columnMapper
init|=
operator|new
name|ColumnMapper
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|DEFAULT_STORAGE_TYPE
argument_list|)
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|cfCqPairs
init|=
name|inputformat
operator|.
name|getPairCollection
argument_list|(
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IteratorSetting
argument_list|>
name|iterators
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|Range
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instanceName
init|=
literal|"realInstance"
decl_stmt|;
name|String
name|zookeepers
init|=
literal|"host1:2181,host2:2181,host3:2181"
decl_stmt|;
name|ZooKeeperInstance
name|zkInstance
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ZooKeeperInstance
operator|.
name|class
argument_list|)
decl_stmt|;
name|HiveAccumuloTableInputFormat
name|mockInputFormat
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HiveAccumuloTableInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Stub out the ZKI mock
name|Mockito
operator|.
name|when
argument_list|(
name|zkInstance
operator|.
name|getInstanceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|instanceName
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|zkInstance
operator|.
name|getZooKeepers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|zookeepers
argument_list|)
expr_stmt|;
comment|// Call out to the real configure method
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
name|zkInstance
argument_list|,
name|con
argument_list|,
name|accumuloParams
argument_list|,
name|columnMapper
argument_list|,
name|iterators
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Also compute the correct cf:cq pairs so we can assert the right argument was passed
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|getPairCollection
argument_list|(
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
expr_stmt|;
name|mockInputFormat
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
name|zkInstance
argument_list|,
name|con
argument_list|,
name|accumuloParams
argument_list|,
name|columnMapper
argument_list|,
name|iterators
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Verify that the correct methods are invoked on AccumuloInputFormat
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setZooKeeperInstance
argument_list|(
name|conf
argument_list|,
name|instanceName
argument_list|,
name|zookeepers
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setConnectorInfo
argument_list|(
name|conf
argument_list|,
name|USER
argument_list|,
operator|new
name|PasswordToken
argument_list|(
name|PASS
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setInputTableName
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setScanAuthorizations
argument_list|(
name|conf
argument_list|,
name|con
operator|.
name|securityOperations
argument_list|()
operator|.
name|getUserAuthorizations
argument_list|(
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|addIterators
argument_list|(
name|conf
argument_list|,
name|iterators
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setRanges
argument_list|(
name|conf
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|fetchColumns
argument_list|(
name|conf
argument_list|,
name|cfCqPairs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigureAccumuloInputFormatWithAuthorizations
parameter_list|()
throws|throws
name|Exception
block|{
name|AccumuloConnectionParameters
name|accumuloParams
init|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|AUTHORIZATIONS_KEY
argument_list|,
literal|"foo,bar"
argument_list|)
expr_stmt|;
name|ColumnMapper
name|columnMapper
init|=
operator|new
name|ColumnMapper
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|DEFAULT_STORAGE_TYPE
argument_list|)
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|cfCqPairs
init|=
name|inputformat
operator|.
name|getPairCollection
argument_list|(
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IteratorSetting
argument_list|>
name|iterators
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|Range
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instanceName
init|=
literal|"realInstance"
decl_stmt|;
name|String
name|zookeepers
init|=
literal|"host1:2181,host2:2181,host3:2181"
decl_stmt|;
name|ZooKeeperInstance
name|zkInstance
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ZooKeeperInstance
operator|.
name|class
argument_list|)
decl_stmt|;
name|HiveAccumuloTableInputFormat
name|mockInputFormat
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HiveAccumuloTableInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Stub out the ZKI mock
name|Mockito
operator|.
name|when
argument_list|(
name|zkInstance
operator|.
name|getInstanceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|instanceName
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|zkInstance
operator|.
name|getZooKeepers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|zookeepers
argument_list|)
expr_stmt|;
comment|// Call out to the real configure method
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
name|zkInstance
argument_list|,
name|con
argument_list|,
name|accumuloParams
argument_list|,
name|columnMapper
argument_list|,
name|iterators
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Also compute the correct cf:cq pairs so we can assert the right argument was passed
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|getPairCollection
argument_list|(
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
expr_stmt|;
name|mockInputFormat
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
name|zkInstance
argument_list|,
name|con
argument_list|,
name|accumuloParams
argument_list|,
name|columnMapper
argument_list|,
name|iterators
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Verify that the correct methods are invoked on AccumuloInputFormat
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setZooKeeperInstance
argument_list|(
name|conf
argument_list|,
name|instanceName
argument_list|,
name|zookeepers
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setConnectorInfo
argument_list|(
name|conf
argument_list|,
name|USER
argument_list|,
operator|new
name|PasswordToken
argument_list|(
name|PASS
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setInputTableName
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setScanAuthorizations
argument_list|(
name|conf
argument_list|,
operator|new
name|Authorizations
argument_list|(
literal|"foo,bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|addIterators
argument_list|(
name|conf
argument_list|,
name|iterators
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setRanges
argument_list|(
name|conf
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|fetchColumns
argument_list|(
name|conf
argument_list|,
name|cfCqPairs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigureAccumuloInputFormatWithIterators
parameter_list|()
throws|throws
name|Exception
block|{
name|AccumuloConnectionParameters
name|accumuloParams
init|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ColumnMapper
name|columnMapper
init|=
operator|new
name|ColumnMapper
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|DEFAULT_STORAGE_TYPE
argument_list|)
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|cfCqPairs
init|=
name|inputformat
operator|.
name|getPairCollection
argument_list|(
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IteratorSetting
argument_list|>
name|iterators
init|=
operator|new
name|ArrayList
argument_list|<
name|IteratorSetting
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|Range
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instanceName
init|=
literal|"realInstance"
decl_stmt|;
name|String
name|zookeepers
init|=
literal|"host1:2181,host2:2181,host3:2181"
decl_stmt|;
name|IteratorSetting
name|cfg
init|=
operator|new
name|IteratorSetting
argument_list|(
literal|50
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|,
name|StringCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|,
name|Equal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|,
literal|"dave"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|,
literal|"person:name"
argument_list|)
expr_stmt|;
name|iterators
operator|.
name|add
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|cfg
operator|=
operator|new
name|IteratorSetting
argument_list|(
literal|50
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|,
name|IntCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|,
name|Equal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|,
literal|"person:age"
argument_list|)
expr_stmt|;
name|iterators
operator|.
name|add
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|ZooKeeperInstance
name|zkInstance
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ZooKeeperInstance
operator|.
name|class
argument_list|)
decl_stmt|;
name|HiveAccumuloTableInputFormat
name|mockInputFormat
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HiveAccumuloTableInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Stub out the ZKI mock
name|Mockito
operator|.
name|when
argument_list|(
name|zkInstance
operator|.
name|getInstanceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|instanceName
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|zkInstance
operator|.
name|getZooKeepers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|zookeepers
argument_list|)
expr_stmt|;
comment|// Call out to the real configure method
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
name|zkInstance
argument_list|,
name|con
argument_list|,
name|accumuloParams
argument_list|,
name|columnMapper
argument_list|,
name|iterators
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Also compute the correct cf:cq pairs so we can assert the right argument was passed
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|getPairCollection
argument_list|(
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
expr_stmt|;
name|mockInputFormat
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
name|zkInstance
argument_list|,
name|con
argument_list|,
name|accumuloParams
argument_list|,
name|columnMapper
argument_list|,
name|iterators
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Verify that the correct methods are invoked on AccumuloInputFormat
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setZooKeeperInstance
argument_list|(
name|conf
argument_list|,
name|instanceName
argument_list|,
name|zookeepers
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setConnectorInfo
argument_list|(
name|conf
argument_list|,
name|USER
argument_list|,
operator|new
name|PasswordToken
argument_list|(
name|PASS
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setInputTableName
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setScanAuthorizations
argument_list|(
name|conf
argument_list|,
name|con
operator|.
name|securityOperations
argument_list|()
operator|.
name|getUserAuthorizations
argument_list|(
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|addIterators
argument_list|(
name|conf
argument_list|,
name|iterators
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setRanges
argument_list|(
name|conf
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|fetchColumns
argument_list|(
name|conf
argument_list|,
name|cfCqPairs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigureAccumuloInputFormatWithEmptyColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|AccumuloConnectionParameters
name|accumuloParams
init|=
operator|new
name|AccumuloConnectionParameters
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ColumnMapper
name|columnMapper
init|=
operator|new
name|ColumnMapper
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|DEFAULT_STORAGE_TYPE
argument_list|)
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|cfCqPairs
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IteratorSetting
argument_list|>
name|iterators
init|=
operator|new
name|ArrayList
argument_list|<
name|IteratorSetting
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|Range
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|instanceName
init|=
literal|"realInstance"
decl_stmt|;
name|String
name|zookeepers
init|=
literal|"host1:2181,host2:2181,host3:2181"
decl_stmt|;
name|IteratorSetting
name|cfg
init|=
operator|new
name|IteratorSetting
argument_list|(
literal|50
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|,
name|StringCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|,
name|Equal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|,
literal|"dave"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|,
literal|"person:name"
argument_list|)
expr_stmt|;
name|iterators
operator|.
name|add
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|cfg
operator|=
operator|new
name|IteratorSetting
argument_list|(
literal|50
argument_list|,
name|PrimitiveComparisonFilter
operator|.
name|class
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|P_COMPARE_CLASS
argument_list|,
name|IntCompare
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COMPARE_OPT_CLASS
argument_list|,
name|Equal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|CONST_VAL
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|addOption
argument_list|(
name|PrimitiveComparisonFilter
operator|.
name|COLUMN
argument_list|,
literal|"person:age"
argument_list|)
expr_stmt|;
name|iterators
operator|.
name|add
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|ZooKeeperInstance
name|zkInstance
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ZooKeeperInstance
operator|.
name|class
argument_list|)
decl_stmt|;
name|HiveAccumuloTableInputFormat
name|mockInputFormat
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HiveAccumuloTableInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Stub out the ZKI mock
name|Mockito
operator|.
name|when
argument_list|(
name|zkInstance
operator|.
name|getInstanceName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|instanceName
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|zkInstance
operator|.
name|getZooKeepers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|zookeepers
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockInputFormat
operator|.
name|getPairCollection
argument_list|(
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cfCqPairs
argument_list|)
expr_stmt|;
comment|// Call out to the real configure method
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
name|zkInstance
argument_list|,
name|con
argument_list|,
name|accumuloParams
argument_list|,
name|columnMapper
argument_list|,
name|iterators
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Also compute the correct cf:cq pairs so we can assert the right argument was passed
name|Mockito
operator|.
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|getPairCollection
argument_list|(
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
expr_stmt|;
name|mockInputFormat
operator|.
name|configure
argument_list|(
name|conf
argument_list|,
name|zkInstance
argument_list|,
name|con
argument_list|,
name|accumuloParams
argument_list|,
name|columnMapper
argument_list|,
name|iterators
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// Verify that the correct methods are invoked on AccumuloInputFormat
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setZooKeeperInstance
argument_list|(
name|conf
argument_list|,
name|instanceName
argument_list|,
name|zookeepers
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setConnectorInfo
argument_list|(
name|conf
argument_list|,
name|USER
argument_list|,
operator|new
name|PasswordToken
argument_list|(
name|PASS
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setInputTableName
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setScanAuthorizations
argument_list|(
name|conf
argument_list|,
name|con
operator|.
name|securityOperations
argument_list|()
operator|.
name|getUserAuthorizations
argument_list|(
name|USER
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|addIterators
argument_list|(
name|conf
argument_list|,
name|iterators
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockInputFormat
argument_list|)
operator|.
name|setRanges
argument_list|(
name|conf
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
comment|// fetchColumns is not called because we had no columns to fetch
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProtectedField
parameter_list|()
throws|throws
name|Exception
block|{
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|conf
argument_list|,
operator|new
name|Path
argument_list|(
literal|"unused"
argument_list|)
argument_list|)
expr_stmt|;
name|BatchWriterConfig
name|writerConf
init|=
operator|new
name|BatchWriterConfig
argument_list|()
decl_stmt|;
name|BatchWriter
name|writer
init|=
name|con
operator|.
name|createBatchWriter
argument_list|(
name|TEST_TABLE
argument_list|,
name|writerConf
argument_list|)
decl_stmt|;
name|Authorizations
name|origAuths
init|=
name|con
operator|.
name|securityOperations
argument_list|()
operator|.
name|getUserAuthorizations
argument_list|(
name|USER
argument_list|)
decl_stmt|;
name|con
operator|.
name|securityOperations
argument_list|()
operator|.
name|changeUserAuthorizations
argument_list|(
name|USER
argument_list|,
operator|new
name|Authorizations
argument_list|(
name|origAuths
operator|.
name|toString
argument_list|()
operator|+
literal|",foo"
argument_list|)
argument_list|)
expr_stmt|;
name|Mutation
name|m
init|=
operator|new
name|Mutation
argument_list|(
literal|"r4"
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|,
operator|new
name|ColumnVisibility
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
literal|"frank"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|SID
argument_list|,
operator|new
name|ColumnVisibility
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|parseIntBytes
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|DEGREES
argument_list|,
operator|new
name|ColumnVisibility
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|parseDoubleBytes
argument_list|(
literal|"60.6"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|MILLIS
argument_list|,
operator|new
name|ColumnVisibility
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|new
name|Value
argument_list|(
name|parseLongBytes
argument_list|(
literal|"777"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addMutation
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|AUTHORIZATIONS_KEY
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inputformat
operator|.
name|getSplits
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|splits
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|RecordReader
argument_list|<
name|Text
argument_list|,
name|AccumuloHiveRow
argument_list|>
name|reader
init|=
name|inputformat
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Text
name|rowId
init|=
operator|new
name|Text
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|getRowId
argument_list|()
argument_list|,
name|rowId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|,
literal|"brian"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|rowId
operator|=
operator|new
name|Text
argument_list|(
literal|"r2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|getRowId
argument_list|()
argument_list|,
name|rowId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|,
literal|"mark"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|rowId
operator|=
operator|new
name|Text
argument_list|(
literal|"r3"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|getRowId
argument_list|()
argument_list|,
name|rowId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|,
literal|"dennis"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|rowId
operator|=
operator|new
name|Text
argument_list|(
literal|"r4"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|getRowId
argument_list|()
argument_list|,
name|rowId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|hasFamAndQual
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|NAME
argument_list|)
argument_list|,
literal|"frank"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|next
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapColumnPairs
parameter_list|()
throws|throws
name|TooManyAccumuloColumnsException
block|{
name|ColumnMapper
name|columnMapper
init|=
operator|new
name|ColumnMapper
argument_list|(
literal|":rowID,cf:*"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|DEFAULT_STORAGE_TYPE
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"row"
argument_list|,
literal|"col"
argument_list|)
argument_list|,
name|Arrays
operator|.
expr|<
name|TypeInfo
operator|>
name|asList
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
argument_list|>
name|pairs
init|=
name|inputformat
operator|.
name|getPairCollection
argument_list|(
name|columnMapper
operator|.
name|getColumnMappings
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pairs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|Text
argument_list|,
name|Text
argument_list|>
name|cfCq
init|=
name|pairs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"cf"
argument_list|,
name|cfCq
operator|.
name|getFirst
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cfCq
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

