begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|serde
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|ColumnUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|data
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|accumulo
operator|.
name|core
operator|.
name|security
operator|.
name|ColumnVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|AccumuloHiveRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|LazyAccumuloRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|accumulo
operator|.
name|columns
operator|.
name|InvalidColumnMappingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazyMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazyObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazySimpleStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_class
specifier|public
class|class
name|TestAccumuloSerDe
block|{
specifier|protected
name|AccumuloSerDe
name|serde
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|serde
operator|=
operator|new
name|AccumuloSerDe
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TooManyHiveColumnsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|moreHiveColumnsThanAccumuloColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowID,cf:f3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"row,field1,field2,field3,field4"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,string,string,string,string"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|serde
operator|.
name|deserialize
argument_list|(
operator|new
name|Text
argument_list|(
literal|"fail"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TooManyAccumuloColumnsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|moreAccumuloColumnsThanHiveColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowID,cf:f1,cf:f2,cf:f3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"row,field1,field2"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,string,string"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|serde
operator|.
name|deserialize
argument_list|(
operator|new
name|Text
argument_list|(
literal|"fail"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|emptyConfiguration
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|simpleColumnMapping
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowID,cf:f1,cf:f2,cf:f3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"row,field1,field2,field3"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serde
operator|.
name|getCachedRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|withRowID
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|"cf:f1,:rowID,cf:f2,cf:f3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"field1,field2,field3,field4"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serde
operator|.
name|getCachedRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidColumnMappingException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|invalidColMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|"cf,cf:f2,cf:f3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"field2,field3,field4"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|setRowId
argument_list|(
literal|"r1"
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|serde
operator|.
name|deserialize
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|LazyAccumuloRow
argument_list|)
expr_stmt|;
name|LazyAccumuloRow
name|lazyRow
init|=
operator|(
name|LazyAccumuloRow
operator|)
name|obj
decl_stmt|;
name|lazyRow
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TooManyAccumuloColumnsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|deserializeWithTooFewHiveColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowID,cf:f1,cf:f2,cf:f3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"row,col1,col2"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,string,string"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|serde
operator|.
name|deserialize
argument_list|(
operator|new
name|Text
argument_list|(
literal|"fail"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArraySerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowID,cf:vals"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"row,values"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,array<string>"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
comment|// Get one of the default separators to avoid having to set a custom separator
name|char
name|separator
init|=
literal|':'
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|setRowId
argument_list|(
literal|"r1"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|"cf"
argument_list|,
literal|"vals"
argument_list|,
operator|(
literal|"value1"
operator|+
name|separator
operator|+
literal|"value2"
operator|+
name|separator
operator|+
literal|"value3"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|serde
operator|.
name|deserialize
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|LazyAccumuloRow
argument_list|)
expr_stmt|;
name|LazyAccumuloRow
name|lazyRow
init|=
operator|(
name|LazyAccumuloRow
operator|)
name|obj
decl_stmt|;
name|Object
name|field0
init|=
name|lazyRow
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|field0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|field0
operator|instanceof
name|LazyString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|getRowId
argument_list|()
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|field0
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|field1
init|=
name|lazyRow
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|field1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|field1
operator|instanceof
name|LazyArray
argument_list|)
expr_stmt|;
name|LazyArray
name|array
init|=
operator|(
name|LazyArray
operator|)
name|field1
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|array
operator|.
name|getList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|LazyString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|o
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowID,cf:vals"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"row,values"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,map<string,string>"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|,
literal|":"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|MAPKEY_DELIM
argument_list|,
literal|"="
argument_list|)
expr_stmt|;
comment|// Get one of the default separators to avoid having to set a custom separator
name|char
name|collectionSeparator
init|=
literal|':'
decl_stmt|,
name|kvSeparator
init|=
literal|'='
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|setRowId
argument_list|(
literal|"r1"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|"cf"
argument_list|,
literal|"vals"
argument_list|,
operator|(
literal|"k1"
operator|+
name|kvSeparator
operator|+
literal|"v1"
operator|+
name|collectionSeparator
operator|+
literal|"k2"
operator|+
name|kvSeparator
operator|+
literal|"v2"
operator|+
name|collectionSeparator
operator|+
literal|"k3"
operator|+
name|kvSeparator
operator|+
literal|"v3"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|serde
operator|.
name|deserialize
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|LazyAccumuloRow
argument_list|)
expr_stmt|;
name|LazyAccumuloRow
name|lazyRow
init|=
operator|(
name|LazyAccumuloRow
operator|)
name|obj
decl_stmt|;
name|Object
name|field0
init|=
name|lazyRow
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|field0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|field0
operator|instanceof
name|LazyString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|row
operator|.
name|getRowId
argument_list|()
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|field0
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|field1
init|=
name|lazyRow
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|field1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|field1
operator|instanceof
name|LazyMap
argument_list|)
expr_stmt|;
name|LazyMap
name|map
init|=
operator|(
name|LazyMap
operator|)
name|field1
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|untypedMap
init|=
name|map
operator|.
name|getMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|map
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedKeys
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedKeys
operator|.
name|add
argument_list|(
literal|"k1"
argument_list|)
expr_stmt|;
name|expectedKeys
operator|.
name|add
argument_list|(
literal|"k2"
argument_list|)
expr_stmt|;
name|expectedKeys
operator|.
name|add
argument_list|(
literal|"k3"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|untypedMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|instanceof
name|LazyString
argument_list|)
expr_stmt|;
name|LazyString
name|key
init|=
operator|(
name|LazyString
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|LazyString
argument_list|)
expr_stmt|;
name|LazyString
name|value
init|=
operator|(
name|LazyString
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|strKey
init|=
name|key
operator|.
name|getWritableObject
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|,
name|strValue
init|=
name|value
operator|.
name|getWritableObject
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedKeys
operator|.
name|remove
argument_list|(
name|strKey
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|strValue
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strValue
operator|.
name|startsWith
argument_list|(
literal|"v"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|strValue
operator|.
name|endsWith
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|strKey
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Did not find expected keys: "
operator|+
name|expectedKeys
argument_list|,
name|expectedKeys
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deserialization
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowID,cf:f1,cf:f2,cf:f3"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"blah,field2,field3,field4"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|setRowId
argument_list|(
literal|"r1"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|"cf"
argument_list|,
literal|"f1"
argument_list|,
literal|"v1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|"cf"
argument_list|,
literal|"f2"
argument_list|,
literal|"v2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|serde
operator|.
name|deserialize
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|LazyAccumuloRow
argument_list|)
expr_stmt|;
name|LazyAccumuloRow
name|lazyRow
init|=
operator|(
name|LazyAccumuloRow
operator|)
name|obj
decl_stmt|;
name|Object
name|field0
init|=
name|lazyRow
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|field0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|field0
operator|instanceof
name|LazyString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|field0
operator|.
name|toString
argument_list|()
argument_list|,
literal|"r1"
argument_list|)
expr_stmt|;
name|Object
name|field1
init|=
name|lazyRow
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|field1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected instance of LazyString but was "
operator|+
name|field1
operator|.
name|getClass
argument_list|()
argument_list|,
name|field1
operator|instanceof
name|LazyString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|field1
operator|.
name|toString
argument_list|()
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|Object
name|field2
init|=
name|lazyRow
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|field2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|field2
operator|instanceof
name|LazyString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|field2
operator|.
name|toString
argument_list|()
argument_list|,
literal|"v2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoVisibilitySetsEmptyVisibility
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|"cf:f1,:rowID"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"field1,field2"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|AccumuloRowSerializer
name|serializer
init|=
name|serde
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|ColumnVisibility
argument_list|()
argument_list|,
name|serializer
operator|.
name|getVisibility
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnVisibilityForSerializer
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|"cf:f1,:rowID"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"field1,field2"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|VISIBILITY_LABEL_KEY
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|AccumuloRowSerializer
name|serializer
init|=
name|serde
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|ColumnVisibility
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|serializer
operator|.
name|getVisibility
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompositeKeyDeserialization
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowID,cf:f1"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"row,field1"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"struct<col1:string,col2:string,col3:string>,string"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|DelimitedAccumuloRowIdFactory
operator|.
name|ACCUMULO_COMPOSITE_DELIMITER
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COMPOSITE_ROWID_FACTORY
argument_list|,
name|DelimitedAccumuloRowIdFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|AccumuloHiveRow
name|row
init|=
operator|new
name|AccumuloHiveRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|setRowId
argument_list|(
literal|"p1_p2_p3"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
literal|"cf"
argument_list|,
literal|"f1"
argument_list|,
literal|"v1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|serde
operator|.
name|deserialize
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|LazyAccumuloRow
argument_list|)
expr_stmt|;
name|LazyAccumuloRow
name|lazyRow
init|=
operator|(
name|LazyAccumuloRow
operator|)
name|obj
decl_stmt|;
name|Object
name|field0
init|=
name|lazyRow
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|field0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|field0
operator|instanceof
name|LazyStruct
argument_list|)
expr_stmt|;
name|LazyStruct
name|struct
init|=
operator|(
name|LazyStruct
operator|)
name|field0
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|fields
init|=
name|struct
operator|.
name|getFieldsAsList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|LazyString
operator|.
name|class
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|field1
init|=
name|lazyRow
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|field1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected instance of LazyString but was "
operator|+
name|field1
operator|.
name|getClass
argument_list|()
argument_list|,
name|field1
operator|instanceof
name|LazyString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|field1
operator|.
name|toString
argument_list|()
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStructOfMapSerialization
parameter_list|()
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"row"
argument_list|,
literal|"col"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|structColNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"map1"
argument_list|,
literal|"map2"
argument_list|)
decl_stmt|;
name|TypeInfo
name|mapTypeInfo
init|=
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
comment|// struct<map1:map<string,string>,map2:map<string,string>>,string
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|types
init|=
name|Arrays
operator|.
expr|<
name|TypeInfo
operator|>
name|asList
argument_list|(
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|structColNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|mapTypeInfo
argument_list|,
name|mapTypeInfo
argument_list|)
argument_list|)
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
decl_stmt|;
name|Properties
name|tableProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tableProperties
operator|.
name|setProperty
argument_list|(
name|AccumuloSerDeParameters
operator|.
name|COLUMN_MAPPINGS
argument_list|,
literal|":rowid,cf:cq"
argument_list|)
expr_stmt|;
comment|// Use the default separators [0, 1, 2, 3, ..., 7]
name|tableProperties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|columns
argument_list|)
argument_list|)
expr_stmt|;
name|tableProperties
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|types
argument_list|)
argument_list|)
expr_stmt|;
name|AccumuloSerDeParameters
name|accumuloSerDeParams
init|=
operator|new
name|AccumuloSerDeParameters
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|tableProperties
argument_list|,
name|AccumuloSerDe
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|LazySerDeParameters
name|serDeParams
init|=
name|accumuloSerDeParams
operator|.
name|getSerDeParameters
argument_list|()
decl_stmt|;
name|byte
index|[]
name|seps
init|=
name|serDeParams
operator|.
name|getSeparators
argument_list|()
decl_stmt|;
comment|// struct<map<k:v,k:v>_map<k:v,k:v>>>
name|TypeInfo
name|stringTypeInfo
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
decl_stmt|;
name|LazyStringObjectInspector
name|stringOI
init|=
operator|(
name|LazyStringObjectInspector
operator|)
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|stringTypeInfo
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
literal|0
argument_list|,
name|serDeParams
operator|.
name|getNullSequence
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|isEscaped
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
decl_stmt|;
name|LazyMapObjectInspector
name|mapOI
init|=
name|LazyObjectInspectorFactory
operator|.
name|getLazySimpleMapObjectInspector
argument_list|(
name|stringOI
argument_list|,
name|stringOI
argument_list|,
name|seps
index|[
literal|3
index|]
argument_list|,
name|seps
index|[
literal|4
index|]
argument_list|,
name|serDeParams
operator|.
name|getNullSequence
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|isEscaped
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
decl_stmt|;
name|LazySimpleStructObjectInspector
name|rowStructOI
init|=
operator|(
name|LazySimpleStructObjectInspector
operator|)
name|LazyObjectInspectorFactory
operator|.
name|getLazySimpleStructObjectInspector
argument_list|(
name|structColNames
argument_list|,
name|Arrays
operator|.
expr|<
name|ObjectInspector
operator|>
name|asList
argument_list|(
name|mapOI
argument_list|,
name|mapOI
argument_list|)
argument_list|,
operator|(
name|byte
operator|)
name|seps
index|[
literal|2
index|]
argument_list|,
name|serDeParams
operator|.
name|getNullSequence
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|isLastColumnTakesRest
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|isEscaped
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
decl_stmt|;
name|LazySimpleStructObjectInspector
name|structOI
init|=
operator|(
name|LazySimpleStructObjectInspector
operator|)
name|LazyObjectInspectorFactory
operator|.
name|getLazySimpleStructObjectInspector
argument_list|(
name|columns
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|rowStructOI
argument_list|,
name|stringOI
argument_list|)
argument_list|,
name|seps
index|[
literal|1
index|]
argument_list|,
name|serDeParams
operator|.
name|getNullSequence
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|isLastColumnTakesRest
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|isEscaped
argument_list|()
argument_list|,
name|serDeParams
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
decl_stmt|;
name|AccumuloRowSerializer
name|serializer
init|=
operator|new
name|AccumuloRowSerializer
argument_list|(
literal|0
argument_list|,
name|serDeParams
argument_list|,
name|accumuloSerDeParams
operator|.
name|getColumnMappings
argument_list|()
argument_list|,
operator|new
name|ColumnVisibility
argument_list|()
argument_list|,
name|accumuloSerDeParams
operator|.
name|getRowIdFactory
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|,
name|map2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map1
operator|.
name|put
argument_list|(
literal|"key10"
argument_list|,
literal|"value10"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|put
argument_list|(
literal|"key11"
argument_list|,
literal|"value11"
argument_list|)
expr_stmt|;
name|map2
operator|.
name|put
argument_list|(
literal|"key20"
argument_list|,
literal|"value20"
argument_list|)
expr_stmt|;
name|map2
operator|.
name|put
argument_list|(
literal|"key21"
argument_list|,
literal|"value21"
argument_list|)
expr_stmt|;
name|ByteArrayRef
name|byteRef
init|=
operator|new
name|ByteArrayRef
argument_list|()
decl_stmt|;
comment|// Default separators are 1-indexed (instead of 0-indexed), thus the separator at offset 1 is
comment|// (byte) 2
comment|// The separator for the hive row is \x02, for the row Id struct, \x03, and the maps \x04 and
comment|// \x05
name|String
name|accumuloRow
init|=
literal|"key10\5value10\4key11\5value11\3key20\5value20\4key21\5value21"
decl_stmt|;
name|LazyStruct
name|entireStruct
init|=
operator|(
name|LazyStruct
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|structOI
argument_list|)
decl_stmt|;
name|byteRef
operator|.
name|setData
argument_list|(
operator|(
name|accumuloRow
operator|+
literal|"\2foo"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|entireStruct
operator|.
name|init
argument_list|(
name|byteRef
argument_list|,
literal|0
argument_list|,
name|byteRef
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Mutation
name|m
init|=
name|serializer
operator|.
name|serialize
argument_list|(
name|entireStruct
argument_list|,
name|structOI
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|accumuloRow
operator|.
name|getBytes
argument_list|()
argument_list|,
name|m
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|m
operator|.
name|getUpdates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnUpdate
name|update
init|=
name|m
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"cf"
argument_list|,
operator|new
name|String
argument_list|(
name|update
operator|.
name|getColumnFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"cq"
argument_list|,
operator|new
name|String
argument_list|(
name|update
operator|.
name|getColumnQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
argument_list|(
name|update
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AccumuloHiveRow
name|haRow
init|=
operator|new
name|AccumuloHiveRow
argument_list|(
operator|new
name|String
argument_list|(
name|m
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|haRow
operator|.
name|add
argument_list|(
literal|"cf"
argument_list|,
literal|"cq"
argument_list|,
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|LazyAccumuloRow
name|lazyAccumuloRow
init|=
operator|new
name|LazyAccumuloRow
argument_list|(
name|structOI
argument_list|)
decl_stmt|;
name|lazyAccumuloRow
operator|.
name|init
argument_list|(
name|haRow
argument_list|,
name|accumuloSerDeParams
operator|.
name|getColumnMappings
argument_list|()
argument_list|,
name|accumuloSerDeParams
operator|.
name|getRowIdFactory
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
name|lazyAccumuloRow
operator|.
name|getFieldsAsList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|objects
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LazyStruct
name|rowStruct
init|=
operator|(
name|LazyStruct
operator|)
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|rowObjects
init|=
name|rowStruct
operator|.
name|getFieldsAsList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rowObjects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LazyMap
name|rowMap
init|=
operator|(
name|LazyMap
operator|)
name|rowObjects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|actualMap
init|=
name|rowMap
operator|.
name|getMap
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Actual map 1: "
operator|+
name|actualMap
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|actualStringMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|actualMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|actualStringMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|map1
argument_list|,
name|actualStringMap
argument_list|)
expr_stmt|;
name|rowMap
operator|=
operator|(
name|LazyMap
operator|)
name|rowObjects
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|actualMap
operator|=
name|rowMap
operator|.
name|getMap
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Actual map 2: "
operator|+
name|actualMap
argument_list|)
expr_stmt|;
name|actualStringMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|actualMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|actualStringMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|map2
argument_list|,
name|actualStringMap
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

