begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
operator|.
name|LlapProtocolClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|TezUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|InputDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|UserPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|event
operator|.
name|VertexState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|event
operator|.
name|VertexStateUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezDAGID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezTaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezTaskID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezVertexID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|InputSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TaskSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|TaskAttemptEndReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|TaskCommunicatorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
specifier|public
class|class
name|TestLlapTaskCommunicator
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testEntityTracker1
parameter_list|()
block|{
name|LlapTaskCommunicator
operator|.
name|EntityTracker
name|entityTracker
init|=
operator|new
name|LlapTaskCommunicator
operator|.
name|EntityTracker
argument_list|()
decl_stmt|;
name|String
name|host1
init|=
literal|"host1"
decl_stmt|;
name|int
name|port
init|=
literal|1451
decl_stmt|;
comment|// Simple container registration and un-registration without any task attempt being involved.
name|ContainerId
name|containerId101
init|=
name|constructContainerId
argument_list|(
literal|101
argument_list|)
decl_stmt|;
name|entityTracker
operator|.
name|registerContainer
argument_list|(
name|containerId101
argument_list|,
name|host1
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|,
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId101
argument_list|)
argument_list|)
expr_stmt|;
name|entityTracker
operator|.
name|unregisterContainer
argument_list|(
name|containerId101
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getContainerAttemptMapForNode
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId101
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|nodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|attemptToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|containerToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Simple task registration and un-registration.
name|ContainerId
name|containerId1
init|=
name|constructContainerId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|taskAttemptId1
init|=
name|constructTaskAttemptId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|entityTracker
operator|.
name|registerTaskAttempt
argument_list|(
name|containerId1
argument_list|,
name|taskAttemptId1
argument_list|,
name|host1
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|,
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|,
name|entityTracker
operator|.
name|getNodeIdForTaskAttempt
argument_list|(
name|taskAttemptId1
argument_list|)
argument_list|)
expr_stmt|;
name|entityTracker
operator|.
name|unregisterTaskAttempt
argument_list|(
name|taskAttemptId1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getContainerAttemptMapForNode
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getNodeIdForTaskAttempt
argument_list|(
name|taskAttemptId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|nodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|attemptToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|containerToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register taskAttempt, unregister container. TaskAttempt should also be unregistered
name|ContainerId
name|containerId201
init|=
name|constructContainerId
argument_list|(
literal|201
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|taskAttemptId201
init|=
name|constructTaskAttemptId
argument_list|(
literal|201
argument_list|)
decl_stmt|;
name|entityTracker
operator|.
name|registerTaskAttempt
argument_list|(
name|containerId201
argument_list|,
name|taskAttemptId201
argument_list|,
name|host1
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|,
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId201
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|,
name|entityTracker
operator|.
name|getNodeIdForTaskAttempt
argument_list|(
name|taskAttemptId201
argument_list|)
argument_list|)
expr_stmt|;
name|entityTracker
operator|.
name|unregisterContainer
argument_list|(
name|containerId201
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getContainerAttemptMapForNode
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host1
argument_list|,
name|port
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getNodeIdForContainer
argument_list|(
name|containerId201
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entityTracker
operator|.
name|getNodeIdForTaskAttempt
argument_list|(
name|taskAttemptId201
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|nodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|attemptToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entityTracker
operator|.
name|containerToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|entityTracker
operator|.
name|unregisterTaskAttempt
argument_list|(
name|taskAttemptId201
argument_list|)
expr_stmt|;
comment|// No errors
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testFinishableStateUpdateFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|LlapTaskCommunicatorWrapperForTest
name|wrapper
init|=
literal|null
decl_stmt|;
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
name|Condition
name|condition
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|opDone
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|LlapProtocolClientProxy
name|proxy
init|=
name|mock
argument_list|(
name|LlapProtocolClientProxy
operator|.
name|class
argument_list|,
operator|new
name|FinishableStatusUpdateTestAnswer
argument_list|(
name|lock
argument_list|,
name|condition
argument_list|,
name|opDone
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|wrapper
operator|=
operator|new
name|LlapTaskCommunicatorWrapperForTest
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
comment|// Register tasks on 2 nodes, with a dependency on vertex1 completing.
name|ContainerId
name|cId11
init|=
name|wrapper
operator|.
name|registerContainer
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskSpec
name|ts11
init|=
name|wrapper
operator|.
name|registerRunningTaskAttemptWithSourceVertex
argument_list|(
name|cId11
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cId12
init|=
name|wrapper
operator|.
name|registerContainer
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TaskSpec
name|ts12
init|=
name|wrapper
operator|.
name|registerRunningTaskAttemptWithSourceVertex
argument_list|(
name|cId12
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ContainerId
name|cId21
init|=
name|wrapper
operator|.
name|registerContainer
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TaskSpec
name|ts21
init|=
name|wrapper
operator|.
name|registerRunningTaskAttemptWithSourceVertex
argument_list|(
name|cId21
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// Send a state update for vertex1 completion. This triggers a status update to be sent out.
name|VertexStateUpdate
name|vertexStateUpdate
init|=
operator|new
name|VertexStateUpdate
argument_list|(
name|LlapTaskCommunicatorWrapperForTest
operator|.
name|VERTEX_NAME1
argument_list|,
name|VertexState
operator|.
name|SUCCEEDED
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|getTaskCommunicator
argument_list|()
operator|.
name|onVertexStateUpdated
argument_list|(
name|vertexStateUpdate
argument_list|)
expr_stmt|;
comment|// Wait for all invocations to complete.
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|opDone
operator|.
name|get
argument_list|()
condition|)
block|{
name|condition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Verify that a task kill went out for all nodes running on the specified host.
name|verify
argument_list|(
name|wrapper
operator|.
name|getTaskCommunicatorContext
argument_list|()
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskKilled
argument_list|(
name|any
argument_list|(
name|TezTaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|TaskAttemptEndReason
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wrapper
operator|.
name|getTaskCommunicatorContext
argument_list|()
argument_list|)
operator|.
name|taskKilled
argument_list|(
name|eq
argument_list|(
name|ts11
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
argument_list|,
name|eq
argument_list|(
name|TaskAttemptEndReason
operator|.
name|NODE_FAILED
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|wrapper
operator|.
name|getTaskCommunicatorContext
argument_list|()
argument_list|)
operator|.
name|taskKilled
argument_list|(
name|eq
argument_list|(
name|ts12
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
argument_list|,
name|eq
argument_list|(
name|TaskAttemptEndReason
operator|.
name|NODE_FAILED
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|getTaskCommunicator
argument_list|()
operator|.
name|sendStateUpdate
argument_list|(
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|LlapTaskCommunicatorWrapperForTest
operator|.
name|HOSTS
index|[
literal|1
index|]
argument_list|,
name|LlapTaskCommunicatorWrapperForTest
operator|.
name|RPC_PORT
argument_list|)
argument_list|,
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify no more invocations in case of success.
name|verify
argument_list|(
name|wrapper
operator|.
name|getTaskCommunicatorContext
argument_list|()
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskKilled
argument_list|(
name|any
argument_list|(
name|TezTaskAttemptID
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|TaskAttemptEndReason
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wrapper
operator|!=
literal|null
condition|)
block|{
name|wrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|FinishableStatusUpdateTestAnswer
implements|implements
name|Answer
argument_list|<
name|Void
argument_list|>
block|{
specifier|final
name|Lock
name|lock
decl_stmt|;
specifier|final
name|Condition
name|condition
decl_stmt|;
specifier|final
name|AtomicBoolean
name|opDone
decl_stmt|;
specifier|final
name|AtomicBoolean
name|successInvoked
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|failInvoked
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|FinishableStatusUpdateTestAnswer
parameter_list|(
name|Lock
name|lock
parameter_list|,
name|Condition
name|condition
parameter_list|,
name|AtomicBoolean
name|opDone
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|=
name|lock
expr_stmt|;
name|this
operator|.
name|condition
operator|=
name|condition
expr_stmt|;
name|this
operator|.
name|opDone
operator|=
name|opDone
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
block|{
name|opDone
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|successInvoked
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|failInvoked
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|invocation
operator|.
name|getMethod
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"sendSourceStateUpdate"
argument_list|)
condition|)
block|{
name|LlapNodeId
name|nodeId
init|=
operator|(
name|LlapNodeId
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
name|callback
init|=
operator|(
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|getHostname
argument_list|()
operator|.
name|equals
argument_list|(
name|LlapTaskCommunicatorWrapperForTest
operator|.
name|HOSTS
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|callback
operator|.
name|indicateError
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Force failing "
operator|+
name|LlapTaskCommunicatorWrapperForTest
operator|.
name|HOSTS
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|successInvoked
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|signalOpDoneIfBothInvoked
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Report success for all other cases.
name|callback
operator|.
name|setResponse
argument_list|(
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedResponseProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
name|failInvoked
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|signalOpDoneIfBothInvoked
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|signalOpDoneIfBothInvoked
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|failInvoked
operator|.
name|get
argument_list|()
operator|&&
name|successInvoked
operator|.
name|get
argument_list|()
condition|)
block|{
name|opDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|condition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Wrapper class which is responsible for setting up various mocks required for different tests.    */
specifier|private
specifier|static
class|class
name|LlapTaskCommunicatorWrapperForTest
block|{
specifier|static
specifier|final
name|String
index|[]
name|HOSTS
init|=
operator|new
name|String
index|[]
block|{
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|}
decl_stmt|;
specifier|static
specifier|final
name|int
name|RPC_PORT
init|=
literal|15002
decl_stmt|;
specifier|static
specifier|final
name|String
name|DAG_NAME
init|=
literal|"dagName"
decl_stmt|;
specifier|static
specifier|final
name|String
name|VERTEX_NAME1
init|=
literal|"vertexName1"
decl_stmt|;
specifier|static
specifier|final
name|String
name|VERTEX_NAME2
init|=
literal|"vertexName2"
decl_stmt|;
specifier|final
name|TaskCommunicatorContext
name|taskCommunicatorContext
init|=
name|mock
argument_list|(
name|TaskCommunicatorContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|TezDAGID
name|dagid
init|=
name|TezDAGID
operator|.
name|getInstance
argument_list|(
name|appId
argument_list|,
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|TezVertexID
name|vertexId1
init|=
name|TezVertexID
operator|.
name|getInstance
argument_list|(
name|dagid
argument_list|,
literal|300
argument_list|)
decl_stmt|;
specifier|final
name|TezVertexID
name|vertexId2
init|=
name|TezVertexID
operator|.
name|getInstance
argument_list|(
name|dagid
argument_list|,
literal|301
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|UserPayload
name|userPayload
init|=
name|TezUtils
operator|.
name|createUserPayloadFromConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|LlapTaskCommunicatorForTest
name|taskCommunicator
decl_stmt|;
specifier|public
name|LlapTaskCommunicatorWrapperForTest
parameter_list|(
name|LlapProtocolClientProxy
name|llapProxy
parameter_list|)
throws|throws
name|Exception
block|{
name|doReturn
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|when
argument_list|(
name|taskCommunicatorContext
argument_list|)
operator|.
name|getApplicationAttemptId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|Credentials
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|taskCommunicatorContext
argument_list|)
operator|.
name|getCredentials
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|userPayload
argument_list|)
operator|.
name|when
argument_list|(
name|taskCommunicatorContext
argument_list|)
operator|.
name|getInitialUserPayload
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|taskCommunicatorContext
argument_list|)
operator|.
name|getCurrentAppIdentifier
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|taskCommunicatorContext
argument_list|)
operator|.
name|getInputVertexNames
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskCommunicator
operator|=
operator|new
name|LlapTaskCommunicatorForTest
argument_list|(
name|taskCommunicatorContext
argument_list|,
name|llapProxy
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskCommunicator
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|this
operator|.
name|taskCommunicator
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|taskCommunicator
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|TaskCommunicatorContext
name|getTaskCommunicatorContext
parameter_list|()
block|{
return|return
name|taskCommunicatorContext
return|;
block|}
name|LlapTaskCommunicatorForTest
name|getTaskCommunicator
parameter_list|()
block|{
return|return
name|taskCommunicator
return|;
block|}
name|ContainerId
name|registerContainer
parameter_list|(
name|int
name|containerIdx
parameter_list|,
name|int
name|hostIdx
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
name|containerIdx
argument_list|)
decl_stmt|;
name|taskCommunicator
operator|.
name|registerRunningContainer
argument_list|(
name|containerId
argument_list|,
name|HOSTS
index|[
name|hostIdx
index|]
argument_list|,
name|RPC_PORT
argument_list|)
expr_stmt|;
return|return
name|containerId
return|;
block|}
comment|/*     Sets up a TaskSpec which has vertex1 as it's input, and tasks belonging to vertex2      */
name|TaskSpec
name|registerRunningTaskAttemptWithSourceVertex
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|taskIdx
parameter_list|)
block|{
name|TaskSpec
name|taskSpec
init|=
name|createBaseTaskSpec
argument_list|(
name|VERTEX_NAME2
argument_list|,
name|vertexId2
argument_list|,
name|taskIdx
argument_list|)
decl_stmt|;
name|InputSpec
name|inputSpec
init|=
operator|new
name|InputSpec
argument_list|(
name|VERTEX_NAME1
argument_list|,
name|InputDescriptor
operator|.
name|create
argument_list|(
literal|"fakeInputClassName"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|InputSpec
argument_list|>
name|inputs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|inputSpec
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|inputs
argument_list|)
operator|.
name|when
argument_list|(
name|taskSpec
argument_list|)
operator|.
name|getInputs
argument_list|()
expr_stmt|;
name|taskCommunicator
operator|.
name|registerRunningTaskAttempt
argument_list|(
name|containerId
argument_list|,
name|taskSpec
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|taskSpec
return|;
block|}
comment|/*     Sets up a TaskSpec with no inputs, and tasks belonging to vertex1      */
name|TaskSpec
name|registerRunningTaskAttempt
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|taskIdx
parameter_list|)
block|{
name|TaskSpec
name|taskSpec
init|=
name|createBaseTaskSpec
argument_list|(
name|VERTEX_NAME1
argument_list|,
name|vertexId1
argument_list|,
name|taskIdx
argument_list|)
decl_stmt|;
name|taskCommunicator
operator|.
name|registerRunningTaskAttempt
argument_list|(
name|containerId
argument_list|,
name|taskSpec
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
argument_list|,
operator|new
name|Credentials
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|taskSpec
return|;
block|}
specifier|private
name|TaskSpec
name|createBaseTaskSpec
parameter_list|(
name|String
name|vertexName
parameter_list|,
name|TezVertexID
name|vertexId
parameter_list|,
name|int
name|taskIdx
parameter_list|)
block|{
name|TaskSpec
name|taskSpec
init|=
name|mock
argument_list|(
name|TaskSpec
operator|.
name|class
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|taskAttemptId
init|=
name|TezTaskAttemptID
operator|.
name|getInstance
argument_list|(
name|TezTaskID
operator|.
name|getInstance
argument_list|(
name|vertexId
argument_list|,
name|taskIdx
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|taskAttemptId
argument_list|)
operator|.
name|when
argument_list|(
name|taskSpec
argument_list|)
operator|.
name|getTaskAttemptID
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|DAG_NAME
argument_list|)
operator|.
name|when
argument_list|(
name|taskSpec
argument_list|)
operator|.
name|getDAGName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|vertexName
argument_list|)
operator|.
name|when
argument_list|(
name|taskSpec
argument_list|)
operator|.
name|getVertexName
argument_list|()
expr_stmt|;
return|return
name|taskSpec
return|;
block|}
block|}
specifier|private
name|ContainerId
name|constructContainerId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|id
argument_list|)
operator|.
name|when
argument_list|(
name|containerId
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
operator|(
name|long
operator|)
name|id
argument_list|)
operator|.
name|when
argument_list|(
name|containerId
argument_list|)
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
return|return
name|containerId
return|;
block|}
specifier|private
name|TezTaskAttemptID
name|constructTaskAttemptId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|TezTaskAttemptID
name|taskAttemptId
init|=
name|mock
argument_list|(
name|TezTaskAttemptID
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|id
argument_list|)
operator|.
name|when
argument_list|(
name|taskAttemptId
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
return|return
name|taskAttemptId
return|;
block|}
specifier|private
specifier|static
class|class
name|LlapTaskCommunicatorForTest
extends|extends
name|LlapTaskCommunicator
block|{
specifier|private
specifier|final
name|LlapProtocolClientProxy
name|llapProxy
decl_stmt|;
specifier|public
name|LlapTaskCommunicatorForTest
parameter_list|(
name|TaskCommunicatorContext
name|taskCommunicatorContext
parameter_list|)
block|{
name|this
argument_list|(
name|taskCommunicatorContext
argument_list|,
name|mock
argument_list|(
name|LlapProtocolClientProxy
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LlapTaskCommunicatorForTest
parameter_list|(
name|TaskCommunicatorContext
name|taskCommunicatorContext
parameter_list|,
name|LlapProtocolClientProxy
name|llapProxy
parameter_list|)
block|{
name|super
argument_list|(
name|taskCommunicatorContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|llapProxy
operator|=
name|llapProxy
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startRpcServer
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|protected
name|LlapProtocolClientProxy
name|createLlapProtocolClientProxy
parameter_list|(
name|int
name|numThreads
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|llapProxy
return|;
block|}
annotation|@
name|Override
specifier|public
name|InetSocketAddress
name|getAddress
parameter_list|()
block|{
return|return
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"localhost"
argument_list|,
literal|15001
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

