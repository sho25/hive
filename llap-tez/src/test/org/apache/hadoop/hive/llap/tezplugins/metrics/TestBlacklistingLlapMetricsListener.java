begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SetCapacityRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SetCapacityResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|impl
operator|.
name|LlapManagementProtocolClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapZookeeperRegistryImpl
operator|.
name|ConfigChangeLockResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|metrics
operator|.
name|LlapMetricsCollector
operator|.
name|LlapMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|LlapServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|LlapServiceInstanceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
operator|.
name|initMocks
import|;
end_import

begin_comment
comment|/**  * Test class to test BlacklistingLlapMetricsListener object.  */
end_comment

begin_class
specifier|public
class|class
name|TestBlacklistingLlapMetricsListener
block|{
specifier|private
specifier|static
specifier|final
name|SetCapacityResponseProto
name|TEST_RESPONSE
init|=
name|SetCapacityResponseProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
specifier|private
name|BlacklistingLlapMetricsListener
name|listener
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|LlapRegistryService
name|mockRegistry
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|LlapManagementProtocolClientImplFactory
name|mockClientFactory
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|LlapManagementProtocolClientImpl
name|mockClient
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|LlapServiceInstanceSet
name|mockInstanceSet
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|mockRegistry
operator|.
name|getInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockInstanceSet
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRegistry
operator|.
name|lockForConfigChange
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConfigChangeLockResult
argument_list|(
literal|true
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockClientFactory
operator|.
name|create
argument_list|(
name|any
argument_list|(
name|LlapServiceInstance
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockClient
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockClient
operator|.
name|setCapacity
argument_list|(
name|any
argument_list|(
name|RpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SetCapacityRequestProto
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_RESPONSE
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|BlacklistingLlapMetricsListener
argument_list|()
expr_stmt|;
name|listener
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|mockRegistry
argument_list|,
name|mockClientFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
specifier|public
name|void
name|testBlacklist
parameter_list|()
throws|throws
name|ServiceException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LlapMetrics
argument_list|>
name|data
init|=
name|generateClusterMetrics
argument_list|()
decl_stmt|;
name|listener
operator|.
name|newClusterMetrics
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// Then
name|ArgumentCaptor
argument_list|<
name|String
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockClient
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|any
argument_list|(
name|RpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SetCapacityRequestProto
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockInstanceSet
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getInstance
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|argumentCaptor
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
specifier|public
name|void
name|testNotEnoughCapacity
parameter_list|()
throws|throws
name|ServiceException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LlapMetrics
argument_list|>
name|data
init|=
name|generateClusterMetrics
argument_list|()
decl_stmt|;
name|data
operator|.
name|get
argument_list|(
literal|"0"
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|put
argument_list|(
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorNumExecutorsAvailableAverage
operator|.
name|name
argument_list|()
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|listener
operator|.
name|newClusterMetrics
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockClient
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|any
argument_list|(
name|RpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SetCapacityRequestProto
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
specifier|public
name|void
name|testNoOutstandingResponseTime
parameter_list|()
throws|throws
name|ServiceException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LlapMetrics
argument_list|>
name|data
init|=
name|generateClusterMetrics
argument_list|()
decl_stmt|;
name|data
operator|.
name|get
argument_list|(
literal|"3"
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|put
argument_list|(
name|LlapDaemonExecutorInfo
operator|.
name|AverageResponseTime
operator|.
name|name
argument_list|()
argument_list|,
literal|1500L
argument_list|)
expr_stmt|;
name|listener
operator|.
name|newClusterMetrics
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockClient
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|any
argument_list|(
name|RpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SetCapacityRequestProto
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
specifier|public
name|void
name|testAlreadyBlacklisted
parameter_list|()
throws|throws
name|ServiceException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LlapMetrics
argument_list|>
name|data
init|=
name|generateClusterMetrics
argument_list|()
decl_stmt|;
name|data
operator|.
name|get
argument_list|(
literal|"3"
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|put
argument_list|(
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorNumExecutors
operator|.
name|name
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|listener
operator|.
name|newClusterMetrics
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockClient
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|any
argument_list|(
name|RpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SetCapacityRequestProto
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
specifier|public
name|void
name|testCheckTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LlapMetrics
argument_list|>
name|data
init|=
name|generateClusterMetrics
argument_list|()
decl_stmt|;
comment|// Return that we can not yet blacklist a node
name|long
name|targetTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
decl_stmt|;
name|when
argument_list|(
name|mockRegistry
operator|.
name|lockForConfigChange
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConfigChangeLockResult
argument_list|(
literal|false
argument_list|,
name|targetTime
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|newClusterMetrics
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockClient
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|any
argument_list|(
name|RpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SetCapacityRequestProto
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|targetTime
argument_list|,
name|listener
operator|.
name|nextCheckTime
argument_list|)
expr_stmt|;
comment|// reset mock stuff
name|reset
argument_list|(
name|mockRegistry
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRegistry
operator|.
name|getInstances
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockInstanceSet
argument_list|)
expr_stmt|;
comment|// We will not try to set the capacity, or even lock until the time is reached
name|listener
operator|.
name|newClusterMetrics
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockRegistry
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|lockForConfigChange
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockClient
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|any
argument_list|(
name|RpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SetCapacityRequestProto
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// If the time is reached, then we lock and blacklist
name|listener
operator|.
name|nextCheckTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|1
expr_stmt|;
name|when
argument_list|(
name|mockRegistry
operator|.
name|lockForConfigChange
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConfigChangeLockResult
argument_list|(
literal|true
argument_list|,
name|targetTime
argument_list|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|newClusterMetrics
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|String
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|mockClient
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setCapacity
argument_list|(
name|any
argument_list|(
name|RpcController
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SetCapacityRequestProto
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockInstanceSet
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getInstance
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|argumentCaptor
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|LlapMetrics
argument_list|>
name|generateClusterMetrics
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|LlapMetrics
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"0"
argument_list|,
name|generateSingleNodeMetrics
argument_list|(
literal|3000
argument_list|,
literal|1000
argument_list|,
literal|7
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
name|generateSingleNodeMetrics
argument_list|(
literal|3000
argument_list|,
literal|1000
argument_list|,
literal|7
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
name|generateSingleNodeMetrics
argument_list|(
literal|3000
argument_list|,
literal|1000
argument_list|,
literal|7
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
name|generateSingleNodeMetrics
argument_list|(
literal|3000
argument_list|,
literal|2000
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|LlapMetrics
name|generateSingleNodeMetrics
parameter_list|(
name|long
name|totalRequests
parameter_list|,
name|long
name|averageResponseTime
parameter_list|,
name|long
name|availableExecutors
parameter_list|,
name|long
name|allExecutors
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|metricsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|metricsMap
operator|.
name|put
argument_list|(
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorTotalRequestsHandled
operator|.
name|name
argument_list|()
argument_list|,
name|totalRequests
argument_list|)
expr_stmt|;
name|metricsMap
operator|.
name|put
argument_list|(
name|LlapDaemonExecutorInfo
operator|.
name|AverageResponseTime
operator|.
name|name
argument_list|()
argument_list|,
name|averageResponseTime
argument_list|)
expr_stmt|;
name|metricsMap
operator|.
name|put
argument_list|(
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorNumExecutorsAvailableAverage
operator|.
name|name
argument_list|()
argument_list|,
name|availableExecutors
argument_list|)
expr_stmt|;
name|metricsMap
operator|.
name|put
argument_list|(
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorNumExecutors
operator|.
name|name
argument_list|()
argument_list|,
name|allExecutors
argument_list|)
expr_stmt|;
return|return
operator|new
name|LlapMetrics
argument_list|(
literal|0
argument_list|,
name|metricsMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

