begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezDAGID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezVertexID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezTaskID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|LlapServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|LlapServiceInstanceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|InactiveServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapFixedRegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|testhelpers
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|LlapTaskSchedulerService
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|LlapTaskSchedulerService
operator|.
name|TaskInfo
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|helpers
operator|.
name|MonotonicClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|TezUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|UserPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezTaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|TaskAttemptEndReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|TaskSchedulerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
specifier|public
class|class
name|TestLlapTaskSchedulerService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLlapTaskSchedulerService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOST1
init|=
literal|"host1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOST2
init|=
literal|"host2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOST3
init|=
literal|"host3"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOST4
init|=
literal|"host4"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testSimpleLocalAllocation
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hosts1
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsPerHost
operator|.
name|get
argument_list|(
name|HOST1
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testGuaranteedScheduling
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
comment|// Schedule a task - it should get the only duck; the 2nd one at the same pri doesn't get one.
comment|// When the first one finishes, the duck goes to the 2nd, and then becomes unused.
try|try
block|{
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|,
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|,
name|clientCookie2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
literal|null
argument_list|,
name|priority
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ti
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|ASSIGNED
argument_list|,
name|ti
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
literal|null
argument_list|,
name|priority
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti2
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task2
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testGuaranteedTransfer
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
comment|// Schedule low pri first. When high pri is scheduled, it takes away the duck from the
comment|// low pri task. When the high pri finishes, low pri gets the duck back.
try|try
block|{
name|Priority
name|highPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|,
name|lowPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|,
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
literal|null
argument_list|,
name|lowPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti1
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|ASSIGNED
argument_list|,
name|ti1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
literal|null
argument_list|,
name|highPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti2
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task2
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testChangeGuaranteedTotal
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
comment|// Schedule 3 tasks. Give out two ducks - two higher pri tasks get them. Give out 2 more
comment|// - the last task gets it and one duck is unused. Give out 2 more - goes to unused.
comment|// Then revoke similarly in steps (1, 4, 1), with the opposite effect.
try|try
block|{
name|Priority
name|highPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|,
name|lowPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|,
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|,
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
literal|null
argument_list|,
name|highPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
literal|null
argument_list|,
name|lowPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
literal|null
argument_list|,
name|lowPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti1
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task1
argument_list|)
decl_stmt|,
name|ti2
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task2
argument_list|)
decl_stmt|,
name|ti3
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task3
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
operator|||
name|ti2
operator|.
name|isGuaranteed
argument_list|()
operator|||
name|ti3
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// This particular test doesn't care which of the lower pri tasks gets the duck.
name|TaskInfo
name|ti23High
init|=
name|ti2
operator|.
name|isGuaranteed
argument_list|()
condition|?
name|ti2
else|:
name|ti3
decl_stmt|,
name|ti23Low
init|=
operator|(
name|ti2
operator|==
name|ti23High
operator|)
condition|?
name|ti3
else|:
name|ti2
decl_stmt|;
name|assertTrue
argument_list|(
name|ti23High
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti23Low
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti23High
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti23Low
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti23High
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti23Low
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti23High
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti23Low
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti23High
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti23Low
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti23High
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti23Low
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task2
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task3
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
specifier|public
name|void
name|testConcurrentUpdates
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
comment|// Test 4 variations of callbacks. 2 increases/2 revokes - do not update the same task again;
comment|// Then, increase + decrease and decrease + increase, the 2nd call coming after the message is sent;
comment|// the message callback should undo the change.
try|try
block|{
name|Priority
name|highPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|,
name|lowPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|,
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
literal|null
argument_list|,
name|highPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
literal|null
argument_list|,
name|lowPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti1
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task1
argument_list|)
decl_stmt|,
name|ti2
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
operator|||
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Boring scenario #1 - two concurrent increases.
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Not updated yet.
name|assertFalse
argument_list|(
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// We are now "sending" a message... update again, "return" both callbacks.
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti2
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Boring scenario #2 - two concurrent revokes. Same as above.
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti2
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Not updated yet.
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti2
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Concurrent increase and revocation, then another increase - after the message is sent.
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Not updated yet.
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|assertNoMessagesSent
argument_list|()
expr_stmt|;
comment|// We are revoking from an updating task.
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// We should send a message to undo what we just did.
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|assertNoMessagesSent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|assertNoMessagesSent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task2
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testUpdateOnFinishingTask
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
comment|// The update fails because the task has terminated on the node.
try|try
block|{
name|Priority
name|highPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|,
name|lowPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|,
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
literal|null
argument_list|,
name|highPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
literal|null
argument_list|,
name|lowPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti1
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task1
argument_list|)
decl_stmt|,
name|ti2
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task2
argument_list|)
decl_stmt|;
comment|// Concurrent increase and termination, increase fails.
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Not updated yet.
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// We must have the duck still; it should just go to the other task.
name|assertTrue
argument_list|(
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti2
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task2
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
comment|// Same; with the termination after the failed update, we should maintain the correct count.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConcurrentUpdateWithError
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
comment|// The update has failed but the state has changed since then - no retry needed.
try|try
block|{
name|Priority
name|highPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
literal|null
argument_list|,
name|highPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti1
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Concurrent increase and revocation, increase fails - no revocation is needed.
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Not updated yet.
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|assertNoMessagesSent
argument_list|()
expr_stmt|;
comment|// We are revoking from an updating task.
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|assertNoMessagesSent
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testUpdateWithError
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
comment|// The update has failed; we'd try with another candidate first, but only at the same priority.
try|try
block|{
name|Priority
name|highPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|,
name|lowPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|,
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|,
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
literal|null
argument_list|,
name|highPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
literal|null
argument_list|,
name|highPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti1
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task1
argument_list|)
decl_stmt|,
name|ti2
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
operator|||
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TaskInfo
name|tiHigher
init|=
name|ti1
operator|.
name|isGuaranteed
argument_list|()
condition|?
name|ti1
else|:
name|ti2
decl_stmt|,
name|tiLower
init|=
operator|(
name|tiHigher
operator|==
name|ti1
operator|)
condition|?
name|ti2
else|:
name|ti1
decl_stmt|;
name|assertTrue
argument_list|(
name|tiHigher
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tiHigher
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Not updated yet.
name|assertTrue
argument_list|(
name|tiHigher
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|tiHigher
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Update has failed. We should try task2.
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tiHigher
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tiHigher
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tiHigher
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tiLower
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tiLower
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tiLower
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fail the 2nd update too to get rid of the duck for the next test.
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|tiLower
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|assertNoMessagesSent
argument_list|()
expr_stmt|;
comment|// Now run a lower priority task.
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task2
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
literal|null
argument_list|,
name|lowPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti3
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task3
argument_list|)
decl_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Update has failed. We won't try a low pri task.
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti3
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti3
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConcurrentUpdatesBeforeMessage
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
comment|// 2 more variations of callbacks; increase + decrease and decrease + increase, the 2nd call coming
comment|// before the message is sent; no message should ever be sent.
try|try
block|{
name|Priority
name|highPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|,
name|lowPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|,
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
literal|null
argument_list|,
name|highPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
literal|null
argument_list|,
name|lowPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti1
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task1
argument_list|)
decl_stmt|,
name|ti2
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
operator|||
name|ti2
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Concurrent increase and revocation - before the message is sent.
name|tsWrapper
operator|.
name|ts
operator|.
name|clearTestCounts
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|setDelayCheckAndSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
name|updateThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|"test-update-thread"
argument_list|)
decl_stmt|;
name|updateThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// This should eventually hang in the delay code.
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForCheckAndSendCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// From the background thread.
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// This won't go into checkAndSend.
name|tsWrapper
operator|.
name|ts
operator|.
name|assertNoMessagesSent
argument_list|()
expr_stmt|;
comment|// Release the background thread.
name|tsWrapper
operator|.
name|ts
operator|.
name|setDelayCheckAndSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|updateThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|assertNoMessagesSent
argument_list|()
expr_stmt|;
comment|// No message is needed.
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
comment|// Concurrent revocation and increase - before the message is sent.
comment|// First, actually give it a duck.
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|clearTestCounts
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
operator|&&
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|setDelayCheckAndSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
literal|"test-update-thread"
argument_list|)
expr_stmt|;
name|updateThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// This should eventually hang in the delay code.
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForCheckAndSendCall
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// This won't go into checkAndSend.
name|tsWrapper
operator|.
name|ts
operator|.
name|assertNoMessagesSent
argument_list|()
expr_stmt|;
comment|// Release the background thread.
name|tsWrapper
operator|.
name|ts
operator|.
name|setDelayCheckAndSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|updateThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|assertNoMessagesSent
argument_list|()
expr_stmt|;
comment|// No message is needed.
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task2
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testHeartbeatInconsistency
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
comment|// Guaranteed flag is inconsistent based on heartbeat - another message should be send.
try|try
block|{
name|Priority
name|highPri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|updateGuaranteedCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
literal|null
argument_list|,
name|highPri
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TaskInfo
name|ti1
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|getTaskInfo
argument_list|(
name|task1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Heartbeat indicates task has a duck - this must be reverted.
name|tsWrapper
operator|.
name|ts
operator|.
name|taskInfoUpdated
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|waitForMessagesSent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ti1
operator|.
name|isUpdateInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|isGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|ts
operator|.
name|handleUpdateResult
argument_list|(
name|ti1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ti1
operator|.
name|getLastSetGuaranteed
argument_list|()
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
name|TaskAttemptEndReason
operator|.
name|CONTAINER_EXITED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|getUnusedGuaranteedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testSimpleNoLocalityAllocation
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|()
decl_stmt|;
try|try
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
literal|null
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitTotalTaskAllocations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testPreemption
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Priority
name|priority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|TezTaskAttemptID
name|task4
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie4
init|=
literal|"cookie4"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hosts
argument_list|,
name|priority2
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hosts
argument_list|,
name|priority2
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hosts
argument_list|,
name|priority2
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
operator|==
literal|2
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task4
argument_list|,
name|hosts
argument_list|,
name|priority1
argument_list|,
name|clientCookie4
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numPreemptedTasks
operator|==
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task2
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|INTERNAL_PREEMPTION
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|3
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task4
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie4
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testNodeDisabled
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|10000l
argument_list|)
decl_stmt|;
try|try
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hosts1
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numNonLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|resetAppCallback
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|clock
operator|.
name|setTime
argument_list|(
literal|10000l
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|rejectExecution
argument_list|(
name|task1
argument_list|)
expr_stmt|;
comment|// Verify that the node is blacklisted
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numRejectedTasks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|instanceToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LlapTaskSchedulerService
operator|.
name|NodeInfo
name|disabledNodeInfo
init|=
name|tsWrapper
operator|.
name|ts
operator|.
name|disabledNodesQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|disabledNodeInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HOST1
argument_list|,
name|disabledNodeInfo
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|10000l
operator|)
argument_list|,
name|disabledNodeInfo
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|10000l
operator|+
literal|10000l
operator|)
argument_list|,
name|disabledNodeInfo
operator|.
name|expireTimeMillis
argument_list|)
expr_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hosts1
argument_list|,
name|priority1
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|2
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie2
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numNonLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testNodeReEnabled
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// Based on actual timing.
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|1000l
argument_list|)
decl_stmt|;
try|try
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|String
index|[]
name|hosts2
init|=
operator|new
name|String
index|[]
block|{
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hosts3
init|=
operator|new
name|String
index|[]
block|{
name|HOST3
block|}
decl_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie3
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hosts1
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hosts2
argument_list|,
name|priority1
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hosts3
argument_list|,
name|priority1
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|3
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|resetAppCallback
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|rejectExecution
argument_list|(
name|task1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|rejectExecution
argument_list|(
name|task2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|rejectExecution
argument_list|(
name|task3
argument_list|)
expr_stmt|;
comment|// Verify that the node is blacklisted
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numRejectedTasks
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|instanceToNodeMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|disabledNodesQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TezTaskAttemptID
name|task4
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie4
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|TezTaskAttemptID
name|task5
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie5
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|TezTaskAttemptID
name|task6
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie6
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task4
argument_list|,
name|hosts1
argument_list|,
name|priority1
argument_list|,
name|clientCookie4
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task5
argument_list|,
name|hosts2
argument_list|,
name|priority1
argument_list|,
name|clientCookie5
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task6
argument_list|,
name|hosts3
argument_list|,
name|priority1
argument_list|,
name|clientCookie6
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|6
condition|)
block|{
break|break;
block|}
block|}
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
comment|// which affects the locality matching
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testForceLocalityTest1
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// 2 hosts. 2 per host. 5 requests at the same priority.
comment|// First 3 on host1, Next at host2, Last with no host.
comment|// Third request on host1 should not be allocated immediately.
name|forceLocalityTest1
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testNoForceLocalityCounterTest1
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// 2 hosts. 2 per host. 5 requests at the same priority.
comment|// First 3 on host1, Next at host2, Last with no host.
comment|// Third should allocate on host2, 4th on host2, 5th will wait.
name|forceLocalityTest1
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|forceLocalityTest1
parameter_list|(
name|boolean
name|forceLocality
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|String
index|[]
name|hostsH2
init|=
operator|new
name|String
index|[]
block|{
name|HOST2
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|(
name|forceLocality
condition|?
operator|-
literal|1l
else|:
literal|0l
operator|)
argument_list|)
decl_stmt|;
try|try
block|{
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|TezTaskAttemptID
name|task4
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie4
init|=
literal|"cookie4"
decl_stmt|;
name|TezTaskAttemptID
name|task5
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie5
init|=
literal|"cookie5"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//H1 - should allocate
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
comment|//H1 - should allocate
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
comment|//H1 - no capacity if force, should allocate otherwise
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
comment|//H2 - should allocate
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task4
argument_list|,
name|hostsH2
argument_list|,
name|priority1
argument_list|,
name|clientCookie4
argument_list|)
expr_stmt|;
comment|//No location - should allocate if force, no capacity otherwise
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task5
argument_list|,
literal|null
argument_list|,
name|priority1
argument_list|,
name|clientCookie5
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|4
condition|)
block|{
break|break;
block|}
block|}
comment|// Verify no preemption requests - since everything is at the same priority
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceLocality
condition|)
block|{
comment|// task3 not allocated
name|assertEquals
argument_list|(
name|task4
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task5
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|task3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task4
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Complete one task on host1.
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// Try scheduling again.
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|5
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|argumentCaptor
operator|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceLocality
condition|)
block|{
name|assertEquals
argument_list|(
name|task3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|task5
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testForcedLocalityUnknownHost
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hostsKnown
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|String
index|[]
name|hostsUnknown
init|=
operator|new
name|String
index|[]
block|{
name|HOST2
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hostsKnown
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1l
argument_list|)
decl_stmt|;
try|try
block|{
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Should allocate since H2 is not known.
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsUnknown
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsKnown
argument_list|,
name|priority1
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|2
condition|)
block|{
break|break;
block|}
block|}
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testHostPreferenceUnknownAndNotSpecified
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hostsKnown
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsUnknown
init|=
operator|new
name|String
index|[]
block|{
name|HOST3
block|}
decl_stmt|;
name|String
index|[]
name|noHosts
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hostsKnown
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1l
argument_list|)
decl_stmt|;
try|try
block|{
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|TezTaskAttemptID
name|task4
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie4
init|=
literal|"cookie4"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsKnown
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsKnown
argument_list|,
name|priority1
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hostsUnknown
argument_list|,
name|priority1
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task4
argument_list|,
name|noHosts
argument_list|,
name|priority1
argument_list|,
name|clientCookie4
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|4
condition|)
block|{
break|break;
block|}
block|}
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|argumentCaptor2
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|argumentCaptor2
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task4
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1st task requested host1, got host1
name|assertEquals
argument_list|(
name|HOST1
argument_list|,
name|argumentCaptor2
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2nd task requested host1, got host1
name|assertEquals
argument_list|(
name|HOST1
argument_list|,
name|argumentCaptor2
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3rd task requested unknown host, got host2 since host1 is full and only host2 is left in random pool
name|assertEquals
argument_list|(
name|HOST2
argument_list|,
name|argumentCaptor2
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4rd task provided no location preference, got host2 since host1 is full and only host2 is left in random pool
name|assertEquals
argument_list|(
name|HOST2
argument_list|,
name|argumentCaptor2
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numNonLocalAllocations
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testHostPreferenceMissesConsistentRollover
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hostsKnown
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|,
name|HOST3
block|}
decl_stmt|;
name|String
index|[]
name|hostsLive
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|,
name|HOST3
block|}
decl_stmt|;
name|String
index|[]
name|hostsH2
init|=
operator|new
name|String
index|[]
block|{
name|HOST2
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hostsKnown
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0l
argument_list|,
literal|false
argument_list|,
name|hostsLive
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsH2
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsH2
argument_list|,
name|priority1
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hostsH2
argument_list|,
name|priority1
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|3
condition|)
block|{
break|break;
block|}
block|}
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|argumentCaptor2
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|argumentCaptor2
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1st task requested host2, got host2
name|assertEquals
argument_list|(
name|HOST2
argument_list|,
name|argumentCaptor2
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2nd task requested host2, got host3 as host2 is full
name|assertEquals
argument_list|(
name|HOST3
argument_list|,
name|argumentCaptor2
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3rd task requested host2, got host1 as host2 and host3 are full
name|assertEquals
argument_list|(
name|HOST1
argument_list|,
name|argumentCaptor2
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockServiceInstanceSet
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getAllInstancesOrdered
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numNonLocalAllocations
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testHostPreferenceMissesConsistentPartialAlive
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hostsKnown
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|,
name|HOST3
block|,
name|HOST4
block|}
decl_stmt|;
name|String
index|[]
name|hostsLive
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|,
literal|null
block|,
name|HOST4
block|}
decl_stmt|;
comment|// host3 dead before scheduling
name|String
index|[]
name|hostsH2
init|=
operator|new
name|String
index|[]
block|{
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH3
init|=
operator|new
name|String
index|[]
block|{
name|HOST3
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hostsKnown
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0l
argument_list|,
literal|false
argument_list|,
name|hostsLive
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsH2
argument_list|,
name|priority1
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsH2
argument_list|,
name|priority1
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hostsH3
argument_list|,
name|priority1
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
literal|3
condition|)
block|{
break|break;
block|}
block|}
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|argumentCaptor2
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|argumentCaptor2
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1st task requested host2, got host2
name|assertEquals
argument_list|(
name|HOST2
argument_list|,
name|argumentCaptor2
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2nd task requested host2, got host4 since host3 is dead and host2 is full
name|assertEquals
argument_list|(
name|HOST4
argument_list|,
name|argumentCaptor2
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3rd task requested host3, got host1 since host3 is dead and host4 is full
name|assertEquals
argument_list|(
name|HOST1
argument_list|,
name|argumentCaptor2
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockServiceInstanceSet
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getAllInstancesOrdered
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsNoLocalityRequest
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numNonLocalAllocations
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testForcedLocalityPreemption
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Priority
name|priority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
operator|-
literal|1l
argument_list|)
decl_stmt|;
comment|// Fill up host1 with p2 tasks.
comment|// Leave host2 empty
comment|// Try running p1 task on host1 - should preempt
try|try
block|{
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|TezTaskAttemptID
name|task4
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie4
init|=
literal|"cookie4"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
comment|// This request at a lower priority should not affect anything.
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// Allocate t4 at higher priority. t3 should not be allocated,
comment|// and a preemption should be attempted on host1, despite host2 having available capacity
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task4
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie4
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numPreemptedTasks
operator|==
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|INTERNAL_PREEMPTION
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task4
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie4
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testPreemptionChoiceTimeOrdering
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Priority
name|priority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1l
argument_list|)
decl_stmt|;
try|try
block|{
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|cArgCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Request task1
name|tsWrapper
operator|.
name|getClock
argument_list|()
operator|.
name|setTime
argument_list|(
literal|10000l
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|cArgCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|t1Cid
init|=
name|cArgCaptor
operator|.
name|getValue
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// Move clock backwards (so that t1 allocation is after t2 allocation)
comment|// Request task2 (task1 already started at previously set time)
name|tsWrapper
operator|.
name|getClock
argument_list|()
operator|.
name|setTime
argument_list|(
name|tsWrapper
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
literal|1000
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|cArgCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// Move clock forward, and request a task at p=1
name|tsWrapper
operator|.
name|getClock
argument_list|()
operator|.
name|setTime
argument_list|(
name|tsWrapper
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|2000
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numPreemptedTasks
operator|==
literal|1
condition|)
block|{
break|break;
block|}
block|}
comment|// Ensure task1 is preempted based on time (match it's allocated containerId)
name|ArgumentCaptor
argument_list|<
name|ContainerId
argument_list|>
name|cIdArgCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|cIdArgCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|t1Cid
argument_list|,
name|cIdArgCaptor
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testForcedLocalityMultiplePreemptionsSameHost1
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Priority
name|priority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1l
argument_list|)
decl_stmt|;
comment|// Fill up host1 with p2 tasks.
comment|// Leave host2 empty
comment|// Try running p1 task on host1 - should preempt
comment|// Await preemption request.
comment|// Try running another p1 task on host1 - should preempt
comment|// Await preemption request.
try|try
block|{
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|TezTaskAttemptID
name|task4
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie4
init|=
literal|"cookie4"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|cArgCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|cArgCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cArgCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|t1CId
init|=
name|cArgCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// At this point. 2 tasks running - both at priority 2.
comment|// Try running a priority 1 task
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numPreemptedTasks
operator|==
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|ArgumentCaptor
argument_list|<
name|ContainerId
argument_list|>
name|cIdArgCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|cIdArgCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
comment|// Determin which task has been preempted. Normally task2 would be preempted based on it starting
comment|// later. However - both may have the same start time, so either could be picked.
name|Object
name|deallocatedTask1
decl_stmt|;
comment|// De-allocated now
name|Object
name|deallocatedTask2
decl_stmt|;
comment|// Will be de-allocated later.
if|if
condition|(
name|cIdArgCaptor
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|t1CId
argument_list|)
condition|)
block|{
name|deallocatedTask1
operator|=
name|task1
expr_stmt|;
name|deallocatedTask2
operator|=
name|task2
expr_stmt|;
block|}
else|else
block|{
name|deallocatedTask1
operator|=
name|task2
expr_stmt|;
name|deallocatedTask2
operator|=
name|task1
expr_stmt|;
block|}
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|deallocatedTask1
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|INTERNAL_PREEMPTION
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task3
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie3
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// At this point. one p=2 task and task3(p=1) running. Ask for another p1 task.
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task4
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie4
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numPreemptedTasks
operator|==
literal|2
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|deallocatedTask2
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|INTERNAL_PREEMPTION
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task4
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie4
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testForcedLocalityMultiplePreemptionsSameHost2
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Priority
name|priority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1l
argument_list|)
decl_stmt|;
comment|// Fill up host1 with p2 tasks.
comment|// Leave host2 empty
comment|// Try running both p1 tasks on host1.
comment|// R: Single preemption triggered, followed by allocation, followed by another preemption.
comment|//
try|try
block|{
name|TezTaskAttemptID
name|task1
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie1
init|=
literal|"cookie1"
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie2
init|=
literal|"cookie2"
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie3
init|=
literal|"cookie3"
decl_stmt|;
name|TezTaskAttemptID
name|task4
init|=
name|TestTaskSchedulerServiceWrapper
operator|.
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie4
init|=
literal|"cookie4"
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task1
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task2
argument_list|,
name|hostsH1
argument_list|,
name|priority2
argument_list|,
name|clientCookie2
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|cArgCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|cArgCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cArgCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|t1CId
init|=
name|cArgCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// At this point. 2 tasks running - both at priority 2.
comment|// Try running a priority 1 task
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task3
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie3
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|task4
argument_list|,
name|hostsH1
argument_list|,
name|priority1
argument_list|,
name|clientCookie4
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numPreemptedTasks
operator|==
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|ArgumentCaptor
argument_list|<
name|ContainerId
argument_list|>
name|cIdArgCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|cIdArgCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
comment|// Determin which task has been preempted. Normally task2 would be preempted based on it starting
comment|// later. However - both may have the same start time, so either could be picked.
name|Object
name|deallocatedTask1
decl_stmt|;
comment|// De-allocated now
name|Object
name|deallocatedTask2
decl_stmt|;
comment|// Will be de-allocated later.
if|if
condition|(
name|cIdArgCaptor
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|t1CId
argument_list|)
condition|)
block|{
name|deallocatedTask1
operator|=
name|task1
expr_stmt|;
name|deallocatedTask2
operator|=
name|task2
expr_stmt|;
block|}
else|else
block|{
name|deallocatedTask1
operator|=
name|task2
expr_stmt|;
name|deallocatedTask2
operator|=
name|task1
expr_stmt|;
block|}
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|deallocatedTask1
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|INTERNAL_PREEMPTION
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task3
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie3
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// At this point. one p=2 task and task3(p=1) running. Ask for another p1 task.
while|while
condition|(
literal|true
condition|)
block|{
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|(
literal|1000l
argument_list|)
expr_stmt|;
if|if
condition|(
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numPreemptedTasks
operator|==
literal|2
condition|)
block|{
break|break;
block|}
block|}
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|deallocatedTask2
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|INTERNAL_PREEMPTION
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|eq
argument_list|(
name|task4
argument_list|)
argument_list|,
name|eq
argument_list|(
name|clientCookie4
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testForcedLocalityNotInDelayedQueue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|-
literal|1l
argument_list|)
decl_stmt|;
name|testNotInQueue
argument_list|(
name|tsWrapper
argument_list|,
name|hostsH1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testNoLocalityNotInDelayedQueue
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0l
argument_list|)
decl_stmt|;
name|testNotInQueue
argument_list|(
name|tsWrapper
argument_list|,
name|hostsH1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testNotInQueue
parameter_list|(
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hosts
argument_list|,
name|priority1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hosts
argument_list|,
name|priority1
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hosts
argument_list|,
name|priority1
argument_list|)
expr_stmt|;
comment|// 1 more than capacity.
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|delayedTaskQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testDelayedLocalityFallbackToNonLocal
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|10000l
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
name|delayedTaskSchedulerCallableControlled
init|=
operator|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
operator|)
name|tsWrapper
operator|.
name|ts
operator|.
name|delayedTaskSchedulerCallable
decl_stmt|;
name|ControlledClock
name|clock
init|=
name|tsWrapper
operator|.
name|getClock
argument_list|()
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fill up host1 with tasks. Leave host2 empty.
try|try
block|{
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
comment|// 1 more than capacity.
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// No capacity left on node1. The next task should be allocated to node2 after it times out.
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|10000l
argument_list|)
expr_stmt|;
comment|// Past the timeout.
name|assertEquals
argument_list|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
operator|.
name|STATE_NOT_RUN
argument_list|,
name|delayedTaskSchedulerCallableControlled
operator|.
name|lastState
argument_list|)
expr_stmt|;
name|delayedTaskSchedulerCallableControlled
operator|.
name|triggerGetNextTask
argument_list|()
expr_stmt|;
name|delayedTaskSchedulerCallableControlled
operator|.
name|awaitGetNextTaskProcessing
argument_list|()
expr_stmt|;
comment|// Verify that an attempt was made to schedule the task, but the decision was to skip scheduling
name|assertEquals
argument_list|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
operator|.
name|STATE_RETURNED_TASK
argument_list|,
name|delayedTaskSchedulerCallableControlled
operator|.
name|lastState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|delayedTaskSchedulerCallableControlled
operator|.
name|shouldScheduleTaskTriggered
operator|&&
name|delayedTaskSchedulerCallableControlled
operator|.
name|lastShouldScheduleTaskResult
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitChangeInTotalAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|argumentCaptor
operator|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|containerCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|containerCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Container
name|assignedContainer
init|=
name|containerCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HOST2
argument_list|,
name|assignedContainer
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numNonLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numDelayedAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsPerHost
operator|.
name|get
argument_list|(
name|HOST1
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsPerHost
operator|.
name|get
argument_list|(
name|HOST2
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testDelayedLocalityDelayedAllocation
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|10000l
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
name|delayedTaskSchedulerCallableControlled
init|=
operator|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
operator|)
name|tsWrapper
operator|.
name|ts
operator|.
name|delayedTaskSchedulerCallable
decl_stmt|;
name|ControlledClock
name|clock
init|=
name|tsWrapper
operator|.
name|getClock
argument_list|()
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fill up host1 with tasks. Leave host2 empty.
try|try
block|{
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
comment|// 1 more than capacity.
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// Move the clock forward 2000ms, and check the delayed queue
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|2000l
argument_list|)
expr_stmt|;
comment|// Past the timeout.
name|assertEquals
argument_list|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
operator|.
name|STATE_NOT_RUN
argument_list|,
name|delayedTaskSchedulerCallableControlled
operator|.
name|lastState
argument_list|)
expr_stmt|;
name|delayedTaskSchedulerCallableControlled
operator|.
name|triggerGetNextTask
argument_list|()
expr_stmt|;
name|delayedTaskSchedulerCallableControlled
operator|.
name|awaitGetNextTaskProcessing
argument_list|()
expr_stmt|;
comment|// Verify that an attempt was made to schedule the task, but the decision was to skip scheduling
name|assertEquals
argument_list|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
operator|.
name|STATE_TIMEOUT_NOT_EXPIRED
argument_list|,
name|delayedTaskSchedulerCallableControlled
operator|.
name|lastState
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delayedTaskSchedulerCallableControlled
operator|.
name|shouldScheduleTaskTriggered
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Node1 now has free capacity. task1 should be allocated to it.
name|tsWrapper
operator|.
name|awaitChangeInTotalAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|argumentCaptor
operator|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|containerCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|containerCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Container
name|assignedContainer
init|=
name|containerCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HOST1
argument_list|,
name|assignedContainer
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numNonLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numDelayedAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsPerHost
operator|.
name|get
argument_list|(
name|HOST1
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testDelayedQueeTaskSelectionAfterScheduled
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|2000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|10000l
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
name|delayedTaskSchedulerCallableControlled
init|=
operator|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
operator|)
name|tsWrapper
operator|.
name|ts
operator|.
name|delayedTaskSchedulerCallable
decl_stmt|;
name|ControlledClock
name|clock
init|=
name|tsWrapper
operator|.
name|getClock
argument_list|()
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fill up host1 with tasks. Leave host2 empty.
try|try
block|{
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
comment|// 1 more than capacity.
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simulate a 2s delay before finishing the task.
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|2000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
operator|.
name|STATE_NOT_RUN
argument_list|,
name|delayedTaskSchedulerCallableControlled
operator|.
name|lastState
argument_list|)
expr_stmt|;
name|delayedTaskSchedulerCallableControlled
operator|.
name|triggerGetNextTask
argument_list|()
expr_stmt|;
name|delayedTaskSchedulerCallableControlled
operator|.
name|awaitGetNextTaskProcessing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
operator|.
name|STATE_TIMEOUT_NOT_EXPIRED
argument_list|,
name|delayedTaskSchedulerCallableControlled
operator|.
name|lastState
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|delayedTaskSchedulerCallableControlled
operator|.
name|shouldScheduleTaskTriggered
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// Now finish task1, which will make capacity for task3 to run. Nothing is coming out of the delayed queue yet.
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|argumentCaptor
operator|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|containerCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|containerCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Container
name|assignedContainer
init|=
name|containerCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HOST1
argument_list|,
name|assignedContainer
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// Move the clock forward and trigger a run.
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|8000
argument_list|)
expr_stmt|;
comment|// Set to start + 10000 which is the timeout
name|delayedTaskSchedulerCallableControlled
operator|.
name|triggerGetNextTask
argument_list|()
expr_stmt|;
name|delayedTaskSchedulerCallableControlled
operator|.
name|awaitGetNextTaskProcessing
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
operator|.
name|STATE_RETURNED_TASK
argument_list|,
name|delayedTaskSchedulerCallableControlled
operator|.
name|lastState
argument_list|)
expr_stmt|;
comment|// Verify that an attempt was made to schedule the task, but the decision was to skip scheduling
name|assertTrue
argument_list|(
name|delayedTaskSchedulerCallableControlled
operator|.
name|shouldScheduleTaskTriggered
operator|&&
operator|!
name|delayedTaskSchedulerCallableControlled
operator|.
name|lastShouldScheduleTaskResult
argument_list|)
expr_stmt|;
comment|// Ensure there's no more invocations.
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testTaskInfoDelay
parameter_list|()
block|{
name|LlapTaskSchedulerService
operator|.
name|LocalityDelayConf
name|localityDelayConf1
init|=
operator|new
name|LlapTaskSchedulerService
operator|.
name|LocalityDelayConf
argument_list|(
literal|3000
argument_list|)
decl_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|(
operator|new
name|MonotonicClock
argument_list|()
argument_list|)
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// With a timeout of 3000.
name|LlapTaskSchedulerService
operator|.
name|TaskInfo
name|taskInfo
init|=
operator|new
name|LlapTaskSchedulerService
operator|.
name|TaskInfo
argument_list|(
name|localityDelayConf1
argument_list|,
name|clock
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|taskInfo
operator|.
name|shouldForceLocality
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3000
argument_list|,
name|taskInfo
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskInfo
operator|.
name|shouldDelayForLocality
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2500
argument_list|,
name|taskInfo
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskInfo
operator|.
name|shouldDelayForLocality
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|2500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|taskInfo
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|taskInfo
operator|.
name|shouldDelayForLocality
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// No locality delay
name|LlapTaskSchedulerService
operator|.
name|LocalityDelayConf
name|localityDelayConf2
init|=
operator|new
name|LlapTaskSchedulerService
operator|.
name|LocalityDelayConf
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|taskInfo
operator|=
operator|new
name|LlapTaskSchedulerService
operator|.
name|TaskInfo
argument_list|(
name|localityDelayConf2
argument_list|,
name|clock
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|taskInfo
operator|.
name|shouldDelayForLocality
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|taskInfo
operator|.
name|shouldForceLocality
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskInfo
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// Force locality
name|LlapTaskSchedulerService
operator|.
name|LocalityDelayConf
name|localityDelayConf3
init|=
operator|new
name|LlapTaskSchedulerService
operator|.
name|LocalityDelayConf
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|taskInfo
operator|=
operator|new
name|LlapTaskSchedulerService
operator|.
name|TaskInfo
argument_list|(
name|localityDelayConf3
argument_list|,
name|clock
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskInfo
operator|.
name|shouldDelayForLocality
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|taskInfo
operator|.
name|shouldForceLocality
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|taskInfo
operator|.
name|getDelay
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testLocalityDelayTaskOrdering
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|LlapTaskSchedulerService
operator|.
name|LocalityDelayConf
name|localityDelayConf
init|=
operator|new
name|LlapTaskSchedulerService
operator|.
name|LocalityDelayConf
argument_list|(
literal|3000
argument_list|)
decl_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|(
operator|new
name|MonotonicClock
argument_list|()
argument_list|)
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|DelayQueue
argument_list|<
name|LlapTaskSchedulerService
operator|.
name|TaskInfo
argument_list|>
name|delayedQueue
init|=
operator|new
name|DelayQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|LlapTaskSchedulerService
operator|.
name|TaskInfo
name|taskInfo1
init|=
operator|new
name|LlapTaskSchedulerService
operator|.
name|TaskInfo
argument_list|(
name|localityDelayConf
argument_list|,
name|clock
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|1000
argument_list|)
expr_stmt|;
name|LlapTaskSchedulerService
operator|.
name|TaskInfo
name|taskInfo2
init|=
operator|new
name|LlapTaskSchedulerService
operator|.
name|TaskInfo
argument_list|(
name|localityDelayConf
argument_list|,
name|clock
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|,
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|delayedQueue
operator|.
name|add
argument_list|(
name|taskInfo1
argument_list|)
expr_stmt|;
name|delayedQueue
operator|.
name|add
argument_list|(
name|taskInfo2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|taskInfo1
argument_list|,
name|delayedQueue
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
specifier|public
name|void
name|testDelayedLocalityNodeCommErrorImmediateAllocation
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
comment|// Node disable timeout higher than locality delay.
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|20000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|10000l
argument_list|)
decl_stmt|;
comment|// Fill up host1 with tasks. Leave host2 empty.
try|try
block|{
name|long
name|startTime
init|=
name|tsWrapper
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
comment|// 1 more than capacity.
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// Flush any pending scheduler runs which may be blocked. Wait 2 seconds for the run to complete.
name|tsWrapper
operator|.
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|tsWrapper
operator|.
name|awaitSchedulerRun
argument_list|(
literal|2000l
argument_list|)
expr_stmt|;
comment|// Mark a task as failed due to a comm failure.
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|COMMUNICATION_ERROR
argument_list|)
expr_stmt|;
comment|// Node1 marked as failed, node2 has capacity.
comment|// Timeout for nodes is larger than delay - immediate allocation
name|tsWrapper
operator|.
name|awaitChangeInTotalAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|long
name|thirdAllocateTime
init|=
name|tsWrapper
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|diff
init|=
name|thirdAllocateTime
operator|-
name|startTime
decl_stmt|;
comment|// diffAfterSleep< total sleepTime
name|assertTrue
argument_list|(
literal|"Task not allocated in expected time window: duration="
operator|+
name|diff
argument_list|,
name|diff
operator|<
literal|10000l
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|argumentCaptor
operator|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Container
argument_list|>
name|containerCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|containerCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task3
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Container
name|assignedContainer
init|=
name|containerCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HOST2
argument_list|,
name|assignedContainer
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numNonLocalAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numDelayedAllocations
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsPerHost
operator|.
name|get
argument_list|(
name|HOST1
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tsWrapper
operator|.
name|ts
operator|.
name|dagStats
operator|.
name|numAllocationsPerHost
operator|.
name|get
argument_list|(
name|HOST2
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
specifier|public
name|void
name|testDelayedLocalityNodeCommErrorDelayedAllocation
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Priority
name|priority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|}
decl_stmt|;
name|String
index|[]
name|hostsH1
init|=
operator|new
name|String
index|[]
block|{
name|HOST1
block|}
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
name|tsWrapper
init|=
operator|new
name|TestTaskSchedulerServiceWrapper
argument_list|(
literal|5000
argument_list|,
name|hosts
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|10000l
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
name|delayedTaskSchedulerCallableControlled
init|=
operator|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|DelayedTaskSchedulerCallableControlled
operator|)
name|tsWrapper
operator|.
name|ts
operator|.
name|delayedTaskSchedulerCallable
decl_stmt|;
name|ControlledClock
name|clock
init|=
name|tsWrapper
operator|.
name|getClock
argument_list|()
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fill up host1 with tasks. Leave host2 empty.
try|try
block|{
name|tsWrapper
operator|.
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TezTaskAttemptID
name|task1
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task2
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|task3
init|=
name|tsWrapper
operator|.
name|allocateTask
argument_list|(
name|hostsH1
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
comment|// 1 more than capacity.
name|tsWrapper
operator|.
name|awaitLocalTaskAllocations
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|preemptContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|Object
argument_list|>
name|argumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|taskAllocated
argument_list|(
name|argumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task1
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|task2
argument_list|,
name|argumentCaptor
operator|.
name|getAllValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|tsWrapper
operator|.
name|mockAppCallback
argument_list|)
expr_stmt|;
comment|// Mark a task as failed due to a comm failure.
name|tsWrapper
operator|.
name|deallocateTask
argument_list|(
name|task1
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|COMMUNICATION_ERROR
argument_list|)
expr_stmt|;
comment|// Node1 has free capacity but is disabled. Node 2 has capcaity. Delay> re-enable tiemout
name|tsWrapper
operator|.
name|ensureNoChangeInTotalAllocations
argument_list|(
literal|2
argument_list|,
literal|2000l
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tsWrapper
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestTaskSchedulerServiceWrapper
block|{
specifier|static
specifier|final
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|TaskSchedulerContext
name|mockAppCallback
init|=
name|mock
argument_list|(
name|TaskSchedulerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|LlapServiceInstanceSet
name|mockServiceInstanceSet
init|=
name|mock
argument_list|(
name|LlapServiceInstanceSet
operator|.
name|class
argument_list|)
decl_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|(
operator|new
name|MonotonicClock
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|LlapTaskSchedulerServiceForTest
name|ts
decl_stmt|;
name|TestTaskSchedulerServiceWrapper
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
literal|2000l
argument_list|)
expr_stmt|;
block|}
name|TestTaskSchedulerServiceWrapper
parameter_list|(
name|long
name|disableTimeoutMillis
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
name|disableTimeoutMillis
argument_list|,
operator|new
name|String
index|[]
block|{
name|HOST1
block|,
name|HOST2
block|,
name|HOST3
block|}
argument_list|,
literal|4
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_TASK_SCHEDULER_WAIT_QUEUE_SIZE
operator|.
name|defaultIntVal
argument_list|)
expr_stmt|;
block|}
name|TestTaskSchedulerServiceWrapper
parameter_list|(
name|long
name|disableTimeoutMillis
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|int
name|numExecutors
parameter_list|,
name|int
name|waitQueueSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
name|disableTimeoutMillis
argument_list|,
name|hosts
argument_list|,
name|numExecutors
argument_list|,
name|waitQueueSize
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
name|TestTaskSchedulerServiceWrapper
parameter_list|(
name|long
name|nodeDisableTimeoutMillis
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|int
name|numExecutors
parameter_list|,
name|int
name|waitQueueSize
parameter_list|,
name|long
name|localityDelayMs
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
name|nodeDisableTimeoutMillis
argument_list|,
name|hosts
argument_list|,
name|numExecutors
argument_list|,
name|waitQueueSize
argument_list|,
name|localityDelayMs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|TestTaskSchedulerServiceWrapper
parameter_list|(
name|long
name|nodeDisableTimeoutMillis
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|int
name|numExecutors
parameter_list|,
name|int
name|waitQueueSize
parameter_list|,
name|long
name|localityDelayMs
parameter_list|,
name|boolean
name|controlledDelayedTaskQueue
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
argument_list|(
name|nodeDisableTimeoutMillis
argument_list|,
name|hosts
argument_list|,
name|numExecutors
argument_list|,
name|waitQueueSize
argument_list|,
name|localityDelayMs
argument_list|,
name|controlledDelayedTaskQueue
argument_list|,
name|hosts
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|TestTaskSchedulerServiceWrapper
parameter_list|(
name|long
name|nodeDisableTimeoutMillis
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|int
name|numExecutors
parameter_list|,
name|int
name|waitQueueSize
parameter_list|,
name|long
name|localityDelayMs
parameter_list|,
name|boolean
name|controlledDelayedTaskQueue
parameter_list|,
name|String
index|[]
name|liveHosts
parameter_list|,
name|boolean
name|useMockRegistry
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
operator|.
name|varname
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_NUM_EXECUTORS
operator|.
name|varname
argument_list|,
name|numExecutors
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_TASK_SCHEDULER_WAIT_QUEUE_SIZE
operator|.
name|varname
argument_list|,
name|waitQueueSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|LLAP_TASK_SCHEDULER_NODE_REENABLE_MIN_TIMEOUT_MS
operator|.
name|varname
argument_list|,
name|nodeDisableTimeoutMillis
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|LlapFixedRegistryImpl
operator|.
name|FIXED_REGISTRY_RESOLVE_HOST_NAMES
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|ConfVars
operator|.
name|LLAP_TASK_SCHEDULER_LOCALITY_DELAY
operator|.
name|varname
argument_list|,
name|localityDelayMs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ConfVars
operator|.
name|LLAP_TASK_SCHEDULER_AM_REGISTRY_NAME
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|when
argument_list|(
name|mockAppCallback
argument_list|)
operator|.
name|getApplicationAttemptId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|11111l
argument_list|)
operator|.
name|when
argument_list|(
name|mockAppCallback
argument_list|)
operator|.
name|getCustomClusterIdentifier
argument_list|()
expr_stmt|;
name|UserPayload
name|userPayload
init|=
name|TezUtils
operator|.
name|createUserPayloadFromConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|userPayload
argument_list|)
operator|.
name|when
argument_list|(
name|mockAppCallback
argument_list|)
operator|.
name|getInitialUserPayload
argument_list|()
expr_stmt|;
if|if
condition|(
name|useMockRegistry
condition|)
block|{
name|List
argument_list|<
name|LlapServiceInstance
argument_list|>
name|liveInstances
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|liveHosts
control|)
block|{
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|LlapServiceInstance
name|mockInactive
init|=
name|mock
argument_list|(
name|InactiveServiceInstance
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|host
argument_list|)
operator|.
name|when
argument_list|(
name|mockInactive
argument_list|)
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"inactive-host-"
operator|+
name|host
argument_list|)
operator|.
name|when
argument_list|(
name|mockInactive
argument_list|)
operator|.
name|getWorkerIdentity
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|ImmutableSet
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|mockInactive
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockServiceInstanceSet
argument_list|)
operator|.
name|getByHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|liveInstances
operator|.
name|add
argument_list|(
name|mockInactive
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LlapServiceInstance
name|mockActive
init|=
name|mock
argument_list|(
name|LlapServiceInstance
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|host
argument_list|)
operator|.
name|when
argument_list|(
name|mockActive
argument_list|)
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"host-"
operator|+
name|host
argument_list|)
operator|.
name|when
argument_list|(
name|mockActive
argument_list|)
operator|.
name|getWorkerIdentity
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|ImmutableSet
operator|.
name|builder
argument_list|()
operator|.
name|add
argument_list|(
name|mockActive
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockServiceInstanceSet
argument_list|)
operator|.
name|getByHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|liveInstances
operator|.
name|add
argument_list|(
name|mockActive
argument_list|)
expr_stmt|;
block|}
block|}
name|doReturn
argument_list|(
name|liveInstances
argument_list|)
operator|.
name|when
argument_list|(
name|mockServiceInstanceSet
argument_list|)
operator|.
name|getAllInstancesOrdered
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LlapServiceInstance
argument_list|>
name|allInstances
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|host
range|:
name|hosts
control|)
block|{
name|LlapServiceInstance
name|mockActive
init|=
name|mock
argument_list|(
name|LlapServiceInstance
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|host
argument_list|)
operator|.
name|when
argument_list|(
name|mockActive
argument_list|)
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockActive
argument_list|)
operator|.
name|getResource
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"host-"
operator|+
name|host
argument_list|)
operator|.
name|when
argument_list|(
name|mockActive
argument_list|)
operator|.
name|getWorkerIdentity
argument_list|()
expr_stmt|;
name|allInstances
operator|.
name|add
argument_list|(
name|mockActive
argument_list|)
expr_stmt|;
block|}
name|doReturn
argument_list|(
name|allInstances
argument_list|)
operator|.
name|when
argument_list|(
name|mockServiceInstanceSet
argument_list|)
operator|.
name|getAll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|controlledDelayedTaskQueue
condition|)
block|{
name|ts
operator|=
operator|new
name|LlapTaskSchedulerServiceForTestControlled
argument_list|(
name|mockAppCallback
argument_list|,
name|clock
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ts
operator|=
operator|new
name|LlapTaskSchedulerServiceForTest
argument_list|(
name|mockAppCallback
argument_list|,
name|clock
argument_list|)
expr_stmt|;
block|}
name|controlScheduler
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ts
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|ts
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|useMockRegistry
condition|)
block|{
name|ts
operator|.
name|setServiceInstanceSet
argument_list|(
name|mockServiceInstanceSet
argument_list|)
expr_stmt|;
block|}
comment|// One scheduler pass from the nodes that are added at startup
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|controlScheduler
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
block|}
name|ControlledClock
name|getClock
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
name|void
name|controlScheduler
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|ts
operator|.
name|forTestsetControlScheduling
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|void
name|signalSchedulerRun
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ts
operator|.
name|forTestSignalSchedulingRun
argument_list|()
expr_stmt|;
block|}
name|void
name|awaitSchedulerRun
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ts
operator|.
name|forTestAwaitSchedulingRun
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param timeoutMs      * @return false if the time elapsed      * @throws InterruptedException      */
name|boolean
name|awaitSchedulerRun
parameter_list|(
name|long
name|timeoutMs
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|ts
operator|.
name|forTestAwaitSchedulingRun
argument_list|(
name|timeoutMs
argument_list|)
return|;
block|}
name|void
name|resetAppCallback
parameter_list|()
block|{
name|reset
argument_list|(
name|mockAppCallback
argument_list|)
expr_stmt|;
block|}
name|void
name|shutdown
parameter_list|()
block|{
name|ts
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|void
name|allocateTask
parameter_list|(
name|TezTaskAttemptID
name|task
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Object
name|clientCookie
parameter_list|)
block|{
name|ts
operator|.
name|allocateTask
argument_list|(
name|task
argument_list|,
name|resource
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|,
name|clientCookie
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|TASK_COUNTER
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TezVertexID
name|VERTEX_ID
init|=
name|TezVertexID
operator|.
name|getInstance
argument_list|(
name|TezDAGID
operator|.
name|getInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TezTaskAttemptID
name|generateTaskAttemptId
parameter_list|()
block|{
name|int
name|taskId
init|=
name|TASK_COUNTER
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
return|return
name|TezTaskAttemptID
operator|.
name|getInstance
argument_list|(
name|TezTaskID
operator|.
name|getInstance
argument_list|(
name|VERTEX_ID
argument_list|,
name|taskId
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|void
name|deallocateTask
parameter_list|(
name|Object
name|task
parameter_list|,
name|boolean
name|succeeded
parameter_list|,
name|TaskAttemptEndReason
name|endReason
parameter_list|)
block|{
name|ts
operator|.
name|deallocateTask
argument_list|(
name|task
argument_list|,
name|succeeded
argument_list|,
name|endReason
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|void
name|rejectExecution
parameter_list|(
name|Object
name|task
parameter_list|)
block|{
name|ts
operator|.
name|deallocateTask
argument_list|(
name|task
argument_list|,
literal|false
argument_list|,
name|TaskAttemptEndReason
operator|.
name|EXECUTOR_BUSY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// More complex methods which may wrap multiple operations
name|TezTaskAttemptID
name|allocateTask
parameter_list|(
name|String
index|[]
name|hosts
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|TezTaskAttemptID
name|task
init|=
name|generateTaskAttemptId
argument_list|()
decl_stmt|;
name|Object
name|clientCookie
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|allocateTask
argument_list|(
name|task
argument_list|,
name|hosts
argument_list|,
name|priority
argument_list|,
name|clientCookie
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
specifier|public
name|void
name|awaitTotalTaskAllocations
parameter_list|(
name|int
name|numTasks
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|==
name|numTasks
condition|)
block|{
break|break;
block|}
block|}
block|}
specifier|public
name|void
name|awaitLocalTaskAllocations
parameter_list|(
name|int
name|numTasks
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|ts
operator|.
name|dagStats
operator|.
name|numLocalAllocations
operator|==
name|numTasks
condition|)
block|{
break|break;
block|}
block|}
block|}
specifier|public
name|void
name|awaitChangeInTotalAllocations
parameter_list|(
name|int
name|previousAllocations
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|awaitSchedulerRun
argument_list|()
expr_stmt|;
if|if
condition|(
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|>
name|previousAllocations
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200l
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|ensureNoChangeInTotalAllocations
parameter_list|(
name|int
name|previousAllocations
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|startTime
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|long
name|timeLeft
init|=
name|timeout
decl_stmt|;
while|while
condition|(
name|timeLeft
operator|>
literal|0
condition|)
block|{
name|signalSchedulerRun
argument_list|()
expr_stmt|;
name|awaitSchedulerRun
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|200
argument_list|,
name|timeLeft
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
operator|!=
name|previousAllocations
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"NumTotalAllocations expected to stay at "
operator|+
name|previousAllocations
operator|+
literal|". Actual="
operator|+
name|ts
operator|.
name|dagStats
operator|.
name|numTotalAllocations
argument_list|)
throw|;
block|}
name|timeLeft
operator|=
operator|(
name|startTime
operator|+
name|timeout
operator|)
operator|-
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|LlapTaskSchedulerServiceForTest
extends|extends
name|LlapTaskSchedulerService
block|{
specifier|private
name|AtomicBoolean
name|controlScheduling
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Lock
name|testLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|schedulingCompleteCondition
init|=
name|testLock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|schedulingComplete
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|triggerSchedulingCondition
init|=
name|testLock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|schedulingTriggered
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|numSchedulerRuns
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Object
name|messageLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|int
name|sentCount
init|=
literal|0
decl_stmt|,
name|checkAndSendCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|Object
name|checkDelay
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|doDelayCheckAndSend
init|=
literal|false
decl_stmt|;
specifier|public
name|LlapTaskSchedulerServiceForTest
parameter_list|(
name|TaskSchedulerContext
name|appClient
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|super
argument_list|(
name|appClient
argument_list|,
name|clock
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|registerRunningTask
parameter_list|(
name|TaskInfo
name|taskInfo
parameter_list|)
block|{
name|super
operator|.
name|registerRunningTask
argument_list|(
name|taskInfo
argument_list|)
expr_stmt|;
name|notifyStarted
argument_list|(
name|taskInfo
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do this here; normally communicator does this.
block|}
annotation|@
name|Override
specifier|protected
name|void
name|checkAndSendGuaranteedStateUpdate
parameter_list|(
name|TaskInfo
name|ti
parameter_list|)
block|{
comment|// A test-specific delay just before the check happens.
synchronized|synchronized
init|(
name|checkDelay
init|)
block|{
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|doDelayCheckAndSend
condition|)
block|{
if|if
condition|(
name|isFirst
condition|)
block|{
synchronized|synchronized
init|(
name|messageLock
init|)
block|{
operator|++
name|checkAndSendCount
expr_stmt|;
name|messageLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|checkDelay
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|super
operator|.
name|checkAndSendGuaranteedStateUpdate
argument_list|(
name|ti
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDelayCheckAndSend
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|checkDelay
init|)
block|{
name|doDelayCheckAndSend
operator|=
name|value
expr_stmt|;
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|checkDelay
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleUpdateResult
parameter_list|(
name|TaskInfo
name|ti
parameter_list|,
name|boolean
name|isOk
parameter_list|)
block|{
name|super
operator|.
name|handleUpdateResult
argument_list|(
name|ti
argument_list|,
name|isOk
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearTestCounts
parameter_list|()
block|{
synchronized|synchronized
init|(
name|messageLock
init|)
block|{
name|sentCount
operator|=
name|checkAndSendCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|waitForMessagesSent
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|messageLock
init|)
block|{
assert|assert
name|sentCount
operator|<=
name|count
assert|;
if|if
condition|(
name|sentCount
operator|==
name|count
condition|)
block|{
name|sentCount
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|messageLock
operator|.
name|wait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Note: this only works for testing the lack of invocations from the main thread. */
specifier|public
name|void
name|assertNoMessagesSent
parameter_list|()
block|{
synchronized|synchronized
init|(
name|messageLock
init|)
block|{
assert|assert
name|sentCount
operator|==
literal|0
assert|;
block|}
block|}
specifier|public
name|void
name|waitForCheckAndSendCall
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|messageLock
init|)
block|{
assert|assert
name|checkAndSendCount
operator|<=
name|count
assert|;
if|if
condition|(
name|checkAndSendCount
operator|==
name|count
condition|)
block|{
name|checkAndSendCount
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|messageLock
operator|.
name|wait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|sendUpdateMessageAsync
parameter_list|(
name|TaskInfo
name|ti
parameter_list|,
name|boolean
name|newState
parameter_list|)
block|{
synchronized|synchronized
init|(
name|messageLock
init|)
block|{
operator|++
name|sentCount
expr_stmt|;
name|messageLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|TezTaskAttemptID
name|getTaskAttemptId
parameter_list|(
name|Object
name|task
parameter_list|)
block|{
if|if
condition|(
name|task
operator|instanceof
name|TezTaskAttemptID
condition|)
block|{
return|return
operator|(
name|TezTaskAttemptID
operator|)
name|task
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|schedulePendingTasks
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempted schedulPendingTasks"
argument_list|)
expr_stmt|;
name|testLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|controlScheduling
operator|.
name|get
argument_list|()
condition|)
block|{
while|while
condition|(
operator|!
name|schedulingTriggered
condition|)
block|{
try|try
block|{
name|triggerSchedulingCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|numSchedulerRuns
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|super
operator|.
name|schedulePendingTasks
argument_list|()
expr_stmt|;
name|schedulingTriggered
operator|=
literal|false
expr_stmt|;
name|schedulingComplete
operator|=
literal|true
expr_stmt|;
name|schedulingCompleteCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|testLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Enable or disable test scheduling control.
name|void
name|forTestsetControlScheduling
parameter_list|(
name|boolean
name|control
parameter_list|)
block|{
name|this
operator|.
name|controlScheduling
operator|.
name|set
argument_list|(
name|control
argument_list|)
expr_stmt|;
block|}
name|void
name|forTestSignalSchedulingRun
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|testLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|schedulingTriggered
operator|=
literal|true
expr_stmt|;
name|triggerSchedulingCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|testLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|boolean
name|forTestAwaitSchedulingRun
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|testLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|success
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|!
name|schedulingComplete
condition|)
block|{
if|if
condition|(
name|timeout
operator|==
operator|-
literal|1
condition|)
block|{
name|schedulingCompleteCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|success
operator|=
name|schedulingCompleteCondition
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|schedulingComplete
operator|=
literal|false
expr_stmt|;
return|return
name|success
return|;
block|}
finally|finally
block|{
name|testLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|LlapTaskSchedulerServiceForTestControlled
extends|extends
name|LlapTaskSchedulerServiceForTest
block|{
specifier|private
name|DelayedTaskSchedulerCallableControlled
name|controlledTSCallable
decl_stmt|;
specifier|public
name|LlapTaskSchedulerServiceForTestControlled
parameter_list|(
name|TaskSchedulerContext
name|appClient
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|super
argument_list|(
name|appClient
argument_list|,
name|clock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|LlapTaskSchedulerService
operator|.
name|DelayedTaskSchedulerCallable
name|createDelayedTaskSchedulerCallable
parameter_list|()
block|{
name|controlledTSCallable
operator|=
operator|new
name|DelayedTaskSchedulerCallableControlled
argument_list|()
expr_stmt|;
return|return
name|controlledTSCallable
return|;
block|}
class|class
name|DelayedTaskSchedulerCallableControlled
extends|extends
name|DelayedTaskSchedulerCallable
block|{
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|triggerRunCondition
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|shouldRun
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Condition
name|runCompleteCondition
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|runComplete
init|=
literal|false
decl_stmt|;
specifier|static
specifier|final
name|int
name|STATE_NOT_RUN
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
name|int
name|STATE_NULL_FOUND
init|=
literal|1
decl_stmt|;
specifier|static
specifier|final
name|int
name|STATE_TIMEOUT_NOT_EXPIRED
init|=
literal|2
decl_stmt|;
specifier|static
specifier|final
name|int
name|STATE_RETURNED_TASK
init|=
literal|3
decl_stmt|;
specifier|volatile
name|int
name|lastState
init|=
name|STATE_NOT_RUN
decl_stmt|;
specifier|volatile
name|boolean
name|lastShouldScheduleTaskResult
init|=
literal|false
decl_stmt|;
specifier|volatile
name|boolean
name|shouldScheduleTaskTriggered
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|processEvictedTask
parameter_list|(
name|TaskInfo
name|taskInfo
parameter_list|)
block|{
name|super
operator|.
name|processEvictedTask
argument_list|(
name|taskInfo
argument_list|)
expr_stmt|;
name|signalRunComplete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TaskInfo
name|getNextTask
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|shouldRun
condition|)
block|{
name|triggerRunCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
comment|// Preven subsequent runs until a new trigger is set.
name|shouldRun
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|TaskInfo
name|taskInfo
init|=
name|delayedTaskQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|taskInfo
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Triggered getTask but the queue is empty"
argument_list|)
expr_stmt|;
name|lastState
operator|=
name|STATE_NULL_FOUND
expr_stmt|;
name|signalRunComplete
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|taskInfo
operator|.
name|shouldDelayForLocality
argument_list|(
name|LlapTaskSchedulerServiceForTestControlled
operator|.
name|this
operator|.
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Triggered getTask but the first element is not ready to execute"
argument_list|)
expr_stmt|;
name|lastState
operator|=
name|STATE_TIMEOUT_NOT_EXPIRED
expr_stmt|;
name|signalRunComplete
argument_list|()
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|delayedTaskQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
comment|// Remove the previously peeked element.
name|lastState
operator|=
name|STATE_RETURNED_TASK
expr_stmt|;
return|return
name|taskInfo
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldScheduleTask
parameter_list|(
name|TaskInfo
name|taskInfo
parameter_list|)
block|{
name|shouldScheduleTaskTriggered
operator|=
literal|true
expr_stmt|;
name|lastShouldScheduleTaskResult
operator|=
name|super
operator|.
name|shouldScheduleTask
argument_list|(
name|taskInfo
argument_list|)
expr_stmt|;
return|return
name|lastShouldScheduleTaskResult
return|;
block|}
name|void
name|resetShouldScheduleInformation
parameter_list|()
block|{
name|shouldScheduleTaskTriggered
operator|=
literal|false
expr_stmt|;
name|lastShouldScheduleTaskResult
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|void
name|signalRunComplete
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|runComplete
operator|=
literal|true
expr_stmt|;
name|runCompleteCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|triggerGetNextTask
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|shouldRun
operator|=
literal|true
expr_stmt|;
name|triggerRunCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|awaitGetNextTaskProcessing
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|runComplete
condition|)
block|{
name|runCompleteCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|runComplete
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

