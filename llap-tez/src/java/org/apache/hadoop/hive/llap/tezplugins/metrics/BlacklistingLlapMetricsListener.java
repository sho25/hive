begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SetCapacityRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|impl
operator|.
name|LlapManagementProtocolClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|LlapDaemonExecutorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|LlapServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapZookeeperRegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Implementation of MetricsListener which blacklists slow nodes based on the statistics.  */
end_comment

begin_class
specifier|public
class|class
name|BlacklistingLlapMetricsListener
implements|implements
name|LlapMetricsListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlacklistingLlapMetricsListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|LlapRegistryService
name|registry
decl_stmt|;
specifier|private
name|LlapManagementProtocolClientImplFactory
name|clientFactory
decl_stmt|;
specifier|private
name|int
name|minServedTasksNumber
decl_stmt|;
specifier|private
name|int
name|maxBlacklistedNodes
decl_stmt|;
specifier|private
name|long
name|minConfigChangeDelayMs
decl_stmt|;
specifier|private
name|float
name|timeThreshold
decl_stmt|;
specifier|private
name|float
name|emptyExecutorsThreshold
decl_stmt|;
annotation|@
name|VisibleForTesting
name|long
name|nextCheckTime
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
annotation|@
name|VisibleForTesting
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|LlapRegistryService
name|registry
parameter_list|,
name|LlapManagementProtocolClientImplFactory
name|clientFactory
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|clientFactory
operator|=
name|clientFactory
expr_stmt|;
name|this
operator|.
name|minServedTasksNumber
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_NODEHEALTHCHECKS_MINTASKS
argument_list|)
expr_stmt|;
name|this
operator|.
name|minConfigChangeDelayMs
operator|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_NODEHEALTHCHECKS_MININTERVALDURATION
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeThreshold
operator|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_NODEHEALTHCHECKS_TASKTIMERATIO
argument_list|)
expr_stmt|;
name|this
operator|.
name|emptyExecutorsThreshold
operator|=
name|HiveConf
operator|.
name|getFloatVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_NODEHEALTHCHECKS_EXECUTORRATIO
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxBlacklistedNodes
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_NODEHEALTHCHECKS_MAXNODES
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|minServedTasksNumber
operator|>
literal|0
argument_list|,
literal|"Minimum served tasks should be greater than 0"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|minConfigChangeDelayMs
operator|>
literal|0
argument_list|,
literal|"Minimum config change delay should be greater than 0"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|timeThreshold
operator|>
literal|1.0f
argument_list|,
literal|"The time threshold should be greater than 1"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|maxBlacklistedNodes
operator|>
literal|0
argument_list|,
literal|"The maximum number of blacklisted node should be greater than 1"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|registry
argument_list|,
literal|"Registry should not be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clientFactory
argument_list|,
literal|"ClientFactory should not be null"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"BlacklistingLlapMetricsListener initialized with "
operator|+
literal|"minServedTasksNumber={}, "
operator|+
literal|"minConfigChangeDelayMs={}, "
operator|+
literal|"timeThreshold={}, "
operator|+
literal|"emptyExecutorsThreshold={}, "
operator|+
literal|"maxBlacklistedNodes={}"
argument_list|,
name|minServedTasksNumber
argument_list|,
name|minConfigChangeDelayMs
argument_list|,
name|timeThreshold
argument_list|,
name|emptyExecutorsThreshold
argument_list|,
name|maxBlacklistedNodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|LlapRegistryService
name|registry
parameter_list|)
block|{
name|init
argument_list|(
name|conf
argument_list|,
name|registry
argument_list|,
name|LlapManagementProtocolClientImplFactory
operator|.
name|basicInstance
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|newDaemonMetrics
parameter_list|(
name|String
name|workerIdentity
parameter_list|,
name|LlapMetricsCollector
operator|.
name|LlapMetrics
name|newMetrics
parameter_list|)
block|{
comment|// no op
block|}
annotation|@
name|Override
specifier|public
name|void
name|newClusterMetrics
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LlapMetricsCollector
operator|.
name|LlapMetrics
argument_list|>
name|newMetrics
parameter_list|)
block|{
name|long
name|sumAverageTime
init|=
literal|0
decl_stmt|;
name|long
name|sumEmptyExecutors
init|=
literal|0
decl_stmt|;
name|long
name|maxAverageTime
init|=
literal|0
decl_stmt|;
name|long
name|maxAverageTimeEmptyExecutors
init|=
literal|0
decl_stmt|;
name|long
name|maxAverageTimeMaxExecutors
init|=
literal|0
decl_stmt|;
name|long
name|workerNum
init|=
literal|0
decl_stmt|;
name|int
name|blacklistedNodes
init|=
literal|0
decl_stmt|;
name|String
name|maxAverageTimeIdentity
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|workerIdentity
range|:
name|newMetrics
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|metrics
init|=
name|newMetrics
operator|.
name|get
argument_list|(
name|workerIdentity
argument_list|)
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|long
name|requestHandled
init|=
name|metrics
operator|.
name|get
argument_list|(
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorTotalRequestsHandled
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|averageTime
init|=
name|metrics
operator|.
name|get
argument_list|(
name|LlapDaemonExecutorInfo
operator|.
name|AverageResponseTime
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|emptyExecutor
init|=
name|metrics
operator|.
name|get
argument_list|(
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorNumExecutorsAvailableAverage
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|maxExecutors
init|=
name|metrics
operator|.
name|get
argument_list|(
name|LlapDaemonExecutorInfo
operator|.
name|ExecutorNumExecutors
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking node {} with data: "
operator|+
literal|"requestHandled={}, "
operator|+
literal|"averageTime={}, "
operator|+
literal|"emptyExecutors={}, "
operator|+
literal|"maxExecutors={}"
argument_list|,
name|workerIdentity
argument_list|,
name|requestHandled
argument_list|,
name|averageTime
argument_list|,
name|emptyExecutor
argument_list|,
name|maxExecutors
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxExecutors
operator|==
literal|0
condition|)
block|{
name|blacklistedNodes
operator|++
expr_stmt|;
if|if
condition|(
name|blacklistedNodes
operator|>=
name|this
operator|.
name|maxBlacklistedNodes
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Already enough blacklisted nodes {}. Skipping."
argument_list|,
name|blacklistedNodes
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// We do not interested in the data for the blacklisted nodes
continue|continue;
block|}
block|}
if|if
condition|(
name|requestHandled
operator|>
name|this
operator|.
name|minServedTasksNumber
condition|)
block|{
name|workerNum
operator|++
expr_stmt|;
name|sumAverageTime
operator|+=
name|averageTime
expr_stmt|;
if|if
condition|(
name|averageTime
operator|>
name|maxAverageTime
condition|)
block|{
name|maxAverageTime
operator|=
name|averageTime
expr_stmt|;
name|maxAverageTimeEmptyExecutors
operator|=
name|emptyExecutor
expr_stmt|;
name|maxAverageTimeMaxExecutors
operator|=
name|maxExecutors
expr_stmt|;
name|maxAverageTimeIdentity
operator|=
name|workerIdentity
expr_stmt|;
block|}
name|sumEmptyExecutors
operator|+=
name|emptyExecutor
expr_stmt|;
block|}
block|}
comment|// If we do not have enough data then return.
if|if
condition|(
name|workerNum
operator|<
literal|2
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found slowest node {} with data: "
operator|+
literal|"sumAverageTime={}, "
operator|+
literal|"sumEmptyExecutors={}, "
operator|+
literal|"maxAverageTime={}, "
operator|+
literal|"maxAverageTimeEmptyExecutors={}, "
operator|+
literal|"maxAverageTimeMaxExecutors={}, "
operator|+
literal|"workerNum={}, "
operator|+
literal|"maxAverageTimeIdentity={}, "
operator|+
literal|"blacklistedNodes={}"
argument_list|,
name|sumAverageTime
argument_list|,
name|sumEmptyExecutors
argument_list|,
name|maxAverageTime
argument_list|,
name|maxAverageTimeEmptyExecutors
argument_list|,
name|maxAverageTimeMaxExecutors
argument_list|,
name|workerNum
argument_list|,
name|maxAverageTimeIdentity
argument_list|,
name|blacklistedNodes
argument_list|)
expr_stmt|;
comment|// Check if the slowest node is at least timeThreshold times slower than the average
name|double
name|averageTimeWithoutSlowest
init|=
call|(
name|double
call|)
argument_list|(
name|sumAverageTime
operator|-
name|maxAverageTime
argument_list|)
operator|/
operator|(
name|workerNum
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|averageTimeWithoutSlowest
operator|*
name|this
operator|.
name|timeThreshold
operator|<
name|maxAverageTime
condition|)
block|{
comment|// We have a candidate, let's see if we have enough empty executors.
name|long
name|emptyExecutorsWithoutSlowest
init|=
name|sumEmptyExecutors
operator|-
name|maxAverageTimeEmptyExecutors
decl_stmt|;
if|if
condition|(
name|emptyExecutorsWithoutSlowest
operator|>
name|maxAverageTimeMaxExecutors
operator|*
name|this
operator|.
name|emptyExecutorsThreshold
condition|)
block|{
comment|// Seems like a good candidate, let's try to blacklist
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to blacklist node: "
operator|+
name|maxAverageTimeIdentity
argument_list|)
expr_stmt|;
name|setCapacity
argument_list|(
name|maxAverageTimeIdentity
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Can not blacklist node: "
operator|+
name|maxAverageTimeIdentity
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|setCapacity
parameter_list|(
name|String
name|workerIdentity
parameter_list|,
name|int
name|newExecutorNum
parameter_list|,
name|int
name|newWaitQueueSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServiceException
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTime
operator|>
name|nextCheckTime
condition|)
block|{
name|LlapZookeeperRegistryImpl
operator|.
name|ConfigChangeLockResult
name|lockResult
init|=
name|registry
operator|.
name|lockForConfigChange
argument_list|(
name|currentTime
argument_list|,
name|currentTime
operator|+
name|this
operator|.
name|minConfigChangeDelayMs
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got result for lock check: {}"
argument_list|,
name|lockResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockResult
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting capacity for workerIdentity={} to newExecutorNum={}, newWaitQueueSize={}"
argument_list|,
name|workerIdentity
argument_list|,
name|newExecutorNum
argument_list|,
name|newWaitQueueSize
argument_list|)
expr_stmt|;
name|LlapServiceInstance
name|serviceInstance
init|=
name|registry
operator|.
name|getInstances
argument_list|()
operator|.
name|getInstance
argument_list|(
name|workerIdentity
argument_list|)
decl_stmt|;
name|LlapManagementProtocolClientImpl
name|client
init|=
name|clientFactory
operator|.
name|create
argument_list|(
name|serviceInstance
argument_list|)
decl_stmt|;
name|client
operator|.
name|setCapacity
argument_list|(
literal|null
argument_list|,
name|SetCapacityRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExecutorNum
argument_list|(
name|newExecutorNum
argument_list|)
operator|.
name|setQueueSize
argument_list|(
name|newWaitQueueSize
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lockResult
operator|.
name|getNextConfigChangeTime
argument_list|()
operator|>
operator|-
literal|1L
condition|)
block|{
name|nextCheckTime
operator|=
name|lockResult
operator|.
name|getNextConfigChangeTime
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skipping check. Current time {} and we are waiting for {}."
argument_list|,
name|currentTime
argument_list|,
name|nextCheckTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

