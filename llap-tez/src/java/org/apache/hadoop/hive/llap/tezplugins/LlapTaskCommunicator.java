begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|ServiceInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapTaskUmbilicalProtocol
operator|.
name|TezAttemptArray
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|BiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashBiMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapNodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|LlapUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|FragmentRuntimeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|QueryIdentifierProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SourceStateUpdatedResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|SubmitWorkResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|TerminateFragmentResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|daemon
operator|.
name|rpc
operator|.
name|LlapDaemonProtocolProtos
operator|.
name|VertexOrBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|protocol
operator|.
name|LlapTaskUmbilicalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|registry
operator|.
name|impl
operator|.
name|LlapRegistryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|security
operator|.
name|LlapTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
operator|.
name|Converters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tez
operator|.
name|LlapProtocolClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|tezplugins
operator|.
name|helpers
operator|.
name|SourceStateTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|TezTaskUmbilicalProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|TezUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|common
operator|.
name|security
operator|.
name|JobTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|TezUncheckedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|UserPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|api
operator|.
name|event
operator|.
name|VertexStateUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|app
operator|.
name|TezTaskCommunicatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|records
operator|.
name|TezTaskAttemptID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|TaskFailureType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TaskSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TezHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|runtime
operator|.
name|api
operator|.
name|impl
operator|.
name|TezHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|ContainerEndReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|ServicePluginErrorDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|TaskAttemptEndReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|serviceplugins
operator|.
name|api
operator|.
name|TaskCommunicatorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LlapTaskCommunicator
extends|extends
name|TezTaskCommunicatorImpl
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapTaskCommunicator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|isInfoEnabled
init|=
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_URI_STR
init|=
literal|"/ws/v1/applicationhistory"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Joiner
name|JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Joiner
name|PATH_JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|QueryIdentifierProto
argument_list|,
name|ByteBuffer
argument_list|>
name|credentialMap
decl_stmt|;
comment|// Tracks containerIds and taskAttemptIds, so can be kept independent of the running DAG.
comment|// When DAG specific cleanup happens, it'll be better to link this to a DAG though.
specifier|private
specifier|final
name|EntityTracker
name|entityTracker
init|=
operator|new
name|EntityTracker
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SourceStateTracker
name|sourceStateTracker
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|LlapNodeId
argument_list|>
name|nodesForQuery
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|LlapProtocolClientProxy
name|communicator
decl_stmt|;
specifier|private
name|long
name|deleteDelayOnDagComplete
decl_stmt|;
specifier|private
specifier|final
name|LlapTaskUmbilicalProtocol
name|umbilical
decl_stmt|;
specifier|private
specifier|final
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|token
decl_stmt|;
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
specifier|private
name|String
name|amHost
decl_stmt|;
specifier|private
name|String
name|timelineServerUri
decl_stmt|;
comment|// These two structures track the list of known nodes, and the list of nodes which are sending in keep-alive heartbeats.
comment|// Primarily for debugging purposes a.t.m, since there's some unexplained TASK_TIMEOUTS which are currently being observed.
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|LlapNodeId
argument_list|,
name|Long
argument_list|>
name|knownNodeMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|LlapNodeId
argument_list|,
name|PingingNodeInfo
argument_list|>
name|pingedNodeMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LlapRegistryService
name|serviceRegistry
decl_stmt|;
specifier|private
specifier|volatile
name|QueryIdentifierProto
name|currentQueryIdentifierProto
decl_stmt|;
specifier|private
specifier|volatile
name|String
name|currentHiveQueryId
decl_stmt|;
specifier|public
name|LlapTaskCommunicator
parameter_list|(
name|TaskCommunicatorContext
name|taskCommunicatorContext
parameter_list|)
block|{
name|super
argument_list|(
name|taskCommunicatorContext
argument_list|)
expr_stmt|;
name|Credentials
name|credentials
init|=
name|taskCommunicatorContext
operator|.
name|getAMCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|credentials
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
name|llapToken
init|=
operator|(
name|Token
argument_list|<
name|LlapTokenIdentifier
argument_list|>
operator|)
name|credentials
operator|.
name|getToken
argument_list|(
name|LlapTokenIdentifier
operator|.
name|KIND_NAME
argument_list|)
decl_stmt|;
name|this
operator|.
name|token
operator|=
name|llapToken
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|token
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Task communicator with a token "
operator|+
name|token
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|(
name|token
operator|!=
literal|null
operator|)
operator|==
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Not closing this at the moment at shutdown, since this could be a shared instance.
name|serviceRegistry
operator|=
name|LlapRegistryService
operator|.
name|getClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|umbilical
operator|=
operator|new
name|LlapTaskUmbilicalProtocolImpl
argument_list|(
name|getUmbilical
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO Avoid reading this from the environment
name|user
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|USER
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|credentialMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|sourceStateTracker
operator|=
operator|new
name|SourceStateTracker
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|LLAP_TOKEN_NAME
init|=
name|LlapTokenIdentifier
operator|.
name|KIND_NAME
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
name|void
name|processSendError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|t
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cause
operator|instanceof
name|RetriableException
condition|)
return|return;
if|if
condition|(
operator|(
operator|(
name|cause
operator|instanceof
name|InvalidToken
operator|&&
name|cause
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
name|cause
operator|instanceof
name|RemoteException
operator|&&
name|cause
operator|.
name|getCause
argument_list|()
operator|==
literal|null
operator|&&
name|cause
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"InvalidToken"
argument_list|)
operator|)
operator|)
operator|&&
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|LLAP_TOKEN_NAME
argument_list|)
condition|)
block|{
break|break;
block|}
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
return|return;
name|LOG
operator|.
name|error
argument_list|(
literal|"Reporting fatal error - LLAP token appears to be invalid."
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|reportError
argument_list|(
name|ServicePluginErrorDefaults
operator|.
name|OTHER_FATAL
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|int
name|numThreads
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_COMMUNICATOR_NUM_THREADS
argument_list|)
decl_stmt|;
name|this
operator|.
name|communicator
operator|=
name|createLlapProtocolClientProxy
argument_list|(
name|numThreads
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteDelayOnDagComplete
operator|=
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_FILE_CLEANUP_DELAY_SECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running LlapTaskCommunicator with "
operator|+
literal|"fileCleanupDelay="
operator|+
name|deleteDelayOnDagComplete
operator|+
literal|", numCommunicatorThreads="
operator|+
name|numThreads
argument_list|)
expr_stmt|;
name|this
operator|.
name|communicator
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|scheme
init|=
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|ahsUrl
init|=
name|WebAppUtils
operator|.
name|getAHSWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|timelineServerUri
operator|=
name|WebAppUtils
operator|.
name|getURLWithScheme
argument_list|(
name|scheme
argument_list|,
name|ahsUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|communicator
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|communicator
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|communicator
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startRpcServer
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
try|try
block|{
name|JobTokenSecretManager
name|jobTokenSecretManager
init|=
operator|new
name|JobTokenSecretManager
argument_list|()
decl_stmt|;
name|jobTokenSecretManager
operator|.
name|addTokenForJob
argument_list|(
name|tokenIdentifier
argument_list|,
name|sessionToken
argument_list|)
expr_stmt|;
name|int
name|numHandlers
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_TASK_COMMUNICATOR_LISTENER_THREAD_COUNT
argument_list|)
decl_stmt|;
name|server
operator|=
operator|new
name|RPC
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|setProtocol
argument_list|(
name|LlapTaskUmbilicalProtocol
operator|.
name|class
argument_list|)
operator|.
name|setBindAddress
argument_list|(
literal|"0.0.0.0"
argument_list|)
operator|.
name|setPort
argument_list|(
literal|0
argument_list|)
operator|.
name|setInstance
argument_list|(
name|umbilical
argument_list|)
operator|.
name|setNumHandlers
argument_list|(
name|numHandlers
argument_list|)
operator|.
name|setSecretManager
argument_list|(
name|jobTokenSecretManager
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|server
operator|.
name|refreshServiceAcl
argument_list|(
name|conf
argument_list|,
operator|new
name|LlapUmbilicalPolicyProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|this
operator|.
name|amHost
operator|=
name|LlapUtil
operator|.
name|getAmHostNameFromAddress
argument_list|(
name|address
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started LlapUmbilical: "
operator|+
name|umbilical
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" at address: "
operator|+
name|address
operator|+
literal|" with numHandlers="
operator|+
name|numHandlers
operator|+
literal|" using the host name "
operator|+
name|amHost
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TezUncheckedException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|protected
name|LlapProtocolClientProxy
name|createLlapProtocolClientProxy
parameter_list|(
name|int
name|numThreads
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|LlapProtocolClientProxy
argument_list|(
name|numThreads
argument_list|,
name|conf
argument_list|,
name|token
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerRunningContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|super
operator|.
name|registerRunningContainer
argument_list|(
name|containerId
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|entityTracker
operator|.
name|registerContainer
argument_list|(
name|containerId
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerContainerEnd
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerEndReason
name|endReason
parameter_list|,
name|String
name|diagnostics
parameter_list|)
block|{
name|super
operator|.
name|registerContainerEnd
argument_list|(
name|containerId
argument_list|,
name|endReason
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
if|if
condition|(
name|endReason
operator|==
name|ContainerEndReason
operator|.
name|INTERNAL_PREEMPTION
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing containerEnd for container {} caused by internal preemption"
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|TezTaskAttemptID
name|taskAttemptId
init|=
name|entityTracker
operator|.
name|getTaskAttemptIdForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskAttemptId
operator|!=
literal|null
condition|)
block|{
name|sendTaskTerminated
argument_list|(
name|taskAttemptId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|entityTracker
operator|.
name|unregisterContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerRunningTaskAttempt
parameter_list|(
specifier|final
name|ContainerId
name|containerId
parameter_list|,
specifier|final
name|TaskSpec
name|taskSpec
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|additionalResources
parameter_list|,
name|Credentials
name|credentials
parameter_list|,
name|boolean
name|credentialsChanged
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|super
operator|.
name|registerRunningTaskAttempt
argument_list|(
name|containerId
argument_list|,
name|taskSpec
argument_list|,
name|additionalResources
argument_list|,
name|credentials
argument_list|,
name|credentialsChanged
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|int
name|dagId
init|=
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|getVertexID
argument_list|()
operator|.
name|getDAGId
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentQueryIdentifierProto
operator|==
literal|null
operator|||
operator|(
name|dagId
operator|!=
name|currentQueryIdentifierProto
operator|.
name|getDagIndex
argument_list|()
operator|)
condition|)
block|{
comment|// TODO HiveQueryId extraction by parsing the Processor payload is ugly. This can be improved
comment|// once TEZ-2672 is fixed.
name|String
name|hiveQueryId
decl_stmt|;
try|try
block|{
name|hiveQueryId
operator|=
name|extractQueryId
argument_list|(
name|taskSpec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to extract query id from task spec: "
operator|+
name|taskSpec
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|hiveQueryId
argument_list|,
literal|"Unexpected null query id"
argument_list|)
expr_stmt|;
name|resetCurrentDag
argument_list|(
name|dagId
argument_list|,
name|hiveQueryId
argument_list|)
expr_stmt|;
block|}
name|ContainerInfo
name|containerInfo
init|=
name|getContainerInfo
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|String
name|host
decl_stmt|;
name|int
name|port
decl_stmt|;
if|if
condition|(
name|containerInfo
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|containerInfo
init|)
block|{
name|host
operator|=
name|containerInfo
operator|.
name|host
expr_stmt|;
name|port
operator|=
name|containerInfo
operator|.
name|port
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TODO Handle this properly
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ContainerInfo not found for container: "
operator|+
name|containerId
operator|+
literal|", while trying to launch task: "
operator|+
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
throw|;
block|}
name|LlapNodeId
name|nodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|registerKnownNode
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|entityTracker
operator|.
name|registerTaskAttempt
argument_list|(
name|containerId
argument_list|,
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|nodesForQuery
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|sourceStateTracker
operator|.
name|registerTaskForStateUpdates
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|taskSpec
operator|.
name|getInputs
argument_list|()
argument_list|)
expr_stmt|;
name|FragmentRuntimeInfo
name|fragmentRuntimeInfo
decl_stmt|;
try|try
block|{
name|fragmentRuntimeInfo
operator|=
name|sourceStateTracker
operator|.
name|getFragmentRuntimeInfo
argument_list|(
name|taskSpec
operator|.
name|getVertexName
argument_list|()
argument_list|,
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|priority
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while trying to get runtimeFragmentInfo for fragmentId={}, containerId={}, currentQI={}, currentQueryId={}"
argument_list|,
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|currentQueryIdentifierProto
argument_list|,
name|currentHiveQueryId
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|SubmitWorkRequestProto
name|requestProto
decl_stmt|;
try|try
block|{
name|requestProto
operator|=
name|constructSubmitWorkRequest
argument_list|(
name|containerId
argument_list|,
name|taskSpec
argument_list|,
name|fragmentRuntimeInfo
argument_list|,
name|currentHiveQueryId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to construct request"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Have to register this up front right now. Otherwise, it's possible for the task to start
comment|// sending out status/DONE/KILLED/FAILED messages before TAImpl knows how to handle them.
name|getContext
argument_list|()
operator|.
name|taskStartedRemotely
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|communicator
operator|.
name|sendSubmitWork
argument_list|(
name|requestProto
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
operator|new
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
argument_list|<
name|SubmitWorkResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setResponse
parameter_list|(
name|SubmitWorkResponseProto
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|.
name|hasSubmissionState
argument_list|()
condition|)
block|{
name|LlapDaemonProtocolProtos
operator|.
name|SubmissionStateProto
name|ss
init|=
name|response
operator|.
name|getSubmissionState
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|equals
argument_list|(
name|LlapDaemonProtocolProtos
operator|.
name|SubmissionStateProto
operator|.
name|REJECTED
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to run task: "
operator|+
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|+
literal|" on containerId: "
operator|+
name|containerId
operator|+
literal|", Service Busy"
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|taskKilled
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptEndReason
operator|.
name|EXECUTOR_BUSY
argument_list|,
literal|"Service Busy"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|// TODO: Provide support for reporting errors
comment|// This should never happen as server always returns a valid status on success
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"SubmissionState in response is expected!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|response
operator|.
name|hasUniqueNodeId
argument_list|()
condition|)
block|{
name|entityTracker
operator|.
name|registerTaskSubmittedToNode
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|response
operator|.
name|getUniqueNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully launched task: "
operator|+
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|indicateError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Throwable
name|originalError
init|=
name|t
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|ServiceException
condition|)
block|{
name|ServiceException
name|se
init|=
operator|(
name|ServiceException
operator|)
name|t
decl_stmt|;
name|t
operator|=
name|se
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|RemoteException
condition|)
block|{
comment|// All others from the remote service cause the task to FAIL.
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to run task: "
operator|+
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|+
literal|" on containerId: "
operator|+
name|containerId
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|processSendError
argument_list|(
name|originalError
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|taskFailed
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskFailureType
operator|.
name|NON_FATAL
argument_list|,
name|TaskAttemptEndReason
operator|.
name|OTHER
argument_list|,
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Exception from the RPC layer - communication failure, consider as KILLED / service down.
if|if
condition|(
name|t
operator|instanceof
name|IOException
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to run task: "
operator|+
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|+
literal|" on containerId: "
operator|+
name|containerId
operator|+
literal|", Communication Error"
argument_list|)
expr_stmt|;
name|processSendError
argument_list|(
name|originalError
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|taskKilled
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskAttemptEndReason
operator|.
name|COMMUNICATION_ERROR
argument_list|,
literal|"Communication Error"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Anything else is a FAIL.
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to run task: "
operator|+
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|+
literal|" on containerId: "
operator|+
name|containerId
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|processSendError
argument_list|(
name|originalError
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|taskFailed
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
argument_list|,
name|TaskFailureType
operator|.
name|NON_FATAL
argument_list|,
name|TaskAttemptEndReason
operator|.
name|OTHER
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterRunningTaskAttempt
parameter_list|(
specifier|final
name|TezTaskAttemptID
name|taskAttemptId
parameter_list|,
name|TaskAttemptEndReason
name|endReason
parameter_list|,
name|String
name|diagnostics
parameter_list|)
block|{
name|super
operator|.
name|unregisterRunningTaskAttempt
argument_list|(
name|taskAttemptId
argument_list|,
name|endReason
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
if|if
condition|(
name|endReason
operator|==
name|TaskAttemptEndReason
operator|.
name|INTERNAL_PREEMPTION
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing taskEnd for task {} caused by internal preemption"
argument_list|,
name|taskAttemptId
argument_list|)
expr_stmt|;
name|sendTaskTerminated
argument_list|(
name|taskAttemptId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|entityTracker
operator|.
name|unregisterTaskAttempt
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
comment|// This will also be invoked for tasks which have been KILLED / rejected by the daemon.
comment|// Informing the daemon becomes necessary once the LlapScheduler supports preemption
comment|// and/or starts attempting to kill tasks which may be running on a node.
block|}
specifier|private
name|void
name|sendTaskTerminated
parameter_list|(
specifier|final
name|TezTaskAttemptID
name|taskAttemptId
parameter_list|,
name|boolean
name|invokedByContainerEnd
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to send terminateRequest for fragment {} due to internal preemption invoked by {}"
argument_list|,
name|taskAttemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|invokedByContainerEnd
condition|?
literal|"containerEnd"
else|:
literal|"taskEnd"
argument_list|)
expr_stmt|;
name|LlapNodeId
name|nodeId
init|=
name|entityTracker
operator|.
name|getNodeIdForTaskAttempt
argument_list|(
name|taskAttemptId
argument_list|)
decl_stmt|;
comment|// NodeId can be null if the task gets unregistered due to failure / being killed by the daemon itself
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|TerminateFragmentRequestProto
name|request
init|=
name|TerminateFragmentRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setQueryIdentifier
argument_list|(
name|constructQueryIdentifierProto
argument_list|(
name|taskAttemptId
operator|.
name|getTaskID
argument_list|()
operator|.
name|getVertexID
argument_list|()
operator|.
name|getDAGId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setFragmentIdentifierString
argument_list|(
name|taskAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|communicator
operator|.
name|sendTerminateFragment
argument_list|(
name|request
argument_list|,
name|nodeId
operator|.
name|getHostname
argument_list|()
argument_list|,
name|nodeId
operator|.
name|getPort
argument_list|()
argument_list|,
operator|new
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
argument_list|<
name|TerminateFragmentResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setResponse
parameter_list|(
name|TerminateFragmentResponseProto
name|response
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|indicateError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to send terminate fragment request for {}"
argument_list|,
name|taskAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|processSendError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not sending terminate request for fragment {} since it's node is not known. Already unregistered"
argument_list|,
name|taskAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dagComplete
parameter_list|(
specifier|final
name|int
name|dagIdentifier
parameter_list|)
block|{
name|QueryIdentifierProto
name|queryIdentifierProto
init|=
name|constructQueryIdentifierProto
argument_list|(
name|dagIdentifier
argument_list|)
decl_stmt|;
name|QueryCompleteRequestProto
name|request
init|=
name|QueryCompleteRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setQueryIdentifier
argument_list|(
name|queryIdentifierProto
argument_list|)
operator|.
name|setDeleteDelay
argument_list|(
name|deleteDelayOnDagComplete
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|LlapNodeId
name|llapNodeId
range|:
name|nodesForQuery
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending dagComplete message for {}, to {}"
argument_list|,
name|dagIdentifier
argument_list|,
name|llapNodeId
argument_list|)
expr_stmt|;
name|communicator
operator|.
name|sendQueryComplete
argument_list|(
name|request
argument_list|,
name|llapNodeId
operator|.
name|getHostname
argument_list|()
argument_list|,
name|llapNodeId
operator|.
name|getPort
argument_list|()
argument_list|,
operator|new
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
argument_list|<
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setResponse
parameter_list|(
name|LlapDaemonProtocolProtos
operator|.
name|QueryCompleteResponseProto
name|response
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|indicateError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to indicate dag complete dagId={} to node {}"
argument_list|,
name|dagIdentifier
argument_list|,
name|llapNodeId
argument_list|)
expr_stmt|;
name|processSendError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|nodesForQuery
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// TODO Ideally move some of the other cleanup code from resetCurrentDag over here
block|}
annotation|@
name|Override
specifier|public
name|void
name|onVertexStateUpdated
parameter_list|(
name|VertexStateUpdate
name|vertexStateUpdate
parameter_list|)
block|{
comment|// Delegate updates over to the source state tracker.
name|sourceStateTracker
operator|.
name|sourceStateUpdated
argument_list|(
name|vertexStateUpdate
operator|.
name|getVertexName
argument_list|()
argument_list|,
name|vertexStateUpdate
operator|.
name|getVertexState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO HIVE-15163. Handle cases where nodes go down and come back on the same port. Historic information
comment|// can prevent updates from being sent out to the new node.
specifier|public
name|void
name|sendStateUpdate
parameter_list|(
specifier|final
name|LlapNodeId
name|nodeId
parameter_list|,
specifier|final
name|SourceStateUpdatedRequestProto
name|request
parameter_list|)
block|{
name|communicator
operator|.
name|sendSourceStateUpdate
argument_list|(
name|request
argument_list|,
name|nodeId
argument_list|,
operator|new
name|LlapProtocolClientProxy
operator|.
name|ExecuteRequestCallback
argument_list|<
name|SourceStateUpdatedResponseProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setResponse
parameter_list|(
name|SourceStateUpdatedResponseProto
name|response
parameter_list|)
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|indicateError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Re-attempts are left upto the RPC layer. If there's a failure reported after this,
comment|// mark all attempts running on this node as KILLED. The node itself cannot be killed from
comment|// here, that's only possible via the scheduler.
comment|// The assumption is that if there's a failure to communicate with the node - it will
comment|// eventually timeout - and no more tasks will be allocated on it.
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to send state update to node: {}, Killing all attempts running on "
operator|+
literal|"node. Attempted StateUpdate={}"
argument_list|,
name|nodeId
argument_list|,
name|request
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|processSendError
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|BiMap
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
name|biMap
init|=
name|entityTracker
operator|.
name|getContainerAttemptMapForNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|biMap
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|biMap
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
name|entry
range|:
name|biMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending a kill for attempt {}, due to a communication failure while sending a finishable state update"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|taskKilled
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|TaskAttemptEndReason
operator|.
name|NODE_FAILED
argument_list|,
literal|"Failed to send finishable state update to node "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getInProgressLogsUrl
parameter_list|(
name|TezTaskAttemptID
name|attemptID
parameter_list|,
name|NodeId
name|containerNodeId
parameter_list|)
block|{
return|return
name|constructLogUrl
argument_list|(
name|attemptID
argument_list|,
name|containerNodeId
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCompletedLogsUrl
parameter_list|(
name|TezTaskAttemptID
name|attemptID
parameter_list|,
name|NodeId
name|containerNodeId
parameter_list|)
block|{
return|return
name|constructLogUrl
argument_list|(
name|attemptID
argument_list|,
name|containerNodeId
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|String
name|constructLogUrl
parameter_list|(
specifier|final
name|TezTaskAttemptID
name|attemptID
parameter_list|,
specifier|final
name|NodeId
name|containerNodeId
parameter_list|,
specifier|final
name|boolean
name|isDone
parameter_list|)
block|{
if|if
condition|(
name|timelineServerUri
operator|==
literal|null
operator|||
name|containerNodeId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|ServiceInstance
argument_list|>
name|instanceSet
decl_stmt|;
try|try
block|{
name|instanceSet
operator|=
name|serviceRegistry
operator|.
name|getInstances
argument_list|()
operator|.
name|getByHost
argument_list|(
name|containerNodeId
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Not failing the job due to a failure constructing the log url
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to find instance for yarnNodeId={} to construct the log url. Exception message={}"
argument_list|,
name|containerNodeId
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Once NodeId includes fragmentId - this becomes a lot more reliable.
if|if
condition|(
name|instanceSet
operator|!=
literal|null
condition|)
block|{
name|ServiceInstance
name|matchedInstance
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServiceInstance
name|instance
range|:
name|instanceSet
control|)
block|{
if|if
condition|(
name|instance
operator|.
name|getRpcPort
argument_list|()
operator|==
name|containerNodeId
operator|.
name|getPort
argument_list|()
condition|)
block|{
name|matchedInstance
operator|=
name|instance
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|matchedInstance
operator|!=
literal|null
condition|)
block|{
name|String
name|containerIdString
init|=
name|matchedInstance
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_DAEMON_CONTAINER_ID
operator|.
name|varname
argument_list|)
decl_stmt|;
name|String
name|nmNodeAddress
init|=
name|matchedInstance
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|ConfVars
operator|.
name|LLAP_DAEMON_NM_ADDRESS
operator|.
name|varname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|containerIdString
argument_list|)
operator|&&
operator|!
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|nmNodeAddress
argument_list|)
condition|)
block|{
return|return
name|constructLlapLogUrl
argument_list|(
name|attemptID
argument_list|,
name|containerIdString
argument_list|,
name|isDone
argument_list|,
name|nmNodeAddress
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|constructLlapLogUrl
parameter_list|(
specifier|final
name|TezTaskAttemptID
name|attemptID
parameter_list|,
specifier|final
name|String
name|containerIdString
parameter_list|,
specifier|final
name|boolean
name|isDone
parameter_list|,
specifier|final
name|String
name|nmAddress
parameter_list|)
block|{
name|String
name|dagId
init|=
name|attemptID
operator|.
name|getTaskID
argument_list|()
operator|.
name|getVertexID
argument_list|()
operator|.
name|getDAGId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
name|JOINER
operator|.
name|join
argument_list|(
name|currentHiveQueryId
argument_list|,
literal|"-"
argument_list|,
name|dagId
argument_list|,
literal|".log"
argument_list|,
operator|(
name|isDone
condition|?
literal|".done"
else|:
literal|""
operator|)
argument_list|,
literal|"?nm.id="
argument_list|,
name|nmAddress
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|PATH_JOINER
operator|.
name|join
argument_list|(
name|timelineServerUri
argument_list|,
literal|"ws"
argument_list|,
literal|"v1"
argument_list|,
literal|"applicationhistory"
argument_list|,
literal|"containers"
argument_list|,
name|containerIdString
argument_list|,
literal|"logs"
argument_list|,
name|filename
argument_list|)
decl_stmt|;
return|return
name|url
return|;
block|}
specifier|private
specifier|static
class|class
name|PingingNodeInfo
block|{
specifier|final
name|AtomicLong
name|logTimestamp
decl_stmt|;
specifier|final
name|AtomicInteger
name|pingCount
decl_stmt|;
name|PingingNodeInfo
parameter_list|(
name|long
name|currentTs
parameter_list|)
block|{
name|logTimestamp
operator|=
operator|new
name|AtomicLong
argument_list|(
name|currentTs
argument_list|)
expr_stmt|;
name|pingCount
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|registerKnownNode
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|)
block|{
name|Long
name|old
init|=
name|knownNodeMap
operator|.
name|putIfAbsent
argument_list|(
name|nodeId
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Added new known node: {}"
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|registerPingingNode
parameter_list|(
name|LlapNodeId
name|nodeId
parameter_list|)
block|{
name|long
name|currentTs
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
name|PingingNodeInfo
name|ni
init|=
operator|new
name|PingingNodeInfo
argument_list|(
name|currentTs
argument_list|)
decl_stmt|;
name|PingingNodeInfo
name|old
init|=
name|pingedNodeMap
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|ni
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isInfoEnabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Added new pinging node: [{}]"
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|old
operator|.
name|pingCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|// The node should always be known by this point. Log occasionally if it is not known.
if|if
condition|(
operator|!
name|knownNodeMap
operator|.
name|containsKey
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
comment|// First time this is seen. Log it.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received ping from unknownNode: [{}], count={}"
argument_list|,
name|nodeId
argument_list|,
name|ni
operator|.
name|pingCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pinged before. Log only occasionally.
if|if
condition|(
name|currentTs
operator|>
name|old
operator|.
name|logTimestamp
operator|.
name|get
argument_list|()
operator|+
literal|5000l
condition|)
block|{
comment|// 5 seconds elapsed. Log again.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received ping from unknownNode: [{}], count={}"
argument_list|,
name|nodeId
argument_list|,
name|old
operator|.
name|pingCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|old
operator|.
name|logTimestamp
operator|.
name|set
argument_list|(
name|currentTs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|final
name|AtomicLong
name|nodeNotFoundLogTime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|void
name|nodePinged
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|uniqueId
parameter_list|,
name|int
name|port
parameter_list|,
name|TezAttemptArray
name|tasks
parameter_list|)
block|{
comment|// TODO: do we ever need the port? we could just do away with nodeId altogether.
name|LlapNodeId
name|nodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|registerPingingNode
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|BiMap
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
name|biMap
init|=
name|entityTracker
operator|.
name|getContainerAttemptMapForNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|biMap
operator|!=
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|TezTaskAttemptID
argument_list|>
name|attempts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Writable
name|w
range|:
name|tasks
operator|.
name|get
argument_list|()
control|)
block|{
name|attempts
operator|.
name|add
argument_list|(
operator|(
name|TezTaskAttemptID
operator|)
name|w
argument_list|)
expr_stmt|;
block|}
name|String
name|error
init|=
literal|""
decl_stmt|;
synchronized|synchronized
init|(
name|biMap
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
name|entry
range|:
name|biMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// TODO: this is a stopgap fix. We really need to change all mappings by unique node ID,
comment|//       or at least (in this case) track the latest unique ID for LlapNode and retry all
comment|//       older-node tasks proactively. For now let the heartbeats fail them.
name|TezTaskAttemptID
name|attemptId
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|taskNodeId
init|=
name|entityTracker
operator|.
name|getUniqueNodeId
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
comment|// Unique ID is registered based on Submit response. Theoretically, we could get a ping
comment|// when the task is valid but we haven't stored the unique ID yet, so taskNodeId is null.
comment|// However, the next heartbeat(s) should get the value eventually and mark task as alive.
comment|// Also, we prefer a missed heartbeat over a stuck query in case of discrepancy in ET.
if|if
condition|(
name|taskNodeId
operator|!=
literal|null
operator|&&
name|taskNodeId
operator|.
name|equals
argument_list|(
name|uniqueId
argument_list|)
condition|)
block|{
if|if
condition|(
name|attempts
operator|.
name|contains
argument_list|(
name|attemptId
argument_list|)
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|taskAlive
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|error
operator|+=
operator|(
name|attemptId
operator|+
literal|", "
operator|)
expr_stmt|;
block|}
name|getContext
argument_list|()
operator|.
name|containerAlive
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|error
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The tasks we expected to be on the node are not there: "
operator|+
name|error
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|long
name|currentTs
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentTs
operator|>
name|nodeNotFoundLogTime
operator|.
name|get
argument_list|()
operator|+
literal|5000l
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received ping from node without any registered tasks or containers: "
operator|+
name|hostname
operator|+
literal|":"
operator|+
name|port
operator|+
literal|". Could be caused by pre-emption by the AM,"
operator|+
literal|" or a mismatched hostname. Enable debug logging for mismatched host names"
argument_list|)
expr_stmt|;
name|nodeNotFoundLogTime
operator|.
name|set
argument_list|(
name|currentTs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|resetCurrentDag
parameter_list|(
name|int
name|newDagId
parameter_list|,
name|String
name|hiveQueryId
parameter_list|)
block|{
comment|// Working on the assumption that a single DAG runs at a time per AM.
name|currentQueryIdentifierProto
operator|=
name|constructQueryIdentifierProto
argument_list|(
name|newDagId
argument_list|)
expr_stmt|;
name|currentHiveQueryId
operator|=
name|hiveQueryId
expr_stmt|;
name|sourceStateTracker
operator|.
name|resetState
argument_list|(
name|currentQueryIdentifierProto
argument_list|)
expr_stmt|;
name|nodesForQuery
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CurrentDagId set to: "
operator|+
name|newDagId
operator|+
literal|", name="
operator|+
name|getContext
argument_list|()
operator|.
name|getCurrentDagInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|", queryId="
operator|+
name|hiveQueryId
argument_list|)
expr_stmt|;
comment|// TODO Is it possible for heartbeats to come in from lost tasks - those should be told to die, which
comment|// is likely already happening.
block|}
specifier|private
name|String
name|extractQueryId
parameter_list|(
name|TaskSpec
name|taskSpec
parameter_list|)
throws|throws
name|IOException
block|{
name|UserPayload
name|processorPayload
init|=
name|taskSpec
operator|.
name|getProcessorDescriptor
argument_list|()
operator|.
name|getUserPayload
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TezUtils
operator|.
name|createConfFromUserPayload
argument_list|(
name|processorPayload
argument_list|)
decl_stmt|;
return|return
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
return|;
block|}
specifier|private
name|SubmitWorkRequestProto
name|constructSubmitWorkRequest
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|TaskSpec
name|taskSpec
parameter_list|,
name|FragmentRuntimeInfo
name|fragmentRuntimeInfo
parameter_list|,
name|String
name|hiveQueryId
parameter_list|)
throws|throws
name|IOException
block|{
name|SubmitWorkRequestProto
operator|.
name|Builder
name|builder
init|=
name|SubmitWorkRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setFragmentNumber
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAttemptNumber
argument_list|(
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setContainerIdString
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAmHost
argument_list|(
name|getAmHostString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAmPort
argument_list|(
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentQueryIdentifierProto
operator|.
name|getDagIndex
argument_list|()
operator|==
name|taskSpec
operator|.
name|getTaskAttemptID
argument_list|()
operator|.
name|getTaskID
argument_list|()
operator|.
name|getVertexID
argument_list|()
operator|.
name|getDAGId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|credentialsBinary
init|=
name|credentialMap
operator|.
name|get
argument_list|(
name|currentQueryIdentifierProto
argument_list|)
decl_stmt|;
if|if
condition|(
name|credentialsBinary
operator|==
literal|null
condition|)
block|{
name|credentialsBinary
operator|=
name|serializeCredentials
argument_list|(
name|getContext
argument_list|()
operator|.
name|getCurrentDagInfo
argument_list|()
operator|.
name|getCredentials
argument_list|()
argument_list|)
expr_stmt|;
name|credentialMap
operator|.
name|putIfAbsent
argument_list|(
name|currentQueryIdentifierProto
argument_list|,
name|credentialsBinary
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|credentialsBinary
operator|=
name|credentialsBinary
operator|.
name|duplicate
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|setCredentialsBinary
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|credentialsBinary
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setWorkSpec
argument_list|(
name|VertexOrBinary
operator|.
name|newBuilder
argument_list|()
operator|.
name|setVertex
argument_list|(
name|Converters
operator|.
name|constructSignableVertexSpec
argument_list|(
name|taskSpec
argument_list|,
name|currentQueryIdentifierProto
argument_list|,
name|getTokenIdentifier
argument_list|()
argument_list|,
name|user
argument_list|,
name|hiveQueryId
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't call builder.setWorkSpecSignature() - Tez doesn't sign fragments
name|builder
operator|.
name|setFragmentRuntimeInfo
argument_list|(
name|fragmentRuntimeInfo
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|ByteBuffer
name|serializeCredentials
parameter_list|(
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
block|{
name|Credentials
name|containerCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|containerCredentials
operator|.
name|addAll
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|containerTokens_dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|containerCredentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|containerTokens_dob
argument_list|)
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|containerTokens_dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|containerTokens_dob
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
class|class
name|LlapTaskUmbilicalProtocolImpl
implements|implements
name|LlapTaskUmbilicalProtocol
block|{
specifier|private
specifier|final
name|TezTaskUmbilicalProtocol
name|tezUmbilical
decl_stmt|;
specifier|public
name|LlapTaskUmbilicalProtocolImpl
parameter_list|(
name|TezTaskUmbilicalProtocol
name|tezUmbilical
parameter_list|)
block|{
name|this
operator|.
name|tezUmbilical
operator|=
name|tezUmbilical
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canCommit
parameter_list|(
name|TezTaskAttemptID
name|taskid
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|tezUmbilical
operator|.
name|canCommit
argument_list|(
name|taskid
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TezHeartbeatResponse
name|heartbeat
parameter_list|(
name|TezHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|TezException
block|{
return|return
name|tezUmbilical
operator|.
name|heartbeat
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeHeartbeat
parameter_list|(
name|Text
name|hostname
parameter_list|,
name|Text
name|uniqueId
parameter_list|,
name|int
name|port
parameter_list|,
name|TezAttemptArray
name|aw
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received heartbeat from ["
operator|+
name|hostname
operator|+
literal|":"
operator|+
name|port
operator|+
literal|" ("
operator|+
name|uniqueId
operator|+
literal|")]"
argument_list|)
expr_stmt|;
block|}
name|nodePinged
argument_list|(
name|hostname
operator|.
name|toString
argument_list|()
argument_list|,
name|uniqueId
operator|.
name|toString
argument_list|()
argument_list|,
name|port
argument_list|,
name|aw
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|taskKilled
parameter_list|(
name|TezTaskAttemptID
name|taskAttemptId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO Unregister the task for state updates, which could in turn unregister the node.
name|getContext
argument_list|()
operator|.
name|taskKilled
argument_list|(
name|taskAttemptId
argument_list|,
name|TaskAttemptEndReason
operator|.
name|EXTERNAL_PREEMPTION
argument_list|,
literal|"Attempt preempted"
argument_list|)
expr_stmt|;
name|entityTracker
operator|.
name|unregisterTaskAttempt
argument_list|(
name|taskAttemptId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|versionID
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|int
name|clientMethodsHash
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProtocolSignature
operator|.
name|getProtocolSignature
argument_list|(
name|this
argument_list|,
name|protocol
argument_list|,
name|clientVersion
argument_list|,
name|clientMethodsHash
argument_list|)
return|;
block|}
block|}
comment|/**    * Track the association between known containers and taskAttempts, along with the nodes they are assigned to.    */
annotation|@
name|VisibleForTesting
specifier|static
specifier|final
class|class
name|EntityTracker
block|{
comment|// TODO: need the description of how these maps are kept consistent.
annotation|@
name|VisibleForTesting
specifier|final
name|ConcurrentMap
argument_list|<
name|TezTaskAttemptID
argument_list|,
name|LlapNodeId
argument_list|>
name|attemptToNodeMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|final
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|LlapNodeId
argument_list|>
name|containerToNodeMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|final
name|ConcurrentMap
argument_list|<
name|LlapNodeId
argument_list|,
name|BiMap
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
argument_list|>
name|nodeMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// TODO: we currently put task info everywhere before we submit it and know the "real" node id.
comment|//       Therefore, we are going to store this separately. Ideally, we should roll uniqueness
comment|//       into LlapNodeId. We get node info from registry; that should (or can) include it.
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|TezTaskAttemptID
argument_list|,
name|String
argument_list|>
name|uniqueNodeMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|void
name|registerTaskAttempt
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|TezTaskAttemptID
name|taskAttemptId
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering "
operator|+
name|containerId
operator|+
literal|", "
operator|+
name|taskAttemptId
operator|+
literal|" for node: "
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
name|LlapNodeId
name|llapNodeId
init|=
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|attemptToNodeMap
operator|.
name|putIfAbsent
argument_list|(
name|taskAttemptId
argument_list|,
name|llapNodeId
argument_list|)
expr_stmt|;
name|registerContainer
argument_list|(
name|containerId
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
comment|// nodeMap registration.
name|BiMap
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
name|tmpMap
init|=
name|HashBiMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|BiMap
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
name|old
init|=
name|nodeMap
operator|.
name|putIfAbsent
argument_list|(
name|llapNodeId
argument_list|,
name|tmpMap
argument_list|)
decl_stmt|;
name|BiMap
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
name|usedInstance
decl_stmt|;
name|usedInstance
operator|=
name|old
operator|==
literal|null
condition|?
name|tmpMap
else|:
name|old
expr_stmt|;
synchronized|synchronized
init|(
name|usedInstance
init|)
block|{
name|usedInstance
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|taskAttemptId
argument_list|)
expr_stmt|;
block|}
comment|// Make sure to put the instance back again, in case it was removed as part of a
comment|// containerEnd/taskEnd invocation.
name|nodeMap
operator|.
name|putIfAbsent
argument_list|(
name|llapNodeId
argument_list|,
name|usedInstance
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getUniqueNodeId
parameter_list|(
name|TezTaskAttemptID
name|attemptId
parameter_list|)
block|{
return|return
name|uniqueNodeMap
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
return|;
block|}
specifier|public
name|void
name|registerTaskSubmittedToNode
parameter_list|(
name|TezTaskAttemptID
name|taskAttemptID
parameter_list|,
name|String
name|uniqueNodeId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|attemptToNodeMap
init|)
block|{
if|if
condition|(
name|attemptToNodeMap
operator|.
name|containsKey
argument_list|(
name|taskAttemptID
argument_list|)
condition|)
block|{
comment|// Register only if the attempt is known. In case an unregister call
comment|// came in before the register call.
name|String
name|prev
init|=
name|uniqueNodeMap
operator|.
name|putIfAbsent
argument_list|(
name|taskAttemptID
argument_list|,
name|uniqueNodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Replaced the unique node mapping for task from "
operator|+
name|prev
operator|+
literal|" to "
operator|+
name|uniqueNodeId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|unregisterTaskAttempt
parameter_list|(
name|TezTaskAttemptID
name|attemptId
parameter_list|)
block|{
name|uniqueNodeMap
operator|.
name|remove
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|LlapNodeId
name|llapNodeId
decl_stmt|;
synchronized|synchronized
init|(
name|attemptToNodeMap
init|)
block|{
name|llapNodeId
operator|=
name|attemptToNodeMap
operator|.
name|remove
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|llapNodeId
operator|==
literal|null
condition|)
block|{
comment|// Possible since either container / task can be unregistered.
return|return;
block|}
block|}
name|BiMap
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
name|bMap
init|=
name|nodeMap
operator|.
name|get
argument_list|(
name|llapNodeId
argument_list|)
decl_stmt|;
name|ContainerId
name|matched
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bMap
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|bMap
init|)
block|{
name|matched
operator|=
name|bMap
operator|.
name|inverse
argument_list|()
operator|.
name|remove
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodeMap
operator|.
name|remove
argument_list|(
name|llapNodeId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove the container mapping
if|if
condition|(
name|matched
operator|!=
literal|null
condition|)
block|{
name|containerToNodeMap
operator|.
name|remove
argument_list|(
name|matched
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|registerContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering "
operator|+
name|containerId
operator|+
literal|" for node: "
operator|+
name|hostname
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
name|containerToNodeMap
operator|.
name|putIfAbsent
argument_list|(
name|containerId
argument_list|,
name|LlapNodeId
operator|.
name|getInstance
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
comment|// nodeMap registration is not required, since there's no taskId association.
block|}
name|LlapNodeId
name|getNodeIdForContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
name|containerToNodeMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
return|;
block|}
name|LlapNodeId
name|getNodeIdForTaskAttempt
parameter_list|(
name|TezTaskAttemptID
name|taskAttemptId
parameter_list|)
block|{
return|return
name|attemptToNodeMap
operator|.
name|get
argument_list|(
name|taskAttemptId
argument_list|)
return|;
block|}
name|ContainerId
name|getContainerIdForAttempt
parameter_list|(
name|TezTaskAttemptID
name|taskAttemptId
parameter_list|)
block|{
name|LlapNodeId
name|llapNodeId
init|=
name|getNodeIdForTaskAttempt
argument_list|(
name|taskAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|llapNodeId
operator|!=
literal|null
condition|)
block|{
name|BiMap
argument_list|<
name|TezTaskAttemptID
argument_list|,
name|ContainerId
argument_list|>
name|bMap
init|=
name|nodeMap
operator|.
name|get
argument_list|(
name|llapNodeId
argument_list|)
operator|.
name|inverse
argument_list|()
decl_stmt|;
if|if
condition|(
name|bMap
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|bMap
init|)
block|{
return|return
name|bMap
operator|.
name|get
argument_list|(
name|taskAttemptId
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|TezTaskAttemptID
name|getTaskAttemptIdForContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|LlapNodeId
name|llapNodeId
init|=
name|getNodeIdForContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|llapNodeId
operator|!=
literal|null
condition|)
block|{
name|BiMap
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
name|bMap
init|=
name|nodeMap
operator|.
name|get
argument_list|(
name|llapNodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|bMap
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|bMap
init|)
block|{
return|return
name|bMap
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|void
name|unregisterContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|LlapNodeId
name|llapNodeId
init|=
name|containerToNodeMap
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|llapNodeId
operator|==
literal|null
condition|)
block|{
comment|// Possible since either container / task can be unregistered.
return|return;
block|}
name|BiMap
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
name|bMap
init|=
name|nodeMap
operator|.
name|get
argument_list|(
name|llapNodeId
argument_list|)
decl_stmt|;
name|TezTaskAttemptID
name|matched
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bMap
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|bMap
init|)
block|{
name|matched
operator|=
name|bMap
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodeMap
operator|.
name|remove
argument_list|(
name|llapNodeId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Remove the container mapping
if|if
condition|(
name|matched
operator|!=
literal|null
condition|)
block|{
name|attemptToNodeMap
operator|.
name|remove
argument_list|(
name|matched
argument_list|)
expr_stmt|;
name|uniqueNodeMap
operator|.
name|remove
argument_list|(
name|matched
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Return a {@link BiMap} containing container->taskAttemptId mapping for the host specified.      *</p>      *<p/>      * This method return the internal structure used by the EntityTracker. Users must synchronize      * on the structure to ensure correct usage.      *      * @param llapNodeId      * @return      */
name|BiMap
argument_list|<
name|ContainerId
argument_list|,
name|TezTaskAttemptID
argument_list|>
name|getContainerAttemptMapForNode
parameter_list|(
name|LlapNodeId
name|llapNodeId
parameter_list|)
block|{
return|return
name|nodeMap
operator|.
name|get
argument_list|(
name|llapNodeId
argument_list|)
return|;
block|}
block|}
specifier|private
name|QueryIdentifierProto
name|constructQueryIdentifierProto
parameter_list|(
name|int
name|dagIdentifier
parameter_list|)
block|{
return|return
name|QueryIdentifierProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setApplicationIdString
argument_list|(
name|getContext
argument_list|()
operator|.
name|getCurrentAppIdentifier
argument_list|()
argument_list|)
operator|.
name|setDagIndex
argument_list|(
name|dagIdentifier
argument_list|)
operator|.
name|setAppAttemptNumber
argument_list|(
name|getContext
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAmHostString
parameter_list|()
block|{
return|return
name|amHost
return|;
block|}
block|}
end_class

end_unit

