begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|builtins
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|pdk
operator|.
name|HivePdkUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|pdk
operator|.
name|HivePdkUnitTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|AbstractGenericUDAFResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDAFEvaluator
operator|.
name|AggregationBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * Aggregate all maps into a single map. If there are multiple values for  * the same key, result can contain any of those values.  * Because the mappers must keep all of the data in memory, if your data is  * non-trivially large you should set hive.map.aggr=false to ensure that  * UNION_MAP is only executed in the reduce phase.  */
end_comment

begin_class
annotation|@
name|HivePdkUnitTests
argument_list|(
name|setup
operator|=
literal|""
argument_list|,
name|cleanup
operator|=
literal|""
argument_list|,
name|cases
operator|=
block|{
annotation|@
name|HivePdkUnitTest
argument_list|(
name|query
operator|=
literal|"SELECT size(UNION_MAP(MAP(sepal_width, sepal_length))) "
operator|+
literal|"FROM iris"
argument_list|,
name|result
operator|=
literal|"23"
argument_list|)
block|}
argument_list|)
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"union_map"
argument_list|,
name|value
operator|=
literal|"_FUNC_(col) - aggregate given maps into a single map"
argument_list|,
name|extended
operator|=
literal|"Aggregate maps, returns as a HashMap."
argument_list|)
specifier|public
class|class
name|UDAFUnionMap
extends|extends
name|AbstractGenericUDAFResolver
block|{
annotation|@
name|Override
specifier|public
name|GenericUDAFEvaluator
name|getEvaluator
parameter_list|(
name|TypeInfo
index|[]
name|parameters
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// Next two validation calls are dependent on HIVE-2524, so
comment|// leave them commented out for now.
comment|//
comment|// new LengthEquals(1).check(parameters.length);
comment|// new IsMap().check(parameters[0], 0);
return|return
operator|new
name|Evaluator
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|State
implements|implements
name|AggregationBuffer
block|{
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|Evaluator
extends|extends
name|GenericUDAFEvaluator
block|{
name|ObjectInspector
name|inputOI
decl_stmt|;
name|MapObjectInspector
name|internalMergeOI
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|init
parameter_list|(
name|Mode
name|m
parameter_list|,
name|ObjectInspector
index|[]
name|parameters
parameter_list|)
throws|throws
name|HiveException
block|{
name|super
operator|.
name|init
argument_list|(
name|m
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|==
name|Mode
operator|.
name|COMPLETE
operator|||
name|m
operator|==
name|Mode
operator|.
name|PARTIAL1
condition|)
block|{
name|inputOI
operator|=
operator|(
name|MapObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|internalMergeOI
operator|=
operator|(
name|MapObjectInspector
operator|)
name|parameters
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|parameters
index|[
literal|0
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AggregationBuffer
name|getNewAggregationBuffer
parameter_list|()
throws|throws
name|HiveException
block|{
return|return
operator|new
name|State
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|iterate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
index|[]
name|input
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|input
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|State
name|state
init|=
operator|(
name|State
operator|)
name|agg
decl_stmt|;
name|state
operator|.
name|map
operator|.
name|putAll
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|input
index|[
literal|0
index|]
argument_list|,
name|inputOI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|merge
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|,
name|Object
name|partial
parameter_list|)
throws|throws
name|HiveException
block|{
if|if
condition|(
name|partial
operator|!=
literal|null
condition|)
block|{
name|State
name|state
init|=
operator|(
name|State
operator|)
name|agg
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|pset
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|partial
argument_list|,
name|internalMergeOI
argument_list|)
decl_stmt|;
name|state
operator|.
name|map
operator|.
name|putAll
argument_list|(
name|pset
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
operator|(
operator|(
name|State
operator|)
name|agg
operator|)
operator|.
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminate
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|(
operator|(
name|State
operator|)
name|agg
operator|)
operator|.
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|terminatePartial
parameter_list|(
name|AggregationBuffer
name|agg
parameter_list|)
throws|throws
name|HiveException
block|{
return|return
operator|(
operator|(
name|State
operator|)
name|agg
operator|)
operator|.
name|map
return|;
block|}
block|}
block|}
end_class

end_unit

