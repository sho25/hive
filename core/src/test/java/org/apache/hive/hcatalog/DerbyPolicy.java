begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|hcatalog
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|derby
operator|.
name|security
operator|.
name|SystemPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|CodeSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * A security policy that grants usederbyinternals  *  *<p>  *   HCatalog tests use Security Manager to handle exits.  With Derby version 10.14.1, if a  *   security manager is configured, embedded Derby requires usederbyinternals permission, and  *   that is checked directly using AccessController.checkPermission.  This class will be used to  *   setup a security policy to grant usederbyinternals, in tests that use NoExitSecurityManager.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|DerbyPolicy
extends|extends
name|Policy
block|{
specifier|private
specifier|static
name|PermissionCollection
name|perms
decl_stmt|;
specifier|public
name|DerbyPolicy
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|perms
operator|==
literal|null
condition|)
block|{
name|perms
operator|=
operator|new
name|DerbyPermissionCollection
argument_list|()
expr_stmt|;
name|addPermissions
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PermissionCollection
name|getPermissions
parameter_list|(
name|CodeSource
name|codesource
parameter_list|)
block|{
return|return
name|perms
return|;
block|}
specifier|private
name|void
name|addPermissions
parameter_list|()
block|{
name|SystemPermission
name|systemPermission
init|=
operator|new
name|SystemPermission
argument_list|(
literal|"engine"
argument_list|,
literal|"usederbyinternals"
argument_list|)
decl_stmt|;
name|perms
operator|.
name|add
argument_list|(
name|systemPermission
argument_list|)
expr_stmt|;
block|}
class|class
name|DerbyPermissionCollection
extends|extends
name|PermissionCollection
block|{
name|ArrayList
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
operator|new
name|ArrayList
argument_list|<
name|Permission
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|add
parameter_list|(
name|Permission
name|p
parameter_list|)
block|{
name|perms
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|implies
parameter_list|(
name|Permission
name|p
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Permission
argument_list|>
name|i
init|=
name|perms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|Permission
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|implies
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Enumeration
argument_list|<
name|Permission
argument_list|>
name|elements
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|perms
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

