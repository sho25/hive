begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|RegexSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Streaming Writer handles text input data with regex. Uses  * org.apache.hadoop.hive.serde2.RegexSerDe  *  * NOTE: This record writer is NOT thread-safe. Use one record writer per streaming connection.  */
end_comment

begin_class
specifier|public
class|class
name|StrictRegexWriter
extends|extends
name|AbstractRecordWriter
block|{
specifier|private
name|String
name|regex
decl_stmt|;
specifier|private
name|RegexSerDe
name|serde
decl_stmt|;
specifier|private
name|StrictRegexWriter
parameter_list|(
specifier|final
name|Builder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
operator|.
name|lineDelimiter
argument_list|)
expr_stmt|;
name|this
operator|.
name|regex
operator|=
name|builder
operator|.
name|regex
expr_stmt|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|String
name|regex
decl_stmt|;
specifier|private
name|String
name|lineDelimiter
decl_stmt|;
specifier|public
name|Builder
name|withRegex
parameter_list|(
specifier|final
name|String
name|regex
parameter_list|)
block|{
name|this
operator|.
name|regex
operator|=
name|regex
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|withLineDelimiterPattern
parameter_list|(
specifier|final
name|String
name|lineDelimiter
parameter_list|)
block|{
name|this
operator|.
name|lineDelimiter
operator|=
name|lineDelimiter
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|StrictRegexWriter
name|build
parameter_list|()
block|{
return|return
operator|new
name|StrictRegexWriter
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Creates RegexSerDe    *    * @throws SerializationError if serde could not be initialized    */
annotation|@
name|Override
specifier|public
name|RegexSerDe
name|createSerde
parameter_list|()
throws|throws
name|SerializationError
block|{
try|try
block|{
name|Properties
name|tableProps
init|=
name|table
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|tableProps
operator|.
name|setProperty
argument_list|(
name|RegexSerDe
operator|.
name|INPUT_REGEX
argument_list|,
name|regex
argument_list|)
expr_stmt|;
name|tableProps
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|inputColumns
argument_list|)
argument_list|)
expr_stmt|;
name|tableProps
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|":"
argument_list|)
operator|.
name|join
argument_list|(
name|inputTypes
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|columnComments
init|=
name|tableProps
operator|.
name|getProperty
argument_list|(
literal|"columns.comments"
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnComments
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|comments
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|'\0'
argument_list|)
operator|.
name|split
argument_list|(
name|columnComments
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|commentsSize
init|=
name|comments
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputColumns
operator|.
name|size
argument_list|()
operator|-
name|commentsSize
condition|;
name|i
operator|++
control|)
block|{
name|comments
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|tableProps
operator|.
name|setProperty
argument_list|(
literal|"columns.comments"
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|'\0'
argument_list|)
operator|.
name|join
argument_list|(
name|comments
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RegexSerDe
name|serde
init|=
operator|new
name|RegexSerDe
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|tableProps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|serde
operator|=
name|serde
expr_stmt|;
return|return
name|serde
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerializationError
argument_list|(
literal|"Error initializing serde "
operator|+
name|RegexSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Encode Utf8 encoded string bytes using RegexSerDe    *    * @param utf8StrRecord - serialized record    * @return The encoded object    * @throws SerializationError - in case of any deserialization error    */
annotation|@
name|Override
specifier|public
name|Object
name|encode
parameter_list|(
name|byte
index|[]
name|utf8StrRecord
parameter_list|)
throws|throws
name|SerializationError
block|{
try|try
block|{
name|Text
name|blob
init|=
operator|new
name|Text
argument_list|(
name|utf8StrRecord
argument_list|)
decl_stmt|;
return|return
name|serde
operator|.
name|deserialize
argument_list|(
name|blob
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerializationError
argument_list|(
literal|"Unable to convert byte[] record into Object"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

