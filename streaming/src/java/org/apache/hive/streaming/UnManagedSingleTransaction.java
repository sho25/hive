begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnToWriteId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Receives a single writeId. Doesn't open connections to the metastore  * so the commit has to be done externally by the entity that created  * the writeId.  */
end_comment

begin_class
specifier|public
class|class
name|UnManagedSingleTransaction
extends|extends
name|AbstractStreamingTransaction
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UnManagedSingleTransaction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|username
decl_stmt|;
specifier|private
specifier|final
name|HiveStreamingConnection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|partitions
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|public
name|UnManagedSingleTransaction
parameter_list|(
name|HiveStreamingConnection
name|conn
parameter_list|)
throws|throws
name|StreamingException
block|{
assert|assert
name|conn
operator|.
name|getWriteId
argument_list|()
operator|!=
literal|null
assert|;
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|conn
operator|.
name|getUsername
argument_list|()
expr_stmt|;
name|this
operator|.
name|recordWriter
operator|=
name|conn
operator|.
name|getRecordWriter
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|INACTIVE
expr_stmt|;
name|txnToWriteIds
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|TxnToWriteId
argument_list|(
operator|-
literal|1
argument_list|,
name|conn
operator|.
name|getWriteId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|recordWriter
operator|.
name|init
argument_list|(
name|conn
argument_list|,
name|txnToWriteIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|txnToWriteIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|conn
operator|.
name|getStatementId
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|markDead
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beginNextTransaction
parameter_list|()
throws|throws
name|StreamingException
block|{
name|beginNextTransactionImpl
argument_list|(
literal|"No more transactions available in"
operator|+
literal|" next batch for connection: "
operator|+
name|conn
operator|+
literal|" user: "
operator|+
name|username
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commit
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|partitions
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|StreamingException
block|{
name|checkIsClosed
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|commitImpl
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|markDead
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|commitImpl
parameter_list|()
throws|throws
name|StreamingException
block|{
name|recordWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|recordWriter
operator|.
name|getPartitions
argument_list|()
argument_list|)
decl_stmt|;
name|partitions
operator|.
name|addAll
argument_list|(
name|partNames
argument_list|)
expr_stmt|;
name|state
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|PREPARED_FOR_COMMIT
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|()
block|{
if|if
condition|(
name|isTxnClosed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|state
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|ABORTED
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|StreamingException
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
return|return;
block|}
name|isTxnClosed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|abort
argument_list|()
expr_stmt|;
try|try
block|{
name|closeImpl
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fatal error on "
operator|+
name|toString
argument_list|()
operator|+
literal|"; cause "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StreamingException
argument_list|(
literal|"Unable to close"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|closeImpl
parameter_list|()
throws|throws
name|StreamingException
block|{
name|state
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|INACTIVE
expr_stmt|;
name|recordWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|txnToWriteIds
operator|==
literal|null
operator|||
name|txnToWriteIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"{}"
return|;
block|}
return|return
literal|"TxnId/WriteIds=["
operator|+
name|txnToWriteIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
operator|+
literal|"] on connection = "
operator|+
name|conn
operator|+
literal|"; "
operator|+
literal|"status="
operator|+
name|state
return|;
block|}
comment|/**    * @return This class doesn't have a connection to the metastore so it won't    * create any partition    */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPartitions
parameter_list|()
block|{
return|return
name|partitions
return|;
block|}
block|}
end_class

end_unit

