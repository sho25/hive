begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|LockComponentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|LockRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DataOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HeartbeatTxnRangeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchTxnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnAbortedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnToWriteId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|DbTxnManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|lockmgr
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * Streaming transaction to use most of the times. Will query the  * metastore to get the transaction ids and the writer ids and then  * will commit them.  */
end_comment

begin_class
specifier|public
class|class
name|TransactionBatch
extends|extends
name|AbstractStreamingTransaction
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TransactionBatch
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_HEARTBEAT_INTERVAL
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|createdPartitions
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|username
decl_stmt|;
specifier|private
name|HiveStreamingConnection
name|conn
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|scheduledExecutorService
decl_stmt|;
specifier|private
name|String
name|partNameForLock
init|=
literal|null
decl_stmt|;
specifier|private
name|LockRequest
name|lockRequest
init|=
literal|null
decl_stmt|;
comment|// heartbeats can only be sent for open transactions.
comment|// there is a race between committing/aborting a transaction and heartbeat.
comment|// Example: If a heartbeat is sent for committed txn, exception will be thrown.
comment|// Similarly if we don't send a heartbeat, metastore server might abort a txn
comment|// for missed heartbeat right before commit txn call.
comment|// This lock is used to mutex commit/abort and heartbeat calls
specifier|private
specifier|final
name|ReentrantLock
name|transactionLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|// min txn id is incremented linearly within a transaction batch.
comment|// keeping minTxnId atomic as it is shared with heartbeat thread
specifier|private
specifier|final
name|AtomicLong
name|minTxnId
decl_stmt|;
comment|// max txn id does not change for a transaction batch
specifier|private
specifier|final
name|long
name|maxTxnId
decl_stmt|;
specifier|private
name|String
name|agentInfo
decl_stmt|;
specifier|private
name|int
name|numTxns
decl_stmt|;
comment|/**    * Id of the table from the streaming connection.    */
specifier|private
specifier|final
name|long
name|tableId
decl_stmt|;
comment|/**    * Tracks the state of each transaction.    */
specifier|private
name|HiveStreamingConnection
operator|.
name|TxnState
index|[]
name|txnStatus
decl_stmt|;
comment|/**    * ID of the last txn used by {@link #beginNextTransactionImpl()}.    */
specifier|private
name|long
name|lastTxnUsed
decl_stmt|;
comment|/**    * Represents a batch of transactions acquired from MetaStore.    *    * @param conn - hive streaming connection    * @throws StreamingException if failed to create new RecordUpdater for batch    */
specifier|public
name|TransactionBatch
parameter_list|(
name|HiveStreamingConnection
name|conn
parameter_list|)
throws|throws
name|StreamingException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|conn
operator|.
name|isPartitionedTable
argument_list|()
operator|&&
operator|!
name|conn
operator|.
name|isDynamicPartitioning
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partKeys
init|=
name|conn
operator|.
name|getTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
decl_stmt|;
name|partNameForLock
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|partKeys
argument_list|,
name|conn
operator|.
name|getStaticPartitionValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|conn
operator|.
name|getUsername
argument_list|()
expr_stmt|;
name|this
operator|.
name|recordWriter
operator|=
name|conn
operator|.
name|getRecordWriter
argument_list|()
expr_stmt|;
name|this
operator|.
name|agentInfo
operator|=
name|conn
operator|.
name|getAgentInfo
argument_list|()
expr_stmt|;
name|this
operator|.
name|numTxns
operator|=
name|conn
operator|.
name|getTransactionBatchSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableId
operator|=
name|conn
operator|.
name|getTable
argument_list|()
operator|.
name|getTTable
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|setupHeartBeatThread
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|txnIds
init|=
name|openTxnImpl
argument_list|(
name|username
argument_list|,
name|numTxns
argument_list|)
decl_stmt|;
name|txnToWriteIds
operator|=
name|allocateWriteIdsImpl
argument_list|(
name|txnIds
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|txnToWriteIds
operator|.
name|size
argument_list|()
operator|==
name|numTxns
operator|)
assert|;
name|txnStatus
operator|=
operator|new
name|HiveStreamingConnection
operator|.
name|TxnState
index|[
name|numTxns
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|txnStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
assert|assert
operator|(
name|txnToWriteIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTxnId
argument_list|()
operator|==
name|txnIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
assert|;
name|txnStatus
index|[
name|i
index|]
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
expr_stmt|;
comment|//Open matches Metastore state
block|}
name|this
operator|.
name|state
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|INACTIVE
expr_stmt|;
comment|// initialize record writer with connection and write id info
name|recordWriter
operator|.
name|init
argument_list|(
name|conn
argument_list|,
name|txnToWriteIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|txnToWriteIds
operator|.
name|get
argument_list|(
name|numTxns
operator|-
literal|1
argument_list|)
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|conn
operator|.
name|getStatementId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|minTxnId
operator|=
operator|new
name|AtomicLong
argument_list|(
name|txnIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxTxnId
operator|=
name|txnIds
operator|.
name|get
argument_list|(
name|txnIds
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StreamingException
argument_list|(
name|conn
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|//clean up if above throws
name|markDead
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|HeartbeatRunnable
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|HiveStreamingConnection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|minTxnId
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxTxnId
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|transactionLock
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|isTxnClosed
decl_stmt|;
name|HeartbeatRunnable
parameter_list|(
specifier|final
name|HiveStreamingConnection
name|conn
parameter_list|,
specifier|final
name|AtomicLong
name|minTxnId
parameter_list|,
specifier|final
name|long
name|maxTxnId
parameter_list|,
specifier|final
name|ReentrantLock
name|transactionLock
parameter_list|,
specifier|final
name|AtomicBoolean
name|isTxnClosed
parameter_list|)
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|minTxnId
operator|=
name|minTxnId
expr_stmt|;
name|this
operator|.
name|maxTxnId
operator|=
name|maxTxnId
expr_stmt|;
name|this
operator|.
name|transactionLock
operator|=
name|transactionLock
expr_stmt|;
name|this
operator|.
name|isTxnClosed
operator|=
name|isTxnClosed
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|transactionLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|minTxnId
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|HeartbeatTxnRangeResponse
name|resp
init|=
name|conn
operator|.
name|getHeatbeatMSC
argument_list|()
operator|.
name|heartbeatTxnRange
argument_list|(
name|minTxnId
operator|.
name|get
argument_list|()
argument_list|,
name|maxTxnId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resp
operator|.
name|getAborted
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|resp
operator|.
name|getNosuch
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Heartbeat failure: {}"
argument_list|,
name|resp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|isTxnClosed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Heartbeat sent for range: [{}-{}]"
argument_list|,
name|minTxnId
operator|.
name|get
argument_list|()
argument_list|,
name|maxTxnId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure to heartbeat for transaction range: ["
operator|+
name|minTxnId
operator|.
name|get
argument_list|()
operator|+
literal|"-"
operator|+
name|maxTxnId
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|transactionLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setupHeartBeatThread
parameter_list|()
block|{
comment|// start heartbeat thread
name|ThreadFactory
name|threadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setNameFormat
argument_list|(
literal|"HiveStreamingConnection-Heartbeat-Thread"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|this
operator|.
name|scheduledExecutorService
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|threadFactory
argument_list|)
expr_stmt|;
name|long
name|heartBeatInterval
decl_stmt|;
name|long
name|initialDelay
decl_stmt|;
try|try
block|{
comment|// if HIVE_TXN_TIMEOUT is defined, heartbeat interval will be HIVE_TXN_TIMEOUT/2
name|heartBeatInterval
operator|=
name|DbTxnManager
operator|.
name|getHeartbeatInterval
argument_list|(
name|conn
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|heartBeatInterval
operator|=
name|DEFAULT_HEARTBEAT_INTERVAL
expr_stmt|;
block|}
comment|// to introduce some randomness and to avoid hammering the metastore at the same time (same logic as DbTxnManager)
name|initialDelay
operator|=
call|(
name|long
call|)
argument_list|(
name|heartBeatInterval
operator|*
literal|0.75
operator|*
name|Math
operator|.
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting heartbeat thread with interval: {} ms initialDelay: {} ms for agentInfo: {}"
argument_list|,
name|heartBeatInterval
argument_list|,
name|initialDelay
argument_list|,
name|conn
operator|.
name|getAgentInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Runnable
name|runnable
init|=
operator|new
name|HeartbeatRunnable
argument_list|(
name|conn
argument_list|,
name|minTxnId
argument_list|,
name|maxTxnId
argument_list|,
name|transactionLock
argument_list|,
name|isTxnClosed
argument_list|)
decl_stmt|;
name|this
operator|.
name|scheduledExecutorService
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|runnable
argument_list|,
name|initialDelay
argument_list|,
name|heartBeatInterval
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|openTxnImpl
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|int
name|numTxns
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|conn
operator|.
name|getMSC
argument_list|()
operator|.
name|openTxns
argument_list|(
name|user
argument_list|,
name|numTxns
argument_list|)
operator|.
name|getTxn_ids
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|TxnToWriteId
argument_list|>
name|allocateWriteIdsImpl
parameter_list|(
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|txnIds
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|conn
operator|.
name|getMSC
argument_list|()
operator|.
name|allocateTableWriteIdsBatch
argument_list|(
name|txnIds
argument_list|,
name|conn
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|conn
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|txnToWriteIds
operator|==
literal|null
operator|||
name|txnToWriteIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"{}"
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|" TxnStatus["
argument_list|)
decl_stmt|;
for|for
control|(
name|HiveStreamingConnection
operator|.
name|TxnState
name|state
range|:
name|txnStatus
control|)
block|{
comment|//'state' should not be null - future proofing
name|sb
operator|.
name|append
argument_list|(
name|state
operator|==
literal|null
condition|?
literal|"N"
else|:
name|state
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"] LastUsed "
argument_list|)
operator|.
name|append
argument_list|(
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|lastTxnUsed
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|"TxnId/WriteIds=["
operator|+
name|txnToWriteIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTxnId
argument_list|()
operator|+
literal|"/"
operator|+
name|txnToWriteIds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWriteId
argument_list|()
operator|+
literal|"..."
operator|+
name|txnToWriteIds
operator|.
name|get
argument_list|(
name|txnToWriteIds
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getTxnId
argument_list|()
operator|+
literal|"/"
operator|+
name|txnToWriteIds
operator|.
name|get
argument_list|(
name|txnToWriteIds
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getWriteId
argument_list|()
operator|+
literal|"] on connection = "
operator|+
name|conn
operator|+
literal|"; "
operator|+
name|sb
return|;
block|}
specifier|public
name|void
name|beginNextTransaction
parameter_list|()
throws|throws
name|StreamingException
block|{
name|checkIsClosed
argument_list|()
expr_stmt|;
name|beginNextTransactionImpl
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|beginNextTransactionImpl
parameter_list|()
throws|throws
name|StreamingException
block|{
name|beginNextTransactionImpl
argument_list|(
literal|"No more transactions available in"
operator|+
literal|" next batch for connection: "
operator|+
name|conn
operator|+
literal|" user: "
operator|+
name|username
argument_list|)
expr_stmt|;
name|lastTxnUsed
operator|=
name|getCurrentTxnId
argument_list|()
expr_stmt|;
name|lockRequest
operator|=
name|createLockRequest
argument_list|(
name|conn
argument_list|,
name|partNameForLock
argument_list|,
name|username
argument_list|,
name|getCurrentTxnId
argument_list|()
argument_list|,
name|agentInfo
argument_list|)
expr_stmt|;
name|createdPartitions
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
try|try
block|{
name|LockResponse
name|res
init|=
name|conn
operator|.
name|getMSC
argument_list|()
operator|.
name|lock
argument_list|(
name|lockRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|getState
argument_list|()
operator|!=
name|LockState
operator|.
name|ACQUIRED
condition|)
block|{
throw|throw
operator|new
name|TransactionError
argument_list|(
literal|"Unable to acquire lock on "
operator|+
name|conn
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionError
argument_list|(
literal|"Unable to acquire lock on "
operator|+
name|conn
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|commit
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|partitions
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|StreamingException
block|{
name|checkIsClosed
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|commitImpl
argument_list|(
name|partitions
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|markDead
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|commitImpl
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|partitions
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|StreamingException
block|{
try|try
block|{
if|if
condition|(
operator|(
name|key
operator|==
literal|null
operator|&&
name|value
operator|!=
literal|null
operator|)
operator|||
operator|(
name|key
operator|!=
literal|null
operator|&&
name|value
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|StreamingException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"If key is set, the value should be as well and vice versa,"
operator|+
literal|" key, value = %s, %s"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
throw|;
block|}
name|recordWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|TxnToWriteId
name|txnToWriteId
init|=
name|txnToWriteIds
operator|.
name|get
argument_list|(
name|currentTxnIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|conn
operator|.
name|isDynamicPartitioning
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|recordWriter
operator|.
name|getPartitions
argument_list|()
argument_list|)
decl_stmt|;
name|createdPartitions
operator|.
name|addAll
argument_list|(
name|partNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitions
operator|!=
literal|null
condition|)
block|{
name|partNames
operator|.
name|addAll
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|partNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conn
operator|.
name|getMSC
argument_list|()
operator|.
name|addDynamicPartitions
argument_list|(
name|txnToWriteId
operator|.
name|getTxnId
argument_list|()
argument_list|,
name|txnToWriteId
operator|.
name|getWriteId
argument_list|()
argument_list|,
name|conn
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|conn
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partNames
argument_list|,
name|DataOperationType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
block|}
block|}
name|transactionLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|conn
operator|.
name|getMSC
argument_list|()
operator|.
name|commitTxnWithKeyValue
argument_list|(
name|txnToWriteId
operator|.
name|getTxnId
argument_list|()
argument_list|,
name|tableId
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conn
operator|.
name|getMSC
argument_list|()
operator|.
name|commitTxn
argument_list|(
name|txnToWriteId
operator|.
name|getTxnId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// increment the min txn id so that heartbeat thread will heartbeat only from the next open transaction.
comment|// the current transaction is going to committed or fail, so don't need heartbeat for current transaction.
if|if
condition|(
name|currentTxnIndex
operator|+
literal|1
operator|<
name|txnToWriteIds
operator|.
name|size
argument_list|()
condition|)
block|{
name|minTxnId
operator|.
name|set
argument_list|(
name|txnToWriteIds
operator|.
name|get
argument_list|(
name|currentTxnIndex
operator|+
literal|1
argument_list|)
operator|.
name|getTxnId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// exhausted the batch, no longer have to heartbeat for current txn batch
name|minTxnId
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|transactionLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|state
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
expr_stmt|;
name|txnStatus
index|[
name|currentTxnIndex
index|]
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchTxnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionError
argument_list|(
literal|"Invalid transaction id : "
operator|+
name|getCurrentTxnId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TxnAbortedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionError
argument_list|(
literal|"Aborted transaction "
operator|+
literal|"cannot be committed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionError
argument_list|(
literal|"Unable to commitTransaction transaction"
operator|+
name|getCurrentTxnId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|abort
parameter_list|()
throws|throws
name|StreamingException
block|{
if|if
condition|(
name|isTxnClosed
operator|.
name|get
argument_list|()
condition|)
block|{
comment|/*        * isDead is only set internally by this class.  {@link #markDead(boolean)} will abort all        * remaining txns, so make this no-op to make sure that a well-behaved client that calls abortTransaction()        * error doesn't get misleading errors        */
return|return;
block|}
name|abort
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|abort
parameter_list|(
specifier|final
name|boolean
name|abortAllRemaining
parameter_list|)
throws|throws
name|StreamingException
block|{
name|abortImpl
argument_list|(
name|abortAllRemaining
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|abortImpl
parameter_list|(
name|boolean
name|abortAllRemaining
parameter_list|)
throws|throws
name|StreamingException
block|{
if|if
condition|(
name|minTxnId
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|transactionLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|abortAllRemaining
condition|)
block|{
comment|// we are aborting all txns in the current batch, so no need to heartbeat
name|minTxnId
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//when last txn finished (abortTransaction/commitTransaction) the currentTxnIndex is pointing at that txn
comment|//so we need to start from next one, if any.  Also if batch was created but
comment|//fetchTransactionBatch() was never called, we want to start with first txn
name|int
name|minOpenTxnIndex
init|=
name|Math
operator|.
name|max
argument_list|(
name|currentTxnIndex
operator|+
operator|(
name|state
operator|==
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|ABORTED
operator|||
name|state
operator|==
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|currentTxnIndex
operator|=
name|minOpenTxnIndex
init|;
name|currentTxnIndex
operator|<
name|txnToWriteIds
operator|.
name|size
argument_list|()
condition|;
name|currentTxnIndex
operator|++
control|)
block|{
name|conn
operator|.
name|getMSC
argument_list|()
operator|.
name|rollbackTxn
argument_list|(
name|txnToWriteIds
operator|.
name|get
argument_list|(
name|currentTxnIndex
argument_list|)
operator|.
name|getTxnId
argument_list|()
argument_list|)
expr_stmt|;
name|txnStatus
index|[
name|currentTxnIndex
index|]
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|ABORTED
expr_stmt|;
block|}
name|currentTxnIndex
operator|--
expr_stmt|;
comment|//since the loop left it == txnToWriteIds.size()
block|}
else|else
block|{
comment|// we are aborting only the current transaction, so move the min range for heartbeat or disable heartbeat
comment|// if the current txn is last in the batch.
if|if
condition|(
name|currentTxnIndex
operator|+
literal|1
operator|<
name|txnToWriteIds
operator|.
name|size
argument_list|()
condition|)
block|{
name|minTxnId
operator|.
name|set
argument_list|(
name|txnToWriteIds
operator|.
name|get
argument_list|(
name|currentTxnIndex
operator|+
literal|1
argument_list|)
operator|.
name|getTxnId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// exhausted the batch, no longer have to heartbeat
name|minTxnId
operator|.
name|set
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|long
name|currTxnId
init|=
name|getCurrentTxnId
argument_list|()
decl_stmt|;
if|if
condition|(
name|currTxnId
operator|>
literal|0
condition|)
block|{
name|conn
operator|.
name|getMSC
argument_list|()
operator|.
name|rollbackTxn
argument_list|(
name|currTxnId
argument_list|)
expr_stmt|;
name|txnStatus
index|[
name|currentTxnIndex
index|]
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|ABORTED
expr_stmt|;
block|}
block|}
name|state
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|ABORTED
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchTxnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionError
argument_list|(
literal|"Unable to abort invalid transaction id : "
operator|+
name|getCurrentTxnId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransactionError
argument_list|(
literal|"Unable to abort transaction id : "
operator|+
name|getCurrentTxnId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|transactionLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Close the TransactionBatch.  This will abort any still open txns in this batch.    *    * @throws StreamingException - failure when closing transaction batch    */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|StreamingException
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
return|return;
block|}
name|isTxnClosed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//also ensures that heartbeat() is no-op since client is likely doing it async
try|try
block|{
name|abort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//abort all remaining txns
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fatal error on "
operator|+
name|toString
argument_list|()
operator|+
literal|"; cause "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StreamingException
argument_list|(
literal|"Unable to abort"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
try|try
block|{
name|closeImpl
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fatal error on "
operator|+
name|toString
argument_list|()
operator|+
literal|"; cause "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StreamingException
argument_list|(
literal|"Unable to close"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|closeImpl
parameter_list|()
throws|throws
name|StreamingException
block|{
name|state
operator|=
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|INACTIVE
expr_stmt|;
name|recordWriter
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|scheduledExecutorService
operator|!=
literal|null
condition|)
block|{
name|scheduledExecutorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|LockRequest
name|createLockRequest
parameter_list|(
specifier|final
name|HiveStreamingConnection
name|connection
parameter_list|,
name|String
name|partNameForLock
parameter_list|,
name|String
name|user
parameter_list|,
name|long
name|txnId
parameter_list|,
name|String
name|agentInfo
parameter_list|)
block|{
name|LockRequestBuilder
name|requestBuilder
init|=
operator|new
name|LockRequestBuilder
argument_list|(
name|agentInfo
argument_list|)
decl_stmt|;
name|requestBuilder
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|requestBuilder
operator|.
name|setTransactionId
argument_list|(
name|txnId
argument_list|)
expr_stmt|;
name|LockComponentBuilder
name|lockCompBuilder
init|=
operator|new
name|LockComponentBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|connection
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|setTableName
argument_list|(
name|connection
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|setShared
argument_list|()
operator|.
name|setOperationType
argument_list|(
name|DataOperationType
operator|.
name|INSERT
argument_list|)
decl_stmt|;
if|if
condition|(
name|connection
operator|.
name|isDynamicPartitioning
argument_list|()
condition|)
block|{
name|lockCompBuilder
operator|.
name|setIsDynamicPartitionWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partNameForLock
operator|!=
literal|null
operator|&&
operator|!
name|partNameForLock
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lockCompBuilder
operator|.
name|setPartitionName
argument_list|(
name|partNameForLock
argument_list|)
expr_stmt|;
block|}
name|requestBuilder
operator|.
name|addLockComponent
argument_list|(
name|lockCompBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|requestBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * @return the list of created partitions.    */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPartitions
parameter_list|()
block|{
return|return
name|createdPartitions
return|;
block|}
block|}
end_class

end_unit

