begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|JsonSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Streaming Writer handles utf8 encoded Json (Strict syntax).  * Uses org.apache.hadoop.hive.serde2.JsonSerDe to process Json input  *  * NOTE: This record writer is NOT thread-safe. Use one record writer per streaming connection.  */
end_comment

begin_class
specifier|public
class|class
name|StrictJsonWriter
extends|extends
name|AbstractRecordWriter
block|{
specifier|private
name|JsonSerDe
name|serde
decl_stmt|;
specifier|public
name|StrictJsonWriter
parameter_list|(
specifier|final
name|Builder
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
operator|.
name|lineDelimiter
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|String
name|lineDelimiter
decl_stmt|;
specifier|public
name|Builder
name|withLineDelimiterPattern
parameter_list|(
specifier|final
name|String
name|lineDelimiter
parameter_list|)
block|{
name|this
operator|.
name|lineDelimiter
operator|=
name|lineDelimiter
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|StrictJsonWriter
name|build
parameter_list|()
block|{
return|return
operator|new
name|StrictJsonWriter
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Creates JsonSerDe    *    * @throws SerializationError if serde could not be initialized    */
annotation|@
name|Override
specifier|public
name|JsonSerDe
name|createSerde
parameter_list|()
throws|throws
name|SerializationError
block|{
try|try
block|{
name|Properties
name|tableProps
init|=
name|table
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|JsonSerDe
name|serde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|tableProps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|serde
operator|=
name|serde
expr_stmt|;
return|return
name|serde
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerializationError
argument_list|(
literal|"Error initializing serde "
operator|+
name|JsonSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|encode
parameter_list|(
name|byte
index|[]
name|utf8StrRecord
parameter_list|)
throws|throws
name|SerializationError
block|{
try|try
block|{
name|Text
name|blob
init|=
operator|new
name|Text
argument_list|(
name|utf8StrRecord
argument_list|)
decl_stmt|;
return|return
name|serde
operator|.
name|deserialize
argument_list|(
name|blob
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerializationError
argument_list|(
literal|"Unable to convert byte[] record into Object"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

