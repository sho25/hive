begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|RecordUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|SubStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractRecordWriter
implements|implements
name|RecordWriter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractRecordWriter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|StreamingConnection
name|conn
decl_stmt|;
specifier|protected
name|Table
name|tbl
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|inputColumns
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|inputTypes
decl_stmt|;
specifier|private
name|String
name|fullyQualifiedTableName
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RecordUpdater
argument_list|>
argument_list|>
name|updaters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|partitionPaths
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|addedPartitions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// input OI includes table columns + partition columns
specifier|private
name|StructObjectInspector
name|inputRowObjectInspector
decl_stmt|;
comment|// output OI strips off the partition columns and retains other columns
specifier|private
name|ObjectInspector
name|outputRowObjectInspector
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|partitionColumns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ObjectInspector
index|[]
name|partitionObjInspectors
init|=
literal|null
decl_stmt|;
specifier|private
name|StructField
index|[]
name|partitionStructFields
init|=
literal|null
decl_stmt|;
specifier|private
name|Object
index|[]
name|partitionFieldData
decl_stmt|;
specifier|private
name|ObjectInspector
index|[]
name|bucketObjInspectors
init|=
literal|null
decl_stmt|;
specifier|private
name|StructField
index|[]
name|bucketStructFields
init|=
literal|null
decl_stmt|;
specifier|private
name|Object
index|[]
name|bucketFieldData
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|bucketIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|totalBuckets
decl_stmt|;
specifier|private
name|String
name|defaultPartitionName
decl_stmt|;
specifier|private
name|boolean
name|isBucketed
decl_stmt|;
specifier|private
name|AcidOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|acidOutputFormat
decl_stmt|;
specifier|private
name|Long
name|curBatchMinWriteId
decl_stmt|;
specifier|private
name|Long
name|curBatchMaxWriteId
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|StreamingConnection
name|conn
parameter_list|,
name|long
name|minWriteId
parameter_list|,
name|long
name|maxWriteId
parameter_list|)
throws|throws
name|StreamingException
block|{
if|if
condition|(
name|conn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|StreamingException
argument_list|(
literal|"Streaming connection cannot be null during record writer initialization"
argument_list|)
throw|;
block|}
try|try
block|{
name|this
operator|.
name|conn
operator|=
name|conn
expr_stmt|;
name|this
operator|.
name|curBatchMinWriteId
operator|=
name|minWriteId
expr_stmt|;
name|this
operator|.
name|curBatchMaxWriteId
operator|=
name|maxWriteId
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conn
operator|.
name|getHiveConf
argument_list|()
expr_stmt|;
name|this
operator|.
name|defaultPartitionName
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
expr_stmt|;
specifier|final
name|IMetaStoreClient
name|msClient
init|=
name|HiveMetaStoreUtils
operator|.
name|getHiveMetastoreClient
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|tbl
operator|=
name|msClient
operator|.
name|getTable
argument_list|(
name|conn
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|conn
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputColumns
operator|=
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|FieldSchema
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputTypes
operator|=
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|FieldSchema
operator|::
name|getType
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conn
operator|.
name|isPartitionedTable
argument_list|()
operator|&&
name|conn
operator|.
name|isDynamicPartitioning
argument_list|()
condition|)
block|{
name|this
operator|.
name|partitionColumns
operator|=
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|FieldSchema
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputColumns
operator|.
name|addAll
argument_list|(
name|partitionColumns
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputTypes
operator|.
name|addAll
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|FieldSchema
operator|::
name|getType
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fullyQualifiedTableName
operator|=
name|Warehouse
operator|.
name|getQualifiedName
argument_list|(
name|conn
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|conn
operator|.
name|getTable
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|outFormatName
init|=
name|this
operator|.
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
decl_stmt|;
name|this
operator|.
name|acidOutputFormat
operator|=
operator|(
name|AcidOutputFormat
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|outFormatName
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ConnectionError
argument_list|(
name|conn
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TException
decl||
name|ClassNotFoundException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StreamingException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|AbstractSerDe
name|serDe
init|=
name|createSerde
argument_list|()
decl_stmt|;
name|this
operator|.
name|inputRowObjectInspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
if|if
condition|(
name|conn
operator|.
name|isPartitionedTable
argument_list|()
operator|&&
name|conn
operator|.
name|isDynamicPartitioning
argument_list|()
condition|)
block|{
name|preparePartitioningFields
argument_list|()
expr_stmt|;
name|int
name|dpStartCol
init|=
name|inputRowObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|this
operator|.
name|outputRowObjectInspector
operator|=
operator|new
name|SubStructObjectInspector
argument_list|(
name|inputRowObjectInspector
argument_list|,
literal|0
argument_list|,
name|dpStartCol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|outputRowObjectInspector
operator|=
name|inputRowObjectInspector
expr_stmt|;
block|}
name|prepareBucketingFields
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StreamingException
argument_list|(
literal|"Unable to create SerDe"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|prepareBucketingFields
parameter_list|()
block|{
name|this
operator|.
name|isBucketed
operator|=
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
operator|>
literal|0
expr_stmt|;
comment|// For unbucketed tables we have exactly 1 RecordUpdater (until HIVE-19208) for each AbstractRecordWriter which
comment|// ends up writing to a file bucket_000000.
comment|// See also {@link #getBucket(Object)}
name|this
operator|.
name|totalBuckets
operator|=
name|isBucketed
condition|?
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
else|:
literal|1
expr_stmt|;
if|if
condition|(
name|isBucketed
condition|)
block|{
name|this
operator|.
name|bucketIds
operator|=
name|getBucketColIDs
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucketFieldData
operator|=
operator|new
name|Object
index|[
name|bucketIds
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|bucketObjInspectors
operator|=
name|getObjectInspectorsForBucketedCols
argument_list|(
name|bucketIds
argument_list|,
name|inputRowObjectInspector
argument_list|)
expr_stmt|;
name|this
operator|.
name|bucketStructFields
operator|=
operator|new
name|StructField
index|[
name|bucketIds
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|allFields
init|=
name|inputRowObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|bucketStructFields
index|[
name|i
index|]
operator|=
name|allFields
operator|.
name|get
argument_list|(
name|bucketIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|preparePartitioningFields
parameter_list|()
block|{
specifier|final
name|int
name|numPartitions
init|=
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|this
operator|.
name|partitionFieldData
operator|=
operator|new
name|Object
index|[
name|numPartitions
index|]
expr_stmt|;
name|this
operator|.
name|partitionObjInspectors
operator|=
operator|new
name|ObjectInspector
index|[
name|numPartitions
index|]
expr_stmt|;
name|int
name|startIdx
init|=
name|inputRowObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|numPartitions
decl_stmt|;
name|int
name|endIdx
init|=
name|inputRowObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startIdx
init|;
name|i
operator|<
name|endIdx
condition|;
name|i
operator|++
control|)
block|{
name|StructField
name|structField
init|=
name|inputRowObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|partitionObjInspectors
index|[
name|j
operator|++
index|]
operator|=
name|structField
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|partitionStructFields
operator|=
operator|new
name|StructField
index|[
name|partitionColumns
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionColumns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|partCol
init|=
name|partitionColumns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|partitionStructFields
index|[
name|i
index|]
operator|=
name|inputRowObjectInspector
operator|.
name|getStructFieldRef
argument_list|(
name|partCol
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * used to tag error msgs to provided some breadcrumbs    */
specifier|private
name|String
name|getWatermark
parameter_list|(
name|String
name|partition
parameter_list|)
block|{
return|return
name|partition
operator|+
literal|" writeIds["
operator|+
name|curBatchMinWriteId
operator|+
literal|","
operator|+
name|curBatchMaxWriteId
operator|+
literal|"]"
return|;
block|}
comment|// return the column numbers of the bucketed columns
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|getBucketColIDs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bucketCols
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|bucketSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|bucketCols
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bucketSet
operator|.
name|contains
argument_list|(
name|cols
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|abstract
name|AbstractSerDe
name|createSerde
parameter_list|()
throws|throws
name|SerializationError
function_decl|;
comment|/**    * Encode a record as an Object that Hive can read with the ObjectInspector associated with the    * serde returned by {@link #createSerde}.  This is public so that test frameworks can use it.    *    * @param record record to be deserialized    * @return deserialized record as an Object    * @throws SerializationError - any error during serialization or deserialization of record    */
specifier|public
specifier|abstract
name|Object
name|encode
parameter_list|(
name|byte
index|[]
name|record
parameter_list|)
throws|throws
name|SerializationError
function_decl|;
comment|// returns the bucket number to which the record belongs to
specifier|private
name|int
name|getBucket
parameter_list|(
name|Object
name|row
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isBucketed
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Object
index|[]
name|bucketFields
init|=
name|getBucketFields
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|int
name|bucketingVersion
init|=
name|Utilities
operator|.
name|getBucketingVersion
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_BUCKETING_VERSION
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|bucketingVersion
operator|==
literal|2
condition|?
name|ObjectInspectorUtils
operator|.
name|getBucketNumber
argument_list|(
name|bucketFields
argument_list|,
name|bucketObjInspectors
argument_list|,
name|totalBuckets
argument_list|)
else|:
name|ObjectInspectorUtils
operator|.
name|getBucketNumberOld
argument_list|(
name|bucketFields
argument_list|,
name|bucketObjInspectors
argument_list|,
name|totalBuckets
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPartitionValues
parameter_list|(
specifier|final
name|Object
name|row
parameter_list|)
block|{
if|if
condition|(
operator|!
name|conn
operator|.
name|isPartitionedTable
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|conn
operator|.
name|isPartitionedTable
argument_list|()
operator|&&
name|conn
operator|.
name|isDynamicPartitioning
argument_list|()
condition|)
block|{
name|Object
index|[]
name|partitionFields
init|=
name|getPartitionFields
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionObjInspectors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ObjectInspector
name|oi
init|=
name|partitionObjInspectors
index|[
name|i
index|]
decl_stmt|;
name|Object
name|field
init|=
name|partitionFields
index|[
name|i
index|]
decl_stmt|;
name|Object
name|partitionValue
init|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|field
argument_list|,
name|oi
argument_list|,
name|ObjectInspectorUtils
operator|.
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionValue
operator|==
literal|null
operator|||
name|partitionValue
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|partitionValues
operator|.
name|add
argument_list|(
name|defaultPartitionName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partitionValues
operator|.
name|add
argument_list|(
name|partitionValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|partitionValues
operator|=
name|conn
operator|.
name|getStaticPartitionValues
argument_list|()
expr_stmt|;
block|}
return|return
name|partitionValues
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|StreamingIOFailure
block|{
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RecordUpdater
argument_list|>
argument_list|>
name|entry
range|:
name|updaters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Flushing record updater for partitions: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RecordUpdater
name|updater
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|updater
operator|!=
literal|null
condition|)
block|{
name|updater
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StreamingIOFailure
argument_list|(
literal|"Unable to flush recordUpdater"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|StreamingIOFailure
block|{
name|boolean
name|haveError
init|=
literal|false
decl_stmt|;
name|String
name|partition
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RecordUpdater
argument_list|>
argument_list|>
name|entry
range|:
name|updaters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|partition
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing updater for partitions: {}"
argument_list|,
name|partition
argument_list|)
expr_stmt|;
for|for
control|(
name|RecordUpdater
name|updater
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|updater
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|//try not to leave any files open
name|updater
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|haveError
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to close "
operator|+
name|updater
operator|+
literal|" due to: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|updaters
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|haveError
condition|)
block|{
throw|throw
operator|new
name|StreamingIOFailure
argument_list|(
literal|"Encountered errors while closing (see logs) "
operator|+
name|getWatermark
argument_list|(
name|partition
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|ObjectInspector
index|[]
name|getObjectInspectorsForBucketedCols
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|bucketIds
parameter_list|,
name|StructObjectInspector
name|recordObjInspector
parameter_list|)
block|{
name|ObjectInspector
index|[]
name|result
init|=
operator|new
name|ObjectInspector
index|[
name|bucketIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|bucketId
init|=
name|bucketIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
name|recordObjInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
name|bucketId
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Object
index|[]
name|getBucketFields
parameter_list|(
name|Object
name|row
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bucketIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|bucketFieldData
index|[
name|i
index|]
operator|=
name|inputRowObjectInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|bucketStructFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|bucketFieldData
return|;
block|}
specifier|private
name|Object
index|[]
name|getPartitionFields
parameter_list|(
name|Object
name|row
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionFieldData
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|partitionFieldData
index|[
name|i
index|]
operator|=
name|inputRowObjectInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|partitionStructFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|partitionFieldData
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|long
name|writeId
parameter_list|,
specifier|final
name|byte
index|[]
name|record
parameter_list|)
throws|throws
name|StreamingException
block|{
try|try
block|{
name|Object
name|encodedRow
init|=
name|encode
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|int
name|bucket
init|=
name|getBucket
argument_list|(
name|encodedRow
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
init|=
name|getPartitionValues
argument_list|(
name|encodedRow
argument_list|)
decl_stmt|;
name|getRecordUpdater
argument_list|(
name|partitionValues
argument_list|,
name|bucket
argument_list|)
operator|.
name|insert
argument_list|(
name|writeId
argument_list|,
name|encodedRow
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StreamingIOFailure
argument_list|(
literal|"Error writing record in transaction write id ("
operator|+
name|writeId
operator|+
literal|")"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPartitions
parameter_list|()
block|{
return|return
name|addedPartitions
return|;
block|}
specifier|private
name|RecordUpdater
name|createRecordUpdater
parameter_list|(
specifier|final
name|Path
name|partitionPath
parameter_list|,
name|int
name|bucketId
parameter_list|,
name|Long
name|minWriteId
parameter_list|,
name|Long
name|maxWriteID
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Initialize table properties from the table parameters. This is required because the table
comment|// may define certain table parameters that may be required while writing. The table parameter
comment|// 'transactional_properties' is one such example.
name|Properties
name|tblProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tblProperties
operator|.
name|putAll
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|acidOutputFormat
operator|.
name|getRecordUpdater
argument_list|(
name|partitionPath
argument_list|,
operator|new
name|AcidOutputFormat
operator|.
name|Options
argument_list|(
name|conf
argument_list|)
operator|.
name|inspector
argument_list|(
name|outputRowObjectInspector
argument_list|)
operator|.
name|bucket
argument_list|(
name|bucketId
argument_list|)
operator|.
name|tableProperties
argument_list|(
name|tblProperties
argument_list|)
operator|.
name|minimumWriteId
argument_list|(
name|minWriteId
argument_list|)
operator|.
name|maximumWriteId
argument_list|(
name|maxWriteID
argument_list|)
operator|.
name|statementId
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|finalDestination
argument_list|(
name|partitionPath
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RecordUpdater
name|getRecordUpdater
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
parameter_list|,
name|int
name|bucketId
parameter_list|)
throws|throws
name|StreamingIOFailure
block|{
name|RecordUpdater
name|recordUpdater
decl_stmt|;
name|String
name|key
decl_stmt|;
name|Path
name|destLocation
decl_stmt|;
try|try
block|{
name|key
operator|=
name|partitionValues
operator|==
literal|null
condition|?
name|fullyQualifiedTableName
else|:
name|partitionValues
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// add partition in metastore for dynamic partition. We make a metastore call for every new partition value that
comment|// we encounter even if partition already exists (exists check require a metastore call anyways).
if|if
condition|(
name|partitionPaths
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|destLocation
operator|=
name|partitionPaths
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// un-partitioned table
if|if
condition|(
name|partitionValues
operator|==
literal|null
condition|)
block|{
name|destLocation
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PartitionInfo
name|partitionInfo
init|=
name|conn
operator|.
name|createPartitionIfNotExists
argument_list|(
name|partitionValues
argument_list|)
decl_stmt|;
comment|// collect the newly added partitions. connection.commitTransaction() will report the dynamically added
comment|// partitions to TxnHandler
if|if
condition|(
operator|!
name|partitionInfo
operator|.
name|isExists
argument_list|()
condition|)
block|{
name|addedPartitions
operator|.
name|add
argument_list|(
name|partitionInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created partition {} for table {}"
argument_list|,
name|partitionInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|fullyQualifiedTableName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Partition {} already exists for table {}"
argument_list|,
name|partitionInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|fullyQualifiedTableName
argument_list|)
expr_stmt|;
block|}
name|destLocation
operator|=
operator|new
name|Path
argument_list|(
name|partitionInfo
operator|.
name|getPartitionLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|partitionPaths
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|destLocation
argument_list|)
expr_stmt|;
block|}
name|updaters
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
name|k
lambda|->
name|initializeBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|recordUpdater
operator|=
name|updaters
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|get
argument_list|(
name|bucketId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StreamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|StreamingIOFailure
argument_list|(
literal|"Unable to create partition: "
operator|+
name|partitionValues
operator|+
literal|"for "
operator|+
name|conn
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|recordUpdater
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|recordUpdater
operator|=
name|createRecordUpdater
argument_list|(
name|destLocation
argument_list|,
name|bucketId
argument_list|,
name|curBatchMinWriteId
argument_list|,
name|curBatchMaxWriteId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|errMsg
init|=
literal|"Failed creating RecordUpdater for "
operator|+
name|getWatermark
argument_list|(
name|destLocation
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errMsg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StreamingIOFailure
argument_list|(
name|errMsg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|RecordUpdater
argument_list|>
name|partitionUpdaters
init|=
name|updaters
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|partitionUpdaters
operator|.
name|set
argument_list|(
name|bucketId
argument_list|,
name|recordUpdater
argument_list|)
expr_stmt|;
block|}
return|return
name|recordUpdater
return|;
block|}
specifier|private
name|List
argument_list|<
name|RecordUpdater
argument_list|>
name|initializeBuckets
parameter_list|()
block|{
name|List
argument_list|<
name|RecordUpdater
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|totalBuckets
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|bucket
init|=
literal|0
init|;
name|bucket
operator|<
name|totalBuckets
condition|;
name|bucket
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|bucket
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//so that get(i) returns null rather than ArrayOutOfBounds
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

