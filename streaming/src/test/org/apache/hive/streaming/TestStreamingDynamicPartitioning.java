begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestStreamingDynamicPartitioning
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStreamingDynamicPartitioning
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|RawFileSystem
extends|extends
name|RawLocalFileSystem
block|{
specifier|private
specifier|static
specifier|final
name|URI
name|NAME
decl_stmt|;
static|static
block|{
try|try
block|{
name|NAME
operator|=
operator|new
name|URI
argument_list|(
literal|"raw:///"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad uri"
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"raw"
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|pathToFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Cannot find "
operator|+
name|path
argument_list|)
throw|;
block|}
comment|// get close enough
name|short
name|mod
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0444
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|canWrite
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0200
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|canExecute
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0111
expr_stmt|;
block|}
return|return
operator|new
name|FileStatus
argument_list|(
name|file
operator|.
name|length
argument_list|()
argument_list|,
name|file
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
name|mod
argument_list|)
argument_list|,
literal|"owen"
argument_list|,
literal|"users"
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|IDriver
name|driver
decl_stmt|;
specifier|private
specifier|final
name|IMetaStoreClient
name|msClient
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COL1
init|=
literal|"id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COL2
init|=
literal|"msg"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|dbFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
comment|// partitioned table
specifier|private
specifier|final
specifier|static
name|String
name|dbName
init|=
literal|"testing"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|tblName
init|=
literal|"alerts"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|,
name|COL2
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|colTypes
init|=
operator|new
name|String
index|[]
block|{
name|serdeConstants
operator|.
name|INT_TYPE_NAME
block|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|partNames
init|=
operator|new
name|String
index|[]
block|{
literal|"Continent"
block|,
literal|"Country"
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|bucketCols
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|}
decl_stmt|;
specifier|private
specifier|final
name|String
name|loc1
decl_stmt|;
comment|// unpartitioned table
specifier|private
specifier|final
specifier|static
name|String
name|dbName2
init|=
literal|"testing2"
decl_stmt|;
specifier|public
name|TestStreamingDynamicPartitioning
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.raw.impl"
argument_list|,
name|RawFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_EXECUTE_SET_UGI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dbFolder
operator|.
name|create
argument_list|()
expr_stmt|;
name|loc1
operator|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName
operator|+
literal|".db"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|//1) Start from a clean slate (metastore)
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//2) obtain metastore clients
name|msClient
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|.
name|setMaxRows
argument_list|(
literal|200002
argument_list|)
expr_stmt|;
comment|//make sure Driver returns all results
comment|// drop and recreate the necessary databases and tables
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|,
name|fieldNames
argument_list|,
name|colTypes
argument_list|,
name|bucketCols
argument_list|,
name|partNames
argument_list|,
name|loc1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName2
argument_list|)
expr_stmt|;
name|String
name|loc2
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName2
operator|+
literal|".db"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|loc3
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
literal|"testing5.db"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|createStoreSales
argument_list|(
literal|"testing5"
argument_list|,
name|loc3
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table testBucketing3.streamedtable"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table testBucketing3.finaltable"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table testBucketing3.nobucket"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createStoreSales
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|loc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|loc
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableLoc
init|=
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"store_sales"
decl_stmt|;
name|boolean
name|success
init|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database IF NOT EXISTS "
operator|+
name|dbName
operator|+
literal|" location '"
operator|+
name|dbUri
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table if exists store_sales"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table store_sales\n"
operator|+
literal|"(\n"
operator|+
literal|"    ss_sold_date_sk           int,\n"
operator|+
literal|"    ss_sold_time_sk           int,\n"
operator|+
literal|"    ss_item_sk                int,\n"
operator|+
literal|"    ss_customer_sk            int,\n"
operator|+
literal|"    ss_cdemo_sk               int,\n"
operator|+
literal|"    ss_hdemo_sk               int,\n"
operator|+
literal|"    ss_addr_sk                int,\n"
operator|+
literal|"    ss_store_sk               int,\n"
operator|+
literal|"    ss_promo_sk               int,\n"
operator|+
literal|"    ss_ticket_number          int,\n"
operator|+
literal|"    ss_quantity               int,\n"
operator|+
literal|"    ss_wholesale_cost         decimal(7,2),\n"
operator|+
literal|"    ss_list_price             decimal(7,2),\n"
operator|+
literal|"    ss_sales_price            decimal(7,2),\n"
operator|+
literal|"    ss_ext_discount_amt       decimal(7,2),\n"
operator|+
literal|"    ss_ext_sales_price        decimal(7,2),\n"
operator|+
literal|"    ss_ext_wholesale_cost     decimal(7,2),\n"
operator|+
literal|"    ss_ext_list_price         decimal(7,2),\n"
operator|+
literal|"    ss_ext_tax                decimal(7,2),\n"
operator|+
literal|"    ss_coupon_amt             decimal(7,2),\n"
operator|+
literal|"    ss_net_paid               decimal(7,2),\n"
operator|+
literal|"    ss_net_paid_inc_tax       decimal(7,2),\n"
operator|+
literal|"    ss_net_profit             decimal(7,2)\n"
operator|+
literal|")\n"
operator|+
literal|" partitioned by (dt string)\n"
operator|+
literal|"clustered by (ss_store_sk, ss_promo_sk)\n"
operator|+
literal|"INTO 4 BUCKETS stored as orc "
operator|+
literal|" location '"
operator|+
name|tableLoc
operator|+
literal|"'"
operator|+
literal|"  TBLPROPERTIES ('orc.compress'='NONE', 'transactional'='true')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"alter table store_sales add partition(dt='2015')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDynamicPartitioning
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testing5"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"store_sales"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|StringBuilder
name|row
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ints
init|=
literal|0
init|;
name|ints
operator|<
literal|11
condition|;
name|ints
operator|++
control|)
block|{
name|row
operator|.
name|append
argument_list|(
name|ints
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|decs
init|=
literal|0
init|;
name|decs
operator|<
literal|12
condition|;
name|decs
operator|++
control|)
block|{
name|row
operator|.
name|append
argument_list|(
name|i
operator|+
literal|0.1
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|append
argument_list|(
literal|"2018-04-"
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
name|row
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitions
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"show partitions testing5.store_sales"
argument_list|)
decl_stmt|;
comment|// 1 static partition created during setup + 10 dynamic partitions
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// ignore the first static partition
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|partitions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"dt=2018-04-"
operator|+
operator|(
name|i
operator|-
literal|1
operator|)
argument_list|,
name|partitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from testing5.store_sales"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|re
range|:
name|res
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|re
operator|.
name|contains
argument_list|(
literal|"2018-04-"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// stream data into streaming table with N buckets, then copy the data into another bucketed table
comment|// check if bucketing in both was done in the same way
annotation|@
name|Test
specifier|public
name|void
name|testDPStreamBucketingMatchesRegularBucketing
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|bucketCount
init|=
literal|100
decl_stmt|;
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|dbFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableLoc
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"streamedtable"
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableLoc2
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"finaltable"
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableLoc3
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"nobucket"
operator|+
literal|"'"
decl_stmt|;
comment|// disabling vectorization as this test yields incorrect results with vectorization
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
init|(
name|IDriver
name|driver
init|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database testBucketing3"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use testBucketing3"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table streamedtable ( key1 string,key2 int,data string ) partitioned by (year "
operator|+
literal|"int) clustered by "
operator|+
literal|"( "
operator|+
literal|"key1,key2 ) into "
operator|+
name|bucketCount
operator|+
literal|" buckets  stored as orc  location "
operator|+
name|tableLoc
operator|+
literal|" TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
comment|//  In 'nobucket' table we capture bucketid from streamedtable to workaround a hive bug that prevents joins two identically bucketed tables
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table nobucket ( bucketid int, key1 string,key2 int,data string ) partitioned by "
operator|+
literal|"(year int) location "
operator|+
name|tableLoc3
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table finaltable ( bucketid int, key1 string,key2 int,data string ) partitioned "
operator|+
literal|"by (year int) clustered by ( key1,key2 ) into "
operator|+
name|bucketCount
operator|+
literal|" buckets  stored as orc location "
operator|+
name|tableLoc2
operator|+
literal|" TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|String
index|[]
name|records
init|=
operator|new
name|String
index|[]
block|{
literal|"PSFAHYLZVC,29,EPNMA,2017"
block|,
literal|"PPPRKWAYAU,96,VUTEE,2017"
block|,
literal|"MIAOFERCHI,3,WBDSI,2017"
block|,
literal|"CEGQAZOWVN,0,WCUZL,2017"
block|,
literal|"XWAKMNSVQF,28,YJVHU,2017"
block|,
literal|"XBWTSAJWME,2,KDQFO,2017"
block|,
literal|"FUVLQTAXAY,5,LDSDG,2017"
block|,
literal|"QTQMDJMGJH,6,QBOMA,2018"
block|,
literal|"EFLOTLWJWN,71,GHWPS,2018"
block|,
literal|"PEQNAOJHCM,82,CAAFI,2018"
block|,
literal|"MOEKQLGZCP,41,RUACR,2018"
block|,
literal|"QZXMCOPTID,37,LFLWE,2018"
block|,
literal|"EYALVWICRD,13,JEZLC,2018"
block|,
literal|"VYWLZAYTXX,16,DMVZX,2018"
block|,
literal|"OSALYSQIXR,47,HNZVE,2018"
block|,
literal|"JGKVHKCEGQ,25,KSCJB,2018"
block|,
literal|"WQFMMYDHET,12,DTRWA,2018"
block|,
literal|"AJOVAYZKZQ,15,YBKFO,2018"
block|,
literal|"YAQONWCUAU,31,QJNHZ,2018"
block|,
literal|"DJBXUEUOEB,35,IYCBL,2018"
block|}
decl_stmt|;
name|StrictDelimitedInputWriter
name|wr
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testBucketing3"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"streamedtable"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|wr
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|record
range|:
name|records
control|)
block|{
name|connection
operator|.
name|write
argument_list|(
name|record
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res1
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select row__id.bucketid, * from streamedtable order by key2"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|re
range|:
name|res1
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|re
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|re
operator|.
name|endsWith
argument_list|(
literal|"2017"
argument_list|)
operator|||
name|re
operator|.
name|endsWith
argument_list|(
literal|"2018"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|driver
operator|.
name|run
argument_list|(
literal|"insert into nobucket partition(year) select row__id.bucketid,* from streamedtable"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from nobucket"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|records
operator|.
name|length
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|" insert into finaltable partition(year) select * from nobucket"
argument_list|)
expr_stmt|;
name|res
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from finaltable"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|records
operator|.
name|length
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res2
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select row__id.bucketid,* from finaltable where row__id.bucketid<>bucketid"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|res2
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|res2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|res2
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from finaltable where year=2018"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|res2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|res2
control|)
block|{
name|assertTrue
argument_list|(
name|s
operator|.
name|endsWith
argument_list|(
literal|"2018"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|res2
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"show partitions finaltable"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"year=2017"
argument_list|,
name|res2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"year=2018"
argument_list|,
name|res2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|unset
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
operator|.
name|varname
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDPTwoLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,foo,Asia,India"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,bar,Europe,Germany"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"3,foo,Asia,India"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"4,bar,Europe,Germany"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"5,foo,Asia,China"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"6,bar,Europe,France"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"7,foo,Asia,China"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"8,bar,Europe,France"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from "
operator|+
operator|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|)
operator|+
literal|" order by id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1\tfoo\tAsia\tIndia"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2\tbar\tEurope\tGermany"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3\tfoo\tAsia\tIndia"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4\tbar\tEurope\tGermany"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5\tfoo\tAsia\tChina"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"6\tbar\tEurope\tFrance"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"7\tfoo\tAsia\tChina"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8\tbar\tEurope\tFrance"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"show partitions "
operator|+
operator|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"continent=Asia/country=India"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"continent=Asia/country=China"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"continent=Europe/country=Germany"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"continent=Europe/country=France"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDPTwoLevelMissingPartitionValues
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,foo,Asia,India"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,bar,Europe,Germany"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"3,foo,Asia,India"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"4,bar,Europe,Germany"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"5,foo,Asia,China"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"6,bar,Europe,France"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"7,foo,Asia,China"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"8,bar,Europe,France"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from "
operator|+
operator|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|)
operator|+
literal|" order by id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1\tfoo\tAsia\tIndia"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2\tbar\tEurope\tGermany"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3\tfoo\tAsia\tIndia"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4\tbar\tEurope\tGermany"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5\tfoo\tAsia\tChina"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"6\tbar\tEurope\tFrance"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"7\tfoo\tAsia\tChina"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8\tbar\tEurope\tFrance"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"show partitions "
operator|+
operator|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"continent=Asia/country=India"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"continent=Asia/country=China"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"continent=Europe/country=Germany"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"continent=Europe/country=France"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDPTwoLevelNonStringPartitionColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tblName
init|=
literal|"alerts2"
decl_stmt|;
name|String
index|[]
name|partNames
init|=
operator|new
name|String
index|[]
block|{
literal|"year"
block|,
literal|"month"
block|}
decl_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|null
argument_list|,
name|fieldNames
argument_list|,
name|colTypes
argument_list|,
name|bucketCols
argument_list|,
name|partNames
argument_list|,
name|loc1
argument_list|,
literal|2
argument_list|,
literal|"partitioned by (year int, month int)"
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,foo,2018,2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,bar,2019"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"3,foo,2018"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"4,bar,2019"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"5,foo,2018"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"6,bar,2019"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"7,foo,,"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"8,bar,,12"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// when partition column type is not string, the values from __HIVE_DEFAULT_PARTITION__ will be NULL
name|String
name|defaultPartitionName
init|=
literal|"NULL"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from "
operator|+
operator|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|)
operator|+
literal|" order by id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1\tfoo\t2018\t2"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2\tbar\t2019\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3\tfoo\t2018\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4\tbar\t2019\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5\tfoo\t2018\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"6\tbar\t2019\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"7\tfoo\t"
operator|+
name|defaultPartitionName
operator|+
literal|"\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8\tbar\t"
operator|+
name|defaultPartitionName
operator|+
literal|"\t12"
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|defaultPartitionName
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
expr_stmt|;
name|res
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"show partitions "
operator|+
operator|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"year=2018/month=2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"year=2018/month="
operator|+
name|defaultPartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"year=2019/month="
operator|+
name|defaultPartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"year="
operator|+
name|defaultPartitionName
operator|+
literal|"/month="
operator|+
name|defaultPartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|contains
argument_list|(
literal|"year="
operator|+
name|defaultPartitionName
operator|+
literal|"/month=12"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteBeforeBegin
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// begin + write + commit
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,foo,Asia"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,bar,Europe"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// no begin + write
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|write
argument_list|(
literal|"3,SHOULD FAIL!"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Transaction state is not OPEN. Missing beginTransaction?"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no begin + commit
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Transaction state is not OPEN. Missing beginTransaction?"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no begin + abort
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Transaction state is not OPEN. Missing beginTransaction?"
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|defaultPartitionName
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from "
operator|+
operator|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|)
operator|+
literal|" order by id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1\tfoo\tAsia\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2\tbar\tEurope\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegexInputStreamDP
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|regex
init|=
literal|"([^,]*),(.*),(.*),(.*)"
decl_stmt|;
name|StrictRegexWriter
name|writer
init|=
name|StrictRegexWriter
operator|.
name|newBuilder
argument_list|()
comment|// if unspecified, default one or [\r\n] will be used for line break
operator|.
name|withRegex
argument_list|(
name|regex
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|String
name|rows
init|=
literal|"1,foo,Asia,India\r2,bar,Europe,Germany\r3,baz,Asia,China\r4,cat,Australia,"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|rows
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
name|bais
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|bais
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" order by id"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tfoo\tAsia\tIndia"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\tbar\tEurope\tGermany"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3\tbaz\tAsia\tChina"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4\tcat\tAustralia\t__HIVE_DEFAULT_PARTITION__"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"show partitions "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|contains
argument_list|(
literal|"continent=Asia/country=India"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|contains
argument_list|(
literal|"continent=Asia/country=China"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|contains
argument_list|(
literal|"continent=Europe/country=Germany"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|contains
argument_list|(
literal|"continent=Australia/country=__HIVE_DEFAULT_PARTITION__"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJsonInputStreamDP
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictJsonWriter
name|writer
init|=
name|StrictJsonWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withLineDelimiterPattern
argument_list|(
literal|"\\|"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// 1st Txn
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|records
init|=
literal|"{\"id\" : 1, \"msg\": \"Hello streaming\", \"continent\": \"Asia\", \"Country\": \"India\"}|"
operator|+
literal|"{\"id\" : 2, \"msg\": \"Hello world\", \"continent\": \"Europe\", \"Country\": \"Germany\"}|"
operator|+
literal|"{\"id\" : 3, \"msg\": \"Hello world!!\", \"continent\": \"Asia\", \"Country\": \"China\"}|"
operator|+
literal|"{\"id\" : 4, \"msg\": \"Hmm..\", \"continent\": \"Australia\", \"Unknown-field\": \"whatever\"}|"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|records
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|connection
operator|.
name|write
argument_list|(
name|bais
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|bais
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" order by id"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tHello streaming\tAsia\tIndia"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\tHello world\tEurope\tGermany"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3\tHello world!!\tAsia\tChina"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4\tHmm..\tAustralia\t__HIVE_DEFAULT_PARTITION__"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"show partitions "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|contains
argument_list|(
literal|"continent=Asia/country=India"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|contains
argument_list|(
literal|"continent=Asia/country=China"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|contains
argument_list|(
literal|"continent=Europe/country=Germany"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|contains
argument_list|(
literal|"continent=Australia/country=__HIVE_DEFAULT_PARTITION__"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteAfterClose
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// begin + write + commit
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,foo,Asia"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,bar,Europe"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// close + write
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|write
argument_list|(
literal|"3,SHOULD FAIL!"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Streaming connection is closed already."
argument_list|)
argument_list|)
expr_stmt|;
comment|// close + commit
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Streaming connection is closed already."
argument_list|)
argument_list|)
expr_stmt|;
comment|// close + abort
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Streaming connection is closed already."
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|defaultPartitionName
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from "
operator|+
operator|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|)
operator|+
literal|" order by id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1\tfoo\tAsia\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2\tbar\tEurope\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteAfterAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// begin + write + commit
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,foo,Asia"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,bar,Europe"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// begin + write + abort
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"3,oops!"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
comment|// begin + write + abort
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"4,I did it again!"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
comment|// begin + write + commit
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"5,Not now!,Europe"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// close + write
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|write
argument_list|(
literal|"6,SHOULD FAIL!"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Streaming connection is closed already."
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|defaultPartitionName
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from "
operator|+
operator|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|)
operator|+
literal|" order by id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1\tfoo\tAsia\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2\tbar\tEurope\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5\tNot now!\tEurope\t"
operator|+
name|defaultPartitionName
argument_list|,
name|res
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|bucketCount
init|=
literal|100
decl_stmt|;
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|dbFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tbl1
init|=
literal|"validation1"
decl_stmt|;
name|String
name|tbl2
init|=
literal|"validation2"
decl_stmt|;
name|String
name|tableLoc
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tbl1
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableLoc2
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tbl2
operator|+
literal|"'"
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database testBucketing3"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use testBucketing3"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table "
operator|+
name|tbl1
operator|+
literal|" ( key1 string, data string ) clustered by ( key1 ) into "
operator|+
name|bucketCount
operator|+
literal|" buckets  stored as orc  location "
operator|+
name|tableLoc
operator|+
literal|" TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table "
operator|+
name|tbl2
operator|+
literal|" ( key1 string, data string ) clustered by ( key1 ) into "
operator|+
name|bucketCount
operator|+
literal|" buckets  stored as orc  location "
operator|+
name|tableLoc2
operator|+
literal|" TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|wr
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testBucketing3"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"validation2"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|wr
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"InvalidTable exception was not thrown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTable
name|e
parameter_list|)
block|{
comment|// expecting this exception
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testBucketing3"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"validation2"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|wr
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"InvalidTable exception was not thrown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTable
name|e
parameter_list|)
block|{
comment|// expecting this exception
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|runDDL
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
name|sql
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Statement: "
operator|+
name|sql
operator|+
literal|" failed: "
operator|+
name|cpr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|queryTable
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|query
operator|+
literal|" failed: "
operator|+
name|cpr
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|// delete db and all tables in it
specifier|public
specifier|static
name|void
name|dropDB
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|String
name|databaseName
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|String
name|table
range|:
name|client
operator|.
name|listTableNamesByFilter
argument_list|(
name|databaseName
argument_list|,
literal|""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|databaseName
argument_list|,
name|table
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
name|databaseName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{     }
block|}
comment|///////// -------- UTILS ------- /////////
comment|// returns Path of the partition created (if any) else Path of table
specifier|private
specifier|static
name|Path
name|createDbAndTable
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
index|[]
name|colNames
parameter_list|,
name|String
index|[]
name|colTypes
parameter_list|,
name|String
index|[]
name|bucketCols
parameter_list|,
name|String
index|[]
name|partNames
parameter_list|,
name|String
name|dbLocation
parameter_list|,
name|int
name|bucketCount
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|dbLocation
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableLoc
init|=
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tableName
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database IF NOT EXISTS "
operator|+
name|databaseName
operator|+
literal|" location '"
operator|+
name|dbUri
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use "
operator|+
name|databaseName
argument_list|)
expr_stmt|;
name|String
name|crtTbl
init|=
literal|"create table "
operator|+
name|tableName
operator|+
literal|" ( "
operator|+
name|getTableColumnsStr
argument_list|(
name|colNames
argument_list|,
name|colTypes
argument_list|)
operator|+
literal|" )"
operator|+
name|getPartitionStmtStr
argument_list|(
name|partNames
argument_list|)
operator|+
literal|" clustered by ( "
operator|+
name|join
argument_list|(
name|bucketCols
argument_list|,
literal|","
argument_list|)
operator|+
literal|" )"
operator|+
literal|" into "
operator|+
name|bucketCount
operator|+
literal|" buckets "
operator|+
literal|" stored as orc "
operator|+
literal|" location '"
operator|+
name|tableLoc
operator|+
literal|"'"
operator|+
literal|" TBLPROPERTIES ('transactional'='true') "
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
name|crtTbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|partNames
operator|!=
literal|null
operator|&&
name|partNames
operator|.
name|length
operator|!=
literal|0
operator|&&
name|partVals
operator|!=
literal|null
condition|)
block|{
return|return
name|addPartition
argument_list|(
name|driver
argument_list|,
name|tableName
argument_list|,
name|partVals
argument_list|,
name|partNames
argument_list|)
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|tableLoc
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Path
name|createDbAndTable
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
index|[]
name|colNames
parameter_list|,
name|String
index|[]
name|colTypes
parameter_list|,
name|String
index|[]
name|bucketCols
parameter_list|,
name|String
index|[]
name|partNames
parameter_list|,
name|String
name|dbLocation
parameter_list|,
name|int
name|bucketCount
parameter_list|,
name|String
name|partLine
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|dbLocation
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableLoc
init|=
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tableName
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database IF NOT EXISTS "
operator|+
name|databaseName
operator|+
literal|" location '"
operator|+
name|dbUri
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use "
operator|+
name|databaseName
argument_list|)
expr_stmt|;
name|String
name|crtTbl
init|=
literal|"create table "
operator|+
name|tableName
operator|+
literal|" ( "
operator|+
name|getTableColumnsStr
argument_list|(
name|colNames
argument_list|,
name|colTypes
argument_list|)
operator|+
literal|" )"
operator|+
name|partLine
operator|+
literal|" clustered by ( "
operator|+
name|join
argument_list|(
name|bucketCols
argument_list|,
literal|","
argument_list|)
operator|+
literal|" )"
operator|+
literal|" into "
operator|+
name|bucketCount
operator|+
literal|" buckets "
operator|+
literal|" stored as orc "
operator|+
literal|" location '"
operator|+
name|tableLoc
operator|+
literal|"'"
operator|+
literal|" TBLPROPERTIES ('transactional'='true') "
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
name|crtTbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|partNames
operator|!=
literal|null
operator|&&
name|partNames
operator|.
name|length
operator|!=
literal|0
operator|&&
name|partVals
operator|!=
literal|null
condition|)
block|{
return|return
name|addPartition
argument_list|(
name|driver
argument_list|,
name|tableName
argument_list|,
name|partVals
argument_list|,
name|partNames
argument_list|)
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|tableLoc
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Path
name|addPartition
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
index|[]
name|partNames
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|partSpec
init|=
name|getPartsSpec
argument_list|(
name|partNames
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|String
name|addPart
init|=
literal|"alter table "
operator|+
name|tableName
operator|+
literal|" add partition ( "
operator|+
name|partSpec
operator|+
literal|" )"
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
name|addPart
argument_list|)
expr_stmt|;
return|return
name|getPartitionPath
argument_list|(
name|driver
argument_list|,
name|tableName
argument_list|,
name|partSpec
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Path
name|getPartitionPath
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partSpec
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"describe extended "
operator|+
name|tableName
operator|+
literal|" PARTITION ("
operator|+
name|partSpec
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|String
name|partInfo
init|=
name|res
operator|.
name|get
argument_list|(
name|res
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|partInfo
operator|.
name|indexOf
argument_list|(
literal|"location:"
argument_list|)
operator|+
literal|"location:"
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|partInfo
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|,
name|start
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|partInfo
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getTableColumnsStr
parameter_list|(
name|String
index|[]
name|colNames
parameter_list|,
name|String
index|[]
name|colTypes
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|colNames
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|colTypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|colNames
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// converts partNames into "partName1 string, partName2 string"
specifier|private
specifier|static
name|String
name|getTablePartsStr
parameter_list|(
name|String
index|[]
name|partNames
parameter_list|)
block|{
if|if
condition|(
name|partNames
operator|==
literal|null
operator|||
name|partNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|partNames
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|" string"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|partNames
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// converts partNames,partVals into "partName1=val1, partName2=val2"
specifier|private
specifier|static
name|String
name|getPartsSpec
parameter_list|(
name|String
index|[]
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partVals
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|partNames
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|" = '"
argument_list|)
operator|.
name|append
argument_list|(
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|partVals
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|join
parameter_list|(
name|String
index|[]
name|values
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|strbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|strbuf
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|strbuf
operator|.
name|append
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|strbuf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getPartitionStmtStr
parameter_list|(
name|String
index|[]
name|partNames
parameter_list|)
block|{
if|if
condition|(
name|partNames
operator|==
literal|null
operator|||
name|partNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
literal|" partitioned by ("
operator|+
name|getTablePartsStr
argument_list|(
name|partNames
argument_list|)
operator|+
literal|" )"
return|;
block|}
block|}
end_class

end_unit

