begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|streaming
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
operator|.
name|BUCKET_COUNT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RawLocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|IMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetOpenTxnsInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnAbortedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|hive_metastoreConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|AcidHouseKeeperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnDbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|DriverFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|IDriver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|AcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|BucketCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|IOConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|OrcStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|orc
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|processors
operator|.
name|CommandProcessorResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|txn
operator|.
name|compactor
operator|.
name|Worker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableLongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|OrcAcidUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|tools
operator|.
name|FileDump
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestStreaming
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStreaming
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|RawFileSystem
extends|extends
name|RawLocalFileSystem
block|{
specifier|private
specifier|static
specifier|final
name|URI
name|NAME
decl_stmt|;
static|static
block|{
try|try
block|{
name|NAME
operator|=
operator|new
name|URI
argument_list|(
literal|"raw:///"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad uri"
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"raw"
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|pathToFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Can'table find "
operator|+
name|path
argument_list|)
throw|;
block|}
comment|// get close enough
name|short
name|mod
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0444
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|canWrite
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0200
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|canExecute
argument_list|()
condition|)
block|{
name|mod
operator||=
literal|0111
expr_stmt|;
block|}
return|return
operator|new
name|FileStatus
argument_list|(
name|file
operator|.
name|length
argument_list|()
argument_list|,
name|file
operator|.
name|isDirectory
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|,
name|file
operator|.
name|lastModified
argument_list|()
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
name|mod
argument_list|)
argument_list|,
literal|"owen"
argument_list|,
literal|"users"
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|COL1
init|=
literal|"id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COL2
init|=
literal|"msg"
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|IDriver
name|driver
decl_stmt|;
specifier|private
specifier|final
name|IMetaStoreClient
name|msClient
decl_stmt|;
comment|// partitioned table
specifier|private
specifier|final
specifier|static
name|String
name|dbName
init|=
literal|"testing"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|tblName
init|=
literal|"alerts"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|,
name|COL2
block|}
decl_stmt|;
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|partitionVals
decl_stmt|;
specifier|private
specifier|static
name|Path
name|partLoc
decl_stmt|;
specifier|private
specifier|static
name|Path
name|partLoc2
decl_stmt|;
comment|// unpartitioned table
specifier|private
specifier|final
specifier|static
name|String
name|dbName2
init|=
literal|"testing2"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|tblName2
init|=
literal|"alerts"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|fieldNames2
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|,
name|COL2
block|}
decl_stmt|;
comment|// for bucket join testing
specifier|private
specifier|final
specifier|static
name|String
name|dbName3
init|=
literal|"testing3"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|tblName3
init|=
literal|"dimensionTable"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|dbName4
init|=
literal|"testing4"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|tblName4
init|=
literal|"factTable"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partitionVals2
decl_stmt|;
specifier|private
specifier|final
name|String
name|PART1_CONTINENT
init|=
literal|"Asia"
decl_stmt|;
specifier|private
specifier|final
name|String
name|PART1_COUNTRY
init|=
literal|"India"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|dbFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|public
name|TestStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|partitionVals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|partitionVals
operator|.
name|add
argument_list|(
name|PART1_CONTINENT
argument_list|)
expr_stmt|;
name|partitionVals
operator|.
name|add
argument_list|(
name|PART1_COUNTRY
argument_list|)
expr_stmt|;
name|partitionVals2
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|partitionVals2
operator|.
name|add
argument_list|(
name|PART1_COUNTRY
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.raw.impl"
argument_list|,
name|RawFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_AUTHORIZATION_MANAGER
argument_list|,
literal|"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory"
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_EXECUTE_SET_UGI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dbFolder
operator|.
name|create
argument_list|()
expr_stmt|;
comment|//1) Start from a clean slate (metastore)
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//2) obtain metastore clients
name|msClient
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|driver
operator|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|driver
operator|.
name|setMaxRows
argument_list|(
literal|200002
argument_list|)
expr_stmt|;
comment|//make sure Driver returns all results
comment|// drop and recreate the necessary databases and tables
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|String
index|[]
name|colNames
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|,
name|COL2
block|}
decl_stmt|;
name|String
index|[]
name|colTypes
init|=
operator|new
name|String
index|[]
block|{
name|serdeConstants
operator|.
name|INT_TYPE_NAME
block|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
block|}
decl_stmt|;
name|String
index|[]
name|bucketCols
init|=
operator|new
name|String
index|[]
block|{
name|COL1
block|}
decl_stmt|;
name|String
name|loc1
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName
operator|+
literal|".db"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|partNames
init|=
operator|new
name|String
index|[]
block|{
literal|"Continent"
block|,
literal|"Country"
block|}
decl_stmt|;
name|partLoc
operator|=
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionVals
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|,
name|bucketCols
argument_list|,
name|partNames
argument_list|,
name|loc1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName2
argument_list|)
expr_stmt|;
name|String
name|loc2
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName2
operator|+
literal|".db"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|partLoc2
operator|=
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName2
argument_list|,
name|tblName2
argument_list|,
literal|null
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|,
name|bucketCols
argument_list|,
literal|null
argument_list|,
name|loc2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|loc3
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
literal|"testing5.db"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|createStoreSales
argument_list|(
literal|"testing5"
argument_list|,
name|loc3
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table testBucketing3.streamedtable"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table testBucketing3.finaltable"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table testBucketing3.nobucket"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|msClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|driver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createStoreSales
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|loc
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|loc
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableLoc
init|=
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"store_sales"
decl_stmt|;
name|boolean
name|success
init|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database IF NOT EXISTS "
operator|+
name|dbName
operator|+
literal|" location '"
operator|+
name|dbUri
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"drop table if exists store_sales"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table store_sales\n"
operator|+
literal|"(\n"
operator|+
literal|"    ss_sold_date_sk           int,\n"
operator|+
literal|"    ss_sold_time_sk           int,\n"
operator|+
literal|"    ss_item_sk                int,\n"
operator|+
literal|"    ss_customer_sk            int,\n"
operator|+
literal|"    ss_cdemo_sk               int,\n"
operator|+
literal|"    ss_hdemo_sk               int,\n"
operator|+
literal|"    ss_addr_sk                int,\n"
operator|+
literal|"    ss_store_sk               int,\n"
operator|+
literal|"    ss_promo_sk               int,\n"
operator|+
literal|"    ss_ticket_number          int,\n"
operator|+
literal|"    ss_quantity               int,\n"
operator|+
literal|"    ss_wholesale_cost         decimal(7,2),\n"
operator|+
literal|"    ss_list_price             decimal(7,2),\n"
operator|+
literal|"    ss_sales_price            decimal(7,2),\n"
operator|+
literal|"    ss_ext_discount_amt       decimal(7,2),\n"
operator|+
literal|"    ss_ext_sales_price        decimal(7,2),\n"
operator|+
literal|"    ss_ext_wholesale_cost     decimal(7,2),\n"
operator|+
literal|"    ss_ext_list_price         decimal(7,2),\n"
operator|+
literal|"    ss_ext_tax                decimal(7,2),\n"
operator|+
literal|"    ss_coupon_amt             decimal(7,2),\n"
operator|+
literal|"    ss_net_paid               decimal(7,2),\n"
operator|+
literal|"    ss_net_paid_inc_tax       decimal(7,2),\n"
operator|+
literal|"    ss_net_profit             decimal(7,2)\n"
operator|+
literal|")\n"
operator|+
literal|" partitioned by (dt string)\n"
operator|+
literal|"clustered by (ss_store_sk, ss_promo_sk)\n"
operator|+
literal|"INTO 4 BUCKETS stored as orc "
operator|+
literal|" location '"
operator|+
name|tableLoc
operator|+
literal|"'"
operator|+
literal|"  TBLPROPERTIES ('orc.compress'='NONE', 'transactional'='true')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|success
operator|=
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"alter table store_sales add partition(dt='2015')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
comment|/**    * make sure it works with table where bucket col is not 1st col    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBucketingWhereBucketColIsNotFirstCol
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partitionVals
operator|.
name|add
argument_list|(
literal|"2015"
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testing5"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"store_sales"
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|StringBuilder
name|row
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|ints
init|=
literal|0
init|;
name|ints
operator|<
literal|11
condition|;
name|ints
operator|++
control|)
block|{
name|row
operator|.
name|append
argument_list|(
name|ints
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|decs
init|=
literal|0
init|;
name|decs
operator|<
literal|12
condition|;
name|decs
operator|++
control|)
block|{
name|row
operator|.
name|append
argument_list|(
name|i
operator|+
literal|0.1
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|setLength
argument_list|(
name|row
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
name|row
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select row__id.bucketid, * from testing5.store_sales"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|re
range|:
name|res
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that streaming can write to unbucketed table.    */
annotation|@
name|Test
specifier|public
name|void
name|testNoBuckets
parameter_list|()
throws|throws
name|Exception
block|{
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"drop table if exists default.streamingnobuckets"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"create table default.streamingnobuckets (a string, b string) stored as orc "
operator|+
literal|"TBLPROPERTIES('transactional'='true')"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"insert into default.streamingnobuckets values('foo','bar')"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from default.streamingnobuckets"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo\tbar"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|wr
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"Default"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"streamingNoBuckets"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|2
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|wr
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a1,b2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a3,b4"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|TxnStore
name|txnHandler
init|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ShowLocksResponse
name|resp
init|=
name|txnHandler
operator|.
name|showLocks
argument_list|(
operator|new
name|ShowLocksRequest
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resp
operator|.
name|getLocksSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"streamingnobuckets"
argument_list|,
name|resp
operator|.
name|getLocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|resp
operator|.
name|getLocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a5,b6"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a7,b8"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
name|BucketCodec
operator|.
name|determineVersion
argument_list|(
literal|536870912
argument_list|)
operator|.
name|decodeWriterId
argument_list|(
literal|536870912
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from default.streamingnobuckets order by ROW__ID"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\tfoo\tbar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000001_0000001_0000/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":0}\ta1\tb2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000002_0000003/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":1}\ta3\tb4"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000002_0000003/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":0}\ta5\tb6"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000002_0000003/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":1}\ta7\tb8"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000002_0000003/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"update default.streamingnobuckets set a=0, b=0 where a='a7'"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"delete from default.streamingnobuckets where a='a1'"
argument_list|)
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select a, b from default.streamingnobuckets order by a, b"
argument_list|)
expr_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"at row="
operator|+
name|row
argument_list|,
literal|"0\t0"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"at row="
operator|+
name|row
argument_list|,
literal|"a3\tb4"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"at row="
operator|+
name|row
argument_list|,
literal|"a5\tb6"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"at row="
operator|+
name|row
argument_list|,
literal|"foo\tbar"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"alter table default.streamingnobuckets compact 'major'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from default.streamingnobuckets order by ROW__ID"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\tfoo\tbar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/base_0000005/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":1}\ta3\tb4"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/base_0000005/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":0}\ta5\tb6"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/base_0000005/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":4,\"bucketid\":536870912,\"rowid\":0}\t0\t0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/base_0000005/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDeltaPath
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|connection
operator|.
name|getDeltaFileLocation
argument_list|(
name|partitionVals
argument_list|,
literal|0
argument_list|,
literal|5L
argument_list|,
literal|5L
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|path
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"testing.db/alerts/continent"
operator|+
literal|"=Asia/country=India/delta_0000005_0000005_0009/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommitWithKeyValue
parameter_list|()
throws|throws
name|Exception
block|{
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"drop table if exists default.keyvalue"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"create table default.keyvalue (a string, b string) stored as orc "
operator|+
literal|"TBLPROPERTIES('transactional'='true')"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"insert into default.keyvalue values('foo','bar')"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"ALTER TABLE default.keyvalue SET TBLPROPERTIES('_metamykey' = 'myvalue')"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from default.keyvalue"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo\tbar"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|wr
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"Default"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"keyvalue"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|2
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|wr
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a1,b2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a3,b4"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|(
literal|null
argument_list|,
literal|"_metamykey"
argument_list|,
literal|"myvalue"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from default.keyvalue order by ROW__ID"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":0}\ta1\tb2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"keyvalue/delta_0000002_0000003/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":1}\ta3\tb4"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"keyvalue/delta_0000002_0000003/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"SHOW TBLPROPERTIES default.keyvalue('_metamykey')"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"_metamykey\tmyvalue"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectionWithWriteId
parameter_list|()
throws|throws
name|Exception
block|{
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"drop table if exists default.writeidconnection"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"create table default.writeidconnection (a string, b string) stored as orc "
operator|+
literal|"TBLPROPERTIES('transactional'='true')"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"insert into default.writeidconnection values('a0','bar')"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from default.writeidconnection"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a0\tbar"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writerT
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|transactionConnection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"Default"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"writeidconnection"
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writerT
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|transactionConnection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Table
name|tObject
init|=
name|transactionConnection
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Long
name|writeId
init|=
name|transactionConnection
operator|.
name|getCurrentWriteId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tObject
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writerOne
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connectionOne
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"Default"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"writeidconnection"
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writerOne
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withWriteId
argument_list|(
name|writeId
argument_list|)
operator|.
name|withStatementId
argument_list|(
literal|1
argument_list|)
operator|.
name|withTableObject
argument_list|(
name|tObject
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|StrictDelimitedInputWriter
name|writerTwo
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connectionTwo
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"Default"
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writerTwo
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withWriteId
argument_list|(
name|writeId
argument_list|)
operator|.
name|withStatementId
argument_list|(
literal|2
argument_list|)
operator|.
name|withTableObject
argument_list|(
name|tObject
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|connectionOne
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|connectionTwo
argument_list|)
expr_stmt|;
name|connectionOne
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connectionTwo
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connectionOne
operator|.
name|write
argument_list|(
literal|"a1,b2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connectionTwo
operator|.
name|write
argument_list|(
literal|"a5,b6"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connectionOne
operator|.
name|write
argument_list|(
literal|"a3,b4"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connectionOne
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connectionTwo
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|PREPARED_FOR_COMMIT
argument_list|,
name|connectionOne
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|PREPARED_FOR_COMMIT
argument_list|,
name|connectionTwo
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|connectionOne
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"second beginTransaction should have thrown a "
operator|+
literal|"StreamingException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StreamingException
name|e
parameter_list|)
block|{      }
name|connectionOne
operator|.
name|close
argument_list|()
expr_stmt|;
name|connectionTwo
operator|.
name|close
argument_list|()
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select ROW__ID, a, b, "
operator|+
literal|"INPUT__FILE__NAME from default.writeidconnection order by ROW__ID"
argument_list|)
expr_stmt|;
comment|// Nothing here since it hasn't been committed
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|transactionConnection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select ROW__ID, a, b, "
operator|+
literal|"INPUT__FILE__NAME from default.writeidconnection order by a"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\ta0\tbar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
literal|"\"rowid\":0}\ta1\tb2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|contains
argument_list|(
literal|"\"rowid\":1}\ta3\tb4"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|contains
argument_list|(
literal|"\ta5\tb6"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllTypesDelimitedWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"drop table if exists default.alltypes"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"create table if not exists default.alltypes ( bo boolean, ti tinyint, si smallint, i int, bi bigint, "
operator|+
literal|"f float, d double, de decimal(10,3), ts timestamp, da date, s string, c char(5), vc varchar(5), "
operator|+
literal|"m map<string, string>, l array<int>, st struct<c1:int, c2:string> ) "
operator|+
literal|"stored as orc TBLPROPERTIES('transactional'='true')"
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|wr
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|'|'
argument_list|)
operator|.
name|withCollectionDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|withMapKeyDelimiter
argument_list|(
literal|':'
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"default"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"alltypes"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|2
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|wr
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|String
name|row1
init|=
literal|"true|10|100|1000|10000|4.0|20.0|4.2222|1969-12-31 "
operator|+
literal|"15:59:58.174|1970-01-01|string|hello|hello|k1:v1|100,200|10,foo"
decl_stmt|;
name|String
name|row2
init|=
literal|"false|20|200|2000|20000|8.0|40.0|2.2222|1970-12-31 15:59:58.174|1971-01-01|abcd|world|world|"
operator|+
literal|"k4:v4|200,300|20,bar"
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
name|row1
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
name|row2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select ROW__ID, bo, ti, si, i, bi, f, d, de, ts, da, s, c, vc, m, l, st,"
operator|+
literal|" INPUT__FILE__NAME from default.alltypes order by ROW__ID"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|gotRow1
init|=
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|expectedPrefixRow1
init|=
literal|"{\"writeid\":1,\"bucketid\":536870912,"
operator|+
literal|"\"rowid\":0}\ttrue\t10\t100\t1000\t10000\t4.0\t20.0\t4.222\t1969-12-31 15:59:58.174\t1970-01-01\tstring"
operator|+
literal|"\thello\thello\t{\"k1\":\"v1\"}\t[100,200]\t{\"c1\":10,\"c2\":\"foo\"}"
decl_stmt|;
name|String
name|expectedSuffixRow1
init|=
literal|"alltypes/delta_0000001_0000002/bucket_00000"
decl_stmt|;
name|String
name|gotRow2
init|=
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|expectedPrefixRow2
init|=
literal|"{\"writeid\":1,\"bucketid\":536870912,"
operator|+
literal|"\"rowid\":1}\tfalse\t20\t200\t2000\t20000\t8.0\t40.0\t2.222\t1970-12-31 15:59:58.174\t1971-01-01\tabcd"
operator|+
literal|"\tworld\tworld\t{\"k4\":\"v4\"}\t[200,300]\t{\"c1\":20,\"c2\":\"bar\"}"
decl_stmt|;
name|String
name|expectedSuffixRow2
init|=
literal|"alltypes/delta_0000001_0000002/bucket_00000"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotRow1
argument_list|,
name|gotRow1
operator|.
name|startsWith
argument_list|(
name|expectedPrefixRow1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotRow1
argument_list|,
name|gotRow1
operator|.
name|endsWith
argument_list|(
name|expectedSuffixRow1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotRow2
argument_list|,
name|gotRow2
operator|.
name|startsWith
argument_list|(
name|expectedPrefixRow2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotRow2
argument_list|,
name|gotRow2
operator|.
name|endsWith
argument_list|(
name|expectedSuffixRow2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllTypesDelimitedWriterInputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"drop table if exists default.alltypes"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"create table if not exists default.alltypes ( bo boolean, ti tinyint, si smallint, i int, bi bigint, "
operator|+
literal|"f float, d double, de decimal(10,3), ts timestamp, da date, s string, c char(5), vc varchar(5), "
operator|+
literal|"m map<string, string>, l array<int>, st struct<c1:int, c2:string> ) "
operator|+
literal|"stored as orc TBLPROPERTIES('transactional'='true')"
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|wr
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|'|'
argument_list|)
operator|.
name|withCollectionDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|withMapKeyDelimiter
argument_list|(
literal|':'
argument_list|)
operator|.
name|withLineDelimiterPattern
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"default"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"alltypes"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|2
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|wr
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|String
name|row1
init|=
literal|"true|10|100|1000|10000|4.0|20.0|4.2222|1969-12-31 "
operator|+
literal|"15:59:58.174|1970-01-01|string|hello|hello|k1:v1|100,200|10,foo"
decl_stmt|;
name|String
name|row2
init|=
literal|"false|20|200|2000|20000|8.0|40.0|2.2222|1970-12-31 15:59:58.174|1971-01-01|abcd|world|world|"
operator|+
literal|"k4:v4|200,300|20,bar"
decl_stmt|;
name|String
name|allRows
init|=
name|row1
operator|+
literal|"\n"
operator|+
name|row2
operator|+
literal|"\n"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|allRows
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
name|bais
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|bais
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select ROW__ID, bo, ti, si, i, bi, f, d, de, ts, da, s, c, vc, m, l, st,"
operator|+
literal|" INPUT__FILE__NAME from default.alltypes order by ROW__ID"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|gotRow1
init|=
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|expectedPrefixRow1
init|=
literal|"{\"writeid\":1,\"bucketid\":536870912,"
operator|+
literal|"\"rowid\":0}\ttrue\t10\t100\t1000\t10000\t4.0\t20.0\t4.222\t1969-12-31 15:59:58.174\t1970-01-01\tstring"
operator|+
literal|"\thello\thello\t{\"k1\":\"v1\"}\t[100,200]\t{\"c1\":10,\"c2\":\"foo\"}"
decl_stmt|;
name|String
name|expectedSuffixRow1
init|=
literal|"alltypes/delta_0000001_0000002/bucket_00000"
decl_stmt|;
name|String
name|gotRow2
init|=
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|expectedPrefixRow2
init|=
literal|"{\"writeid\":1,\"bucketid\":536870912,"
operator|+
literal|"\"rowid\":1}\tfalse\t20\t200\t2000\t20000\t8.0\t40.0\t2.222\t1970-12-31 15:59:58.174\t1971-01-01\tabcd"
operator|+
literal|"\tworld\tworld\t{\"k4\":\"v4\"}\t[200,300]\t{\"c1\":20,\"c2\":\"bar\"}"
decl_stmt|;
name|String
name|expectedSuffixRow2
init|=
literal|"alltypes/delta_0000001_0000002/bucket_00000"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotRow1
argument_list|,
name|gotRow1
operator|.
name|startsWith
argument_list|(
name|expectedPrefixRow1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotRow1
argument_list|,
name|gotRow1
operator|.
name|endsWith
argument_list|(
name|expectedSuffixRow1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotRow2
argument_list|,
name|gotRow2
operator|.
name|startsWith
argument_list|(
name|expectedPrefixRow2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|gotRow2
argument_list|,
name|gotRow2
operator|.
name|endsWith
argument_list|(
name|expectedSuffixRow2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAutoRollTransactionBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"drop table if exists default.streamingnobuckets"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"create table default.streamingnobuckets (a string, b string) stored as orc "
operator|+
literal|"TBLPROPERTIES('transactional'='true')"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"insert into default.streamingnobuckets values('foo','bar')"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from default.streamingnobuckets"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"foo\tbar"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|wr
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"default"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"streamingnobuckets"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|wr
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|2
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a1,b2"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a3,b4"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a5,b6"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a7,b8"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// should have rolled over to next transaction batch
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a9,b10"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a11,b12"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a13,b14"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"a15,b16"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
name|BucketCodec
operator|.
name|determineVersion
argument_list|(
literal|536870912
argument_list|)
operator|.
name|decodeWriterId
argument_list|(
literal|536870912
argument_list|)
argument_list|)
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from default.streamingnobuckets order by ROW__ID"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\tfoo\tbar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000001_0000001_0000/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":0}\ta1\tb2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000002_0000003/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":1}\ta3\tb4"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000002_0000003/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":0}\ta5\tb6"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000002_0000003/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":1}\ta7\tb8"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000002_0000003/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":4,\"bucketid\":536870912,\"rowid\":0}\ta9\tb10"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000004_0000005/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":4,\"bucketid\":536870912,\"rowid\":1}\ta11\tb12"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000004_0000005/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":5,\"bucketid\":536870912,\"rowid\":0}\ta13\tb14"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000004_0000005/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":5,\"bucketid\":536870912,\"rowid\":1}\ta15\tb16"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/delta_0000004_0000005/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"update default.streamingnobuckets set a=0, b=0 where a='a7'"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"delete from default.streamingnobuckets where a='a1'"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"update default.streamingnobuckets set a=0, b=0 where a='a15'"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"delete from default.streamingnobuckets where a='a9'"
argument_list|)
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select a, b from default.streamingnobuckets order by a, b"
argument_list|)
expr_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"at row="
operator|+
name|row
argument_list|,
literal|"0\t0"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"at row="
operator|+
name|row
argument_list|,
literal|"0\t0"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"at row="
operator|+
name|row
argument_list|,
literal|"a11\tb12"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"at row="
operator|+
name|row
argument_list|,
literal|"a13\tb14"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"at row="
operator|+
name|row
argument_list|,
literal|"a3\tb4"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"at row="
operator|+
name|row
argument_list|,
literal|"a5\tb6"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"at row="
operator|+
name|row
argument_list|,
literal|"foo\tbar"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"alter table default.streamingnobuckets compact 'major'"
argument_list|)
expr_stmt|;
name|runWorker
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rs
operator|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select ROW__ID, a, b, INPUT__FILE__NAME from default.streamingnobuckets order by ROW__ID"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":1,\"bucketid\":536870912,\"rowid\":0}\tfoo\tbar"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/base_0000009/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":2,\"bucketid\":536870912,\"rowid\":1}\ta3\tb4"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/base_0000009/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":3,\"bucketid\":536870912,\"rowid\":0}\ta5\tb6"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/base_0000009/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":4,\"bucketid\":536870912,\"rowid\":1}\ta11\tb12"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/base_0000009/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":5,\"bucketid\":536870912,\"rowid\":0}\ta13\tb14"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/base_0000009/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"{\"writeid\":6,\"bucketid\":536870912,\"rowid\":0}\t0\t0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rs
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"streamingnobuckets/base_0000009/bucket_00000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * this is a clone from TestHiveStreamingConnection.TxnStatement2....    */
specifier|public
specifier|static
name|void
name|runWorker
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|MetaException
block|{
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Worker
name|t
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
name|t
operator|.
name|setThreadId
argument_list|(
operator|(
name|int
operator|)
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|AtomicBoolean
name|looped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|(
name|stop
argument_list|,
name|looped
argument_list|)
expr_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|// stream data into streaming table with N buckets, then copy the data into another bucketed table
comment|// check if bucketing in both was done in the same way
annotation|@
name|Test
specifier|public
name|void
name|testStreamBucketingMatchesRegularBucketing
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|bucketCount
init|=
literal|100
decl_stmt|;
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|dbFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableLoc
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"streamedtable"
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableLoc2
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"finaltable"
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableLoc3
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
literal|"nobucket"
operator|+
literal|"'"
decl_stmt|;
comment|// disabling vectorization as this test yields incorrect results with vectorization
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
init|(
name|IDriver
name|driver
init|=
name|DriverFactory
operator|.
name|newDriver
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database testBucketing3"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use testBucketing3"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table streamedtable ( key1 string,key2 int,data string ) clustered by ( key1,key2 ) into "
operator|+
name|bucketCount
operator|+
literal|" buckets  stored as orc  location "
operator|+
name|tableLoc
operator|+
literal|" TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
comment|//  In 'nobucket' table we capture bucketid from streamedtable to workaround a hive bug that prevents joins two identically bucketed tables
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table nobucket ( bucketid int, key1 string,key2 int,data string ) location "
operator|+
name|tableLoc3
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table finaltable ( bucketid int, key1 string,key2 int,data string ) clustered by ( key1,key2 ) into "
operator|+
name|bucketCount
operator|+
literal|" buckets  stored as orc location "
operator|+
name|tableLoc2
operator|+
literal|" TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|String
index|[]
name|records
init|=
operator|new
name|String
index|[]
block|{
literal|"PSFAHYLZVC,29,EPNMA"
block|,
literal|"PPPRKWAYAU,96,VUTEE"
block|,
literal|"MIAOFERCHI,3,WBDSI"
block|,
literal|"CEGQAZOWVN,0,WCUZL"
block|,
literal|"XWAKMNSVQF,28,YJVHU"
block|,
literal|"XBWTSAJWME,2,KDQFO"
block|,
literal|"FUVLQTAXAY,5,LDSDG"
block|,
literal|"QTQMDJMGJH,6,QBOMA"
block|,
literal|"EFLOTLWJWN,71,GHWPS"
block|,
literal|"PEQNAOJHCM,82,CAAFI"
block|,
literal|"MOEKQLGZCP,41,RUACR"
block|,
literal|"QZXMCOPTID,37,LFLWE"
block|,
literal|"EYALVWICRD,13,JEZLC"
block|,
literal|"VYWLZAYTXX,16,DMVZX"
block|,
literal|"OSALYSQIXR,47,HNZVE"
block|,
literal|"JGKVHKCEGQ,25,KSCJB"
block|,
literal|"WQFMMYDHET,12,DTRWA"
block|,
literal|"AJOVAYZKZQ,15,YBKFO"
block|,
literal|"YAQONWCUAU,31,QJNHZ"
block|,
literal|"DJBXUEUOEB,35,IYCBL"
block|}
decl_stmt|;
name|StrictDelimitedInputWriter
name|wr
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testBucketing3"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"streamedtable"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|wr
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|record
range|:
name|records
control|)
block|{
name|connection
operator|.
name|write
argument_list|(
name|record
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res1
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select row__id.bucketid, * from streamedtable order by key2"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|re
range|:
name|res1
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|re
argument_list|)
expr_stmt|;
block|}
name|driver
operator|.
name|run
argument_list|(
literal|"insert into nobucket select row__id.bucketid,* from streamedtable"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"insert into finaltable select * from nobucket"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res2
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select row__id.bucketid,* from finaltable where row__id.bucketid<>bucketid"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|res2
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|res2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|unset
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
operator|.
name|varname
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|bucketCount
init|=
literal|100
decl_stmt|;
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|dbFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tbl1
init|=
literal|"validation1"
decl_stmt|;
name|String
name|tbl2
init|=
literal|"validation2"
decl_stmt|;
name|String
name|tableLoc
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tbl1
operator|+
literal|"'"
decl_stmt|;
name|String
name|tableLoc2
init|=
literal|"'"
operator|+
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tbl2
operator|+
literal|"'"
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database testBucketing3"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use testBucketing3"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table "
operator|+
name|tbl1
operator|+
literal|" ( key1 string, data string ) clustered by ( key1 ) into "
operator|+
name|bucketCount
operator|+
literal|" buckets  stored as orc  location "
operator|+
name|tableLoc
operator|+
literal|" TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create table "
operator|+
name|tbl2
operator|+
literal|" ( key1 string, data string ) clustered by ( key1 ) into "
operator|+
name|bucketCount
operator|+
literal|" buckets  stored as orc  location "
operator|+
name|tableLoc2
operator|+
literal|" TBLPROPERTIES ('transactional'='false')"
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testBucketing3"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"validation2"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"InvalidTable exception was not thrown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTable
name|e
parameter_list|)
block|{
comment|// expecting this exception
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testBucketing3"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"validation2"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"InvalidTable exception was not thrown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTable
name|e
parameter_list|)
block|{
comment|// expecting this exception
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @deprecated use {@link #checkDataWritten2(Path, long, long, int, String, boolean, String...)} -    * there is little value in using InputFormat directly    */
annotation|@
name|Deprecated
specifier|private
name|void
name|checkDataWritten
parameter_list|(
name|Path
name|partitionPath
parameter_list|,
name|long
name|minTxn
parameter_list|,
name|long
name|maxTxn
parameter_list|,
name|int
name|buckets
parameter_list|,
name|int
name|numExpectedFiles
parameter_list|,
name|String
modifier|...
name|records
parameter_list|)
throws|throws
name|Exception
block|{
name|ValidWriteIdList
name|writeIds
init|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|AcidUtils
operator|.
name|getFullTableName
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|AcidUtils
operator|.
name|Directory
name|dir
init|=
name|AcidUtils
operator|.
name|getAcidState
argument_list|(
name|partitionPath
argument_list|,
name|conf
argument_list|,
name|writeIds
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getObsolete
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getOriginalFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AcidUtils
operator|.
name|ParsedDelta
argument_list|>
name|current
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Files found: "
argument_list|)
expr_stmt|;
for|for
control|(
name|AcidUtils
operator|.
name|ParsedDelta
name|pd
range|:
name|current
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pd
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numExpectedFiles
argument_list|,
name|current
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// find the absolute minimum transaction
name|long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|max
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|AcidUtils
operator|.
name|ParsedDelta
name|pd
range|:
name|current
control|)
block|{
if|if
condition|(
name|pd
operator|.
name|getMaxWriteId
argument_list|()
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|pd
operator|.
name|getMaxWriteId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|.
name|getMinWriteId
argument_list|()
operator|<
name|min
condition|)
block|{
name|min
operator|=
name|pd
operator|.
name|getMinWriteId
argument_list|()
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|minTxn
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxTxn
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|InputFormat
name|inf
init|=
operator|new
name|OrcInputFormat
argument_list|()
decl_stmt|;
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|()
decl_stmt|;
name|job
operator|.
name|set
argument_list|(
literal|"mapred.input.dir"
argument_list|,
name|partitionPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|BUCKET_COUNT
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|buckets
argument_list|)
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS
argument_list|,
literal|"id,msg"
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|IOConstants
operator|.
name|SCHEMA_EVOLUTION_COLUMNS_TYPES
argument_list|,
literal|"bigint:string"
argument_list|)
expr_stmt|;
name|AcidUtils
operator|.
name|setAcidOperationalProperties
argument_list|(
name|job
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|job
operator|.
name|setBoolean
argument_list|(
name|hive_metastoreConstants
operator|.
name|TABLE_IS_TRANSACTIONAL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|job
operator|.
name|set
argument_list|(
name|ValidWriteIdList
operator|.
name|VALID_WRITEIDS_KEY
argument_list|,
name|writeIds
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|inf
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|buckets
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numExpectedFiles
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|OrcStruct
argument_list|>
name|rr
init|=
name|inf
operator|.
name|getRecordReader
argument_list|(
name|splits
index|[
literal|0
index|]
argument_list|,
name|job
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
decl_stmt|;
name|NullWritable
name|key
init|=
name|rr
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|OrcStruct
name|value
init|=
name|rr
operator|.
name|createValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|record
range|:
name|records
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rr
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|record
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rr
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param validationQuery query to read from table to compare data against {@code records}    * @param records         expected data.  each row is CVS list of values    */
specifier|private
name|void
name|checkDataWritten2
parameter_list|(
name|Path
name|partitionPath
parameter_list|,
name|long
name|minTxn
parameter_list|,
name|long
name|maxTxn
parameter_list|,
name|int
name|numExpectedFiles
parameter_list|,
name|String
name|validationQuery
parameter_list|,
name|boolean
name|vectorize
parameter_list|,
name|String
modifier|...
name|records
parameter_list|)
throws|throws
name|Exception
block|{
name|ValidWriteIdList
name|txns
init|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|AcidUtils
operator|.
name|getFullTableName
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|AcidUtils
operator|.
name|Directory
name|dir
init|=
name|AcidUtils
operator|.
name|getAcidState
argument_list|(
name|partitionPath
argument_list|,
name|conf
argument_list|,
name|txns
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getObsolete
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getOriginalFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AcidUtils
operator|.
name|ParsedDelta
argument_list|>
name|current
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Files found: "
argument_list|)
expr_stmt|;
for|for
control|(
name|AcidUtils
operator|.
name|ParsedDelta
name|pd
range|:
name|current
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|pd
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numExpectedFiles
argument_list|,
name|current
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// find the absolute minimum transaction
name|long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|max
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|AcidUtils
operator|.
name|ParsedDelta
name|pd
range|:
name|current
control|)
block|{
if|if
condition|(
name|pd
operator|.
name|getMaxWriteId
argument_list|()
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|pd
operator|.
name|getMaxWriteId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pd
operator|.
name|getMinWriteId
argument_list|()
operator|<
name|min
condition|)
block|{
name|min
operator|=
name|pd
operator|.
name|getMinWriteId
argument_list|()
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|minTxn
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxTxn
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|boolean
name|isVectorizationEnabled
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|vectorize
condition|)
block|{
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|currStrategy
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_STRATEGY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|strategy
range|:
operator|(
operator|(
name|Validator
operator|.
name|StringSet
operator|)
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_STRATEGY
operator|.
name|getValidator
argument_list|()
operator|)
operator|.
name|getExpected
argument_list|()
control|)
block|{
comment|//run it with each split strategy - make sure there are differences
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_STRATEGY
argument_list|,
name|strategy
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualResult
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
name|validationQuery
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actualResult
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"diff at ["
operator|+
name|i
operator|+
literal|"].  actual="
operator|+
name|actualResult
operator|+
literal|" expected="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|records
argument_list|)
argument_list|,
name|records
index|[
name|i
index|]
argument_list|,
name|actualResult
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_ORC_SPLIT_STRATEGY
argument_list|,
name|currStrategy
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_VECTORIZATION_ENABLED
argument_list|,
name|isVectorizationEnabled
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkNothingWritten
parameter_list|(
name|Path
name|partitionPath
parameter_list|)
throws|throws
name|Exception
block|{
name|ValidWriteIdList
name|writeIds
init|=
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|AcidUtils
operator|.
name|getFullTableName
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|AcidUtils
operator|.
name|Directory
name|dir
init|=
name|AcidUtils
operator|.
name|getAcidState
argument_list|(
name|partitionPath
argument_list|,
name|conf
argument_list|,
name|writeIds
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getObsolete
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|getOriginalFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AcidUtils
operator|.
name|ParsedDelta
argument_list|>
name|current
init|=
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|current
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndpointConnection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// For partitioned table, partitionVals are specified
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// For unpartitioned table, partitionVals are not specified
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName2
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName2
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// For unpartitioned table, partition values are specified
try|try
block|{
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName2
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName2
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ConnectionError was not thrown"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectionError
name|e
parameter_list|)
block|{
comment|// expecting this exception
name|String
name|errMsg
init|=
literal|"specifies partitions for un-partitioned table"
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|errMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newPartVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|newPartVals
operator|.
name|add
argument_list|(
name|PART1_CONTINENT
argument_list|)
expr_stmt|;
name|newPartVals
operator|.
name|add
argument_list|(
literal|"Nepal"
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|newPartVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// Create partition
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"3,Hello streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// Ensure partition is present
name|Partition
name|p
init|=
name|msClient
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newPartVals
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Did not find added partition"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionWithWriteId
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|newPartVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|newPartVals
operator|.
name|add
argument_list|(
literal|"WriteId_continent"
argument_list|)
expr_stmt|;
name|newPartVals
operator|.
name|add
argument_list|(
literal|"WriteId_country"
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writerT
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|transactionConnection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|newPartVals
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writerT
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|transactionConnection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Table
name|tObject
init|=
name|transactionConnection
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Long
name|writeId
init|=
name|transactionConnection
operator|.
name|getCurrentWriteId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tObject
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|newPartVals
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withWriteId
argument_list|(
name|writeId
argument_list|)
operator|.
name|withStatementId
argument_list|(
literal|1
argument_list|)
operator|.
name|withTableObject
argument_list|(
name|tObject
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"3,Hello streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|partitions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|connection
operator|.
name|getPartitions
argument_list|()
argument_list|)
decl_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Ensure partition is not present
try|try
block|{
name|msClient
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newPartVals
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Partition shouldn't exist so a NoSuchObjectException should have been raised"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{}
name|transactionConnection
operator|.
name|commitTransaction
argument_list|(
name|partitions
argument_list|)
expr_stmt|;
comment|// Ensure partition is present
name|Partition
name|p
init|=
name|msClient
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newPartVals
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Did not find added partition"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddDynamicPartitionWithWriteId
parameter_list|()
throws|throws
name|Exception
block|{
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"drop table if exists default.writeiddynamic"
argument_list|)
expr_stmt|;
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"create table default.writeiddynamic (a"
operator|+
literal|" string, b string) partitioned by (c string, d string)"
operator|+
literal|" stored as orc TBLPROPERTIES('transactional'='true')"
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writerT
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|transactionConnection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"default"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"writeiddynamic"
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writerT
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|transactionConnection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Table
name|tObject
init|=
name|transactionConnection
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|Long
name|writeId
init|=
name|transactionConnection
operator|.
name|getCurrentWriteId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tObject
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|writeId
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writerOne
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connectionOne
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"default"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"writeiddynamic"
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writerOne
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withWriteId
argument_list|(
name|writeId
argument_list|)
operator|.
name|withStatementId
argument_list|(
literal|1
argument_list|)
operator|.
name|withTableObject
argument_list|(
name|tObject
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|StrictDelimitedInputWriter
name|writerTwo
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connectionTwo
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"default"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"writeiddynamic"
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writerTwo
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withWriteId
argument_list|(
name|writeId
argument_list|)
operator|.
name|withStatementId
argument_list|(
literal|1
argument_list|)
operator|.
name|withTableObject
argument_list|(
name|tObject
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|connectionOne
argument_list|)
expr_stmt|;
name|connectionTwo
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connectionOne
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connectionOne
operator|.
name|write
argument_list|(
literal|"1,2,3,4"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connectionOne
operator|.
name|write
argument_list|(
literal|"1,2,5,6"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connectionTwo
operator|.
name|write
argument_list|(
literal|"1,2,30,40"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connectionOne
operator|.
name|write
argument_list|(
literal|"1,2,7,8"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connectionTwo
operator|.
name|write
argument_list|(
literal|"1,2,50,60"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connectionOne
operator|.
name|write
argument_list|(
literal|"1,2,9,10"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connectionOne
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connectionTwo
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|partitionsOne
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|connectionOne
operator|.
name|getPartitions
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|partitionsOne
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|partitionsTwo
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|connectionTwo
operator|.
name|getPartitions
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|partitionsTwo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|connectionOne
operator|.
name|close
argument_list|()
expr_stmt|;
name|connectionTwo
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|partitionName
init|=
name|partitionsOne
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|msClient
operator|.
name|getPartition
argument_list|(
literal|"default"
argument_list|,
literal|"writeiddynamic"
argument_list|,
name|partitionName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Partition shouldn't exist so a NoSuchObjectException should have been raised"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{     }
name|partitionsOne
operator|.
name|addAll
argument_list|(
name|partitionsTwo
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allPartitions
init|=
name|partitionsOne
decl_stmt|;
name|transactionConnection
operator|.
name|commitTransaction
argument_list|(
name|allPartitions
argument_list|)
expr_stmt|;
comment|// Ensure partition is present
for|for
control|(
name|String
name|partition
range|:
name|allPartitions
control|)
block|{
name|Partition
name|p
init|=
name|msClient
operator|.
name|getPartition
argument_list|(
literal|"default"
argument_list|,
literal|"writeiddynamic"
argument_list|,
name|partition
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Did not find added partition"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchEmptyCommit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1)  to partitioned table
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 2) To unpartitioned table
name|writer
operator|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName2
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName2
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * check that transactions that have not heartbeated and timedout get properly aborted    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testTimeOutReaper
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName2
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName2
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TIMEDOUT_TXN_REAPER_START
argument_list|,
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|//ensure txn timesout
name|conf
operator|.
name|setTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|AcidHouseKeeperService
name|houseKeeperService
init|=
operator|new
name|AcidHouseKeeperService
argument_list|()
decl_stmt|;
name|houseKeeperService
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|houseKeeperService
operator|.
name|run
argument_list|()
expr_stmt|;
try|try
block|{
comment|//should fail because the TransactionBatch timed out
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransactionError
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected aborted transaction"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TxnAbortedException
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName2
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName2
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|houseKeeperService
operator|.
name|run
argument_list|()
expr_stmt|;
try|try
block|{
comment|//should fail because the TransactionBatch timed out
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransactionError
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected aborted transaction"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TxnAbortedException
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeartbeat
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|transactionBatch
init|=
literal|20
decl_stmt|;
name|conf
operator|.
name|setTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
literal|200
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName2
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName2
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
name|transactionBatch
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|ShowLocksRequest
name|request
init|=
operator|new
name|ShowLocksRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setDbname
argument_list|(
name|dbName2
argument_list|)
expr_stmt|;
name|request
operator|.
name|setTablename
argument_list|(
name|tblName2
argument_list|)
expr_stmt|;
name|ShowLocksResponse
name|response
init|=
name|msClient
operator|.
name|showLocks
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong number of locks: "
operator|+
name|response
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ShowLocksResponseElement
name|lock
init|=
name|response
operator|.
name|getLocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|acquiredAt
init|=
name|lock
operator|.
name|getAcquiredat
argument_list|()
decl_stmt|;
name|long
name|heartbeatAt
init|=
name|lock
operator|.
name|getLastheartbeat
argument_list|()
decl_stmt|;
name|response
operator|=
name|msClient
operator|.
name|showLocks
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Wrong number of locks2: "
operator|+
name|response
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getLocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|=
name|response
operator|.
name|getLocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Acquired timestamp didn'table match"
argument_list|,
name|acquiredAt
argument_list|,
name|lock
operator|.
name|getAcquiredat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected new heartbeat ("
operator|+
name|lock
operator|.
name|getLastheartbeat
argument_list|()
operator|+
literal|") == old heartbeat("
operator|+
name|heartbeatAt
operator|+
literal|")"
argument_list|,
name|lock
operator|.
name|getLastheartbeat
argument_list|()
operator|==
name|heartbeatAt
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transactionBatch
operator|*
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|conf
operator|.
name|unset
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
operator|.
name|varname
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchEmptyAbort
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1) to partitioned table
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 2) to unpartitioned table
name|writer
operator|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName2
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName2
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchCommitDelimited
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|10
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// 1st Txn
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2nd Txn
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// data should not be visible
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
comment|// To Unpartitioned table
name|writer
operator|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName2
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName2
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// 1st Txn
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchCommitRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|regex
init|=
literal|"([^,]*),(.*)"
decl_stmt|;
name|StrictRegexWriter
name|writer
init|=
name|StrictRegexWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withRegex
argument_list|(
name|regex
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|10
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// 1st Txn
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2nd Txn
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// data should not be visible
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
comment|// To Unpartitioned table
name|regex
operator|=
literal|"([^:]*):(.*)"
expr_stmt|;
name|writer
operator|=
name|StrictRegexWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withRegex
argument_list|(
name|regex
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName2
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName2
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// 1st Txn
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1:Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegexInputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|regex
init|=
literal|"([^,]*),(.*)"
decl_stmt|;
name|StrictRegexWriter
name|writer
init|=
name|StrictRegexWriter
operator|.
name|newBuilder
argument_list|()
comment|// if unspecified, default one or [\r\n] will be used for line break
operator|.
name|withRegex
argument_list|(
name|regex
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|String
name|rows
init|=
literal|"1,foo\r2,bar\r3,baz"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|rows
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
name|bais
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|bais
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tfoo\tAsia\tIndia"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\tbar\tAsia\tIndia"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3\tbaz\tAsia\tIndia"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchCommitJson
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictJsonWriter
name|writer
init|=
name|StrictJsonWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|10
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// 1st Txn
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|rec1
init|=
literal|"{\"id\" : 1, \"msg\": \"Hello streaming\"}"
decl_stmt|;
name|connection
operator|.
name|write
argument_list|(
name|rec1
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJsonInputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictJsonWriter
name|writer
init|=
name|StrictJsonWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withLineDelimiterPattern
argument_list|(
literal|"\\|"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// 1st Txn
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|records
init|=
literal|"{\"id\" : 1, \"msg\": \"Hello streaming\"}|{\"id\" : 2, \"msg\": \"Hello world\"}|{\"id\" : 3, "
operator|+
literal|"\"msg\": \"Hello world!!\"}"
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|records
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|connection
operator|.
name|write
argument_list|(
name|bais
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|bais
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rs
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"select * from "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1\tHello streaming\tAsia\tIndia"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2\tHello world\tAsia\tIndia"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3\tHello world!!\tAsia\tIndia"
argument_list|,
name|rs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemainingTransactions
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
comment|// 1) test with txn.Commit()
name|int
name|batch
init|=
literal|0
decl_stmt|;
name|int
name|initialCount
init|=
name|connection
operator|.
name|remainingTransactions
argument_list|()
decl_stmt|;
while|while
condition|(
name|connection
operator|.
name|remainingTransactions
argument_list|()
operator|>
literal|0
condition|)
block|{
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|--
name|initialCount
argument_list|,
name|connection
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rec
init|=
literal|0
init|;
name|rec
operator|<
literal|2
condition|;
operator|++
name|rec
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
operator|(
name|batch
operator|*
name|rec
operator|+
literal|",Hello streaming"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|batch
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|connection
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// 2) test with txn.Abort()
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|batch
operator|=
literal|0
expr_stmt|;
name|initialCount
operator|=
name|connection
operator|.
name|remainingTransactions
argument_list|()
expr_stmt|;
while|while
condition|(
name|connection
operator|.
name|remainingTransactions
argument_list|()
operator|>
literal|0
condition|)
block|{
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|--
name|initialCount
argument_list|,
name|connection
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rec
init|=
literal|0
init|;
name|rec
operator|<
literal|2
condition|;
operator|++
name|rec
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|OPEN
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
operator|(
name|batch
operator|*
name|rec
operator|+
literal|",Hello streaming"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|batch
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|connection
operator|.
name|remainingTransactions
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|INACTIVE
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
name|checkNothingWritten
argument_list|(
name|partLoc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkNothingWritten
argument_list|(
name|partLoc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactionBatchAbortAndCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|agentInfo
init|=
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
name|agentInfo
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|10
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ShowLocksResponse
name|resp
init|=
name|msClient
operator|.
name|showLocks
argument_list|(
operator|new
name|ShowLocksRequest
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"LockCount"
argument_list|,
literal|1
argument_list|,
name|resp
operator|.
name|getLocksSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"LockType"
argument_list|,
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|resp
operator|.
name|getLocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"LockState"
argument_list|,
name|LockState
operator|.
name|ACQUIRED
argument_list|,
name|resp
operator|.
name|getLocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AgentInfo"
argument_list|,
name|agentInfo
argument_list|,
name|resp
operator|.
name|getLocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAgentInfo
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|abortTransaction
argument_list|()
expr_stmt|;
name|checkNothingWritten
argument_list|(
name|partLoc
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|checkDataWritten
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"{1, Hello streaming}"
argument_list|,
literal|"{2, Welcome to streaming}"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleTransactionBatchCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|10
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|String
name|validationQuery
init|=
literal|"select id, msg from "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" order by id, msg"
decl_stmt|;
name|checkDataWritten2
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
name|validationQuery
argument_list|,
literal|false
argument_list|,
literal|"1\tHello streaming"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|checkDataWritten2
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
name|validationQuery
argument_list|,
literal|true
argument_list|,
literal|"1\tHello streaming"
argument_list|,
literal|"2\tWelcome to streaming"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|10
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// 2nd Txn Batch
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"3,Hello streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|checkDataWritten2
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
name|validationQuery
argument_list|,
literal|false
argument_list|,
literal|"1\tHello streaming"
argument_list|,
literal|"2\tWelcome to streaming"
argument_list|,
literal|"3\tHello streaming - once again"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"4,Welcome to streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|checkDataWritten2
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
name|validationQuery
argument_list|,
literal|true
argument_list|,
literal|"1\tHello streaming"
argument_list|,
literal|"2\tWelcome to streaming"
argument_list|,
literal|"3\tHello streaming - once again"
argument_list|,
literal|"4\tWelcome to streaming - once again"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterleavedTransactionBatchCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|10
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// Acquire 1st Txn Batch
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
comment|// Acquire 2nd Txn Batch
name|StrictDelimitedInputWriter
name|writer2
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection2
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer2
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|10
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection2
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
comment|// Interleaved writes to both batches
name|connection
operator|.
name|write
argument_list|(
literal|"1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|write
argument_list|(
literal|"3,Hello streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|checkNothingWritten
argument_list|(
name|partLoc
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|String
name|validationQuery
init|=
literal|"select id, msg from "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" order by id, msg"
decl_stmt|;
name|checkDataWritten2
argument_list|(
name|partLoc
argument_list|,
literal|11
argument_list|,
literal|20
argument_list|,
literal|1
argument_list|,
name|validationQuery
argument_list|,
literal|true
argument_list|,
literal|"3\tHello streaming - once again"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|/*now both batches have committed (but not closed) so we for each primary file we expect a side     file to exist and indicate the true length of primary file*/
name|FileSystem
name|fs
init|=
name|partLoc
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|AcidUtils
operator|.
name|Directory
name|dir
init|=
name|AcidUtils
operator|.
name|getAcidState
argument_list|(
name|partLoc
argument_list|,
name|conf
argument_list|,
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|AcidUtils
operator|.
name|getFullTableName
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|AcidUtils
operator|.
name|ParsedDelta
name|pd
range|:
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
control|)
block|{
for|for
control|(
name|FileStatus
name|stat
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|pd
operator|.
name|getPath
argument_list|()
argument_list|,
name|AcidUtils
operator|.
name|bucketFileFilter
argument_list|)
control|)
block|{
name|Path
name|lengthFile
init|=
name|OrcAcidUtils
operator|.
name|getSideFile
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lengthFile
operator|+
literal|" missing"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|lengthFile
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|lengthFileSize
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|lengthFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|lengthFile
operator|+
literal|" to be non empty. lengh="
operator|+
name|lengthFileSize
argument_list|,
name|lengthFileSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|logicalLength
init|=
name|AcidUtils
operator|.
name|getLogicalLength
argument_list|(
name|fs
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|long
name|actualLength
init|=
name|stat
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|""
argument_list|,
name|logicalLength
operator|==
name|actualLength
argument_list|)
expr_stmt|;
block|}
block|}
name|checkDataWritten2
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
name|validationQuery
argument_list|,
literal|false
argument_list|,
literal|"1\tHello streaming"
argument_list|,
literal|"3\tHello streaming - once again"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|write
argument_list|(
literal|"4,Welcome to streaming - once again"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|//here each batch has written data and committed (to bucket0 since table only has 1 bucket)
comment|//so each of 2 deltas has 1 bucket0 and 1 bucket0_flush_length.  Furthermore, each bucket0
comment|//has now received more data(logically - it's buffered) but it is not yet committed.
comment|//lets check that side files exist, etc
name|dir
operator|=
name|AcidUtils
operator|.
name|getAcidState
argument_list|(
name|partLoc
argument_list|,
name|conf
argument_list|,
name|msClient
operator|.
name|getValidWriteIds
argument_list|(
name|AcidUtils
operator|.
name|getFullTableName
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AcidUtils
operator|.
name|ParsedDelta
name|pd
range|:
name|dir
operator|.
name|getCurrentDirectories
argument_list|()
control|)
block|{
for|for
control|(
name|FileStatus
name|stat
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|pd
operator|.
name|getPath
argument_list|()
argument_list|,
name|AcidUtils
operator|.
name|bucketFileFilter
argument_list|)
control|)
block|{
name|Path
name|lengthFile
init|=
name|OrcAcidUtils
operator|.
name|getSideFile
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lengthFile
operator|+
literal|" missing"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|lengthFile
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|lengthFileSize
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|lengthFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|lengthFile
operator|+
literal|" to be non empty. lengh="
operator|+
name|lengthFileSize
argument_list|,
name|lengthFileSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|long
name|logicalLength
init|=
name|AcidUtils
operator|.
name|getLogicalLength
argument_list|(
name|fs
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|long
name|actualLength
init|=
name|stat
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|""
argument_list|,
name|logicalLength
operator|<=
name|actualLength
argument_list|)
expr_stmt|;
block|}
block|}
name|checkDataWritten2
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
name|validationQuery
argument_list|,
literal|true
argument_list|,
literal|"1\tHello streaming"
argument_list|,
literal|"3\tHello streaming - once again"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|checkDataWritten2
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
name|validationQuery
argument_list|,
literal|false
argument_list|,
literal|"1\tHello streaming"
argument_list|,
literal|"2\tWelcome to streaming"
argument_list|,
literal|"3\tHello streaming - once again"
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|checkDataWritten2
argument_list|(
name|partLoc
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
name|validationQuery
argument_list|,
literal|true
argument_list|,
literal|"1\tHello streaming"
argument_list|,
literal|"2\tWelcome to streaming"
argument_list|,
literal|"3\tHello streaming - once again"
argument_list|,
literal|"4\tWelcome to streaming - once again"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|connection
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveStreamingConnection
operator|.
name|TxnState
operator|.
name|COMMITTED
argument_list|,
name|connection2
operator|.
name|getCurrentTransactionState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|WriterThd
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|StreamingConnection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|String
name|data
decl_stmt|;
specifier|private
name|Throwable
name|error
decl_stmt|;
name|WriterThd
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
literal|"Writer_"
operator|+
name|data
argument_list|)
expr_stmt|;
name|RecordWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName
argument_list|)
operator|.
name|withStaticPartitionValues
argument_list|(
name|partitionVals
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|this
operator|.
name|conn
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|setUncaughtExceptionHandler
argument_list|(
parameter_list|(
name|thread
parameter_list|,
name|throwable
parameter_list|)
lambda|->
block|{
name|error
operator|=
name|throwable
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|connection
operator|.
name|toTransactionString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Thread "
operator|+
name|thread
operator|.
name|getName
argument_list|()
operator|+
literal|" died: "
operator|+
name|throwable
operator|.
name|getMessage
argument_list|()
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|conn
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|conn
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
comment|// while
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"txnBatch.close() failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentTransactionBatchCommits
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|WriterThd
argument_list|>
name|writers
init|=
operator|new
name|ArrayList
argument_list|<
name|WriterThd
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|writers
operator|.
name|add
argument_list|(
operator|new
name|WriterThd
argument_list|(
literal|"1,Matrix"
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|add
argument_list|(
operator|new
name|WriterThd
argument_list|(
literal|"2,Gandhi"
argument_list|)
argument_list|)
expr_stmt|;
name|writers
operator|.
name|add
argument_list|(
operator|new
name|WriterThd
argument_list|(
literal|"3,Silence"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|WriterThd
name|w
range|:
name|writers
control|)
block|{
name|w
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|WriterThd
name|w
range|:
name|writers
control|)
block|{
name|w
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|WriterThd
name|w
range|:
name|writers
control|)
block|{
if|if
condition|(
name|w
operator|.
name|error
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Writer thread"
operator|+
name|w
operator|.
name|getName
argument_list|()
operator|+
literal|" died: "
operator|+
name|w
operator|.
name|error
operator|.
name|getMessage
argument_list|()
operator|+
literal|" See log file for stack trace"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
name|dumpBucket
parameter_list|(
name|Path
name|orcFile
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
name|fs
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
operator|.
name|getLocal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|orcFile
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|inspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|reader
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"Found Bucket File : %s \n"
argument_list|,
name|orcFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rows
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|row
init|=
name|rows
operator|.
name|next
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|SampleRec
name|rec
init|=
operator|(
name|SampleRec
operator|)
name|deserializeDeltaFileRow
argument_list|(
name|row
argument_list|,
name|inspector
argument_list|)
index|[
literal|5
index|]
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|rec
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Assumes stored data schema = [acid fields],string,int,string
comment|// return array of 6 fields, where the last field has the actual data
specifier|private
specifier|static
name|Object
index|[]
name|deserializeDeltaFileRow
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|inspector
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|WritableIntObjectInspector
name|f0ins
init|=
operator|(
name|WritableIntObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableLongObjectInspector
name|f1ins
init|=
operator|(
name|WritableLongObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableIntObjectInspector
name|f2ins
init|=
operator|(
name|WritableIntObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableLongObjectInspector
name|f3ins
init|=
operator|(
name|WritableLongObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableLongObjectInspector
name|f4ins
init|=
operator|(
name|WritableLongObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|f5ins
init|=
operator|(
name|StructObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|int
name|f0
init|=
name|f0ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|f1
init|=
name|f1ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|f2
init|=
name|f2ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|f3
init|=
name|f3ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|f4
init|=
name|f4ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SampleRec
name|f5
init|=
name|deserializeInner
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
name|f5ins
argument_list|)
decl_stmt|;
return|return
operator|new
name|Object
index|[]
block|{
name|f0
block|,
name|f1
block|,
name|f2
block|,
name|f3
block|,
name|f4
block|,
name|f5
block|}
return|;
block|}
comment|// Assumes row schema => string,int,string
specifier|private
specifier|static
name|SampleRec
name|deserializeInner
parameter_list|(
name|Object
name|row
parameter_list|,
name|StructObjectInspector
name|inspector
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|inspector
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|WritableStringObjectInspector
name|f0ins
init|=
operator|(
name|WritableStringObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableIntObjectInspector
name|f1ins
init|=
operator|(
name|WritableIntObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|WritableStringObjectInspector
name|f2ins
init|=
operator|(
name|WritableStringObjectInspector
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|String
name|f0
init|=
name|f0ins
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|f1
init|=
name|f1ins
operator|.
name|get
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|f2
init|=
name|f2ins
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|inspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SampleRec
argument_list|(
name|f0
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBucketing
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|agentInfo
init|=
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName3
argument_list|)
expr_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName4
argument_list|)
expr_stmt|;
comment|// 1) Create two bucketed tables
name|String
name|dbLocation
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName3
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|".db"
decl_stmt|;
name|dbLocation
operator|=
name|dbLocation
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// for windows paths
name|String
index|[]
name|colNames
init|=
literal|"key1,key2,data"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|colTypes
init|=
literal|"string,int,string"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|bucketNames
init|=
literal|"key1,key2"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|bucketCount
init|=
literal|4
decl_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName3
argument_list|,
name|tblName3
argument_list|,
literal|null
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|,
name|bucketNames
argument_list|,
literal|null
argument_list|,
name|dbLocation
argument_list|,
name|bucketCount
argument_list|)
expr_stmt|;
name|String
name|dbLocation2
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName4
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|".db"
decl_stmt|;
name|dbLocation2
operator|=
name|dbLocation2
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// for windows paths
name|String
index|[]
name|colNames2
init|=
literal|"key3,key4,data2"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|colTypes2
init|=
literal|"string,int,string"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|bucketNames2
init|=
literal|"key3,key4"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName4
argument_list|,
name|tblName4
argument_list|,
literal|null
argument_list|,
name|colNames2
argument_list|,
name|colTypes2
argument_list|,
name|bucketNames2
argument_list|,
literal|null
argument_list|,
name|dbLocation2
argument_list|,
name|bucketCount
argument_list|)
expr_stmt|;
comment|// 2) Insert data into both tables
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName3
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName3
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
name|agentInfo
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name0,1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name2,2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name4,2,more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name5,2,even more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|StrictDelimitedInputWriter
name|writer2
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection2
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName4
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName4
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer2
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection2
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|write
argument_list|(
literal|"name5,2,fact3"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// bucket 0
name|connection2
operator|.
name|write
argument_list|(
literal|"name8,2,fact3"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// bucket 1
name|connection2
operator|.
name|write
argument_list|(
literal|"name0,1,fact1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// bucket 2
name|connection2
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// 3 Check data distribution in  buckets
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|>
name|actual1
init|=
name|dumpAllBuckets
argument_list|(
name|dbLocation
argument_list|,
name|tblName3
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|>
name|actual2
init|=
name|dumpAllBuckets
argument_list|(
name|dbLocation2
argument_list|,
name|tblName4
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\n  Table 1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|actual1
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\n  Table 2"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|actual2
argument_list|)
expr_stmt|;
comment|// assert bucket listing is as expected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"number of buckets does not match expectation"
argument_list|,
name|actual1
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"bucket 0 shouldn't have been created"
argument_list|,
name|actual1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"records in bucket does not match expectation"
argument_list|,
name|actual1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"records in bucket does not match expectation"
argument_list|,
name|actual1
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"records in bucket does not match expectation"
argument_list|,
name|actual1
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runCmdOnDriver
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|boolean
name|t
init|=
name|runDDL
argument_list|(
name|driver
argument_list|,
name|cmd
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cmd
operator|+
literal|" failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFileDump
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|agentInfo
init|=
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName3
argument_list|)
expr_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName4
argument_list|)
expr_stmt|;
comment|// 1) Create two bucketed tables
name|String
name|dbLocation
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName3
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|".db"
decl_stmt|;
name|dbLocation
operator|=
name|dbLocation
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// for windows paths
name|String
index|[]
name|colNames
init|=
literal|"key1,key2,data"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|colTypes
init|=
literal|"string,int,string"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|bucketNames
init|=
literal|"key1,key2"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|bucketCount
init|=
literal|4
decl_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName3
argument_list|,
name|tblName3
argument_list|,
literal|null
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|,
name|bucketNames
argument_list|,
literal|null
argument_list|,
name|dbLocation
argument_list|,
name|bucketCount
argument_list|)
expr_stmt|;
name|String
name|dbLocation2
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName4
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|".db"
decl_stmt|;
name|dbLocation2
operator|=
name|dbLocation2
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// for windows paths
name|String
index|[]
name|colNames2
init|=
literal|"key3,key4,data2"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|colTypes2
init|=
literal|"string,int,string"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|bucketNames2
init|=
literal|"key3,key4"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName4
argument_list|,
name|tblName4
argument_list|,
literal|null
argument_list|,
name|colNames2
argument_list|,
name|colTypes2
argument_list|,
name|bucketNames2
argument_list|,
literal|null
argument_list|,
name|dbLocation2
argument_list|,
name|bucketCount
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName3
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName3
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
name|agentInfo
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// 2) Insert data into both tables
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name0,1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name2,2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name4,2,more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name5,2,even more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|PrintStream
name|origErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|ByteArrayOutputStream
name|myErr
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// replace stderr and run command
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myErr
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|dbLocation
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
name|String
name|errDump
init|=
operator|new
name|String
argument_list|(
name|myErr
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"file(s) are corrupted"
argument_list|)
argument_list|)
expr_stmt|;
comment|// since this test runs on local file system which does not have an API to tell if files or
comment|// open or not, we are testing for negative case even though the bucket files are still open
comment|// for writes (transaction batch not closed yet)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"is still open for writes."
argument_list|)
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|writer2
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection2
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName4
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName4
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
name|agentInfo
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer2
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection2
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|write
argument_list|(
literal|"name5,2,fact3"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// bucket 0
name|connection2
operator|.
name|write
argument_list|(
literal|"name8,2,fact3"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// bucket 1
name|connection2
operator|.
name|write
argument_list|(
literal|"name0,1,fact1"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// bucket 2
comment|// no data for bucket 3 -- expect 0 length bucket file
name|connection2
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|close
argument_list|()
expr_stmt|;
name|origErr
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|myErr
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
comment|// replace stderr and run command
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myErr
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|dbLocation
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
name|errDump
operator|=
operator|new
name|String
argument_list|(
name|myErr
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"Exception"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"file(s) are corrupted"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"is still open for writes."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFileDumpDeltaFilesWithStreamingOptimizations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|agentInfo
init|=
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName3
argument_list|)
expr_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName4
argument_list|)
expr_stmt|;
comment|// 1) Create two bucketed tables
name|String
name|dbLocation
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName3
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|".db"
decl_stmt|;
name|dbLocation
operator|=
name|dbLocation
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// for windows paths
name|String
index|[]
name|colNames
init|=
literal|"key1,key2,data"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|colTypes
init|=
literal|"string,int,string"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|bucketNames
init|=
literal|"key1,key2"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|bucketCount
init|=
literal|4
decl_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName3
argument_list|,
name|tblName3
argument_list|,
literal|null
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|,
name|bucketNames
argument_list|,
literal|null
argument_list|,
name|dbLocation
argument_list|,
name|bucketCount
argument_list|)
expr_stmt|;
comment|// 2) Insert data into both tables
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName3
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName3
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
name|agentInfo
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withStreamingOptimizations
argument_list|(
literal|true
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name0,1,streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name2,2,streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name4,2,unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name5,2,unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6000
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|connection
operator|.
name|write
argument_list|(
operator|(
literal|"name"
operator|+
name|i
operator|+
literal|","
operator|+
name|i
operator|+
literal|","
operator|+
literal|"streaming"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|.
name|write
argument_list|(
operator|(
literal|"name"
operator|+
name|i
operator|+
literal|","
operator|+
name|i
operator|+
literal|","
operator|+
literal|"unlimited"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|ByteArrayOutputStream
name|myOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// replace stderr and run command
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myOut
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|dbLocation
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
name|String
name|outDump
init|=
operator|new
name|String
argument_list|(
name|myOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
comment|// make sure delta files are written with no indexes and no dictionary
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Compression: ZLIB"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no stats/indexes
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Column 0: count: 0 hasNull: false"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Column 1: count: 0 hasNull: false bytesOnDisk: 15 sum: 0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Column 2: count: 0 hasNull: false bytesOnDisk: 15 sum: 0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Column 3: count: 0 hasNull: false bytesOnDisk: 19 sum: 0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Column 4: count: 0 hasNull: false bytesOnDisk: 17 sum: 0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Column 5: count: 0 hasNull: false bytesOnDisk: 15 sum: 0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Column 6: count: 0 hasNull: false"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Column 7: count: 0 hasNull: false bytesOnDisk: 3929"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Column 8: count: 0 hasNull: false bytesOnDisk: 1484 sum: 0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Column 9: count: 0 hasNull: false bytesOnDisk: 816"
argument_list|)
argument_list|)
expr_stmt|;
comment|// no dictionary
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Encoding column 7: DIRECT_V2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Encoding column 9: DIRECT_V2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFileDumpDeltaFilesWithoutStreamingOptimizations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|agentInfo
init|=
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName3
argument_list|)
expr_stmt|;
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName4
argument_list|)
expr_stmt|;
comment|// 1) Create two bucketed tables
name|String
name|dbLocation
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName3
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|".db"
decl_stmt|;
name|dbLocation
operator|=
name|dbLocation
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// for windows paths
name|String
index|[]
name|colNames
init|=
literal|"key1,key2,data"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|colTypes
init|=
literal|"string,int,string"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|bucketNames
init|=
literal|"key1,key2"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|bucketCount
init|=
literal|4
decl_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName3
argument_list|,
name|tblName3
argument_list|,
literal|null
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|,
name|bucketNames
argument_list|,
literal|null
argument_list|,
name|dbLocation
argument_list|,
name|bucketCount
argument_list|)
expr_stmt|;
comment|// 2) Insert data into both tables
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName3
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName3
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
name|agentInfo
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withStreamingOptimizations
argument_list|(
literal|false
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name0,1,streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name2,2,streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name4,2,unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name5,2,unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6000
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|connection
operator|.
name|write
argument_list|(
operator|(
literal|"name"
operator|+
name|i
operator|+
literal|","
operator|+
name|i
operator|+
literal|","
operator|+
literal|"streaming"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|.
name|write
argument_list|(
operator|(
literal|"name"
operator|+
name|i
operator|+
literal|","
operator|+
name|i
operator|+
literal|","
operator|+
literal|"unlimited"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|ByteArrayOutputStream
name|myOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// replace stderr and run command
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myOut
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|dbLocation
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
name|String
name|outDump
init|=
operator|new
name|String
argument_list|(
name|myOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Compression: ZLIB"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|outDump
operator|.
name|contains
argument_list|(
literal|"Encoding column 9: DICTIONARY"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFileDumpCorruptDataFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName3
argument_list|)
expr_stmt|;
comment|// 1) Create two bucketed tables
name|String
name|dbLocation
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName3
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|".db"
decl_stmt|;
name|dbLocation
operator|=
name|dbLocation
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// for windows paths
name|String
index|[]
name|colNames
init|=
literal|"key1,key2,data"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|colTypes
init|=
literal|"string,int,string"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|bucketNames
init|=
literal|"key1,key2"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|bucketCount
init|=
literal|4
decl_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName3
argument_list|,
name|tblName3
argument_list|,
literal|null
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|,
name|bucketNames
argument_list|,
literal|null
argument_list|,
name|dbLocation
argument_list|,
name|bucketCount
argument_list|)
expr_stmt|;
comment|// 2) Insert data into both tables
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName3
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName3
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|10
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// we need side file for this test, so we create 2 txn batch and test with only one
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name0,1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name2,2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name4,2,more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name5,2,even more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|// intentionally corrupt some files
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|dbLocation
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
name|FileDump
operator|.
name|getAllFilesInPath
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00000"
argument_list|)
condition|)
block|{
comment|// empty out the file
name|corruptDataFile
argument_list|(
name|file
argument_list|,
name|conf
argument_list|,
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00001"
argument_list|)
condition|)
block|{
name|corruptDataFile
argument_list|(
name|file
argument_list|,
name|conf
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00002"
argument_list|)
condition|)
block|{
name|corruptDataFile
argument_list|(
name|file
argument_list|,
name|conf
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00003"
argument_list|)
condition|)
block|{
name|corruptDataFile
argument_list|(
name|file
argument_list|,
name|conf
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|PrintStream
name|origErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|ByteArrayOutputStream
name|myErr
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// replace stderr and run command
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myErr
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|dbLocation
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
name|String
name|errDump
init|=
operator|new
name|String
argument_list|(
name|myErr
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"Exception"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"3 file(s) are corrupted"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"is still open for writes."
argument_list|)
argument_list|)
expr_stmt|;
name|origErr
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|myErr
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
comment|// replace stderr and run command
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myErr
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|dbLocation
block|,
literal|"--recover"
block|,
literal|"--skip-dump"
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
name|errDump
operator|=
operator|new
name|String
argument_list|(
name|myErr
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"bucket_00001 recovered successfully!"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"No readable footers found. Creating empty orc file."
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"bucket_00002 recovered successfully!"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"bucket_00003 recovered successfully!"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"Exception"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"is still open for writes."
argument_list|)
argument_list|)
expr_stmt|;
comment|// test after recovery
name|origErr
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|myErr
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
comment|// replace stdout and run command
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myErr
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|dbLocation
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
name|errDump
operator|=
operator|new
name|String
argument_list|(
name|myErr
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"Exception"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"file(s) are corrupted"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"is still open for writes."
argument_list|)
argument_list|)
expr_stmt|;
comment|// after recovery there shouldn'table be any *_flush_length files
name|files
operator|=
name|FileDump
operator|.
name|getAllFilesInPath
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|file
operator|.
name|contains
argument_list|(
literal|"_flush_length"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|corruptDataFile
parameter_list|(
specifier|final
name|String
name|file
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|int
name|addRemoveBytes
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|bPath
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Path
name|cPath
init|=
operator|new
name|Path
argument_list|(
name|bPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|bPath
operator|.
name|getName
argument_list|()
operator|+
literal|".corrupt"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|bPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|bPath
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|addRemoveBytes
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|?
literal|0
else|:
operator|(
name|int
operator|)
name|fileStatus
operator|.
name|getLen
argument_list|()
operator|+
name|addRemoveBytes
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|FSDataInputStream
name|fdis
init|=
name|fs
operator|.
name|open
argument_list|(
name|bPath
argument_list|)
decl_stmt|;
name|fdis
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|fdis
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataOutputStream
name|fdos
init|=
name|fs
operator|.
name|create
argument_list|(
name|cPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|fdos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|fdos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|bPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|cPath
argument_list|,
name|bPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFileDumpCorruptSideFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|dropDB
argument_list|(
name|msClient
argument_list|,
name|dbName3
argument_list|)
expr_stmt|;
comment|// 1) Create two bucketed tables
name|String
name|dbLocation
init|=
name|dbFolder
operator|.
name|newFolder
argument_list|(
name|dbName3
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|".db"
decl_stmt|;
name|dbLocation
operator|=
name|dbLocation
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
comment|// for windows paths
name|String
index|[]
name|colNames
init|=
literal|"key1,key2,data"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|colTypes
init|=
literal|"string,int,string"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
index|[]
name|bucketNames
init|=
literal|"key1,key2"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|bucketCount
init|=
literal|4
decl_stmt|;
name|createDbAndTable
argument_list|(
name|driver
argument_list|,
name|dbName3
argument_list|,
name|tblName3
argument_list|,
literal|null
argument_list|,
name|colNames
argument_list|,
name|colTypes
argument_list|,
name|bucketNames
argument_list|,
literal|null
argument_list|,
name|dbLocation
argument_list|,
name|bucketCount
argument_list|)
expr_stmt|;
comment|// 2) Insert data into both tables
name|StrictDelimitedInputWriter
name|writer
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
name|dbName3
argument_list|)
operator|.
name|withTable
argument_list|(
name|tblName3
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|10
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name0,1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name2,2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name4,2,more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name5,2,even more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name6,3,aHello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|offsetMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|recordOffsets
argument_list|(
name|conf
argument_list|,
name|dbLocation
argument_list|,
name|offsetMap
argument_list|)
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name01,11,-Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name21,21,-Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name41,21,-more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name51,21,-even more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name02,12,--Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name22,22,--Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name42,22,--more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name52,22,--even more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name7,4,aWelcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name8,5,amore Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name9,6,aeven more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name10,7,bHello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name11,8,bWelcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name12,9,bmore Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name13,10,beven more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|recordOffsets
argument_list|(
name|conf
argument_list|,
name|dbLocation
argument_list|,
name|offsetMap
argument_list|)
expr_stmt|;
comment|// intentionally corrupt some files
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|dbLocation
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
name|FileDump
operator|.
name|getAllFilesInPath
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00000"
argument_list|)
condition|)
block|{
name|corruptSideFile
argument_list|(
name|file
argument_list|,
name|conf
argument_list|,
name|offsetMap
argument_list|,
literal|"bucket_00000"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// corrupt last entry
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00001"
argument_list|)
condition|)
block|{
name|corruptSideFile
argument_list|(
name|file
argument_list|,
name|conf
argument_list|,
name|offsetMap
argument_list|,
literal|"bucket_00001"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// empty out side file
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00002"
argument_list|)
condition|)
block|{
name|corruptSideFile
argument_list|(
name|file
argument_list|,
name|conf
argument_list|,
name|offsetMap
argument_list|,
literal|"bucket_00002"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// total 3 entries (2 valid + 1 fake)
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00003"
argument_list|)
condition|)
block|{
name|corruptSideFile
argument_list|(
name|file
argument_list|,
name|conf
argument_list|,
name|offsetMap
argument_list|,
literal|"bucket_00003"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// total 10 entries (2 valid + 8 fake)
block|}
block|}
name|PrintStream
name|origErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|ByteArrayOutputStream
name|myErr
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// replace stderr and run command
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myErr
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|dbLocation
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
name|String
name|errDump
init|=
operator|new
name|String
argument_list|(
name|myErr
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"bucket_00000_flush_length [length: 11"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"bucket_00001_flush_length [length: 0"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"bucket_00002_flush_length [length: 24"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"bucket_00003_flush_length [length: 80"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"Exception"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"4 file(s) are corrupted"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"is still open for writes."
argument_list|)
argument_list|)
expr_stmt|;
name|origErr
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|myErr
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
comment|// replace stderr and run command
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myErr
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|dbLocation
block|,
literal|"--recover"
block|,
literal|"--skip-dump"
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
name|errDump
operator|=
operator|new
name|String
argument_list|(
name|myErr
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"bucket_00000 recovered successfully!"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"bucket_00001 recovered successfully!"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"bucket_00002 recovered successfully!"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"bucket_00003 recovered successfully!"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
name|offsetMap
operator|.
name|get
argument_list|(
literal|"bucket_00000"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"Readable footerOffsets: "
operator|+
name|offsets
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|offsets
operator|=
name|offsetMap
operator|.
name|get
argument_list|(
literal|"bucket_00001"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"Readable footerOffsets: "
operator|+
name|offsets
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|offsets
operator|=
name|offsetMap
operator|.
name|get
argument_list|(
literal|"bucket_00002"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"Readable footerOffsets: "
operator|+
name|offsets
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|offsets
operator|=
name|offsetMap
operator|.
name|get
argument_list|(
literal|"bucket_00003"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"Readable footerOffsets: "
operator|+
name|offsets
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"Exception"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"is still open for writes."
argument_list|)
argument_list|)
expr_stmt|;
comment|// test after recovery
name|origErr
operator|=
name|System
operator|.
name|err
expr_stmt|;
name|myErr
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
comment|// replace stdout and run command
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myErr
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|dbLocation
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
name|errDump
operator|=
operator|new
name|String
argument_list|(
name|myErr
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"Exception"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"file(s) are corrupted"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|errDump
operator|.
name|contains
argument_list|(
literal|"is still open for writes."
argument_list|)
argument_list|)
expr_stmt|;
comment|// after recovery there shouldn'table be any *_flush_length files
name|files
operator|=
name|FileDump
operator|.
name|getAllFilesInPath
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|file
operator|.
name|contains
argument_list|(
literal|"_flush_length"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|corruptSideFile
parameter_list|(
specifier|final
name|String
name|file
parameter_list|,
specifier|final
name|HiveConf
name|conf
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|offsetMap
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|int
name|numEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dataPath
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|Path
name|sideFilePath
init|=
name|OrcAcidUtils
operator|.
name|getSideFile
argument_list|(
name|dataPath
argument_list|)
decl_stmt|;
name|Path
name|cPath
init|=
operator|new
name|Path
argument_list|(
name|sideFilePath
operator|.
name|getParent
argument_list|()
argument_list|,
name|sideFilePath
operator|.
name|getName
argument_list|()
operator|+
literal|".corrupt"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|sideFilePath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
name|offsetMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|long
name|lastOffset
init|=
name|offsets
operator|.
name|get
argument_list|(
name|offsets
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fdos
init|=
name|fs
operator|.
name|create
argument_list|(
name|cPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// corrupt last entry
if|if
condition|(
name|numEntries
operator|<
literal|0
condition|)
block|{
name|byte
index|[]
name|lastOffsetBytes
init|=
name|longToBytes
argument_list|(
name|lastOffset
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offsets
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|fdos
operator|.
name|writeLong
argument_list|(
name|offsets
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fdos
operator|.
name|write
argument_list|(
name|lastOffsetBytes
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numEntries
operator|>
literal|0
condition|)
block|{
name|int
name|firstRun
init|=
name|Math
operator|.
name|min
argument_list|(
name|offsets
operator|.
name|size
argument_list|()
argument_list|,
name|numEntries
argument_list|)
decl_stmt|;
comment|// add original entries
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|firstRun
condition|;
name|i
operator|++
control|)
block|{
name|fdos
operator|.
name|writeLong
argument_list|(
name|offsets
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add fake entries
name|int
name|remaining
init|=
name|numEntries
operator|-
name|firstRun
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|remaining
condition|;
name|i
operator|++
control|)
block|{
name|fdos
operator|.
name|writeLong
argument_list|(
name|lastOffset
operator|+
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|100
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|fdos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|sideFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|cPath
argument_list|,
name|sideFilePath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|longToBytes
parameter_list|(
name|long
name|x
parameter_list|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|putLong
argument_list|(
name|x
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|array
argument_list|()
return|;
block|}
specifier|private
name|void
name|recordOffsets
parameter_list|(
specifier|final
name|HiveConf
name|conf
parameter_list|,
specifier|final
name|String
name|dbLocation
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|offsetMap
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|dbLocation
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
name|FileDump
operator|.
name|getAllFilesInPath
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|Path
name|bPath
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|bPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|bPath
argument_list|)
decl_stmt|;
name|long
name|len
init|=
name|fileStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00000"
argument_list|)
condition|)
block|{
if|if
condition|(
name|offsetMap
operator|.
name|containsKey
argument_list|(
literal|"bucket_00000"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
name|offsetMap
operator|.
name|get
argument_list|(
literal|"bucket_00000"
argument_list|)
decl_stmt|;
name|offsets
operator|.
name|add
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|offsetMap
operator|.
name|put
argument_list|(
literal|"bucket_00000"
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|offsets
operator|.
name|add
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|offsetMap
operator|.
name|put
argument_list|(
literal|"bucket_00000"
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00001"
argument_list|)
condition|)
block|{
if|if
condition|(
name|offsetMap
operator|.
name|containsKey
argument_list|(
literal|"bucket_00001"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
name|offsetMap
operator|.
name|get
argument_list|(
literal|"bucket_00001"
argument_list|)
decl_stmt|;
name|offsets
operator|.
name|add
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|offsetMap
operator|.
name|put
argument_list|(
literal|"bucket_00001"
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|offsets
operator|.
name|add
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|offsetMap
operator|.
name|put
argument_list|(
literal|"bucket_00001"
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00002"
argument_list|)
condition|)
block|{
if|if
condition|(
name|offsetMap
operator|.
name|containsKey
argument_list|(
literal|"bucket_00002"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
name|offsetMap
operator|.
name|get
argument_list|(
literal|"bucket_00002"
argument_list|)
decl_stmt|;
name|offsets
operator|.
name|add
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|offsetMap
operator|.
name|put
argument_list|(
literal|"bucket_00002"
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|offsets
operator|.
name|add
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|offsetMap
operator|.
name|put
argument_list|(
literal|"bucket_00002"
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|contains
argument_list|(
literal|"bucket_00003"
argument_list|)
condition|)
block|{
if|if
condition|(
name|offsetMap
operator|.
name|containsKey
argument_list|(
literal|"bucket_00003"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
name|offsetMap
operator|.
name|get
argument_list|(
literal|"bucket_00003"
argument_list|)
decl_stmt|;
name|offsets
operator|.
name|add
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|offsetMap
operator|.
name|put
argument_list|(
literal|"bucket_00003"
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|offsets
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|offsets
operator|.
name|add
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|offsetMap
operator|.
name|put
argument_list|(
literal|"bucket_00003"
argument_list|,
name|offsets
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testErrorHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|agentInfo
init|=
literal|"UT_"
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|runCmdOnDriver
argument_list|(
literal|"create database testErrors"
argument_list|)
expr_stmt|;
name|runCmdOnDriver
argument_list|(
literal|"use testErrors"
argument_list|)
expr_stmt|;
name|runCmdOnDriver
argument_list|(
literal|"create table T(a int, b int) clustered by (b) into 2 buckets stored as orc TBLPROPERTIES ('transactional'='true')"
argument_list|)
expr_stmt|;
name|StrictDelimitedInputWriter
name|innerWriter
init|=
name|StrictDelimitedInputWriter
operator|.
name|newBuilder
argument_list|()
operator|.
name|withFieldDelimiter
argument_list|(
literal|','
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HiveStreamingConnection
name|connection
init|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testErrors"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"T"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
name|agentInfo
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|2
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|innerWriter
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
decl_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|FaultyWriter
name|writer
init|=
operator|new
name|FaultyWriter
argument_list|(
name|innerWriter
argument_list|)
decl_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Exception
name|expectedEx
init|=
literal|null
decl_stmt|;
name|GetOpenTxnsInfoResponse
name|r
init|=
name|msClient
operator|.
name|showTxns
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"HWM didn'table match"
argument_list|,
literal|17
argument_list|,
name|r
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TxnInfo
argument_list|>
name|ti
init|=
name|r
operator|.
name|getOpen_txns
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong status ti(0)"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|ti
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong status ti(1)"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|ti
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StreamingException
name|ex
parameter_list|)
block|{
name|expectedEx
operator|=
name|ex
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"beginTransaction() should have failed"
argument_list|,
name|expectedEx
operator|!=
literal|null
operator|&&
name|expectedEx
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Streaming connection is closed already."
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testErrors"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"T"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
name|agentInfo
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|2
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|innerWriter
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|expectedEx
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|write
argument_list|(
literal|"name0,1,Hello streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StreamingException
name|ex
parameter_list|)
block|{
name|expectedEx
operator|=
name|ex
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"write() should have failed"
argument_list|,
name|expectedEx
operator|!=
literal|null
operator|&&
name|expectedEx
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Transaction batch is null. Missing beginTransaction?"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedEx
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StreamingException
name|ex
parameter_list|)
block|{
name|expectedEx
operator|=
name|ex
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"commitTransaction() should have failed"
argument_list|,
name|expectedEx
operator|!=
literal|null
operator|&&
name|expectedEx
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Transaction batch is null. Missing beginTransaction?"
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testErrors"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"T"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
name|agentInfo
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|2
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name2,2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name4,2,more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name5,2,even more Streaming unlimited"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
comment|//test toString()
name|String
name|s
init|=
name|connection
operator|.
name|toTransactionString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Actual: "
operator|+
name|s
argument_list|,
name|s
operator|.
name|contains
argument_list|(
literal|"LastUsed "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|connection
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Actual: "
operator|+
name|s
argument_list|,
name|s
operator|.
name|contains
argument_list|(
literal|"TxnStatus[CO]"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedEx
operator|=
literal|null
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|writer
operator|.
name|enableErrors
argument_list|()
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|write
argument_list|(
literal|"name6,2,Doh!"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StreamingIOFailure
name|ex
parameter_list|)
block|{
name|expectedEx
operator|=
name|ex
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Wrong exception: "
operator|+
operator|(
name|expectedEx
operator|!=
literal|null
condition|?
name|expectedEx
operator|.
name|getMessage
argument_list|()
else|:
literal|"?"
operator|)
argument_list|,
name|expectedEx
operator|!=
literal|null
operator|&&
name|expectedEx
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Simulated fault occurred"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedEx
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StreamingException
name|ex
parameter_list|)
block|{
name|expectedEx
operator|=
name|ex
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"commitTransaction() should have failed"
argument_list|,
name|expectedEx
operator|!=
literal|null
operator|&&
name|expectedEx
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Transaction state is not OPEN. Missing beginTransaction?"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test toString()
name|s
operator|=
name|connection
operator|.
name|toTransactionString
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Actual: "
operator|+
name|s
argument_list|,
name|s
operator|.
name|contains
argument_list|(
literal|"LastUsed "
operator|+
name|JavaUtils
operator|.
name|txnIdToString
argument_list|(
name|connection
operator|.
name|getCurrentTxnId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Actual: "
operator|+
name|s
argument_list|,
name|s
operator|.
name|contains
argument_list|(
literal|"TxnStatus[CA]"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|msClient
operator|.
name|showTxns
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"HWM didn't match"
argument_list|,
literal|19
argument_list|,
name|r
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|ti
operator|=
name|r
operator|.
name|getOpen_txns
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong status ti(0)"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|ti
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong status ti(1)"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|ti
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|//txnid 3 was committed and thus not open
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong status ti(2)"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|ti
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|disableErrors
argument_list|()
expr_stmt|;
name|connection
operator|=
name|HiveStreamingConnection
operator|.
name|newBuilder
argument_list|()
operator|.
name|withDatabase
argument_list|(
literal|"testErrors"
argument_list|)
operator|.
name|withTable
argument_list|(
literal|"T"
argument_list|)
operator|.
name|withAgentInfo
argument_list|(
name|agentInfo
argument_list|)
operator|.
name|withTransactionBatchSize
argument_list|(
literal|2
argument_list|)
operator|.
name|withRecordWriter
argument_list|(
name|writer
argument_list|)
operator|.
name|withHiveConf
argument_list|(
name|conf
argument_list|)
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|connection
operator|.
name|write
argument_list|(
literal|"name2,2,Welcome to streaming"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|enableErrors
argument_list|()
expr_stmt|;
name|expectedEx
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|StreamingIOFailure
name|ex
parameter_list|)
block|{
name|expectedEx
operator|=
name|ex
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Wrong exception: "
operator|+
operator|(
name|expectedEx
operator|!=
literal|null
condition|?
name|expectedEx
operator|.
name|getMessage
argument_list|()
else|:
literal|"?"
operator|)
argument_list|,
name|expectedEx
operator|!=
literal|null
operator|&&
name|expectedEx
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Simulated fault occurred"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|msClient
operator|.
name|showTxns
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"HWM didn'table match"
argument_list|,
literal|21
argument_list|,
name|r
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|ti
operator|=
name|r
operator|.
name|getOpen_txns
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong status ti(3)"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|ti
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"wrong status ti(4)"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|ti
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// assumes un partitioned table
comment|// returns a map<bucketNum, list<record>>
specifier|private
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|>
name|dumpAllBuckets
parameter_list|(
name|String
name|dbLocation
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|deltaDir
range|:
operator|new
name|File
argument_list|(
name|dbLocation
operator|+
literal|"/"
operator|+
name|tableName
argument_list|)
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|deltaDir
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"delta"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
index|[]
name|bucketFiles
init|=
name|deltaDir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
name|String
name|name
init|=
name|pathname
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|bucketFile
range|:
name|bucketFiles
control|)
block|{
if|if
condition|(
name|bucketFile
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"length"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Integer
name|bucketNum
init|=
name|getBucketNumber
argument_list|(
name|bucketFile
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|SampleRec
argument_list|>
name|recs
init|=
name|dumpBucket
argument_list|(
operator|new
name|Path
argument_list|(
name|bucketFile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|bucketNum
argument_list|,
name|recs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|//assumes bucket_NNNNN format of file name
specifier|private
name|Integer
name|getBucketNumber
parameter_list|(
name|File
name|bucketFile
parameter_list|)
block|{
name|String
name|fname
init|=
name|bucketFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|start
init|=
name|fname
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
name|String
name|number
init|=
name|fname
operator|.
name|substring
argument_list|(
name|start
operator|+
literal|1
argument_list|,
name|fname
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
return|;
block|}
comment|// delete db and all tables in it
specifier|public
specifier|static
name|void
name|dropDB
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|,
name|String
name|databaseName
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|String
name|table
range|:
name|client
operator|.
name|listTableNamesByFilter
argument_list|(
name|databaseName
argument_list|,
literal|""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|databaseName
argument_list|,
name|table
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
name|databaseName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{     }
block|}
comment|///////// -------- UTILS ------- /////////
comment|// returns Path of the partition created (if any) else Path of table
specifier|private
specifier|static
name|Path
name|createDbAndTable
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
index|[]
name|colNames
parameter_list|,
name|String
index|[]
name|colTypes
parameter_list|,
name|String
index|[]
name|bucketCols
parameter_list|,
name|String
index|[]
name|partNames
parameter_list|,
name|String
name|dbLocation
parameter_list|,
name|int
name|bucketCount
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|dbUri
init|=
literal|"raw://"
operator|+
operator|new
name|Path
argument_list|(
name|dbLocation
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|tableLoc
init|=
name|dbUri
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|tableName
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"create database IF NOT EXISTS "
operator|+
name|databaseName
operator|+
literal|" location '"
operator|+
name|dbUri
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
literal|"use "
operator|+
name|databaseName
argument_list|)
expr_stmt|;
name|String
name|crtTbl
init|=
literal|"create table "
operator|+
name|tableName
operator|+
literal|" ( "
operator|+
name|getTableColumnsStr
argument_list|(
name|colNames
argument_list|,
name|colTypes
argument_list|)
operator|+
literal|" )"
operator|+
name|getPartitionStmtStr
argument_list|(
name|partNames
argument_list|)
operator|+
literal|" clustered by ( "
operator|+
name|join
argument_list|(
name|bucketCols
argument_list|,
literal|","
argument_list|)
operator|+
literal|" )"
operator|+
literal|" into "
operator|+
name|bucketCount
operator|+
literal|" buckets "
operator|+
literal|" stored as orc "
operator|+
literal|" location '"
operator|+
name|tableLoc
operator|+
literal|"'"
operator|+
literal|" TBLPROPERTIES ('transactional'='true') "
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
name|crtTbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|partNames
operator|!=
literal|null
operator|&&
name|partNames
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
name|addPartition
argument_list|(
name|driver
argument_list|,
name|tableName
argument_list|,
name|partVals
argument_list|,
name|partNames
argument_list|)
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|tableLoc
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Path
name|addPartition
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
index|[]
name|partNames
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|partSpec
init|=
name|getPartsSpec
argument_list|(
name|partNames
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|String
name|addPart
init|=
literal|"alter table "
operator|+
name|tableName
operator|+
literal|" add partition ( "
operator|+
name|partSpec
operator|+
literal|" )"
decl_stmt|;
name|runDDL
argument_list|(
name|driver
argument_list|,
name|addPart
argument_list|)
expr_stmt|;
return|return
name|getPartitionPath
argument_list|(
name|driver
argument_list|,
name|tableName
argument_list|,
name|partSpec
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Path
name|getPartitionPath
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partSpec
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
name|queryTable
argument_list|(
name|driver
argument_list|,
literal|"describe extended "
operator|+
name|tableName
operator|+
literal|" PARTITION ("
operator|+
name|partSpec
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|String
name|partInfo
init|=
name|res
operator|.
name|get
argument_list|(
name|res
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|partInfo
operator|.
name|indexOf
argument_list|(
literal|"location:"
argument_list|)
operator|+
literal|"location:"
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|partInfo
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|,
name|start
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|partInfo
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getTableColumnsStr
parameter_list|(
name|String
index|[]
name|colNames
parameter_list|,
name|String
index|[]
name|colTypes
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|colNames
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|colTypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|colNames
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// converts partNames into "partName1 string, partName2 string"
specifier|private
specifier|static
name|String
name|getTablePartsStr
parameter_list|(
name|String
index|[]
name|partNames
parameter_list|)
block|{
if|if
condition|(
name|partNames
operator|==
literal|null
operator|||
name|partNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNames
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|partNames
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|" string"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|partNames
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// converts partNames,partVals into "partName1=val1, partName2=val2"
specifier|private
specifier|static
name|String
name|getPartsSpec
parameter_list|(
name|String
index|[]
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partVals
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|partNames
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|" = '"
argument_list|)
operator|.
name|append
argument_list|(
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|partVals
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|join
parameter_list|(
name|String
index|[]
name|values
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|strbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|strbuf
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|strbuf
operator|.
name|append
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|strbuf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getPartitionStmtStr
parameter_list|(
name|String
index|[]
name|partNames
parameter_list|)
block|{
if|if
condition|(
name|partNames
operator|==
literal|null
operator|||
name|partNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
literal|" partitioned by ("
operator|+
name|getTablePartsStr
argument_list|(
name|partNames
argument_list|)
operator|+
literal|" )"
return|;
block|}
specifier|private
specifier|static
name|boolean
name|runDDL
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|sql
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sql
argument_list|)
expr_stmt|;
comment|//LOG.debug("Running Hive Query: "+ sql);
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
name|sql
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Statement: "
operator|+
name|sql
operator|+
literal|" failed: "
operator|+
name|cpr
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|queryTable
parameter_list|(
name|IDriver
name|driver
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandProcessorResponse
name|cpr
init|=
name|driver
operator|.
name|run
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpr
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|query
operator|+
literal|" failed: "
operator|+
name|cpr
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|driver
operator|.
name|getResults
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|private
specifier|static
class|class
name|SampleRec
block|{
specifier|public
name|String
name|field1
decl_stmt|;
specifier|public
name|int
name|field2
decl_stmt|;
specifier|public
name|String
name|field3
decl_stmt|;
specifier|public
name|SampleRec
parameter_list|(
name|String
name|field1
parameter_list|,
name|int
name|field2
parameter_list|,
name|String
name|field3
parameter_list|)
block|{
name|this
operator|.
name|field1
operator|=
name|field1
expr_stmt|;
name|this
operator|.
name|field2
operator|=
name|field2
expr_stmt|;
name|this
operator|.
name|field3
operator|=
name|field3
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SampleRec
name|that
init|=
operator|(
name|SampleRec
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|field2
operator|!=
name|that
operator|.
name|field2
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|field1
operator|!=
literal|null
condition|?
operator|!
name|field1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|field1
argument_list|)
else|:
name|that
operator|.
name|field1
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
operator|(
name|field3
operator|!=
literal|null
condition|?
operator|!
name|field3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|field3
argument_list|)
else|:
name|that
operator|.
name|field3
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|field1
operator|!=
literal|null
condition|?
name|field1
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|field2
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|field3
operator|!=
literal|null
condition|?
name|field3
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|" { "
operator|+
literal|"'"
operator|+
name|field1
operator|+
literal|'\''
operator|+
literal|","
operator|+
name|field2
operator|+
literal|",'"
operator|+
name|field3
operator|+
literal|'\''
operator|+
literal|" }"
return|;
block|}
block|}
comment|/**    * This is test-only wrapper around the real RecordWriter.    * It can simulate faults from lower levels to test error handling logic.    */
specifier|private
specifier|static
specifier|final
class|class
name|FaultyWriter
implements|implements
name|RecordWriter
block|{
specifier|private
specifier|final
name|RecordWriter
name|delegate
decl_stmt|;
specifier|private
name|boolean
name|shouldThrow
init|=
literal|false
decl_stmt|;
specifier|private
name|FaultyWriter
parameter_list|(
name|RecordWriter
name|delegate
parameter_list|)
block|{
assert|assert
name|delegate
operator|!=
literal|null
assert|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|StreamingConnection
name|connection
parameter_list|,
specifier|final
name|long
name|minWriteId
parameter_list|,
specifier|final
name|long
name|maxWriteID
parameter_list|)
throws|throws
name|StreamingException
block|{
name|delegate
operator|.
name|init
argument_list|(
name|connection
argument_list|,
name|minWriteId
argument_list|,
name|maxWriteID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|long
name|writeId
parameter_list|,
name|byte
index|[]
name|record
parameter_list|)
throws|throws
name|StreamingException
block|{
name|delegate
operator|.
name|write
argument_list|(
name|writeId
argument_list|,
name|record
argument_list|)
expr_stmt|;
name|produceFault
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|long
name|writeId
parameter_list|,
specifier|final
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|StreamingException
block|{
name|delegate
operator|.
name|write
argument_list|(
name|writeId
argument_list|,
name|inputStream
argument_list|)
expr_stmt|;
name|produceFault
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|StreamingException
block|{
name|delegate
operator|.
name|flush
argument_list|()
expr_stmt|;
name|produceFault
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|StreamingException
block|{
name|delegate
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPartitions
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getPartitions
argument_list|()
return|;
block|}
comment|/**      * allows testing of "unexpected" errors      *      * @throws StreamingIOFailure      */
specifier|private
name|void
name|produceFault
parameter_list|()
throws|throws
name|StreamingIOFailure
block|{
if|if
condition|(
name|shouldThrow
condition|)
block|{
throw|throw
operator|new
name|StreamingIOFailure
argument_list|(
literal|"Simulated fault occurred"
argument_list|)
throw|;
block|}
block|}
name|void
name|enableErrors
parameter_list|()
block|{
name|shouldThrow
operator|=
literal|true
expr_stmt|;
block|}
name|void
name|disableErrors
parameter_list|()
block|{
name|shouldThrow
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getDeltaFileLocation
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partitionValues
parameter_list|,
name|Integer
name|bucketId
parameter_list|,
name|Long
name|minWriteId
parameter_list|,
name|Long
name|maxWriteId
parameter_list|,
name|Integer
name|statementId
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|StreamingException
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

