begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|app
operator|.
name|Velocity
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Resources
import|;
end_import

begin_class
specifier|public
class|class
name|Templates
block|{
specifier|public
specifier|static
name|void
name|writeTemplateResult
parameter_list|(
name|String
name|resource
parameter_list|,
name|File
name|script
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|keyValues
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|template
init|=
name|readResource
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|script
argument_list|)
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|getTemplateResult
argument_list|(
name|template
argument_list|,
name|keyValues
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|writer
operator|.
name|checkError
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error writing to "
operator|+
name|script
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|readResource
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Resources
operator|.
name|toString
argument_list|(
name|Resources
operator|.
name|getResource
argument_list|(
name|resource
argument_list|)
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getTemplateResult
parameter_list|(
name|String
name|command
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|keyValues
parameter_list|)
throws|throws
name|IOException
block|{
name|VelocityContext
name|context
init|=
operator|new
name|VelocityContext
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keyValues
operator|.
name|keySet
argument_list|()
control|)
block|{
name|context
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|keyValues
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Velocity
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|writer
argument_list|,
name|command
argument_list|,
name|command
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to render "
operator|+
name|command
operator|+
literal|" with "
operator|+
name|keyValues
argument_list|)
throw|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Templates
parameter_list|()
block|{}
block|}
end_class

end_unit

