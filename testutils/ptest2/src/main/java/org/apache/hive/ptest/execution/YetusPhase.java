begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
operator|.
name|TestConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Wrapper phase for Yetus check execution kick-off. It will invoke ./dev-support/test-patch.sh  * with the proper arguments and run the check itself in a asynchronous fashion.  */
end_comment

begin_class
specifier|public
class|class
name|YetusPhase
extends|extends
name|Phase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|YETUS_LOG_FILE
init|=
literal|"yetus.txt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|YETUS_OUTPUT_FOLDER
init|=
literal|"yetus"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|YETUS_EXEC_SCRIPT
init|=
literal|"yetus-exec.sh"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|YETUS_EXEC_VM
init|=
literal|"yetus-exec.vm"
decl_stmt|;
specifier|private
specifier|final
name|File
name|mPatchFile
decl_stmt|;
specifier|private
specifier|final
name|File
name|mWorkingDir
decl_stmt|;
specifier|private
specifier|final
name|File
name|mLogFile
decl_stmt|;
specifier|private
specifier|final
name|File
name|mOutputDir
decl_stmt|;
specifier|private
specifier|final
name|File
name|mScratchDir
decl_stmt|;
specifier|private
specifier|final
name|String
name|buildTag
decl_stmt|;
specifier|private
specifier|final
name|String
name|buildUrl
decl_stmt|;
specifier|private
specifier|final
name|TestConfiguration
name|conf
decl_stmt|;
specifier|public
name|YetusPhase
parameter_list|(
name|TestConfiguration
name|configuration
parameter_list|,
name|List
argument_list|<
name|HostExecutor
argument_list|>
name|hostExecutors
parameter_list|,
name|LocalCommandFactory
name|localCommandFactory
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateDefaults
parameter_list|,
name|String
name|workingDir
parameter_list|,
name|File
name|scratchDir
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|File
name|logDir
parameter_list|,
name|File
name|patchFile
parameter_list|)
block|{
name|super
argument_list|(
name|hostExecutors
argument_list|,
name|localCommandFactory
argument_list|,
name|templateDefaults
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|this
operator|.
name|mPatchFile
operator|=
name|patchFile
expr_stmt|;
name|this
operator|.
name|mWorkingDir
operator|=
operator|new
name|File
argument_list|(
name|workingDir
argument_list|,
name|YETUS_OUTPUT_FOLDER
argument_list|)
expr_stmt|;
name|this
operator|.
name|mLogFile
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|YETUS_LOG_FILE
argument_list|)
expr_stmt|;
name|this
operator|.
name|mOutputDir
operator|=
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
name|YETUS_OUTPUT_FOLDER
argument_list|)
expr_stmt|;
name|this
operator|.
name|mScratchDir
operator|=
name|scratchDir
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|buildTag
operator|=
name|templateDefaults
operator|.
name|get
argument_list|(
literal|"buildTag"
argument_list|)
expr_stmt|;
name|this
operator|.
name|buildUrl
operator|=
name|conf
operator|.
name|getLogsURL
argument_list|()
operator|+
literal|"/"
operator|+
name|this
operator|.
name|buildTag
operator|+
literal|"/"
expr_stmt|;
block|}
comment|/**    * This method will start a new thread to handle the Yetus test patch script execution.    * It creates a separate directory, instantiates the Yetus velocity template, runs it, and    * cleans it up after.    * @throws Exception    */
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|checkDependencies
argument_list|()
condition|)
block|{
return|return;
block|}
name|File
name|yetusScriptDir
init|=
operator|new
name|File
argument_list|(
name|mScratchDir
argument_list|,
name|buildTag
argument_list|)
decl_stmt|;
name|yetusScriptDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|File
name|yetusExecScript
init|=
operator|new
name|File
argument_list|(
name|yetusScriptDir
argument_list|,
name|YETUS_EXEC_SCRIPT
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateVars
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|templateVars
operator|.
name|putAll
argument_list|(
name|getTemplateDefaults
argument_list|()
argument_list|)
expr_stmt|;
name|templateVars
operator|.
name|put
argument_list|(
literal|"workingDir"
argument_list|,
name|mWorkingDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|templateVars
operator|.
name|put
argument_list|(
literal|"jiraName"
argument_list|,
name|conf
operator|.
name|getJiraName
argument_list|()
argument_list|)
expr_stmt|;
name|templateVars
operator|.
name|put
argument_list|(
literal|"patchFile"
argument_list|,
name|mPatchFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|templateVars
operator|.
name|put
argument_list|(
literal|"jiraUrl"
argument_list|,
name|conf
operator|.
name|getJiraUrl
argument_list|()
argument_list|)
expr_stmt|;
name|templateVars
operator|.
name|put
argument_list|(
literal|"jiraUser"
argument_list|,
name|conf
operator|.
name|getJiraUser
argument_list|()
argument_list|)
expr_stmt|;
name|templateVars
operator|.
name|put
argument_list|(
literal|"jiraPass"
argument_list|,
name|conf
operator|.
name|getJiraPassword
argument_list|()
argument_list|)
expr_stmt|;
name|templateVars
operator|.
name|put
argument_list|(
literal|"outputDir"
argument_list|,
name|mOutputDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|templateVars
operator|.
name|put
argument_list|(
literal|"buildUrl"
argument_list|,
name|buildUrl
argument_list|)
expr_stmt|;
name|templateVars
operator|.
name|put
argument_list|(
literal|"buildUrlLog"
argument_list|,
name|YETUS_LOG_FILE
argument_list|)
expr_stmt|;
name|templateVars
operator|.
name|put
argument_list|(
literal|"buildUrlOutputDir"
argument_list|,
name|YETUS_OUTPUT_FOLDER
argument_list|)
expr_stmt|;
name|templateVars
operator|.
name|put
argument_list|(
literal|"logFile"
argument_list|,
name|mLogFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Writing {} from template"
argument_list|,
name|yetusExecScript
argument_list|)
expr_stmt|;
name|Templates
operator|.
name|writeTemplateResult
argument_list|(
name|YETUS_EXEC_VM
argument_list|,
name|yetusExecScript
argument_list|,
name|templateVars
argument_list|)
expr_stmt|;
name|Process
name|proc
init|=
operator|new
name|ProcessBuilder
argument_list|()
operator|.
name|command
argument_list|(
literal|"bash"
argument_list|,
name|yetusExecScript
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
decl_stmt|;
name|int
name|exitCode
init|=
name|proc
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitCode
operator|==
literal|0
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Finished processing Yetus check successfully"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error processing Yetus check"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Deleting "
operator|+
name|yetusExecScript
operator|+
literal|": "
operator|+
name|yetusExecScript
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Deleting "
operator|+
name|yetusScriptDir
operator|+
literal|": "
operator|+
name|yetusScriptDir
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Started Yetus check.."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|checkDependencies
parameter_list|()
block|{
if|if
condition|(
name|mPatchFile
operator|==
literal|null
operator|||
operator|!
name|mPatchFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot run Yetus check - patch file is null or not readable."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
operator|(
name|mWorkingDir
operator|.
name|isDirectory
argument_list|()
operator|&&
name|mWorkingDir
operator|.
name|canWrite
argument_list|()
operator|)
operator|&&
operator|(
name|mOutputDir
operator|.
name|isDirectory
argument_list|()
operator|&&
name|mOutputDir
operator|.
name|canWrite
argument_list|()
operator|)
operator|)
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot run Yetus check - output directories not present and writable: "
operator|+
literal|"workingDir:%s, outputDir:%s"
argument_list|,
name|mWorkingDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|mOutputDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|conf
operator|.
name|getJiraUrl
argument_list|()
argument_list|)
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|conf
operator|.
name|getJiraName
argument_list|()
argument_list|)
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|conf
operator|.
name|getJiraPassword
argument_list|()
argument_list|)
operator|||
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|conf
operator|.
name|getJiraUser
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot run Yetus check - credentials for Jira not provided."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

