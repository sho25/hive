begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|context
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|Dirs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
operator|.
name|Host
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
class|class
name|FixedExecutionContextProvider
implements|implements
name|ExecutionContextProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FixedExecutionContextProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExecutionContext
name|mExecutionContext
decl_stmt|;
specifier|private
specifier|final
name|File
name|mWorkingDir
decl_stmt|;
specifier|private
name|FixedExecutionContextProvider
parameter_list|(
name|Set
argument_list|<
name|Host
argument_list|>
name|hosts
parameter_list|,
name|String
name|workingDirectory
parameter_list|,
name|String
name|privateKey
parameter_list|)
throws|throws
name|IOException
block|{
name|mWorkingDir
operator|=
name|Dirs
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|workingDirectory
argument_list|,
literal|"working"
argument_list|)
argument_list|)
expr_stmt|;
name|mExecutionContext
operator|=
operator|new
name|ExecutionContext
argument_list|(
name|this
argument_list|,
name|hosts
argument_list|,
name|mWorkingDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ExecutionContext
name|createExecutionContext
parameter_list|()
throws|throws
name|CreateHostsFailedException
throws|,
name|ServiceNotAvailableException
block|{
return|return
name|mExecutionContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|terminate
parameter_list|(
name|ExecutionContext
name|executionContext
parameter_list|)
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|void
name|replaceBadHosts
parameter_list|(
name|ExecutionContext
name|executionContext
parameter_list|)
throws|throws
name|CreateHostsFailedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{    }
specifier|public
specifier|static
class|class
name|Builder
implements|implements
name|ExecutionContextProvider
operator|.
name|Builder
block|{
annotation|@
name|Override
specifier|public
name|ExecutionContextProvider
name|build
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
name|workingDirectory
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|privateKey
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|context
operator|.
name|getString
argument_list|(
name|PRIVATE_KEY
argument_list|)
argument_list|,
name|PRIVATE_KEY
operator|+
literal|" is required"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Host
argument_list|>
name|hosts
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|Splitter
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|context
operator|.
name|getString
argument_list|(
literal|"hosts"
argument_list|,
literal|""
argument_list|)
argument_list|)
control|)
block|{
name|Context
name|hostContext
init|=
operator|new
name|Context
argument_list|(
name|context
operator|.
name|getSubProperties
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|join
argument_list|(
literal|"host"
argument_list|,
name|alias
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing host {}: {}"
argument_list|,
name|alias
argument_list|,
name|hostContext
operator|.
name|getParameters
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hosts
operator|.
name|add
argument_list|(
operator|new
name|Host
argument_list|(
name|hostContext
operator|.
name|getString
argument_list|(
literal|"host"
argument_list|)
argument_list|,
name|hostContext
operator|.
name|getString
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|Iterables
operator|.
name|toArray
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|split
argument_list|(
name|hostContext
operator|.
name|getString
argument_list|(
literal|"localDirs"
argument_list|)
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|hostContext
operator|.
name|getInteger
argument_list|(
literal|"threads"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkState
argument_list|(
name|hosts
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|,
literal|"no hosts specified"
argument_list|)
expr_stmt|;
name|ExecutionContextProvider
name|hostProvider
init|=
operator|new
name|FixedExecutionContextProvider
argument_list|(
name|hosts
argument_list|,
name|workingDirectory
argument_list|,
name|privateKey
argument_list|)
decl_stmt|;
return|return
name|hostProvider
return|;
block|}
block|}
block|}
end_class

end_unit

