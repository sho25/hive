begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
package|;
end_package

begin_comment
comment|/**  * Represents a generic status for a GenericResponse  * in addition to the Status of a job.  */
end_comment

begin_class
specifier|public
class|class
name|Status
block|{
specifier|private
name|Name
name|name
decl_stmt|;
specifier|private
name|String
name|message
decl_stmt|;
specifier|public
name|Status
parameter_list|()
block|{    }
specifier|public
name|Status
parameter_list|(
name|Name
name|name
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|Name
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|Name
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Status [name="
operator|+
name|name
operator|+
literal|", message="
operator|+
name|message
operator|+
literal|"]"
return|;
block|}
specifier|public
specifier|static
enum|enum
name|Name
block|{
name|ILLEGAL_ARGUMENT
parameter_list|()
operator|,
constructor|QUEUE_FULL(
block|)
enum|,
name|INTERNAL_ERROR
parameter_list|()
operator|,
constructor|PENDING(
block|)
operator|,
name|IN_PROGRESS
argument_list|()
operator|,
name|FAILED
argument_list|()
operator|,
name|OK
argument_list|()
expr_stmt|;
end_class

begin_function
unit|}   public
specifier|static
name|void
name|assertOK
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isOK
argument_list|(
name|status
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|status
operator|==
literal|null
condition|?
literal|"Status is null"
else|:
name|status
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|assertOKOrFailed
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|isOK
argument_list|(
name|status
argument_list|)
operator|||
name|isFailed
argument_list|(
name|status
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|status
operator|==
literal|null
condition|?
literal|"Status is null"
else|:
name|status
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|isInProgress
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
return|return
name|status
operator|!=
literal|null
operator|&&
name|Name
operator|.
name|IN_PROGRESS
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|isPending
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
return|return
name|status
operator|!=
literal|null
operator|&&
name|Name
operator|.
name|PENDING
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|isOK
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
return|return
name|status
operator|!=
literal|null
operator|&&
name|Name
operator|.
name|OK
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|isIllegalArgument
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
return|return
name|status
operator|!=
literal|null
operator|&&
name|Name
operator|.
name|ILLEGAL_ARGUMENT
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|boolean
name|isFailed
parameter_list|(
name|Status
name|status
parameter_list|)
block|{
return|return
name|status
operator|!=
literal|null
operator|&&
name|Name
operator|.
name|FAILED
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Status
name|illegalArgument
parameter_list|()
block|{
return|return
name|illegalArgument
argument_list|(
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Status
name|illegalArgument
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|Status
argument_list|(
name|Name
operator|.
name|ILLEGAL_ARGUMENT
argument_list|,
name|message
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Status
name|queueFull
parameter_list|()
block|{
return|return
operator|new
name|Status
argument_list|(
name|Name
operator|.
name|QUEUE_FULL
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Status
name|internalError
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|Status
argument_list|(
name|Name
operator|.
name|INTERNAL_ERROR
argument_list|,
name|message
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Status
name|pending
parameter_list|()
block|{
return|return
operator|new
name|Status
argument_list|(
name|Name
operator|.
name|PENDING
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Status
name|inProgress
parameter_list|()
block|{
return|return
operator|new
name|Status
argument_list|(
name|Name
operator|.
name|IN_PROGRESS
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Status
name|failed
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|Status
argument_list|(
name|Name
operator|.
name|FAILED
argument_list|,
name|message
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|Status
name|ok
parameter_list|()
block|{
return|return
operator|new
name|Status
argument_list|(
name|Name
operator|.
name|OK
argument_list|,
literal|null
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

