begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyManagementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ssl
operator|.
name|SSLContexts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Utility class for the Precommit test job queue on Jenkins  */
end_comment

begin_class
specifier|public
class|class
name|JenkinsQueueUtil
block|{
specifier|private
specifier|static
specifier|final
name|String
name|JSON_ITEMS_FIELD
init|=
literal|"items"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JSON_TASK_FIELD
init|=
literal|"task"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JSON_TASK_NAME_FIELD
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JSON_PARAMETERS_FIELD
init|=
literal|"parameters"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JSON_PARAMETER_NAME_FIELD
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JSON_PARAMETER_VALUE_FIELD
init|=
literal|"value"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JOB_NAME
init|=
literal|"PreCommit-HIVE-Build"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ISSUE_FIELD_KEY
init|=
literal|"ISSUE_NUM"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JIRA_KEY_PREFIX
init|=
literal|"HIVE-"
decl_stmt|;
comment|/**    * Looks up the current queue of the precommit job on a jenkins instance (specified by    * PTestClient.JENKINS_QUEUE_URL), and checks if current Jira is standing in queue already (i.e.    * will be executed in the future too)    *    * @param commandLine PTestClient's command line option values' list    * @return whether or not the Jira specified in the command line can be found in the job queue    */
specifier|public
specifier|static
name|boolean
name|isJiraAlreadyInQueue
parameter_list|(
name|CommandLine
name|commandLine
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|PTestClient
operator|.
name|JENKINS_QUEUE_URL
argument_list|)
operator|&&
name|commandLine
operator|.
name|hasOption
argument_list|(
name|PTestClient
operator|.
name|JIRA
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking "
operator|+
name|JOB_NAME
operator|+
literal|" queue..."
argument_list|)
expr_stmt|;
name|String
name|queueJson
init|=
name|httpGet
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|PTestClient
operator|.
name|JENKINS_QUEUE_URL
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|jirasInQueue
init|=
name|parseJiras
argument_list|(
name|queueJson
argument_list|)
decl_stmt|;
if|if
condition|(
name|jirasInQueue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|JOB_NAME
operator|+
literal|" has the following jira(s) in queue: "
operator|+
name|jirasInQueue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
name|String
name|jira
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|PTestClient
operator|.
name|JIRA
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|JIRA_KEY_PREFIX
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|jirasInQueue
operator|.
name|contains
argument_list|(
name|jira
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error checking "
operator|+
name|JOB_NAME
operator|+
literal|" build queue: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Parses raw json to produce a list of Jira number strings.    * @param queueJson    * @return    * @throws IOException    */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseJiras
parameter_list|(
name|String
name|queueJson
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|jirasInQueue
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|rootNode
init|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|queueJson
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JsonNode
argument_list|>
name|items
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|rootNode
operator|.
name|findValue
argument_list|(
name|JSON_ITEMS_FIELD
argument_list|)
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|JsonNode
name|item
range|:
name|items
control|)
block|{
name|String
name|taskName
init|=
name|item
operator|.
name|path
argument_list|(
name|JSON_TASK_FIELD
argument_list|)
operator|.
name|path
argument_list|(
name|JSON_TASK_NAME_FIELD
argument_list|)
operator|.
name|asText
argument_list|()
decl_stmt|;
if|if
condition|(
name|JOB_NAME
operator|.
name|equals
argument_list|(
name|taskName
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|JsonNode
argument_list|>
name|parameters
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|item
operator|.
name|findValue
argument_list|(
name|JSON_PARAMETERS_FIELD
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|JsonNode
name|parameter
range|:
name|parameters
control|)
block|{
if|if
condition|(
name|ISSUE_FIELD_KEY
operator|.
name|equals
argument_list|(
name|parameter
operator|.
name|path
argument_list|(
name|JSON_PARAMETER_NAME_FIELD
argument_list|)
operator|.
name|asText
argument_list|()
argument_list|)
condition|)
block|{
name|jirasInQueue
operator|.
name|add
argument_list|(
name|parameter
operator|.
name|path
argument_list|(
name|JSON_PARAMETER_VALUE_FIELD
argument_list|)
operator|.
name|asText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|jirasInQueue
return|;
block|}
specifier|private
specifier|static
name|String
name|httpGet
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpGet
name|request
init|=
operator|new
name|HttpGet
argument_list|(
name|url
argument_list|)
decl_stmt|;
try|try
block|{
name|CloseableHttpClient
name|httpClient
init|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|setSslcontext
argument_list|(
name|SSLContexts
operator|.
name|custom
argument_list|()
operator|.
name|useProtocol
argument_list|(
literal|"TLSv1.2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setRetryHandler
argument_list|(
operator|new
name|PTestClient
operator|.
name|PTestHttpRequestRetryHandler
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|request
operator|.
name|addHeader
argument_list|(
literal|"content-type"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|HttpResponse
name|httpResponse
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|StatusLine
name|statusLine
init|=
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|+
literal|" "
operator|+
name|statusLine
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|response
init|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|httpResponse
operator|.
name|getEntity
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
decl||
name|KeyManagementException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|request
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

