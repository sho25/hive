begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
operator|.
name|Host
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
operator|.
name|TestBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|ssh
operator|.
name|RSyncCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|ssh
operator|.
name|RSyncCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|ssh
operator|.
name|RSyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|ssh
operator|.
name|RemoteCommandResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|ssh
operator|.
name|SSHCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|ssh
operator|.
name|SSHCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|ssh
operator|.
name|SSHExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|ssh
operator|.
name|SSHResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_class
class|class
name|HostExecutor
block|{
specifier|private
specifier|final
name|Host
name|mHost
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Drone
argument_list|>
name|mDrones
decl_stmt|;
specifier|private
specifier|final
name|ListeningExecutorService
name|mExecutor
decl_stmt|;
specifier|private
specifier|final
name|SSHCommandExecutor
name|mSSHCommandExecutor
decl_stmt|;
specifier|private
specifier|final
name|RSyncCommandExecutor
name|mRSyncCommandExecutor
decl_stmt|;
specifier|private
specifier|final
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mTemplateDefaults
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|mLogger
decl_stmt|;
specifier|private
specifier|final
name|File
name|mLocalScratchDirectory
decl_stmt|;
specifier|private
specifier|final
name|File
name|mSuccessfulTestLogDir
decl_stmt|;
specifier|private
specifier|final
name|File
name|mFailedTestLogDir
decl_stmt|;
specifier|private
specifier|final
name|long
name|mNumPollSeconds
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|mShutdown
decl_stmt|;
specifier|private
name|int
name|numParallelBatchesProcessed
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|numIsolatedBatchesProcessed
init|=
literal|0
decl_stmt|;
name|HostExecutor
parameter_list|(
name|Host
name|host
parameter_list|,
name|String
name|privateKey
parameter_list|,
name|ListeningExecutorService
name|executor
parameter_list|,
name|SSHCommandExecutor
name|sshCommandExecutor
parameter_list|,
name|RSyncCommandExecutor
name|rsyncCommandExecutor
parameter_list|,
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateDefaults
parameter_list|,
name|File
name|scratchDir
parameter_list|,
name|File
name|succeededLogDir
parameter_list|,
name|File
name|failedLogDir
parameter_list|,
name|long
name|numPollSeconds
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|List
argument_list|<
name|Drone
argument_list|>
name|drones
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|String
index|[]
name|localDirs
init|=
name|host
operator|.
name|getLocalDirectories
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|host
operator|.
name|getThreads
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|drones
operator|.
name|add
argument_list|(
operator|new
name|Drone
argument_list|(
name|privateKey
argument_list|,
name|host
operator|.
name|getUser
argument_list|()
argument_list|,
name|host
operator|.
name|getName
argument_list|()
argument_list|,
name|index
argument_list|,
name|localDirs
index|[
name|index
operator|%
name|localDirs
operator|.
name|length
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mShutdown
operator|=
literal|false
expr_stmt|;
name|mHost
operator|=
name|host
expr_stmt|;
name|mDrones
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Drone
argument_list|>
argument_list|(
name|drones
argument_list|)
expr_stmt|;
name|mExecutor
operator|=
name|executor
expr_stmt|;
name|mSSHCommandExecutor
operator|=
name|sshCommandExecutor
expr_stmt|;
name|mRSyncCommandExecutor
operator|=
name|rsyncCommandExecutor
expr_stmt|;
name|mTemplateDefaults
operator|=
name|templateDefaults
expr_stmt|;
name|mLocalScratchDirectory
operator|=
name|scratchDir
expr_stmt|;
name|mSuccessfulTestLogDir
operator|=
name|succeededLogDir
expr_stmt|;
name|mFailedTestLogDir
operator|=
name|failedLogDir
expr_stmt|;
name|mNumPollSeconds
operator|=
name|numPollSeconds
expr_stmt|;
name|mLogger
operator|=
name|logger
expr_stmt|;
block|}
comment|/**    * @return failed tests    */
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|submitTests
parameter_list|(
specifier|final
name|BlockingQueue
argument_list|<
name|TestBatch
argument_list|>
name|parallelWorkQueue
parameter_list|,
specifier|final
name|BlockingQueue
argument_list|<
name|TestBatch
argument_list|>
name|isolatedWorkQueue
parameter_list|,
specifier|final
name|Set
argument_list|<
name|TestBatch
argument_list|>
name|failedTestResults
parameter_list|)
block|{
return|return
name|mExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|mLogger
operator|.
name|info
argument_list|(
literal|"Starting SubmitTests on host {}"
argument_list|,
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|executeTests
argument_list|(
name|parallelWorkQueue
argument_list|,
name|isolatedWorkQueue
argument_list|,
name|failedTestResults
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopwatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mLogger
operator|.
name|info
argument_list|(
literal|"Finishing submitTests on host: {}. ElapsedTime(ms)={},"
operator|+
literal|" NumParallelBatchesProcessed={}, NumIsolatedBatchesProcessed={}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getHost
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
block|,
name|numParallelBatchesProcessed
block|,
name|numIsolatedBatchesProcessed
block|}
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
name|int
name|remainingDrones
parameter_list|()
block|{
return|return
name|mDrones
operator|.
name|size
argument_list|()
return|;
block|}
name|boolean
name|isBad
parameter_list|()
block|{
return|return
name|mDrones
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|Host
name|getHost
parameter_list|()
block|{
return|return
name|mHost
return|;
block|}
name|void
name|shutdownNow
parameter_list|()
block|{
name|this
operator|.
name|mShutdown
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|isShutdown
parameter_list|()
block|{
return|return
name|mShutdown
return|;
block|}
comment|/**    * Executes parallel test until the parallel work queue is empty. Then    * executes the isolated tests on the host. During each phase if a    * AbortDroneException is thrown the drone is removed possibly    * leaving this host with zero functioning drones. If all drones    * are removed the host will be replaced before the next run.    */
specifier|private
name|void
name|executeTests
parameter_list|(
specifier|final
name|BlockingQueue
argument_list|<
name|TestBatch
argument_list|>
name|parallelWorkQueue
parameter_list|,
specifier|final
name|BlockingQueue
argument_list|<
name|TestBatch
argument_list|>
name|isolatedWorkQueue
parameter_list|,
specifier|final
name|Set
argument_list|<
name|TestBatch
argument_list|>
name|failedTestResults
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|mShutdown
condition|)
block|{
name|mLogger
operator|.
name|warn
argument_list|(
literal|"Shutting down host "
operator|+
name|mHost
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|mLogger
operator|.
name|info
argument_list|(
literal|"Starting parallel execution on "
operator|+
name|mHost
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
argument_list|>
name|droneResults
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Drone
name|drone
range|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|mDrones
argument_list|)
control|)
block|{
name|droneResults
operator|.
name|add
argument_list|(
name|mExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|TestBatch
name|batch
init|=
literal|null
decl_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createUnstarted
argument_list|()
decl_stmt|;
try|try
block|{
do|do
block|{
name|batch
operator|=
name|parallelWorkQueue
operator|.
name|poll
argument_list|(
name|mNumPollSeconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|mShutdown
condition|)
block|{
name|mLogger
operator|.
name|warn
argument_list|(
literal|"Shutting down host "
operator|+
name|mHost
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
name|numParallelBatchesProcessed
operator|++
expr_stmt|;
name|sw
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|executeTestBatch
argument_list|(
name|drone
argument_list|,
name|batch
argument_list|,
name|failedTestResults
argument_list|)
condition|)
block|{
name|failedTestResults
operator|.
name|add
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mLogger
operator|.
name|info
argument_list|(
literal|"Finished processing parallel batch [{}] on host {}. ElapsedTime(ms)={}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|batch
operator|.
name|getName
argument_list|()
block|,
name|getHost
argument_list|()
operator|.
name|toShortString
argument_list|()
block|,
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
operator|!
name|mShutdown
operator|&&
operator|!
name|parallelWorkQueue
operator|.
name|isEmpty
argument_list|()
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|AbortDroneException
name|ex
parameter_list|)
block|{
name|mDrones
operator|.
name|remove
argument_list|(
name|drone
argument_list|)
expr_stmt|;
comment|// return value not checked due to concurrent access
name|mLogger
operator|.
name|error
argument_list|(
literal|"Aborting drone during parallel execution"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|parallelWorkQueue
operator|.
name|add
argument_list|(
name|batch
argument_list|)
argument_list|,
literal|"Could not add batch to parallel queue "
operator|+
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mShutdown
condition|)
block|{
name|mLogger
operator|.
name|warn
argument_list|(
literal|"Shutting down host "
operator|+
name|mHost
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Futures
operator|.
name|allAsList
argument_list|(
name|droneResults
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|mLogger
operator|.
name|info
argument_list|(
literal|"Starting isolated execution on "
operator|+
name|mHost
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Drone
name|drone
range|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|mDrones
argument_list|)
control|)
block|{
name|TestBatch
name|batch
init|=
literal|null
decl_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createUnstarted
argument_list|()
decl_stmt|;
try|try
block|{
do|do
block|{
name|batch
operator|=
name|isolatedWorkQueue
operator|.
name|poll
argument_list|(
name|mNumPollSeconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
name|numIsolatedBatchesProcessed
operator|++
expr_stmt|;
name|sw
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|executeTestBatch
argument_list|(
name|drone
argument_list|,
name|batch
argument_list|,
name|failedTestResults
argument_list|)
condition|)
block|{
name|failedTestResults
operator|.
name|add
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mLogger
operator|.
name|info
argument_list|(
literal|"Finished processing isolated batch [{}] on host {}. ElapsedTime(ms)={}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|batch
operator|.
name|getName
argument_list|()
block|,
name|getHost
argument_list|()
operator|.
name|toShortString
argument_list|()
block|,
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
operator|!
name|mShutdown
operator|&&
operator|!
name|isolatedWorkQueue
operator|.
name|isEmpty
argument_list|()
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|AbortDroneException
name|ex
parameter_list|)
block|{
name|mDrones
operator|.
name|remove
argument_list|(
name|drone
argument_list|)
expr_stmt|;
comment|// return value not checked due to concurrent access
name|mLogger
operator|.
name|error
argument_list|(
literal|"Aborting drone during isolated execution"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
if|if
condition|(
name|batch
operator|!=
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|isolatedWorkQueue
operator|.
name|add
argument_list|(
name|batch
argument_list|)
argument_list|,
literal|"Could not add batch to isolated queue "
operator|+
name|batch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Executes the test batch on the drone in question. If the command    * exits with a status code of 255 throw an AbortDroneException.    */
specifier|private
name|boolean
name|executeTestBatch
parameter_list|(
name|Drone
name|drone
parameter_list|,
name|TestBatch
name|batch
parameter_list|,
name|Set
argument_list|<
name|TestBatch
argument_list|>
name|failedTestResults
parameter_list|)
throws|throws
name|IOException
throws|,
name|SSHExecutionException
throws|,
name|AbortDroneException
block|{
name|String
name|scriptName
init|=
literal|"hiveptest-"
operator|+
name|batch
operator|.
name|getName
argument_list|()
operator|+
literal|".sh"
decl_stmt|;
name|File
name|script
init|=
operator|new
name|File
argument_list|(
name|mLocalScratchDirectory
argument_list|,
name|scriptName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateVariables
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|mTemplateDefaults
argument_list|)
decl_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"instanceName"
argument_list|,
name|drone
operator|.
name|getInstanceName
argument_list|()
argument_list|)
expr_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"batchName"
argument_list|,
name|batch
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"testClass"
argument_list|,
name|batch
operator|.
name|getTestClass
argument_list|()
argument_list|)
expr_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"testArguments"
argument_list|,
name|batch
operator|.
name|getTestArguments
argument_list|()
argument_list|)
expr_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"localDir"
argument_list|,
name|drone
operator|.
name|getLocalDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"logDir"
argument_list|,
name|drone
operator|.
name|getLocalLogDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|batch
operator|.
name|getTestModuleRelativeDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"testModule"
argument_list|,
name|batch
operator|.
name|getTestModuleRelativeDir
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|command
init|=
name|Templates
operator|.
name|getTemplateResult
argument_list|(
literal|"bash $localDir/$instanceName/scratch/"
operator|+
name|script
operator|.
name|getName
argument_list|()
argument_list|,
name|templateVariables
argument_list|)
decl_stmt|;
name|Templates
operator|.
name|writeTemplateResult
argument_list|(
literal|"batch-exec.vm"
argument_list|,
name|script
argument_list|,
name|templateVariables
argument_list|)
expr_stmt|;
name|copyToDroneFromLocal
argument_list|(
name|drone
argument_list|,
name|script
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"$localDir/$instanceName/scratch/"
operator|+
name|scriptName
argument_list|)
expr_stmt|;
name|script
operator|.
name|delete
argument_list|()
expr_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|mLogger
operator|.
name|info
argument_list|(
name|drone
operator|+
literal|" executing "
operator|+
name|batch
operator|+
literal|" with "
operator|+
name|command
argument_list|)
expr_stmt|;
name|RemoteCommandResult
name|sshResult
init|=
operator|new
name|SSHCommand
argument_list|(
name|mSSHCommandExecutor
argument_list|,
name|drone
operator|.
name|getPrivateKey
argument_list|()
argument_list|,
name|drone
operator|.
name|getUser
argument_list|()
argument_list|,
name|drone
operator|.
name|getHost
argument_list|()
argument_list|,
name|drone
operator|.
name|getInstance
argument_list|()
argument_list|,
name|command
argument_list|,
literal|true
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mLogger
operator|.
name|info
argument_list|(
literal|"Completed executing tests for batch [{}] on host {}. ElapsedTime(ms)={}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|batch
operator|.
name|getName
argument_list|()
block|,
name|getHost
argument_list|()
operator|.
name|toShortString
argument_list|()
block|,
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|File
name|batchLogDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sshResult
operator|.
name|getExitCode
argument_list|()
operator|==
name|Constants
operator|.
name|EXIT_CODE_UNKNOWN
condition|)
block|{
throw|throw
operator|new
name|AbortDroneException
argument_list|(
literal|"Drone "
operator|+
name|drone
operator|.
name|toString
argument_list|()
operator|+
literal|" exited with "
operator|+
name|Constants
operator|.
name|EXIT_CODE_UNKNOWN
operator|+
literal|": "
operator|+
name|sshResult
argument_list|)
throw|;
block|}
if|if
condition|(
name|mShutdown
condition|)
block|{
name|mLogger
operator|.
name|warn
argument_list|(
literal|"Shutting down host "
operator|+
name|mHost
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|result
decl_stmt|;
if|if
condition|(
name|sshResult
operator|.
name|getExitCode
argument_list|()
operator|!=
literal|0
operator|||
name|sshResult
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
name|batchLogDir
operator|=
name|Dirs
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|mFailedTestLogDir
argument_list|,
name|batch
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|true
expr_stmt|;
name|batchLogDir
operator|=
name|Dirs
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|mSuccessfulTestLogDir
argument_list|,
name|batch
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|copyFromDroneToLocal
argument_list|(
name|drone
argument_list|,
name|batchLogDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|drone
operator|.
name|getLocalLogDirectory
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|File
name|logFile
init|=
operator|new
name|File
argument_list|(
name|batchLogDir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%s.txt"
argument_list|,
name|batch
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|logFile
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"result = '%s'\n"
argument_list|,
name|sshResult
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"output = '%s'\n"
argument_list|,
name|sshResult
operator|.
name|getOutput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sshResult
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sshResult
operator|.
name|getException
argument_list|()
operator|.
name|printStackTrace
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * RSync from a single drone. If the command exits with a status of not 0    * throw an AbortDroneException.    */
name|RSyncResult
name|copyToDroneFromLocal
parameter_list|(
name|Drone
name|drone
parameter_list|,
name|String
name|localFile
parameter_list|,
name|String
name|remoteFile
parameter_list|)
throws|throws
name|AbortDroneException
throws|,
name|SSHExecutionException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateVariables
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|mTemplateDefaults
argument_list|)
decl_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"instanceName"
argument_list|,
name|drone
operator|.
name|getInstanceName
argument_list|()
argument_list|)
expr_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"localDir"
argument_list|,
name|drone
operator|.
name|getLocalDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|RSyncResult
name|result
init|=
operator|new
name|RSyncCommand
argument_list|(
name|mRSyncCommandExecutor
argument_list|,
name|drone
operator|.
name|getPrivateKey
argument_list|()
argument_list|,
name|drone
operator|.
name|getUser
argument_list|()
argument_list|,
name|drone
operator|.
name|getHost
argument_list|()
argument_list|,
name|drone
operator|.
name|getInstance
argument_list|()
argument_list|,
name|Templates
operator|.
name|getTemplateResult
argument_list|(
name|localFile
argument_list|,
name|templateVariables
argument_list|)
argument_list|,
name|Templates
operator|.
name|getTemplateResult
argument_list|(
name|remoteFile
argument_list|,
name|templateVariables
argument_list|)
argument_list|,
name|RSyncCommand
operator|.
name|Type
operator|.
name|FROM_LOCAL
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getExitCode
argument_list|()
operator|!=
name|Constants
operator|.
name|EXIT_CODE_SUCCESS
condition|)
block|{
throw|throw
operator|new
name|AbortDroneException
argument_list|(
literal|"Drone "
operator|+
name|drone
operator|+
literal|" exited with "
operator|+
name|result
operator|.
name|getExitCode
argument_list|()
operator|+
literal|": "
operator|+
name|result
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|getException
argument_list|()
operator|!=
literal|null
operator|||
name|result
operator|.
name|getExitCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SSHExecutionException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * RSync file to all drones. If any drones exit with a status of not 0    * they will be removed from use possibly leaving this host with zero    * functioning drones.    */
name|ListenableFuture
argument_list|<
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|RemoteCommandResult
argument_list|>
argument_list|>
argument_list|>
name|rsyncFromLocalToRemoteInstances
parameter_list|(
specifier|final
name|String
name|localFile
parameter_list|,
specifier|final
name|String
name|remoteFile
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// the basic premise here is that we will rsync the directory to first working drone
comment|// then execute a local rsync on the node to the other drones. This keeps
comment|// us from executing tons of rsyncs on the master node conserving CPU
return|return
name|mExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|RemoteCommandResult
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|RemoteCommandResult
argument_list|>
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Drone
argument_list|>
name|drones
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|mDrones
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|RemoteCommandResult
argument_list|>
argument_list|>
name|results
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// local path doesn't depend on drone variables
name|String
name|resolvedLocalLocation
init|=
name|Files
operator|.
name|simplifyPath
argument_list|(
name|Templates
operator|.
name|getTemplateResult
argument_list|(
name|localFile
argument_list|,
name|mTemplateDefaults
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|remoteStagingLocation
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|Drone
name|drone
range|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|mDrones
argument_list|)
control|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|remoteStagingLocation
operator|==
literal|null
argument_list|,
literal|"Remote staging location must be null at the start of the loop"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateVariables
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|mTemplateDefaults
argument_list|)
decl_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"instanceName"
argument_list|,
name|drone
operator|.
name|getInstanceName
argument_list|()
argument_list|)
expr_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"localDir"
argument_list|,
name|drone
operator|.
name|getLocalDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|resolvedRemoteLocation
init|=
name|Files
operator|.
name|simplifyPath
argument_list|(
name|Templates
operator|.
name|getTemplateResult
argument_list|(
name|remoteFile
argument_list|,
name|templateVariables
argument_list|)
argument_list|)
decl_stmt|;
name|RSyncResult
name|result
init|=
operator|new
name|RSyncCommand
argument_list|(
name|mRSyncCommandExecutor
argument_list|,
name|drone
operator|.
name|getPrivateKey
argument_list|()
argument_list|,
name|drone
operator|.
name|getUser
argument_list|()
argument_list|,
name|drone
operator|.
name|getHost
argument_list|()
argument_list|,
name|drone
operator|.
name|getInstance
argument_list|()
argument_list|,
name|resolvedLocalLocation
argument_list|,
name|resolvedRemoteLocation
argument_list|,
name|RSyncCommand
operator|.
name|Type
operator|.
name|FROM_LOCAL
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getExitCode
argument_list|()
operator|==
name|Constants
operator|.
name|EXIT_CODE_SUCCESS
condition|)
block|{
name|remoteStagingLocation
operator|=
name|resolvedRemoteLocation
expr_stmt|;
name|drones
operator|.
name|remove
argument_list|(
name|drone
argument_list|)
expr_stmt|;
name|mLogger
operator|.
name|info
argument_list|(
literal|"Successfully staged "
operator|+
name|resolvedLocalLocation
operator|+
literal|" on "
operator|+
name|remoteStagingLocation
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|mDrones
operator|.
name|remove
argument_list|(
name|drone
argument_list|)
expr_stmt|;
name|mLogger
operator|.
name|error
argument_list|(
literal|"Aborting drone during rsync"
argument_list|,
operator|new
name|AbortDroneException
argument_list|(
literal|"Drone "
operator|+
name|drone
operator|+
literal|" exited with "
operator|+
name|result
operator|.
name|getExitCode
argument_list|()
operator|+
literal|": "
operator|+
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|remoteStagingLocation
operator|==
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|mDrones
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"If remote staging location is not set all drones should be bad"
argument_list|)
expr_stmt|;
name|mLogger
operator|.
name|warn
argument_list|(
literal|"Unable to stage directory on remote host, all drones must be bad"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|name
init|=
operator|(
operator|new
name|File
argument_list|(
name|resolvedLocalLocation
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|remoteStagingLocation
operator|=
name|Files
operator|.
name|simplifyPath
argument_list|(
name|remoteStagingLocation
operator|+
literal|"/"
operator|+
name|name
argument_list|)
expr_stmt|;
name|results
operator|.
name|addAll
argument_list|(
name|execInstances
argument_list|(
name|drones
argument_list|,
literal|"rsync -qaPe --delete --delete-during --force "
operator|+
name|remoteStagingLocation
operator|+
literal|" "
operator|+
name|remoteFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|RSyncResult
name|copyFromDroneToLocal
parameter_list|(
name|Drone
name|drone
parameter_list|,
name|String
name|localFile
parameter_list|,
name|String
name|remoteFile
parameter_list|)
throws|throws
name|SSHExecutionException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateVariables
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|mTemplateDefaults
argument_list|)
decl_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"instanceName"
argument_list|,
name|drone
operator|.
name|getInstanceName
argument_list|()
argument_list|)
expr_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"localDir"
argument_list|,
name|drone
operator|.
name|getLocalDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|RSyncResult
name|result
init|=
operator|new
name|RSyncCommand
argument_list|(
name|mRSyncCommandExecutor
argument_list|,
name|drone
operator|.
name|getPrivateKey
argument_list|()
argument_list|,
name|drone
operator|.
name|getUser
argument_list|()
argument_list|,
name|drone
operator|.
name|getHost
argument_list|()
argument_list|,
name|drone
operator|.
name|getInstance
argument_list|()
argument_list|,
name|Templates
operator|.
name|getTemplateResult
argument_list|(
name|localFile
argument_list|,
name|templateVariables
argument_list|)
argument_list|,
name|Templates
operator|.
name|getTemplateResult
argument_list|(
name|remoteFile
argument_list|,
name|templateVariables
argument_list|)
argument_list|,
name|RSyncCommand
operator|.
name|Type
operator|.
name|TO_LOCAL
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getException
argument_list|()
operator|!=
literal|null
operator|||
name|result
operator|.
name|getExitCode
argument_list|()
operator|!=
name|Constants
operator|.
name|EXIT_CODE_SUCCESS
condition|)
block|{
throw|throw
operator|new
name|SSHExecutionException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Execute command on at least one drone. The method will retry when the command    * exits with a status code of 255 until all drones have been utilized, possibly    * excluding the host from future use.    */
name|ListenableFuture
argument_list|<
name|SSHResult
argument_list|>
name|execIgnoreAllErrors
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|exec
argument_list|(
name|cmd
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Execute command on at least one drone. The method will retry when the command    * exits with a status code of 255 until all drones have been utilized, possibly    * excluding the host from future use.    */
name|ListenableFuture
argument_list|<
name|SSHResult
argument_list|>
name|exec
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|exec
argument_list|(
name|cmd
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|ListenableFuture
argument_list|<
name|SSHResult
argument_list|>
name|exec
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|,
specifier|final
name|boolean
name|reportErrors
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|mExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|SSHResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SSHResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
specifier|final
name|Drone
name|drone
range|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|mDrones
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateVariables
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|mTemplateDefaults
argument_list|)
decl_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"instanceName"
argument_list|,
name|drone
operator|.
name|getInstanceName
argument_list|()
argument_list|)
expr_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"localDir"
argument_list|,
name|drone
operator|.
name|getLocalDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|command
init|=
name|Templates
operator|.
name|getTemplateResult
argument_list|(
name|cmd
argument_list|,
name|templateVariables
argument_list|)
decl_stmt|;
name|SSHResult
name|result
init|=
operator|new
name|SSHCommand
argument_list|(
name|mSSHCommandExecutor
argument_list|,
name|drone
operator|.
name|getPrivateKey
argument_list|()
argument_list|,
name|drone
operator|.
name|getUser
argument_list|()
argument_list|,
name|drone
operator|.
name|getHost
argument_list|()
argument_list|,
name|drone
operator|.
name|getInstance
argument_list|()
argument_list|,
name|command
argument_list|,
name|reportErrors
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
if|if
condition|(
name|reportErrors
operator|&&
name|result
operator|.
name|getExitCode
argument_list|()
operator|==
name|Constants
operator|.
name|EXIT_CODE_UNKNOWN
condition|)
block|{
name|mDrones
operator|.
name|remove
argument_list|(
name|drone
argument_list|)
expr_stmt|;
comment|// return value not checked due to concurrent access
name|mLogger
operator|.
name|error
argument_list|(
literal|"Aborting drone during exec "
operator|+
name|command
argument_list|,
operator|new
name|AbortDroneException
argument_list|(
literal|"Drone "
operator|+
name|drone
operator|+
literal|" exited with "
operator|+
name|Constants
operator|.
name|EXIT_CODE_UNKNOWN
operator|+
literal|": "
operator|+
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|RemoteCommandResult
argument_list|>
argument_list|>
name|execInstances
parameter_list|(
specifier|final
name|String
name|cmd
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
return|return
name|execInstances
argument_list|(
name|mDrones
argument_list|,
name|cmd
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|RemoteCommandResult
argument_list|>
argument_list|>
name|execInstances
parameter_list|(
name|List
argument_list|<
name|Drone
argument_list|>
name|drones
parameter_list|,
specifier|final
name|String
name|cmd
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|RemoteCommandResult
argument_list|>
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Drone
name|drone
range|:
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|drones
argument_list|)
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|mExecutor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|RemoteCommandResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RemoteCommandResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateVariables
init|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|mTemplateDefaults
argument_list|)
decl_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"instanceName"
argument_list|,
name|drone
operator|.
name|getInstanceName
argument_list|()
argument_list|)
expr_stmt|;
name|templateVariables
operator|.
name|put
argument_list|(
literal|"localDir"
argument_list|,
name|drone
operator|.
name|getLocalDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|command
init|=
name|Templates
operator|.
name|getTemplateResult
argument_list|(
name|cmd
argument_list|,
name|templateVariables
argument_list|)
decl_stmt|;
name|SSHResult
name|result
init|=
operator|new
name|SSHCommand
argument_list|(
name|mSSHCommandExecutor
argument_list|,
name|drone
operator|.
name|getPrivateKey
argument_list|()
argument_list|,
name|drone
operator|.
name|getUser
argument_list|()
argument_list|,
name|drone
operator|.
name|getHost
argument_list|()
argument_list|,
name|drone
operator|.
name|getInstance
argument_list|()
argument_list|,
name|command
argument_list|,
literal|true
argument_list|)
operator|.
name|call
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getExitCode
argument_list|()
operator|!=
name|Constants
operator|.
name|EXIT_CODE_SUCCESS
condition|)
block|{
name|mDrones
operator|.
name|remove
argument_list|(
name|drone
argument_list|)
expr_stmt|;
comment|// return value not checked due to concurrent access
name|mLogger
operator|.
name|error
argument_list|(
literal|"Aborting drone during exec "
operator|+
name|command
argument_list|,
operator|new
name|AbortDroneException
argument_list|(
literal|"Drone "
operator|+
name|drone
operator|+
literal|" exited with "
operator|+
name|result
operator|.
name|getExitCode
argument_list|()
operator|+
literal|": "
operator|+
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

