begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * The context is a key-value store used to pass configuration information  * throughout the system.  */
end_comment

begin_class
specifier|public
class|class
name|Context
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
specifier|public
name|Context
parameter_list|()
block|{
name|parameters
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Context
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramters
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|putAll
argument_list|(
name|paramters
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets a copy of the backing map structure.    * @return immutable copy of backing map structure    */
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
synchronized|synchronized
init|(
name|parameters
init|)
block|{
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|parameters
argument_list|)
return|;
block|}
block|}
comment|/**    * Removes all of the mappings from this map.    */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|parameters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get properties which start with a prefix. When a property is returned,    * the prefix is removed the from name. For example, if this method is    * called with a parameter&quot;hdfs.&quot; and the context contains:    *<code>    * { hdfs.key = value, otherKey = otherValue }    *</code>    * this method will return a map containing:    *<code>    * { key = value}    *</code>    *    *<b>Note:</b> The<tt>prefix</tt> must end with a period character. If not    * this method will raise an IllegalArgumentException.    *    * @param prefix key prefix to find and remove from keys in resulting map    * @return map with keys which matched prefix with prefix removed from    *   keys in resulting map. If no keys are matched, the returned map is    *   empty    * @throws IllegalArguemntException if the given prefix does not end with    *   a period character.    */
specifier|public
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSubProperties
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
argument_list|,
literal|"The given prefix does not end with a period ("
operator|+
name|prefix
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|parameters
init|)
block|{
for|for
control|(
name|String
name|key
range|:
name|parameters
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|parameters
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ImmutableMap
operator|.
name|copyOf
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**    * Associates all of the given map's keys and values in the Context.    */
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|parameters
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
comment|/**    * Associates the specified value with the specified key in this context.    * If the context previously contained a mapping for the key, the old value    * is replaced by the specified value.    * @param key key with which the specified value is to be associated    * @param value to be associated with the specified key    */
specifier|public
name|void
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets value mapped to key, returning defaultValue if unmapped.    * @param key to be found    * @param defaultValue returned if key is unmapped    * @return value associated with key    */
specifier|public
name|Boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**    * Gets value mapped to key, returning null if unmapped.    *<p>    * Note that this method returns an object as opposed to a    * primitive. The configuration key requested may not be mapped    * to a value and by returning the primitive object wrapper we can    * return null. If the key does not exist the return value of    * this method is assigned directly to a primitive, a    * {@link NullPointerException} will be thrown.    *</p>    * @param key to be found    * @return value associated with key or null if unmapped    */
specifier|public
name|Boolean
name|getBoolean
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getBoolean
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Gets value mapped to key, returning defaultValue if unmapped.    * @param key to be found    * @param defaultValue returned if key is unmapped    * @return value associated with key    */
specifier|public
name|Integer
name|getInteger
parameter_list|(
name|String
name|key
parameter_list|,
name|Integer
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**    * Gets value mapped to key, returning null if unmapped.    *<p>    * Note that this method returns an object as opposed to a    * primitive. The configuration key requested may not be mapped    * to a value and by returning the primitive object wrapper we can    * return null. If the key does not exist the return value of    * this method is assigned directly to a primitive, a    * {@link NullPointerException} will be thrown.    *</p>    * @param key to be found    * @return value associated with key or null if unmapped    */
specifier|public
name|Integer
name|getInteger
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getInteger
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Gets value mapped to key, returning defaultValue if unmapped.    * @param key to be found    * @param defaultValue returned if key is unmapped    * @return value associated with key    */
specifier|public
name|Long
name|getLong
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**    * Gets value mapped to key, returning null if unmapped.    *<p>    * Note that this method returns an object as opposed to a    * primitive. The configuration key requested may not be mapped    * to a value and by returning the primitive object wrapper we can    * return null. If the key does not exist the return value of    * this method is assigned directly to a primitive, a    * {@link NullPointerException} will be thrown.    *</p>    * @param key to be found    * @return value associated with key or null if unmapped    */
specifier|public
name|Long
name|getLong
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getLong
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Gets value mapped to key, returning defaultValue if unmapped.    * @param key to be found    * @param defaultValue returned if key is unmapped    * @return value associated with key    */
specifier|public
name|Float
name|getFloat
parameter_list|(
name|String
name|key
parameter_list|,
name|Float
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**    * Gets value mapped to key, returning null if unmapped.    *<p>    * Note that this method returns an object as opposed to a    * primitive. The configuration key requested may not be mapped    * to a value and by returning the primitive object wrapper we can    * return null. If the key does not exist the return value of    * this method is assigned directly to a primitive, a    * {@link NullPointerException} will be thrown.    *</p>    * @param key to be found    * @return value associated with key or null if unmapped    */
specifier|public
name|Float
name|getFloat
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getFloat
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Gets value mapped to key, returning defaultValue if unmapped.    * @param key to be found    * @param defaultValue returned if key is unmapped    * @return value associated with key    */
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
comment|/**    * Gets value mapped to key, returning null if unmapped.    * @param key to be found    * @return value associated with key or null if unmapped    */
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|private
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|result
init|=
name|parameters
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
name|defaultValue
return|;
block|}
specifier|private
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{ parameters:"
operator|+
name|parameters
operator|+
literal|" }"
return|;
block|}
block|}
end_class

end_unit

