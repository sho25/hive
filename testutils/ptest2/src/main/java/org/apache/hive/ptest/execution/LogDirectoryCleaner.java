begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
specifier|public
class|class
name|LogDirectoryCleaner
extends|extends
name|Thread
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogDirectoryCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|File
name|mLogDir
decl_stmt|;
specifier|private
specifier|final
name|int
name|mMaxDirectoriesPerProfile
decl_stmt|;
specifier|public
name|LogDirectoryCleaner
parameter_list|(
name|File
name|logDir
parameter_list|,
name|int
name|maxDirectoriesPerProfile
parameter_list|)
block|{
name|mLogDir
operator|=
name|logDir
expr_stmt|;
name|mMaxDirectoriesPerProfile
operator|=
name|maxDirectoriesPerProfile
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|File
index|[]
name|logDirs
init|=
name|mLogDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|logDirs
operator|!=
literal|null
operator|&&
name|logDirs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ProfileLogs
argument_list|>
name|profiles
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|logDir
range|:
name|logDirs
control|)
block|{
name|String
name|name
init|=
name|logDir
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|String
name|profile
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"-"
argument_list|)
argument_list|)
decl_stmt|;
name|ProfileLogs
name|logs
init|=
name|profiles
operator|.
name|get
argument_list|(
name|profile
argument_list|)
decl_stmt|;
if|if
condition|(
name|logs
operator|==
literal|null
condition|)
block|{
name|logs
operator|=
operator|new
name|ProfileLogs
argument_list|(
name|profile
argument_list|)
expr_stmt|;
name|profiles
operator|.
name|put
argument_list|(
name|profile
argument_list|,
name|logs
argument_list|)
expr_stmt|;
block|}
name|logs
operator|.
name|dirs
operator|.
name|add
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|profile
range|:
name|profiles
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ProfileLogs
name|logs
init|=
name|profiles
operator|.
name|get
argument_list|(
name|profile
argument_list|)
decl_stmt|;
if|if
condition|(
name|logs
operator|.
name|dirs
operator|.
name|size
argument_list|()
operator|>
name|mMaxDirectoriesPerProfile
condition|)
block|{
name|File
name|oldest
init|=
name|logs
operator|.
name|getOldest
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting "
operator|+
name|oldest
operator|+
literal|" from "
operator|+
name|logs
operator|.
name|dirs
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|oldest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected error cleaning "
operator|+
name|mLogDir
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ProfileLogs
block|{
name|String
name|name
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dirs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ProfileLogs
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
name|File
name|getOldest
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|dirs
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Cannot be called unless dirs.size()>= 1"
argument_list|)
expr_stmt|;
name|File
name|eldestDir
init|=
literal|null
decl_stmt|;
name|long
name|eldestId
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|File
name|dir
range|:
name|dirs
control|)
block|{
try|try
block|{
name|long
name|id
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|<
name|eldestId
condition|)
block|{
name|eldestId
operator|=
name|id
expr_stmt|;
name|eldestDir
operator|=
name|dir
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error parsing "
operator|+
name|dir
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|eldestDir
argument_list|,
literal|"eldestDir"
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

