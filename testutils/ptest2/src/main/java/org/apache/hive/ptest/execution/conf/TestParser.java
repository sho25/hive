begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
class|class
name|TestParser
block|{
specifier|private
specifier|final
name|Context
name|context
decl_stmt|;
specifier|private
specifier|final
name|String
name|testCasePropertyName
decl_stmt|;
specifier|private
specifier|final
name|File
name|sourceDirectory
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
specifier|public
name|TestParser
parameter_list|(
name|Context
name|context
parameter_list|,
name|String
name|testCasePropertyName
parameter_list|,
name|File
name|sourceDirectory
parameter_list|,
name|Logger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|testCasePropertyName
operator|=
name|testCasePropertyName
expr_stmt|;
name|this
operator|.
name|sourceDirectory
operator|=
name|sourceDirectory
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|TestBatch
argument_list|>
name|parseTests
parameter_list|()
block|{
name|Splitter
name|splitter
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
decl_stmt|;
name|Context
name|unitContext
init|=
operator|new
name|Context
argument_list|(
name|context
operator|.
name|getSubProperties
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|join
argument_list|(
literal|"unitTests"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excluded
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|splitter
operator|.
name|split
argument_list|(
name|unitContext
operator|.
name|getString
argument_list|(
literal|"exclude"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|isolated
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|splitter
operator|.
name|split
argument_list|(
name|unitContext
operator|.
name|getString
argument_list|(
literal|"isolate"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|included
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|splitter
operator|.
name|split
argument_list|(
name|unitContext
operator|.
name|getString
argument_list|(
literal|"include"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|included
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|excluded
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Included and excluded mutally exclusive."
operator|+
literal|" Included = %s, excluded = %s"
argument_list|,
name|included
operator|.
name|toString
argument_list|()
argument_list|,
name|excluded
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|File
argument_list|>
name|unitTestsDirs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|unitTestDir
range|:
name|Splitter
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|checkNotNull
argument_list|(
name|unitContext
operator|.
name|getString
argument_list|(
literal|"directories"
argument_list|)
argument_list|,
literal|"directories"
argument_list|)
argument_list|)
control|)
block|{
name|File
name|unitTestParent
init|=
operator|new
name|File
argument_list|(
name|sourceDirectory
argument_list|,
name|unitTestDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|unitTestParent
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|unitTestsDirs
operator|.
name|add
argument_list|(
name|unitTestParent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Unit test directory "
operator|+
name|unitTestParent
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|TestBatch
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|QFileTestBatch
name|test
range|:
name|parseQFileTests
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|excluded
operator|.
name|add
argument_list|(
name|test
operator|.
name|getDriver
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|File
name|unitTestDir
range|:
name|unitTestsDirs
control|)
block|{
for|for
control|(
name|File
name|classFile
range|:
name|FileUtils
operator|.
name|listFiles
argument_list|(
name|unitTestDir
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"class"
block|}
argument_list|,
literal|true
argument_list|)
control|)
block|{
name|String
name|className
init|=
name|classFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"In  "
operator|+
name|unitTestDir
operator|+
literal|", found "
operator|+
name|className
argument_list|)
expr_stmt|;
if|if
condition|(
name|className
operator|.
name|startsWith
argument_list|(
literal|"Test"
argument_list|)
operator|&&
operator|!
name|className
operator|.
name|contains
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|String
name|testName
init|=
name|className
operator|.
name|replaceAll
argument_list|(
literal|"\\.class$"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|excluded
operator|.
name|contains
argument_list|(
name|testName
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Exlcuding unit test "
operator|+
name|testName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|included
operator|.
name|isEmpty
argument_list|()
operator|||
name|included
operator|.
name|contains
argument_list|(
name|testName
argument_list|)
condition|)
block|{
if|if
condition|(
name|isolated
operator|.
name|contains
argument_list|(
name|testName
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Executing isolated unit test "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|UnitTestBatch
argument_list|(
name|testCasePropertyName
argument_list|,
name|testName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Executing parallel unit test "
operator|+
name|testName
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|UnitTestBatch
argument_list|(
name|testCasePropertyName
argument_list|,
name|testName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|List
argument_list|<
name|QFileTestBatch
argument_list|>
name|parseQFileTests
parameter_list|()
block|{
name|Splitter
name|splitter
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QFileTestBatch
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|context
operator|.
name|getString
argument_list|(
literal|"qFileTests"
argument_list|,
literal|""
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
block|{
name|Context
name|testContext
init|=
operator|new
name|Context
argument_list|(
name|context
operator|.
name|getSubProperties
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|join
argument_list|(
literal|"qFileTest"
argument_list|,
name|alias
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|driver
init|=
name|checkNotNull
argument_list|(
name|testContext
operator|.
name|getString
argument_list|(
literal|"driver"
argument_list|)
argument_list|,
literal|"driver"
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// execute the driver locally?
name|boolean
name|isParallel
init|=
operator|!
name|testContext
operator|.
name|getBoolean
argument_list|(
literal|"isolateDriver"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|sourceDirectory
argument_list|,
name|checkNotNull
argument_list|(
name|testContext
operator|.
name|getString
argument_list|(
literal|"directory"
argument_list|)
argument_list|,
literal|"directory"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludedTests
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|excludedTestGroup
range|:
name|splitter
operator|.
name|split
argument_list|(
name|testContext
operator|.
name|getString
argument_list|(
literal|"exclude"
argument_list|,
literal|""
argument_list|)
argument_list|)
control|)
block|{
name|excludedTests
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testContext
operator|.
name|getString
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|join
argument_list|(
literal|"groups"
argument_list|,
name|excludedTestGroup
argument_list|)
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|isolatedTests
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ioslatedTestGroup
range|:
name|splitter
operator|.
name|split
argument_list|(
name|testContext
operator|.
name|getString
argument_list|(
literal|"isolate"
argument_list|,
literal|""
argument_list|)
argument_list|)
control|)
block|{
name|isolatedTests
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testContext
operator|.
name|getString
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|join
argument_list|(
literal|"groups"
argument_list|,
name|ioslatedTestGroup
argument_list|)
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|includedTests
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|includedTestGroup
range|:
name|splitter
operator|.
name|split
argument_list|(
name|testContext
operator|.
name|getString
argument_list|(
literal|"include"
argument_list|,
literal|""
argument_list|)
argument_list|)
control|)
block|{
name|includedTests
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testContext
operator|.
name|getString
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|join
argument_list|(
literal|"groups"
argument_list|,
name|includedTestGroup
argument_list|)
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|includedTests
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|excludedTests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Included and excluded mutally exclusive."
operator|+
literal|" Included = %s, excluded = %s"
argument_list|,
name|includedTests
operator|.
name|toString
argument_list|()
argument_list|,
name|excludedTests
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|result
operator|.
name|addAll
argument_list|(
name|createQFileTestBatches
argument_list|(
name|driver
argument_list|,
name|checkNotNull
argument_list|(
name|testContext
operator|.
name|getString
argument_list|(
literal|"queryFilesProperty"
argument_list|)
argument_list|,
literal|"queryFilesProperty"
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|,
name|directory
argument_list|,
name|testContext
operator|.
name|getInteger
argument_list|(
literal|"batchSize"
argument_list|,
literal|30
argument_list|)
argument_list|,
name|isParallel
argument_list|,
name|excludedTests
argument_list|,
name|includedTests
argument_list|,
name|isolatedTests
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|List
argument_list|<
name|QFileTestBatch
argument_list|>
name|createQFileTestBatches
parameter_list|(
name|String
name|driver
parameter_list|,
name|String
name|queryFilesProperty
parameter_list|,
name|File
name|directory
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|boolean
name|isParallel
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|excluded
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|included
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|isolated
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Create batches for "
operator|+
name|driver
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|qFileTestNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|test
range|:
name|checkNotNull
argument_list|(
name|directory
operator|.
name|listFiles
argument_list|()
argument_list|,
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
control|)
block|{
name|String
name|testName
init|=
name|test
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isFile
argument_list|()
operator|&&
name|testName
operator|.
name|endsWith
argument_list|(
literal|".q"
argument_list|)
operator|&&
operator|(
name|included
operator|.
name|isEmpty
argument_list|()
operator|||
name|included
operator|.
name|contains
argument_list|(
name|testName
argument_list|)
operator|)
condition|)
block|{
name|qFileTestNames
operator|.
name|add
argument_list|(
name|testName
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|QFileTestBatch
argument_list|>
name|testBatches
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|testBatch
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|test
range|:
name|qFileTestNames
control|)
block|{
if|if
condition|(
name|excluded
operator|.
name|contains
argument_list|(
name|test
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Exlcuding test "
operator|+
name|driver
operator|+
literal|" "
operator|+
name|test
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isolated
operator|.
name|contains
argument_list|(
name|test
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Executing isolated test "
operator|+
name|driver
operator|+
literal|" "
operator|+
name|test
argument_list|)
expr_stmt|;
name|testBatches
operator|.
name|add
argument_list|(
operator|new
name|QFileTestBatch
argument_list|(
name|testCasePropertyName
argument_list|,
name|driver
argument_list|,
name|queryFilesProperty
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|test
argument_list|)
argument_list|,
name|isParallel
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|testBatch
operator|.
name|size
argument_list|()
operator|>=
name|batchSize
condition|)
block|{
name|testBatches
operator|.
name|add
argument_list|(
operator|new
name|QFileTestBatch
argument_list|(
name|testCasePropertyName
argument_list|,
name|driver
argument_list|,
name|queryFilesProperty
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|testBatch
argument_list|)
argument_list|,
name|isParallel
argument_list|)
argument_list|)
expr_stmt|;
name|testBatch
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
name|testBatch
operator|.
name|add
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|testBatch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|testBatches
operator|.
name|add
argument_list|(
operator|new
name|QFileTestBatch
argument_list|(
name|testCasePropertyName
argument_list|,
name|driver
argument_list|,
name|queryFilesProperty
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|testBatch
argument_list|)
argument_list|,
name|isParallel
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|testBatches
return|;
block|}
specifier|public
name|Supplier
argument_list|<
name|List
argument_list|<
name|TestBatch
argument_list|>
argument_list|>
name|parse
parameter_list|()
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|List
argument_list|<
name|TestBatch
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TestBatch
argument_list|>
name|get
parameter_list|()
block|{
return|return
name|parseTests
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

