begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
class|class
name|JUnitReportParser
block|{
specifier|private
specifier|final
name|File
name|directory
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|executedTests
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|failedTests
decl_stmt|;
specifier|private
name|boolean
name|parsed
decl_stmt|;
specifier|public
name|JUnitReportParser
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|File
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|executedTests
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
name|failedTests
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|()
expr_stmt|;
name|parsed
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|File
argument_list|>
name|getFiles
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|result
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"TEST-"
argument_list|)
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getExecutedTests
parameter_list|()
block|{
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
name|parsed
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|executedTests
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getFailedTests
parameter_list|()
block|{
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
name|parsed
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|failedTests
return|;
block|}
specifier|public
name|int
name|getNumAttemptedTests
parameter_list|()
block|{
return|return
name|getExecutedTests
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|getFailedTests
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|void
name|parse
parameter_list|()
block|{
for|for
control|(
name|File
name|file
range|:
name|getFiles
argument_list|(
name|directory
argument_list|)
control|)
block|{
name|FileInputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SAXParser
name|saxParser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|saxParser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|stream
argument_list|)
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|boolean
name|failedOrErrored
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
if|if
condition|(
literal|"testcase"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|name
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"classname"
argument_list|)
expr_stmt|;
name|failedOrErrored
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
literal|"junit.framework.TestSuite"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|name
operator|+
literal|"."
operator|+
name|attributes
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"failure"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|||
literal|"error"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|failedOrErrored
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"skipped"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
block|{
if|if
condition|(
literal|"testcase"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|executedTests
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|failedOrErrored
condition|)
block|{
name|failedTests
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error parsing file "
operator|+
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error closing file "
operator|+
name|file
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

