begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|request
operator|.
name|TestListRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|request
operator|.
name|TestLogRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|request
operator|.
name|TestStartRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|request
operator|.
name|TestStopRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|TestListResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|TestLogResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|TestStartResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|TestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|TestStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|TestStopResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|PTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
operator|.
name|ExecutionContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|context
operator|.
name|ExecutionContextProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Controller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|validation
operator|.
name|BindingResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|RequestBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|RequestMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|RequestMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|ResponseBody
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Server interface of the ptest environment. Each request  * is converted from JSON and each response is returned in JSON.  */
end_comment

begin_class
annotation|@
name|Controller
annotation|@
name|RequestMapping
argument_list|(
name|value
operator|=
literal|"/api/v1"
argument_list|)
specifier|public
class|class
name|ExecutionController
block|{
specifier|private
specifier|static
specifier|final
name|long
name|MAX_READ_SIZE
init|=
literal|1024L
operator|*
literal|1024L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONF_PROPERTY
init|=
literal|"hive.ptest.execution.context.conf"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExecutionController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExecutionContextConfiguration
name|mExecutionContextConfiguration
decl_stmt|;
specifier|private
specifier|final
name|ExecutionContextProvider
name|mExecutionContextProvider
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Test
argument_list|>
name|mTests
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|Test
argument_list|>
name|mTestQueue
decl_stmt|;
specifier|private
specifier|final
name|TestExecutor
name|mTestExecutor
decl_stmt|;
specifier|private
specifier|final
name|File
name|mGlobalLogDir
decl_stmt|;
specifier|public
name|ExecutionController
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|executionContextConfigurationFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|CONF_PROPERTY
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|executionContextConfigurationFile
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|CONF_PROPERTY
operator|+
literal|" is required"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading configuration from file: "
operator|+
name|executionContextConfigurationFile
argument_list|)
expr_stmt|;
name|mExecutionContextConfiguration
operator|=
name|ExecutionContextConfiguration
operator|.
name|fromFile
argument_list|(
name|executionContextConfigurationFile
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ExecutionContext is [{}]"
argument_list|,
name|mExecutionContextConfiguration
argument_list|)
expr_stmt|;
name|mExecutionContextProvider
operator|=
name|mExecutionContextConfiguration
operator|.
name|getExecutionContextProvider
argument_list|()
expr_stmt|;
name|mTests
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Test
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Test
argument_list|>
name|entry
parameter_list|)
block|{
name|Test
name|testExecution
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|File
name|testOutputFile
init|=
name|testExecution
operator|.
name|getOutputFile
argument_list|()
decl_stmt|;
return|return
name|size
argument_list|()
operator|>
literal|30
operator|||
operator|(
name|testOutputFile
operator|!=
literal|null
operator|&&
operator|!
name|testOutputFile
operator|.
name|isFile
argument_list|()
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mTestQueue
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Test
argument_list|>
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|mGlobalLogDir
operator|=
operator|new
name|File
argument_list|(
name|mExecutionContextConfiguration
operator|.
name|getGlobalLogDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|mTestExecutor
operator|=
operator|new
name|TestExecutor
argument_list|(
name|mExecutionContextConfiguration
argument_list|,
name|mExecutionContextProvider
argument_list|,
name|mTestQueue
argument_list|,
operator|new
name|PTest
operator|.
name|Builder
argument_list|()
argument_list|)
expr_stmt|;
name|mTestExecutor
operator|.
name|setName
argument_list|(
literal|"TestExecutor"
argument_list|)
expr_stmt|;
name|mTestExecutor
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mTestExecutor
operator|.
name|start
argument_list|()
expr_stmt|;
name|ShutdownHookManager
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown hook called"
argument_list|)
expr_stmt|;
try|try
block|{
name|mTestExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error shutting down TestExecutor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|mExecutionContextProvider
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error shutting down ExecutionContextProvider"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|RequestMapping
argument_list|(
name|value
operator|=
literal|"/testStart"
argument_list|,
name|method
operator|=
name|RequestMethod
operator|.
name|POST
argument_list|)
specifier|public
annotation|@
name|ResponseBody
name|TestStartResponse
name|testStart
parameter_list|(
annotation|@
name|RequestBody
name|TestStartRequest
name|startRequest
parameter_list|,
name|BindingResult
name|result
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"startRequest "
operator|+
name|startRequest
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TestStartResponse
name|startResponse
init|=
name|doStartTest
argument_list|(
name|startRequest
argument_list|,
name|result
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"startResponse "
operator|+
name|startResponse
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|startResponse
return|;
block|}
specifier|private
name|TestStartResponse
name|doStartTest
parameter_list|(
name|TestStartRequest
name|startRequest
parameter_list|,
name|BindingResult
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|hasErrors
argument_list|()
operator|||
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|startRequest
operator|.
name|getProfile
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|startRequest
operator|.
name|getTestHandle
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|startRequest
operator|.
name|getProfile
argument_list|()
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
operator|new
name|TestStartResponse
argument_list|(
name|Status
operator|.
name|illegalArgument
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|assertTestHandleIsAvailable
argument_list|(
name|startRequest
operator|.
name|getTestHandle
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|TestStartResponse
argument_list|(
name|Status
operator|.
name|illegalArgument
argument_list|(
literal|"Test handle "
operator|+
name|startRequest
operator|.
name|getTestHandle
argument_list|()
operator|+
literal|" already used"
argument_list|)
argument_list|)
return|;
block|}
name|Test
name|test
init|=
operator|new
name|Test
argument_list|(
name|startRequest
argument_list|,
name|Status
operator|.
name|pending
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mTestQueue
operator|.
name|offer
argument_list|(
name|test
argument_list|)
condition|)
block|{
name|mTests
operator|.
name|put
argument_list|(
name|startRequest
operator|.
name|getTestHandle
argument_list|()
argument_list|,
name|test
argument_list|)
expr_stmt|;
return|return
operator|new
name|TestStartResponse
argument_list|(
name|Status
operator|.
name|ok
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|TestStartResponse
argument_list|(
name|Status
operator|.
name|queueFull
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|RequestMapping
argument_list|(
name|value
operator|=
literal|"/testStop"
argument_list|,
name|method
operator|=
name|RequestMethod
operator|.
name|POST
argument_list|)
specifier|public
annotation|@
name|ResponseBody
name|TestStopResponse
name|testStop
parameter_list|(
annotation|@
name|RequestBody
name|TestStopRequest
name|stopRequest
parameter_list|,
name|BindingResult
name|result
parameter_list|)
block|{
name|String
name|testHandle
init|=
name|stopRequest
operator|.
name|getTestHandle
argument_list|()
decl_stmt|;
name|Test
name|test
init|=
name|mTests
operator|.
name|get
argument_list|(
name|testHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|hasErrors
argument_list|()
operator|||
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|stopRequest
operator|.
name|getTestHandle
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|test
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TestStopResponse
argument_list|(
name|Status
operator|.
name|illegalArgument
argument_list|()
argument_list|)
return|;
block|}
name|test
operator|.
name|setStopRequested
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|TestStopResponse
argument_list|(
name|Status
operator|.
name|ok
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|RequestMapping
argument_list|(
name|value
operator|=
literal|"/testStatus"
argument_list|,
name|method
operator|=
name|RequestMethod
operator|.
name|POST
argument_list|)
specifier|public
annotation|@
name|ResponseBody
name|TestStatusResponse
name|testStatus
parameter_list|(
annotation|@
name|RequestBody
name|TestStopRequest
name|stopRequest
parameter_list|,
name|BindingResult
name|result
parameter_list|)
block|{
name|String
name|testHandle
init|=
name|stopRequest
operator|.
name|getTestHandle
argument_list|()
decl_stmt|;
name|Test
name|test
init|=
name|mTests
operator|.
name|get
argument_list|(
name|testHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|hasErrors
argument_list|()
operator|||
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|stopRequest
operator|.
name|getTestHandle
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|test
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TestStatusResponse
argument_list|(
name|Status
operator|.
name|illegalArgument
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|TestStatusResponse
argument_list|(
name|Status
operator|.
name|ok
argument_list|()
argument_list|,
name|test
operator|.
name|toTestStatus
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|RequestMapping
argument_list|(
name|value
operator|=
literal|"/testLog"
argument_list|,
name|method
operator|=
name|RequestMethod
operator|.
name|POST
argument_list|)
specifier|public
annotation|@
name|ResponseBody
name|TestLogResponse
name|testLog
parameter_list|(
annotation|@
name|RequestBody
name|TestLogRequest
name|logsRequest
parameter_list|,
name|BindingResult
name|result
parameter_list|)
block|{
name|String
name|testHandle
init|=
name|logsRequest
operator|.
name|getTestHandle
argument_list|()
decl_stmt|;
name|Test
name|testExecution
init|=
name|mTests
operator|.
name|get
argument_list|(
name|testHandle
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|hasErrors
argument_list|()
operator|||
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|logsRequest
operator|.
name|getTestHandle
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|testExecution
operator|==
literal|null
operator|||
name|logsRequest
operator|.
name|getLength
argument_list|()
operator|>
name|MAX_READ_SIZE
condition|)
block|{
return|return
operator|new
name|TestLogResponse
argument_list|(
name|Status
operator|.
name|illegalArgument
argument_list|()
argument_list|)
return|;
block|}
name|File
name|outputFile
init|=
name|testExecution
operator|.
name|getOutputFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputFile
operator|==
literal|null
operator|||
name|logsRequest
operator|.
name|getOffset
argument_list|()
operator|>
name|outputFile
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
operator|new
name|TestLogResponse
argument_list|(
name|Status
operator|.
name|illegalArgument
argument_list|()
argument_list|)
return|;
block|}
name|RandomAccessFile
name|fileHandle
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileHandle
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|outputFile
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|long
name|offset
init|=
name|logsRequest
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|fileHandle
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|int
name|readLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|offset
operator|<
name|fileHandle
operator|.
name|length
argument_list|()
condition|)
block|{
name|readLength
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|fileHandle
operator|.
name|length
argument_list|()
operator|-
name|offset
argument_list|,
name|logsRequest
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|readLength
index|]
decl_stmt|;
name|fileHandle
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|readLength
expr_stmt|;
return|return
operator|new
name|TestLogResponse
argument_list|(
name|Status
operator|.
name|ok
argument_list|()
argument_list|,
name|offset
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unexpected IO error reading "
operator|+
name|testExecution
operator|.
name|getOutputFile
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|TestLogResponse
argument_list|(
name|Status
operator|.
name|internalError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|fileHandle
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fileHandle
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing "
operator|+
name|outputFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|RequestMapping
argument_list|(
name|value
operator|=
literal|"/testList"
argument_list|,
name|method
operator|=
name|RequestMethod
operator|.
name|POST
argument_list|)
specifier|public
annotation|@
name|ResponseBody
name|TestListResponse
name|testList
parameter_list|(
annotation|@
name|RequestBody
name|TestListRequest
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|TestStatus
argument_list|>
name|entries
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|mTests
init|)
block|{
for|for
control|(
name|String
name|testHandle
range|:
name|mTests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Test
name|test
init|=
name|mTests
operator|.
name|get
argument_list|(
name|testHandle
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|test
operator|.
name|toTestStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TestListResponse
argument_list|(
name|Status
operator|.
name|ok
argument_list|()
argument_list|,
name|entries
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|boolean
name|assertTestHandleIsAvailable
parameter_list|(
specifier|final
name|String
name|testHandle
parameter_list|)
block|{
name|File
name|testOutputDir
init|=
operator|new
name|File
argument_list|(
name|mGlobalLogDir
argument_list|,
name|testHandle
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
operator|!
name|testOutputDir
operator|.
name|isFile
argument_list|()
argument_list|,
literal|"Output directory "
operator|+
name|testOutputDir
operator|+
literal|" is file"
argument_list|)
expr_stmt|;
return|return
name|testOutputDir
operator|.
name|mkdir
argument_list|()
return|;
block|}
block|}
end_class

end_unit

