begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|request
operator|.
name|TestListRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|request
operator|.
name|TestLogRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|request
operator|.
name|TestStartRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|request
operator|.
name|TestStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|GenericResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|TestListResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|TestLogResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|TestStartResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|TestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|response
operator|.
name|TestStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|UsernamePasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpRequestRetryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * Quick and dirty REST client for the PTest server. It's not expected the scope  * of this project will expand significantly therefore a simple REST client should suffice.  */
end_comment

begin_class
specifier|public
class|class
name|PTestClient
block|{
specifier|private
specifier|static
specifier|final
name|ImmutableMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|EndPointResponsePair
argument_list|>
name|REQUEST_TO_ENDPOINT
init|=
name|ImmutableMap
operator|.
expr|<
name|Class
argument_list|<
name|?
argument_list|>
condition|,
name|EndPointResponsePair
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|TestStartRequest
operator|.
name|class
argument_list|,
operator|new
name|EndPointResponsePair
argument_list|(
literal|"/testStart"
argument_list|,
name|TestStartResponse
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|TestStatusRequest
operator|.
name|class
argument_list|,
operator|new
name|EndPointResponsePair
argument_list|(
literal|"/testStatus"
argument_list|,
name|TestStatusResponse
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|TestLogRequest
operator|.
name|class
argument_list|,
operator|new
name|EndPointResponsePair
argument_list|(
literal|"/testLog"
argument_list|,
name|TestLogResponse
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|TestListRequest
operator|.
name|class
argument_list|,
operator|new
name|EndPointResponsePair
argument_list|(
literal|"/testList"
argument_list|,
name|TestListResponse
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HELP_LONG
init|=
literal|"help"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HELP_SHORT
init|=
literal|"h"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENDPOINT
init|=
literal|"endpoint"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOGS_ENDPOINT
init|=
literal|"logsEndpoint"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMMAND
init|=
literal|"command"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROFILE
init|=
literal|"profile"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PATCH
init|=
literal|"patch"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JIRA
init|=
literal|"jira"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT_DIR
init|=
literal|"outputDir"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_HANDLE
init|=
literal|"testHandle"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLEAR_LIBRARY_CACHE
init|=
literal|"clearLibraryCache"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JENKINS_QUEUE_URL
init|=
literal|"jenkinsQueueUrl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RETRIES
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
name|String
name|mApiEndPoint
decl_stmt|;
specifier|private
specifier|final
name|String
name|mLogsEndpoint
decl_stmt|;
specifier|private
specifier|final
name|ObjectMapper
name|mMapper
decl_stmt|;
specifier|private
specifier|final
name|DefaultHttpClient
name|mHttpClient
decl_stmt|;
specifier|private
specifier|final
name|String
name|testOutputDir
decl_stmt|;
specifier|public
name|PTestClient
parameter_list|(
name|String
name|logsEndpoint
parameter_list|,
name|String
name|apiEndPoint
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|testOutputDir
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|this
operator|.
name|testOutputDir
operator|=
name|testOutputDir
expr_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|testOutputDir
argument_list|)
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|logsEndpoint
argument_list|)
argument_list|,
literal|"logsEndPoint must be specified if "
operator|+
name|OUTPUT_DIR
operator|+
literal|" is specified"
argument_list|)
expr_stmt|;
if|if
condition|(
name|logsEndpoint
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|this
operator|.
name|mLogsEndpoint
operator|=
name|logsEndpoint
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|mLogsEndpoint
operator|=
name|logsEndpoint
operator|+
literal|"/"
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|mLogsEndpoint
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|apiEndPoint
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|this
operator|.
name|mApiEndPoint
operator|=
name|apiEndPoint
operator|+
literal|"api/v1"
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|mApiEndPoint
operator|=
name|apiEndPoint
operator|+
literal|"/api/v1"
expr_stmt|;
block|}
name|URL
name|apiURL
init|=
operator|new
name|URL
argument_list|(
name|mApiEndPoint
argument_list|)
decl_stmt|;
name|mMapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
name|mHttpClient
operator|=
operator|new
name|DefaultHttpClient
argument_list|()
expr_stmt|;
name|mHttpClient
operator|.
name|getCredentialsProvider
argument_list|()
operator|.
name|setCredentials
argument_list|(
operator|new
name|AuthScope
argument_list|(
name|apiURL
operator|.
name|getHost
argument_list|()
argument_list|,
name|apiURL
operator|.
name|getPort
argument_list|()
argument_list|,
name|AuthScope
operator|.
name|ANY_REALM
argument_list|)
argument_list|,
operator|new
name|UsernamePasswordCredentials
argument_list|(
literal|"hive"
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|testStart
parameter_list|(
name|String
name|profile
parameter_list|,
name|String
name|testHandle
parameter_list|,
name|String
name|jira
parameter_list|,
name|String
name|patch
parameter_list|,
name|boolean
name|clearLibraryCache
parameter_list|)
throws|throws
name|Exception
block|{
name|patch
operator|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|patch
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|patch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Resources
operator|.
name|toByteArray
argument_list|(
operator|new
name|URL
argument_list|(
name|patch
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Patch "
operator|+
name|patch
operator|+
literal|" was zero bytes"
argument_list|)
throw|;
block|}
block|}
name|TestStartRequest
name|startRequest
init|=
operator|new
name|TestStartRequest
argument_list|(
name|profile
argument_list|,
name|testHandle
argument_list|,
name|jira
argument_list|,
name|patch
argument_list|,
name|clearLibraryCache
argument_list|)
decl_stmt|;
name|post
argument_list|(
name|startRequest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
name|result
operator|=
name|testTailLog
argument_list|(
name|testHandle
argument_list|)
expr_stmt|;
if|if
condition|(
name|testOutputDir
operator|!=
literal|null
condition|)
block|{
name|downloadTestResults
argument_list|(
name|testHandle
argument_list|,
name|testOutputDir
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n\nLogs are located: "
operator|+
name|mLogsEndpoint
operator|+
name|testHandle
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|testList
parameter_list|()
throws|throws
name|Exception
block|{
name|TestListRequest
name|testListRequest
init|=
operator|new
name|TestListRequest
argument_list|()
decl_stmt|;
name|TestListResponse
name|testListResponse
init|=
name|post
argument_list|(
name|testListRequest
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|TestStatus
name|testStatus
range|:
name|testListResponse
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|testStatus
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|testTailLog
parameter_list|(
name|String
name|testHandle
parameter_list|)
throws|throws
name|Exception
block|{
name|testHandle
operator|=
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|testHandle
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|testHandle
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TestHandle is required"
argument_list|)
throw|;
block|}
name|TestStatusRequest
name|statusRequest
init|=
operator|new
name|TestStatusRequest
argument_list|(
name|testHandle
argument_list|)
decl_stmt|;
name|TestStatusResponse
name|statusResponse
decl_stmt|;
do|do
block|{
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|statusResponse
operator|=
name|post
argument_list|(
name|statusRequest
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|Status
operator|.
name|isPending
argument_list|(
name|statusResponse
operator|.
name|getTestStatus
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
do|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
do|do
block|{
name|long
name|length
init|=
name|statusResponse
operator|.
name|getTestStatus
argument_list|()
operator|.
name|getLogFileLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|>
name|offset
condition|)
block|{
name|offset
operator|=
name|printLogs
argument_list|(
name|testHandle
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|statusResponse
operator|=
name|post
argument_list|(
name|statusRequest
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|Status
operator|.
name|isInProgress
argument_list|(
name|statusResponse
operator|.
name|getTestStatus
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
do|;
while|while
condition|(
name|offset
operator|<
name|statusResponse
operator|.
name|getTestStatus
argument_list|()
operator|.
name|getLogFileLength
argument_list|()
condition|)
block|{
name|offset
operator|=
name|printLogs
argument_list|(
name|testHandle
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
name|Status
operator|.
name|assertOKOrFailed
argument_list|(
name|statusResponse
operator|.
name|getTestStatus
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Status
operator|.
name|isOK
argument_list|(
name|statusResponse
operator|.
name|getTestStatus
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|downloadTestResults
parameter_list|(
name|String
name|testHandle
parameter_list|,
name|String
name|testOutputDir
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpGet
name|request
init|=
operator|new
name|HttpGet
argument_list|(
name|mLogsEndpoint
operator|+
name|testHandle
operator|+
literal|"/test-results.tar.gz"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HttpResponse
name|httpResponse
init|=
name|mHttpClient
operator|.
name|execute
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|StatusLine
name|statusLine
init|=
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|+
literal|" "
operator|+
name|statusLine
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
throw|;
block|}
name|output
operator|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|testOutputDir
argument_list|,
literal|"test-results.tar.gz"
argument_list|)
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyLarge
argument_list|(
name|httpResponse
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|request
operator|.
name|abort
argument_list|()
expr_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|long
name|printLogs
parameter_list|(
name|String
name|testHandle
parameter_list|,
name|long
name|offset
parameter_list|)
throws|throws
name|Exception
block|{
name|TestLogRequest
name|logsRequest
init|=
operator|new
name|TestLogRequest
argument_list|(
name|testHandle
argument_list|,
name|offset
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|TestLogResponse
name|logsResponse
init|=
name|post
argument_list|(
name|logsRequest
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|logsResponse
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|logsResponse
operator|.
name|getOffset
argument_list|()
return|;
block|}
specifier|private
parameter_list|<
name|S
extends|extends
name|GenericResponse
parameter_list|>
name|S
name|post
parameter_list|(
name|Object
name|payload
parameter_list|,
name|boolean
name|agressiveRetry
parameter_list|)
throws|throws
name|Exception
block|{
name|EndPointResponsePair
name|endPointResponse
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|REQUEST_TO_ENDPOINT
operator|.
name|get
argument_list|(
name|payload
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|payload
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|HttpPost
name|request
init|=
operator|new
name|HttpPost
argument_list|(
name|mApiEndPoint
operator|+
name|endPointResponse
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|payloadString
init|=
name|mMapper
operator|.
name|writeValueAsString
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|StringEntity
name|params
init|=
operator|new
name|StringEntity
argument_list|(
name|payloadString
argument_list|)
decl_stmt|;
name|request
operator|.
name|addHeader
argument_list|(
literal|"content-type"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEntity
argument_list|(
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|agressiveRetry
condition|)
block|{
name|mHttpClient
operator|.
name|setHttpRequestRetryHandler
argument_list|(
operator|new
name|PTestHttpRequestRetryHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HttpResponse
name|httpResponse
init|=
name|mHttpClient
operator|.
name|execute
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|StatusLine
name|statusLine
init|=
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
operator|+
literal|" "
operator|+
name|statusLine
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|response
init|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|httpResponse
operator|.
name|getEntity
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|S
name|result
init|=
operator|(
name|S
operator|)
name|endPointResponse
operator|.
name|getResponseClass
argument_list|()
operator|.
name|cast
argument_list|(
name|mMapper
operator|.
name|readValue
argument_list|(
name|response
argument_list|,
name|endPointResponse
operator|.
name|getResponseClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Status
operator|.
name|assertOK
argument_list|(
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"DEBUG_PTEST_CLIENT"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"payload "
operator|+
name|payloadString
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|TestLogResponse
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"response "
operator|+
operator|(
operator|(
name|TestLogResponse
operator|)
name|result
operator|)
operator|.
name|getOffset
argument_list|()
operator|+
literal|" "
operator|+
operator|(
operator|(
name|TestLogResponse
operator|)
name|result
operator|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"response "
operator|+
name|response
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|request
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PTestHttpRequestRetryHandler
implements|implements
name|HttpRequestRetryHandler
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|retryRequest
parameter_list|(
name|IOException
name|exception
parameter_list|,
name|int
name|executionCount
parameter_list|,
name|HttpContext
name|context
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"LOCAL ERROR: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|executionCount
operator|>
name|MAX_RETRIES
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|30L
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|EndPointResponsePair
block|{
specifier|final
name|String
name|endpoint
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|GenericResponse
argument_list|>
name|responseClass
decl_stmt|;
specifier|public
name|EndPointResponsePair
parameter_list|(
name|String
name|endpoint
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|GenericResponse
argument_list|>
name|responseClass
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|responseClass
operator|=
name|responseClass
expr_stmt|;
block|}
specifier|public
name|String
name|getEndpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|GenericResponse
argument_list|>
name|getResponseClass
parameter_list|()
block|{
return|return
name|responseClass
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertRequired
parameter_list|(
name|CommandLine
name|commandLine
parameter_list|,
name|String
index|[]
name|requiredOptions
parameter_list|)
block|{
for|for
control|(
name|String
name|requiredOption
range|:
name|requiredOptions
control|)
block|{
if|if
condition|(
operator|!
name|commandLine
operator|.
name|hasOption
argument_list|(
name|requiredOption
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|requiredOption
operator|+
literal|" is required"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
comment|//TODO This line can be removed once precommit jenkins jobs move to Java 8
name|System
operator|.
name|setProperty
argument_list|(
literal|"https.protocols"
argument_list|,
literal|"TLSv1,TLSv1.1,TLSv1.2"
argument_list|)
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|HELP_SHORT
argument_list|,
name|HELP_LONG
argument_list|,
literal|false
argument_list|,
literal|"Display help text and exit"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|ENDPOINT
argument_list|,
literal|true
argument_list|,
literal|"Service to use. E.g. http://localhost/ (Required)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|COMMAND
argument_list|,
literal|true
argument_list|,
literal|"Command: [testStart, testStop, testTailLog, testList] (Required)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|PASSWORD
argument_list|,
literal|true
argument_list|,
literal|"Password for service. Any committer should know this otherwise as private@. (Required)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|PROFILE
argument_list|,
literal|true
argument_list|,
literal|"Test profile such as trunk-mr1 or trunk-mr2 (Required for testStart)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|PATCH
argument_list|,
literal|true
argument_list|,
literal|"URI to patch, must start with http(s):// (Optional for testStart)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|JIRA
argument_list|,
literal|true
argument_list|,
literal|"JIRA to post the results to e.g.: HIVE-XXXX"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|TEST_HANDLE
argument_list|,
literal|true
argument_list|,
literal|"Server supplied test handle. (Required for testStop and testTailLog)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|OUTPUT_DIR
argument_list|,
literal|true
argument_list|,
literal|"Directory to download and save test-results.tar.gz to. (Optional for testStart)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|CLEAR_LIBRARY_CACHE
argument_list|,
literal|false
argument_list|,
literal|"Before starting the test, delete the ivy and maven directories (Optional for testStart)"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|LOGS_ENDPOINT
argument_list|,
literal|true
argument_list|,
literal|"URL to get the logs"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|JENKINS_QUEUE_URL
argument_list|,
literal|true
argument_list|,
literal|"URL for quering Jenkins job queue"
argument_list|)
expr_stmt|;
name|CommandLine
name|commandLine
init|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|HELP_SHORT
argument_list|)
condition|)
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
name|PTestClient
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|options
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertRequired
argument_list|(
name|commandLine
argument_list|,
operator|new
name|String
index|[]
block|{
name|COMMAND
block|,
name|PASSWORD
block|,
name|ENDPOINT
block|}
argument_list|)
expr_stmt|;
name|PTestClient
name|client
init|=
operator|new
name|PTestClient
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|LOGS_ENDPOINT
argument_list|)
argument_list|,
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|ENDPOINT
argument_list|)
argument_list|,
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|PASSWORD
argument_list|)
argument_list|,
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|OUTPUT_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|command
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|COMMAND
argument_list|)
decl_stmt|;
name|boolean
name|result
decl_stmt|;
if|if
condition|(
literal|"testStart"
operator|.
name|equalsIgnoreCase
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|assertRequired
argument_list|(
name|commandLine
argument_list|,
operator|new
name|String
index|[]
block|{
name|PROFILE
block|,
name|TEST_HANDLE
block|}
argument_list|)
expr_stmt|;
name|boolean
name|jiraAlreadyInQueue
init|=
name|JenkinsQueueUtil
operator|.
name|isJiraAlreadyInQueue
argument_list|(
name|commandLine
argument_list|)
decl_stmt|;
if|if
condition|(
name|jiraAlreadyInQueue
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipping ptest execution, as "
operator|+
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|JIRA
argument_list|)
operator|+
literal|" is scheduled in "
operator|+
literal|"queue in "
operator|+
literal|"the future too."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|client
operator|.
name|testStart
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|PROFILE
argument_list|)
argument_list|,
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|TEST_HANDLE
argument_list|)
argument_list|,
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|JIRA
argument_list|)
argument_list|,
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|PATCH
argument_list|)
argument_list|,
name|commandLine
operator|.
name|hasOption
argument_list|(
name|CLEAR_LIBRARY_CACHE
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"testTailLog"
operator|.
name|equalsIgnoreCase
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|result
operator|=
name|client
operator|.
name|testTailLog
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|TEST_HANDLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"testList"
operator|.
name|equalsIgnoreCase
argument_list|(
name|command
argument_list|)
condition|)
block|{
name|result
operator|=
name|client
operator|.
name|testList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown "
operator|+
name|COMMAND
operator|+
literal|": "
operator|+
name|command
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

