begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
class|class
name|Host
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
specifier|private
specifier|final
name|int
name|threads
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|localDirectories
decl_stmt|;
specifier|public
name|Host
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|String
index|[]
name|localDirectories
parameter_list|,
name|Integer
name|threads
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|name
argument_list|,
literal|"hostname"
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|user
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|this
operator|.
name|threads
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|threads
argument_list|,
literal|"threads"
argument_list|)
expr_stmt|;
name|this
operator|.
name|localDirectories
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|localDirectories
argument_list|,
literal|"localDirectories"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
specifier|public
name|int
name|getThreads
parameter_list|()
block|{
return|return
name|threads
return|;
block|}
specifier|public
name|String
index|[]
name|getLocalDirectories
parameter_list|()
block|{
return|return
name|localDirectories
return|;
block|}
specifier|public
name|String
name|toShortString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Host [name="
operator|+
name|name
operator|+
literal|", user="
operator|+
name|user
operator|+
literal|", threads="
operator|+
name|threads
operator|+
literal|", localDirectories="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|localDirectories
argument_list|)
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|Arrays
operator|.
name|hashCode
argument_list|(
name|localDirectories
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|name
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|threads
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|user
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|user
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Host
name|other
init|=
operator|(
name|Host
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|localDirectories
argument_list|,
name|other
operator|.
name|localDirectories
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|name
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|threads
operator|!=
name|other
operator|.
name|threads
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|user
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|user
operator|.
name|equals
argument_list|(
name|other
operator|.
name|user
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

