begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|context
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|MockSSHCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
operator|.
name|Host
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|compute
operator|.
name|RunNodesException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|compute
operator|.
name|domain
operator|.
name|Hardware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|compute
operator|.
name|domain
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|compute
operator|.
name|domain
operator|.
name|NodeMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|compute
operator|.
name|domain
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|domain
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
class|class
name|TestCloudExecutionContextProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCloudExecutionContextProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PRIVATE_KEY
init|=
literal|"mykey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"user"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SLAVE_DIRS
init|=
block|{
literal|"/tmp/hive-ptest"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NODES
init|=
literal|2
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|baseDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|String
name|dataDir
decl_stmt|;
specifier|private
name|CloudComputeService
name|cloudComputeService
decl_stmt|;
specifier|private
name|MockSSHCommandExecutor
name|sshCommandExecutor
decl_stmt|;
specifier|private
name|String
name|workingDir
decl_stmt|;
specifier|private
name|Template
name|template
decl_stmt|;
specifier|private
name|NodeMetadata
name|node1
decl_stmt|;
specifier|private
name|NodeMetadata
name|node2
decl_stmt|;
specifier|private
name|NodeMetadata
name|node3
decl_stmt|;
specifier|private
name|RunNodesException
name|runNodesException
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|dataDir
operator|=
name|baseDir
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|workingDir
operator|=
name|baseDir
operator|.
name|newFolder
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|cloudComputeService
operator|=
name|mock
argument_list|(
name|CloudComputeService
operator|.
name|class
argument_list|)
expr_stmt|;
name|sshCommandExecutor
operator|=
operator|new
name|MockSSHCommandExecutor
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
name|node1
operator|=
name|mock
argument_list|(
name|NodeMetadata
operator|.
name|class
argument_list|)
expr_stmt|;
name|node2
operator|=
name|mock
argument_list|(
name|NodeMetadata
operator|.
name|class
argument_list|)
expr_stmt|;
name|node3
operator|=
name|mock
argument_list|(
name|NodeMetadata
operator|.
name|class
argument_list|)
expr_stmt|;
name|template
operator|=
name|mock
argument_list|(
name|Template
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|template
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|Location
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|template
operator|.
name|getImage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|Image
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|template
operator|.
name|getHardware
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|Hardware
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node1
operator|.
name|getHostname
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node2
operator|.
name|getHostname
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node3
operator|.
name|getHostname
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"node3"
argument_list|)
expr_stmt|;
name|runNodesException
operator|=
operator|new
name|RunNodesException
argument_list|(
literal|""
argument_list|,
literal|2
argument_list|,
name|template
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|node1
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Exception
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|node2
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"For testing"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
block|{    }
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testRetrySucceeds
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|cloudComputeService
operator|.
name|createNodes
argument_list|(
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
operator|new
name|Answer
argument_list|<
name|Set
argument_list|<
name|NodeMetadata
argument_list|>
argument_list|>
argument_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|NodeMetadata
argument_list|>
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|count
operator|++
operator|==
literal|0
condition|)
block|{
throw|throw
name|runNodesException
throw|;
block|}
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|node3
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CloudExecutionContextProvider
name|provider
init|=
operator|new
name|CloudExecutionContextProvider
argument_list|(
name|dataDir
argument_list|,
name|NUM_NODES
argument_list|,
name|cloudComputeService
argument_list|,
name|sshCommandExecutor
argument_list|,
name|workingDir
argument_list|,
name|PRIVATE_KEY
argument_list|,
name|USER
argument_list|,
name|SLAVE_DIRS
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ExecutionContext
name|executionContext
init|=
name|provider
operator|.
name|createExecutionContext
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hosts
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Host
name|host
range|:
name|executionContext
operator|.
name|getHosts
argument_list|()
control|)
block|{
name|hosts
operator|.
name|add
argument_list|(
name|host
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"node1"
argument_list|,
literal|"node3"
argument_list|)
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
argument_list|(
name|expected
operator|=
name|CreateHostsFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testRetryFails
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|cloudComputeService
operator|.
name|createNodes
argument_list|(
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|runNodesException
argument_list|)
expr_stmt|;
name|CloudExecutionContextProvider
name|provider
init|=
operator|new
name|CloudExecutionContextProvider
argument_list|(
name|dataDir
argument_list|,
name|NUM_NODES
argument_list|,
name|cloudComputeService
argument_list|,
name|sshCommandExecutor
argument_list|,
name|workingDir
argument_list|,
name|PRIVATE_KEY
argument_list|,
name|USER
argument_list|,
name|SLAVE_DIRS
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|provider
operator|.
name|createExecutionContext
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

