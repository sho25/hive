begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|LogDirectoryCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestLogDirectoryCleaner
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|baseDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testClean
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dir
init|=
name|create
argument_list|(
literal|"a-0"
argument_list|,
literal|"a-1"
argument_list|,
literal|"a-2"
argument_list|,
literal|"malformed"
argument_list|,
literal|"b-0"
argument_list|,
literal|"c-0"
argument_list|,
literal|"c-5"
argument_list|)
decl_stmt|;
name|LogDirectoryCleaner
name|cleaner
init|=
operator|new
name|LogDirectoryCleaner
argument_list|(
name|dir
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cleaner
operator|.
name|run
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|remaining
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|dir
operator|.
name|list
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a-1"
argument_list|,
literal|"a-2"
argument_list|,
literal|"b-0"
argument_list|,
literal|"c-5"
argument_list|,
literal|"malformed"
argument_list|)
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|create
parameter_list|(
name|String
modifier|...
name|names
parameter_list|)
block|{
name|File
name|root
init|=
name|baseDir
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|root
operator|.
name|isDirectory
argument_list|()
argument_list|,
name|root
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|dir
operator|.
name|mkdirs
argument_list|()
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|root
return|;
block|}
block|}
end_class

end_unit

