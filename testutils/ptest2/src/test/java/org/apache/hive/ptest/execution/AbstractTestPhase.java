begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|api
operator|.
name|server
operator|.
name|TestLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
operator|.
name|Host
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|context
operator|.
name|ExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTestPhase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractTestPhase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|LOCAL_DIR
init|=
literal|"/some/local/dir"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|WORKING_DIR
init|=
literal|"/some/working/dir"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PRIVATE_KEY
init|=
literal|"some.private.key"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"someuser"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|HOST
init|=
literal|"somehost"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|INSTANCE
init|=
literal|13
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|INSTANCE_NAME
init|=
name|HOST
operator|+
literal|"-"
operator|+
name|USER
operator|+
literal|"-"
operator|+
name|INSTANCE
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|INSTANCE_DIR
init|=
name|LOCAL_DIR
operator|+
literal|"/"
operator|+
name|INSTANCE_NAME
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|BRANCH
init|=
literal|"branch"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|REPOSITORY
init|=
literal|"repository"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|REPOSITORY_NAME
init|=
literal|"repositoryName"
decl_stmt|;
specifier|protected
name|Host
name|host
decl_stmt|;
specifier|protected
name|File
name|baseDir
decl_stmt|;
specifier|protected
name|File
name|scratchDir
decl_stmt|;
specifier|protected
name|File
name|logDir
decl_stmt|;
specifier|protected
name|File
name|succeededLogDir
decl_stmt|;
specifier|protected
name|File
name|failedLogDir
decl_stmt|;
specifier|protected
name|ListeningExecutorService
name|executor
decl_stmt|;
specifier|protected
name|MockLocalCommandFactory
name|localCommandFactory
decl_stmt|;
specifier|protected
name|LocalCommand
name|localCommand
decl_stmt|;
specifier|protected
name|MockSSHCommandExecutor
name|sshCommandExecutor
decl_stmt|;
specifier|protected
name|MockRSyncCommandExecutor
name|rsyncCommandExecutor
decl_stmt|;
specifier|protected
name|ImmutableMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateDefaults
decl_stmt|;
specifier|protected
name|ImmutableList
argument_list|<
name|HostExecutor
argument_list|>
name|hostExecutors
decl_stmt|;
specifier|protected
name|HostExecutor
name|hostExecutor
decl_stmt|;
specifier|protected
name|ExecutionContext
name|executionContext
decl_stmt|;
specifier|protected
name|HostExecutorBuilder
name|hostExecutorBuilder
decl_stmt|;
specifier|protected
name|Logger
name|logger
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|baseDir
operator|=
name|createBaseDir
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|logDir
operator|=
name|Dirs
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"logs"
argument_list|)
argument_list|)
expr_stmt|;
name|scratchDir
operator|=
name|Dirs
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"scratch"
argument_list|)
argument_list|)
expr_stmt|;
name|succeededLogDir
operator|=
name|Dirs
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
literal|"succeeded"
argument_list|)
argument_list|)
expr_stmt|;
name|failedLogDir
operator|=
name|Dirs
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|logDir
argument_list|,
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|executionContext
operator|=
name|mock
argument_list|(
name|ExecutionContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|hostExecutorBuilder
operator|=
name|mock
argument_list|(
name|HostExecutorBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
name|localCommandFactory
operator|=
operator|new
name|MockLocalCommandFactory
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
name|localCommand
operator|=
name|mock
argument_list|(
name|LocalCommand
operator|.
name|class
argument_list|)
expr_stmt|;
name|localCommandFactory
operator|.
name|setInstance
argument_list|(
name|localCommand
argument_list|)
expr_stmt|;
name|sshCommandExecutor
operator|=
name|spy
argument_list|(
operator|new
name|MockSSHCommandExecutor
argument_list|(
name|LOG
argument_list|)
argument_list|)
expr_stmt|;
name|rsyncCommandExecutor
operator|=
name|spy
argument_list|(
operator|new
name|MockRSyncCommandExecutor
argument_list|(
name|LOG
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|=
operator|new
name|TestLogger
argument_list|(
name|System
operator|.
name|err
argument_list|,
name|TestLogger
operator|.
name|LEVEL
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|templateDefaults
operator|=
name|ImmutableMap
operator|.
expr|<
name|String
operator|,
name|String
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"localDir"
argument_list|,
name|LOCAL_DIR
argument_list|)
operator|.
name|put
argument_list|(
literal|"workingDir"
argument_list|,
name|WORKING_DIR
argument_list|)
operator|.
name|put
argument_list|(
literal|"instanceName"
argument_list|,
name|INSTANCE_NAME
argument_list|)
operator|.
name|put
argument_list|(
literal|"branch"
argument_list|,
name|BRANCH
argument_list|)
operator|.
name|put
argument_list|(
literal|"logDir"
argument_list|,
name|logDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"repository"
argument_list|,
name|REPOSITORY
argument_list|)
operator|.
name|put
argument_list|(
literal|"repositoryName"
argument_list|,
name|REPOSITORY_NAME
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|host
operator|=
operator|new
name|Host
argument_list|(
name|HOST
argument_list|,
name|USER
argument_list|,
operator|new
name|String
index|[]
block|{
name|LOCAL_DIR
block|}
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createHostExecutor
parameter_list|()
block|{
name|hostExecutor
operator|=
operator|new
name|HostExecutor
argument_list|(
name|host
argument_list|,
name|PRIVATE_KEY
argument_list|,
name|executor
argument_list|,
name|sshCommandExecutor
argument_list|,
name|rsyncCommandExecutor
argument_list|,
name|templateDefaults
argument_list|,
name|scratchDir
argument_list|,
name|succeededLogDir
argument_list|,
name|failedLogDir
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|hostExecutors
operator|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|hostExecutor
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|isOSX
parameter_list|()
block|{
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
return|return
name|osName
operator|.
name|contains
argument_list|(
literal|"OS X"
argument_list|)
return|;
block|}
specifier|static
name|File
name|createBaseDir
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|baseDir
decl_stmt|;
if|if
condition|(
name|isOSX
argument_list|()
condition|)
block|{
comment|// else osx gives ugly temp path which screws up approvals
name|baseDir
operator|=
operator|new
name|File
argument_list|(
literal|"/tmp/hive-ptest-units"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseDir
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|,
literal|"hive-ptest-units"
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|Dirs
operator|.
name|create
argument_list|(
name|baseDir
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getExecutedCommands
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|returnNotNull
argument_list|(
name|sshCommandExecutor
operator|.
name|getCommands
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|returnNotNull
argument_list|(
name|localCommandFactory
operator|.
name|getCommands
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|returnNotNull
argument_list|(
name|rsyncCommandExecutor
operator|.
name|getCommands
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|static
parameter_list|<
name|V
parameter_list|>
name|V
name|returnNotNull
parameter_list|(
name|V
name|value
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

