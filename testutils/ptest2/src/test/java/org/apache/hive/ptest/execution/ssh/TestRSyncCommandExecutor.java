begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|ssh
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|LocalCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|MockLocalCommandFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestRSyncCommandExecutor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRSyncCommandExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MockLocalCommandFactory
name|localCommandFactory
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|localCommandFactory
operator|=
operator|new
name|MockLocalCommandFactory
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdownBeforeWaitFor
parameter_list|()
throws|throws
name|Exception
block|{
name|LocalCommand
name|localCommand
init|=
name|mock
argument_list|(
name|LocalCommand
operator|.
name|class
argument_list|)
decl_stmt|;
name|localCommandFactory
operator|.
name|setInstance
argument_list|(
name|localCommand
argument_list|)
expr_stmt|;
name|RSyncCommandExecutor
name|executor
init|=
operator|new
name|RSyncCommandExecutor
argument_list|(
name|LOG
argument_list|,
name|localCommandFactory
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|RSyncCommand
name|command
init|=
operator|new
name|RSyncCommand
argument_list|(
name|executor
argument_list|,
literal|"privateKey"
argument_list|,
literal|"user"
argument_list|,
literal|"host"
argument_list|,
literal|1
argument_list|,
literal|"local"
argument_list|,
literal|"remote"
argument_list|,
name|RSyncCommand
operator|.
name|Type
operator|.
name|FROM_LOCAL
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Constants
operator|.
name|EXIT_CODE_UNKNOWN
argument_list|,
name|command
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unexpected exception during execution"
argument_list|,
name|command
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
name|verify
argument_list|(
name|localCommand
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|kill
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdownDuringWaitFor
parameter_list|()
throws|throws
name|Exception
block|{
name|LocalCommand
name|localCommand
init|=
name|mock
argument_list|(
name|LocalCommand
operator|.
name|class
argument_list|)
decl_stmt|;
name|localCommandFactory
operator|.
name|setInstance
argument_list|(
name|localCommand
argument_list|)
expr_stmt|;
specifier|final
name|RSyncCommandExecutor
name|executor
init|=
operator|new
name|RSyncCommandExecutor
argument_list|(
name|LOG
argument_list|,
name|localCommandFactory
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|localCommand
operator|.
name|getExitCode
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
return|return
name|Constants
operator|.
name|EXIT_CODE_UNKNOWN
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RSyncCommand
name|command
init|=
operator|new
name|RSyncCommand
argument_list|(
name|executor
argument_list|,
literal|"privateKey"
argument_list|,
literal|"user"
argument_list|,
literal|"host"
argument_list|,
literal|1
argument_list|,
literal|"local"
argument_list|,
literal|"remote"
argument_list|,
name|RSyncCommand
operator|.
name|Type
operator|.
name|FROM_LOCAL
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|executor
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Constants
operator|.
name|EXIT_CODE_UNKNOWN
argument_list|,
name|command
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unexpected exception during execution"
argument_list|,
name|command
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
name|verify
argument_list|(
name|localCommand
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|kill
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

