begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TestUnitTestPropertiesParser
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestUnitTestPropertiesParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE1_NAME
init|=
literal|"module1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE1_TEST_NAME
init|=
literal|"Module1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE2_NAME
init|=
literal|"module2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE2_TEST_NAME
init|=
literal|"Module2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOP_LEVEL_TEST_NAME
init|=
literal|"tl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TWO_LEVEL_MODULE1_NAME
init|=
literal|"module2l.submodule1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TWO_LEVEL_TEST_NAME
init|=
literal|"TwoLevel"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THREE_LEVEL_MODULE1_NAME
init|=
literal|"module3l.sub.submodule1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THREE_LEVEL_TEST_NAME
init|=
literal|"ThreeLevel"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE3_REL_DIR
init|=
literal|"TwoLevel/module-2.6"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE3_MODULE_NAME
init|=
literal|"TwoLevel.module-2.6"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE3_TEST_NAME
init|=
literal|"Module3"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE_DEFAULT
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CASE_PROPERT_NAME
init|=
literal|"test"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testSimpleSetup
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|4
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testTopLevelExclude
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_EXCLUDE
argument_list|)
argument_list|,
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"1"
argument_list|)
expr_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testTopLevelInclude
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_INCLUDE
argument_list|)
argument_list|,
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"1"
operator|+
literal|" "
operator|+
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|1
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testTopLevelSkipBatching
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_SKIP_BATCHING
argument_list|)
argument_list|,
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"1"
operator|+
literal|" "
operator|+
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testTopLevelIsolate
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_ISOLATE
argument_list|)
argument_list|,
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"1"
operator|+
literal|" "
operator|+
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testTopLevelBatchSize
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|5
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|1
block|,
literal|2
block|,
literal|2
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testModuleLevelExclude
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_ONE_MODULE
argument_list|,
name|MODULE1_NAME
argument_list|)
argument_list|,
name|MODULE1_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtSpecificPropertyName
argument_list|(
name|MODULE1_NAME
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_EXCLUDE
argument_list|)
argument_list|,
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"1"
argument_list|)
expr_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testModuleLevelInclude
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_ONE_MODULE
argument_list|,
name|MODULE1_NAME
argument_list|)
argument_list|,
name|MODULE1_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtSpecificPropertyName
argument_list|(
name|MODULE1_NAME
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_INCLUDE
argument_list|)
argument_list|,
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"1"
operator|+
literal|" "
operator|+
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|4
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testModuleLevelSkipBatching
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_ONE_MODULE
argument_list|,
name|MODULE1_NAME
argument_list|)
argument_list|,
name|MODULE1_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtSpecificPropertyName
argument_list|(
name|MODULE1_NAME
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_SKIP_BATCHING
argument_list|)
argument_list|,
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"1"
operator|+
literal|" "
operator|+
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testModuleLevelIsolate
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_ONE_MODULE
argument_list|,
name|MODULE1_NAME
argument_list|)
argument_list|,
name|MODULE1_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtSpecificPropertyName
argument_list|(
name|MODULE1_NAME
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_ISOLATE
argument_list|)
argument_list|,
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"1"
operator|+
literal|" "
operator|+
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|3
block|,
literal|4
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testModuleLevelBatchSize
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_ONE_MODULE
argument_list|,
name|MODULE1_NAME
argument_list|)
argument_list|,
name|MODULE1_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtSpecificPropertyName
argument_list|(
name|MODULE1_NAME
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|1
block|,
literal|4
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testProvidedExclude
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludedProvided
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
literal|"1"
argument_list|)
decl_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
name|excludedProvided
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testTopLevelBatchSizeIncludeAll
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|120
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|120
block|,
literal|60
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testModuleLevelBatchSizeIncludeAll
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|50
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_ONE_MODULE
argument_list|,
name|MODULE1_NAME
argument_list|)
argument_list|,
name|MODULE1_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtSpecificPropertyName
argument_list|(
name|MODULE1_NAME
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|3
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|50
block|,
literal|2
block|,
literal|2
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testMultiLevelModules
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProviderMultiLevel
argument_list|(
name|baseDir
argument_list|,
literal|4
argument_list|,
literal|30
argument_list|,
literal|6
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_ONE_MODULE
argument_list|,
name|MODULE1_NAME
argument_list|)
argument_list|,
name|MODULE1_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtSpecificPropertyName
argument_list|(
name|MODULE1_NAME
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_ONE_MODULE
argument_list|,
name|THREE_LEVEL_MODULE1_NAME
argument_list|)
argument_list|,
name|THREE_LEVEL_MODULE1_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtSpecificPropertyName
argument_list|(
name|THREE_LEVEL_MODULE1_NAME
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|5
argument_list|,
operator|new
name|String
index|[]
block|{
name|UnitTestPropertiesParser
operator|.
name|PREFIX_TOP_LEVEL
block|,
name|MODULE1_NAME
block|,
name|TWO_LEVEL_MODULE1_NAME
block|,
name|TWO_LEVEL_MODULE1_NAME
block|,
name|THREE_LEVEL_MODULE1_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|30
block|,
literal|4
block|,
literal|2
block|,
literal|9
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testTopLevelModuleConfig
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProviderMultiLevel
argument_list|(
name|baseDir
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_ONE_MODULE
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|MODULE_NAME_TOP_LEVEL
argument_list|)
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|MODULE_NAME_TOP_LEVEL
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtSpecificPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|MODULE_NAME_TOP_LEVEL
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|1
argument_list|,
operator|new
name|String
index|[]
block|{
name|UnitTestPropertiesParser
operator|.
name|PREFIX_TOP_LEVEL
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|9
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testScanMultipleDirectoriesNested
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProviderMultiLevel
argument_list|(
name|baseDir
argument_list|,
literal|13
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_DIRECTORIES
argument_list|)
argument_list|,
literal|"./ ./"
operator|+
name|MODULE1_NAME
argument_list|)
expr_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|3
argument_list|,
operator|new
name|String
index|[]
block|{
name|UnitTestPropertiesParser
operator|.
name|PREFIX_TOP_LEVEL
block|,
name|UnitTestPropertiesParser
operator|.
name|PREFIX_TOP_LEVEL
block|,
name|MODULE1_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|3
block|,
literal|5
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testScanMultipleDirectoriesNonNested
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|13
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_DIRECTORIES
argument_list|)
argument_list|,
literal|"./"
operator|+
name|MODULE1_NAME
operator|+
literal|" "
operator|+
literal|"./"
operator|+
name|MODULE2_NAME
argument_list|)
expr_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|3
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|,
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|3
block|,
literal|8
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testModuleInclude
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|13
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_MODULE_LIST
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_INCLUDE
argument_list|)
argument_list|,
name|MODULE1_NAME
argument_list|)
expr_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|2
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE1_NAME
block|,
name|MODULE1_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|3
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testModuleExclude
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProvider
argument_list|(
name|baseDir
argument_list|,
literal|13
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_MODULE_LIST
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_EXCLUDE
argument_list|)
argument_list|,
name|MODULE1_NAME
argument_list|)
expr_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|1
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE2_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|8
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testModuleWithPeriodInDirName
parameter_list|()
block|{
name|File
name|baseDir
init|=
name|getFakeTestBaseDir
argument_list|()
decl_stmt|;
name|Context
name|context
init|=
name|getDefaultContext
argument_list|()
decl_stmt|;
name|FileListProvider
name|flProvider
init|=
name|getTestFileListProviderSingleModule
argument_list|(
name|baseDir
argument_list|,
name|MODULE3_REL_DIR
argument_list|,
name|MODULE3_TEST_NAME
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_ONE_MODULE
argument_list|,
name|MODULE3_MODULE_NAME
argument_list|)
argument_list|,
name|MODULE3_MODULE_NAME
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtSpecificPropertyName
argument_list|(
name|MODULE3_MODULE_NAME
argument_list|,
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|UnitTestPropertiesParser
name|parser
init|=
operator|new
name|UnitTestPropertiesParser
argument_list|(
name|context
argument_list|,
name|TEST_CASE_PROPERT_NAME
argument_list|,
name|baseDir
argument_list|,
name|LOG
argument_list|,
name|flProvider
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
init|=
name|parser
operator|.
name|generateTestBatches
argument_list|()
decl_stmt|;
name|verifyBatches
argument_list|(
name|testBatchCollection
argument_list|,
literal|3
argument_list|,
operator|new
name|String
index|[]
block|{
name|MODULE3_MODULE_NAME
block|,
name|MODULE3_MODULE_NAME
block|,
name|MODULE3_MODULE_NAME
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|3
block|}
argument_list|,
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyBatches
parameter_list|(
name|Collection
argument_list|<
name|TestBatch
argument_list|>
name|testBatchCollection
parameter_list|,
name|int
name|numBatches
parameter_list|,
name|String
index|[]
name|moduleNames
parameter_list|,
name|int
index|[]
name|testsPerBatch
parameter_list|,
name|boolean
index|[]
name|isParallel
parameter_list|)
block|{
name|List
argument_list|<
name|TestBatch
argument_list|>
name|testBatches
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|testBatchCollection
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected batches=[%d], found=[%d]"
argument_list|,
name|numBatches
argument_list|,
name|testBatches
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|numBatches
argument_list|,
name|testBatches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|moduleNames
operator|.
name|length
operator|==
name|numBatches
assert|;
assert|assert
name|testsPerBatch
operator|.
name|length
operator|==
name|numBatches
assert|;
assert|assert
name|isParallel
operator|.
name|length
operator|==
name|numBatches
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBatches
condition|;
name|i
operator|++
control|)
block|{
name|TestBatch
name|testBatch
init|=
name|testBatches
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|moduleNames
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PREFIX_TOP_LEVEL
argument_list|)
condition|)
block|{
name|moduleNames
index|[
name|i
index|]
operator|=
name|moduleNames
index|[
name|i
index|]
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected batchName=[%s], found=[%s] on index=%d"
argument_list|,
name|moduleNames
index|[
name|i
index|]
argument_list|,
name|testBatch
operator|.
name|getTestModuleRelativeDir
argument_list|()
argument_list|,
name|i
argument_list|)
argument_list|,
name|moduleNames
index|[
name|i
index|]
argument_list|,
name|testBatch
operator|.
name|getTestModuleRelativeDir
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected size=[%d], found=[%d] on index=%d"
argument_list|,
name|testsPerBatch
index|[
name|i
index|]
argument_list|,
name|testBatch
operator|.
name|getNumTestsInBatch
argument_list|()
argument_list|,
name|i
argument_list|)
argument_list|,
name|testsPerBatch
index|[
name|i
index|]
argument_list|,
name|testBatch
operator|.
name|getNumTestsInBatch
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected isParallel=[%s], found=[%s] on index=%d"
argument_list|,
name|isParallel
index|[
name|i
index|]
argument_list|,
name|testBatch
operator|.
name|isParallel
argument_list|()
argument_list|,
name|i
argument_list|)
argument_list|,
name|isParallel
index|[
name|i
index|]
argument_list|,
name|testBatch
operator|.
name|isParallel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|File
name|getFakeTestBaseDir
parameter_list|()
block|{
name|File
name|javaTmpDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|javaTmpDir
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|baseDir
return|;
block|}
comment|/**    * Returns 2 modules. Counts can be specified.    *    * @param module1Count    * @param module2Count    * @return    */
specifier|private
specifier|static
name|FileListProvider
name|getTestFileListProvider
parameter_list|(
specifier|final
name|File
name|baseDir
parameter_list|,
specifier|final
name|int
name|module1Count
parameter_list|,
specifier|final
name|int
name|module2Count
parameter_list|)
block|{
return|return
operator|new
name|FileListProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|File
argument_list|>
name|listFiles
parameter_list|(
name|File
name|directory
parameter_list|,
name|String
index|[]
name|extensions
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|List
argument_list|<
name|File
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|m1F
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
name|MODULE1_NAME
argument_list|,
literal|"target"
argument_list|,
literal|"test"
argument_list|,
literal|"p1"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|module1Count
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|m1F
argument_list|,
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|m2F
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
name|MODULE2_NAME
argument_list|,
literal|"target"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|module2Count
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|m2F
argument_list|,
literal|"Test"
operator|+
name|MODULE2_TEST_NAME
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|FileListProvider
name|getTestFileListProviderMultiLevel
parameter_list|(
specifier|final
name|File
name|baseDir
parameter_list|,
specifier|final
name|int
name|l0Count
parameter_list|,
specifier|final
name|int
name|l1Count
parameter_list|,
specifier|final
name|int
name|l2Count
parameter_list|,
specifier|final
name|int
name|l3Count
parameter_list|)
block|{
return|return
operator|new
name|FileListProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|File
argument_list|>
name|listFiles
parameter_list|(
name|File
name|directory
parameter_list|,
name|String
index|[]
name|extensions
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|List
argument_list|<
name|File
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|l0F
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
literal|"target"
argument_list|,
literal|"test"
argument_list|,
literal|"p1"
argument_list|,
literal|"p2"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l0Count
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|l0F
argument_list|,
literal|"Test"
operator|+
name|TOP_LEVEL_TEST_NAME
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|l1F
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
name|MODULE1_NAME
argument_list|,
literal|"target"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l1Count
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|l1F
argument_list|,
literal|"Test"
operator|+
name|MODULE1_TEST_NAME
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|l2F
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
name|TWO_LEVEL_MODULE1_NAME
argument_list|,
literal|"target"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l2Count
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|l2F
argument_list|,
literal|"Test"
operator|+
name|TWO_LEVEL_TEST_NAME
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|l3F
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
name|THREE_LEVEL_MODULE1_NAME
argument_list|,
literal|"target"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l3Count
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|l3F
argument_list|,
literal|"Test"
operator|+
name|THREE_LEVEL_TEST_NAME
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|FileListProvider
name|getTestFileListProviderSingleModule
parameter_list|(
specifier|final
name|File
name|baseDir
parameter_list|,
specifier|final
name|String
name|moduleRelDir
parameter_list|,
specifier|final
name|String
name|testName
parameter_list|,
specifier|final
name|int
name|numTests
parameter_list|)
block|{
return|return
operator|new
name|FileListProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|File
argument_list|>
name|listFiles
parameter_list|(
name|File
name|directory
parameter_list|,
name|String
index|[]
name|extensions
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|List
argument_list|<
name|File
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
name|moduleRelDir
argument_list|,
literal|"target"
argument_list|,
literal|"package"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTests
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"Test"
operator|+
name|testName
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|Context
name|getDefaultContext
parameter_list|()
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_DIRECTORIES
argument_list|)
argument_list|,
literal|"./"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_SUBDIR_FOR_PREFIX
argument_list|)
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|getUtRootPropertyName
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_BATCH_SIZE
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|BATCH_SIZE_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
specifier|private
specifier|static
name|String
name|getUtRootPropertyName
parameter_list|(
name|String
name|p1
parameter_list|,
name|String
modifier|...
name|rest
parameter_list|)
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|join
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_PREFIX_ROOT
argument_list|,
name|p1
argument_list|,
name|rest
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getUtSpecificPropertyName
parameter_list|(
name|String
name|p1
parameter_list|,
name|String
modifier|...
name|rest
parameter_list|)
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"."
argument_list|)
operator|.
name|join
argument_list|(
name|UnitTestPropertiesParser
operator|.
name|PROP_PREFIX_MODULE
argument_list|,
name|p1
argument_list|,
name|rest
argument_list|)
return|;
block|}
block|}
end_class

end_unit

