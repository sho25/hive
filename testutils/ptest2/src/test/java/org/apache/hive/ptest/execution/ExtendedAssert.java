begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ExtendedAssert
block|{
specifier|private
name|ExtendedAssert
parameter_list|()
block|{   }
comment|/**    * Asserts that all the elements of the list are equivalent under equals()    *    * @param expected    *          a list full of expected values    * @param actual    *          a list full of actual test values    */
specifier|public
specifier|static
name|void
name|assertListEquals
parameter_list|(
name|String
name|msg
parameter_list|,
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|expected
parameter_list|,
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|actual
parameter_list|)
block|{
name|String
name|cleanMsg
init|=
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|msg
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|size
argument_list|()
operator|!=
name|actual
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|cleanMsg
operator|+
literal|": Expected list of size "
operator|+
name|expected
operator|.
name|size
argument_list|()
operator|+
literal|"; actual size is "
operator|+
name|actual
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Object
name|t1
init|=
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|t2
init|=
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|cleanMsg
operator|+
literal|": Index "
operator|+
name|i
argument_list|,
name|t1
argument_list|,
name|t2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

