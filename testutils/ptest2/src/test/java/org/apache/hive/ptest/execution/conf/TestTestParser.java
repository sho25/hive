begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|Dirs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_class
specifier|public
class|class
name|TestTestParser
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestTestParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DRIVER
init|=
literal|"driver"
decl_stmt|;
specifier|private
name|TestParser
name|testParser
decl_stmt|;
specifier|private
name|File
name|baseDir
decl_stmt|;
specifier|private
name|Context
name|context
decl_stmt|;
specifier|private
name|File
name|workingDirectory
decl_stmt|;
specifier|private
name|File
name|unitTestDir1
decl_stmt|;
specifier|private
name|File
name|unitTestDir2
decl_stmt|;
specifier|private
name|File
name|qFileTestDir
decl_stmt|;
specifier|private
name|File
name|propertyDir
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|=
operator|new
name|Context
argument_list|()
expr_stmt|;
name|baseDir
operator|=
name|Files
operator|.
name|createTempDir
argument_list|()
expr_stmt|;
name|workingDirectory
operator|=
operator|new
name|File
argument_list|(
name|baseDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"source"
argument_list|)
expr_stmt|;
name|unitTestDir1
operator|=
name|Dirs
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
literal|"source"
argument_list|,
literal|"build"
argument_list|,
literal|"1"
argument_list|,
literal|"units"
argument_list|,
literal|"test"
argument_list|,
literal|"classes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|unitTestDir2
operator|=
name|Dirs
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
literal|"source"
argument_list|,
literal|"build"
argument_list|,
literal|"2"
argument_list|,
literal|"units"
argument_list|,
literal|"test"
argument_list|,
literal|"classes"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qFileTestDir
operator|=
name|Dirs
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
literal|"source"
argument_list|,
literal|"qfiles"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|propertyDir
operator|=
name|Dirs
operator|.
name|create
argument_list|(
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
literal|"source"
argument_list|,
literal|"props"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|unitTestDir1
argument_list|,
literal|"TestA.class"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|unitTestDir2
argument_list|,
literal|"TestB.class"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|unitTestDir1
argument_list|,
literal|"TestC.class"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|unitTestDir1
argument_list|,
literal|"TestD$E.class"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|unitTestDir1
argument_list|,
name|DRIVER
operator|+
literal|".class"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|qFileTestDir
argument_list|,
literal|".svn"
argument_list|)
operator|)
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|qFileTestDir
argument_list|,
literal|"dir.q"
argument_list|)
operator|)
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|qFileTestDir
argument_list|,
literal|"normal.q"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|qFileTestDir
argument_list|,
literal|"normal2.q"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|qFileTestDir
argument_list|,
literal|"normal3.q"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|qFileTestDir
argument_list|,
literal|"normal4.q"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|qFileTestDir
argument_list|,
literal|"excluded.q"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|qFileTestDir
argument_list|,
literal|"isolated.q"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|new
name|File
argument_list|(
name|qFileTestDir
argument_list|,
literal|"included.q"
argument_list|)
operator|)
operator|.
name|createNewFile
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|normalProp
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|normalProp
operator|.
name|setProperty
argument_list|(
literal|"normal.one.group"
argument_list|,
literal|"normal.q,normal2.q"
argument_list|)
expr_stmt|;
name|normalProp
operator|.
name|setProperty
argument_list|(
literal|"normal.two.group"
argument_list|,
literal|"normal3.q,normal4.q"
argument_list|)
expr_stmt|;
name|normalProp
operator|.
name|setProperty
argument_list|(
literal|"excluded.group"
argument_list|,
literal|"excluded.q"
argument_list|)
expr_stmt|;
name|normalProp
operator|.
name|setProperty
argument_list|(
literal|"isolated.group"
argument_list|,
literal|"isolated.q"
argument_list|)
expr_stmt|;
name|normalProp
operator|.
name|setProperty
argument_list|(
literal|"included.group"
argument_list|,
literal|"included.q"
argument_list|)
expr_stmt|;
name|serialize
argument_list|(
literal|"normal.properties"
argument_list|,
name|normalProp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|baseDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseWithExcludes
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.directories"
argument_list|,
literal|"build/1 build/2"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.subdirForPrefix"
argument_list|,
literal|"units"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.exclude"
argument_list|,
literal|"TestA"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.isolate"
argument_list|,
literal|"TestB"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTests"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.driver"
argument_list|,
name|DRIVER
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.directory"
argument_list|,
literal|"qfiles"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.exclude"
argument_list|,
literal|"excluded"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.queryFilesProperty"
argument_list|,
literal|"qfile"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.isolate"
argument_list|,
literal|"isolated"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.groups.excluded"
argument_list|,
literal|"excluded.q"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.groups.isolated"
argument_list|,
literal|"isolated.q"
argument_list|)
expr_stmt|;
name|testParser
operator|=
operator|new
name|TestParser
argument_list|(
name|context
argument_list|,
literal|"testcase"
argument_list|,
name|workingDirectory
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TestBatch
argument_list|>
name|testBatches
init|=
name|testParser
operator|.
name|parse
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|testBatches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseWithIncludes
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.directories"
argument_list|,
literal|"build/1 build/2"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.subdirForPrefix"
argument_list|,
literal|"units"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.include"
argument_list|,
literal|"TestA TestB"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.isolate"
argument_list|,
literal|"TestB"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTests"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.driver"
argument_list|,
name|DRIVER
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.directory"
argument_list|,
literal|"qfiles"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.include"
argument_list|,
literal|"included"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.isolate"
argument_list|,
literal|"isolated"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.queryFilesProperty"
argument_list|,
literal|"qfile"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.groups.included"
argument_list|,
literal|"included.q isolated.q"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.groups.isolated"
argument_list|,
literal|"isolated.q"
argument_list|)
expr_stmt|;
name|testParser
operator|=
operator|new
name|TestParser
argument_list|(
name|context
argument_list|,
literal|"testcase"
argument_list|,
name|workingDirectory
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TestBatch
argument_list|>
name|testBatches
init|=
name|testParser
operator|.
name|parse
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|testBatches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParsePropertyFile
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.directories"
argument_list|,
literal|"build/1 build/2"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.subdirForPrefix"
argument_list|,
literal|"units"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.include"
argument_list|,
literal|"TestA TestB"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"unitTests.isolate"
argument_list|,
literal|"TestB"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTests"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTests.propertyFiles.prop"
argument_list|,
literal|"props"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"normal.properties"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.driver"
argument_list|,
name|DRIVER
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.directory"
argument_list|,
literal|"qfiles"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.include"
argument_list|,
literal|"included"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.isolate"
argument_list|,
literal|"isolated"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.exclude"
argument_list|,
literal|"excluded"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.queryFilesProperty"
argument_list|,
literal|"qfile"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.groups.included"
argument_list|,
literal|"prop.${normal.one.group} prop.${normal.two.group} prop.${isolated.group}"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.groups.isolated"
argument_list|,
literal|"prop.${isolated.group}"
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"qFileTest.f.groups.excluded"
argument_list|,
literal|"prop.${excluded.group}"
argument_list|)
expr_stmt|;
name|testParser
operator|=
operator|new
name|TestParser
argument_list|(
name|context
argument_list|,
literal|"testcase"
argument_list|,
name|workingDirectory
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TestBatch
argument_list|>
name|testBatches
init|=
name|testParser
operator|.
name|parse
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|testBatches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|serialize
parameter_list|(
name|String
name|propFileName
parameter_list|,
name|Properties
name|props
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|propertyDir
argument_list|,
name|propFileName
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|store
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

