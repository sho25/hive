begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|ptest
operator|.
name|execution
operator|.
name|context
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|compute
operator|.
name|domain
operator|.
name|NodeMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|compute
operator|.
name|domain
operator|.
name|NodeMetadata
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestCloudComputeService
block|{
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_NAME
init|=
literal|"grp"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_TAG
init|=
literal|"group="
operator|+
name|GROUP_NAME
decl_stmt|;
specifier|private
name|NodeMetadata
name|node
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|tags
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|node
operator|=
name|mock
argument_list|(
name|NodeMetadata
operator|.
name|class
argument_list|)
expr_stmt|;
name|tags
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|GROUP_TAG
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Status
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|GROUP_NAME
operator|+
literal|"-1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|GROUP_NAME
operator|+
literal|"-1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getTags
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tags
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testNotStarted
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|node
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Status
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Node is not running, should be filtered out"
argument_list|,
name|CloudComputeService
operator|.
name|createFilterPTestPredicate
argument_list|(
name|GROUP_NAME
argument_list|,
name|GROUP_TAG
argument_list|)
operator|.
name|apply
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testBadName
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node should be filtered in by group or tag"
argument_list|,
name|CloudComputeService
operator|.
name|createFilterPTestPredicate
argument_list|(
name|GROUP_NAME
argument_list|,
name|GROUP_TAG
argument_list|)
operator|.
name|apply
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testBadGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|node
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node should be filtered in by name or tag"
argument_list|,
name|CloudComputeService
operator|.
name|createFilterPTestPredicate
argument_list|(
name|GROUP_NAME
argument_list|,
name|GROUP_TAG
argument_list|)
operator|.
name|apply
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testBadTag
parameter_list|()
throws|throws
name|Exception
block|{
name|tags
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node should be filtered in by name or group"
argument_list|,
name|CloudComputeService
operator|.
name|createFilterPTestPredicate
argument_list|(
name|GROUP_NAME
argument_list|,
name|GROUP_TAG
argument_list|)
operator|.
name|apply
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

