begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|testutils
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_class
specifier|public
class|class
name|HiveBurnInClient
block|{
specifier|private
specifier|static
name|String
name|driverName
init|=
literal|"org.apache.hive.jdbc.HiveDriver"
decl_stmt|;
comment|//default 80k (runs slightly over 1 day long)
specifier|private
specifier|final
specifier|static
name|int
name|NUM_QUERY_ITERATIONS
init|=
literal|80000
decl_stmt|;
comment|/**    * Creates 2 tables to query from    *    * @param num    */
specifier|public
specifier|static
name|void
name|createTables
parameter_list|(
name|Connection
name|con
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
literal|"table1"
decl_stmt|;
name|String
name|sql
init|=
literal|"drop table if exists "
operator|+
name|tableName
decl_stmt|;
name|executeQuery
argument_list|(
name|stmt
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (key int, value string)"
expr_stmt|;
name|executeQuery
argument_list|(
name|stmt
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// load data into table
comment|// NOTE: filepath has to be local to the hive server
name|String
name|filepath
init|=
literal|"./examples/files/kv1.txt"
decl_stmt|;
name|sql
operator|=
literal|"load data local inpath '"
operator|+
name|filepath
operator|+
literal|"' into table "
operator|+
name|tableName
expr_stmt|;
name|executeQuery
argument_list|(
name|stmt
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tableName
operator|=
literal|"table2"
expr_stmt|;
name|sql
operator|=
literal|"drop table if exists "
operator|+
name|tableName
expr_stmt|;
name|executeQuery
argument_list|(
name|stmt
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (key int, value string)"
expr_stmt|;
name|executeQuery
argument_list|(
name|stmt
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|filepath
operator|=
literal|"./examples/files/kv2.txt"
expr_stmt|;
name|sql
operator|=
literal|"load data local inpath '"
operator|+
name|filepath
operator|+
literal|"' into table "
operator|+
name|tableName
expr_stmt|;
name|executeQuery
argument_list|(
name|stmt
argument_list|,
name|sql
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|executeQuery
parameter_list|(
name|Statement
name|stmt
parameter_list|,
name|String
name|sql
parameter_list|,
name|boolean
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running: "
operator|+
name|sql
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|resultSet
condition|)
block|{
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|stmt
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|msElapsedTime
init|=
name|endTime
operator|-
name|startTime
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Time taken for query = %d ms \n"
argument_list|,
name|msElapsedTime
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param con    * @param numberOfQueryIterations    * @throws SQLException    */
specifier|public
specifier|static
name|void
name|runQueries
parameter_list|(
name|Connection
name|con
parameter_list|,
name|int
name|numberOfQueryIterations
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfQueryIterations
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Iteration #"
operator|+
name|i
argument_list|)
expr_stmt|;
comment|// select query
name|String
name|sql
init|=
literal|"from table1 SELECT * group by table1.key order by table1.key desc"
decl_stmt|;
name|executeQuery
argument_list|(
name|stmt
argument_list|,
name|sql
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// count query
name|sql
operator|=
literal|"select count(*) from table1"
expr_stmt|;
name|executeQuery
argument_list|(
name|stmt
argument_list|,
name|sql
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// join with group-by, having, order-by
name|sql
operator|=
literal|"select t1.key,count(t1.key) as cnt from table1 t1"
operator|+
literal|" join table2 t2 on (t1.key = t2.key) group by t1.key having cnt> 5 order by cnt desc"
expr_stmt|;
name|executeQuery
argument_list|(
name|stmt
argument_list|,
name|sql
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// full outer join
name|sql
operator|=
literal|"select table1.value, table2.value from table1 full outer join table2 "
operator|+
literal|"on (table1.key = table2.key)"
expr_stmt|;
name|executeQuery
argument_list|(
name|stmt
argument_list|,
name|sql
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param args    * @throws SQLException    * @throws ClassNotFoundException    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|SQLException
throws|,
name|ClassNotFoundException
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driverName
argument_list|)
expr_stmt|;
name|int
name|numberOfQueryIterations
init|=
name|NUM_QUERY_ITERATIONS
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|numberOfQueryIterations
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numberOfQueryIterations
operator|<
literal|0
condition|)
block|{
name|numberOfQueryIterations
operator|=
name|NUM_QUERY_ITERATIONS
expr_stmt|;
block|}
name|Connection
name|con
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
literal|"jdbc:hive2://localhost:10000/default"
argument_list|,
literal|"hive"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|createTables
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|runQueries
argument_list|(
name|con
argument_list|,
name|numberOfQueryIterations
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

