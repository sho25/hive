begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2009-2012, toby weston& tempus-fugit committers  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|testutils
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|ExecutorServiceShutdown
operator|.
name|shutdown
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|temporal
operator|.
name|Duration
operator|.
name|days
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|TRUE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|RunnerScheduler
import|;
end_import

begin_comment
comment|/**  * Originally taken from com.google.code.tempusfugit.concurrency.ConcurrentScheduler  */
end_comment

begin_class
specifier|public
class|class
name|ConcurrentScheduler
implements|implements
name|RunnerScheduler
block|{
specifier|private
specifier|final
name|ExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|final
name|OutputStream
name|outputStream
decl_stmt|;
specifier|public
name|ConcurrentScheduler
parameter_list|(
name|ExecutorService
name|executor
parameter_list|)
block|{
name|this
argument_list|(
name|executor
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ConcurrentScheduler
parameter_list|(
name|ExecutorService
name|executor
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|outputStream
operator|=
name|outputStream
expr_stmt|;
block|}
specifier|public
name|void
name|schedule
parameter_list|(
name|Runnable
name|childStatement
parameter_list|)
block|{
name|executor
operator|.
name|submit
argument_list|(
name|childStatement
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|finished
parameter_list|()
block|{
if|if
condition|(
operator|!
name|successful
argument_list|(
name|shutdown
argument_list|(
name|executor
argument_list|)
operator|.
name|waitingForCompletion
argument_list|(
name|days
argument_list|(
literal|365
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|writeln
argument_list|(
name|outputStream
argument_list|,
literal|"scheduler shutdown timed out before tests completed, "
operator|+
literal|"you may have executors hanging around..."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Boolean
name|successful
parameter_list|(
name|Boolean
name|completed
parameter_list|)
block|{
return|return
name|TRUE
operator|.
name|equals
argument_list|(
name|completed
argument_list|)
return|;
block|}
specifier|private
name|void
name|writeln
parameter_list|(
name|OutputStream
name|stream
parameter_list|,
name|String
name|string
parameter_list|)
block|{
try|try
block|{
name|stream
operator|.
name|write
argument_list|(
name|string
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

