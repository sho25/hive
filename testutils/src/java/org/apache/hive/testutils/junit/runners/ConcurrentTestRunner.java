begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2009-2012, toby weston& tempus-fugit committers  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/*  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|testutils
operator|.
name|junit
operator|.
name|runners
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newFixedThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|testutils
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|ConcurrentScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|BlockJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|InitializationError
import|;
end_import

begin_comment
comment|/**  * Originally taken from com.google.code.tempusfugit.concurrency.ConcurrentTestRunner  */
end_comment

begin_class
specifier|public
class|class
name|ConcurrentTestRunner
extends|extends
name|BlockJUnit4ClassRunner
block|{
specifier|private
name|int
name|numThreads
init|=
literal|1
decl_stmt|;
specifier|public
name|ConcurrentTestRunner
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
throws|throws
name|InitializationError
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|String
name|numThreadsProp
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.concurrency.num.threads"
argument_list|)
decl_stmt|;
if|if
condition|(
name|numThreadsProp
operator|!=
literal|null
condition|)
block|{
name|numThreads
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|numThreadsProp
argument_list|)
expr_stmt|;
block|}
name|setScheduler
argument_list|(
operator|new
name|ConcurrentScheduler
argument_list|(
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|,
operator|new
name|ConcurrentTestRunnerThreadFactory
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> ConcurrenTestRunner initialize with "
operator|+
name|numThreads
operator|+
literal|" threads"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ConcurrentTestRunnerThreadFactory
implements|implements
name|ThreadFactory
block|{
specifier|private
specifier|final
name|AtomicLong
name|count
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|String
name|threadName
init|=
name|ConcurrentTestRunner
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-Thread-"
operator|+
name|count
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">>> ConcurrentTestRunner.newThread "
operator|+
name|threadName
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
name|threadName
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

