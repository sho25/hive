begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License a  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|max
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|nanoTime
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|ReadWriteLockMetrics
operator|.
name|LockMetricInfo
operator|.
name|ReadLockCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|ReadWriteLockMetrics
operator|.
name|LockMetricInfo
operator|.
name|ReadLockWaitTimeMax
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|ReadWriteLockMetrics
operator|.
name|LockMetricInfo
operator|.
name|ReadLockWaitTimeTotal
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|ReadWriteLockMetrics
operator|.
name|LockMetricInfo
operator|.
name|WriteLockCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|ReadWriteLockMetrics
operator|.
name|LockMetricInfo
operator|.
name|WriteLockWaitTimeMax
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|metrics
operator|.
name|ReadWriteLockMetrics
operator|.
name|LockMetricInfo
operator|.
name|WriteLockWaitTimeTotal
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * JUnit test suite for the<code>ReadWriteLockMetrics</code> class.  * The test uses a background thread and has some hard coded thread execution  * times. It should normally not take more than 2 threads and 400ms execution  * time.  */
end_comment

begin_class
specifier|public
class|class
name|TestReadWriteLockMetrics
block|{
comment|/**    * Thread which performs locks in loop, holding the lock for 5ms.    */
specifier|private
specifier|static
class|class
name|LockHolder
extends|extends
name|Thread
block|{
specifier|public
specifier|static
specifier|final
name|long
name|LOCK_HOLD_TIME
init|=
literal|5
decl_stmt|;
comment|///< lock hold time in ms
specifier|private
specifier|final
name|Lock
name|targetLock
decl_stmt|;
comment|///< the lock to hold
specifier|private
name|long
name|lockCount
decl_stmt|;
comment|///< loop coun
specifier|private
name|long
name|lockWaitSum
decl_stmt|;
comment|///< total lock wait time
specifier|private
name|long
name|lockWaitMax
decl_stmt|;
comment|///< highest lock wait time
specifier|private
name|long
name|endTime
decl_stmt|;
comment|///< runtime for the thread
comment|/**      * Create a new lock holding thread.      * The so created thread start immediately.      *      * @param l The lock to lock/unlock in loop      * @param ttl The expected thread run time in ms      */
specifier|public
name|LockHolder
parameter_list|(
name|Lock
name|l
parameter_list|,
name|long
name|ttl
parameter_list|)
block|{
name|targetLock
operator|=
name|l
expr_stmt|;
name|lockCount
operator|=
literal|0
expr_stmt|;
name|lockWaitSum
operator|=
literal|0
expr_stmt|;
name|lockWaitMax
operator|=
literal|0
expr_stmt|;
name|endTime
operator|=
name|ttl
expr_stmt|;
name|setName
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the number of counted locks.      * @return The total lock loop execution coun      */
specifier|public
name|long
name|getLockCount
parameter_list|()
block|{
return|return
name|lockCount
return|;
block|}
comment|/**      * Returns the accumulated nano seconds for locks.      * @return The aggregated time, the thread was waiting on locks (in nanos)      */
specifier|public
name|long
name|getLockSum
parameter_list|()
block|{
return|return
name|lockWaitSum
return|;
block|}
comment|/**      * Returns the highest lock time in nano seconds.      * @return The highest (single) lock wait time (in nanos)      */
specifier|public
name|long
name|getLockMax
parameter_list|()
block|{
return|return
name|lockWaitMax
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|endTime
operator|=
name|nanoTime
argument_list|()
operator|+
name|toNano
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
comment|// ttl was in ms
comment|// loop for specified amount of time
while|while
condition|(
name|nanoTime
argument_list|()
operator|<=
name|endTime
operator|&&
operator|!
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|long
name|start
init|=
name|nanoTime
argument_list|()
decl_stmt|;
name|targetLock
operator|.
name|lock
argument_list|()
expr_stmt|;
operator|++
name|lockCount
expr_stmt|;
name|long
name|diff
init|=
name|nanoTime
argument_list|()
operator|-
name|start
decl_stmt|;
name|lockWaitSum
operator|+=
name|diff
expr_stmt|;
name|lockWaitMax
operator|=
name|max
argument_list|(
name|diff
argument_list|,
name|lockWaitMax
argument_list|)
expr_stmt|;
while|while
condition|(
name|nanoTime
argument_list|()
operator|<=
operator|(
name|start
operator|+
name|toNano
argument_list|(
name|LOCK_HOLD_TIME
argument_list|)
operator|)
condition|)
block|{
comment|// spin for LOCK_HOLD_TIME ms (under lock)
block|}
block|}
finally|finally
block|{
name|targetLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Mock metrics collector for this test only.    * This<code>MetricsCollector</code> implementation is used to get the actual    *<code>MetricsSource</code> data, collected by the<code>    * ReadWriteLockMetrics</code>.    */
specifier|private
specifier|static
class|class
name|MockMetricsCollector
implements|implements
name|MetricsCollector
block|{
specifier|private
name|ArrayList
argument_list|<
name|MockRecord
argument_list|>
name|records
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Single metrics record mock implementation.      */
specifier|public
specifier|static
class|class
name|MockRecord
block|{
specifier|private
specifier|final
name|String
name|recordLabel
decl_stmt|;
comment|///< record tag/label
specifier|private
specifier|final
name|HashMap
argument_list|<
name|MetricsInfo
argument_list|,
name|Number
argument_list|>
name|metrics
decl_stmt|;
comment|///< metrics within record
specifier|private
name|String
name|context
decl_stmt|;
comment|///< collector context ID
comment|/**        * @param label metrics record label.        */
specifier|public
name|MockRecord
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|recordLabel
operator|=
name|label
expr_stmt|;
name|metrics
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**        * @return The record's tag/label.        */
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|recordLabel
return|;
block|}
comment|/**        * @return The context of the collector.        */
specifier|public
name|String
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
comment|/**        * @return Map of identifier/metric value pairs.        */
specifier|public
name|Map
argument_list|<
name|MetricsInfo
argument_list|,
name|Number
argument_list|>
name|getMetrics
parameter_list|()
block|{
return|return
name|metrics
return|;
block|}
block|}
comment|/**      * Record builder mock implementation.      */
specifier|private
class|class
name|MockMetricsRecordBuilder
extends|extends
name|MetricsRecordBuilder
block|{
specifier|private
name|MockRecord
name|target
init|=
literal|null
decl_stmt|;
comment|///< the record that is populated
comment|/**        * Used by outer class to provide a new<code>MetricsRecordBuilder</code>        * for a single metrics record.        *        * @param t The record to build.        */
specifier|public
name|MockMetricsRecordBuilder
parameter_list|(
name|MockRecord
name|t
parameter_list|)
block|{
name|target
operator|=
name|t
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|add
parameter_list|(
name|MetricsTag
name|arg0
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not implemented for test"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|add
parameter_list|(
name|AbstractMetric
name|arg0
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not implemented for test"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addCounter
parameter_list|(
name|MetricsInfo
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|)
block|{
name|target
operator|.
name|getMetrics
argument_list|()
operator|.
name|put
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addCounter
parameter_list|(
name|MetricsInfo
name|arg0
parameter_list|,
name|long
name|arg1
parameter_list|)
block|{
name|target
operator|.
name|getMetrics
argument_list|()
operator|.
name|put
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not implemented for test"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|arg0
parameter_list|,
name|long
name|arg1
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not implemented for test"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|arg0
parameter_list|,
name|float
name|arg1
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not implemented for test"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addGauge
parameter_list|(
name|MetricsInfo
name|arg0
parameter_list|,
name|double
name|arg1
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not implemented for test"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsCollector
name|parent
parameter_list|()
block|{
return|return
name|MockMetricsCollector
operator|.
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|setContext
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|target
operator|.
name|context
operator|=
name|arg0
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|tag
parameter_list|(
name|MetricsInfo
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Not implemented for test"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addRecord
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|MockRecord
name|tr
init|=
operator|new
name|MockRecord
argument_list|(
name|arg0
argument_list|)
decl_stmt|;
name|records
operator|.
name|add
argument_list|(
name|tr
argument_list|)
expr_stmt|;
return|return
operator|new
name|MockMetricsRecordBuilder
argument_list|(
name|tr
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricsRecordBuilder
name|addRecord
parameter_list|(
name|MetricsInfo
name|arg0
parameter_list|)
block|{
name|MockRecord
name|tr
init|=
operator|new
name|MockRecord
argument_list|(
name|arg0
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|records
operator|.
name|add
argument_list|(
name|tr
argument_list|)
expr_stmt|;
return|return
operator|new
name|MockMetricsRecordBuilder
argument_list|(
name|tr
argument_list|)
return|;
block|}
comment|/**      * @return A list of all built metrics records.      */
specifier|public
name|List
argument_list|<
name|MockRecord
argument_list|>
name|getRecords
parameter_list|()
block|{
return|return
name|records
return|;
block|}
block|}
comment|/**    * Helper to verify the actual value by comparing it with a +/- tolerance of    * 10% with the expected value.    *    * @param txt Assertion message    * @param expected The expected value (tolerance will be applied)    * @param actual Actual test outcome    */
specifier|private
name|void
name|assertWithTolerance
parameter_list|(
name|String
name|txt
parameter_list|,
name|long
name|expected
parameter_list|,
name|long
name|actual
parameter_list|)
block|{
name|long
name|lowExpected
init|=
name|expected
operator|-
operator|(
name|expected
operator|/
literal|10L
operator|)
decl_stmt|;
name|long
name|highExpected
init|=
name|expected
operator|+
operator|(
name|expected
operator|/
literal|10L
operator|)
decl_stmt|;
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|(
name|txt
argument_list|)
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" (expected "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|lowExpected
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"<= x<= "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|highExpected
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" but actual = "
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|,
name|actual
operator|>=
name|lowExpected
operator|&&
name|actual
operator|<=
name|highExpected
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper to convert milliseconds to nanoseconds.    *    * @param ms Millisecond inpu    * @return Value in nanoseconds    */
specifier|private
specifier|static
name|long
name|toNano
parameter_list|(
name|long
name|ms
parameter_list|)
block|{
return|return
name|ms
operator|*
literal|1000000
return|;
block|}
comment|/**    * Helper to produce<code>ReadWriteLockMetrics</code> instances.    * The wrapping of lock instances is configuration dependent. This helper ensures that the    * configuration creates wrapped lock instances.    *    * @param lock The lock to wrap    * @param ms The metrics source, storing the lock measurements    * @return The wrapped lock    */
specifier|private
name|ReadWriteLockMetrics
name|create
parameter_list|(
name|ReadWriteLock
name|lock
parameter_list|,
name|MetricsSource
name|ms
parameter_list|)
block|{
name|Configuration
name|dummyConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|dummyConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_COLLECT_LOCK_METRICS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|ReadWriteLockMetrics
operator|)
name|ReadWriteLockMetrics
operator|.
name|wrap
argument_list|(
name|dummyConf
argument_list|,
name|lock
argument_list|,
name|ms
argument_list|)
return|;
block|}
comment|/**    * Runs a simple test where a thread is running in a loop, getting read locks w/o having to    * deal with any contention. The test shows that the locks are received rather quick and tha    * all metrics for write locks remain zero.    */
annotation|@
name|Test
specifier|public
name|void
name|testWithoutContention
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|execTime
init|=
literal|100
decl_stmt|;
name|MetricsSource
name|ms
init|=
name|ReadWriteLockMetrics
operator|.
name|createLockMetricsSource
argument_list|(
literal|"test1"
argument_list|)
decl_stmt|;
name|ReadWriteLock
name|rwl
init|=
name|create
argument_list|(
operator|new
name|ReentrantReadWriteLock
argument_list|()
argument_list|,
name|ms
argument_list|)
decl_stmt|;
name|LockHolder
name|lhR
init|=
operator|new
name|LockHolder
argument_list|(
name|rwl
operator|.
name|readLock
argument_list|()
argument_list|,
name|execTime
argument_list|)
decl_stmt|;
comment|// wait for the thread to do its locks and waits (for 100ms)
name|lhR
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// get the reported metrics
name|MockMetricsCollector
name|tmc
init|=
operator|new
name|MockMetricsCollector
argument_list|()
decl_stmt|;
name|ms
operator|.
name|getMetrics
argument_list|(
name|tmc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MockMetricsCollector
operator|.
name|MockRecord
argument_list|>
name|result
init|=
name|tmc
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected amount of metrics"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MockMetricsCollector
operator|.
name|MockRecord
name|rec
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// verify label and context (context is hard coded)
name|assertEquals
argument_list|(
literal|"Invalid record label"
argument_list|,
literal|"test1"
argument_list|,
name|rec
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid record context"
argument_list|,
literal|"Locking"
argument_list|,
name|rec
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// we expect around exectome / thread loop time executions
name|assertWithTolerance
argument_list|(
literal|"Unexpected count of lock executions (reader)"
argument_list|,
name|execTime
operator|/
name|LockHolder
operator|.
name|LOCK_HOLD_TIME
argument_list|,
name|lhR
operator|.
name|getLockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Counting the locks failed"
argument_list|,
name|lhR
operator|.
name|getLockCount
argument_list|()
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockCount
argument_list|)
argument_list|)
expr_stmt|;
comment|// sanity check in read lock metrics
name|assertNotEquals
argument_list|(
literal|"Local thread should have lock time"
argument_list|,
name|lhR
operator|.
name|getLockSum
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Accounted lock time zero"
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockWaitTimeTotal
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Local measurement larger (overhead)"
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockWaitTimeTotal
argument_list|)
operator|.
name|longValue
argument_list|()
operator|<
name|lhR
operator|.
name|getLockSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Local thread should have max lock time"
argument_list|,
name|lhR
operator|.
name|getLockMax
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Accounted lock max time zero"
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockWaitTimeMax
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Local max larger (overhead)"
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockWaitTimeMax
argument_list|)
operator|.
name|longValue
argument_list|()
operator|<
name|lhR
operator|.
name|getLockMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Max greater or equal to avergae lock time"
argument_list|,
operator|(
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockWaitTimeTotal
argument_list|)
operator|.
name|longValue
argument_list|()
operator|/
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockCount
argument_list|)
operator|.
name|longValue
argument_list|()
operator|)
operator|<=
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockWaitTimeMax
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Lock time less than 1% (no contention)"
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockWaitTimeTotal
argument_list|)
operator|.
name|longValue
argument_list|()
operator|<
name|toNano
argument_list|(
name|execTime
operator|/
literal|100L
argument_list|)
argument_list|)
expr_stmt|;
comment|// sanity check on write lock metrics (should be all zero)
name|assertEquals
argument_list|(
literal|"No writer lock activity expected (total)"
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|WriteLockWaitTimeTotal
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No writer lock activity expected (max)"
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|WriteLockWaitTimeMax
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No writer lock activity expected (count)"
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|WriteLockCount
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test where read/write lock contention is tested.    * This test has a background thread that tries to get read locks within a    * loop while the main thread holds a write lock for half of the tex    * execution time. The test verifies that the reported metric for read lock    * wait time reflects that the thread was blocked until the write lock was    * released. It also performs basic sanity checks on the read and write lock    * metrics.    */
annotation|@
name|Test
specifier|public
name|void
name|testWithContention
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|execTime
init|=
literal|200
decl_stmt|;
name|MetricsSource
name|ms
init|=
name|ReadWriteLockMetrics
operator|.
name|createLockMetricsSource
argument_list|(
literal|"test1"
argument_list|)
decl_stmt|;
name|ReadWriteLock
name|rwl
init|=
name|create
argument_list|(
operator|new
name|ReentrantReadWriteLock
argument_list|()
argument_list|,
name|ms
argument_list|)
decl_stmt|;
name|LockHolder
name|lhR
init|=
operator|new
name|LockHolder
argument_list|(
name|rwl
operator|.
name|readLock
argument_list|()
argument_list|,
name|execTime
argument_list|)
decl_stmt|;
comment|// get a write lock for half of the execution time
try|try
block|{
name|long
name|endOfLock
init|=
name|nanoTime
argument_list|()
operator|+
name|toNano
argument_list|(
name|execTime
operator|/
literal|2
argument_list|)
decl_stmt|;
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
while|while
condition|(
name|nanoTime
argument_list|()
operator|<
name|endOfLock
condition|)
block|{
comment|// spin until end time is reached
block|}
block|}
finally|finally
block|{
name|rwl
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// wait for the thread to do its locks and waits (for 100ms)
name|lhR
operator|.
name|join
argument_list|()
expr_stmt|;
name|MockMetricsCollector
name|tmc
init|=
operator|new
name|MockMetricsCollector
argument_list|()
decl_stmt|;
name|ms
operator|.
name|getMetrics
argument_list|(
name|tmc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MockMetricsCollector
operator|.
name|MockRecord
argument_list|>
name|result
init|=
name|tmc
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected amount of metrics"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MockMetricsCollector
operator|.
name|MockRecord
name|rec
init|=
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// sanity checks for read lock values
name|assertEquals
argument_list|(
literal|"Verifying the loop count (read lock)"
argument_list|,
name|lhR
operator|.
name|getLockCount
argument_list|()
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockCount
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertWithTolerance
argument_list|(
literal|"Only half of possible read locks expected"
argument_list|,
operator|(
name|execTime
operator|/
name|LockHolder
operator|.
name|LOCK_HOLD_TIME
operator|)
operator|/
literal|2
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockCount
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertWithTolerance
argument_list|(
literal|"Max read lock wait time close to write lock hold"
argument_list|,
name|toNano
argument_list|(
name|execTime
operator|/
literal|2
argument_list|)
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockWaitTimeMax
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Total read lock wait time larger than max"
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockWaitTimeMax
argument_list|)
operator|.
name|longValue
argument_list|()
operator|<
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|ReadLockWaitTimeTotal
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// sanity check for write locks
name|assertEquals
argument_list|(
literal|"Write lock count supposed to be one"
argument_list|,
literal|1
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|WriteLockCount
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Write lock wait time non zero"
argument_list|,
literal|0L
operator|<
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|WriteLockWaitTimeTotal
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"With one lock, total should me max"
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|WriteLockWaitTimeTotal
argument_list|)
argument_list|,
name|rec
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|WriteLockWaitTimeMax
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testing the<code>wrap</code> function for different configuration    * combinations.    */
annotation|@
name|Test
specifier|public
name|void
name|testWrap
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|testConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|MetricsSource
name|ms
init|=
name|ReadWriteLockMetrics
operator|.
name|createLockMetricsSource
argument_list|(
literal|"testConf"
argument_list|)
decl_stmt|;
comment|// default = passthrough
name|ReadWriteLock
name|rwlDef
init|=
name|ReadWriteLockMetrics
operator|.
name|wrap
argument_list|(
name|testConf
argument_list|,
operator|new
name|ReentrantReadWriteLock
argument_list|()
argument_list|,
name|ms
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Basic ReentrantReadWriteLock expected"
argument_list|,
name|rwlDef
operator|instanceof
name|ReentrantReadWriteLock
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Basic ReentrantReadWriteLock expected"
argument_list|,
name|rwlDef
operator|instanceof
name|ReadWriteLockMetrics
argument_list|)
expr_stmt|;
comment|// false = pass through
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|testConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_COLLECT_LOCK_METRICS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ReadWriteLock
name|rwlBasic
init|=
name|ReadWriteLockMetrics
operator|.
name|wrap
argument_list|(
name|testConf
argument_list|,
operator|new
name|ReentrantReadWriteLock
argument_list|()
argument_list|,
name|ms
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Basic ReentrantReadWriteLock expected"
argument_list|,
name|rwlBasic
operator|instanceof
name|ReentrantReadWriteLock
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Basic ReentrantReadWriteLock expected"
argument_list|,
name|rwlBasic
operator|instanceof
name|ReadWriteLockMetrics
argument_list|)
expr_stmt|;
comment|// true = wrap
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|testConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|LLAP_COLLECT_LOCK_METRICS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ReadWriteLock
name|rwlWrap
init|=
name|ReadWriteLockMetrics
operator|.
name|wrap
argument_list|(
name|testConf
argument_list|,
operator|new
name|ReentrantReadWriteLock
argument_list|()
argument_list|,
name|ms
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Wrapped lock expected"
argument_list|,
name|rwlWrap
operator|instanceof
name|ReadWriteLockMetrics
argument_list|)
expr_stmt|;
comment|// null = passthrough
name|ReadWriteLock
name|rwlNoConf
init|=
name|ReadWriteLockMetrics
operator|.
name|wrap
argument_list|(
literal|null
argument_list|,
operator|new
name|ReentrantReadWriteLock
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Basic ReentrantReadWriteLock expected"
argument_list|,
name|rwlNoConf
operator|instanceof
name|ReentrantReadWriteLock
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Basic ReentrantReadWriteLock expected"
argument_list|,
name|rwlNoConf
operator|instanceof
name|ReadWriteLockMetrics
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

