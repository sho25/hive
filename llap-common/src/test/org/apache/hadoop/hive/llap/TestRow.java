begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestRow
block|{
annotation|@
name|Test
specifier|public
name|void
name|testUsage
parameter_list|()
block|{
name|Schema
name|schema
init|=
name|createTestSchema
argument_list|()
decl_stmt|;
name|Row
name|row
init|=
operator|new
name|Row
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|iterations
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|iterations
condition|;
operator|++
name|idx
control|)
block|{
comment|// Set the row values
name|boolean
name|isNullCol0
init|=
operator|(
name|rand
operator|.
name|nextDouble
argument_list|()
operator|<=
literal|0.25
operator|)
decl_stmt|;
name|String
name|col0
init|=
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|row
operator|.
name|setValue
argument_list|(
literal|0
argument_list|,
name|isNullCol0
condition|?
literal|null
else|:
name|col0
argument_list|)
expr_stmt|;
name|boolean
name|isNullCol1
init|=
operator|(
name|rand
operator|.
name|nextDouble
argument_list|()
operator|<=
literal|0.25
operator|)
decl_stmt|;
name|Integer
name|col1
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|row
operator|.
name|setValue
argument_list|(
literal|1
argument_list|,
name|isNullCol1
condition|?
literal|null
else|:
name|col1
argument_list|)
expr_stmt|;
comment|// Validate the row values
if|if
condition|(
name|isNullCol0
condition|)
block|{
name|assertTrue
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
literal|0
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
literal|"col0"
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|col0
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|col0
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
literal|"col0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNullCol1
condition|)
block|{
name|assertTrue
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
literal|"col1"
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|row
operator|.
name|getValue
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|col1
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|col1
argument_list|,
name|row
operator|.
name|getValue
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Schema
name|createTestSchema
parameter_list|()
block|{
name|List
argument_list|<
name|FieldDesc
argument_list|>
name|colDescs
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldDesc
argument_list|>
argument_list|()
decl_stmt|;
name|colDescs
operator|.
name|add
argument_list|(
operator|new
name|FieldDesc
argument_list|(
literal|"col0"
argument_list|,
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
name|colDescs
operator|.
name|add
argument_list|(
operator|new
name|FieldDesc
argument_list|(
literal|"col1"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
name|Schema
name|schema
init|=
operator|new
name|Schema
argument_list|(
name|colDescs
argument_list|)
decl_stmt|;
return|return
name|schema
return|;
block|}
block|}
end_class

end_unit

