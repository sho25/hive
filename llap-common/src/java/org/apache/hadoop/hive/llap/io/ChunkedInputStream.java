begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|// Data is expected to be a series of data chunks in the form<chunk size><chunk bytes><chunk size><chunk bytes>
end_comment

begin_comment
comment|// The final data chunk should be a 0-length chunk which will indicate end of input.
end_comment

begin_class
specifier|public
class|class
name|ChunkedInputStream
extends|extends
name|InputStream
block|{
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ChunkedInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DataInputStream
name|din
decl_stmt|;
specifier|private
name|int
name|unreadBytes
init|=
literal|0
decl_stmt|;
comment|// Bytes remaining in the current chunk of data
specifier|private
name|byte
index|[]
name|singleByte
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
specifier|private
name|boolean
name|endOfData
init|=
literal|false
decl_stmt|;
specifier|public
name|ChunkedInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|din
operator|=
operator|new
name|DataInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|din
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|bytesRead
init|=
name|read
argument_list|(
name|singleByte
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
operator|(
name|bytesRead
operator|==
operator|-
literal|1
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|int
operator|)
name|singleByte
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bytesRead
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Negative read length"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// If there is a current unread chunk, read from that, or else get the next chunk.
if|if
condition|(
name|unreadBytes
operator|==
literal|0
condition|)
block|{
try|try
block|{
comment|// Find the next chunk size
name|unreadBytes
operator|=
name|din
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Chunk size "
operator|+
name|unreadBytes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|unreadBytes
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Hit end of data"
argument_list|)
expr_stmt|;
name|endOfData
operator|=
literal|true
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error while attempting to read chunk length"
argument_list|,
name|err
argument_list|)
throw|;
block|}
block|}
name|int
name|bytesToRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|unreadBytes
argument_list|)
decl_stmt|;
try|try
block|{
name|din
operator|.
name|readFully
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|bytesToRead
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error while attempting to read "
operator|+
name|bytesToRead
operator|+
literal|" bytes from current chunk"
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|unreadBytes
operator|-=
name|bytesToRead
expr_stmt|;
name|bytesRead
operator|+=
name|bytesToRead
expr_stmt|;
return|return
name|bytesRead
return|;
block|}
specifier|public
name|boolean
name|isEndOfData
parameter_list|()
block|{
return|return
name|endOfData
return|;
block|}
block|}
end_class

end_unit

