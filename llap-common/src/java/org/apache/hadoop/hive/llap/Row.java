begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_class
specifier|public
class|class
name|Row
block|{
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|Writable
index|[]
name|colValues
decl_stmt|;
specifier|private
specifier|final
name|boolean
index|[]
name|nullIndicators
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nameToIndexMapping
decl_stmt|;
specifier|public
name|Row
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|colValues
operator|=
operator|new
name|Writable
index|[
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|nullIndicators
operator|=
operator|new
name|boolean
index|[
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|nameToIndexMapping
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldDesc
argument_list|>
name|colDescs
init|=
name|schema
operator|.
name|getColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|colDescs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|FieldDesc
name|colDesc
init|=
name|colDescs
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|nameToIndexMapping
operator|.
name|put
argument_list|(
name|colDesc
operator|.
name|getName
argument_list|()
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|colValues
index|[
name|idx
index|]
operator|=
name|createWritableForType
argument_list|(
name|colDesc
operator|.
name|getTypeDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Writable
name|getValue
parameter_list|(
name|int
name|colIndex
parameter_list|)
block|{
if|if
condition|(
name|nullIndicators
index|[
name|colIndex
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|colValues
index|[
name|colIndex
index|]
return|;
block|}
specifier|public
name|Writable
name|getValue
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
name|Integer
name|idx
init|=
name|nameToIndexMapping
operator|.
name|get
argument_list|(
name|colName
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|idx
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
name|void
name|setValue
parameter_list|(
name|int
name|colIdx
parameter_list|,
name|Writable
name|value
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|colIdx
operator|<=
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|nullIndicators
index|[
name|colIdx
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|nullIndicators
index|[
name|colIdx
index|]
operator|=
literal|false
expr_stmt|;
name|FieldDesc
name|colDesc
init|=
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|get
argument_list|(
name|colIdx
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|colDesc
operator|.
name|getTypeDesc
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
operator|(
operator|(
name|BooleanWritable
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|BooleanWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TINYINT
case|:
operator|(
operator|(
name|ByteWritable
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|ByteWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SMALLINT
case|:
operator|(
operator|(
name|ShortWritable
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|ShortWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
operator|(
operator|(
name|IntWritable
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|IntWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BIGINT
case|:
operator|(
operator|(
name|LongWritable
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|LongWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
operator|(
operator|(
name|FloatWritable
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|FloatWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
operator|(
operator|(
name|DoubleWritable
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|DoubleWritable
operator|)
name|value
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
comment|// Just handle char/varchar as Text
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
operator|(
operator|(
name|Text
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
name|Text
operator|)
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
operator|(
operator|(
name|DateWritable
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
name|DateWritable
operator|)
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
operator|(
operator|(
name|TimestampWritable
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
name|TimestampWritable
operator|)
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
operator|(
operator|(
name|BytesWritable
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
operator|(
name|BytesWritable
operator|)
name|value
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|colValues
index|[
name|colIdx
index|]
operator|)
operator|.
name|set
argument_list|(
operator|(
name|HiveDecimalWritable
operator|)
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
name|Writable
name|createWritableForType
parameter_list|(
name|TypeDesc
name|typeDesc
parameter_list|)
block|{
switch|switch
condition|(
name|typeDesc
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|new
name|BooleanWritable
argument_list|()
return|;
case|case
name|TINYINT
case|:
return|return
operator|new
name|ByteWritable
argument_list|()
return|;
case|case
name|SMALLINT
case|:
return|return
operator|new
name|ShortWritable
argument_list|()
return|;
case|case
name|INT
case|:
return|return
operator|new
name|IntWritable
argument_list|()
return|;
case|case
name|BIGINT
case|:
return|return
operator|new
name|LongWritable
argument_list|()
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatWritable
argument_list|()
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleWritable
argument_list|()
return|;
case|case
name|STRING
case|:
comment|// Just handle char/varchar as Text
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
operator|new
name|Text
argument_list|()
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateWritable
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampWritable
argument_list|()
return|;
case|case
name|BINARY
case|:
return|return
operator|new
name|BytesWritable
argument_list|()
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|HiveDecimalWritable
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot create writable for "
operator|+
name|typeDesc
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

