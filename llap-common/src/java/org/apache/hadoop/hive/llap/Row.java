begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
specifier|public
class|class
name|Row
block|{
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|Object
index|[]
name|colValues
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nameToIndexMapping
decl_stmt|;
specifier|public
name|Row
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|colValues
operator|=
operator|new
name|Object
index|[
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|this
operator|.
name|nameToIndexMapping
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldDesc
argument_list|>
name|colDescs
init|=
name|schema
operator|.
name|getColumns
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|colDescs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
name|FieldDesc
name|colDesc
init|=
name|colDescs
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|nameToIndexMapping
operator|.
name|put
argument_list|(
name|colDesc
operator|.
name|getName
argument_list|()
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|getValue
parameter_list|(
name|int
name|colIndex
parameter_list|)
block|{
return|return
name|colValues
index|[
name|colIndex
index|]
return|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
name|Integer
name|idx
init|=
name|nameToIndexMapping
operator|.
name|get
argument_list|(
name|colName
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|idx
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Boolean
name|getBoolean
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Boolean
name|getBoolean
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|Byte
name|getByte
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|Byte
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Byte
name|getByte
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|Byte
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|Short
name|getShort
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|Short
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Short
name|getShort
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|Short
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|Integer
name|getInt
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Integer
name|getInt
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|Integer
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|Long
name|getLong
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Long
name|getLong
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|Long
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|Float
name|getFloat
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|Float
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Float
name|getFloat
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|Float
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getDouble
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|Double
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Double
name|getDouble
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|Double
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|String
name|getString
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|String
name|getString
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|Date
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Date
name|getDate
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|Date
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|Timestamp
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|Timestamp
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|BigDecimal
name|getDecimal
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|BigDecimal
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|BigDecimal
name|getDecimal
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|BigDecimal
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|?
argument_list|>
name|getList
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|?
argument_list|>
name|getList
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getMap
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getMap
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
comment|// Struct value is simply a list of values.
comment|// The schema can be used to map the field name to the position in the list.
specifier|public
name|List
argument_list|<
name|?
argument_list|>
name|getStruct
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|getValue
argument_list|(
name|idx
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|?
argument_list|>
name|getStruct
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
return|return
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|getValue
argument_list|(
name|colName
argument_list|)
return|;
block|}
specifier|public
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
name|void
name|setValue
parameter_list|(
name|int
name|colIdx
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
name|colValues
index|[
name|colIdx
index|]
operator|=
name|obj
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|schema
operator|.
name|getColumns
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|Object
name|val
init|=
name|getValue
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|val
operator|==
literal|null
condition|?
literal|"null"
else|:
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

