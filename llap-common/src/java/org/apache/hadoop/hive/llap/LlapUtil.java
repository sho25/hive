begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LlapUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LlapUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|UserGroupInformation
name|loginWithKerberos
parameter_list|(
name|String
name|principal
parameter_list|,
name|String
name|keytabFile
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|principal
operator|.
name|isEmpty
argument_list|()
operator|||
name|keytabFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Kerberos principal and/or keytab are empty"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Logging in as "
operator|+
name|principal
operator|+
literal|" via "
operator|+
name|keytabFile
argument_list|)
expr_stmt|;
return|return
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|principal
argument_list|,
literal|"0.0.0.0"
argument_list|)
argument_list|,
name|keytabFile
argument_list|)
return|;
block|}
specifier|private
specifier|final
specifier|static
name|Pattern
name|hostsRe
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^A-Za-z0-9_-]"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|generateClusterName
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|hosts
init|=
name|HiveConf
operator|.
name|getTrimmedVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|LLAP_DAEMON_SERVICE_HOSTS
argument_list|)
decl_stmt|;
return|return
name|hostsRe
operator|.
name|matcher
argument_list|(
name|hosts
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
condition|?
name|hosts
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|hosts
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getUserNameFromPrincipal
parameter_list|(
name|String
name|principal
parameter_list|)
block|{
comment|// Based on SecurityUtil.
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
index|[]
name|components
init|=
name|principal
operator|.
name|split
argument_list|(
literal|"[/@]"
argument_list|)
decl_stmt|;
return|return
operator|(
name|components
operator|==
literal|null
operator|||
name|components
operator|.
name|length
operator|!=
literal|3
operator|)
condition|?
name|principal
else|:
name|components
index|[
literal|0
index|]
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|StatisticsData
argument_list|>
name|getStatisticsForScheme
parameter_list|(
specifier|final
name|String
name|scheme
parameter_list|,
specifier|final
name|List
argument_list|<
name|StatisticsData
argument_list|>
name|stats
parameter_list|)
block|{
name|List
argument_list|<
name|StatisticsData
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
operator|&&
name|scheme
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StatisticsData
name|s
range|:
name|stats
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|FileSystem
operator|.
name|Statistics
argument_list|>
name|getCombinedFileSystemStatistics
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|FileSystem
operator|.
name|Statistics
argument_list|>
name|allStats
init|=
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FileSystem
operator|.
name|Statistics
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|allStats
control|)
block|{
specifier|final
name|String
name|scheme
init|=
name|statistics
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|containsKey
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|FileSystem
operator|.
name|Statistics
name|existing
init|=
name|result
operator|.
name|get
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|Statistics
name|combined
init|=
name|combineFileSystemStatistics
argument_list|(
name|existing
argument_list|,
name|statistics
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|scheme
argument_list|,
name|combined
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|put
argument_list|(
name|scheme
argument_list|,
name|statistics
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|FileSystem
operator|.
name|Statistics
name|combineFileSystemStatistics
parameter_list|(
specifier|final
name|FileSystem
operator|.
name|Statistics
name|s1
parameter_list|,
specifier|final
name|FileSystem
operator|.
name|Statistics
name|s2
parameter_list|)
block|{
name|FileSystem
operator|.
name|Statistics
name|result
init|=
operator|new
name|FileSystem
operator|.
name|Statistics
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|result
operator|.
name|incrementReadOps
argument_list|(
name|s2
operator|.
name|getReadOps
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|incrementLargeReadOps
argument_list|(
name|s2
operator|.
name|getLargeReadOps
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|incrementWriteOps
argument_list|(
name|s2
operator|.
name|getWriteOps
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|incrementBytesRead
argument_list|(
name|s2
operator|.
name|getBytesRead
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|incrementBytesWritten
argument_list|(
name|s2
operator|.
name|getBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|StatisticsData
argument_list|>
name|cloneThreadLocalFileSystemStatistics
parameter_list|()
block|{
name|List
argument_list|<
name|StatisticsData
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// thread local filesystem stats is private and cannot be cloned. So make a copy to new class
for|for
control|(
name|FileSystem
operator|.
name|Statistics
name|statistics
range|:
name|FileSystem
operator|.
name|getAllStatistics
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|StatisticsData
argument_list|(
name|statistics
operator|.
name|getScheme
argument_list|()
argument_list|,
name|statistics
operator|.
name|getThreadStatistics
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
class|class
name|StatisticsData
block|{
name|long
name|bytesRead
decl_stmt|;
name|long
name|bytesWritten
decl_stmt|;
name|int
name|readOps
decl_stmt|;
name|int
name|largeReadOps
decl_stmt|;
name|int
name|writeOps
decl_stmt|;
name|String
name|scheme
decl_stmt|;
specifier|public
name|StatisticsData
parameter_list|(
name|String
name|scheme
parameter_list|,
name|FileSystem
operator|.
name|Statistics
operator|.
name|StatisticsData
name|fsStats
parameter_list|)
block|{
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
name|this
operator|.
name|bytesRead
operator|=
name|fsStats
operator|.
name|getBytesRead
argument_list|()
expr_stmt|;
name|this
operator|.
name|bytesWritten
operator|=
name|fsStats
operator|.
name|getBytesWritten
argument_list|()
expr_stmt|;
name|this
operator|.
name|readOps
operator|=
name|fsStats
operator|.
name|getReadOps
argument_list|()
expr_stmt|;
name|this
operator|.
name|largeReadOps
operator|=
name|fsStats
operator|.
name|getLargeReadOps
argument_list|()
expr_stmt|;
name|this
operator|.
name|writeOps
operator|=
name|fsStats
operator|.
name|getWriteOps
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getBytesRead
parameter_list|()
block|{
return|return
name|bytesRead
return|;
block|}
specifier|public
name|long
name|getBytesWritten
parameter_list|()
block|{
return|return
name|bytesWritten
return|;
block|}
specifier|public
name|int
name|getReadOps
parameter_list|()
block|{
return|return
name|readOps
return|;
block|}
specifier|public
name|int
name|getLargeReadOps
parameter_list|()
block|{
return|return
name|largeReadOps
return|;
block|}
specifier|public
name|int
name|getWriteOps
parameter_list|()
block|{
return|return
name|writeOps
return|;
block|}
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|scheme
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" scheme: "
argument_list|)
operator|.
name|append
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" bytesRead: "
argument_list|)
operator|.
name|append
argument_list|(
name|bytesRead
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" bytesWritten: "
argument_list|)
operator|.
name|append
argument_list|(
name|bytesWritten
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" readOps: "
argument_list|)
operator|.
name|append
argument_list|(
name|readOps
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" largeReadOps: "
argument_list|)
operator|.
name|append
argument_list|(
name|largeReadOps
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" writeOps: "
argument_list|)
operator|.
name|append
argument_list|(
name|writeOps
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

