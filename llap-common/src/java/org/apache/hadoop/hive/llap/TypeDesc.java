begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_class
specifier|public
class|class
name|TypeDesc
implements|implements
name|Writable
block|{
specifier|public
specifier|static
enum|enum
name|Type
block|{
name|BOOLEAN
block|,
name|TINYINT
block|,
name|SMALLINT
block|,
name|INT
block|,
name|BIGINT
block|,
name|FLOAT
block|,
name|DOUBLE
block|,
name|STRING
block|,
name|CHAR
block|,
name|VARCHAR
block|,
name|DATE
block|,
name|TIMESTAMP
block|,
name|BINARY
block|,
name|DECIMAL
block|,   }
specifier|private
name|TypeDesc
operator|.
name|Type
name|type
decl_stmt|;
specifier|private
name|int
name|precision
decl_stmt|;
specifier|private
name|int
name|scale
decl_stmt|;
comment|// For types with no type qualifiers
specifier|public
name|TypeDesc
parameter_list|(
name|TypeDesc
operator|.
name|Type
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// For decimal types
specifier|public
name|TypeDesc
parameter_list|(
name|TypeDesc
operator|.
name|Type
name|type
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
comment|// For char/varchar types
specifier|public
name|TypeDesc
parameter_list|(
name|TypeDesc
operator|.
name|Type
name|type
parameter_list|,
name|int
name|precision
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|precision
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Should be used for serialization only
specifier|public
name|TypeDesc
parameter_list|()
block|{
name|this
argument_list|(
name|TypeDesc
operator|.
name|Type
operator|.
name|INT
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypeDesc
operator|.
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|int
name|getPrecision
parameter_list|()
block|{
return|return
name|precision
return|;
block|}
specifier|public
name|int
name|getScale
parameter_list|()
block|{
return|return
name|scale
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DECIMAL
case|:
return|return
name|type
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"("
operator|+
name|precision
operator|+
literal|","
operator|+
name|scale
operator|+
literal|")"
return|;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
name|type
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"("
operator|+
name|precision
operator|+
literal|")"
return|;
default|default:
return|return
name|type
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|type
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|type
operator|=
name|TypeDesc
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
name|precision
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|scale
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

