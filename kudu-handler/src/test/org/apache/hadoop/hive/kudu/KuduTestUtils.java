begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|ColumnSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|ColumnTypeAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Utilities for shared kudu-handler testing logic.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|KuduTestUtils
block|{
specifier|private
name|KuduTestUtils
parameter_list|()
block|{}
specifier|public
specifier|static
name|Schema
name|getAllTypesSchema
parameter_list|()
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Schema
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"key"
argument_list|,
name|Type
operator|.
name|INT8
argument_list|)
operator|.
name|key
argument_list|(
literal|true
argument_list|)
operator|.
name|comment
argument_list|(
literal|"The key column."
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"int16"
argument_list|,
name|Type
operator|.
name|INT16
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"int32"
argument_list|,
name|Type
operator|.
name|INT32
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"int64"
argument_list|,
name|Type
operator|.
name|INT64
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"bool"
argument_list|,
name|Type
operator|.
name|BOOL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"float"
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"double"
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"string"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"binary"
argument_list|,
name|Type
operator|.
name|BINARY
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"timestamp"
argument_list|,
name|Type
operator|.
name|UNIXTIME_MICROS
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"decimal"
argument_list|,
name|Type
operator|.
name|DECIMAL
argument_list|)
operator|.
name|typeAttributes
argument_list|(
operator|new
name|ColumnTypeAttributes
operator|.
name|ColumnTypeAttributesBuilder
argument_list|()
operator|.
name|precision
argument_list|(
literal|5
argument_list|)
operator|.
name|scale
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"null"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|nullable
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"default"
argument_list|,
name|Type
operator|.
name|INT32
argument_list|)
operator|.
name|defaultValue
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

