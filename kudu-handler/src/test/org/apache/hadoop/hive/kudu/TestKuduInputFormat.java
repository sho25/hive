begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduInputFormat
operator|.
name|KuduInputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduInputFormat
operator|.
name|KuduRecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|ColumnSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|CreateTableOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|Insert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|PartialRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|test
operator|.
name|KuduTestHarness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduHiveUtils
operator|.
name|toHiveType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduStorageHandler
operator|.
name|KUDU_MASTER_ADDRS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduStorageHandler
operator|.
name|KUDU_TABLE_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduTestUtils
operator|.
name|getAllTypesSchema
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for the KuduInputFormat implementation.  */
end_comment

begin_class
specifier|public
class|class
name|TestKuduInputFormat
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"default.TestKuduInputFormat"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Schema
name|SCHEMA
init|=
name|getAllTypesSchema
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Configuration
name|BASE_CONF
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|NOW_MS
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PartialRow
name|ROW
decl_stmt|;
static|static
block|{
name|ROW
operator|=
name|SCHEMA
operator|.
name|newPartialRow
argument_list|()
expr_stmt|;
name|ROW
operator|.
name|addByte
argument_list|(
literal|"key"
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addShort
argument_list|(
literal|"int16"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addInt
argument_list|(
literal|"int32"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addLong
argument_list|(
literal|"int64"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addBoolean
argument_list|(
literal|"bool"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addFloat
argument_list|(
literal|"float"
argument_list|,
literal|1.1f
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addDouble
argument_list|(
literal|"double"
argument_list|,
literal|1.1d
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addString
argument_list|(
literal|"string"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addBinary
argument_list|(
literal|"binary"
argument_list|,
literal|"one"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addTimestamp
argument_list|(
literal|"timestamp"
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|NOW_MS
argument_list|)
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addDecimal
argument_list|(
literal|"decimal"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"1.111"
argument_list|)
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|setNull
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
comment|// Not setting the "default" column.
block|}
annotation|@
name|Rule
specifier|public
name|KuduTestHarness
name|harness
init|=
operator|new
name|KuduTestHarness
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set the base configuration values.
name|BASE_CONF
operator|.
name|set
argument_list|(
name|KUDU_MASTER_ADDRS_KEY
argument_list|,
name|harness
operator|.
name|getMasterAddressesAsString
argument_list|()
argument_list|)
expr_stmt|;
name|BASE_CONF
operator|.
name|set
argument_list|(
name|KUDU_TABLE_NAME_KEY
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|BASE_CONF
operator|.
name|set
argument_list|(
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
comment|// Create the test Kudu table.
name|CreateTableOptions
name|options
init|=
operator|new
name|CreateTableOptions
argument_list|()
operator|.
name|setRangePartitionColumns
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"key"
argument_list|)
argument_list|)
decl_stmt|;
name|harness
operator|.
name|getClient
argument_list|()
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|SCHEMA
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// Insert a test row.
name|KuduTable
name|table
init|=
name|harness
operator|.
name|getClient
argument_list|()
operator|.
name|openTable
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|KuduSession
name|session
init|=
name|harness
operator|.
name|getClient
argument_list|()
operator|.
name|newSession
argument_list|()
decl_stmt|;
name|Insert
name|insert
init|=
name|table
operator|.
name|newInsert
argument_list|()
decl_stmt|;
name|PartialRow
name|insertRow
init|=
name|insert
operator|.
name|getRow
argument_list|()
decl_stmt|;
comment|// Use KuduWritable, to populate the insert row.
operator|new
name|KuduWritable
argument_list|(
name|ROW
argument_list|)
operator|.
name|populateRow
argument_list|(
name|insertRow
argument_list|)
expr_stmt|;
name|session
operator|.
name|apply
argument_list|(
name|insert
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|KuduInputFormat
name|input
init|=
operator|new
name|KuduInputFormat
argument_list|()
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|BASE_CONF
argument_list|)
decl_stmt|;
name|String
name|columnsStr
init|=
name|SCHEMA
operator|.
name|getColumns
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ColumnSchema
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|columnsStr
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|input
operator|.
name|getSplits
argument_list|(
name|jobConf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|KuduInputSplit
name|split
init|=
operator|(
name|KuduInputSplit
operator|)
name|splits
index|[
literal|0
index|]
decl_stmt|;
name|KuduRecordReader
name|reader
init|=
operator|(
name|KuduRecordReader
operator|)
name|input
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|jobConf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
argument_list|)
expr_stmt|;
name|RowResult
name|value
init|=
name|reader
operator|.
name|getCurrentValue
argument_list|()
operator|.
name|getRowResult
argument_list|()
decl_stmt|;
name|verfiyRow
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProjection
parameter_list|()
throws|throws
name|Exception
block|{
name|KuduInputFormat
name|input
init|=
operator|new
name|KuduInputFormat
argument_list|()
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|BASE_CONF
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"bool,key"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|input
operator|.
name|getSplits
argument_list|(
name|jobConf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|KuduInputSplit
name|split
init|=
operator|(
name|KuduInputSplit
operator|)
name|splits
index|[
literal|0
index|]
decl_stmt|;
name|KuduRecordReader
name|reader
init|=
operator|(
name|KuduRecordReader
operator|)
name|input
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|jobConf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
argument_list|)
expr_stmt|;
name|RowResult
name|value
init|=
name|reader
operator|.
name|getCurrentValue
argument_list|()
operator|.
name|getRowResult
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|value
operator|.
name|getSchema
argument_list|()
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|.
name|getBoolean
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|value
operator|.
name|getByte
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingTable
parameter_list|()
throws|throws
name|Exception
block|{
name|KuduInputFormat
name|input
init|=
operator|new
name|KuduInputFormat
argument_list|()
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|BASE_CONF
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|unset
argument_list|(
name|KUDU_TABLE_NAME_KEY
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
try|try
block|{
name|input
operator|.
name|getSplits
argument_list|(
name|jobConf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail on missing master addresses"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"kudu.table_name is not set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadTable
parameter_list|()
throws|throws
name|Exception
block|{
name|KuduInputFormat
name|input
init|=
operator|new
name|KuduInputFormat
argument_list|()
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|BASE_CONF
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|KUDU_TABLE_NAME_KEY
argument_list|,
literal|"default.notatable"
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
try|try
block|{
name|input
operator|.
name|getSplits
argument_list|(
name|jobConf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail on a bad table"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Kudu table does not exist: default.notatable"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|KuduInputFormat
name|input
init|=
operator|new
name|KuduInputFormat
argument_list|()
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|BASE_CONF
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"missing"
argument_list|)
expr_stmt|;
try|try
block|{
name|input
operator|.
name|getSplits
argument_list|(
name|jobConf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail on missing column"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Unknown column: missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleSplits
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"default.twoPartitionTable"
decl_stmt|;
name|Schema
name|schema
init|=
operator|new
name|Schema
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"key"
argument_list|,
name|Type
operator|.
name|INT32
argument_list|)
operator|.
name|key
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|ColumnSchema
operator|.
name|ColumnSchemaBuilder
argument_list|(
literal|"string"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|CreateTableOptions
name|options
init|=
operator|new
name|CreateTableOptions
argument_list|()
operator|.
name|addHashPartitions
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"key"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|harness
operator|.
name|getClient
argument_list|()
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|schema
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|// Insert multiple test rows.
name|KuduTable
name|table
init|=
name|harness
operator|.
name|getClient
argument_list|()
operator|.
name|openTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|KuduSession
name|session
init|=
name|harness
operator|.
name|getClient
argument_list|()
operator|.
name|newSession
argument_list|()
decl_stmt|;
name|Insert
name|insert1
init|=
name|table
operator|.
name|newInsert
argument_list|()
decl_stmt|;
name|PartialRow
name|row1
init|=
name|insert1
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|row1
operator|.
name|addInt
argument_list|(
literal|"key"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|row1
operator|.
name|addString
argument_list|(
literal|"string"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|session
operator|.
name|apply
argument_list|(
name|insert1
argument_list|)
expr_stmt|;
name|Insert
name|insert2
init|=
name|table
operator|.
name|newInsert
argument_list|()
decl_stmt|;
name|PartialRow
name|row2
init|=
name|insert2
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|row2
operator|.
name|addInt
argument_list|(
literal|"key"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|row2
operator|.
name|addString
argument_list|(
literal|"string"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|session
operator|.
name|apply
argument_list|(
name|insert2
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|KuduInputFormat
name|input
init|=
operator|new
name|KuduInputFormat
argument_list|()
decl_stmt|;
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|BASE_CONF
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|KUDU_TABLE_NAME_KEY
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|input
operator|.
name|getSplits
argument_list|(
name|jobConf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPredicate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Insert a second test row that will be filtered out.
name|KuduTable
name|table
init|=
name|harness
operator|.
name|getClient
argument_list|()
operator|.
name|openTable
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|KuduSession
name|session
init|=
name|harness
operator|.
name|getClient
argument_list|()
operator|.
name|newSession
argument_list|()
decl_stmt|;
name|Insert
name|insert
init|=
name|table
operator|.
name|newInsert
argument_list|()
decl_stmt|;
name|PartialRow
name|row
init|=
name|insert
operator|.
name|getRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|addByte
argument_list|(
literal|"key"
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
expr_stmt|;
name|row
operator|.
name|addShort
argument_list|(
literal|"int16"
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|row
operator|.
name|addInt
argument_list|(
literal|"int32"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|row
operator|.
name|addLong
argument_list|(
literal|"int64"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|row
operator|.
name|addBoolean
argument_list|(
literal|"bool"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|row
operator|.
name|addFloat
argument_list|(
literal|"float"
argument_list|,
literal|2.2f
argument_list|)
expr_stmt|;
name|row
operator|.
name|addDouble
argument_list|(
literal|"double"
argument_list|,
literal|2.2d
argument_list|)
expr_stmt|;
name|row
operator|.
name|addString
argument_list|(
literal|"string"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addBinary
argument_list|(
literal|"binary"
argument_list|,
literal|"two"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addTimestamp
argument_list|(
literal|"timestamp"
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|NOW_MS
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|addDecimal
argument_list|(
literal|"decimal"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"2.222"
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|setNull
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
comment|// Not setting the "default" column.
name|session
operator|.
name|apply
argument_list|(
name|insert
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|KuduInputFormat
name|input
init|=
operator|new
name|KuduInputFormat
argument_list|()
decl_stmt|;
comment|// Test an equality predicate for each column.
for|for
control|(
name|ColumnSchema
name|col
range|:
name|SCHEMA
operator|.
name|getColumns
argument_list|()
control|)
block|{
comment|// Skip null and default columns because they don't have a value to use.
comment|// Skip binary columns because binary predicates are not supported. (HIVE-11370)
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
operator|||
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
operator|||
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|JobConf
name|jobConf
init|=
operator|new
name|JobConf
argument_list|(
name|BASE_CONF
argument_list|)
decl_stmt|;
name|String
name|columnsStr
init|=
name|SCHEMA
operator|.
name|getColumns
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ColumnSchema
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|columnsStr
argument_list|)
expr_stmt|;
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|toHiveType
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|,
name|col
operator|.
name|getTypeAttributes
argument_list|()
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
name|col
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|typeInfo
argument_list|,
name|ROW
operator|.
name|getObject
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constExpr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|predicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPEqual
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|String
name|filterExpr
init|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|predicateExpr
argument_list|)
decl_stmt|;
name|jobConf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|input
operator|.
name|getSplits
argument_list|(
name|jobConf
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|KuduInputSplit
name|split
init|=
operator|(
name|KuduInputSplit
operator|)
name|splits
index|[
literal|0
index|]
decl_stmt|;
name|KuduRecordReader
name|reader
init|=
operator|(
name|KuduRecordReader
operator|)
name|input
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|jobConf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|nextKeyValue
argument_list|()
argument_list|)
expr_stmt|;
name|RowResult
name|value
init|=
name|reader
operator|.
name|getCurrentValue
argument_list|()
operator|.
name|getRowResult
argument_list|()
decl_stmt|;
name|verfiyRow
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Extra row on column: "
operator|+
name|col
operator|.
name|getName
argument_list|()
argument_list|,
name|reader
operator|.
name|nextKeyValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verfiyRow
parameter_list|(
name|RowResult
name|value
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|SCHEMA
operator|.
name|getColumnCount
argument_list|()
argument_list|,
name|value
operator|.
name|getSchema
argument_list|()
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROW
operator|.
name|getByte
argument_list|(
literal|0
argument_list|)
argument_list|,
name|value
operator|.
name|getByte
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROW
operator|.
name|getShort
argument_list|(
literal|1
argument_list|)
argument_list|,
name|value
operator|.
name|getShort
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROW
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROW
operator|.
name|getLong
argument_list|(
literal|3
argument_list|)
argument_list|,
name|value
operator|.
name|getLong
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROW
operator|.
name|getBoolean
argument_list|(
literal|4
argument_list|)
argument_list|,
name|value
operator|.
name|getBoolean
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROW
operator|.
name|getFloat
argument_list|(
literal|5
argument_list|)
argument_list|,
name|value
operator|.
name|getFloat
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROW
operator|.
name|getDouble
argument_list|(
literal|6
argument_list|)
argument_list|,
name|value
operator|.
name|getDouble
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROW
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
argument_list|,
name|value
operator|.
name|getString
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ROW
operator|.
name|getBinaryCopy
argument_list|(
literal|8
argument_list|)
argument_list|,
name|value
operator|.
name|getBinaryCopy
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROW
operator|.
name|getTimestamp
argument_list|(
literal|9
argument_list|)
argument_list|,
name|value
operator|.
name|getTimestamp
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROW
operator|.
name|getDecimal
argument_list|(
literal|10
argument_list|)
argument_list|,
name|value
operator|.
name|getDecimal
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|value
operator|.
name|isNull
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|value
operator|.
name|getInt
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
comment|// default.
block|}
block|}
end_class

end_unit

