begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStoragePredicateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFBaseCompare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFIn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|ColumnSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|CreateTableOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|PartialRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|test
operator|.
name|KuduTestHarness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduHiveUtils
operator|.
name|toHiveType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduStorageHandler
operator|.
name|KUDU_MASTER_ADDRS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduStorageHandler
operator|.
name|KUDU_TABLE_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduTestUtils
operator|.
name|getAllTypesSchema
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for the KuduPredicateHandler implementation.  */
end_comment

begin_class
specifier|public
class|class
name|TestKuduPredicateHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"default.TestKuduPredicateHandler"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Schema
name|SCHEMA
init|=
name|getAllTypesSchema
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Configuration
name|BASE_CONF
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|NOW_MS
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|PartialRow
name|ROW
decl_stmt|;
static|static
block|{
name|ROW
operator|=
name|SCHEMA
operator|.
name|newPartialRow
argument_list|()
expr_stmt|;
name|ROW
operator|.
name|addByte
argument_list|(
literal|"key"
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addShort
argument_list|(
literal|"int16"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addInt
argument_list|(
literal|"int32"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addLong
argument_list|(
literal|"int64"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addBoolean
argument_list|(
literal|"bool"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addFloat
argument_list|(
literal|"float"
argument_list|,
literal|1.1f
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addDouble
argument_list|(
literal|"double"
argument_list|,
literal|1.1d
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addString
argument_list|(
literal|"string"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addBinary
argument_list|(
literal|"binary"
argument_list|,
literal|"one"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addTimestamp
argument_list|(
literal|"timestamp"
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|NOW_MS
argument_list|)
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|addDecimal
argument_list|(
literal|"decimal"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"1.111"
argument_list|)
argument_list|)
expr_stmt|;
name|ROW
operator|.
name|setNull
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
comment|// Not setting the "default" column.
block|}
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|GenericUDF
argument_list|>
name|COMPARISON_UDFS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GenericUDFOPEqual
argument_list|()
argument_list|,
operator|new
name|GenericUDFOPLessThan
argument_list|()
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|GenericUDF
argument_list|>
name|NULLABLE_UDFS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|GenericUDFOPNull
argument_list|()
argument_list|,
operator|new
name|GenericUDFOPNotNull
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|KuduTestHarness
name|harness
init|=
operator|new
name|KuduTestHarness
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set the base configuration values.
name|BASE_CONF
operator|.
name|set
argument_list|(
name|KUDU_MASTER_ADDRS_KEY
argument_list|,
name|harness
operator|.
name|getMasterAddressesAsString
argument_list|()
argument_list|)
expr_stmt|;
name|BASE_CONF
operator|.
name|set
argument_list|(
name|KUDU_TABLE_NAME_KEY
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|BASE_CONF
operator|.
name|set
argument_list|(
name|FileInputFormat
operator|.
name|INPUT_DIR
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
comment|// Create the test Kudu table.
name|CreateTableOptions
name|options
init|=
operator|new
name|CreateTableOptions
argument_list|()
operator|.
name|setRangePartitionColumns
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"key"
argument_list|)
argument_list|)
decl_stmt|;
name|harness
operator|.
name|getClient
argument_list|()
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|SCHEMA
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComparisonPredicates
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ColumnSchema
name|col
range|:
name|SCHEMA
operator|.
name|getColumns
argument_list|()
control|)
block|{
comment|// Skip null and default columns because they don't have a value to use.
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
operator|||
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|toHiveType
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|,
name|col
operator|.
name|getTypeAttributes
argument_list|()
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
name|col
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|typeInfo
argument_list|,
name|ROW
operator|.
name|getObject
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constExpr
argument_list|)
expr_stmt|;
for|for
control|(
name|GenericUDF
name|udf
range|:
name|COMPARISON_UDFS
control|)
block|{
name|ExprNodeGenericFuncDesc
name|predicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
name|udf
argument_list|,
name|children
argument_list|)
decl_stmt|;
comment|// Verify KuduPredicateHandler.decompose
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
name|decompose
init|=
name|KuduPredicateHandler
operator|.
name|decompose
argument_list|(
name|predicateExpr
argument_list|,
name|SCHEMA
argument_list|)
decl_stmt|;
comment|// Binary predicates are not supported. (HIVE-11370)
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|decompose
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported comparison UDF and type (%s, %s)"
argument_list|,
name|udf
argument_list|,
name|typeInfo
argument_list|)
argument_list|,
name|decompose
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported comparison UDF and type (%s, %s)"
argument_list|,
name|udf
argument_list|,
name|typeInfo
argument_list|)
argument_list|,
name|decompose
operator|.
name|pushedPredicate
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported comparison UDF and type (%s, %s)"
argument_list|,
name|udf
argument_list|,
name|typeInfo
argument_list|)
argument_list|,
name|decompose
operator|.
name|residualPredicate
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|predicates
init|=
name|expressionToPredicates
argument_list|(
name|predicateExpr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|predicates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scanWithPredicates
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotComparisonPredicates
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ColumnSchema
name|col
range|:
name|SCHEMA
operator|.
name|getColumns
argument_list|()
control|)
block|{
comment|// Skip null and default columns because they don't have a value to use.
comment|// Skip binary columns because binary predicates are not supported. (HIVE-11370)
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
operator|||
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
operator|||
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|toHiveType
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|,
name|col
operator|.
name|getTypeAttributes
argument_list|()
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
name|col
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|typeInfo
argument_list|,
name|ROW
operator|.
name|getObject
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constExpr
argument_list|)
expr_stmt|;
for|for
control|(
name|GenericUDF
name|udf
range|:
name|COMPARISON_UDFS
control|)
block|{
name|ExprNodeGenericFuncDesc
name|childExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
name|udf
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|notChildren
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|notChildren
operator|.
name|add
argument_list|(
name|childExpr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|predicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPNot
argument_list|()
argument_list|,
name|notChildren
argument_list|)
decl_stmt|;
comment|// Verify KuduPredicateHandler.decompose
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
name|decompose
init|=
name|KuduPredicateHandler
operator|.
name|decompose
argument_list|(
name|predicateExpr
argument_list|,
name|SCHEMA
argument_list|)
decl_stmt|;
comment|// See note in KuduPredicateHandler.newAnalyzer.
name|assertNull
argument_list|(
name|decompose
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|predicates
init|=
name|expressionToPredicates
argument_list|(
name|predicateExpr
argument_list|)
decl_stmt|;
if|if
condition|(
name|udf
operator|instanceof
name|GenericUDFOPEqual
condition|)
block|{
comment|// Kudu doesn't support !=.
name|assertTrue
argument_list|(
name|predicates
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|predicates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scanWithPredicates
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInPredicates
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|toHiveType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
literal|"string"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"Alpha"
argument_list|)
decl_stmt|;
name|ExprNodeConstantDesc
name|constDesc2
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
literal|"Bravo"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constDesc
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constDesc2
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|predicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFIn
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
comment|// Verify KuduPredicateHandler.decompose
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
name|decompose
init|=
name|KuduPredicateHandler
operator|.
name|decompose
argument_list|(
name|predicateExpr
argument_list|,
name|SCHEMA
argument_list|)
decl_stmt|;
comment|// See note in KuduPredicateHandler.newAnalyzer.
name|assertNull
argument_list|(
name|decompose
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|predicates
init|=
name|expressionToPredicates
argument_list|(
name|predicateExpr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|predicates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scanWithPredicates
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
comment|// Also test NOT IN.
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|notChildren
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|notChildren
operator|.
name|add
argument_list|(
name|predicateExpr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|notPredicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPNot
argument_list|()
argument_list|,
name|notChildren
argument_list|)
decl_stmt|;
comment|// Verify KuduPredicateHandler.decompose
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
name|decomposeNot
init|=
name|KuduPredicateHandler
operator|.
name|decompose
argument_list|(
name|notPredicateExpr
argument_list|,
name|SCHEMA
argument_list|)
decl_stmt|;
comment|// See note in KuduPredicateHandler.newAnalyzer.
name|assertNull
argument_list|(
name|decomposeNot
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|notPredicates
init|=
name|expressionToPredicates
argument_list|(
name|notPredicateExpr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|notPredicates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullablePredicates
parameter_list|()
throws|throws
name|Exception
block|{
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|toHiveType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
literal|"null"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
for|for
control|(
name|GenericUDF
name|udf
range|:
name|NULLABLE_UDFS
control|)
block|{
name|ExprNodeGenericFuncDesc
name|predicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
name|udf
argument_list|,
name|children
argument_list|)
decl_stmt|;
comment|// Verify KuduPredicateHandler.decompose
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
name|decompose
init|=
name|KuduPredicateHandler
operator|.
name|decompose
argument_list|(
name|predicateExpr
argument_list|,
name|SCHEMA
argument_list|)
decl_stmt|;
comment|// See note in KuduPredicateHandler.newAnalyzer.
name|assertNull
argument_list|(
name|decompose
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|predicates
init|=
name|expressionToPredicates
argument_list|(
name|predicateExpr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|predicates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scanWithPredicates
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAndPredicates
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ColumnSchema
name|col
range|:
name|SCHEMA
operator|.
name|getColumns
argument_list|()
control|)
block|{
comment|// Skip null and default columns because they don't have a value to use.
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
operator|||
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|toHiveType
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|,
name|col
operator|.
name|getTypeAttributes
argument_list|()
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
name|col
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|typeInfo
argument_list|,
name|ROW
operator|.
name|getObject
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constExpr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|gePredicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|lePredicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|andChildren
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|andChildren
operator|.
name|add
argument_list|(
name|gePredicateExpr
argument_list|)
expr_stmt|;
name|andChildren
operator|.
name|add
argument_list|(
name|lePredicateExpr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|andPredicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|andChildren
argument_list|)
decl_stmt|;
comment|// Verify KuduPredicateHandler.decompose
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
name|decompose
init|=
name|KuduPredicateHandler
operator|.
name|decompose
argument_list|(
name|andPredicateExpr
argument_list|,
name|SCHEMA
argument_list|)
decl_stmt|;
comment|// Binary predicates are not supported. (HIVE-11370)
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|decompose
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|decompose
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|decompose
operator|.
name|pushedPredicate
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|decompose
operator|.
name|residualPredicate
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|predicates
init|=
name|expressionToPredicates
argument_list|(
name|decompose
operator|.
name|pushedPredicate
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|predicates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scanWithPredicates
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
comment|// Also test NOT AND.
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|notChildren
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|notChildren
operator|.
name|add
argument_list|(
name|andPredicateExpr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|notPredicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPNot
argument_list|()
argument_list|,
name|notChildren
argument_list|)
decl_stmt|;
comment|// Verify KuduPredicateHandler.decompose
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
name|decomposeNot
init|=
name|KuduPredicateHandler
operator|.
name|decompose
argument_list|(
name|notPredicateExpr
argument_list|,
name|SCHEMA
argument_list|)
decl_stmt|;
comment|// See note in KuduPredicateHandler.newAnalyzer.
name|assertNull
argument_list|(
name|decomposeNot
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|notPredicates
init|=
name|expressionToPredicates
argument_list|(
name|notPredicateExpr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|notPredicates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrPredicates
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ColumnSchema
name|col
range|:
name|SCHEMA
operator|.
name|getColumns
argument_list|()
control|)
block|{
comment|// Skip null and default columns because they don't have a value to use.
comment|// Skip binary columns because binary predicates are not supported. (HIVE-11370)
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
operator|||
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
operator|||
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|toHiveType
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|,
name|col
operator|.
name|getTypeAttributes
argument_list|()
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
name|col
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|typeInfo
argument_list|,
name|ROW
operator|.
name|getObject
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constExpr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|gePredicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|lePredicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|orChildren
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|orChildren
operator|.
name|add
argument_list|(
name|gePredicateExpr
argument_list|)
expr_stmt|;
name|orChildren
operator|.
name|add
argument_list|(
name|lePredicateExpr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|predicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPOr
argument_list|()
argument_list|,
name|orChildren
argument_list|)
decl_stmt|;
comment|// Verify KuduPredicateHandler.decompose
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
name|decompose
init|=
name|KuduPredicateHandler
operator|.
name|decompose
argument_list|(
name|predicateExpr
argument_list|,
name|SCHEMA
argument_list|)
decl_stmt|;
comment|// OR predicates are currently not supported.
name|assertNull
argument_list|(
name|decompose
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|predicates
init|=
name|expressionToPredicates
argument_list|(
name|predicateExpr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|predicates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Also test NOT OR.
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|notChildren
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|notChildren
operator|.
name|add
argument_list|(
name|predicateExpr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|notPredicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPNot
argument_list|()
argument_list|,
name|notChildren
argument_list|)
decl_stmt|;
comment|// Verify KuduPredicateHandler.decompose
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
name|decomposeNot
init|=
name|KuduPredicateHandler
operator|.
name|decompose
argument_list|(
name|notPredicateExpr
argument_list|,
name|SCHEMA
argument_list|)
decl_stmt|;
comment|// See note in KuduPredicateHandler.newAnalyzer.
name|assertNull
argument_list|(
name|decomposeNot
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|notPredicates
init|=
name|expressionToPredicates
argument_list|(
name|notPredicateExpr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|notPredicates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixedPredicates
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ColumnSchema
name|col
range|:
name|SCHEMA
operator|.
name|getColumns
argument_list|()
control|)
block|{
comment|// Skip null and default columns because they don't have a value to use.
comment|// Skip binary columns because binary predicates are not supported. (HIVE-11370)
if|if
condition|(
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
operator|||
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
operator|||
name|col
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|toHiveType
argument_list|(
name|col
operator|.
name|getType
argument_list|()
argument_list|,
name|col
operator|.
name|getTypeAttributes
argument_list|()
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|colExpr
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|typeInfo
argument_list|,
name|col
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ExprNodeDesc
name|constExpr
init|=
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|typeInfo
argument_list|,
name|ROW
operator|.
name|getObject
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|colExpr
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|constExpr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|supportedPredicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|unsupportedPredicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPUnsupported
argument_list|()
argument_list|,
name|children
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|andChildren
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|andChildren
operator|.
name|add
argument_list|(
name|supportedPredicateExpr
argument_list|)
expr_stmt|;
name|andChildren
operator|.
name|add
argument_list|(
name|unsupportedPredicateExpr
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|andPredicateExpr
init|=
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|andChildren
argument_list|)
decl_stmt|;
comment|// Verify KuduPredicateHandler.decompose
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
name|decompose
init|=
name|KuduPredicateHandler
operator|.
name|decompose
argument_list|(
name|andPredicateExpr
argument_list|,
name|SCHEMA
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|decompose
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|decompose
operator|.
name|pushedPredicate
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|decompose
operator|.
name|residualPredicate
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|predicates
init|=
name|expressionToPredicates
argument_list|(
name|decompose
operator|.
name|pushedPredicate
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|predicates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scanWithPredicates
argument_list|(
name|predicates
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|expressionToPredicates
parameter_list|(
name|ExprNodeGenericFuncDesc
name|predicateExpr
parameter_list|)
block|{
name|String
name|filterExpr
init|=
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|predicateExpr
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|,
name|filterExpr
argument_list|)
expr_stmt|;
return|return
name|KuduPredicateHandler
operator|.
name|getPredicates
argument_list|(
name|conf
argument_list|,
name|SCHEMA
argument_list|)
return|;
block|}
specifier|private
name|void
name|scanWithPredicates
parameter_list|(
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|predicates
parameter_list|)
throws|throws
name|KuduException
block|{
comment|// Scan the table with the predicate to be sure there are no exceptions.
name|KuduClient
name|client
init|=
name|harness
operator|.
name|getClient
argument_list|()
decl_stmt|;
name|KuduTable
name|table
init|=
name|client
operator|.
name|openTable
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|KuduScanner
operator|.
name|KuduScannerBuilder
name|builder
init|=
name|client
operator|.
name|newScannerBuilder
argument_list|(
name|table
argument_list|)
decl_stmt|;
for|for
control|(
name|KuduPredicate
name|predicate
range|:
name|predicates
control|)
block|{
name|builder
operator|.
name|addPredicate
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
name|KuduScanner
name|scanner
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasMoreRows
argument_list|()
condition|)
block|{
name|scanner
operator|.
name|nextRows
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Wrapper implementation to simplify testing unsupported UDFs.
specifier|private
class|class
name|GenericUDFOPUnsupported
extends|extends
name|GenericUDFBaseCompare
block|{
name|GenericUDFOPUnsupported
parameter_list|()
block|{
name|this
operator|.
name|opName
operator|=
literal|"UNSUPPORTED"
expr_stmt|;
name|this
operator|.
name|opDisplayName
operator|=
literal|"UNSUPPORTED"
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|evaluate
parameter_list|(
name|DeferredObject
index|[]
name|arguments
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|GenericUDF
name|flip
parameter_list|()
block|{
return|return
operator|new
name|GenericUDFOPUnsupported
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|GenericUDF
name|negative
parameter_list|()
block|{
return|return
operator|new
name|GenericUDFOPUnsupported
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

