begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|ColumnTypeAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduStorageHandler
operator|.
name|KUDU_MASTER_ADDRS_KEY
import|;
end_import

begin_comment
comment|/**  * A collection of static utility methods for the Kudu Hive integration.  * This is useful for code sharing.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|KuduHiveUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KuduHiveUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Text
name|KUDU_TOKEN_KIND
init|=
operator|new
name|Text
argument_list|(
literal|"kudu-authn-data"
argument_list|)
decl_stmt|;
specifier|private
name|KuduHiveUtils
parameter_list|()
block|{}
comment|/**    * Returns the union of the configuration and table properties with the    * table properties taking precedence.    */
specifier|public
specifier|static
name|Configuration
name|createOverlayedConf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tblProps
parameter_list|)
block|{
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|prop
range|:
name|tblProps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|newConf
operator|.
name|set
argument_list|(
operator|(
name|String
operator|)
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|newConf
return|;
block|}
specifier|public
specifier|static
name|String
name|getMasterAddresses
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Use the table property if it exists.
name|String
name|masterAddresses
init|=
name|conf
operator|.
name|get
argument_list|(
name|KUDU_MASTER_ADDRS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|masterAddresses
argument_list|)
condition|)
block|{
comment|// Fall back to the default configuration.
name|masterAddresses
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_KUDU_MASTER_ADDRESSES_DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|masterAddresses
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Kudu master addresses are not specified in the table property ("
operator|+
name|KUDU_MASTER_ADDRS_KEY
operator|+
literal|"), or default configuration ("
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_KUDU_MASTER_ADDRESSES_DEFAULT
operator|.
name|varname
operator|+
literal|")."
argument_list|)
throw|;
block|}
return|return
name|masterAddresses
return|;
block|}
specifier|public
specifier|static
name|KuduClient
name|getKuduClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|masterAddresses
init|=
name|getMasterAddresses
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|KuduClient
name|client
init|=
operator|new
name|KuduClient
operator|.
name|KuduClientBuilder
argument_list|(
name|masterAddresses
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|importCredentialsFromCurrentSubject
argument_list|(
name|client
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
specifier|public
specifier|static
name|void
name|importCredentialsFromCurrentSubject
parameter_list|(
name|KuduClient
name|client
parameter_list|)
block|{
name|Subject
name|subj
init|=
name|Subject
operator|.
name|getSubject
argument_list|(
name|AccessController
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subj
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Text
name|service
init|=
operator|new
name|Text
argument_list|(
name|client
operator|.
name|getMasterAddressesAsString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Find the Hadoop credentials stored within the JAAS subject.
name|Set
argument_list|<
name|Credentials
argument_list|>
name|credSet
init|=
name|subj
operator|.
name|getPrivateCredentials
argument_list|(
name|Credentials
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Credentials
name|creds
range|:
name|credSet
control|)
block|{
for|for
control|(
name|Token
argument_list|<
name|?
argument_list|>
name|tok
range|:
name|creds
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|tok
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|KUDU_TOKEN_KIND
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Only import credentials relevant to the service corresponding to
comment|// 'client'. This is necessary if we want to support a job which
comment|// reads from one cluster and writes to another.
if|if
condition|(
operator|!
name|tok
operator|.
name|getService
argument_list|()
operator|.
name|equals
argument_list|(
name|service
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not importing credentials for service "
operator|+
name|service
operator|+
literal|"(expecting service "
operator|+
name|service
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Importing credentials for service "
operator|+
name|service
argument_list|)
expr_stmt|;
name|client
operator|.
name|importAuthenticationCredentials
argument_list|(
name|tok
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|/* This method converts a Kudu type to to the corresponding Hive type */
specifier|public
specifier|static
name|PrimitiveTypeInfo
name|toHiveType
parameter_list|(
name|Type
name|kuduType
parameter_list|,
name|ColumnTypeAttributes
name|attributes
parameter_list|)
throws|throws
name|SerDeException
block|{
switch|switch
condition|(
name|kuduType
condition|)
block|{
case|case
name|BOOL
case|:
return|return
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
return|;
case|case
name|INT8
case|:
return|return
name|TypeInfoFactory
operator|.
name|byteTypeInfo
return|;
case|case
name|INT16
case|:
return|return
name|TypeInfoFactory
operator|.
name|shortTypeInfo
return|;
case|case
name|INT32
case|:
return|return
name|TypeInfoFactory
operator|.
name|intTypeInfo
return|;
case|case
name|INT64
case|:
return|return
name|TypeInfoFactory
operator|.
name|longTypeInfo
return|;
case|case
name|UNIXTIME_MICROS
case|:
return|return
name|TypeInfoFactory
operator|.
name|timestampTypeInfo
return|;
case|case
name|DECIMAL
case|:
return|return
name|TypeInfoFactory
operator|.
name|getDecimalTypeInfo
argument_list|(
name|attributes
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|attributes
operator|.
name|getScale
argument_list|()
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|TypeInfoFactory
operator|.
name|floatTypeInfo
return|;
case|case
name|DOUBLE
case|:
return|return
name|TypeInfoFactory
operator|.
name|doubleTypeInfo
return|;
case|case
name|STRING
case|:
return|return
name|TypeInfoFactory
operator|.
name|stringTypeInfo
return|;
case|case
name|BINARY
case|:
return|return
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
return|;
default|default:
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Unsupported column type: "
operator|+
name|kuduType
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

