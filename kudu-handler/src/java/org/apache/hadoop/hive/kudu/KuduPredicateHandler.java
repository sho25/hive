begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexPredicateAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|ConvertAstToSearchArg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|ExpressionTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|PredicateLeaf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|ColumnSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduPredicate
operator|.
name|ComparisonOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Contains static methods for decomposing predicate/filter expressions and  * getting the equivalent Kudu predicates.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|KuduPredicateHandler
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KuduPredicateHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|KuduPredicateHandler
parameter_list|()
block|{}
comment|/**    * Analyzes the predicates and return the portion of it which    * cannot be evaluated by Kudu during table access.    *    * @param predicateExpr predicate to be decomposed    * @param schema the schema of the Kudu table    * @return decomposed form of predicate, or null if no pushdown is possible at all    */
specifier|public
specifier|static
name|DecomposedPredicate
name|decompose
parameter_list|(
name|ExprNodeDesc
name|predicateExpr
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|IndexPredicateAnalyzer
name|analyzer
init|=
name|newAnalyzer
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|sConditions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|residualPredicate
init|=
name|analyzer
operator|.
name|analyzePredicate
argument_list|(
name|predicateExpr
argument_list|,
name|sConditions
argument_list|)
decl_stmt|;
comment|// Nothing to decompose.
if|if
condition|(
name|sConditions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DecomposedPredicate
name|decomposedPredicate
init|=
operator|new
name|DecomposedPredicate
argument_list|()
decl_stmt|;
name|decomposedPredicate
operator|.
name|pushedPredicate
operator|=
name|analyzer
operator|.
name|translateSearchConditions
argument_list|(
name|sConditions
argument_list|)
expr_stmt|;
name|decomposedPredicate
operator|.
name|residualPredicate
operator|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|residualPredicate
expr_stmt|;
return|return
name|decomposedPredicate
return|;
block|}
specifier|private
specifier|static
name|IndexPredicateAnalyzer
name|newAnalyzer
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|IndexPredicateAnalyzer
name|analyzer
init|=
operator|new
name|IndexPredicateAnalyzer
argument_list|()
decl_stmt|;
comment|// Register comparison operators which can be satisfied by Kudu predicates.
comment|// Note: We are unable to decompose GenericUDFOPNull, GenericUDFOPNotNull, GenericUDFIn
comment|// predicates even though they are pushed to Kudu because the IndexPredicateAnalyzer only
comment|// supports GenericUDFBaseCompare UDFs.
comment|// We can also handle some NOT predicates but the IndexPredicateAnalyzer also does
comment|// not support this.
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
name|GenericUDFOPEqual
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
name|GenericUDFOPEqualNS
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
name|GenericUDFOPGreaterThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
name|GenericUDFOPEqualOrGreaterThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
name|GenericUDFOPLessThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
name|GenericUDFOPEqualOrLessThan
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set the column names that can be satisfied.
for|for
control|(
name|ColumnSchema
name|col
range|:
name|schema
operator|.
name|getColumns
argument_list|()
control|)
block|{
comment|// Skip binary columns because binary predicates are not supported. (HIVE-11370)
if|if
condition|(
name|col
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|BINARY
condition|)
block|{
name|analyzer
operator|.
name|allowColumnName
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|analyzer
return|;
block|}
comment|/**    * Returns the list of Kudu predicates from the passed configuration.    *    * @param conf the execution configuration    * @param schema the schema of the Kudu table    * @return the list of Kudu predicates    */
specifier|public
specifier|static
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|getPredicates
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|SearchArgument
name|sarg
init|=
name|ConvertAstToSearchArg
operator|.
name|createFromConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|sarg
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
return|return
name|toKuduPredicates
argument_list|(
name|sarg
argument_list|,
name|schema
argument_list|)
return|;
block|}
comment|/**    * Translate the search argument to the KuduPredicates.    */
specifier|private
specifier|static
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|toKuduPredicates
parameter_list|(
name|SearchArgument
name|sarg
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|translate
argument_list|(
name|sarg
operator|.
name|getExpression
argument_list|()
argument_list|,
name|sarg
operator|.
name|getLeaves
argument_list|()
argument_list|,
literal|false
argument_list|,
name|schema
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while generating Kudu predicates. Predicates will not be pushed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|results
return|;
block|}
specifier|private
specifier|static
name|void
name|translate
parameter_list|(
name|ExpressionTree
name|root
parameter_list|,
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leaves
parameter_list|,
name|boolean
name|isNot
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|results
parameter_list|)
block|{
switch|switch
condition|(
name|root
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|OR
case|:
if|if
condition|(
name|isNot
condition|)
block|{
comment|// Converts to an AND: not (A or B) = not A and not B
for|for
control|(
name|ExpressionTree
name|child
range|:
name|root
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|translate
argument_list|(
name|child
argument_list|,
name|leaves
argument_list|,
name|isNot
argument_list|,
name|schema
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Kudu doesn't support OR predicates.
return|return;
block|}
case|case
name|AND
case|:
if|if
condition|(
name|isNot
condition|)
block|{
comment|// Converts to an OR: not (A and B) = not A or not B
comment|// Kudu doesn't support OR predicates.
return|return;
block|}
else|else
block|{
for|for
control|(
name|ExpressionTree
name|child
range|:
name|root
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|translate
argument_list|(
name|child
argument_list|,
name|leaves
argument_list|,
name|isNot
argument_list|,
name|schema
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|NOT
case|:
comment|// Kudu doesn't support general NOT predicates, but some NOT operators
comment|// can be converted into Kudu predicates. See leafToPredicates below.
name|translate
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|leaves
argument_list|,
operator|!
name|isNot
argument_list|,
name|schema
argument_list|,
name|results
argument_list|)
expr_stmt|;
return|return;
case|case
name|LEAF
case|:
name|PredicateLeaf
name|leaf
init|=
name|leaves
operator|.
name|get
argument_list|(
name|root
operator|.
name|getLeaf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|.
name|hasColumn
argument_list|(
name|leaf
operator|.
name|getColumnName
argument_list|()
argument_list|)
condition|)
block|{
name|results
operator|.
name|addAll
argument_list|(
name|leafToPredicates
argument_list|(
name|leaf
argument_list|,
name|isNot
argument_list|,
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
case|case
name|CONSTANT
case|:
return|return;
comment|// no predicate for constant
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operator: "
operator|+
name|root
operator|.
name|getOperator
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|leafToPredicates
parameter_list|(
name|PredicateLeaf
name|leaf
parameter_list|,
name|boolean
name|isNot
parameter_list|,
name|Schema
name|schema
parameter_list|)
block|{
name|ColumnSchema
name|column
init|=
name|schema
operator|.
name|getColumn
argument_list|(
name|leaf
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|leaf
operator|.
name|getLiteral
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|leaf
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
if|if
condition|(
name|isNot
condition|)
block|{
comment|// Kudu doesn't support NOT EQUALS.
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|KuduPredicate
operator|.
name|newComparisonPredicate
argument_list|(
name|column
argument_list|,
name|ComparisonOp
operator|.
name|EQUAL
argument_list|,
name|toKuduValue
argument_list|(
name|value
argument_list|,
name|column
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
case|case
name|LESS_THAN
case|:
if|if
condition|(
name|isNot
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|KuduPredicate
operator|.
name|newComparisonPredicate
argument_list|(
name|column
argument_list|,
name|ComparisonOp
operator|.
name|GREATER_EQUAL
argument_list|,
name|toKuduValue
argument_list|(
name|value
argument_list|,
name|column
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|KuduPredicate
operator|.
name|newComparisonPredicate
argument_list|(
name|column
argument_list|,
name|ComparisonOp
operator|.
name|LESS
argument_list|,
name|toKuduValue
argument_list|(
name|value
argument_list|,
name|column
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
case|case
name|LESS_THAN_EQUALS
case|:
if|if
condition|(
name|isNot
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|KuduPredicate
operator|.
name|newComparisonPredicate
argument_list|(
name|column
argument_list|,
name|ComparisonOp
operator|.
name|GREATER
argument_list|,
name|toKuduValue
argument_list|(
name|value
argument_list|,
name|column
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|KuduPredicate
operator|.
name|newComparisonPredicate
argument_list|(
name|column
argument_list|,
name|ComparisonOp
operator|.
name|LESS_EQUAL
argument_list|,
name|toKuduValue
argument_list|(
name|value
argument_list|,
name|column
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
case|case
name|IS_NULL
case|:
if|if
condition|(
name|isNot
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|KuduPredicate
operator|.
name|newIsNotNullPredicate
argument_list|(
name|column
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|KuduPredicate
operator|.
name|newIsNullPredicate
argument_list|(
name|column
argument_list|)
argument_list|)
return|;
block|}
case|case
name|IN
case|:
if|if
condition|(
name|isNot
condition|)
block|{
comment|// Kudu doesn't support NOT IN.
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|leaf
operator|.
name|getLiteralList
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
parameter_list|(
name|Object
name|v
parameter_list|)
lambda|->
name|toKuduValue
argument_list|(
name|v
argument_list|,
name|column
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|KuduPredicate
operator|.
name|newInListPredicate
argument_list|(
name|column
argument_list|,
name|values
argument_list|)
argument_list|)
return|;
block|}
case|case
name|BETWEEN
case|:
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|leaf
operator|.
name|getLiteralList
argument_list|()
decl_stmt|;
name|Object
name|leftValue
init|=
name|toKuduValue
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|Object
name|rightValue
init|=
name|toKuduValue
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNot
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|KuduPredicate
operator|.
name|newComparisonPredicate
argument_list|(
name|column
argument_list|,
name|ComparisonOp
operator|.
name|LESS
argument_list|,
name|leftValue
argument_list|)
argument_list|,
name|KuduPredicate
operator|.
name|newComparisonPredicate
argument_list|(
name|column
argument_list|,
name|ComparisonOp
operator|.
name|GREATER
argument_list|,
name|rightValue
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|KuduPredicate
operator|.
name|newComparisonPredicate
argument_list|(
name|column
argument_list|,
name|ComparisonOp
operator|.
name|GREATER_EQUAL
argument_list|,
name|leftValue
argument_list|)
argument_list|,
name|KuduPredicate
operator|.
name|newComparisonPredicate
argument_list|(
name|column
argument_list|,
name|ComparisonOp
operator|.
name|LESS_EQUAL
argument_list|,
name|rightValue
argument_list|)
argument_list|)
return|;
block|}
case|case
name|NULL_SAFE_EQUALS
case|:
comment|// Kudu doesn't support null value predicates.
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unhandled operator: "
operator|+
name|leaf
operator|.
name|getOperator
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Converts Hive value objects to the value Objects expected by Kudu.
specifier|private
specifier|static
name|Object
name|toKuduValue
parameter_list|(
name|Object
name|value
parameter_list|,
name|ColumnSchema
name|column
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|HiveDecimalWritable
condition|)
block|{
return|return
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|value
operator|)
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|bigDecimalValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Timestamp
condition|)
block|{
comment|// Calling toSqlTimestamp and using the addTimestamp API ensures we properly
comment|// convert Hive localDateTime to UTC.
return|return
operator|(
operator|(
name|Timestamp
operator|)
name|value
operator|)
operator|.
name|toSqlTimestamp
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
operator|&&
name|column
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|FLOAT
condition|)
block|{
comment|// Hive search arguments use Double for both FLOAT and DOUBLE columns.
comment|// Down convert to match the FLOAT columns type.
return|return
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

