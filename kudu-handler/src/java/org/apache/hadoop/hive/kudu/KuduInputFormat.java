begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
operator|.
name|KuduStorageHandler
operator|.
name|KUDU_TABLE_NAME_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|VirtualColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduScanToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|KuduTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|LocatedTablet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|RowResult
import|;
end_import

begin_comment
comment|/**  * A Kudu InputFormat implementation for use by Hive.  */
end_comment

begin_class
specifier|public
class|class
name|KuduInputFormat
extends|extends
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|KuduWritable
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
argument_list|<
name|NullWritable
argument_list|,
name|KuduWritable
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|InputSplit
argument_list|>
name|getSplits
parameter_list|(
name|JobContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|computeSplits
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|is
lambda|->
operator|(
name|InputSplit
operator|)
name|is
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|conf
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KuduInputSplit
argument_list|>
name|splits
init|=
name|computeSplits
argument_list|(
name|conf
argument_list|)
decl_stmt|;
return|return
name|splits
operator|.
name|toArray
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|KuduInputSplit
argument_list|>
name|computeSplits
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|KuduClient
name|client
init|=
name|KuduHiveUtils
operator|.
name|getKuduClient
argument_list|(
name|conf
argument_list|)
init|)
block|{
comment|// Hive depends on FileSplits so we get the dummy Path for the Splits.
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|JobContext
name|jobContext
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|newJobContext
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
index|[]
name|paths
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobContext
argument_list|)
decl_stmt|;
name|Path
name|dummyPath
init|=
name|paths
index|[
literal|0
index|]
decl_stmt|;
name|String
name|tableName
init|=
name|conf
operator|.
name|get
argument_list|(
name|KUDU_TABLE_NAME_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|KUDU_TABLE_NAME_KEY
operator|+
literal|" is not set."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|client
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Kudu table does not exist: "
operator|+
name|tableName
argument_list|)
throw|;
block|}
name|KuduTable
name|table
init|=
name|client
operator|.
name|openTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KuduPredicate
argument_list|>
name|predicates
init|=
name|KuduPredicateHandler
operator|.
name|getPredicates
argument_list|(
name|conf
argument_list|,
name|table
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|KuduScanToken
operator|.
name|KuduScanTokenBuilder
name|tokenBuilder
init|=
name|client
operator|.
name|newScanTokenBuilder
argument_list|(
name|table
argument_list|)
operator|.
name|setProjectedColumnNames
argument_list|(
name|getProjectedColumns
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|KuduPredicate
name|predicate
range|:
name|predicates
control|)
block|{
name|tokenBuilder
operator|.
name|addPredicate
argument_list|(
name|predicate
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|KuduScanToken
argument_list|>
name|tokens
init|=
name|tokenBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KuduInputSplit
argument_list|>
name|splits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|KuduScanToken
name|token
range|:
name|tokens
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|token
operator|.
name|getTablet
argument_list|()
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedTablet
operator|.
name|Replica
name|replica
range|:
name|token
operator|.
name|getTablet
argument_list|()
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|replica
operator|.
name|getRpcHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|splits
operator|.
name|add
argument_list|(
operator|new
name|KuduInputSplit
argument_list|(
name|token
argument_list|,
name|dummyPath
argument_list|,
name|locations
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getProjectedColumns
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|columnNamesArr
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|columnNamesArr
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Hive column names must be provided to InputFormat in the Configuration"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|columnNamesArr
argument_list|)
argument_list|)
decl_stmt|;
name|VirtualColumn
operator|.
name|removeVirtualColumns
argument_list|(
name|columns
argument_list|)
expr_stmt|;
return|return
name|columns
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|KuduWritable
argument_list|>
name|createRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|split
operator|instanceof
name|KuduInputSplit
argument_list|)
expr_stmt|;
comment|// Will be initialized via the initialize method.
return|return
operator|new
name|KuduRecordReader
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|KuduWritable
argument_list|>
name|getRecordReader
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|conf
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|split
operator|instanceof
name|KuduInputSplit
argument_list|)
expr_stmt|;
name|KuduRecordReader
name|recordReader
init|=
operator|new
name|KuduRecordReader
argument_list|()
decl_stmt|;
name|recordReader
operator|.
name|initialize
argument_list|(
operator|(
name|KuduInputSplit
operator|)
name|split
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|recordReader
return|;
block|}
comment|/**    * An InputSplit represents the data to be processed by an individual Mapper.    * This is effectively a wrapper around a Kudu scan token.    */
specifier|static
class|class
name|KuduInputSplit
extends|extends
name|FileSplit
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
block|{
comment|/** The scan token that the split will use to scan the Kudu table. */
specifier|private
name|byte
index|[]
name|serializedScanToken
decl_stmt|;
comment|/** Tablet server locations which host the tablet to be scanned. */
specifier|private
name|String
index|[]
name|locations
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// required for deserialization.
name|KuduInputSplit
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
name|KuduInputSplit
parameter_list|(
name|KuduScanToken
name|token
parameter_list|,
name|Path
name|dummyPath
parameter_list|,
name|String
index|[]
name|locations
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dummyPath
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|locations
argument_list|)
expr_stmt|;
name|this
operator|.
name|serializedScanToken
operator|=
name|token
operator|.
name|serialize
argument_list|()
expr_stmt|;
name|this
operator|.
name|locations
operator|=
name|locations
expr_stmt|;
block|}
name|byte
index|[]
name|getSerializedScanToken
parameter_list|()
block|{
return|return
name|serializedScanToken
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
name|locations
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|serializedScanToken
operator|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|locations
operator|=
operator|new
name|String
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|str
init|=
name|Bytes
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|locations
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|getString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|serializedScanToken
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|location
range|:
name|locations
control|)
block|{
name|byte
index|[]
name|str
init|=
name|Bytes
operator|.
name|fromString
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|Bytes
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * A RecordReader that reads the Kudu rows from a KuduInputSplit.    */
specifier|static
class|class
name|KuduRecordReader
extends|extends
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|KuduWritable
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|KuduWritable
argument_list|>
block|{
specifier|private
specifier|volatile
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|private
name|KuduClient
name|client
decl_stmt|;
specifier|private
name|KuduScanner
name|scanner
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|RowResult
argument_list|>
name|iterator
decl_stmt|;
specifier|private
name|RowResult
name|currentValue
decl_stmt|;
specifier|private
name|KuduWritable
name|currentWritable
decl_stmt|;
specifier|private
name|long
name|pos
decl_stmt|;
name|KuduRecordReader
parameter_list|()
block|{}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|split
operator|instanceof
name|KuduInputSplit
argument_list|)
expr_stmt|;
name|initialize
argument_list|(
operator|(
name|KuduInputSplit
operator|)
name|split
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|initialize
parameter_list|(
name|KuduInputSplit
name|split
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|byte
index|[]
name|serializedScanToken
init|=
name|split
operator|.
name|getSerializedScanToken
argument_list|()
decl_stmt|;
name|client
operator|=
name|KuduHiveUtils
operator|.
name|getKuduClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|KuduScanToken
operator|.
name|deserializeIntoScanner
argument_list|(
name|serializedScanToken
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|scanner
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|currentValue
operator|=
literal|null
expr_stmt|;
name|currentWritable
operator|=
operator|new
name|KuduWritable
argument_list|(
name|scanner
operator|.
name|getProjectionSchema
argument_list|()
operator|.
name|newPartialRow
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
block|{
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentValue
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|currentWritable
operator|.
name|setRow
argument_list|(
name|currentValue
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
name|currentValue
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|NullWritable
name|getCurrentKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|KuduWritable
name|getCurrentValue
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|currentValue
argument_list|)
expr_stmt|;
return|return
name|currentWritable
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|NullWritable
name|nullWritable
parameter_list|,
name|KuduWritable
name|kuduWritable
parameter_list|)
block|{
if|if
condition|(
name|nextKeyValue
argument_list|()
condition|)
block|{
name|kuduWritable
operator|.
name|setRow
argument_list|(
name|currentValue
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|NullWritable
name|createKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|KuduWritable
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|KuduWritable
argument_list|(
name|scanner
operator|.
name|getProjectionSchema
argument_list|()
operator|.
name|newPartialRow
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KuduException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

