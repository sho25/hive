begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kudu
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|ColumnSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|PartialRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kudu
operator|.
name|client
operator|.
name|RowResult
import|;
end_import

begin_comment
comment|/**  * A Writable representation of a Kudu Row.  * The row may be either a PartialRow or a RowResult.  */
end_comment

begin_class
specifier|public
class|class
name|KuduWritable
implements|implements
name|Writable
block|{
specifier|private
name|PartialRow
name|partialRow
decl_stmt|;
specifier|private
name|RowResult
name|rowResult
decl_stmt|;
specifier|public
name|KuduWritable
parameter_list|(
name|PartialRow
name|row
parameter_list|)
block|{
name|this
operator|.
name|partialRow
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|rowResult
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|setRow
parameter_list|(
name|RowResult
name|rowResult
parameter_list|)
block|{
name|this
operator|.
name|rowResult
operator|=
name|rowResult
expr_stmt|;
name|this
operator|.
name|partialRow
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|PartialRow
name|getPartialRow
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|partialRow
argument_list|)
expr_stmt|;
return|return
name|partialRow
return|;
block|}
specifier|public
name|RowResult
name|getRowResult
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|rowResult
argument_list|)
expr_stmt|;
return|return
name|rowResult
return|;
block|}
specifier|public
name|Object
name|getValueObject
parameter_list|(
name|int
name|colIndex
parameter_list|)
block|{
if|if
condition|(
name|partialRow
operator|!=
literal|null
condition|)
block|{
return|return
name|partialRow
operator|.
name|getObject
argument_list|(
name|colIndex
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rowResult
operator|.
name|getObject
argument_list|(
name|colIndex
argument_list|)
return|;
block|}
block|}
specifier|public
name|Object
name|getValueObject
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
if|if
condition|(
name|partialRow
operator|!=
literal|null
condition|)
block|{
return|return
name|partialRow
operator|.
name|getObject
argument_list|(
name|colName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rowResult
operator|.
name|getObject
argument_list|(
name|colName
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|colIndex
parameter_list|)
block|{
if|if
condition|(
name|partialRow
operator|!=
literal|null
condition|)
block|{
return|return
name|partialRow
operator|.
name|isSet
argument_list|(
name|colIndex
argument_list|)
return|;
block|}
else|else
block|{
comment|// RowResult columns are always set.
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|boolean
name|isSet
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
if|if
condition|(
name|partialRow
operator|!=
literal|null
condition|)
block|{
return|return
name|partialRow
operator|.
name|isSet
argument_list|(
name|colName
argument_list|)
return|;
block|}
else|else
block|{
comment|// RowResult columns are always set.
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|void
name|populateRow
parameter_list|(
name|PartialRow
name|row
parameter_list|)
block|{
name|Schema
name|schema
init|=
name|row
operator|.
name|getSchema
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|schema
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ColumnSchema
name|col
init|=
name|schema
operator|.
name|getColumnByIndex
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSet
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|getValueObject
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|row
operator|.
name|addObject
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

