begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.9.3)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|service
operator|.
name|rpc
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.9.3)"
argument_list|)
annotation|@
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
specifier|public
class|class
name|TGetCrossReferenceReq
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|TGetCrossReferenceReq
argument_list|,
name|TGetCrossReferenceReq
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|TGetCrossReferenceReq
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"TGetCrossReferenceReq"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SESSION_HANDLE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"sessionHandle"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PARENT_CATALOG_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"parentCatalogName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PARENT_SCHEMA_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"parentSchemaName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PARENT_TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"parentTableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|FOREIGN_CATALOG_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"foreignCatalogName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|FOREIGN_SCHEMA_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"foreignSchemaName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|FOREIGN_TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"foreignTableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|TGetCrossReferenceReqStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|TGetCrossReferenceReqTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TSessionHandle
name|sessionHandle
decl_stmt|;
comment|// required
specifier|private
name|String
name|parentCatalogName
decl_stmt|;
comment|// optional
specifier|private
name|String
name|parentSchemaName
decl_stmt|;
comment|// optional
specifier|private
name|String
name|parentTableName
decl_stmt|;
comment|// optional
specifier|private
name|String
name|foreignCatalogName
decl_stmt|;
comment|// optional
specifier|private
name|String
name|foreignSchemaName
decl_stmt|;
comment|// optional
specifier|private
name|String
name|foreignTableName
decl_stmt|;
comment|// optional
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SESSION_HANDLE
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"sessionHandle"
argument_list|)
block|,
name|PARENT_CATALOG_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"parentCatalogName"
argument_list|)
block|,
name|PARENT_SCHEMA_NAME
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"parentSchemaName"
argument_list|)
block|,
name|PARENT_TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"parentTableName"
argument_list|)
block|,
name|FOREIGN_CATALOG_NAME
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"foreignCatalogName"
argument_list|)
block|,
name|FOREIGN_SCHEMA_NAME
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"foreignSchemaName"
argument_list|)
block|,
name|FOREIGN_TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"foreignTableName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// SESSION_HANDLE
return|return
name|SESSION_HANDLE
return|;
case|case
literal|2
case|:
comment|// PARENT_CATALOG_NAME
return|return
name|PARENT_CATALOG_NAME
return|;
case|case
literal|3
case|:
comment|// PARENT_SCHEMA_NAME
return|return
name|PARENT_SCHEMA_NAME
return|;
case|case
literal|4
case|:
comment|// PARENT_TABLE_NAME
return|return
name|PARENT_TABLE_NAME
return|;
case|case
literal|5
case|:
comment|// FOREIGN_CATALOG_NAME
return|return
name|FOREIGN_CATALOG_NAME
return|;
case|case
literal|6
case|:
comment|// FOREIGN_SCHEMA_NAME
return|return
name|FOREIGN_SCHEMA_NAME
return|;
case|case
literal|7
case|:
comment|// FOREIGN_TABLE_NAME
return|return
name|FOREIGN_TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|_Fields
name|optionals
index|[]
init|=
block|{
name|_Fields
operator|.
name|PARENT_CATALOG_NAME
block|,
name|_Fields
operator|.
name|PARENT_SCHEMA_NAME
block|,
name|_Fields
operator|.
name|PARENT_TABLE_NAME
block|,
name|_Fields
operator|.
name|FOREIGN_CATALOG_NAME
block|,
name|_Fields
operator|.
name|FOREIGN_SCHEMA_NAME
block|,
name|_Fields
operator|.
name|FOREIGN_TABLE_NAME
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SESSION_HANDLE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"sessionHandle"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TSessionHandle
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PARENT_CATALOG_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"parentCatalogName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"TIdentifier"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PARENT_SCHEMA_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"parentSchemaName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"TIdentifier"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PARENT_TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"parentTableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"TIdentifier"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|FOREIGN_CATALOG_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"foreignCatalogName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"TIdentifier"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|FOREIGN_SCHEMA_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"foreignSchemaName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"TIdentifier"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|FOREIGN_TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"foreignTableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
literal|"TIdentifier"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|TGetCrossReferenceReq
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TGetCrossReferenceReq
parameter_list|()
block|{   }
specifier|public
name|TGetCrossReferenceReq
parameter_list|(
name|TSessionHandle
name|sessionHandle
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|sessionHandle
operator|=
name|sessionHandle
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|TGetCrossReferenceReq
parameter_list|(
name|TGetCrossReferenceReq
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSessionHandle
argument_list|()
condition|)
block|{
name|this
operator|.
name|sessionHandle
operator|=
operator|new
name|TSessionHandle
argument_list|(
name|other
operator|.
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetParentCatalogName
argument_list|()
condition|)
block|{
name|this
operator|.
name|parentCatalogName
operator|=
name|other
operator|.
name|parentCatalogName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetParentSchemaName
argument_list|()
condition|)
block|{
name|this
operator|.
name|parentSchemaName
operator|=
name|other
operator|.
name|parentSchemaName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetParentTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|parentTableName
operator|=
name|other
operator|.
name|parentTableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetForeignCatalogName
argument_list|()
condition|)
block|{
name|this
operator|.
name|foreignCatalogName
operator|=
name|other
operator|.
name|foreignCatalogName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetForeignSchemaName
argument_list|()
condition|)
block|{
name|this
operator|.
name|foreignSchemaName
operator|=
name|other
operator|.
name|foreignSchemaName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetForeignTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|foreignTableName
operator|=
name|other
operator|.
name|foreignTableName
expr_stmt|;
block|}
block|}
specifier|public
name|TGetCrossReferenceReq
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|TGetCrossReferenceReq
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|sessionHandle
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|parentCatalogName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|parentSchemaName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|parentTableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|foreignCatalogName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|foreignSchemaName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|foreignTableName
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|TSessionHandle
name|getSessionHandle
parameter_list|()
block|{
return|return
name|this
operator|.
name|sessionHandle
return|;
block|}
specifier|public
name|void
name|setSessionHandle
parameter_list|(
name|TSessionHandle
name|sessionHandle
parameter_list|)
block|{
name|this
operator|.
name|sessionHandle
operator|=
name|sessionHandle
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSessionHandle
parameter_list|()
block|{
name|this
operator|.
name|sessionHandle
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field sessionHandle is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSessionHandle
parameter_list|()
block|{
return|return
name|this
operator|.
name|sessionHandle
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSessionHandleIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|sessionHandle
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getParentCatalogName
parameter_list|()
block|{
return|return
name|this
operator|.
name|parentCatalogName
return|;
block|}
specifier|public
name|void
name|setParentCatalogName
parameter_list|(
name|String
name|parentCatalogName
parameter_list|)
block|{
name|this
operator|.
name|parentCatalogName
operator|=
name|parentCatalogName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetParentCatalogName
parameter_list|()
block|{
name|this
operator|.
name|parentCatalogName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field parentCatalogName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetParentCatalogName
parameter_list|()
block|{
return|return
name|this
operator|.
name|parentCatalogName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setParentCatalogNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|parentCatalogName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getParentSchemaName
parameter_list|()
block|{
return|return
name|this
operator|.
name|parentSchemaName
return|;
block|}
specifier|public
name|void
name|setParentSchemaName
parameter_list|(
name|String
name|parentSchemaName
parameter_list|)
block|{
name|this
operator|.
name|parentSchemaName
operator|=
name|parentSchemaName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetParentSchemaName
parameter_list|()
block|{
name|this
operator|.
name|parentSchemaName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field parentSchemaName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetParentSchemaName
parameter_list|()
block|{
return|return
name|this
operator|.
name|parentSchemaName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setParentSchemaNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|parentSchemaName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getParentTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|parentTableName
return|;
block|}
specifier|public
name|void
name|setParentTableName
parameter_list|(
name|String
name|parentTableName
parameter_list|)
block|{
name|this
operator|.
name|parentTableName
operator|=
name|parentTableName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetParentTableName
parameter_list|()
block|{
name|this
operator|.
name|parentTableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field parentTableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetParentTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|parentTableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setParentTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|parentTableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getForeignCatalogName
parameter_list|()
block|{
return|return
name|this
operator|.
name|foreignCatalogName
return|;
block|}
specifier|public
name|void
name|setForeignCatalogName
parameter_list|(
name|String
name|foreignCatalogName
parameter_list|)
block|{
name|this
operator|.
name|foreignCatalogName
operator|=
name|foreignCatalogName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetForeignCatalogName
parameter_list|()
block|{
name|this
operator|.
name|foreignCatalogName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field foreignCatalogName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetForeignCatalogName
parameter_list|()
block|{
return|return
name|this
operator|.
name|foreignCatalogName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setForeignCatalogNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|foreignCatalogName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getForeignSchemaName
parameter_list|()
block|{
return|return
name|this
operator|.
name|foreignSchemaName
return|;
block|}
specifier|public
name|void
name|setForeignSchemaName
parameter_list|(
name|String
name|foreignSchemaName
parameter_list|)
block|{
name|this
operator|.
name|foreignSchemaName
operator|=
name|foreignSchemaName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetForeignSchemaName
parameter_list|()
block|{
name|this
operator|.
name|foreignSchemaName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field foreignSchemaName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetForeignSchemaName
parameter_list|()
block|{
return|return
name|this
operator|.
name|foreignSchemaName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setForeignSchemaNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|foreignSchemaName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getForeignTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|foreignTableName
return|;
block|}
specifier|public
name|void
name|setForeignTableName
parameter_list|(
name|String
name|foreignTableName
parameter_list|)
block|{
name|this
operator|.
name|foreignTableName
operator|=
name|foreignTableName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetForeignTableName
parameter_list|()
block|{
name|this
operator|.
name|foreignTableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field foreignTableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetForeignTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|foreignTableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setForeignTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|foreignTableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SESSION_HANDLE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSessionHandle
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSessionHandle
argument_list|(
operator|(
name|TSessionHandle
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARENT_CATALOG_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetParentCatalogName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setParentCatalogName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARENT_SCHEMA_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetParentSchemaName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setParentSchemaName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARENT_TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetParentTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setParentTableName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FOREIGN_CATALOG_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetForeignCatalogName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setForeignCatalogName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FOREIGN_SCHEMA_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetForeignSchemaName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setForeignSchemaName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FOREIGN_TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetForeignTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setForeignTableName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SESSION_HANDLE
case|:
return|return
name|getSessionHandle
argument_list|()
return|;
case|case
name|PARENT_CATALOG_NAME
case|:
return|return
name|getParentCatalogName
argument_list|()
return|;
case|case
name|PARENT_SCHEMA_NAME
case|:
return|return
name|getParentSchemaName
argument_list|()
return|;
case|case
name|PARENT_TABLE_NAME
case|:
return|return
name|getParentTableName
argument_list|()
return|;
case|case
name|FOREIGN_CATALOG_NAME
case|:
return|return
name|getForeignCatalogName
argument_list|()
return|;
case|case
name|FOREIGN_SCHEMA_NAME
case|:
return|return
name|getForeignSchemaName
argument_list|()
return|;
case|case
name|FOREIGN_TABLE_NAME
case|:
return|return
name|getForeignTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SESSION_HANDLE
case|:
return|return
name|isSetSessionHandle
argument_list|()
return|;
case|case
name|PARENT_CATALOG_NAME
case|:
return|return
name|isSetParentCatalogName
argument_list|()
return|;
case|case
name|PARENT_SCHEMA_NAME
case|:
return|return
name|isSetParentSchemaName
argument_list|()
return|;
case|case
name|PARENT_TABLE_NAME
case|:
return|return
name|isSetParentTableName
argument_list|()
return|;
case|case
name|FOREIGN_CATALOG_NAME
case|:
return|return
name|isSetForeignCatalogName
argument_list|()
return|;
case|case
name|FOREIGN_SCHEMA_NAME
case|:
return|return
name|isSetForeignSchemaName
argument_list|()
return|;
case|case
name|FOREIGN_TABLE_NAME
case|:
return|return
name|isSetForeignTableName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|TGetCrossReferenceReq
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|TGetCrossReferenceReq
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|TGetCrossReferenceReq
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_sessionHandle
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSessionHandle
argument_list|()
decl_stmt|;
name|boolean
name|that_present_sessionHandle
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSessionHandle
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_sessionHandle
operator|||
name|that_present_sessionHandle
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_sessionHandle
operator|&&
name|that_present_sessionHandle
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|sessionHandle
operator|.
name|equals
argument_list|(
name|that
operator|.
name|sessionHandle
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_parentCatalogName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetParentCatalogName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_parentCatalogName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetParentCatalogName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_parentCatalogName
operator|||
name|that_present_parentCatalogName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_parentCatalogName
operator|&&
name|that_present_parentCatalogName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|parentCatalogName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|parentCatalogName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_parentSchemaName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetParentSchemaName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_parentSchemaName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetParentSchemaName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_parentSchemaName
operator|||
name|that_present_parentSchemaName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_parentSchemaName
operator|&&
name|that_present_parentSchemaName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|parentSchemaName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|parentSchemaName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_parentTableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetParentTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_parentTableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetParentTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_parentTableName
operator|||
name|that_present_parentTableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_parentTableName
operator|&&
name|that_present_parentTableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|parentTableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|parentTableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_foreignCatalogName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetForeignCatalogName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_foreignCatalogName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetForeignCatalogName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_foreignCatalogName
operator|||
name|that_present_foreignCatalogName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_foreignCatalogName
operator|&&
name|that_present_foreignCatalogName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|foreignCatalogName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|foreignCatalogName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_foreignSchemaName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetForeignSchemaName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_foreignSchemaName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetForeignSchemaName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_foreignSchemaName
operator|||
name|that_present_foreignSchemaName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_foreignSchemaName
operator|&&
name|that_present_foreignSchemaName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|foreignSchemaName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|foreignSchemaName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_foreignTableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetForeignTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_foreignTableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetForeignTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_foreignTableName
operator|||
name|that_present_foreignTableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_foreignTableName
operator|&&
name|that_present_foreignTableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|foreignTableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|foreignTableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|present_sessionHandle
init|=
literal|true
operator|&&
operator|(
name|isSetSessionHandle
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_sessionHandle
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_sessionHandle
condition|)
name|list
operator|.
name|add
argument_list|(
name|sessionHandle
argument_list|)
expr_stmt|;
name|boolean
name|present_parentCatalogName
init|=
literal|true
operator|&&
operator|(
name|isSetParentCatalogName
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_parentCatalogName
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_parentCatalogName
condition|)
name|list
operator|.
name|add
argument_list|(
name|parentCatalogName
argument_list|)
expr_stmt|;
name|boolean
name|present_parentSchemaName
init|=
literal|true
operator|&&
operator|(
name|isSetParentSchemaName
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_parentSchemaName
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_parentSchemaName
condition|)
name|list
operator|.
name|add
argument_list|(
name|parentSchemaName
argument_list|)
expr_stmt|;
name|boolean
name|present_parentTableName
init|=
literal|true
operator|&&
operator|(
name|isSetParentTableName
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_parentTableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_parentTableName
condition|)
name|list
operator|.
name|add
argument_list|(
name|parentTableName
argument_list|)
expr_stmt|;
name|boolean
name|present_foreignCatalogName
init|=
literal|true
operator|&&
operator|(
name|isSetForeignCatalogName
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_foreignCatalogName
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_foreignCatalogName
condition|)
name|list
operator|.
name|add
argument_list|(
name|foreignCatalogName
argument_list|)
expr_stmt|;
name|boolean
name|present_foreignSchemaName
init|=
literal|true
operator|&&
operator|(
name|isSetForeignSchemaName
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_foreignSchemaName
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_foreignSchemaName
condition|)
name|list
operator|.
name|add
argument_list|(
name|foreignSchemaName
argument_list|)
expr_stmt|;
name|boolean
name|present_foreignTableName
init|=
literal|true
operator|&&
operator|(
name|isSetForeignTableName
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_foreignTableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_foreignTableName
condition|)
name|list
operator|.
name|add
argument_list|(
name|foreignTableName
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TGetCrossReferenceReq
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSessionHandle
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetSessionHandle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSessionHandle
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|sessionHandle
argument_list|,
name|other
operator|.
name|sessionHandle
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetParentCatalogName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetParentCatalogName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetParentCatalogName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|parentCatalogName
argument_list|,
name|other
operator|.
name|parentCatalogName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetParentSchemaName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetParentSchemaName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetParentSchemaName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|parentSchemaName
argument_list|,
name|other
operator|.
name|parentSchemaName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetParentTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetParentTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetParentTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|parentTableName
argument_list|,
name|other
operator|.
name|parentTableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetForeignCatalogName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetForeignCatalogName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetForeignCatalogName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|foreignCatalogName
argument_list|,
name|other
operator|.
name|foreignCatalogName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetForeignSchemaName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetForeignSchemaName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetForeignSchemaName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|foreignSchemaName
argument_list|,
name|other
operator|.
name|foreignSchemaName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetForeignTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetForeignTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetForeignTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|foreignTableName
argument_list|,
name|other
operator|.
name|foreignTableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"TGetCrossReferenceReq("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"sessionHandle:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|sessionHandle
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|sessionHandle
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetParentCatalogName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"parentCatalogName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|parentCatalogName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|parentCatalogName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetParentSchemaName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"parentSchemaName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|parentSchemaName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|parentSchemaName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetParentTableName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"parentTableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|parentTableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|parentTableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetForeignCatalogName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"foreignCatalogName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|foreignCatalogName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|foreignCatalogName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetForeignSchemaName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"foreignSchemaName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|foreignSchemaName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|foreignSchemaName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetForeignTableName
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"foreignTableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|foreignTableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|foreignTableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
if|if
condition|(
operator|!
name|isSetSessionHandle
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'sessionHandle' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// check for sub-struct validity
if|if
condition|(
name|sessionHandle
operator|!=
literal|null
condition|)
block|{
name|sessionHandle
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TGetCrossReferenceReqStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|TGetCrossReferenceReqStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|TGetCrossReferenceReqStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TGetCrossReferenceReqStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|TGetCrossReferenceReq
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|TGetCrossReferenceReq
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// SESSION_HANDLE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|struct
operator|.
name|sessionHandle
operator|=
operator|new
name|TSessionHandle
argument_list|()
expr_stmt|;
name|struct
operator|.
name|sessionHandle
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSessionHandleIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// PARENT_CATALOG_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|parentCatalogName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setParentCatalogNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// PARENT_SCHEMA_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|parentSchemaName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setParentSchemaNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// PARENT_TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|parentTableName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setParentTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// FOREIGN_CATALOG_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|foreignCatalogName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setForeignCatalogNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// FOREIGN_SCHEMA_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|foreignSchemaName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setForeignSchemaNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// FOREIGN_TABLE_NAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|foreignTableName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setForeignTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|TGetCrossReferenceReq
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|sessionHandle
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SESSION_HANDLE_FIELD_DESC
argument_list|)
expr_stmt|;
name|struct
operator|.
name|sessionHandle
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|parentCatalogName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetParentCatalogName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PARENT_CATALOG_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|parentCatalogName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|parentSchemaName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetParentSchemaName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PARENT_SCHEMA_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|parentSchemaName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|parentTableName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetParentTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PARENT_TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|parentTableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|foreignCatalogName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetForeignCatalogName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|FOREIGN_CATALOG_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|foreignCatalogName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|foreignSchemaName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetForeignSchemaName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|FOREIGN_SCHEMA_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|foreignSchemaName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|foreignTableName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetForeignTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|FOREIGN_TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|foreignTableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TGetCrossReferenceReqTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|TGetCrossReferenceReqTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|TGetCrossReferenceReqTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TGetCrossReferenceReqTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|TGetCrossReferenceReq
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|TGetCrossReferenceReq
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|struct
operator|.
name|sessionHandle
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetParentCatalogName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetParentSchemaName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetParentTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetForeignCatalogName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetForeignSchemaName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetForeignTableName
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetParentCatalogName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|parentCatalogName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetParentSchemaName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|parentSchemaName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetParentTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|parentTableName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetForeignCatalogName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|foreignCatalogName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetForeignSchemaName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|foreignSchemaName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetForeignTableName
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|foreignTableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|TGetCrossReferenceReq
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|struct
operator|.
name|sessionHandle
operator|=
operator|new
name|TSessionHandle
argument_list|()
expr_stmt|;
name|struct
operator|.
name|sessionHandle
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setSessionHandleIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|parentCatalogName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setParentCatalogNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|parentSchemaName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setParentSchemaNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|parentTableName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setParentTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|foreignCatalogName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setForeignCatalogNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|struct
operator|.
name|foreignSchemaName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setForeignSchemaNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|struct
operator|.
name|foreignTableName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setForeignTableNameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

