begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|pdktest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|pdk
operator|.
name|HivePdkUnitTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|pdk
operator|.
name|HivePdkUnitTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Example UDF for rot13 transformation.  */
end_comment

begin_class
annotation|@
name|Description
argument_list|(
name|name
operator|=
literal|"rot13"
argument_list|,
name|value
operator|=
literal|"_FUNC_(str) - Returns str with all characters transposed via rot13"
argument_list|,
name|extended
operator|=
literal|"Example:\n"
operator|+
literal|"> SELECT _FUNC_('Facebook') FROM src LIMIT 1;\n"
operator|+
literal|"  'Snprobbx'"
argument_list|)
annotation|@
name|HivePdkUnitTests
argument_list|(
name|setup
operator|=
literal|"create table rot13_data(s string); "
operator|+
literal|"insert overwrite table rot13_data select 'Facebook' from onerow;"
argument_list|,
name|cleanup
operator|=
literal|"drop table if exists rot13_data;"
argument_list|,
name|cases
operator|=
block|{
annotation|@
name|HivePdkUnitTest
argument_list|(
name|query
operator|=
literal|"SELECT tp_rot13('Mixed Up!') FROM onerow;"
argument_list|,
name|result
operator|=
literal|"Zvkrq Hc!"
argument_list|)
block|,
annotation|@
name|HivePdkUnitTest
argument_list|(
name|query
operator|=
literal|"SELECT tp_rot13(s) FROM rot13_data;"
argument_list|,
name|result
operator|=
literal|"Snprobbx"
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|Rot13
extends|extends
name|UDF
block|{
specifier|private
name|Text
name|t
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|public
name|Rot13
parameter_list|()
block|{   }
specifier|public
name|Text
name|evaluate
parameter_list|(
name|Text
name|s
parameter_list|)
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|(
name|s
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|char
index|[]
name|ca
init|=
name|s
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|ca
control|)
block|{
if|if
condition|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'m'
condition|)
block|{
name|c
operator|+=
literal|13
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'n'
operator|&&
name|c
operator|<=
literal|'z'
condition|)
block|{
name|c
operator|-=
literal|13
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'M'
condition|)
block|{
name|c
operator|+=
literal|13
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'N'
operator|&&
name|c
operator|<=
literal|'Z'
condition|)
block|{
name|c
operator|-=
literal|13
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|set
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
end_class

end_unit

