begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|pdk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|extensions
operator|.
name|TestSetup
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliDriver
import|;
end_import

begin_comment
comment|/**  * PluginTest is a test harness for invoking all of the unit tests  * annotated on the classes in a plugin.  */
end_comment

begin_class
specifier|public
class|class
name|PluginTest
extends|extends
name|TestCase
block|{
specifier|private
name|HivePdkUnitTest
name|unitTest
decl_stmt|;
specifier|private
name|PluginTest
parameter_list|(
name|HivePdkUnitTest
name|unitTest
parameter_list|)
block|{
name|super
argument_list|(
name|unitTest
operator|.
name|query
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|unitTest
operator|=
name|unitTest
expr_stmt|;
block|}
specifier|public
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|output
init|=
name|runHive
argument_list|(
literal|"-i"
argument_list|,
literal|"metadata/add-jar.sql"
argument_list|,
literal|"-e"
argument_list|,
name|unitTest
operator|.
name|query
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|unitTest
operator|.
name|result
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
specifier|static
name|String
name|runHive
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|outBytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|errBytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|outSaved
init|=
name|System
operator|.
name|out
decl_stmt|;
name|PrintStream
name|errSaved
init|=
name|System
operator|.
name|err
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|outBytes
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|errBytes
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|CliDriver
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|outSaved
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|errSaved
argument_list|)
expr_stmt|;
block|}
name|ByteArrayInputStream
name|outBytesIn
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|outBytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|errBytesIn
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|errBytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedReader
name|is
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|outBytesIn
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|es
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|errBytesIn
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|output
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|is
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|output
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|output
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|es
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|output
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|classList
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hive.plugin.class.list"
argument_list|)
decl_stmt|;
name|String
index|[]
name|classNames
init|=
name|classList
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
literal|"Plugin Tests"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|className
range|:
name|classNames
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|HivePdkUnitTests
name|tests
init|=
name|c
operator|.
name|getAnnotation
argument_list|(
name|HivePdkUnitTests
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tests
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|TestSuite
name|classSuite
init|=
operator|new
name|TestSuite
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HivePdkUnitTest
name|unitTest
range|:
name|tests
operator|.
name|cases
argument_list|()
control|)
block|{
name|classSuite
operator|.
name|addTest
argument_list|(
operator|new
name|PluginTest
argument_list|(
name|unitTest
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|suite
operator|.
name|addTest
argument_list|(
operator|new
name|PluginTestSetup
argument_list|(
name|classSuite
argument_list|,
name|tests
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PluginGlobalSetup
argument_list|(
name|suite
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|PluginTestSetup
extends|extends
name|TestSetup
block|{
name|String
name|name
decl_stmt|;
name|HivePdkUnitTests
name|unitTests
decl_stmt|;
name|PluginTestSetup
parameter_list|(
name|TestSuite
name|test
parameter_list|,
name|HivePdkUnitTests
name|unitTests
parameter_list|)
block|{
name|super
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|test
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|unitTests
operator|=
name|unitTests
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cleanup
init|=
name|unitTests
operator|.
name|cleanup
argument_list|()
decl_stmt|;
name|String
name|setup
init|=
name|unitTests
operator|.
name|setup
argument_list|()
decl_stmt|;
if|if
condition|(
name|cleanup
operator|==
literal|null
condition|)
block|{
name|cleanup
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|setup
operator|==
literal|null
condition|)
block|{
name|setup
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|cleanup
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|||
operator|(
name|setup
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|String
name|result
init|=
name|runHive
argument_list|(
literal|"-e"
argument_list|,
name|cleanup
operator|+
literal|"\n"
operator|+
name|setup
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|name
operator|+
literal|" SETUP:  "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|cleanup
init|=
name|unitTests
operator|.
name|cleanup
argument_list|()
decl_stmt|;
if|if
condition|(
name|cleanup
operator|!=
literal|null
condition|)
block|{
name|String
name|result
init|=
name|runHive
argument_list|(
literal|"-e"
argument_list|,
name|cleanup
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|name
operator|+
literal|" TEARDOWN:  "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|PluginGlobalSetup
extends|extends
name|TestSetup
block|{
specifier|private
name|File
name|testScriptDir
decl_stmt|;
name|PluginGlobalSetup
parameter_list|(
name|Test
name|test
parameter_list|)
block|{
name|super
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|testScriptDir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"hive.plugin.root.dir"
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|runHive
argument_list|(
literal|"-i"
argument_list|,
operator|new
name|File
argument_list|(
name|testScriptDir
argument_list|,
literal|"cleanup.sql"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"-i"
argument_list|,
literal|"metadata/add-jar.sql"
argument_list|,
literal|"-i"
argument_list|,
literal|"metadata/class-registration.sql"
argument_list|,
literal|"-f"
argument_list|,
operator|new
name|File
argument_list|(
name|testScriptDir
argument_list|,
literal|"setup.sql"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"GLOBAL SETUP:  "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|runHive
argument_list|(
literal|"-f"
argument_list|,
operator|new
name|File
argument_list|(
name|testScriptDir
argument_list|,
literal|"cleanup.sql"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"GLOBAL TEARDOWN:  "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

