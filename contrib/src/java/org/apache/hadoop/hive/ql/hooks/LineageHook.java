begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|BaseColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|LineageInfo
operator|.
name|DependencyKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * Implementation of a post execute hook that simply prints out its parameters  * to standard output.  */
end_comment

begin_class
specifier|public
class|class
name|LineageHook
implements|implements
name|PostExecute
block|{
name|ConnectionUrlFactory
name|urlFactory
init|=
literal|null
decl_stmt|;
specifier|public
name|LineageHook
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|LineageHook
operator|.
name|class
argument_list|)
decl_stmt|;
name|urlFactory
operator|=
name|HookUtils
operator|.
name|getUrlFactory
argument_list|(
name|conf
argument_list|,
name|FBHiveConf
operator|.
name|CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|LINEAGE_CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|LINEAGE_MYSQL_TIER_VAR_NAME
argument_list|,
name|FBHiveConf
operator|.
name|LINEAGE_HOST_DATABASE_VAR_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|SessionState
name|sess
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|LineageInfo
name|linfo
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|sess
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|linfo
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|DependencyKey
argument_list|,
name|Dependency
argument_list|>
argument_list|>
name|iter
init|=
name|linfo
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|DependencyKey
argument_list|,
name|Dependency
argument_list|>
name|it
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Dependency
name|dep
init|=
name|it
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DependencyKey
name|depK
init|=
name|it
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|/**          *  Generate json values of the following format:          *          *  {"value": {          *     "type":"SIMPLE",          *     "baseCols":[{          *        "column":{          *         "name":"col",          *         "comment":"from serde",          *         "type":"array<string>"          *        },          *        "tabAlias":{          *          "alias":"athusoo_tmp",          *          "table":{          *            "dbName":"default",          *            "tableName":"athusoo_tmp"          *          }          *        }          *     }]          *   },          *  "key":{          *    "fieldSchema":{          *      "name":"col",          *      "comment":"from deserializer",          *      "type":"array<string>"          *    },          *    "dataContainer":{          *      "isPartition":false,          *      "table":{          *        "dbName":"default",          *        "tableName":"athusoo_tmp2"          *      }          *    }          *  }          *}          */
name|JSONObject
name|out_json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|JSONObject
name|depk_json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|JSONObject
name|field_json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|field_json
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|depK
operator|.
name|getFieldSchema
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|field_json
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|depK
operator|.
name|getFieldSchema
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|field_json
operator|.
name|put
argument_list|(
literal|"comment"
argument_list|,
name|depK
operator|.
name|getFieldSchema
argument_list|()
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|depk_json
operator|.
name|put
argument_list|(
literal|"fieldSchema"
argument_list|,
name|field_json
argument_list|)
expr_stmt|;
name|JSONObject
name|dc_json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|dc_json
operator|.
name|put
argument_list|(
literal|"isPartition"
argument_list|,
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|isPartition
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|tab_json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|isPartition
argument_list|()
condition|)
block|{
name|JSONObject
name|part_json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|Partition
name|part
init|=
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|part_json
operator|.
name|put
argument_list|(
literal|"values"
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|tab_json
operator|.
name|put
argument_list|(
literal|"tableName"
argument_list|,
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|tab_json
operator|.
name|put
argument_list|(
literal|"dbName"
argument_list|,
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|fs_array
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|field_json
operator|=
operator|new
name|JSONObject
argument_list|()
expr_stmt|;
name|field_json
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|field_json
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|fs
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|field_json
operator|.
name|put
argument_list|(
literal|"comment"
argument_list|,
name|fs
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|fs_array
operator|.
name|put
argument_list|(
name|field_json
argument_list|)
expr_stmt|;
block|}
name|tab_json
operator|.
name|put
argument_list|(
literal|"partitionKeys"
argument_list|,
name|fs_array
argument_list|)
expr_stmt|;
name|part_json
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|tab_json
argument_list|)
expr_stmt|;
name|dc_json
operator|.
name|put
argument_list|(
literal|"partition"
argument_list|,
name|part_json
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tab_json
operator|.
name|put
argument_list|(
literal|"tableName"
argument_list|,
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|tab_json
operator|.
name|put
argument_list|(
literal|"dbName"
argument_list|,
name|depK
operator|.
name|getDataContainer
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|dc_json
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|tab_json
argument_list|)
expr_stmt|;
block|}
name|depk_json
operator|.
name|put
argument_list|(
literal|"dataContainer"
argument_list|,
name|dc_json
argument_list|)
expr_stmt|;
name|out_json
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
name|depk_json
argument_list|)
expr_stmt|;
name|JSONObject
name|dep_json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|dep_json
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|dep
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dep_json
operator|.
name|put
argument_list|(
literal|"expr"
argument_list|,
name|dep
operator|.
name|getExpr
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|basecol_array
init|=
operator|new
name|JSONArray
argument_list|()
decl_stmt|;
for|for
control|(
name|BaseColumnInfo
name|col
range|:
name|dep
operator|.
name|getBaseCols
argument_list|()
control|)
block|{
name|JSONObject
name|col_json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|field_json
operator|=
operator|new
name|JSONObject
argument_list|()
expr_stmt|;
comment|// A column can be null in the case of aggregations like count(1)
comment|// where the value is dependent on the entire row.
if|if
condition|(
name|col
operator|.
name|getColumn
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|field_json
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|col
operator|.
name|getColumn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|field_json
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|col
operator|.
name|getColumn
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|field_json
operator|.
name|put
argument_list|(
literal|"comment"
argument_list|,
name|col
operator|.
name|getColumn
argument_list|()
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|col_json
operator|.
name|put
argument_list|(
literal|"column"
argument_list|,
name|field_json
argument_list|)
expr_stmt|;
name|JSONObject
name|tabAlias_json
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|tabAlias_json
operator|.
name|put
argument_list|(
literal|"alias"
argument_list|,
name|col
operator|.
name|getTabAlias
argument_list|()
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|tab_json
operator|=
operator|new
name|JSONObject
argument_list|()
expr_stmt|;
name|tab_json
operator|.
name|put
argument_list|(
literal|"tableName"
argument_list|,
name|col
operator|.
name|getTabAlias
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|tab_json
operator|.
name|put
argument_list|(
literal|"dbName"
argument_list|,
name|col
operator|.
name|getTabAlias
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|tabAlias_json
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
name|tab_json
argument_list|)
expr_stmt|;
name|col_json
operator|.
name|put
argument_list|(
literal|"tabAlias"
argument_list|,
name|tabAlias_json
argument_list|)
expr_stmt|;
name|basecol_array
operator|.
name|put
argument_list|(
name|col_json
argument_list|)
expr_stmt|;
block|}
name|dep_json
operator|.
name|put
argument_list|(
literal|"baseCols"
argument_list|,
name|basecol_array
argument_list|)
expr_stmt|;
name|out_json
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|dep_json
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|sqlParams
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|out_json
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|"insert into lineage_log set info = ?"
decl_stmt|;
name|HookUtils
operator|.
name|runInsert
argument_list|(
name|conf
argument_list|,
name|urlFactory
argument_list|,
name|sql
argument_list|,
name|sqlParams
argument_list|,
name|HookUtils
operator|.
name|getSqlNumRetry
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

