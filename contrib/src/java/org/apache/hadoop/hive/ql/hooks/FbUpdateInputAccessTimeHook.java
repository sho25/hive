begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * Implementation of a pre AND post execute hook that updates the access times  * for all the inputs.  *  * It is required that this hook is put as the last pre-hook and the first  * post-hook. Invoked as pre-hook, it will start a background thread to update  * update time of all partitions and tables in the input set. Invoked as  * post-hook, it will wait the background thread to finish. And fail the query  * if the background thread fails.  */
end_comment

begin_class
specifier|public
class|class
name|FbUpdateInputAccessTimeHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.hooks.FbUpdateInputAccessTimeHook"
argument_list|)
decl_stmt|;
specifier|private
name|Hive
name|db
decl_stmt|;
specifier|static
specifier|private
name|Object
name|staticLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|static
specifier|private
name|HookThread
name|hookThread
init|=
literal|null
decl_stmt|;
specifier|static
specifier|private
name|HookContext
name|lastHookContext
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|!=
literal|null
operator|)
assert|;
comment|// if no input, there is no need to start the backgrond thread.
if|if
condition|(
name|hookContext
operator|.
name|getInputs
argument_list|()
operator|==
literal|null
operator|||
name|hookContext
operator|.
name|getInputs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// This race condition should never happen. But since we use static
comment|// member to keep some global states, we lock it in case it happens
comment|// because of a bug, we won't produce unpredictable results
synchronized|synchronized
init|(
name|staticLock
init|)
block|{
comment|// there is no flag to determine it is pre-hook or post-hook.
comment|// We just simply make the assumption that if one hook context
comment|// is passed again, it is post hook.
if|if
condition|(
name|lastHookContext
operator|==
name|hookContext
condition|)
block|{
name|lastHookContext
operator|=
literal|null
expr_stmt|;
name|runPosthook
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastHookContext
operator|!=
literal|null
operator|||
name|hookThread
operator|!=
literal|null
condition|)
block|{
comment|// If we don't forget to put the hook in post-execution hooks,
comment|// likely the previous task failed so that post-hook didn't have
comment|// chance to be executed.
comment|//
comment|// Ideally this error message should print to SessionState's error
comment|// stream if assigned. However, it is not in HookContext.
comment|// We use standard error message for now.
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"WARNING: FbUpdateInputAccessTimeHook doesn't start with a clear "
operator|+
literal|"state. Ignore this message if the previous query failed. If "
operator|+
literal|"previous task succeeded, check whether "
operator|+
literal|"FbUpdateInputAccessTimeHook is among the post-execution hooks"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hookThread
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Waiting for pending background thread of "
operator|+
literal|"FbUpdateInputAccessTimeHook to finish..."
argument_list|)
expr_stmt|;
name|hookThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Background thread of FbUpdateInputAccessTimeHook"
operator|+
literal|" finished."
argument_list|)
expr_stmt|;
name|hookThread
operator|=
literal|null
expr_stmt|;
block|}
name|lastHookContext
operator|=
name|hookContext
expr_stmt|;
name|runPrehook
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|hookContext
operator|.
name|getCompleteTaskList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"FbUpdateInputAccessTimeHook is not a part of "
operator|+
literal|"pre-execution hook?"
argument_list|)
throw|;
block|}
name|lastHookContext
operator|=
name|hookContext
expr_stmt|;
name|runPrehook
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|runPrehook
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"run as pre-execution hook"
argument_list|)
expr_stmt|;
name|hookThread
operator|=
operator|new
name|HookThread
argument_list|(
name|hookContext
operator|.
name|getConf
argument_list|()
argument_list|,
name|hookContext
operator|.
name|getInputs
argument_list|()
argument_list|,
name|hookContext
operator|.
name|getOutputs
argument_list|()
argument_list|)
expr_stmt|;
name|hookThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|runPosthook
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|HiveException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"run as post-execution hook"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hookThread
operator|!=
literal|null
condition|)
block|{
name|HookThread
name|pendingThread
init|=
name|hookThread
decl_stmt|;
try|try
block|{
name|pendingThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"Background thread in FbUpdateInputAccessTimeHook failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hookThread
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pendingThread
operator|.
name|isSuccessful
argument_list|()
condition|)
block|{
if|if
condition|(
name|pendingThread
operator|.
name|getHiveException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"FbUpdateInputAccessTimeHook failed"
argument_list|,
name|pendingThread
operator|.
name|getHiveException
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|pendingThread
operator|.
name|getInvalidOperationException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"FbUpdateInputAccessTimeHook failed"
argument_list|,
name|pendingThread
operator|.
name|getInvalidOperationException
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"FbUpdateInputAccessTimeHook failed with "
operator|+
literal|"Unhandled Exception."
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|HiveException
argument_list|(
literal|"FbUpdateInputAccessTimeHook is not one of pre-execution hook, "
operator|+
literal|"but it is one of the post-execution hook."
argument_list|)
throw|;
block|}
block|}
comment|/**    * class for the background thread    *    * @author sdong    *    */
class|class
name|HookThread
extends|extends
name|Thread
block|{
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
decl_stmt|;
name|HiveConf
name|hiveConf
decl_stmt|;
name|boolean
name|success
decl_stmt|;
name|HiveException
name|hiveException
decl_stmt|;
name|InvalidOperationException
name|invalidOperationException
decl_stmt|;
name|HookThread
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|)
block|{
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|this
operator|.
name|inputs
operator|=
name|inputs
expr_stmt|;
name|this
operator|.
name|outputs
operator|=
name|outputs
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccessful
parameter_list|()
block|{
return|return
name|success
return|;
block|}
specifier|public
name|HiveException
name|getHiveException
parameter_list|()
block|{
return|return
name|hiveException
return|;
block|}
specifier|public
name|InvalidOperationException
name|getInvalidOperationException
parameter_list|()
block|{
return|return
name|invalidOperationException
return|;
block|}
specifier|private
name|void
name|updateTableAccessTime
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tableMap
parameter_list|,
name|Table
name|table
parameter_list|,
name|int
name|lastAccessTime
parameter_list|)
throws|throws
name|HiveException
throws|,
name|InvalidOperationException
block|{
if|if
condition|(
operator|!
name|tableMap
operator|.
name|containsKey
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|Table
name|t
init|=
name|db
operator|.
name|getTable
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setLastAccessTime
argument_list|(
name|lastAccessTime
argument_list|)
expr_stmt|;
name|db
operator|.
name|alterTable
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|tableMap
operator|.
name|put
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|db
operator|=
name|Hive
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
comment|// ignore
name|db
operator|=
literal|null
expr_stmt|;
return|return;
block|}
block|}
name|int
name|lastAccessTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
name|tableMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Table
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReadEntity
name|re
range|:
name|inputs
control|)
block|{
comment|// Set the last query time
name|ReadEntity
operator|.
name|Type
name|typ
init|=
name|re
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|typ
condition|)
block|{
comment|// It is possible that read and write entities contain a old
comment|// version
comment|// of the object, before it was modified by StatsTask.
comment|// Get the latest versions of the object
case|case
name|TABLE
case|:
block|{
name|updateTableAccessTime
argument_list|(
name|tableMap
argument_list|,
name|re
operator|.
name|getTable
argument_list|()
argument_list|,
name|lastAccessTime
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PARTITION
case|:
block|{
name|Partition
name|p
init|=
name|re
operator|.
name|getPartition
argument_list|()
decl_stmt|;
name|updateTableAccessTime
argument_list|(
name|tableMap
argument_list|,
name|p
operator|.
name|getTable
argument_list|()
argument_list|,
name|lastAccessTime
argument_list|)
expr_stmt|;
comment|// table already in the map after updating tables' access time
name|Table
name|t
init|=
name|tableMap
operator|.
name|get
argument_list|(
name|p
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|=
name|db
operator|.
name|getPartition
argument_list|(
name|t
argument_list|,
name|p
operator|.
name|getSpec
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|p
operator|.
name|setLastAccessTime
argument_list|(
name|lastAccessTime
argument_list|)
expr_stmt|;
name|db
operator|.
name|alterPartition
argument_list|(
name|t
operator|.
name|getTableName
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
comment|// ignore dummy inputs
break|break;
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
name|hiveException
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
name|invalidOperationException
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

