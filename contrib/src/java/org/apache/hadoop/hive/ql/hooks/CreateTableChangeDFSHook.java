begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateTableLikeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_comment
comment|/**  * Implementation of a pre execute hook that is used to change  * the location of the DFS.  * This is only applicable to new tables - this can be used to  * eventually spread the load evenly on more than 1 DFS.  */
end_comment

begin_class
specifier|public
class|class
name|CreateTableChangeDFSHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CreateTableChangeDFSHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|PRE_EXEC_HOOK
operator|)
assert|;
name|QueryPlan
name|queryPlan
init|=
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
decl_stmt|;
comment|// This change is only needed when a new table is being created
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
init|=
name|queryPlan
operator|.
name|getRootTasks
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|rootTasks
operator|==
literal|null
operator|)
operator|||
operator|(
name|rootTasks
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|)
condition|)
block|{
return|return;
block|}
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
init|=
name|rootTasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|tsk
operator|.
name|getWork
argument_list|()
operator|instanceof
name|DDLWork
operator|)
condition|)
block|{
return|return;
block|}
name|HiveConf
name|conf
init|=
name|hookContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|DDLWork
name|ddlWork
init|=
operator|(
name|DDLWork
operator|)
name|tsk
operator|.
name|getWork
argument_list|()
decl_stmt|;
name|float
name|pubPercent
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|FBHiveConf
operator|.
name|ENABLE_PARTIAL_CHANGEDFS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// if pubPercent == 0, make sure it returns.
if|if
condition|(
operator|!
name|HookUtils
operator|.
name|rollDice
argument_list|(
name|pubPercent
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|newDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|FBHiveConf
operator|.
name|SECONDARYMETASTOREWAREHOUSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ddlWork
operator|.
name|getCreateTblDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CreateTableDesc
name|crtTblDesc
init|=
name|ddlWork
operator|.
name|getCreateTblDesc
argument_list|()
decl_stmt|;
comment|// The user has already specified the location
if|if
condition|(
name|crtTblDesc
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// This is only for tmp tables right now
if|if
condition|(
operator|(
name|crtTblDesc
operator|.
name|getTableName
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
operator|(
operator|!
name|crtTblDesc
operator|.
name|getTableName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"tmp_"
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|crtTblDesc
operator|.
name|getTableName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"temp_"
argument_list|)
operator|)
operator|)
condition|)
block|{
return|return;
block|}
name|String
name|locn
init|=
operator|(
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
operator|)
operator|.
name|getTablePath
argument_list|(
name|newDir
argument_list|,
name|crtTblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|crtTblDesc
operator|.
name|setLocation
argument_list|(
name|locn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"change location for table "
operator|+
name|crtTblDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ddlWork
operator|.
name|getCreateTblLikeDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CreateTableLikeDesc
name|crtTblLikeDesc
init|=
name|ddlWork
operator|.
name|getCreateTblLikeDesc
argument_list|()
decl_stmt|;
comment|// The user has already specified the location
if|if
condition|(
name|crtTblLikeDesc
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// This is only for tmp tables right now
if|if
condition|(
operator|(
name|crtTblLikeDesc
operator|.
name|getTableName
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
operator|(
operator|!
name|crtTblLikeDesc
operator|.
name|getTableName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"tmp_"
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|crtTblLikeDesc
operator|.
name|getTableName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"temp_"
argument_list|)
operator|)
operator|)
condition|)
block|{
return|return;
block|}
name|String
name|locn
init|=
operator|(
operator|new
name|Warehouse
argument_list|(
name|conf
argument_list|)
operator|)
operator|.
name|getTablePath
argument_list|(
name|newDir
argument_list|,
name|crtTblLikeDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|crtTblLikeDesc
operator|.
name|setLocation
argument_list|(
name|locn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"change location for table "
operator|+
name|crtTblLikeDesc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
end_class

end_unit

