begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|MapRedStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|HiveStatsMetricsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|HiveStatsMetricsPublisher
operator|.
name|QueryTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Counters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * A hook which populates the job_stats_log MySQL table with  * stats for each job which has run for this query, the query ID,  * and whether or not the query succeeded.  *  * It also sets the query attributes in HiveStatsMetricsPublisher and logs  * the stats through it as well.  */
end_comment

begin_class
specifier|public
class|class
name|JobStatsHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HIVE_QUERY_SOURCE
init|=
literal|"hive.query.source"
decl_stmt|;
specifier|public
specifier|static
name|ConnectionUrlFactory
name|getJobStatsUrlFactory
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
return|return
name|HookUtils
operator|.
name|getUrlFactory
argument_list|(
name|conf
argument_list|,
name|FBHiveConf
operator|.
name|CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|JOBSTATS_CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|JOBSTATS_MYSQL_TIER_VAR_NAME
argument_list|,
name|FBHiveConf
operator|.
name|JOBSTATS_HOST_DATABASE_VAR_NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|POST_EXEC_HOOK
operator|||
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|ON_FAILURE_HOOK
operator|)
assert|;
name|String
name|queryId
init|=
literal|""
decl_stmt|;
name|String
name|querySrc
init|=
literal|""
decl_stmt|;
name|String
name|queryTagsStr
init|=
literal|""
decl_stmt|;
name|String
name|statsString
init|=
literal|""
decl_stmt|;
name|SessionState
name|sess
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|queryFailed
init|=
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|ON_FAILURE_HOOK
condition|?
literal|"1"
else|:
literal|"0"
decl_stmt|;
name|HiveConf
name|conf
init|=
name|sess
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|HiveStatsMetricsPublisher
name|metricsPublisher
init|=
operator|(
name|HiveStatsMetricsPublisher
operator|)
name|HookUtils
operator|.
name|getObject
argument_list|(
name|conf
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|FBHiveConf
operator|.
name|HIVE_METRICS_PUBLISHER
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricsPublisher
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|metricsPublisher
operator|.
name|extractAndOverwriteQueryAttributes
argument_list|(
name|hookContext
argument_list|)
expr_stmt|;
name|JSONObject
name|jobStats
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|ConnectionUrlFactory
name|urlFactory
init|=
name|getJobStatsUrlFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"DB parameters for audit_log not set!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sess
operator|!=
literal|null
condition|)
block|{
name|queryId
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
expr_stmt|;
name|querySrc
operator|=
name|conf
operator|.
name|get
argument_list|(
name|HIVE_QUERY_SOURCE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TaskRunner
argument_list|>
name|completedTasks
init|=
name|hookContext
operator|.
name|getCompleteTaskList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobToStageMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|completedTasks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TaskRunner
name|taskRunner
range|:
name|completedTasks
control|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
init|=
name|taskRunner
operator|.
name|getTask
argument_list|()
decl_stmt|;
comment|// If the Job ID is null, this indicates the task is not a map
comment|// reduce task, or it was run locally
if|if
condition|(
name|task
operator|.
name|getJobID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|jobID
init|=
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|task
operator|.
name|getJobID
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|stageID
init|=
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|task
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|jobToStageMap
operator|.
name|put
argument_list|(
name|jobID
argument_list|,
name|stageID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|MapRedStats
argument_list|>
name|listStats
init|=
name|sess
operator|.
name|getLastMapRedStatsList
argument_list|()
decl_stmt|;
if|if
condition|(
name|listStats
operator|!=
literal|null
operator|&&
name|listStats
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
index|[]
name|perJobStats
init|=
operator|new
name|Map
index|[
name|listStats
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listStats
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MapRedStats
name|mps
init|=
name|listStats
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Counters
name|ctrs
init|=
name|mps
operator|.
name|getCounters
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|counterList
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|metrics
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
name|counterList
operator|.
name|put
argument_list|(
literal|"job_ID"
argument_list|,
name|mps
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobToStageMap
operator|.
name|containsKey
argument_list|(
name|mps
operator|.
name|getJobId
argument_list|()
argument_list|)
condition|)
block|{
name|counterList
operator|.
name|put
argument_list|(
literal|"stage"
argument_list|,
name|jobToStageMap
operator|.
name|get
argument_list|(
name|mps
operator|.
name|getJobId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"cpu_msec"
argument_list|,
literal|"cpu_sec"
argument_list|,
name|mps
operator|.
name|getCpuMSec
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|addJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map"
argument_list|,
name|mps
operator|.
name|getNumMap
argument_list|()
argument_list|)
expr_stmt|;
name|addJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"reduce"
argument_list|,
name|mps
operator|.
name|getNumReduce
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctrs
operator|!=
literal|null
condition|)
block|{
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"hdfs_read_bytes"
argument_list|,
literal|"hdfs_read_mbytes"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"HDFS_BYTES_READ"
argument_list|)
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"hdfs_write_bytes"
argument_list|,
literal|"hdfs_write_mbytes"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"HDFS_BYTES_WRITTEN"
argument_list|)
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"hdfs_local_read_bytes"
argument_list|,
literal|"hdfs_read_local_mbytes"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"HDFS_BYTES_READ_LOCAL"
argument_list|)
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"hdfs_rack_read_bytes"
argument_list|,
literal|"hdfs_rack_read_mbytes"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"HDFS_BYTES_READ_RACK"
argument_list|)
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"hdfs_read_exceptions"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"HDFS_READ_EXCEPTIONS"
argument_list|)
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"hdfs_write_exceptions"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"FileSystemCounters"
argument_list|,
literal|"HDFS_WRITE_EXCEPTIONS"
argument_list|)
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_input_records"
argument_list|,
literal|"map_input_million_records"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_INPUT_RECORDS"
argument_list|)
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_output_records"
argument_list|,
literal|"map_output_million_records"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_OUTPUT_RECORDS"
argument_list|)
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"reduce_input_records"
argument_list|,
literal|"reduce_input_million_records"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"REDUCE_INPUT_RECORDS"
argument_list|)
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"reduce_output_records"
argument_list|,
literal|"reduce_output_million_records"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"REDUCE_OUTPUT_RECORDS"
argument_list|)
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"shuffle_bytes"
argument_list|,
literal|"shuffle_mbytes"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"REDUCE_SHUFFLE_BYTES"
argument_list|)
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_input_bytes"
argument_list|,
literal|"map_input_mbytes"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_INPUT_BYTES"
argument_list|)
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_spill_cpu_msecs"
argument_list|,
literal|"map_spill_cpu_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_SPILL_CPU"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_spill_wallclock_msecs"
argument_list|,
literal|"map_spill_walllclock_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_SPILL_WALLCLOCK"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_spill_number"
argument_list|,
literal|"map_spill_number"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_SPILL_NUMBER"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_spill_bytes"
argument_list|,
literal|"map_spill_mbytes"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_SPILL_BYTES"
argument_list|)
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_mem_sort_cpu_msecs"
argument_list|,
literal|"map_mem_sort_cpu_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_MEM_SORT_CPU"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_mem_sort_wallclock_msecs"
argument_list|,
literal|"map_mem_sort_wallclock_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_MEM_SORT_WALLCLOCK"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_merge_cpu_msecs"
argument_list|,
literal|"map_merge_cpu_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_MERGE_CPU"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_merge_wallclock_msecs"
argument_list|,
literal|"map_merge_wallclock_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_MERGE_WALLCLOCK"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"reduce_copy_cpu_msecs"
argument_list|,
literal|"reduce_copy_cpu_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"REDUCE_COPY_CPU"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"reduce_copy_wallclock_msecs"
argument_list|,
literal|"reduce_copy_wallclock_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"REDUCE_COPY_WALLCLOCK"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"reduce_sort_cpu_msecs"
argument_list|,
literal|"reduce_sort_cpu_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"REDUCE_SORT_CPU"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"redcue_sort_wallclock_msecs"
argument_list|,
literal|"reduce_sort_wallclock_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"REDUCE_SORT_WALLCLOCK"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"map_task_wallclock_msecs"
argument_list|,
literal|"map_task_wallclock_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"MAP_TASK_WALLCLOCK"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"reduce_task_wallclock_msecs"
argument_list|,
literal|"reduce_task_wallclock_secs"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.Task$Counter"
argument_list|,
literal|"REDUCE_TASK_WALLCLOCK"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"slots_millis_maps"
argument_list|,
literal|"slots_secs_maps"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.JobInProgress$Counter"
argument_list|,
literal|"SLOTS_MILLIS_MAPS"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"slots_millis_reduces"
argument_list|,
literal|"slots_secs_reduces"
argument_list|,
name|ctrs
operator|.
name|findCounter
argument_list|(
literal|"org.apache.hadoop.mapred.JobInProgress$Counter"
argument_list|,
literal|"SLOTS_MILLIS_REDUCES"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
name|addJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
literal|"success"
argument_list|,
name|mps
operator|.
name|isSuccess
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|perJobStats
index|[
name|i
index|]
operator|=
name|counterList
expr_stmt|;
name|metricsPublisher
operator|.
name|publishMetricsWithQueryTags
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
block|}
name|jobStats
operator|.
name|put
argument_list|(
literal|"per_job_stats"
argument_list|,
name|perJobStats
argument_list|)
expr_stmt|;
block|}
block|}
name|HiveOperation
name|op
init|=
name|sess
operator|.
name|getHiveOperation
argument_list|()
decl_stmt|;
comment|// If input was read, log the input and output size
if|if
condition|(
operator|(
name|op
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
argument_list|)
operator|)
operator|||
operator|(
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|LOAD
argument_list|)
operator|)
operator|||
operator|(
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|QUERY
argument_list|)
operator|)
operator|)
condition|)
block|{
comment|// We are depending on the stats to be present in the metastore.
comment|// If that is not true, we might end up calling getContentSummary for
comment|// all the inputs and outputs, which may create a problem for HDFS
comment|// Allow the user to manually turn it off.
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|)
condition|)
block|{
if|if
condition|(
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getOverriddenConfigurations
argument_list|()
operator|.
name|containsKey
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
operator|.
name|varname
argument_list|)
condition|)
block|{
name|SessionState
operator|.
name|getConsole
argument_list|()
operator|.
name|printInfo
argument_list|(
literal|"WARNING: hive.stats.autogather is set to false."
operator|+
literal|"  Stats were not populated for any outputs of this query.  If any tables or "
operator|+
literal|"partitions were overwritten as part of this query, their stats may be incorrect"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"hive.stats.autogather is set to false"
argument_list|)
throw|;
block|}
block|}
comment|// Log the total size and the individual sizes for each input and output
name|HookUtils
operator|.
name|ObjectSize
name|inputSizes
init|=
name|HookUtils
operator|.
name|getObjectSize
argument_list|(
name|conf
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|hookContext
operator|.
name|getInputs
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|jobStats
operator|.
name|put
argument_list|(
literal|"input_size"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|inputSizes
operator|.
name|getTotalSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inputSizes
operator|.
name|getObjectTypeLengths
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jobStats
operator|.
name|put
argument_list|(
literal|"inputs"
argument_list|,
name|inputSizes
operator|.
name|getObjectTypeLengths
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Log the pool specified in the conf. May be overwritten by the conf
comment|// if we enable the feature on the JT to disallow non-standard pools.
name|String
name|specifiedPool
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.fairscheduler.pool"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|specifiedPool
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|jobStats
operator|.
name|put
argument_list|(
literal|"pool"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.fairscheduler.pool"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|!=
name|HookContext
operator|.
name|HookType
operator|.
name|ON_FAILURE_HOOK
condition|)
block|{
comment|// The object for the outputs was created before the statistics in that
comment|// object was populated. So, reload the outputs from the metastore to get
comment|// the size for outputs
name|HookUtils
operator|.
name|ObjectSize
name|outputSizes
init|=
name|HookUtils
operator|.
name|getObjectSize
argument_list|(
name|conf
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Entity
argument_list|>
argument_list|(
name|hookContext
operator|.
name|getOutputs
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|jobStats
operator|.
name|put
argument_list|(
literal|"output_size"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|outputSizes
operator|.
name|getTotalSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputSizes
operator|.
name|getObjectTypeLengths
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jobStats
operator|.
name|put
argument_list|(
literal|"outputs"
argument_list|,
name|outputSizes
operator|.
name|getObjectTypeLengths
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|statsString
operator|=
name|jobStats
operator|.
name|toString
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|QueryTag
argument_list|>
name|queryTags
init|=
name|metricsPublisher
operator|.
name|getQueryAttributes
argument_list|()
decl_stmt|;
name|queryTagsStr
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
name|queryTags
argument_list|,
literal|','
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|sqlParams
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|queryId
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|querySrc
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|queryFailed
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|queryTagsStr
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|statsString
argument_list|)
expr_stmt|;
comment|// Assertion at beginning of method guarantees this string will not remain empty
name|String
name|sql
init|=
literal|"insert into job_stats_log set queryId = ?, query_src = ?, query_failed = ?, "
operator|+
literal|"query_tags = ?, job_stats = ?"
decl_stmt|;
name|HookUtils
operator|.
name|runInsert
argument_list|(
name|conf
argument_list|,
name|urlFactory
argument_list|,
name|sql
argument_list|,
name|sqlParams
argument_list|,
name|HookUtils
operator|.
name|getSqlNumRetry
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|conditionalAddJobStat
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|counterList
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|metrics
parameter_list|,
name|String
name|key
parameter_list|,
name|Counters
operator|.
name|Counter
name|cntr
parameter_list|)
block|{
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
name|key
argument_list|,
name|key
argument_list|,
name|cntr
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|conditionalAddJobStat
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|counterList
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|metrics
parameter_list|,
name|String
name|exactKey
parameter_list|,
name|String
name|approximateKey
parameter_list|,
name|Counters
operator|.
name|Counter
name|cntr
parameter_list|,
name|int
name|divisor
parameter_list|)
block|{
if|if
condition|(
name|cntr
operator|!=
literal|null
condition|)
block|{
name|conditionalAddJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
name|exactKey
argument_list|,
name|approximateKey
argument_list|,
name|cntr
operator|.
name|getValue
argument_list|()
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|conditionalAddJobStat
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|counterList
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|metrics
parameter_list|,
name|String
name|exactKey
parameter_list|,
name|String
name|approximateKey
parameter_list|,
name|long
name|cntrValue
parameter_list|,
name|int
name|divisor
parameter_list|)
block|{
if|if
condition|(
name|cntrValue
operator|>=
literal|0
condition|)
block|{
name|addJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
name|exactKey
argument_list|,
name|approximateKey
argument_list|,
name|cntrValue
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addJobStat
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|counterList
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|metrics
parameter_list|,
name|String
name|key
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|addJobStat
argument_list|(
name|counterList
argument_list|,
name|metrics
argument_list|,
name|key
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Method that adds a key value pair to a map, as well as to a list of OdsKeyValuePairs
comment|// with average aggregation
specifier|private
name|void
name|addJobStat
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|counterList
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|metrics
parameter_list|,
name|String
name|exactKey
parameter_list|,
name|String
name|approximatedKey
parameter_list|,
name|long
name|value
parameter_list|,
name|int
name|divisor
parameter_list|)
block|{
name|counterList
operator|.
name|put
argument_list|(
name|exactKey
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|put
argument_list|(
name|approximatedKey
argument_list|,
operator|(
name|double
operator|)
name|value
operator|/
name|divisor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

