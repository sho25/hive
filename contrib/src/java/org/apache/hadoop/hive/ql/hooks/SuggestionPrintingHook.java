begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DDLTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Implementation of a pre execute hook that prints out a suggestion for users  * to use TABLESAMPLE when inputs are large.  */
end_comment

begin_class
specifier|public
class|class
name|SuggestionPrintingHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SuggestionPrintingHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|private
name|int
name|timesReported
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|PRE_EXEC_HOOK
operator|)
assert|;
name|SessionState
name|sess
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sess
operator|.
name|getIsSilent
argument_list|()
condition|)
block|{
return|return;
block|}
name|SessionState
operator|.
name|LogHelper
name|console
init|=
operator|new
name|SessionState
operator|.
name|LogHelper
argument_list|(
name|LOG
argument_list|)
decl_stmt|;
name|QueryPlan
name|queryPlan
init|=
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
init|=
name|queryPlan
operator|.
name|getRootTasks
argument_list|()
decl_stmt|;
comment|// If it is a pure DDL task,
if|if
condition|(
name|rootTasks
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|rootTasks
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
init|=
name|rootTasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|tsk
operator|instanceof
name|DDLTask
condition|)
block|{
return|return;
block|}
block|}
comment|// do some simple query matching to not to show the suggestion for some
comment|// queries.
name|String
name|command
init|=
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getCmd
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|' '
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\t'
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|timesReported
operator|>
literal|0
operator|&&
name|HookUtils
operator|.
name|rollDice
argument_list|(
literal|0.9f
argument_list|)
operator|)
operator|||
operator|!
name|command
operator|.
name|contains
argument_list|(
literal|"SELECT "
argument_list|)
operator|||
name|command
operator|.
name|contains
argument_list|(
literal|" TABLESAMPLE"
argument_list|)
operator|||
name|command
operator|.
name|contains
argument_list|(
literal|" JOIN "
argument_list|)
operator|||
name|command
operator|.
name|contains
argument_list|(
literal|" LIMIT "
argument_list|)
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
name|hookContext
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ContentSummary
argument_list|>
name|inputToCS
init|=
name|hookContext
operator|.
name|getInputPathToContentSummary
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
init|=
name|sess
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|int
name|maxGigaBytes
init|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"fbhive.suggest.tablesample.gigabytes"
argument_list|,
literal|32
argument_list|)
decl_stmt|;
name|long
name|maxBytes
init|=
name|maxGigaBytes
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
if|if
condition|(
name|maxGigaBytes
operator|<
literal|0
condition|)
block|{
name|console
operator|.
name|printError
argument_list|(
literal|"maxGigaBytes value of "
operator|+
name|maxGigaBytes
operator|+
literal|"is invalid"
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|inputSize
init|=
name|HookUtils
operator|.
name|getInputSize
argument_list|(
name|inputs
argument_list|,
name|inputToCS
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputSize
operator|>
name|maxBytes
condition|)
block|{
name|console
operator|.
name|printInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|"***  This queries over "
operator|+
name|Math
operator|.
name|round
argument_list|(
name|maxBytes
operator|/
literal|1024D
operator|/
literal|1024D
operator|/
literal|1024D
argument_list|)
operator|+
literal|" GB data. Consider TABLESAMPLE: fburl.com/?key=2001210"
argument_list|)
expr_stmt|;
name|console
operator|.
name|printInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|timesReported
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

