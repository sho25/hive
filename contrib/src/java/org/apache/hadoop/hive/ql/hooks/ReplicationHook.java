begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|CachingPrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|log
operator|.
name|PerfLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * Implementation of a post execute hook that checks whether  * a partition is archived or not and also sets that query  * time for the partition.  */
end_comment

begin_class
specifier|public
class|class
name|ReplicationHook
extends|extends
name|BaseReplicationHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|public
name|ReplicationHook
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set this replication hook's hive configuration.    * Expose this as a public function in case run() cannot get the HiveConf    * from the session, e.g., if ReplicationHook is not called after a CLI query.    * @param conf the configuration to use    */
specifier|public
name|void
name|setHiveConf
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|(
name|SessionState
name|sess
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|LineageInfo
name|lInfo
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|Exception
block|{
name|run
argument_list|(
name|sess
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|,
name|lInfo
argument_list|,
name|ugi
argument_list|,
literal|null
argument_list|,
name|HookContext
operator|.
name|HookType
operator|.
name|POST_EXEC_HOOK
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|(
name|SessionState
name|sess
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|LineageInfo
name|lInfo
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|List
argument_list|<
name|TaskRunner
argument_list|>
name|completedTasks
parameter_list|,
name|HookContext
operator|.
name|HookType
name|hookType
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookType
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|POST_EXEC_HOOK
operator|||
name|hookType
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|ON_FAILURE_HOOK
operator|)
assert|;
name|String
name|command
init|=
literal|""
decl_stmt|;
name|String
name|commandType
init|=
literal|""
decl_stmt|;
name|String
name|user_info
init|=
literal|""
decl_stmt|;
name|String
name|inputStr
init|=
literal|""
decl_stmt|;
name|String
name|outputStr
init|=
literal|""
decl_stmt|;
name|String
name|queryId
init|=
literal|""
decl_stmt|;
name|String
name|querySrc
init|=
literal|""
decl_stmt|;
name|String
name|startTimeStr
init|=
literal|""
decl_stmt|;
name|String
name|packageName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|sess
operator|!=
literal|null
condition|)
block|{
name|command
operator|=
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|sess
operator|.
name|getCmd
argument_list|()
argument_list|)
expr_stmt|;
name|commandType
operator|=
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|sess
operator|.
name|getCommandType
argument_list|()
argument_list|)
expr_stmt|;
name|setHiveConf
argument_list|(
name|sess
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|queryId
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
expr_stmt|;
name|querySrc
operator|=
name|conf
operator|.
name|get
argument_list|(
name|JobStatsHook
operator|.
name|HIVE_QUERY_SOURCE
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|packageName
operator|=
name|conf
operator|.
name|get
argument_list|(
name|FBHiveConf
operator|.
name|FB_CURRENT_CLUSTER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ugi
operator|!=
literal|null
condition|)
block|{
name|user_info
operator|=
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputs
operator|!=
literal|null
condition|)
block|{
name|inputStr
operator|=
name|entitiesToString
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputs
operator|!=
literal|null
condition|)
block|{
name|outputStr
operator|=
name|entitiesToString
argument_list|(
name|outputs
argument_list|)
expr_stmt|;
block|}
comment|// Retrieve the time the Driver.run method started from the PerfLogger, as this corresponds
comment|// to approximately the time when the query started to be processed, and format it.
comment|// If, some how, this time was not set, it will default to 0000-00-00 00:00:00 in the db.
name|Long
name|startTimeMillis
init|=
name|PerfLogger
operator|.
name|getPerfLogger
argument_list|()
operator|.
name|getStartTime
argument_list|(
name|PerfLogger
operator|.
name|DRIVER_RUN
argument_list|)
decl_stmt|;
if|if
condition|(
name|startTimeMillis
operator|!=
literal|null
condition|)
block|{
name|Date
name|startTime
init|=
operator|new
name|Date
argument_list|(
name|startTimeMillis
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
name|startTimeStr
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|format
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Start time was null in ReplicationHook"
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|sqlParams
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|commandType
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|inputStr
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|outputStr
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|queryId
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|user_info
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|querySrc
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|startTimeStr
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
comment|// Assertion at beginning of method guarantees this string will remain empty
name|String
name|sql
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|hookType
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|POST_EXEC_HOOK
condition|)
block|{
name|sql
operator|=
literal|"insert into snc1_command_log set command = ?, command_type = ?, inputs = ?, "
operator|+
literal|"outputs = ?, queryId = ?, user_info = ?, query_src = ?, start_time = ?, "
operator|+
literal|"package_name = ?"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hookType
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|ON_FAILURE_HOOK
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
operator|(
operator|(
name|CachingPrintStream
operator|)
name|sess
operator|.
name|err
operator|)
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|String
name|localErrorString
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|JSONObject
name|localErrorObj
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|localErrorObj
operator|.
name|put
argument_list|(
literal|"localErrors"
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|localErrorString
operator|=
name|localErrorObj
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|sqlParams
operator|.
name|add
argument_list|(
name|localErrorString
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"insert into snc1_failed_command_log set command = ?, command_type = ?, inputs = ?, "
operator|+
literal|"outputs = ?, queryId = ?, user_info = ?, query_src = ?, start_time = ?, "
operator|+
literal|"package_name = ?, local_errors = ?"
expr_stmt|;
block|}
name|HookUtils
operator|.
name|runInsert
argument_list|(
name|conf
argument_list|,
name|urlFactory
argument_list|,
name|sql
argument_list|,
name|sqlParams
argument_list|,
name|HookUtils
operator|.
name|getSqlNumRetry
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
name|hookContext
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
name|hookContext
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
name|LineageInfo
name|linfo
init|=
name|hookContext
operator|.
name|getLinfo
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|hookContext
operator|.
name|getUgi
argument_list|()
decl_stmt|;
name|this
operator|.
name|run
argument_list|(
name|ss
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|,
name|linfo
argument_list|,
name|ugi
argument_list|,
name|hookContext
operator|.
name|getCompleteTaskList
argument_list|()
argument_list|,
name|hookContext
operator|.
name|getHookType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|entitiesToString
parameter_list|(
name|Set
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|entities
parameter_list|)
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Serializable
name|o
range|:
name|entities
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

