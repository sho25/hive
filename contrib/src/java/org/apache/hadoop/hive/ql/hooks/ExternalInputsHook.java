begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|AbstractSemanticAnalyzerHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * Implementation of a compile time hook that updates the inputs to include the managed objects  * which have data external inputs are pointing to  */
end_comment

begin_class
specifier|public
class|class
name|ExternalInputsHook
extends|extends
name|AbstractSemanticAnalyzerHook
block|{
specifier|private
specifier|static
specifier|final
name|int
name|SQL_NUM_RETRIES
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RETRY_MAX_INTERVAL_SEC
init|=
literal|60
decl_stmt|;
comment|// Does nothing
annotation|@
name|Override
specifier|public
name|ASTNode
name|preAnalyze
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|context
parameter_list|,
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|//do nothing
return|return
name|ast
return|;
block|}
comment|// Updates the inputs to include managed tables/partitions whose data is pointed to by external
comment|// inputs
annotation|@
name|Override
specifier|public
name|void
name|postAnalyze
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|context
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|)
throws|throws
name|SemanticException
block|{
name|HiveSemanticAnalyzerHookContextImpl
name|ctx
init|=
operator|(
name|HiveSemanticAnalyzerHookContextImpl
operator|)
name|context
decl_stmt|;
name|HiveConf
name|conf
init|=
operator|(
name|HiveConf
operator|)
name|ctx
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|externalLocations
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReadEntity
name|input
range|:
name|ctx
operator|.
name|getInputs
argument_list|()
control|)
block|{
comment|// If this input is either an external table or a partition in an external table, add its
comment|// location to the set of locations
if|if
condition|(
name|input
operator|.
name|getTable
argument_list|()
operator|.
name|getTableType
argument_list|()
operator|==
name|TableType
operator|.
name|EXTERNAL_TABLE
condition|)
block|{
name|String
name|location
init|=
literal|null
decl_stmt|;
try|try
block|{
name|location
operator|=
name|input
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"GetLocation failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// We assume all managed tables exist in /user/facebook/warehouse/
comment|// This helps to avoid having to look up if there are managed tables pointing to the data
comment|// being pointed to by scrape and scribe staging tables, which point to directories like
comment|// /user/facebook/scrape_staging (staging tables) and /user/facebook/scribe_staging
comment|// (current tables) and /tmp (signal tables)
comment|// We are also excluding inputs which are partitioned tables (without their partitions)
comment|// If the input is a partitioned table, it can only be a metadata change, and hence only
comment|// needs the external table, not the underlying managed table.  If any data was queried
comment|// the partition queried will also be in the inputs and we can get the managed
comment|// table/partition from this.
if|if
condition|(
name|location
operator|.
name|contains
argument_list|(
literal|"/user/facebook/warehouse/"
argument_list|)
operator|&&
operator|(
operator|!
name|input
operator|.
name|getTable
argument_list|()
operator|.
name|isPartitioned
argument_list|()
operator|||
name|input
operator|.
name|getType
argument_list|()
operator|!=
name|ReadEntity
operator|.
name|Type
operator|.
name|TABLE
operator|)
condition|)
block|{
name|externalLocations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If there were some external inputs, get the managed tables/partitions whose data they
comment|// point to
if|if
condition|(
operator|!
name|externalLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// The 2 cases in the select are as follows:
comment|// d1.name, t1.tbl_name, p1.part_name
comment|// 1) The external entity's location is such that there are one or more partitions whose
comment|//    location is a subdirectory, this includes if the external entity's location is the same
comment|//    as the location of a partitioned table, in which case all partitions whose location has
comment|//    the table's location as a prefix will be returned, not the table (If the location of
comment|//    the table was ever changed, this means only the subset of partitions created after the
comment|//    location was changed will be included)
comment|// d2.name, t2.tbl_name, NULL
comment|// 2) The external entity's location is such that there is an unpartitioned whose location is
comment|//    a prefix.  In this case the table is returned.
name|String
name|sql
init|=
literal|"SELECT IF(p1.part_name IS NOT NULL, d1.name, d2.name), "
operator|+
literal|"       IF(p1.part_name IS NOT NULL, t1.tbl_name, t2.tbl_name), "
operator|+
literal|"       p1.part_name "
operator|+
literal|"FROM SDS s LEFT JOIN PARTITIONS p1 ON s.sd_id = p1.sd_id "
operator|+
literal|"LEFT JOIN TBLS t1 ON t1.tbl_id = p1.tbl_id "
operator|+
literal|"LEFT JOIN DBS d1 ON t1.db_id = d1.db_id "
operator|+
literal|"LEFT JOIN TBLS t2 ON t2.sd_id = s.sd_id "
operator|+
literal|"LEFT JOIN DBS d2 ON d2.db_id = t2.db_id "
operator|+
literal|"LEFT JOIN PARTITION_KEYS k on t2.tbl_id = k.tbl_id "
operator|+
literal|"WHERE ((p1.part_name IS NOT NULL AND t1.tbl_type = 'MANAGED_TABLE') OR "
operator|+
literal|"       (p1.part_name IS NULL AND t2.tbl_type = 'MANAGED_TABLE' AND"
operator|+
literal|"        k.tbl_id IS NULL)) AND ("
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|sqlParams
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|firstLocation
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|location
range|:
name|externalLocations
control|)
block|{
if|if
condition|(
operator|!
name|firstLocation
condition|)
block|{
name|sql
operator|+=
literal|"OR "
expr_stmt|;
block|}
else|else
block|{
name|firstLocation
operator|=
literal|false
expr_stmt|;
block|}
name|sql
operator|+=
literal|"s.location LIKE ? "
expr_stmt|;
name|sql
operator|+=
literal|"OR s.location = ? "
expr_stmt|;
comment|// Adding the / ensures that we will only get locations which are subdirectories of the
comment|// external entities location, rather than just having it as a prefix
name|sqlParams
operator|.
name|add
argument_list|(
name|location
operator|+
literal|"/%"
argument_list|)
expr_stmt|;
comment|// Also check if it is equal, in which case the final / will not be in the location or it
comment|// will be captured by the LIKE
name|sqlParams
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|sql
operator|+=
literal|");"
expr_stmt|;
name|ConnectionUrlFactory
name|metastoreDbUrlFactory
init|=
name|HookUtils
operator|.
name|getUrlFactory
argument_list|(
name|conf
argument_list|,
name|FBHiveConf
operator|.
name|CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|METASTORE_CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|METASTORE_MYSQL_TIER_VAR_NAME
argument_list|,
name|FBHiveConf
operator|.
name|METASTORE_HOST_DATABASE_VAR_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|results
operator|=
name|HookUtils
operator|.
name|runInsertSelect
argument_list|(
name|conf
argument_list|,
name|metastoreDbUrlFactory
argument_list|,
name|sql
argument_list|,
name|sqlParams
argument_list|,
literal|false
argument_list|,
name|SQL_NUM_RETRIES
argument_list|,
name|RETRY_MAX_INTERVAL_SEC
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"SQL query to retrieve names of managed tables/partitions "
operator|+
literal|"pointed to by externals failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Construct a mapping to pass to updateInputs, the structure of the mapping is described in
comment|// updateInputs's method description
name|Map
argument_list|<
name|String
index|[]
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableToPartitions
init|=
operator|new
name|HashMap
argument_list|<
name|String
index|[]
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Object
argument_list|>
name|result
range|:
name|results
control|)
block|{
name|String
index|[]
name|dbTable
init|=
block|{
operator|(
name|String
operator|)
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
block|,
operator|(
name|String
operator|)
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|tableToPartitions
operator|.
name|containsKey
argument_list|(
name|dbTable
argument_list|)
condition|)
block|{
name|tableToPartitions
operator|.
name|put
argument_list|(
name|dbTable
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|partitionName
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionName
operator|!=
literal|null
condition|)
block|{
name|tableToPartitions
operator|.
name|get
argument_list|(
name|dbTable
argument_list|)
operator|.
name|add
argument_list|(
name|partitionName
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|updateInputs
argument_list|(
name|ctx
operator|.
name|getInputs
argument_list|()
argument_list|,
name|tableToPartitions
argument_list|,
name|ctx
operator|.
name|getHive
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|"Failed to retrieve managed Table(s)/Partition(s) mapped to "
operator|+
literal|"by externals from the metastore."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Given a set of inputs and a map from db/table name to a list of partition names, and an    * instance of Hive it updates the inputs to include for each db/table name the partitions, or if    * the list of partitions is empty, the table    * @param inputs             A set of ReadEntities    * @param tableToPartitions  A map, whose keys are arrays of strings of length 2, the first index    *                           should correspond to the db name and the second to the table name,    *                           the values are lists of Strings representing partition names, if the    *                           list is empty it is assumed the table is unpartitioned    * @param db                 An instance of Hive, used to connect to the metastore.    * @throws HiveException    */
specifier|private
name|void
name|updateInputs
parameter_list|(
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Map
argument_list|<
name|String
index|[]
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableToPartitions
parameter_list|,
name|Hive
name|db
parameter_list|)
throws|throws
name|HiveException
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
index|[]
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|tableToPartitions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Table
name|table
init|=
name|db
operator|.
name|getTable
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|db
operator|.
name|getPartitionsByNames
argument_list|(
name|table
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|partition
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

