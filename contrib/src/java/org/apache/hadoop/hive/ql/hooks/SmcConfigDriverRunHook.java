begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|HiveDriverRunHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|HiveDriverRunHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * Retrieves and sets Hive config key/values based on a config stored in the  * properties of an SMC tier. This is useful for quick changes to the config  * that should apply to a particular package of Hive. (e.g. silver.trunk). The  * advantage over a XML file edit is that it's persistent between hotfixes and  * we have a history of what changes were made. But since this is a hook that  * runs at the very beginning of the Driver.run method, before compilation,  * it should be able to effectively change most values that affect query  * processing and execution.  *  * The configs are supposed to be stored in the properties of an SMC tier. The  * name of the property corresponds to the hive package. The value of the  * property is a JSON object that holds 1) an enabled field that controls  * whether the key-value pairs should be applied 2) a config field that holds  * an array of Objects  *  *    (Property)hivePackageName -> {enabled : boolean,  *                                  configs : [  *                                                {key : key1,  *                                                 value : value1,  *                                                 percentage : 50,  *                                                 enforce : true  *                                                },  *                                                {key : key2,  *                                                 value : value2  *                                                }, ...  *                                            ]  *                                 }  *  * The key is the config variables key, value is the config variables value,  * percentage is optional, if set, the change will only be applied to  * approximately that percentage of queries, and enforce is also optional, if  * true, even if the user explicitely set this config variable, it will be  * overwritten.  *  * The primary application of this hook is to modify the behavior of Hive clients dynamically,  * without a push, and for incremental rollouts of config changes.  E.g. if a feature is broken and  * can be turned off using a config variable, this hook can be used to turn it off without rolling  * back the push.  Also, if there is a change and we are not sure how it will perform at scale and  * it can be controlled via a config, we can turn it on for increasing percentages of users using  * this hook.  */
end_comment

begin_class
specifier|public
class|class
name|SmcConfigDriverRunHook
extends|extends
name|AbstractSmcConfigHook
implements|implements
name|HiveDriverRunHook
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SmcConfigDriverRunHook
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|String
name|KEY_FIELD
init|=
literal|"key"
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|String
name|VALUE_FIELD
init|=
literal|"value"
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|String
name|PERCENTAGE_FIELD
init|=
literal|"percentage"
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|String
name|ENFORCE_FIELD
init|=
literal|"enforce"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|preDriverRun
parameter_list|(
name|HiveDriverRunHookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|(
name|HiveConf
operator|)
name|hookContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return;
block|}
name|Object
name|configObj
init|=
name|getConfigObject
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|configObj
operator|==
literal|null
operator|||
operator|!
operator|(
name|configObj
operator|instanceof
name|JSONArray
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"config not properly set!"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Sanity checks pass, apply all the configs.
name|JSONArray
name|configEntries
init|=
operator|(
name|JSONArray
operator|)
name|configObj
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configEntries
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|configEntry
init|=
name|configEntries
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|percentage
init|=
operator|new
name|Integer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Object
name|enforce
init|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Get the config key and value
name|String
name|key
init|=
name|configEntry
operator|.
name|getString
argument_list|(
name|KEY_FIELD
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|configEntry
operator|.
name|get
argument_list|(
name|VALUE_FIELD
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SmcConfigHook found configuration KEY: "
operator|+
name|key
operator|+
literal|" VALUE: "
operator|+
name|value
argument_list|)
expr_stmt|;
comment|// If enforce is set to true, even if the user has set the value of this config variable
comment|// explicitely, we will overwrite it
if|if
condition|(
name|configEntry
operator|.
name|has
argument_list|(
name|ENFORCE_FIELD
argument_list|)
condition|)
block|{
name|enforce
operator|=
name|configEntry
operator|.
name|get
argument_list|(
name|ENFORCE_FIELD
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Enforce for key "
operator|+
name|key
operator|+
literal|" is "
operator|+
name|enforce
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|enforce
operator|instanceof
name|Boolean
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"enforce is not properly set for "
operator|+
name|key
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
operator|(
name|Boolean
operator|)
name|enforce
operator|&&
name|SessionState
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|&&
name|SessionState
operator|.
name|get
argument_list|()
operator|.
name|getOverriddenConfigurations
argument_list|()
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// If the percentage field is set to some number n, the configuration change will be made
comment|// to approximately n% of queries
if|if
condition|(
name|configEntry
operator|.
name|has
argument_list|(
name|PERCENTAGE_FIELD
argument_list|)
condition|)
block|{
name|percentage
operator|=
name|configEntry
operator|.
name|getInt
argument_list|(
name|PERCENTAGE_FIELD
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Percentage for key "
operator|+
name|key
operator|+
literal|" is "
operator|+
name|percentage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|percentage
operator|instanceof
name|Integer
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"percentage is not properly set for "
operator|+
name|key
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|(
name|Integer
operator|)
name|percentage
operator|!=
literal|100
condition|)
block|{
name|boolean
name|diceRoll
init|=
literal|false
decl_stmt|;
try|try
block|{
name|diceRoll
operator|=
name|HookUtils
operator|.
name|rollDice
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|percentage
operator|)
operator|.
name|intValue
argument_list|()
operator|/
literal|100f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"percentage is not properly set for "
operator|+
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|diceRoll
condition|)
block|{
continue|continue;
block|}
block|}
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDriverRun
parameter_list|(
name|HiveDriverRunHookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Do nothing
block|}
block|}
end_class

end_unit

