begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * A hook which is used to prevent people from querying dropped partitions in  * silver. The list of wrongly dropped partitions is in cdb.datahawk - if the  * query uses any of these partitions, it should fail.  */
end_comment

begin_class
specifier|public
class|class
name|QueryDroppedPartitionsHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QueryDroppedPartitionsHook
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//  private static final String SMC_DATABASE_NAME = "cdb.datahawk";
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|PRE_EXEC_HOOK
operator|)
assert|;
name|SessionState
name|sess
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|HiveConf
name|conf
init|=
name|sess
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|commandType
init|=
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|sess
operator|.
name|getCommandType
argument_list|()
argument_list|)
decl_stmt|;
comment|// Only check for queries
if|if
condition|(
operator|(
name|commandType
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|commandType
operator|.
name|equals
argument_list|(
literal|"QUERY"
argument_list|)
operator|&&
operator|!
name|commandType
operator|.
name|equals
argument_list|(
literal|"CREATETABLE_AS_SELECT"
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
name|hookContext
operator|.
name|getInputs
argument_list|()
decl_stmt|;
comment|// Nothing to check
if|if
condition|(
operator|(
name|inputs
operator|==
literal|null
operator|)
operator|||
operator|(
name|inputs
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|String
name|inputString
init|=
name|getInputs
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|inputString
operator|==
literal|null
operator|)
operator|||
operator|(
name|inputString
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|ConnectionUrlFactory
name|urlFactory
init|=
name|HookUtils
operator|.
name|getUrlFactory
argument_list|(
name|conf
argument_list|,
name|FBHiveConf
operator|.
name|CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|QUERYDROPPED_PARTITIONS_CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|QUERYDROPPED_PARTITIONS_MYSQL_TIER_VAR_NAME
argument_list|,
name|FBHiveConf
operator|.
name|QUERYPLAN_HOST_DATABASE_VAR_NAME
argument_list|)
decl_stmt|;
comment|// Return silently if you cannot connect for some reason
if|if
condition|(
operator|(
name|FBHiveConf
operator|.
name|QUERYDROPPED_PARTITIONS_MYSQL_TIER_VAR_NAME
operator|==
literal|null
operator|)
operator|||
name|FBHiveConf
operator|.
name|QUERYDROPPED_PARTITIONS_MYSQL_TIER_VAR_NAME
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|FBHiveConf
operator|.
name|QUERYPLAN_MYSQL_TIER_VAR_NAME
operator|+
literal|" is null"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|urlFactory
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"unable to access "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|FBHiveConf
operator|.
name|QUERYPLAN_MYSQL_TIER_VAR_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|sqlParams
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|inputString
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"QueryDroppedPartitionsHook input string: "
operator|+
name|inputString
argument_list|)
expr_stmt|;
comment|// Does the query reference a dropped partition
name|String
name|sql
init|=
literal|"select count(*) from 0114_dropped_parts3 "
operator|+
literal|"where (recovered is null or recovered != 1) and ?"
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|result
init|=
name|HookUtils
operator|.
name|runInsertSelect
argument_list|(
name|conf
argument_list|,
name|urlFactory
argument_list|,
name|sql
argument_list|,
name|sqlParams
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Long
name|numberDroppedPartitions
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
operator|&&
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|numberDroppedPartitions
operator|=
operator|(
name|Long
operator|)
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|numberDroppedPartitions
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|numberDroppedPartitions
operator|>
literal|0
operator|)
condition|)
block|{
name|String
name|exception
init|=
literal|"You cannot select from "
operator|+
name|inputString
operator|+
literal|"."
decl_stmt|;
name|exception
operator|+=
literal|"Look at "
expr_stmt|;
name|exception
operator|+=
literal|"https://our.intern.facebook.com/intern/sevmanager/prod/sev/137261279725248"
expr_stmt|;
name|exception
operator|+=
literal|" for details "
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getInputs
parameter_list|(
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|inputMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ReadEntity
name|input
range|:
name|inputs
control|)
block|{
name|Partition
name|inputPartition
init|=
name|input
operator|.
name|getP
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputPartition
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|inputMap
operator|.
name|containsKey
argument_list|(
name|inputPartition
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|inputMap
operator|.
name|put
argument_list|(
name|inputPartition
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|inputMap
operator|.
name|get
argument_list|(
name|inputPartition
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|inputPartition
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|boolean
name|firstTable
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|inputMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|firstTable
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" OR "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstTable
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"(table_name = '"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"' AND ds IN ("
argument_list|)
expr_stmt|;
name|boolean
name|firstPartition
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|firstPartition
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstPartition
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|part
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"))"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

