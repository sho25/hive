begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DDLTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Hive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|CreateTableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Implementation of a pre execute hook that checks the table RETENTION is set.  */
end_comment

begin_class
specifier|public
class|class
name|CheckRetentionsHook
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CheckRetentionsHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|conf
decl_stmt|;
comment|// If warningOnly = true, we print out some warnnings without fail
comment|// the CREATE TABLE DDL.
specifier|private
specifier|static
name|boolean
name|warningOnly
init|=
literal|false
decl_stmt|;
comment|// required table parameters
specifier|private
specifier|static
specifier|final
name|String
name|RETENTION_FLAG
init|=
literal|"RETENTION"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RETENTION_PLATINUM_FLAG
init|=
literal|"RETENTION_PLATINUM"
decl_stmt|;
comment|// wiki page URL that explains the policies
specifier|private
specifier|static
specifier|final
name|String
name|wikiURL
init|=
literal|"https://www.intern.facebook.com/intern/wiki/index.php/Data/Hive/"
operator|+
literal|"Retention_on_new_tables"
decl_stmt|;
specifier|private
specifier|static
name|String
name|retentionKey
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|String
name|ErrMsg
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|+
literal|"\n  Here's how to add retention: "
operator|+
name|wikiURL
return|;
block|}
specifier|public
specifier|static
class|class
name|PreExec
implements|implements
name|ExecuteWithHookContext
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|PRE_EXEC_HOOK
operator|)
assert|;
name|SessionState
name|sess
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
name|hookContext
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
name|hookContext
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|hookContext
operator|.
name|getUgi
argument_list|()
decl_stmt|;
name|conf
operator|=
name|sess
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|warningOnly
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|FBHiveConf
operator|.
name|NO_RETENTION_WARNING_ONLY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// figure out if we are on silver or platinum
name|String
name|whDir
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|whDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|ErrMsg
argument_list|(
literal|"Cannot determine which cluster this query is running on: "
operator|+
literal|"hive.metastore.warehouse.dir is not set!"
argument_list|)
argument_list|)
throw|;
block|}
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|whDir
argument_list|)
decl_stmt|;
name|String
name|hostName
init|=
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostName
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|FBHiveConf
operator|.
name|FBHIVE_SILVER_DFS_PREFIX
argument_list|)
argument_list|)
operator|||
name|hostName
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|FBHiveConf
operator|.
name|FBHIVE_SILVER_DFS_PREFIX2
argument_list|)
argument_list|)
operator|||
name|hostName
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|FBHiveConf
operator|.
name|FBHIVE_SILVER_DFS_PREFIX3
argument_list|)
argument_list|)
condition|)
block|{
name|retentionKey
operator|=
name|RETENTION_FLAG
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hostName
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|FBHiveConf
operator|.
name|FBHIVE_PLATINUM_DFS_PREFIX
argument_list|)
argument_list|)
condition|)
block|{
name|retentionKey
operator|=
name|RETENTION_PLATINUM_FLAG
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|ErrMsg
argument_list|(
literal|"Cannot determine which cluster this query is running on: "
operator|+
literal|"hive.metastore.warehouse.dir="
operator|+
name|whDir
operator|+
literal|"; does not seems to belong to either silver or platinum!"
argument_list|)
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasks
init|=
operator|new
name|HashSet
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|getReachableTasks
argument_list|(
name|tasks
argument_list|,
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Task
name|task
range|:
name|tasks
control|)
block|{
if|if
condition|(
name|task
operator|instanceof
name|DDLTask
condition|)
block|{
name|DDLWork
name|work
init|=
operator|(
name|DDLWork
operator|)
name|task
operator|.
name|getWork
argument_list|()
decl_stmt|;
if|if
condition|(
name|work
operator|.
name|getCreateTblDesc
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|checkRetention
argument_list|(
name|work
operator|.
name|getCreateTblDesc
argument_list|()
argument_list|,
name|retentionKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|getReachableTasks
parameter_list|(
name|Set
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|QueryPlan
name|qp
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
init|=
name|qp
operator|.
name|getRootTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|task
range|:
name|rootTasks
control|)
block|{
name|getReachableTasks
argument_list|(
name|tasks
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Recursively traverse the task dependence tree and gather all tasks into      * the set.      */
specifier|private
name|void
name|getReachableTasks
parameter_list|(
name|Set
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|tasks
parameter_list|,
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|rootTask
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tasks
operator|.
name|contains
argument_list|(
name|rootTask
argument_list|)
condition|)
block|{
name|tasks
operator|.
name|add
argument_list|(
name|rootTask
argument_list|)
expr_stmt|;
if|if
condition|(
name|rootTask
operator|.
name|getDependentTasks
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|child
range|:
name|rootTask
operator|.
name|getDependentTasks
argument_list|()
control|)
block|{
name|getReachableTasks
argument_list|(
name|tasks
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|warnOrFail
parameter_list|(
name|boolean
name|warning
parameter_list|,
name|String
name|mesg
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|warning
condition|)
block|{
comment|// shout loud on stderr!
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"\n ----------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"| WARNING: | "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" ----------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  This command does NOT comply with the RETENTION "
operator|+
literal|"policies. This command will fail in the near future. \n"
operator|+
name|mesg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|mesg
argument_list|)
throw|;
block|}
block|}
comment|/**      * Check if the CREATE TABLE statement has retention and data growth      * estimation set. If not throw an exception.      */
specifier|private
name|void
name|checkRetention
parameter_list|(
name|CreateTableDesc
name|desc
parameter_list|,
name|String
name|retentionKey
parameter_list|)
throws|throws
name|Exception
block|{
comment|// exclude EXTERNAL tables
if|if
condition|(
name|desc
operator|.
name|isExternal
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// TODO: remove this whenever it becomes feasible
comment|// exclude table name starts with tmp, temp, or test: tmp tables should be set
comment|// default retention
if|if
condition|(
name|desc
operator|.
name|getTableName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"tmp"
argument_list|)
operator|||
name|desc
operator|.
name|getTableName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"temp"
argument_list|)
operator|||
name|desc
operator|.
name|getTableName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test"
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// check if table already exists
if|if
condition|(
name|tableExists
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|tableNeedsRetention
init|=
literal|"Newly created tables have to have "
operator|+
name|retentionKey
operator|+
literal|" set unless the table name has one of the prefixes \"tmp\", \"temp\", or \"test\"."
decl_stmt|;
name|String
name|tableRetentionFormat
init|=
literal|"The value of the "
operator|+
name|retentionKey
operator|+
literal|" parameter must be an "
operator|+
literal|"integer greater than or equal to -1, i.e. -1,0,1,..."
decl_stmt|;
comment|// check 'RETENTION' parameter exists
name|String
name|retentionValue
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|getTblProps
argument_list|()
operator|==
literal|null
operator|||
operator|(
name|retentionValue
operator|=
name|desc
operator|.
name|getTblProps
argument_list|()
operator|.
name|get
argument_list|(
name|retentionKey
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|warnOrFail
argument_list|(
name|warningOnly
argument_list|,
name|ErrMsg
argument_list|(
literal|"Table "
operator|+
name|desc
operator|.
name|getTableName
argument_list|()
operator|+
literal|" does not have "
operator|+
name|retentionKey
operator|+
literal|" parameter set. "
operator|+
name|tableNeedsRetention
operator|+
literal|"  "
operator|+
name|tableRetentionFormat
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// check 'RETENTION' parameter is set to a value in the range -1,0,1,...
name|int
name|retentionIntValue
decl_stmt|;
try|try
block|{
name|retentionIntValue
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|retentionValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// retentionValue is not a valid integer, set retentionIntValue to an invalid value
name|retentionIntValue
operator|=
name|Integer
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|retentionIntValue
operator|<
operator|-
literal|1
condition|)
block|{
name|warnOrFail
argument_list|(
name|warningOnly
argument_list|,
name|ErrMsg
argument_list|(
literal|"Table "
operator|+
name|desc
operator|.
name|getTableName
argument_list|()
operator|+
literal|" has an invalid value "
operator|+
name|retentionValue
operator|+
literal|" for the parameter "
operator|+
name|retentionKey
operator|+
literal|".  "
operator|+
name|tableRetentionFormat
operator|+
literal|"  "
operator|+
name|tableNeedsRetention
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|tableExists
parameter_list|(
name|String
name|tabName
parameter_list|)
throws|throws
name|Exception
block|{
name|Hive
name|db
init|=
name|Hive
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|db
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
name|tabName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|table
operator|!=
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

