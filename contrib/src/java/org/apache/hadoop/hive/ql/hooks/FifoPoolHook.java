begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|ContentSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QueryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|DDLTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookUtils
operator|.
name|InputInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * The implementation of the hook that based on the input size of the query  * submits big jobs into a fifo pool.  */
end_comment

begin_class
specifier|public
class|class
name|FifoPoolHook
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FifoPoolHook
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|private
name|boolean
name|fifoed
init|=
literal|false
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|String
name|failure
init|=
literal|"FifoHook failure: "
decl_stmt|;
specifier|public
specifier|static
class|class
name|PreExec
implements|implements
name|ExecuteWithHookContext
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|PRE_EXEC_HOOK
operator|)
assert|;
name|SessionState
name|sess
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
name|hookContext
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ContentSummary
argument_list|>
name|inputToCS
init|=
name|hookContext
operator|.
name|getInputPathToContentSummary
argument_list|()
decl_stmt|;
name|QueryPlan
name|queryPlan
init|=
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
init|=
name|queryPlan
operator|.
name|getRootTasks
argument_list|()
decl_stmt|;
comment|// If it is a pure DDL task,
if|if
condition|(
name|rootTasks
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|rootTasks
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
name|tsk
init|=
name|rootTasks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|tsk
operator|instanceof
name|DDLTask
condition|)
block|{
return|return;
block|}
block|}
name|HiveConf
name|conf
init|=
name|sess
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// In case posthook of the previous query was not triggered,
comment|// we revert job tracker to clean state first.
if|if
condition|(
name|fifoed
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.pool"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fifoed
operator|=
literal|false
expr_stmt|;
block|}
comment|// if the pool is specified already - bailout
name|String
name|poolValue
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"mapred.fairscheduler.pool"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|poolValue
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|poolValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// if we are set on local mode execution (via user or auto) bail
if|if
condition|(
literal|"local"
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HADOOPJT
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// check if we need to run at all
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"fbhive.fifopool.auto"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|long
name|maxGigaBytes
init|=
name|conf
operator|.
name|getLong
argument_list|(
literal|"fbhive.fifopool.GigaBytes"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxGigaBytes
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|failure
operator|+
literal|"fifopool.GigaBytes = 0"
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|maxBytes
init|=
name|maxGigaBytes
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
if|if
condition|(
name|maxGigaBytes
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|failure
operator|+
literal|"fifopool.GigaBytes value of "
operator|+
name|maxGigaBytes
operator|+
literal|"is invalid"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Get the size of the input
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|pathToTopPercentage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|nonSampledInputs
init|=
operator|new
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isThereSampling
init|=
name|HookUtils
operator|.
name|checkForSamplingTasks
argument_list|(
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
argument_list|,
name|pathToTopPercentage
argument_list|,
name|nonSampledInputs
argument_list|)
decl_stmt|;
name|InputInfo
name|info
init|=
name|HookUtils
operator|.
name|getInputInfo
argument_list|(
name|inputs
argument_list|,
name|inputToCS
argument_list|,
name|conf
argument_list|,
name|isThereSampling
argument_list|,
name|pathToTopPercentage
argument_list|,
name|nonSampledInputs
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|maxBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getSize
argument_list|()
operator|>
name|maxBytes
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitting to the fifo pool since the input length of "
operator|+
name|info
operator|.
name|getSize
argument_list|()
operator|+
literal|" is more than "
operator|+
name|maxBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not submitting to the fifo pool since the input length "
operator|+
name|info
operator|.
name|getSize
argument_list|()
operator|+
literal|" is less than "
operator|+
name|maxBytes
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// The job meets at least one of the requirements to be submitted into the
comment|// fifo pool
name|String
name|fifoPool
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"fbhive.fifopool.name"
argument_list|,
literal|"fifo"
argument_list|)
decl_stmt|;
name|fifoed
operator|=
literal|true
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.pool"
argument_list|,
name|fifoPool
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PostExec
implements|implements
name|ExecuteWithHookContext
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|POST_EXEC_HOOK
operator|)
assert|;
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
name|this
operator|.
name|run
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|(
name|SessionState
name|sess
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|sess
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|fifoed
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"mapred.fairscheduler.pool"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fifoed
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

