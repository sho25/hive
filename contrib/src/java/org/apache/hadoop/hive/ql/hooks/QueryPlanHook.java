begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExplainTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExplainWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * A hook which populates the query_plan_log MySQL table with  * the query plan for the query. The query plan is recorded as a json string.  * the stats through it as well.  */
end_comment

begin_class
specifier|public
class|class
name|QueryPlanHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|private
name|ConnectionUrlFactory
name|urlFactory
init|=
literal|null
decl_stmt|;
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|public
specifier|static
name|ConnectionUrlFactory
name|getQueryPlanUrlFactory
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
return|return
name|HookUtils
operator|.
name|getUrlFactory
argument_list|(
name|conf
argument_list|,
name|FBHiveConf
operator|.
name|CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|QUERYPLAN_CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|QUERYPLAN_MYSQL_TIER_VAR_NAME
argument_list|,
name|FBHiveConf
operator|.
name|QUERYPLAN_HOST_DATABASE_VAR_NAME
argument_list|)
return|;
block|}
specifier|public
name|QueryPlanHook
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|QueryPlanHook
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
operator|(
name|hookContext
operator|.
name|getHookType
argument_list|()
operator|==
name|HookContext
operator|.
name|HookType
operator|.
name|POST_EXEC_HOOK
operator|)
assert|;
name|String
name|queryId
init|=
literal|""
decl_stmt|;
name|SessionState
name|sess
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|sess
operator|!=
literal|null
condition|)
block|{
name|conf
operator|=
name|sess
operator|.
name|getConf
argument_list|()
expr_stmt|;
name|queryId
operator|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
expr_stmt|;
name|HiveOperation
name|op
init|=
name|sess
operator|.
name|getHiveOperation
argument_list|()
decl_stmt|;
comment|// No need to log for DDLs
if|if
condition|(
operator|(
name|op
operator|==
literal|null
operator|)
operator|||
operator|(
operator|(
operator|!
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATEVIEW
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|LOAD
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|QUERY
argument_list|)
operator|)
operator|)
condition|)
block|{
return|return;
block|}
block|}
comment|// QueryId not present - nothing to do
else|else
block|{
return|return;
block|}
comment|// Get the list of root tasks
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
init|=
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|rootTasks
operator|==
literal|null
operator|)
operator|||
operator|(
name|rootTasks
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|ExplainWork
name|explainWork
init|=
operator|new
name|ExplainWork
argument_list|(
literal|null
argument_list|,
name|rootTasks
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JSONObject
name|queryPlan
init|=
name|ExplainTask
operator|.
name|getJSONPlan
argument_list|(
literal|null
argument_list|,
name|explainWork
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|sqlParams
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|queryId
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|queryPlan
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assertion at beginning of method guarantees this string will not remain empty
name|String
name|sql
init|=
literal|"insert into query_plan_log set queryId = ?, queryPlan = ?"
decl_stmt|;
if|if
condition|(
name|urlFactory
operator|==
literal|null
condition|)
block|{
name|urlFactory
operator|=
name|getQueryPlanUrlFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|urlFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"DB parameters not set!"
argument_list|)
throw|;
block|}
block|}
name|HookUtils
operator|.
name|runInsert
argument_list|(
name|conf
argument_list|,
name|urlFactory
argument_list|,
name|sql
argument_list|,
name|sqlParams
argument_list|,
name|HookUtils
operator|.
name|getSqlNumRetry
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

