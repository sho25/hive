begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|AbstractSemanticAnalyzerHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveSemanticAnalyzerHookContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|ASTNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|parse
operator|.
name|HiveParser
import|;
end_import

begin_comment
comment|/**  * Implementation of a compile time hook to set all split size parameters from  * mapred.min.split.size if it is CombineHiveInputFormat  * of queries  */
end_comment

begin_class
specifier|public
class|class
name|SplitSizeHook
extends|extends
name|AbstractSemanticAnalyzerHook
block|{
specifier|final
specifier|static
name|String
name|COMBINE_HIVE_INPUT_FORMAT
init|=
literal|"org.apache.hadoop.hive.ql.io.CombineHiveInputFormat"
decl_stmt|;
specifier|final
specifier|static
name|String
name|CONF_MAPRED_MAX_SPLIT_SIZE
init|=
literal|"mapred.max.split.size"
decl_stmt|;
specifier|final
specifier|static
name|String
name|CONF_MAPRED_MIN_SPLIT_PER_RACK
init|=
literal|"mapred.min.split.size.per.rack"
decl_stmt|;
specifier|final
specifier|static
name|String
name|CONF_MAPRED_MIN_SPLIT_PER_NODE
init|=
literal|"mapred.min.split.size.per.node"
decl_stmt|;
comment|// If input format is CombineHiveInputFormat, set all 3 related split size parameter to
comment|// mapred.min.split.size. mapred.max.split.size remains its old value if it is larger
comment|// than the new value.
specifier|public
name|ASTNode
name|preAnalyze
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|context
parameter_list|,
name|ASTNode
name|ast
parameter_list|)
throws|throws
name|SemanticException
block|{
name|HiveSemanticAnalyzerHookContextImpl
name|ctx
init|=
operator|(
name|HiveSemanticAnalyzerHookContextImpl
operator|)
name|context
decl_stmt|;
name|HiveConf
name|conf
init|=
operator|(
name|HiveConf
operator|)
name|ctx
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|hiveInputFormat
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEINPUTFORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hiveInputFormat
operator|.
name|equals
argument_list|(
name|COMBINE_HIVE_INPUT_FORMAT
argument_list|)
condition|)
block|{
return|return
name|ast
return|;
block|}
name|long
name|mapredMinSplitSize
init|=
name|conf
operator|.
name|getLongVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|MAPREDMINSPLITSIZE
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CONF_MAPRED_MIN_SPLIT_PER_NODE
argument_list|,
name|mapredMinSplitSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CONF_MAPRED_MIN_SPLIT_PER_RACK
argument_list|,
name|mapredMinSplitSize
argument_list|)
expr_stmt|;
name|long
name|maxSplit
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|CONF_MAPRED_MAX_SPLIT_SIZE
argument_list|,
operator|(
name|long
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapredMinSplitSize
operator|>
name|maxSplit
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CONF_MAPRED_MAX_SPLIT_SIZE
argument_list|,
name|mapredMinSplitSize
argument_list|)
expr_stmt|;
block|}
return|return
name|ast
return|;
block|}
comment|// Nothing to do
specifier|public
name|void
name|postAnalyze
parameter_list|(
name|HiveSemanticAnalyzerHookContext
name|context
parameter_list|,
name|List
argument_list|<
name|Task
argument_list|<
name|?
extends|extends
name|Serializable
argument_list|>
argument_list|>
name|rootTasks
parameter_list|)
throws|throws
name|SemanticException
block|{
comment|// no nothing
block|}
block|}
end_class

end_unit

