begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_comment
comment|/**  * Implementation of a pre execute hook that checks whether  * a partition is archived or not  */
end_comment

begin_class
specifier|public
class|class
name|CheckArchivedDataHook
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ARCHIVE_FLAG
init|=
literal|"archivedFlag"
decl_stmt|;
specifier|final
specifier|static
name|String
name|DISABLE_CHECK_ARCHIVAL_HOOK
init|=
literal|"fbhive.disable.checkArchival.hook"
decl_stmt|;
specifier|public
specifier|static
class|class
name|PreExec
implements|implements
name|PreExecute
block|{
specifier|public
name|void
name|run
parameter_list|(
name|SessionState
name|sess
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Did the user explicitly ask to disable the hook
name|HiveConf
name|conf
init|=
name|sess
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|disableArch
init|=
name|conf
operator|.
name|get
argument_list|(
name|DISABLE_CHECK_ARCHIVAL_HOOK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|disableArch
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|disableArch
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"false"
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
return|return;
block|}
comment|//Go over the input paths and check if they are archived or not
for|for
control|(
name|ReadEntity
name|re
range|:
name|inputs
control|)
block|{
name|boolean
name|isArchived
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|re
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|archF
init|=
name|re
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|ARCHIVE_FLAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|archF
operator|!=
literal|null
condition|)
block|{
name|isArchived
operator|=
name|archF
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isArchived
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Path: "
operator|+
name|re
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" needs to be unarchived."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

