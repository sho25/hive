begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  *  A post-execute hook that will log the overridden Hive Config  *  for this query to the audit_log database.  */
end_comment

begin_class
specifier|public
class|class
name|HiveConfigLoggingHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|protected
name|ConnectionUrlFactory
name|urlFactory
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|ConnectionUrlFactory
name|getQueryConfigUrlFactory
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
comment|// Writes to the same database as BaseReplicationHook.
return|return
name|HookUtils
operator|.
name|getUrlFactory
argument_list|(
name|conf
argument_list|,
name|FBHiveConf
operator|.
name|CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|REPLICATION_CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|REPLICATION_MYSQL_TIER_VAR_NAME
argument_list|,
name|FBHiveConf
operator|.
name|REPLICATION_HOST_DATABASE_VAR_NAME
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
comment|// QueryId not present. Nothing to do.
return|return;
block|}
name|HiveConf
name|conf
init|=
name|ss
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|queryId
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
decl_stmt|;
name|HiveOperation
name|op
init|=
name|ss
operator|.
name|getHiveOperation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|op
operator|==
literal|null
operator|)
operator|||
operator|(
operator|!
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|CREATETABLE_AS_SELECT
argument_list|)
operator|&&
operator|!
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|LOAD
argument_list|)
operator|&&
operator|!
name|op
operator|.
name|equals
argument_list|(
name|HiveOperation
operator|.
name|QUERY
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overriddenConfig
init|=
name|ss
operator|.
name|getOverriddenConfigurations
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"insert into query_config_log set queryId = ?, config_key = ?, config_value = ?"
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|sqlParams
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|urlFactory
operator|=
name|getQueryConfigUrlFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|urlFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"DB parameters not set!"
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|overriddenConfig
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|conf
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|sqlParams
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|queryId
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|HookUtils
operator|.
name|runInsert
argument_list|(
name|conf
argument_list|,
name|urlFactory
argument_list|,
name|sql
argument_list|,
name|sqlParams
argument_list|,
name|HookUtils
operator|.
name|getSqlNumRetry
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

