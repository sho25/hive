begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  *  * This factory creates the connection URL from the supplied configuration.  *  */
end_comment

begin_class
specifier|public
class|class
name|ConfUrlFactory
implements|implements
name|ConnectionUrlFactory
block|{
name|HiveConf
name|conf
init|=
literal|null
decl_stmt|;
name|String
name|confVarName
init|=
literal|null
decl_stmt|;
specifier|public
name|ConfUrlFactory
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|ConfUrlFactory
operator|.
name|class
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ConfUrlFactory
parameter_list|(
name|String
name|confVarName
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|ConfUrlFactory
operator|.
name|class
argument_list|)
argument_list|,
name|confVarName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ConfUrlFactory
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|String
name|confVarName
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|confVarName
operator|=
name|confVarName
expr_stmt|;
block|}
specifier|public
name|boolean
name|init
parameter_list|(
name|Configuration
name|hconf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
operator|(
name|HiveConf
operator|)
name|hconf
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|String
name|param1Name
parameter_list|,
name|String
name|param2Name
parameter_list|)
block|{
name|this
operator|.
name|confVarName
operator|=
name|param1Name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbstr
init|=
name|conf
operator|.
name|get
argument_list|(
name|confVarName
argument_list|)
decl_stmt|;
name|String
index|[]
name|hostDatabases
init|=
name|dbstr
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
return|return
literal|"jdbc:mysql://"
operator|+
name|hostDatabases
index|[
literal|0
index|]
operator|+
literal|"/"
operator|+
name|hostDatabases
index|[
literal|1
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUrl
parameter_list|(
name|boolean
name|isWrite
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getUrl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|param1
parameter_list|,
name|String
name|param2
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateProps
parameter_list|(
name|String
name|param1
parameter_list|,
name|String
name|param2
parameter_list|,
name|String
name|param3
parameter_list|)
block|{
return|return;
block|}
block|}
end_class

end_unit

