begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * This hook records the approx. start and finish times of queries into a table  * in MySQL (query_time_log). Useful for debugging. Possibly for performance  * measurement.  *  * - Relies on query_id to update rows with the finish time.  * - Old entries in this table should be cleaned out on a regular basis.  */
end_comment

begin_comment
comment|/* Example table schema:  CREATE TABLE `query_time_log` (     `query_id` varchar(512) DEFAULT NULL,     `start_time` timestamp NULL DEFAULT NULL,     `finish_time` timestamp NULL DEFAULT NULL,     `query` mediumtext,     `query_type` varchar(32) DEFAULT NULL,     `inputs` mediumtext,     `outputs` mediumtext,     `user_info` varchar(512) DEFAULT NULL,     PRIMARY KEY (`query_id`),     INDEX(start_time),     INDEX(finish_time),     INDEX(inputs(256)),     INDEX(outputs(256))   ) ENGINE=InnoDB DEFAULT CHARSET=latin1; */
end_comment

begin_class
specifier|public
class|class
name|StartFinishHook
implements|implements
name|PreExecute
implements|,
name|PostExecute
block|{
name|ConnectionUrlFactory
name|urlFactory
init|=
literal|null
decl_stmt|;
specifier|public
name|StartFinishHook
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|StartFinishHook
operator|.
name|class
argument_list|)
decl_stmt|;
name|urlFactory
operator|=
name|HookUtils
operator|.
name|getUrlFactory
argument_list|(
name|conf
argument_list|,
name|FBHiveConf
operator|.
name|CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|STARTFINISH_CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|STARTFINISH_MYSQL_TIER_VAR_NAME
argument_list|,
name|FBHiveConf
operator|.
name|STARTFINISH_HOST_DATABASE_VAR_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a list of strings with following values extracted from the state:    * command, commandType, inputStr, outputStr, queryId, userInfo    *    * @param sess    * @param inputs    * @param outputs    * @param ugi    * @return    */
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|extractValues
parameter_list|(
name|SessionState
name|sess
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
name|String
name|command
init|=
name|sess
operator|.
name|getCmd
argument_list|()
decl_stmt|;
name|String
name|commandType
init|=
name|sess
operator|.
name|getCommandType
argument_list|()
decl_stmt|;
name|String
name|userInfo
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|ugi
operator|!=
literal|null
condition|)
block|{
name|userInfo
operator|=
name|ugi
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
name|String
name|inputStr
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|inputs
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|inputsSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ReadEntity
name|inp
range|:
name|inputs
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|inputsSB
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|inputsSB
operator|.
name|append
argument_list|(
name|inp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|inputStr
operator|=
name|inputsSB
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|outputStr
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|outputs
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|outputsSB
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|WriteEntity
name|o
range|:
name|outputs
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|outputsSB
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|outputsSB
operator|.
name|append
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|outputStr
operator|=
name|outputsSB
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|queryId
init|=
name|getQueryId
argument_list|(
name|sess
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|commandType
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|inputStr
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|outputStr
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|queryId
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|userInfo
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|private
specifier|static
name|String
name|getQueryId
parameter_list|(
name|SessionState
name|sess
parameter_list|)
block|{
name|HiveConf
name|conf
init|=
name|sess
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|String
name|queryId
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
decl_stmt|;
return|return
name|queryId
return|;
block|}
comment|/**    * For PreExecute    */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|SessionState
name|sess
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|StartFinishHook
operator|.
name|extractValues
argument_list|(
name|sess
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"INSERT INTO query_time_log SET "
operator|+
literal|"query = ?, "
operator|+
literal|"query_type = ?, "
operator|+
literal|"inputs = ?, "
operator|+
literal|"outputs = ?, "
operator|+
literal|"query_id = ?, "
operator|+
literal|"user_info = ?, "
operator|+
literal|"start_time = now()"
decl_stmt|;
name|HiveConf
name|conf
init|=
name|sess
operator|.
name|getConf
argument_list|()
decl_stmt|;
comment|// pre-hook doesn't need to retry many times and can fail faster.
name|HookUtils
operator|.
name|runInsert
argument_list|(
name|conf
argument_list|,
name|urlFactory
argument_list|,
name|query
argument_list|,
name|values
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/**    * For PostExecute    */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|SessionState
name|sess
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|LineageInfo
name|info
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|StartFinishHook
operator|.
name|extractValues
argument_list|(
name|sess
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
comment|// Duplicate values for update statement
name|values
operator|.
name|addAll
argument_list|(
name|values
argument_list|)
expr_stmt|;
comment|// The ON DUPLICATE.. ensures that start_time is preserved for normal cases
comment|// where start_time was recorded
name|String
name|valueString
init|=
literal|"query = ?, "
operator|+
literal|"query_type = ?, "
operator|+
literal|"inputs = ?, "
operator|+
literal|"outputs = ?, "
operator|+
literal|"query_id = ?, "
operator|+
literal|"user_info = ?, "
operator|+
literal|"finish_time = now()"
decl_stmt|;
name|String
name|query
init|=
literal|"INSERT INTO query_time_log SET "
operator|+
name|valueString
operator|+
literal|" ON DUPLICATE KEY UPDATE "
operator|+
name|valueString
decl_stmt|;
name|HiveConf
name|conf
init|=
name|sess
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|HookUtils
operator|.
name|runInsert
argument_list|(
name|conf
argument_list|,
name|urlFactory
argument_list|,
name|query
argument_list|,
name|values
argument_list|,
name|HookUtils
operator|.
name|getSqlNumRetry
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

