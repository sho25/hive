begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|DDLWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|HiveOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * Adding a hook to stop platinum tables from getting modified in silver  */
end_comment

begin_class
specifier|public
class|class
name|AlterTableRestrictHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.hooks.AlterTableRestrictHook"
argument_list|)
decl_stmt|;
name|String
name|current_cluster
init|=
literal|null
decl_stmt|;
specifier|public
name|AlterTableRestrictHook
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|AlterTableRestrictHook
operator|.
name|class
argument_list|)
decl_stmt|;
name|current_cluster
operator|=
name|conf
operator|.
name|get
argument_list|(
name|FBHiveConf
operator|.
name|FB_CURRENT_CLUSTER
argument_list|)
expr_stmt|;
block|}
comment|/**    * Restrict the alter table command if the current cluster is not the same    * as the creation cluster    *    */
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionState
name|ss
init|=
name|SessionState
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|current_cluster
operator|==
literal|null
operator|)
operator|||
operator|(
name|ss
operator|==
literal|null
operator|)
condition|)
block|{
return|return;
block|}
name|HiveOperation
name|commandType
init|=
name|ss
operator|.
name|getHiveOperation
argument_list|()
decl_stmt|;
comment|// This check is only for alter table
if|if
condition|(
operator|!
operator|(
operator|(
name|commandType
operator|==
name|HiveOperation
operator|.
name|ALTERTABLE_ADDCOLS
operator|)
operator|||
operator|(
name|commandType
operator|==
name|HiveOperation
operator|.
name|ALTERTABLE_REPLACECOLS
operator|)
operator|||
operator|(
name|commandType
operator|==
name|HiveOperation
operator|.
name|ALTERTABLE_RENAMECOL
operator|)
operator|||
operator|(
name|commandType
operator|==
name|HiveOperation
operator|.
name|ALTERTABLE_RENAMEPART
operator|)
operator|||
operator|(
name|commandType
operator|==
name|HiveOperation
operator|.
name|ALTERTABLE_RENAME
operator|)
operator|||
operator|(
name|commandType
operator|==
name|HiveOperation
operator|.
name|ALTERTABLE_PROPERTIES
operator|)
operator|||
operator|(
name|commandType
operator|==
name|HiveOperation
operator|.
name|ALTERTABLE_SERIALIZER
operator|)
operator|||
operator|(
name|commandType
operator|==
name|HiveOperation
operator|.
name|ALTERTABLE_SERDEPROPERTIES
operator|)
operator|||
operator|(
name|commandType
operator|==
name|HiveOperation
operator|.
name|ALTERTABLE_CLUSTER_SORT
operator|)
operator|||
operator|(
name|commandType
operator|==
name|HiveOperation
operator|.
name|ALTERTABLE_FILEFORMAT
operator|)
operator|)
condition|)
block|{
return|return;
block|}
comment|// If the creation cluster is being modified to be the current cluster the alter should not be
comment|// restricted
if|if
condition|(
name|commandType
operator|==
name|HiveOperation
operator|.
name|ALTERTABLE_PROPERTIES
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newProps
init|=
operator|(
call|(
name|DDLWork
call|)
argument_list|(
name|hookContext
operator|.
name|getQueryPlan
argument_list|()
operator|.
name|getRootTasks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getWork
argument_list|()
argument_list|)
operator|)
operator|.
name|getAlterTblDesc
argument_list|()
operator|.
name|getProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|newProps
operator|.
name|containsKey
argument_list|(
name|HookUtils
operator|.
name|TABLE_CREATION_CLUSTER
argument_list|)
operator|&&
operator|(
name|newProps
operator|.
name|get
argument_list|(
name|HookUtils
operator|.
name|TABLE_CREATION_CLUSTER
argument_list|)
operator|.
name|equals
argument_list|(
name|current_cluster
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
block|}
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
name|hookContext
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
for|for
control|(
name|WriteEntity
name|output
range|:
name|outputs
control|)
block|{
name|Table
name|table
init|=
name|output
operator|.
name|getT
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|String
name|tableCreationCluster
init|=
name|table
operator|.
name|getProperty
argument_list|(
name|HookUtils
operator|.
name|TABLE_CREATION_CLUSTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableCreationCluster
operator|!=
literal|null
operator|&&
operator|!
name|tableCreationCluster
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|tableCreationCluster
operator|.
name|equals
argument_list|(
name|current_cluster
argument_list|)
condition|)
block|{
name|String
name|exception
init|=
literal|"Table "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|" cannot be modified."
decl_stmt|;
name|exception
operator|+=
literal|" Table's cluster is "
operator|+
name|tableCreationCluster
operator|+
literal|","
expr_stmt|;
name|exception
operator|+=
literal|"whereas current package is "
operator|+
name|current_cluster
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|exception
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

