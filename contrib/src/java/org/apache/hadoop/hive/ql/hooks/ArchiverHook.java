begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStoreClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Implementation of a pre execute hook that checks whether  * a partition is archived or not and also sets that query  * time for the partition.  */
end_comment

begin_class
specifier|public
class|class
name|ArchiverHook
implements|implements
name|PreExecute
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ARCHIVE_FLAG
init|=
literal|"archiveFlag"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LAST_QUERY_TIME
init|=
literal|"lastQueryTime"
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.hooks.ArchiverHook"
argument_list|)
decl_stmt|;
comment|/**    * The metastore client.    */
specifier|private
name|HiveMetaStoreClient
name|ms
decl_stmt|;
comment|/**    * The archiver hook constructor.    */
specifier|public
name|ArchiverHook
parameter_list|()
throws|throws
name|Exception
block|{
name|ms
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|modifyParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|old_map
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|new_map
init|=
name|old_map
decl_stmt|;
if|if
condition|(
name|new_map
operator|==
literal|null
condition|)
name|new_map
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|new_map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|new_map
return|;
block|}
specifier|private
name|boolean
name|setLastQueryTime
parameter_list|(
name|Table
name|t
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|old_map
init|=
name|t
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|old_map
operator|!=
literal|null
condition|)
block|{
name|String
name|timeStr
init|=
name|old_map
operator|.
name|get
argument_list|(
name|LAST_QUERY_TIME
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeStr
operator|!=
literal|null
condition|)
block|{
name|long
name|time
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|timeStr
argument_list|)
decl_stmt|;
name|long
name|cur_time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|cur_time
operator|-
name|time
operator|<
literal|1
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
condition|)
block|{
comment|// lastQueryTime was recently set
return|return
literal|false
return|;
block|}
block|}
block|}
name|t
operator|.
name|setParameters
argument_list|(
name|modifyParams
argument_list|(
name|old_map
argument_list|,
name|LAST_QUERY_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|setArchiveFlag
parameter_list|(
name|Table
name|t
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|old_map
init|=
name|t
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|old_map
operator|!=
literal|null
condition|)
block|{
name|String
name|archF
init|=
name|old_map
operator|.
name|get
argument_list|(
name|ARCHIVE_FLAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|archF
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|archF
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
name|t
operator|.
name|setParameters
argument_list|(
name|modifyParams
argument_list|(
name|t
operator|.
name|getParameters
argument_list|()
argument_list|,
name|ARCHIVE_FLAG
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|setLastQueryTime
parameter_list|(
name|Partition
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|old_map
init|=
name|p
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|old_map
operator|!=
literal|null
condition|)
block|{
name|String
name|timeStr
init|=
name|old_map
operator|.
name|get
argument_list|(
name|LAST_QUERY_TIME
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeStr
operator|!=
literal|null
condition|)
block|{
name|long
name|time
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|timeStr
argument_list|)
decl_stmt|;
name|long
name|cur_time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|cur_time
operator|-
name|time
operator|<
literal|1
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
condition|)
block|{
comment|// lastQueryTime was recently set
return|return
literal|false
return|;
block|}
block|}
block|}
name|p
operator|.
name|setParameters
argument_list|(
name|modifyParams
argument_list|(
name|old_map
argument_list|,
name|LAST_QUERY_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|setArchiveFlag
parameter_list|(
name|Partition
name|p
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|old_map
init|=
name|p
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|old_map
operator|!=
literal|null
condition|)
block|{
name|String
name|archF
init|=
name|old_map
operator|.
name|get
argument_list|(
name|ARCHIVE_FLAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|archF
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|archF
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
name|p
operator|.
name|setParameters
argument_list|(
name|modifyParams
argument_list|(
name|p
operator|.
name|getParameters
argument_list|()
argument_list|,
name|ARCHIVE_FLAG
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|run
parameter_list|(
name|SessionState
name|sess
parameter_list|,
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Go over the input paths and check if they are archived or not
for|for
control|(
name|ReadEntity
name|re
range|:
name|inputs
control|)
block|{
name|boolean
name|isArchived
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|re
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|archF
init|=
name|re
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|ARCHIVE_FLAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|archF
operator|!=
literal|null
condition|)
block|{
name|isArchived
operator|=
name|archF
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isArchived
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Path: "
operator|+
name|re
operator|.
name|getLocation
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" needs to be unarchived."
argument_list|)
throw|;
comment|// Set the last query time
name|ReadEntity
operator|.
name|Type
name|typ
init|=
name|re
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|typ
condition|)
block|{
case|case
name|TABLE
case|:
name|Table
name|t
init|=
name|re
operator|.
name|getTable
argument_list|()
operator|.
name|getTTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|setLastQueryTime
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting LastQueryTime for table "
operator|+
name|re
argument_list|)
expr_stmt|;
name|ms
operator|.
name|alter_table
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|t
operator|.
name|getTableName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARTITION
case|:
name|Partition
name|p
init|=
name|re
operator|.
name|getPartition
argument_list|()
operator|.
name|getTPartition
argument_list|()
decl_stmt|;
if|if
condition|(
name|setLastQueryTime
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting LastQueryTime for partition "
operator|+
name|re
argument_list|)
expr_stmt|;
name|ms
operator|.
name|alter_partition
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|p
operator|.
name|getTableName
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown type for input: "
operator|+
name|re
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Go over the write paths and set the archived flag to false
for|for
control|(
name|WriteEntity
name|we
range|:
name|outputs
control|)
block|{
name|WriteEntity
operator|.
name|Type
name|typ
init|=
name|we
operator|.
name|getType
argument_list|()
decl_stmt|;
name|boolean
name|q
decl_stmt|,
name|a
decl_stmt|;
switch|switch
condition|(
name|typ
condition|)
block|{
case|case
name|TABLE
case|:
name|Table
name|t
init|=
name|we
operator|.
name|getTable
argument_list|()
operator|.
name|getTTable
argument_list|()
decl_stmt|;
name|q
operator|=
name|setLastQueryTime
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|a
operator|=
name|setArchiveFlag
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|||
name|a
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Altering dest table for archiver "
operator|+
name|we
argument_list|)
expr_stmt|;
name|ms
operator|.
name|alter_table
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|t
operator|.
name|getTableName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARTITION
case|:
name|Partition
name|p
init|=
name|we
operator|.
name|getPartition
argument_list|()
operator|.
name|getTPartition
argument_list|()
decl_stmt|;
name|q
operator|=
name|setLastQueryTime
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|a
operator|=
name|setArchiveFlag
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|||
name|a
condition|)
block|{
if|if
condition|(
name|ms
operator|.
name|getPartition
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|p
operator|.
name|getTableName
argument_list|()
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Altering dest partition for archiver "
operator|+
name|we
argument_list|)
expr_stmt|;
name|ms
operator|.
name|alter_partition
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|p
operator|.
name|getTableName
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DFS_DIR
case|:
case|case
name|LOCAL_DIR
case|:
break|break;
default|default:
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown type for output: "
operator|+
name|we
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

