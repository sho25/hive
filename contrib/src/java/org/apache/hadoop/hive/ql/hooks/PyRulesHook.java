begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|script
operator|.
name|ScriptEngine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|script
operator|.
name|ScriptEngineManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_comment
comment|/**  * This hook executes python code to update the configuration in  * the ContextHook using java scripting abstraction.  *  * fbhive.pyrules.property has the path of the python file that is to  * be executed  * Python code has to define a method updateConf that accepts hookContext  * as a parameter  *  * Python code has to also provide a revertConf method that accepts hookContext  * and the old configuration object and reverts the changes made to the  * configuration in the updateConf  */
end_comment

begin_class
specifier|public
class|class
name|PyRulesHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PyRulesHook
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|private
name|HiveConf
name|savedConf
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|hookContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|PyRulesHook
operator|.
name|savedConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ScriptEngine
name|pythonMod
init|=
name|getPythonModifier
argument_list|(
name|hookContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|pythonMod
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fbhive.pyrules.modified"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|pythonMod
operator|.
name|put
argument_list|(
literal|"hookContext"
argument_list|,
name|hookContext
argument_list|)
expr_stmt|;
name|pythonMod
operator|.
name|eval
argument_list|(
literal|"updateConf(hookContext)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error updating the conf"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ScriptEngine
name|getPythonModifier
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|pyFilePath
init|=
name|hookContext
operator|.
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"fbhive.pyrules.file"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pyFilePath
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|File
name|pyFile
init|=
operator|new
name|File
argument_list|(
name|pyFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The python conf file "
operator|+
name|pyFile
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Reader
name|reader
init|=
operator|new
name|FileReader
argument_list|(
name|pyFile
argument_list|)
decl_stmt|;
try|try
block|{
name|ScriptEngine
name|eng
init|=
operator|new
name|ScriptEngineManager
argument_list|()
operator|.
name|getEngineByName
argument_list|(
literal|"python"
argument_list|)
decl_stmt|;
if|if
condition|(
name|eng
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not initialize jython engine"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|eng
operator|.
name|eval
argument_list|(
name|reader
argument_list|)
expr_stmt|;
return|return
name|eng
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error updating the conf using python hook"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CleanupHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|hookContext
operator|.
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"fbhive.pyrules.modified"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
else|else
block|{
try|try
block|{
name|ScriptEngine
name|pythonRevert
init|=
name|getPythonModifier
argument_list|(
name|hookContext
argument_list|)
decl_stmt|;
name|pythonRevert
operator|.
name|put
argument_list|(
literal|"hookContext"
argument_list|,
name|hookContext
argument_list|)
expr_stmt|;
name|pythonRevert
operator|.
name|put
argument_list|(
literal|"oldConf"
argument_list|,
name|PyRulesHook
operator|.
name|savedConf
argument_list|)
expr_stmt|;
name|pythonRevert
operator|.
name|eval
argument_list|(
literal|"revertConf(hookContext, oldConf)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reverting config"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

