begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|conf
operator|.
name|FBHiveConf
import|;
end_import

begin_comment
comment|/**  * Seperating out some functionality for so that Hive1 can share code.  */
end_comment

begin_class
specifier|public
class|class
name|BaseReplicationHook
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.ql.hooks.BaseReplicationHook"
argument_list|)
decl_stmt|;
specifier|protected
name|ConnectionUrlFactory
name|urlFactory
init|=
literal|null
decl_stmt|;
name|HiveConf
name|conf
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|ConnectionUrlFactory
name|getReplicationMySqlUrl
parameter_list|()
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|BaseReplicationHook
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|HookUtils
operator|.
name|getUrlFactory
argument_list|(
name|conf
argument_list|,
name|FBHiveConf
operator|.
name|CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|REPLICATION_CONNECTION_FACTORY
argument_list|,
name|FBHiveConf
operator|.
name|REPLICATION_MYSQL_TIER_VAR_NAME
argument_list|,
name|FBHiveConf
operator|.
name|REPLICATION_HOST_DATABASE_VAR_NAME
argument_list|)
return|;
block|}
specifier|public
name|BaseReplicationHook
parameter_list|()
throws|throws
name|Exception
block|{
name|urlFactory
operator|=
name|getReplicationMySqlUrl
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|BaseReplicationHook
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simplified call used by hive1 to insert into the audit log    *    * @param command    * @param commandType    * @param inputs    * @param outputs    * @param userInfo    * @throws Exception    */
specifier|public
name|void
name|run
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|commandType
parameter_list|,
name|String
name|inputs
parameter_list|,
name|String
name|outputs
parameter_list|,
name|String
name|userInfo
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|sqlParams
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|commandType
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|inputs
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|outputs
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|userInfo
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|"insert into snc1_command_log set command_type = ?, "
operator|+
literal|"inputs = ?, outputs = ?, user_info = ?"
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|BaseReplicationHook
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|HookUtils
operator|.
name|runInsert
argument_list|(
name|conf
argument_list|,
name|urlFactory
argument_list|,
name|sql
argument_list|,
name|sqlParams
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

