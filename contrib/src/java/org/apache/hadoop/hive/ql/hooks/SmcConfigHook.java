begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * Retrieves and sets Hive config key/values based on a config stored in the  * properties of an SMC tier. This is useful for quick changes to the config  * that should apply to a particular package of Hive. (e.g. silver.trunk). The  * advantage over a XML file edit is that it's persistent between hotfixes and  * we have a history of what changes were made. But since this is a hook that  * runs after query compilation, it is limited in what values it can effectively  * change.  *  * The configs are supposed to be stored in the properties of an SMC tier. The  * name of the property corresponds to the hive package. The value of the  * property is a JSON object that holds 1) an enabled field that controls  * whether the key-value pairs should be applied 2) a config field that holds  * the actual key-value pairs.  *  *    (Property)hivePackageName -> {enabled : boolean,  *                                  configs : {key1 : value1,  *                                             key2 : value2..  *                                            }  *                                 }  *  * The primary application of this hook is to modify the behavior of the  * jobtracker hook. For the configs to apply to the hook, it must be listed  * before the jobtracker hook in hive.exec.pre.hooks  */
end_comment

begin_class
specifier|public
class|class
name|SmcConfigHook
extends|extends
name|AbstractSmcConfigHook
implements|implements
name|ExecuteWithHookContext
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SmcConfigHook
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|HookContext
name|hookContext
parameter_list|)
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
name|hookContext
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
return|return;
block|}
name|Object
name|configObj
init|=
name|getConfigObject
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|configObj
operator|==
literal|null
operator|||
operator|!
operator|(
name|configObj
operator|instanceof
name|JSONObject
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"config not properly set!"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Sanity checks pass, apply all the configs.
name|JSONObject
name|configJson
init|=
operator|(
name|JSONObject
operator|)
name|configObj
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
operator|(
name|Iterator
argument_list|<
name|String
argument_list|>
operator|)
name|configJson
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|valueObj
init|=
name|configJson
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|valueObj
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting "
operator|+
name|key
operator|+
literal|" to "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

