begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|util
operator|.
name|typedbytes
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|util
operator|.
name|typedbytes
operator|.
name|TypedBytesWritableInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|util
operator|.
name|typedbytes
operator|.
name|TypedBytesWritableOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|NonSyncDataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|NonSyncDataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|FloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * TypedBytesSerDe uses typed bytes to serialize/deserialize.  *  * More info on the typedbytes stuff that Dumbo uses.  * http://issues.apache.org/jira/browse/HADOOP-1722 A fast python decoder for  * this, which is apparently 25% faster than the python version is available at  * http://github.com/klbostee/ctypedbytes/tree/master  */
end_comment

begin_class
annotation|@
name|SerDeSpec
argument_list|(
name|schemaProps
operator|=
block|{
name|serdeConstants
operator|.
name|LIST_COLUMNS
block|,
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
block|}
argument_list|)
specifier|public
class|class
name|TypedBytesSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TypedBytesSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numColumns
decl_stmt|;
name|StructObjectInspector
name|rowOI
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
decl_stmt|;
name|BytesWritable
name|serializeBytesWritable
decl_stmt|;
name|NonSyncDataOutputBuffer
name|barrStr
decl_stmt|;
name|TypedBytesWritableOutput
name|tbOut
decl_stmt|;
name|NonSyncDataInputBuffer
name|inBarrStr
decl_stmt|;
name|TypedBytesWritableInput
name|tbIn
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// We can get the table definition from tbl.
name|serializeBytesWritable
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
name|barrStr
operator|=
operator|new
name|NonSyncDataOutputBuffer
argument_list|()
expr_stmt|;
name|tbOut
operator|=
operator|new
name|TypedBytesWritableOutput
argument_list|(
name|barrStr
argument_list|)
expr_stmt|;
name|inBarrStr
operator|=
operator|new
name|NonSyncDataInputBuffer
argument_list|()
expr_stmt|;
name|tbIn
operator|=
operator|new
name|TypedBytesWritableInput
argument_list|(
name|inBarrStr
argument_list|)
expr_stmt|;
comment|// Read the configuration parameters
name|String
name|columnNameProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
name|String
name|columnTypeProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnNameDelimiter
init|=
name|tbl
operator|.
name|containsKey
argument_list|(
name|serdeConstants
operator|.
name|COLUMN_NAME_DELIMITER
argument_list|)
condition|?
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|COLUMN_NAME_DELIMITER
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|SerDeUtils
operator|.
name|COMMA
argument_list|)
decl_stmt|;
name|columnNames
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|columnNameProperty
operator|.
name|split
argument_list|(
name|columnNameDelimiter
argument_list|)
argument_list|)
expr_stmt|;
name|columnTypes
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|columnTypeProperty
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|columnTypes
operator|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnTypes
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|columnTypeProperty
argument_list|)
expr_stmt|;
block|}
assert|assert
name|columnNames
operator|.
name|size
argument_list|()
operator|==
name|columnTypes
operator|.
name|size
argument_list|()
assert|;
name|numColumns
operator|=
name|columnNames
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// All columns have to be primitive.
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numColumns
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|columnTypes
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" only accepts primitive columns, but column["
operator|+
name|c
operator|+
literal|"] named "
operator|+
name|columnNames
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|+
literal|" has category "
operator|+
name|columnTypes
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Constructing the row ObjectInspector:
comment|// The row consists of some string columns, each column will be a java
comment|// String object.
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|columnOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|columnNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numColumns
condition|;
name|c
operator|++
control|)
block|{
name|columnOIs
operator|.
name|add
argument_list|(
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|columnTypes
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// StandardStruct uses ArrayList to store the row.
name|rowOI
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|columnOIs
argument_list|)
expr_stmt|;
comment|// Constructing the row object, etc, which will be reused for all rows.
name|row
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|numColumns
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numColumns
condition|;
name|c
operator|++
control|)
block|{
name|row
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|rowOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|BytesWritable
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
name|BytesWritable
name|data
init|=
operator|(
name|BytesWritable
operator|)
name|blob
decl_stmt|;
name|inBarrStr
operator|.
name|reset
argument_list|(
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|row
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|deserializeField
argument_list|(
name|tbIn
argument_list|,
name|columnTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|row
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The next byte should be the marker
assert|assert
name|tbIn
operator|.
name|readTypeCode
argument_list|()
operator|==
name|Type
operator|.
name|ENDOFRECORD
assert|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|row
return|;
block|}
specifier|static
name|Object
name|deserializeField
parameter_list|(
name|TypedBytesWritableInput
name|in
parameter_list|,
name|TypeInfo
name|type
parameter_list|,
name|Object
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read the type
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|writableType
init|=
name|in
operator|.
name|readType
argument_list|()
decl_stmt|;
if|if
condition|(
name|writableType
operator|!=
literal|null
operator|&&
name|writableType
operator|.
name|isAssignableFrom
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// indicates that the recorded value is null
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|type
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveTypeInfo
name|ptype
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|type
decl_stmt|;
switch|switch
condition|(
name|ptype
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
block|{
return|return
literal|null
return|;
block|}
case|case
name|BOOLEAN
case|:
block|{
name|BooleanWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|BooleanWritable
argument_list|()
else|:
operator|(
name|BooleanWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|=
name|in
operator|.
name|readBoolean
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|BYTE
case|:
block|{
name|ByteWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|ByteWritable
argument_list|()
else|:
operator|(
name|ByteWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|=
name|in
operator|.
name|readByte
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|SHORT
case|:
block|{
name|ShortWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|ShortWritable
argument_list|()
else|:
operator|(
name|ShortWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|=
name|in
operator|.
name|readShort
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|INT
case|:
block|{
name|IntWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|IntWritable
argument_list|()
else|:
operator|(
name|IntWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|=
name|in
operator|.
name|readInt
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|LONG
case|:
block|{
name|LongWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|LongWritable
argument_list|()
else|:
operator|(
name|LongWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|=
name|in
operator|.
name|readLong
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|FLOAT
case|:
block|{
name|FloatWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|FloatWritable
argument_list|()
else|:
operator|(
name|FloatWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|=
name|in
operator|.
name|readFloat
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|DOUBLE
case|:
block|{
name|DoubleWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|DoubleWritable
argument_list|()
else|:
operator|(
name|DoubleWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|=
name|in
operator|.
name|readDouble
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|STRING
case|:
block|{
name|Text
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|Text
argument_list|()
else|:
operator|(
name|Text
operator|)
name|reuse
decl_stmt|;
name|r
operator|=
name|in
operator|.
name|readText
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unrecognized type: "
operator|+
name|ptype
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Currently, deserialization of complex types is not supported
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported category: "
operator|+
name|type
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|barrStr
operator|.
name|reset
argument_list|()
expr_stmt|;
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColumns
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|obj
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|serializeField
argument_list|(
name|o
argument_list|,
name|oi
argument_list|,
name|row
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// End of the record is part of the data
name|tbOut
operator|.
name|writeEndOfRecord
argument_list|()
expr_stmt|;
name|serializeBytesWritable
operator|.
name|set
argument_list|(
name|barrStr
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|barrStr
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|serializeBytesWritable
return|;
block|}
specifier|private
name|void
name|serializeField
parameter_list|(
name|Object
name|o
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
switch|switch
condition|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
block|{
return|return;
block|}
case|case
name|BOOLEAN
case|:
block|{
name|BooleanObjectInspector
name|boi
init|=
operator|(
name|BooleanObjectInspector
operator|)
name|poi
decl_stmt|;
name|BooleanWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|BooleanWritable
argument_list|()
else|:
operator|(
name|BooleanWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|.
name|set
argument_list|(
name|boi
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|tbOut
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|BYTE
case|:
block|{
name|ByteObjectInspector
name|boi
init|=
operator|(
name|ByteObjectInspector
operator|)
name|poi
decl_stmt|;
name|ByteWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|ByteWritable
argument_list|()
else|:
operator|(
name|ByteWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|.
name|set
argument_list|(
name|boi
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|tbOut
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|SHORT
case|:
block|{
name|ShortObjectInspector
name|spoi
init|=
operator|(
name|ShortObjectInspector
operator|)
name|poi
decl_stmt|;
name|ShortWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|ShortWritable
argument_list|()
else|:
operator|(
name|ShortWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|.
name|set
argument_list|(
name|spoi
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|tbOut
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|INT
case|:
block|{
name|IntObjectInspector
name|ioi
init|=
operator|(
name|IntObjectInspector
operator|)
name|poi
decl_stmt|;
name|IntWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|IntWritable
argument_list|()
else|:
operator|(
name|IntWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|.
name|set
argument_list|(
name|ioi
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|tbOut
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|LONG
case|:
block|{
name|LongObjectInspector
name|loi
init|=
operator|(
name|LongObjectInspector
operator|)
name|poi
decl_stmt|;
name|LongWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|LongWritable
argument_list|()
else|:
operator|(
name|LongWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|.
name|set
argument_list|(
name|loi
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|tbOut
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|FLOAT
case|:
block|{
name|FloatObjectInspector
name|foi
init|=
operator|(
name|FloatObjectInspector
operator|)
name|poi
decl_stmt|;
name|FloatWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|FloatWritable
argument_list|()
else|:
operator|(
name|FloatWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|.
name|set
argument_list|(
name|foi
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|tbOut
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|DOUBLE
case|:
block|{
name|DoubleObjectInspector
name|doi
init|=
operator|(
name|DoubleObjectInspector
operator|)
name|poi
decl_stmt|;
name|DoubleWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|DoubleWritable
argument_list|()
else|:
operator|(
name|DoubleWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|.
name|set
argument_list|(
name|doi
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|tbOut
operator|.
name|write
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|STRING
case|:
block|{
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|poi
decl_stmt|;
name|Text
name|t
init|=
name|soi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|tbOut
operator|.
name|write
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unrecognized type: "
operator|+
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
block|{
comment|// For complex object, serialize to JSON format
name|String
name|s
init|=
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
decl_stmt|;
name|Text
name|t
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|Text
argument_list|()
else|:
operator|(
name|Text
operator|)
name|reuse
decl_stmt|;
comment|// convert to Text and write it
name|t
operator|.
name|set
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|tbOut
operator|.
name|write
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unrecognized type: "
operator|+
name|oi
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
comment|// no support for statistics
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

