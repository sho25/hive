begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|udaf
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|UDAFEvaluator
import|;
end_import

begin_comment
comment|/**  * The utility class for UDAFMaxN and UDAFMinN.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|UDAFExampleMaxMinNUtil
block|{
comment|/**    * This class stores the information during an aggregation.    *     * Note that this class has to have a public constructor, so that Hive can     * serialize/deserialize this class using reflection.      */
specifier|public
specifier|static
class|class
name|State
block|{
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|a
decl_stmt|;
comment|// This ArrayList holds the max/min N
name|int
name|n
decl_stmt|;
comment|// This is the N
block|}
comment|/**    * The base class of the UDAFEvaluator for UDAFMaxN and UDAFMinN.      * We just need to override the getAscending function to make it work.    */
specifier|public
specifier|abstract
specifier|static
class|class
name|Evaluator
implements|implements
name|UDAFEvaluator
block|{
specifier|private
name|State
name|state
decl_stmt|;
specifier|public
name|Evaluator
parameter_list|()
block|{
name|state
operator|=
operator|new
name|State
argument_list|()
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
comment|/**      * Reset the state.      */
specifier|public
name|void
name|init
parameter_list|()
block|{
name|state
operator|.
name|a
operator|=
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
expr_stmt|;
name|state
operator|.
name|n
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      *  Returns true in UDAFMaxN, and false in UDAFMinN.      */
specifier|protected
specifier|abstract
name|boolean
name|getAscending
parameter_list|()
function_decl|;
comment|/**      * Iterate through one row of original data.      * This function will update the internal max/min buffer if the internal buffer is not full,      * or the new row is larger/smaller than the current max/min n.      */
specifier|public
name|boolean
name|iterate
parameter_list|(
name|Double
name|o
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|boolean
name|ascending
init|=
name|getAscending
argument_list|()
decl_stmt|;
name|state
operator|.
name|n
operator|=
name|n
expr_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|boolean
name|doInsert
init|=
name|state
operator|.
name|a
operator|.
name|size
argument_list|()
operator|<
name|n
decl_stmt|;
if|if
condition|(
operator|!
name|doInsert
condition|)
block|{
name|Double
name|last
init|=
name|state
operator|.
name|a
operator|.
name|get
argument_list|(
name|state
operator|.
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ascending
condition|)
block|{
name|doInsert
operator|=
name|o
operator|<
name|last
expr_stmt|;
block|}
else|else
block|{
name|doInsert
operator|=
name|o
operator|>
name|last
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doInsert
condition|)
block|{
name|binaryInsert
argument_list|(
name|state
operator|.
name|a
argument_list|,
name|o
argument_list|,
name|ascending
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|a
operator|.
name|size
argument_list|()
operator|>
name|n
condition|)
block|{
name|state
operator|.
name|a
operator|.
name|remove
argument_list|(
name|state
operator|.
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Get partial aggregation results.      */
specifier|public
name|State
name|terminatePartial
parameter_list|()
block|{
comment|// This is SQL standard - max_n of zero items should be null.
return|return
name|state
operator|.
name|a
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|state
return|;
block|}
comment|/** Two pointers are created to track the maximal elements in both o and MaxNArray.      *  The smallest element is added into tempArrayList      *  Consider the sizes of o and MaxNArray may be different.      */
specifier|public
name|boolean
name|merge
parameter_list|(
name|State
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|state
operator|.
name|n
operator|=
name|o
operator|.
name|n
expr_stmt|;
name|state
operator|.
name|a
operator|=
name|sortedMerge
argument_list|(
name|o
operator|.
name|a
argument_list|,
name|state
operator|.
name|a
argument_list|,
name|getAscending
argument_list|()
argument_list|,
name|o
operator|.
name|n
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Terminates the max N lookup and return the final result.      */
specifier|public
name|ArrayList
argument_list|<
name|Double
argument_list|>
name|terminate
parameter_list|()
block|{
comment|// This is SQL standard - return state.MaxNArray, or null if the size is zero.
return|return
name|state
operator|.
name|a
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|state
operator|.
name|a
return|;
block|}
block|}
comment|/**    * Returns a comparator based on whether the order is ascending or not.    * Has a dummy parameter to make sure generics can infer the type correctly.    */
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|Comparator
argument_list|<
name|T
argument_list|>
name|getComparator
parameter_list|(
name|boolean
name|ascending
parameter_list|,
name|T
name|dummy
parameter_list|)
block|{
name|Comparator
argument_list|<
name|T
argument_list|>
name|comp
decl_stmt|;
if|if
condition|(
name|ascending
condition|)
block|{
name|comp
operator|=
operator|new
name|Comparator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|T
name|o1
parameter_list|,
name|T
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
operator|new
name|Comparator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|T
name|o1
parameter_list|,
name|T
name|o2
parameter_list|)
block|{
return|return
name|o2
operator|.
name|compareTo
argument_list|(
name|o1
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|comp
return|;
block|}
comment|/**    * Insert an element into an ascending/descending array, and keep the order.     * @param ascending    *            if true, the array is sorted in ascending order,    *            otherwise it is in descending order.    *     */
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|void
name|binaryInsert
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|,
name|T
name|value
parameter_list|,
name|boolean
name|ascending
parameter_list|)
block|{
name|int
name|position
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|list
argument_list|,
name|value
argument_list|,
name|getComparator
argument_list|(
name|ascending
argument_list|,
operator|(
name|T
operator|)
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|position
operator|<
literal|0
condition|)
block|{
name|position
operator|=
operator|(
operator|-
name|position
operator|)
operator|-
literal|1
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|position
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Merge two ascending/descending array and keep the first n elements.    * @param ascending    *            if true, the array is sorted in ascending order,    *            otherwise it is in descending order.    */
specifier|static
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|ArrayList
argument_list|<
name|T
argument_list|>
name|sortedMerge
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|a1
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|a2
parameter_list|,
name|boolean
name|ascending
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
init|=
name|getComparator
argument_list|(
name|ascending
argument_list|,
operator|(
name|T
operator|)
literal|null
argument_list|)
decl_stmt|;
name|int
name|n1
init|=
name|a1
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|n2
init|=
name|a2
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|p1
init|=
literal|0
decl_stmt|;
comment|// The current element in a1
name|int
name|p2
init|=
literal|0
decl_stmt|;
comment|// The current element in a2
name|ArrayList
argument_list|<
name|T
argument_list|>
name|output
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|n
argument_list|)
decl_stmt|;
while|while
condition|(
name|output
operator|.
name|size
argument_list|()
operator|<
name|n
operator|&&
operator|(
name|p1
operator|<
name|n1
operator|||
name|p2
operator|<
name|n2
operator|)
condition|)
block|{
if|if
condition|(
name|p1
operator|<
name|n1
condition|)
block|{
if|if
condition|(
name|p2
operator|==
name|n2
operator|||
name|comparator
operator|.
name|compare
argument_list|(
name|a1
operator|.
name|get
argument_list|(
name|p1
argument_list|)
argument_list|,
name|a2
operator|.
name|get
argument_list|(
name|p2
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|output
operator|.
name|add
argument_list|(
name|a1
operator|.
name|get
argument_list|(
name|p1
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|output
operator|.
name|size
argument_list|()
operator|==
name|n
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|p2
operator|<
name|n2
condition|)
block|{
if|if
condition|(
name|p1
operator|==
name|n1
operator|||
name|comparator
operator|.
name|compare
argument_list|(
name|a2
operator|.
name|get
argument_list|(
name|p2
argument_list|)
argument_list|,
name|a1
operator|.
name|get
argument_list|(
name|p1
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|output
operator|.
name|add
argument_list|(
name|a2
operator|.
name|get
argument_list|(
name|p2
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|output
return|;
block|}
comment|// No instantiation.
specifier|private
name|UDAFExampleMaxMinNUtil
parameter_list|()
block|{   }
block|}
end_class

end_unit

