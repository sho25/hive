begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|MissingFormatArgumentException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * RegexSerDe uses regular expression (regex) to serialize/deserialize.  *  * It can deserialize the data using regex and extracts groups as columns. It  * can also serialize the row object using a format string.  *  * In deserialization stage, if a row does not match the regex, then all columns  * in the row will be NULL. If a row matches the regex but has less than  * expected groups, the missing groups will be NULL. If a row matches the regex  * but has more than expected groups, the additional groups are just ignored.  *  * In serialization stage, it uses java string formatter to format the columns  * into a row. If the output type of the column in a query is not a string, it  * will be automatically converted to String by Hive.  *  * For the format of the format String, please refer to {@link http  * ://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax}  *  * NOTE: Obviously, all columns have to be strings. Users can use  * "CAST(a AS INT)" to convert columns to other types.  *  * NOTE: This implementation is using String, and javaStringObjectInspector. A  * more efficient implementation should use UTF-8 encoded Text and  * writableStringObjectInspector. We should switch to that when we have a UTF-8  * based Regex library.  */
end_comment

begin_class
annotation|@
name|SerDeSpec
argument_list|(
name|schemaProps
operator|=
block|{
name|serdeConstants
operator|.
name|LIST_COLUMNS
block|,
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
block|,
name|RegexSerDe
operator|.
name|INPUT_REGEX
block|,
name|RegexSerDe
operator|.
name|OUTPUT_FORMAT_STRING
block|,
name|RegexSerDe
operator|.
name|INPUT_REGEX_CASE_SENSITIVE
block|}
argument_list|)
specifier|public
class|class
name|RegexSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RegexSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_REGEX
init|=
literal|"input.regex"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OUTPUT_FORMAT_STRING
init|=
literal|"output.format.string"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INPUT_REGEX_CASE_SENSITIVE
init|=
literal|"input.regex.case.insensitive"
decl_stmt|;
name|int
name|numColumns
decl_stmt|;
name|String
name|inputRegex
decl_stmt|;
name|String
name|outputFormatString
decl_stmt|;
name|Pattern
name|inputPattern
decl_stmt|;
name|StructObjectInspector
name|rowOI
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|row
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// We can get the table definition from tbl.
comment|// Read the configuration parameters
name|inputRegex
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|INPUT_REGEX
argument_list|)
expr_stmt|;
name|outputFormatString
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|OUTPUT_FORMAT_STRING
argument_list|)
expr_stmt|;
name|String
name|columnNameProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
name|String
name|columnTypeProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
decl_stmt|;
name|boolean
name|inputRegexIgnoreCase
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tbl
operator|.
name|getProperty
argument_list|(
name|INPUT_REGEX_CASE_SENSITIVE
argument_list|)
argument_list|)
decl_stmt|;
comment|// Parse the configuration parameters
if|if
condition|(
name|inputRegex
operator|!=
literal|null
condition|)
block|{
name|inputPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|inputRegex
argument_list|,
name|Pattern
operator|.
name|DOTALL
operator|+
operator|(
name|inputRegexIgnoreCase
condition|?
name|Pattern
operator|.
name|CASE_INSENSITIVE
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inputPattern
operator|=
literal|null
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|columnNameProperty
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|columnTypeProperty
argument_list|)
decl_stmt|;
assert|assert
name|columnNames
operator|.
name|size
argument_list|()
operator|==
name|columnTypes
operator|.
name|size
argument_list|()
assert|;
name|numColumns
operator|=
name|columnNames
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// All columns have to be of type STRING.
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numColumns
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|columnTypes
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|stringTypeInfo
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" only accepts string columns, but column["
operator|+
name|c
operator|+
literal|"] named "
operator|+
name|columnNames
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|+
literal|" has type "
operator|+
name|columnTypes
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// Constructing the row ObjectInspector:
comment|// The row consists of some string columns, each column will be a java
comment|// String object.
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|columnOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|columnNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numColumns
condition|;
name|c
operator|++
control|)
block|{
name|columnOIs
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
block|}
comment|// StandardStruct uses ArrayList to store the row.
name|rowOI
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|columnOIs
argument_list|)
expr_stmt|;
comment|// Constructing the row object, etc, which will be reused for all rows.
name|row
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numColumns
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numColumns
condition|;
name|c
operator|++
control|)
block|{
name|row
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|outputFields
operator|=
operator|new
name|Object
index|[
name|numColumns
index|]
expr_stmt|;
name|outputRowText
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|rowOI
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|Text
operator|.
name|class
return|;
block|}
comment|// Number of rows not matching the regex
name|long
name|unmatchedRows
init|=
literal|0
decl_stmt|;
name|long
name|nextUnmatchedRows
init|=
literal|1
decl_stmt|;
comment|// Number of rows that match the regex but have missing groups.
name|long
name|partialMatchedRows
init|=
literal|0
decl_stmt|;
name|long
name|nextPartialMatchedRows
init|=
literal|1
decl_stmt|;
name|long
name|getNextNumberToDisplay
parameter_list|(
name|long
name|now
parameter_list|)
block|{
return|return
name|now
operator|*
literal|10
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|inputPattern
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"This table does not have serde property \"input.regex\"!"
argument_list|)
throw|;
block|}
name|Text
name|rowText
init|=
operator|(
name|Text
operator|)
name|blob
decl_stmt|;
name|Matcher
name|m
init|=
name|inputPattern
operator|.
name|matcher
argument_list|(
name|rowText
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// If do not match, ignore the line, return a row with all nulls.
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|unmatchedRows
operator|++
expr_stmt|;
if|if
condition|(
name|unmatchedRows
operator|>=
name|nextUnmatchedRows
condition|)
block|{
name|nextUnmatchedRows
operator|=
name|getNextNumberToDisplay
argument_list|(
name|nextUnmatchedRows
argument_list|)
expr_stmt|;
comment|// Report the row
name|LOG
operator|.
name|warn
argument_list|(
literal|""
operator|+
name|unmatchedRows
operator|+
literal|" unmatched rows are found: "
operator|+
name|rowText
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|// Otherwise, return the row.
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numColumns
condition|;
name|c
operator|++
control|)
block|{
try|try
block|{
name|row
operator|.
name|set
argument_list|(
name|c
argument_list|,
name|m
operator|.
name|group
argument_list|(
name|c
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|partialMatchedRows
operator|++
expr_stmt|;
if|if
condition|(
name|partialMatchedRows
operator|>=
name|nextPartialMatchedRows
condition|)
block|{
name|nextPartialMatchedRows
operator|=
name|getNextNumberToDisplay
argument_list|(
name|nextPartialMatchedRows
argument_list|)
expr_stmt|;
comment|// Report the row
name|LOG
operator|.
name|warn
argument_list|(
literal|""
operator|+
name|partialMatchedRows
operator|+
literal|" partially unmatched rows are found, "
operator|+
literal|" cannot find group "
operator|+
name|c
operator|+
literal|": "
operator|+
name|rowText
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|set
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|row
return|;
block|}
name|Object
index|[]
name|outputFields
decl_stmt|;
name|Text
name|outputRowText
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|outputFormatString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Cannot write data into table because \"output.format.string\""
operator|+
literal|" is not specified in serde properties of the table."
argument_list|)
throw|;
block|}
comment|// Get all the fields out.
comment|// NOTE: The correct way to get fields out of the row is to use
comment|// objInspector.
comment|// The obj can be a Java ArrayList, or a Java class, or a byte[] or
comment|// whatever.
comment|// The only way to access the data inside the obj is through
comment|// ObjectInspector.
name|StructObjectInspector
name|outputRowOI
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|outputFieldRefs
init|=
name|outputRowOI
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputFieldRefs
operator|.
name|size
argument_list|()
operator|!=
name|numColumns
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Cannot serialize the object because there are "
operator|+
name|outputFieldRefs
operator|.
name|size
argument_list|()
operator|+
literal|" fields but the table has "
operator|+
name|numColumns
operator|+
literal|" columns."
argument_list|)
throw|;
block|}
comment|// Get all data out.
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numColumns
condition|;
name|c
operator|++
control|)
block|{
name|Object
name|field
init|=
name|outputRowOI
operator|.
name|getStructFieldData
argument_list|(
name|obj
argument_list|,
name|outputFieldRefs
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectInspector
name|fieldOI
init|=
name|outputFieldRefs
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
comment|// The data must be of type String
name|StringObjectInspector
name|fieldStringOI
init|=
operator|(
name|StringObjectInspector
operator|)
name|fieldOI
decl_stmt|;
comment|// Convert the field to Java class String, because objects of String type
comment|// can be
comment|// stored in String, Text, or some other classes.
name|outputFields
index|[
name|c
index|]
operator|=
name|fieldStringOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
comment|// Format the String
name|String
name|outputRowString
init|=
literal|null
decl_stmt|;
try|try
block|{
name|outputRowString
operator|=
name|String
operator|.
name|format
argument_list|(
name|outputFormatString
argument_list|,
name|outputFields
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingFormatArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"The table contains "
operator|+
name|numColumns
operator|+
literal|" columns, but the outputFormatString is asking for more."
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|outputRowText
operator|.
name|set
argument_list|(
name|outputRowString
argument_list|)
expr_stmt|;
return|return
name|outputRowText
return|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
comment|// no support for statistics
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

