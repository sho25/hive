begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|fileformat
operator|.
name|base64
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|FSRecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveIgnoreKeyTextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConfigurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * FileOutputFormat for base64 encoded text files.  *  * Each line is a base64-encoded record. The key is a LongWritable which is the  * offset. The value is a BytesWritable containing the base64-decoded bytes.  *  * This class accepts a configurable parameter:  * "base64.text.output.format.signature"  *  * The UTF-8 encoded signature will be prepended to each BytesWritable before we  * do base64 encoding.  */
end_comment

begin_class
specifier|public
class|class
name|Base64TextOutputFormat
parameter_list|<
name|K
extends|extends
name|WritableComparable
parameter_list|,
name|V
extends|extends
name|Writable
parameter_list|>
extends|extends
name|HiveIgnoreKeyTextOutputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/**    * Base64RecordWriter.    *    */
specifier|public
specifier|static
class|class
name|Base64RecordWriter
implements|implements
name|FSRecordWriter
implements|,
name|JobConfigurable
block|{
name|FSRecordWriter
name|writer
decl_stmt|;
name|BytesWritable
name|bytesWritable
decl_stmt|;
specifier|public
name|Base64RecordWriter
parameter_list|(
name|FSRecordWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|bytesWritable
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Writable
name|w
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get input data
name|byte
index|[]
name|input
decl_stmt|;
name|int
name|inputLength
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|Text
condition|)
block|{
name|input
operator|=
operator|(
operator|(
name|Text
operator|)
name|w
operator|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|inputLength
operator|=
operator|(
operator|(
name|Text
operator|)
name|w
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
assert|assert
operator|(
name|w
operator|instanceof
name|BytesWritable
operator|)
assert|;
name|input
operator|=
operator|(
operator|(
name|BytesWritable
operator|)
name|w
operator|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|inputLength
operator|=
operator|(
operator|(
name|BytesWritable
operator|)
name|w
operator|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|// Add signature
name|byte
index|[]
name|wrapped
init|=
operator|new
name|byte
index|[
name|signature
operator|.
name|length
operator|+
name|inputLength
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|signature
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|wrapped
index|[
name|i
index|]
operator|=
name|signature
index|[
name|i
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputLength
condition|;
name|i
operator|++
control|)
block|{
name|wrapped
index|[
name|i
operator|+
name|signature
operator|.
name|length
index|]
operator|=
name|input
index|[
name|i
index|]
expr_stmt|;
block|}
comment|// Encode
name|byte
index|[]
name|output
init|=
name|base64
operator|.
name|encode
argument_list|(
name|wrapped
argument_list|)
decl_stmt|;
name|bytesWritable
operator|.
name|set
argument_list|(
name|output
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|length
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|bytesWritable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|close
argument_list|(
name|abort
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|signature
decl_stmt|;
specifier|private
specifier|final
name|Base64
name|base64
init|=
name|Base64TextInputFormat
operator|.
name|createBase64
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
try|try
block|{
name|String
name|signatureString
init|=
name|job
operator|.
name|get
argument_list|(
literal|"base64.text.output.format.signature"
argument_list|)
decl_stmt|;
if|if
condition|(
name|signatureString
operator|!=
literal|null
condition|)
block|{
name|signature
operator|=
name|signatureString
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|signature
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|FSRecordWriter
name|getHiveRecordWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|Path
name|finalOutPath
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|Properties
name|tableProperties
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|Base64RecordWriter
name|writer
init|=
operator|new
name|Base64RecordWriter
argument_list|(
name|super
operator|.
name|getHiveRecordWriter
argument_list|(
name|jc
argument_list|,
name|finalOutPath
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|,
name|isCompressed
argument_list|,
name|tableProperties
argument_list|,
name|progress
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|configure
argument_list|(
name|jc
argument_list|)
expr_stmt|;
return|return
name|writer
return|;
block|}
block|}
end_class

end_unit

