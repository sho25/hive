begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|input
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tez
operator|.
name|dag
operator|.
name|history
operator|.
name|logging
operator|.
name|proto
operator|.
name|ProtoMessageWritable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageLite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
import|;
end_import

begin_comment
comment|/**  * InputFormat to support reading ProtoWritable stored in a sequence file. You cannot use the  * sequence file directly since the createValue method uses default constructor. But ProtoWritable  * has a package protected constructor which takes a parser.  * By reading the proto class name from job conf which is copied from table properties by Hive this  * class manages to give a generic implementation where only can set the proto.class in table  * properties and load the file.  *  * It is also enhanced to ignore EOF exception while opening a file, so as to ignore 0 bytes files  * in the table. Maybe we should allow this to be configured.  *  * @param<K> K for the sequence file.  * @param<V> The proto message type stored in the sequence file. Just to keep java compiler happy.  */
end_comment

begin_class
specifier|public
class|class
name|ProtobufMessageInputFormat
parameter_list|<
name|K
parameter_list|,
name|V
extends|extends
name|MessageLite
parameter_list|>
extends|extends
name|SequenceFileInputFormat
argument_list|<
name|K
argument_list|,
name|ProtoMessageWritable
argument_list|<
name|V
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PROTO_CLASS
init|=
literal|"proto.class"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Parser
argument_list|<
name|V
argument_list|>
name|getParser
parameter_list|(
name|String
name|protoClass
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|protoClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Please specificy table property: "
operator|+
name|PROTO_CLASS
argument_list|)
throw|;
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|protoClass
argument_list|)
decl_stmt|;
return|return
operator|(
name|Parser
argument_list|<
name|V
argument_list|>
operator|)
name|clazz
operator|.
name|getField
argument_list|(
literal|"PARSER"
argument_list|)
operator|.
name|get
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
decl||
name|IllegalArgumentException
decl||
name|IllegalAccessException
decl||
name|NoSuchFieldException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not load class: "
operator|+
name|protoClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|RecordReader
argument_list|<
name|K
argument_list|,
name|ProtoMessageWritable
argument_list|<
name|V
argument_list|>
argument_list|>
name|getSafeRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|super
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// Ignore EOFException, we create an empty reader for this, instead of failing.
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|K
argument_list|,
name|ProtoMessageWritable
argument_list|<
name|V
argument_list|>
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Parser
argument_list|<
name|V
argument_list|>
name|parser
init|=
name|getParser
argument_list|(
name|job
operator|.
name|get
argument_list|(
name|PROTO_CLASS
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|RecordReader
argument_list|<
name|K
argument_list|,
name|ProtoMessageWritable
argument_list|<
name|V
argument_list|>
argument_list|>
name|reader
init|=
name|getSafeRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
return|return
operator|new
name|RecordReader
argument_list|<
name|K
argument_list|,
name|ProtoMessageWritable
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
block|{
comment|// Overload create value, since there is no default constructor for ProtoMessageWritable.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|ProtoMessageWritable
argument_list|<
name|V
argument_list|>
name|createValue
parameter_list|()
block|{
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Constructor
argument_list|<
name|ProtoMessageWritable
argument_list|>
name|cons
init|=
name|ProtoMessageWritable
operator|.
name|class
operator|.
name|getDeclaredConstructor
argument_list|(
name|Parser
operator|.
name|class
argument_list|)
decl_stmt|;
name|cons
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|cons
operator|.
name|newInstance
argument_list|(
name|parser
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected error: "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|K
name|createKey
parameter_list|()
block|{
return|return
name|reader
operator|!=
literal|null
condition|?
name|reader
operator|.
name|createKey
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reader
operator|!=
literal|null
condition|?
name|reader
operator|.
name|getPos
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|reader
operator|!=
literal|null
condition|?
name|reader
operator|.
name|getProgress
argument_list|()
else|:
literal|1.0f
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|K
name|arg0
parameter_list|,
name|ProtoMessageWritable
argument_list|<
name|V
argument_list|>
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|!=
literal|null
condition|?
name|reader
operator|.
name|next
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|)
else|:
literal|false
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

