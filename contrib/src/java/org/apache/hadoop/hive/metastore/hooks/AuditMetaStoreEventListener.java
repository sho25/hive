begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hooks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
operator|.
name|HMSHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|ListenerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|LoadPartitionDoneEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|BaseReplicationHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ConnectionUrlFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|HookUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReplicationHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|ReadEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSimpleJSONProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/*  * MetaStoreEventListener that logs metastore operations to the audit log.  * The operations that this listener logs are only those from the thrift server,  * and not the CLI, because ReplicationHook currently logs queries from the CLI.  */
end_comment

begin_class
specifier|public
class|class
name|AuditMetaStoreEventListener
extends|extends
name|MetaStoreEventListener
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AuditMetaStoreEventListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMMAND_TYPE
init|=
literal|"METASTORE_API"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMMAND_NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ADD_PARTITION_COMMAND
init|=
literal|"ADD_PARTITION"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALTER_PARTITION_COMMAND
init|=
literal|"ALTER_PARTITION"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALTER_TABLE_COMMAND
init|=
literal|"ALTER_TABLE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_TABLE_COMMAND
init|=
literal|"CREATE_TABLE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DROP_PARTITION_COMMAND
init|=
literal|"DROP_PARTITION"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DROP_DATABASE_COMMAND
init|=
literal|"DROP_DATABASE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DROP_TABLE_COMMAND
init|=
literal|"DROP_TABLE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEW_TABLE
init|=
literal|"new_table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OLD_TABLE
init|=
literal|"old_table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEW_PARTITION
init|=
literal|"new_partition"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OLD_PARTITION
init|=
literal|"old_partition"
decl_stmt|;
specifier|private
specifier|final
name|TSerializer
name|jsonSerializer
decl_stmt|;
specifier|protected
name|ConnectionUrlFactory
name|urlFactory
init|=
literal|null
decl_stmt|;
specifier|public
name|AuditMetaStoreEventListener
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|urlFactory
operator|=
name|BaseReplicationHook
operator|.
name|getReplicationMySqlUrl
argument_list|()
expr_stmt|;
name|jsonSerializer
operator|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TSimpleJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|insertToDB
parameter_list|(
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
parameter_list|,
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
parameter_list|,
name|ListenerEvent
name|event
parameter_list|,
name|String
name|command
parameter_list|)
throws|throws
name|MetaException
block|{
name|HiveConf
name|conf
init|=
name|event
operator|.
name|getHandler
argument_list|()
operator|.
name|getHiveConf
argument_list|()
decl_stmt|;
comment|//if HIVEQUERYID is set, then this command came from a CLI
comment|// (and will execute posthooks).  We don't want to log such a command
if|if
condition|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
operator|==
literal|null
operator|||
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|sqlParams
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|ReplicationHook
operator|.
name|entitiesToString
argument_list|(
name|inputs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|ReplicationHook
operator|.
name|entitiesToString
argument_list|(
name|outputs
argument_list|)
argument_list|)
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|COMMAND_TYPE
argument_list|)
expr_stmt|;
comment|// Assertion at beginning of method guarantees this string will remain empty
name|String
name|sql
init|=
literal|"insert into snc1_command_log "
operator|+
literal|" set command = ?, inputs = ?, outputs = ?, command_type = ?"
decl_stmt|;
name|String
name|user_info
init|=
literal|null
decl_stmt|;
name|String
name|query_src
init|=
literal|null
decl_stmt|;
comment|// The Metastore Thrift API allows clients to set environment properties for
comment|// selected operations (alter / create table and partition,
comment|// i.e. create_table_with_environment_context).
comment|// If present, the environment context is passed to all listeners.
comment|// The following lines check if user information and query source were passed
comment|// through the environment context.
name|String
name|ENV_CONTEXT_USER_INFO
init|=
literal|"user_info"
decl_stmt|;
name|String
name|ENV_CONTEXT_QUERY_SRC
init|=
literal|"query_src"
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getEnvironmentContext
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getEnvironmentContext
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|event
operator|.
name|getEnvironmentContext
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envProperties
init|=
name|event
operator|.
name|getEnvironmentContext
argument_list|()
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|envProperties
operator|.
name|get
argument_list|(
name|ENV_CONTEXT_USER_INFO
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|user_info
operator|=
name|envProperties
operator|.
name|get
argument_list|(
name|ENV_CONTEXT_USER_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|envProperties
operator|.
name|get
argument_list|(
name|ENV_CONTEXT_QUERY_SRC
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|query_src
operator|=
name|envProperties
operator|.
name|get
argument_list|(
name|ENV_CONTEXT_QUERY_SRC
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|user_info
operator|==
literal|null
condition|)
block|{
name|String
name|ipAddress
init|=
name|HMSHandler
operator|.
name|getIpAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|ipAddress
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ipAddress
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|ipAddress
operator|=
name|ipAddress
operator|.
name|replaceFirst
argument_list|(
literal|"/"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|user_info
operator|=
name|ipAddress
expr_stmt|;
block|}
block|}
if|if
condition|(
name|user_info
operator|!=
literal|null
condition|)
block|{
name|sql
operator|+=
literal|", user_info = ?"
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|user_info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query_src
operator|!=
literal|null
condition|)
block|{
name|sql
operator|+=
literal|", query_src = ?"
expr_stmt|;
name|sqlParams
operator|.
name|add
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeJava
argument_list|(
name|query_src
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HookUtils
operator|.
name|runInsert
argument_list|(
name|conf
argument_list|,
name|urlFactory
argument_list|,
name|sql
argument_list|,
name|sqlParams
argument_list|,
name|HookUtils
operator|.
name|getSqlNumRetry
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|Table
name|getTableFromPart
parameter_list|(
name|Partition
name|p
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|event
operator|.
name|getHandler
argument_list|()
operator|.
name|get_table
argument_list|(
name|p
operator|.
name|getDbName
argument_list|()
argument_list|,
name|p
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|getQlTable
parameter_list|(
name|Table
name|t
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
argument_list|(
name|t
argument_list|)
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
name|getQlPartition
parameter_list|(
name|Table
name|t
parameter_list|,
name|Partition
name|p
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Table
name|qlTable
init|=
name|getQlTable
argument_list|(
name|t
argument_list|)
decl_stmt|;
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|Partition
argument_list|(
name|qlTable
argument_list|,
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ReadEntity
name|getPartitionInput
parameter_list|(
name|Partition
name|p
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
name|Table
name|mTable
init|=
name|getTableFromPart
argument_list|(
name|p
argument_list|,
name|event
argument_list|)
decl_stmt|;
name|ReadEntity
name|input
init|=
operator|new
name|ReadEntity
argument_list|(
name|getQlPartition
argument_list|(
name|mTable
argument_list|,
name|p
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|input
return|;
block|}
specifier|private
name|WriteEntity
name|getPartitionOutput
parameter_list|(
name|Partition
name|p
parameter_list|,
name|ListenerEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
name|Table
name|mTable
init|=
name|event
operator|.
name|getHandler
argument_list|()
operator|.
name|get_table
argument_list|(
name|p
operator|.
name|getDbName
argument_list|()
argument_list|,
name|p
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|WriteEntity
name|output
init|=
operator|new
name|WriteEntity
argument_list|(
name|getQlPartition
argument_list|(
name|mTable
argument_list|,
name|p
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|output
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|logNoSuccess
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ListenerEvent success is false"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addCommandNameToCommand
parameter_list|(
name|JSONObject
name|command
parameter_list|,
name|String
name|name
parameter_list|)
block|{
try|try
block|{
name|command
operator|.
name|put
argument_list|(
name|COMMAND_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not add command name to JSON object"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addTBaseToCommand
parameter_list|(
name|JSONObject
name|command
parameter_list|,
name|TBase
name|object
parameter_list|,
name|String
name|objectName
parameter_list|)
block|{
try|try
block|{
name|command
operator|.
name|put
argument_list|(
name|objectName
argument_list|,
operator|new
name|JSONObject
argument_list|(
name|jsonSerializer
operator|.
name|toString
argument_list|(
name|object
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not add "
operator|+
name|objectName
operator|+
literal|" to JSON object"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not serialize "
operator|+
name|objectName
operator|+
literal|" to JSON"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAddPartition
parameter_list|(
name|AddPartitionEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|logNoSuccess
argument_list|()
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
operator|new
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
operator|new
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
argument_list|()
decl_stmt|;
name|JSONObject
name|command
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|getQlTable
argument_list|(
name|getTableFromPart
argument_list|(
name|event
operator|.
name|getPartition
argument_list|()
argument_list|,
name|event
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|getPartitionOutput
argument_list|(
name|event
operator|.
name|getPartition
argument_list|()
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|addCommandNameToCommand
argument_list|(
name|command
argument_list|,
name|ADD_PARTITION_COMMAND
argument_list|)
expr_stmt|;
name|insertToDB
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|event
argument_list|,
name|command
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAlterPartition
parameter_list|(
name|AlterPartitionEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|logNoSuccess
argument_list|()
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
operator|new
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
operator|new
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
argument_list|()
decl_stmt|;
name|JSONObject
name|command
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|getPartitionInput
argument_list|(
name|event
operator|.
name|getOldPartition
argument_list|()
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|getPartitionOutput
argument_list|(
name|event
operator|.
name|getNewPartition
argument_list|()
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|addCommandNameToCommand
argument_list|(
name|command
argument_list|,
name|ALTER_PARTITION_COMMAND
argument_list|)
expr_stmt|;
name|addTBaseToCommand
argument_list|(
name|command
argument_list|,
name|event
operator|.
name|getOldPartition
argument_list|()
argument_list|,
name|OLD_PARTITION
argument_list|)
expr_stmt|;
name|addTBaseToCommand
argument_list|(
name|command
argument_list|,
name|event
operator|.
name|getNewPartition
argument_list|()
argument_list|,
name|NEW_PARTITION
argument_list|)
expr_stmt|;
name|insertToDB
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|event
argument_list|,
name|command
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropPartition
parameter_list|(
name|DropPartitionEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|logNoSuccess
argument_list|()
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
operator|new
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
operator|new
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
argument_list|()
decl_stmt|;
name|JSONObject
name|command
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|getQlTable
argument_list|(
name|getTableFromPart
argument_list|(
name|event
operator|.
name|getPartition
argument_list|()
argument_list|,
name|event
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
name|getPartitionOutput
argument_list|(
name|event
operator|.
name|getPartition
argument_list|()
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|addCommandNameToCommand
argument_list|(
name|command
argument_list|,
name|DROP_PARTITION_COMMAND
argument_list|)
expr_stmt|;
name|insertToDB
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|event
argument_list|,
name|command
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|/*    * Currently, on the create database CLI command, nothing gets logged.    */
specifier|public
name|void
name|onCreateDatabase
parameter_list|(
name|CreateDatabaseEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|onDropDatabase
parameter_list|(
name|DropDatabaseEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|logNoSuccess
argument_list|()
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
operator|new
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
operator|new
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
argument_list|()
decl_stmt|;
name|JSONObject
name|command
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|addCommandNameToCommand
argument_list|(
name|command
argument_list|,
name|DROP_DATABASE_COMMAND
argument_list|)
expr_stmt|;
name|insertToDB
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|event
argument_list|,
name|command
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCreateTable
parameter_list|(
name|CreateTableEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|logNoSuccess
argument_list|()
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
operator|new
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
operator|new
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
argument_list|()
decl_stmt|;
name|JSONObject
name|command
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|getQlTable
argument_list|(
name|event
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addCommandNameToCommand
argument_list|(
name|command
argument_list|,
name|CREATE_TABLE_COMMAND
argument_list|)
expr_stmt|;
name|insertToDB
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|event
argument_list|,
name|command
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropTable
parameter_list|(
name|DropTableEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|logNoSuccess
argument_list|()
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
operator|new
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
operator|new
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
argument_list|()
decl_stmt|;
name|JSONObject
name|command
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|getQlTable
argument_list|(
name|event
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|getQlTable
argument_list|(
name|event
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addCommandNameToCommand
argument_list|(
name|command
argument_list|,
name|DROP_TABLE_COMMAND
argument_list|)
expr_stmt|;
name|insertToDB
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|event
argument_list|,
name|command
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAlterTable
parameter_list|(
name|AlterTableEvent
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|logNoSuccess
argument_list|()
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|ReadEntity
argument_list|>
name|inputs
init|=
operator|new
name|HashSet
argument_list|<
name|ReadEntity
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|WriteEntity
argument_list|>
name|outputs
init|=
operator|new
name|HashSet
argument_list|<
name|WriteEntity
argument_list|>
argument_list|()
decl_stmt|;
name|JSONObject
name|command
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|inputs
operator|.
name|add
argument_list|(
operator|new
name|ReadEntity
argument_list|(
name|getQlTable
argument_list|(
name|event
operator|.
name|getOldTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|getQlTable
argument_list|(
name|event
operator|.
name|getOldTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|add
argument_list|(
operator|new
name|WriteEntity
argument_list|(
name|getQlTable
argument_list|(
name|event
operator|.
name|getNewTable
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addCommandNameToCommand
argument_list|(
name|command
argument_list|,
name|ALTER_TABLE_COMMAND
argument_list|)
expr_stmt|;
name|addTBaseToCommand
argument_list|(
name|command
argument_list|,
name|event
operator|.
name|getOldTable
argument_list|()
argument_list|,
name|OLD_TABLE
argument_list|)
expr_stmt|;
name|addTBaseToCommand
argument_list|(
name|command
argument_list|,
name|event
operator|.
name|getNewTable
argument_list|()
argument_list|,
name|NEW_TABLE
argument_list|)
expr_stmt|;
name|insertToDB
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
name|event
argument_list|,
name|command
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onLoadPartitionDone
parameter_list|(
name|LoadPartitionDoneEvent
name|lpe
parameter_list|)
throws|throws
name|MetaException
block|{   }
block|}
end_class

end_unit

