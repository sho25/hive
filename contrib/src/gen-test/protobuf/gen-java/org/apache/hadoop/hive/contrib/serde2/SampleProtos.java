begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Generated by the protocol buffer compiler.  DO NOT EDIT!
end_comment

begin_comment
comment|// source: SampleProtos.proto
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
package|;
end_package

begin_class
specifier|public
specifier|final
class|class
name|SampleProtos
block|{
specifier|private
name|SampleProtos
parameter_list|()
block|{}
specifier|public
specifier|static
name|void
name|registerAllExtensions
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistry
name|registry
parameter_list|)
block|{   }
specifier|public
interface|interface
name|MapFieldEntryOrBuilder
extends|extends
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageOrBuilder
block|{
comment|// optional string key = 1;
comment|/**      *<code>optional string key = 1;</code>      */
name|boolean
name|hasKey
parameter_list|()
function_decl|;
comment|/**      *<code>optional string key = 1;</code>      */
name|java
operator|.
name|lang
operator|.
name|String
name|getKey
parameter_list|()
function_decl|;
comment|/**      *<code>optional string key = 1;</code>      */
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getKeyBytes
parameter_list|()
function_decl|;
comment|// optional string value = 2;
comment|/**      *<code>optional string value = 2;</code>      */
name|boolean
name|hasValue
parameter_list|()
function_decl|;
comment|/**      *<code>optional string value = 2;</code>      */
name|java
operator|.
name|lang
operator|.
name|String
name|getValue
parameter_list|()
function_decl|;
comment|/**      *<code>optional string value = 2;</code>      */
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getValueBytes
parameter_list|()
function_decl|;
block|}
comment|/**    * Protobuf type {@code MapFieldEntry}    */
specifier|public
specifier|static
specifier|final
class|class
name|MapFieldEntry
extends|extends
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
implements|implements
name|MapFieldEntryOrBuilder
block|{
comment|// Use MapFieldEntry.newBuilder() to construct.
specifier|private
name|MapFieldEntry
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|Builder
argument_list|<
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|this
operator|.
name|unknownFields
operator|=
name|builder
operator|.
name|getUnknownFields
argument_list|()
expr_stmt|;
block|}
specifier|private
name|MapFieldEntry
parameter_list|(
name|boolean
name|noInit
parameter_list|)
block|{
name|this
operator|.
name|unknownFields
operator|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|MapFieldEntry
name|defaultInstance
decl_stmt|;
specifier|public
specifier|static
name|MapFieldEntry
name|getDefaultInstance
parameter_list|()
block|{
return|return
name|defaultInstance
return|;
block|}
specifier|public
name|MapFieldEntry
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|defaultInstance
return|;
block|}
specifier|private
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|unknownFields
return|;
block|}
specifier|private
name|MapFieldEntry
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
name|initFields
argument_list|()
expr_stmt|;
name|int
name|mutable_bitField0_
init|=
literal|0
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|Builder
name|unknownFields
init|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|tag
condition|)
block|{
case|case
literal|0
case|:
name|done
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
block|{
if|if
condition|(
operator|!
name|parseUnknownField
argument_list|(
name|input
argument_list|,
name|unknownFields
argument_list|,
name|extensionRegistry
argument_list|,
name|tag
argument_list|)
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|10
case|:
block|{
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|key_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|18
case|:
block|{
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|value_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|unknownFields
operator|=
name|unknownFields
operator|.
name|build
argument_list|()
expr_stmt|;
name|makeExtensionsImmutable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_MapFieldEntry_descriptor
return|;
block|}
specifier|protected
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_MapFieldEntry_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|MapFieldEntry
argument_list|>
name|PARSER
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractParser
argument_list|<
name|MapFieldEntry
argument_list|>
argument_list|()
block|{
specifier|public
name|MapFieldEntry
name|parsePartialFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|MapFieldEntry
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|MapFieldEntry
argument_list|>
name|getParserForType
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
comment|// optional string key = 1;
specifier|public
specifier|static
specifier|final
name|int
name|KEY_FIELD_NUMBER
init|=
literal|1
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|key_
decl_stmt|;
comment|/**      *<code>optional string key = 1;</code>      */
specifier|public
name|boolean
name|hasKey
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**      *<code>optional string key = 1;</code>      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getKey
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|key_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
else|else
block|{
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|key_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
comment|/**      *<code>optional string key = 1;</code>      */
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getKeyBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|key_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|key_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
comment|// optional string value = 2;
specifier|public
specifier|static
specifier|final
name|int
name|VALUE_FIELD_NUMBER
init|=
literal|2
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|value_
decl_stmt|;
comment|/**      *<code>optional string value = 2;</code>      */
specifier|public
name|boolean
name|hasValue
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**      *<code>optional string value = 2;</code>      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getValue
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|value_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
else|else
block|{
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|value_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
comment|/**      *<code>optional string value = 2;</code>      */
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getValueBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|value_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|value_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
specifier|private
name|void
name|initFields
parameter_list|()
block|{
name|key_
operator|=
literal|""
expr_stmt|;
name|value_
operator|=
literal|""
expr_stmt|;
block|}
specifier|private
name|byte
name|memoizedIsInitialized
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
name|byte
name|isInitialized
init|=
name|memoizedIsInitialized
decl_stmt|;
if|if
condition|(
name|isInitialized
operator|!=
operator|-
literal|1
condition|)
return|return
name|isInitialized
operator|==
literal|1
return|;
name|memoizedIsInitialized
operator|=
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|getSerializedSize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|1
argument_list|,
name|getKeyBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|2
argument_list|,
name|getValueBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getUnknownFields
argument_list|()
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|memoizedSerializedSize
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSerializedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
return|return
name|size
return|;
name|size
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|1
argument_list|,
name|getKeyBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|2
argument_list|,
name|getValueBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|size
operator|+=
name|getUnknownFields
argument_list|()
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
name|memoizedSerializedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|protected
name|java
operator|.
name|lang
operator|.
name|Object
name|writeReplace
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|ObjectStreamException
block|{
return|return
name|super
operator|.
name|writeReplace
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseDelimitedFrom
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseDelimitedFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
name|Builder
operator|.
name|create
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|newBuilderForType
parameter_list|()
block|{
return|return
name|newBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|prototype
parameter_list|)
block|{
return|return
name|newBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|prototype
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|toBuilder
parameter_list|()
block|{
return|return
name|newBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|protected
name|Builder
name|newBuilderForType
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Protobuf type {@code MapFieldEntry}      */
specifier|public
specifier|static
specifier|final
class|class
name|Builder
extends|extends
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
block|{
specifier|public
specifier|static
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_MapFieldEntry_descriptor
return|;
block|}
specifier|protected
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_MapFieldEntry_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
comment|// Construct using org.apache.hadoop.hive.contrib.serde2.SampleProtos.MapFieldEntry.newBuilder()
specifier|private
name|Builder
parameter_list|()
block|{
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Builder
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|maybeForceBuilderInitialization
parameter_list|()
block|{
if|if
condition|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|alwaysUseFieldBuilders
condition|)
block|{         }
block|}
specifier|private
specifier|static
name|Builder
name|create
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|key_
operator|=
literal|""
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|value_
operator|=
literal|""
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|clone
parameter_list|()
block|{
return|return
name|create
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|buildPartial
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_MapFieldEntry_descriptor
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|build
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|result
init|=
name|buildPartial
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|buildPartial
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|result
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|from_bitField0_
init|=
name|bitField0_
decl_stmt|;
name|int
name|to_bitField0_
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
name|result
operator|.
name|key_
operator|=
name|key_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000002
expr_stmt|;
block|}
name|result
operator|.
name|value_
operator|=
name|value_
expr_stmt|;
name|result
operator|.
name|bitField0_
operator|=
name|to_bitField0_
expr_stmt|;
name|onBuilt
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
condition|)
block|{
return|return
name|mergeFrom
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|)
name|other
argument_list|)
return|;
block|}
else|else
block|{
name|super
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|getDefaultInstance
argument_list|()
condition|)
return|return
name|this
return|;
if|if
condition|(
name|other
operator|.
name|hasKey
argument_list|()
condition|)
block|{
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|key_
operator|=
name|other
operator|.
name|key_
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasValue
argument_list|()
condition|)
block|{
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|value_
operator|=
name|other
operator|.
name|value_
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mergeUnknownFields
argument_list|(
name|other
operator|.
name|getUnknownFields
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|parsedMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedMessage
operator|=
name|PARSER
operator|.
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|parsedMessage
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|)
name|e
operator|.
name|getUnfinishedMessage
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parsedMessage
operator|!=
literal|null
condition|)
block|{
name|mergeFrom
argument_list|(
name|parsedMessage
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
comment|// optional string key = 1;
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|key_
init|=
literal|""
decl_stmt|;
comment|/**        *<code>optional string key = 1;</code>        */
specifier|public
name|boolean
name|hasKey
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**        *<code>optional string key = 1;</code>        */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getKey
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|key_
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
operator|)
condition|)
block|{
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
operator|(
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
operator|)
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
name|key_
operator|=
name|s
expr_stmt|;
return|return
name|s
return|;
block|}
else|else
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
block|}
comment|/**        *<code>optional string key = 1;</code>        */
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getKeyBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|key_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|String
condition|)
block|{
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|key_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
comment|/**        *<code>optional string key = 1;</code>        */
specifier|public
name|Builder
name|setKey
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|key_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional string key = 1;</code>        */
specifier|public
name|Builder
name|clearKey
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|key_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional string key = 1;</code>        */
specifier|public
name|Builder
name|setKeyBytes
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|key_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional string value = 2;
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|value_
init|=
literal|""
decl_stmt|;
comment|/**        *<code>optional string value = 2;</code>        */
specifier|public
name|boolean
name|hasValue
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**        *<code>optional string value = 2;</code>        */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getValue
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|value_
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
operator|)
condition|)
block|{
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
operator|(
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
operator|)
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
name|value_
operator|=
name|s
expr_stmt|;
return|return
name|s
return|;
block|}
else|else
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
block|}
comment|/**        *<code>optional string value = 2;</code>        */
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getValueBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|value_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|String
condition|)
block|{
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|value_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
comment|/**        *<code>optional string value = 2;</code>        */
specifier|public
name|Builder
name|setValue
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|value_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional string value = 2;</code>        */
specifier|public
name|Builder
name|clearValue
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|value_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional string value = 2;</code>        */
specifier|public
name|Builder
name|setValueBytes
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|value_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// @@protoc_insertion_point(builder_scope:MapFieldEntry)
block|}
static|static
block|{
name|defaultInstance
operator|=
operator|new
name|MapFieldEntry
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|defaultInstance
operator|.
name|initFields
argument_list|()
expr_stmt|;
block|}
comment|// @@protoc_insertion_point(class_scope:MapFieldEntry)
block|}
specifier|public
interface|interface
name|Mesg1OrBuilder
extends|extends
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageOrBuilder
block|{
comment|// repeated .MapFieldEntry anotherMap = 1;
comment|/**      *<code>repeated .MapFieldEntry anotherMap = 1;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|getAnotherMapList
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .MapFieldEntry anotherMap = 1;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|getAnotherMap
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**      *<code>repeated .MapFieldEntry anotherMap = 1;</code>      */
name|int
name|getAnotherMapCount
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .MapFieldEntry anotherMap = 1;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|getAnotherMapOrBuilderList
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .MapFieldEntry anotherMap = 1;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
name|getAnotherMapOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|// optional .MapFieldEntry noMap = 2;
comment|/**      *<code>optional .MapFieldEntry noMap = 2;</code>      */
name|boolean
name|hasNoMap
parameter_list|()
function_decl|;
comment|/**      *<code>optional .MapFieldEntry noMap = 2;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|getNoMap
parameter_list|()
function_decl|;
comment|/**      *<code>optional .MapFieldEntry noMap = 2;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
name|getNoMapOrBuilder
parameter_list|()
function_decl|;
comment|// repeated int32 intList = 3;
comment|/**      *<code>repeated int32 intList = 3;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|getIntListList
parameter_list|()
function_decl|;
comment|/**      *<code>repeated int32 intList = 3;</code>      */
name|int
name|getIntListCount
parameter_list|()
function_decl|;
comment|/**      *<code>repeated int32 intList = 3;</code>      */
name|int
name|getIntList
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
block|}
comment|/**    * Protobuf type {@code Mesg1}    */
specifier|public
specifier|static
specifier|final
class|class
name|Mesg1
extends|extends
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
implements|implements
name|Mesg1OrBuilder
block|{
comment|// Use Mesg1.newBuilder() to construct.
specifier|private
name|Mesg1
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|Builder
argument_list|<
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|this
operator|.
name|unknownFields
operator|=
name|builder
operator|.
name|getUnknownFields
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Mesg1
parameter_list|(
name|boolean
name|noInit
parameter_list|)
block|{
name|this
operator|.
name|unknownFields
operator|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Mesg1
name|defaultInstance
decl_stmt|;
specifier|public
specifier|static
name|Mesg1
name|getDefaultInstance
parameter_list|()
block|{
return|return
name|defaultInstance
return|;
block|}
specifier|public
name|Mesg1
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|defaultInstance
return|;
block|}
specifier|private
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|unknownFields
return|;
block|}
specifier|private
name|Mesg1
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
name|initFields
argument_list|()
expr_stmt|;
name|int
name|mutable_bitField0_
init|=
literal|0
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|Builder
name|unknownFields
init|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|tag
condition|)
block|{
case|case
literal|0
case|:
name|done
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
block|{
if|if
condition|(
operator|!
name|parseUnknownField
argument_list|(
name|input
argument_list|,
name|unknownFields
argument_list|,
name|extensionRegistry
argument_list|,
name|tag
argument_list|)
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|10
case|:
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|anotherMap_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
argument_list|()
expr_stmt|;
name|mutable_bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
name|anotherMap_
operator|.
name|add
argument_list|(
name|input
operator|.
name|readMessage
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|PARSER
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|18
case|:
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|subBuilder
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|subBuilder
operator|=
name|noMap_
operator|.
name|toBuilder
argument_list|()
expr_stmt|;
block|}
name|noMap_
operator|=
name|input
operator|.
name|readMessage
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|PARSER
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
if|if
condition|(
name|subBuilder
operator|!=
literal|null
condition|)
block|{
name|subBuilder
operator|.
name|mergeFrom
argument_list|(
name|noMap_
argument_list|)
expr_stmt|;
name|noMap_
operator|=
name|subBuilder
operator|.
name|buildPartial
argument_list|()
expr_stmt|;
block|}
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
break|break;
block|}
case|case
literal|24
case|:
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|intList_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|mutable_bitField0_
operator||=
literal|0x00000004
expr_stmt|;
block|}
name|intList_
operator|.
name|add
argument_list|(
name|input
operator|.
name|readInt32
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|26
case|:
block|{
name|int
name|length
init|=
name|input
operator|.
name|readRawVarint32
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|input
operator|.
name|pushLimit
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
operator|&&
name|input
operator|.
name|getBytesUntilLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|intList_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|mutable_bitField0_
operator||=
literal|0x00000004
expr_stmt|;
block|}
while|while
condition|(
name|input
operator|.
name|getBytesUntilLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|intList_
operator|.
name|add
argument_list|(
name|input
operator|.
name|readInt32
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|input
operator|.
name|popLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|anotherMap_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|anotherMap_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|intList_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|intList_
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|unknownFields
operator|=
name|unknownFields
operator|.
name|build
argument_list|()
expr_stmt|;
name|makeExtensionsImmutable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_Mesg1_descriptor
return|;
block|}
specifier|protected
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_Mesg1_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|Mesg1
argument_list|>
name|PARSER
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractParser
argument_list|<
name|Mesg1
argument_list|>
argument_list|()
block|{
specifier|public
name|Mesg1
name|parsePartialFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|Mesg1
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|Mesg1
argument_list|>
name|getParserForType
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
comment|// repeated .MapFieldEntry anotherMap = 1;
specifier|public
specifier|static
specifier|final
name|int
name|ANOTHERMAP_FIELD_NUMBER
init|=
literal|1
decl_stmt|;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|anotherMap_
decl_stmt|;
comment|/**      *<code>repeated .MapFieldEntry anotherMap = 1;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|getAnotherMapList
parameter_list|()
block|{
return|return
name|anotherMap_
return|;
block|}
comment|/**      *<code>repeated .MapFieldEntry anotherMap = 1;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|getAnotherMapOrBuilderList
parameter_list|()
block|{
return|return
name|anotherMap_
return|;
block|}
comment|/**      *<code>repeated .MapFieldEntry anotherMap = 1;</code>      */
specifier|public
name|int
name|getAnotherMapCount
parameter_list|()
block|{
return|return
name|anotherMap_
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      *<code>repeated .MapFieldEntry anotherMap = 1;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|getAnotherMap
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|anotherMap_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      *<code>repeated .MapFieldEntry anotherMap = 1;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
name|getAnotherMapOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|anotherMap_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|// optional .MapFieldEntry noMap = 2;
specifier|public
specifier|static
specifier|final
name|int
name|NOMAP_FIELD_NUMBER
init|=
literal|2
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|noMap_
decl_stmt|;
comment|/**      *<code>optional .MapFieldEntry noMap = 2;</code>      */
specifier|public
name|boolean
name|hasNoMap
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**      *<code>optional .MapFieldEntry noMap = 2;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|getNoMap
parameter_list|()
block|{
return|return
name|noMap_
return|;
block|}
comment|/**      *<code>optional .MapFieldEntry noMap = 2;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
name|getNoMapOrBuilder
parameter_list|()
block|{
return|return
name|noMap_
return|;
block|}
comment|// repeated int32 intList = 3;
specifier|public
specifier|static
specifier|final
name|int
name|INTLIST_FIELD_NUMBER
init|=
literal|3
decl_stmt|;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|intList_
decl_stmt|;
comment|/**      *<code>repeated int32 intList = 3;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|getIntListList
parameter_list|()
block|{
return|return
name|intList_
return|;
block|}
comment|/**      *<code>repeated int32 intList = 3;</code>      */
specifier|public
name|int
name|getIntListCount
parameter_list|()
block|{
return|return
name|intList_
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      *<code>repeated int32 intList = 3;</code>      */
specifier|public
name|int
name|getIntList
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|intList_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|private
name|void
name|initFields
parameter_list|()
block|{
name|anotherMap_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|noMap_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
name|intList_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
specifier|private
name|byte
name|memoizedIsInitialized
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
name|byte
name|isInitialized
init|=
name|memoizedIsInitialized
decl_stmt|;
if|if
condition|(
name|isInitialized
operator|!=
operator|-
literal|1
condition|)
return|return
name|isInitialized
operator|==
literal|1
return|;
name|memoizedIsInitialized
operator|=
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|getSerializedSize
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|anotherMap_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeMessage
argument_list|(
literal|1
argument_list|,
name|anotherMap_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|output
operator|.
name|writeMessage
argument_list|(
literal|2
argument_list|,
name|noMap_
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intList_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeInt32
argument_list|(
literal|3
argument_list|,
name|intList_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getUnknownFields
argument_list|()
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|memoizedSerializedSize
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSerializedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
return|return
name|size
return|;
name|size
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|anotherMap_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeMessageSize
argument_list|(
literal|1
argument_list|,
name|anotherMap_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeMessageSize
argument_list|(
literal|2
argument_list|,
name|noMap_
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|dataSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intList_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|dataSize
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeInt32SizeNoTag
argument_list|(
name|intList_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|size
operator|+=
name|dataSize
expr_stmt|;
name|size
operator|+=
literal|1
operator|*
name|getIntListList
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|size
operator|+=
name|getUnknownFields
argument_list|()
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
name|memoizedSerializedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|protected
name|java
operator|.
name|lang
operator|.
name|Object
name|writeReplace
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|ObjectStreamException
block|{
return|return
name|super
operator|.
name|writeReplace
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseDelimitedFrom
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseDelimitedFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
name|Builder
operator|.
name|create
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|newBuilderForType
parameter_list|()
block|{
return|return
name|newBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|prototype
parameter_list|)
block|{
return|return
name|newBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|prototype
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|toBuilder
parameter_list|()
block|{
return|return
name|newBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|protected
name|Builder
name|newBuilderForType
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Protobuf type {@code Mesg1}      */
specifier|public
specifier|static
specifier|final
class|class
name|Builder
extends|extends
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
block|{
specifier|public
specifier|static
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_Mesg1_descriptor
return|;
block|}
specifier|protected
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_Mesg1_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
comment|// Construct using org.apache.hadoop.hive.contrib.serde2.SampleProtos.Mesg1.newBuilder()
specifier|private
name|Builder
parameter_list|()
block|{
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Builder
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|maybeForceBuilderInitialization
parameter_list|()
block|{
if|if
condition|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|alwaysUseFieldBuilders
condition|)
block|{
name|getAnotherMapFieldBuilder
argument_list|()
expr_stmt|;
name|getNoMapFieldBuilder
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Builder
name|create
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
name|anotherMap_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
block|}
else|else
block|{
name|anotherMapBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|noMapBuilder_
operator|==
literal|null
condition|)
block|{
name|noMap_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|noMapBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|intList_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|clone
parameter_list|()
block|{
return|return
name|create
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|buildPartial
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_Mesg1_descriptor
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|build
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|result
init|=
name|buildPartial
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|buildPartial
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|result
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|from_bitField0_
init|=
name|bitField0_
decl_stmt|;
name|int
name|to_bitField0_
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|anotherMap_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|anotherMap_
argument_list|)
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
block|}
name|result
operator|.
name|anotherMap_
operator|=
name|anotherMap_
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|anotherMap_
operator|=
name|anotherMapBuilder_
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
if|if
condition|(
name|noMapBuilder_
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|noMap_
operator|=
name|noMap_
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|noMap_
operator|=
name|noMapBuilder_
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|intList_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|intList_
argument_list|)
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
block|}
name|result
operator|.
name|intList_
operator|=
name|intList_
expr_stmt|;
name|result
operator|.
name|bitField0_
operator|=
name|to_bitField0_
expr_stmt|;
name|onBuilt
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
condition|)
block|{
return|return
name|mergeFrom
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|)
name|other
argument_list|)
return|;
block|}
else|else
block|{
name|super
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|getDefaultInstance
argument_list|()
condition|)
return|return
name|this
return|;
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|anotherMap_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|anotherMap_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|anotherMap_
operator|=
name|other
operator|.
name|anotherMap_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
block|}
else|else
block|{
name|ensureAnotherMapIsMutable
argument_list|()
expr_stmt|;
name|anotherMap_
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|anotherMap_
argument_list|)
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|anotherMap_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|anotherMapBuilder_
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|anotherMapBuilder_
operator|=
literal|null
expr_stmt|;
name|anotherMap_
operator|=
name|other
operator|.
name|anotherMap_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|anotherMapBuilder_
operator|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|alwaysUseFieldBuilders
condition|?
name|getAnotherMapFieldBuilder
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
else|else
block|{
name|anotherMapBuilder_
operator|.
name|addAllMessages
argument_list|(
name|other
operator|.
name|anotherMap_
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|other
operator|.
name|hasNoMap
argument_list|()
condition|)
block|{
name|mergeNoMap
argument_list|(
name|other
operator|.
name|getNoMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|other
operator|.
name|intList_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|intList_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|intList_
operator|=
name|other
operator|.
name|intList_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
block|}
else|else
block|{
name|ensureIntListIsMutable
argument_list|()
expr_stmt|;
name|intList_
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|intList_
argument_list|)
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|mergeUnknownFields
argument_list|(
name|other
operator|.
name|getUnknownFields
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|parsedMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedMessage
operator|=
name|PARSER
operator|.
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|parsedMessage
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|)
name|e
operator|.
name|getUnfinishedMessage
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parsedMessage
operator|!=
literal|null
condition|)
block|{
name|mergeFrom
argument_list|(
name|parsedMessage
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
comment|// repeated .MapFieldEntry anotherMap = 1;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|anotherMap_
init|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|void
name|ensureAnotherMapIsMutable
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|anotherMap_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
argument_list|(
name|anotherMap_
argument_list|)
expr_stmt|;
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
block|}
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|anotherMapBuilder_
decl_stmt|;
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|getAnotherMapList
parameter_list|()
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|anotherMap_
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|anotherMapBuilder_
operator|.
name|getMessageList
argument_list|()
return|;
block|}
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|int
name|getAnotherMapCount
parameter_list|()
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|anotherMap_
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|anotherMapBuilder_
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|getAnotherMap
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|anotherMap_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|anotherMapBuilder_
operator|.
name|getMessage
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|Builder
name|setAnotherMap
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|value
parameter_list|)
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureAnotherMapIsMutable
argument_list|()
expr_stmt|;
name|anotherMap_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anotherMapBuilder_
operator|.
name|setMessage
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|Builder
name|setAnotherMap
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureAnotherMapIsMutable
argument_list|()
expr_stmt|;
name|anotherMap_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anotherMapBuilder_
operator|.
name|setMessage
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|Builder
name|addAnotherMap
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|value
parameter_list|)
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureAnotherMapIsMutable
argument_list|()
expr_stmt|;
name|anotherMap_
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anotherMapBuilder_
operator|.
name|addMessage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|Builder
name|addAnotherMap
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|value
parameter_list|)
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureAnotherMapIsMutable
argument_list|()
expr_stmt|;
name|anotherMap_
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anotherMapBuilder_
operator|.
name|addMessage
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|Builder
name|addAnotherMap
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureAnotherMapIsMutable
argument_list|()
expr_stmt|;
name|anotherMap_
operator|.
name|add
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anotherMapBuilder_
operator|.
name|addMessage
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|Builder
name|addAnotherMap
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureAnotherMapIsMutable
argument_list|()
expr_stmt|;
name|anotherMap_
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anotherMapBuilder_
operator|.
name|addMessage
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|Builder
name|addAllAnotherMap
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Iterable
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureAnotherMapIsMutable
argument_list|()
expr_stmt|;
name|super
operator|.
name|addAll
argument_list|(
name|values
argument_list|,
name|anotherMap_
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anotherMapBuilder_
operator|.
name|addAllMessages
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|Builder
name|clearAnotherMap
parameter_list|()
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
name|anotherMap_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anotherMapBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|Builder
name|removeAnotherMap
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureAnotherMapIsMutable
argument_list|()
expr_stmt|;
name|anotherMap_
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|anotherMapBuilder_
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|getAnotherMapBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getAnotherMapFieldBuilder
argument_list|()
operator|.
name|getBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
name|getAnotherMapOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|anotherMap_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|anotherMapBuilder_
operator|.
name|getMessageOrBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|getAnotherMapOrBuilderList
parameter_list|()
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|!=
literal|null
condition|)
block|{
return|return
name|anotherMapBuilder_
operator|.
name|getMessageOrBuilderList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|anotherMap_
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|addAnotherMapBuilder
parameter_list|()
block|{
return|return
name|getAnotherMapFieldBuilder
argument_list|()
operator|.
name|addBuilder
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|addAnotherMapBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getAnotherMapFieldBuilder
argument_list|()
operator|.
name|addBuilder
argument_list|(
name|index
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry anotherMap = 1;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
argument_list|>
name|getAnotherMapBuilderList
parameter_list|()
block|{
return|return
name|getAnotherMapFieldBuilder
argument_list|()
operator|.
name|getBuilderList
argument_list|()
return|;
block|}
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|getAnotherMapFieldBuilder
parameter_list|()
block|{
if|if
condition|(
name|anotherMapBuilder_
operator|==
literal|null
condition|)
block|{
name|anotherMapBuilder_
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
argument_list|(
name|anotherMap_
argument_list|,
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
argument_list|,
name|getParentForChildren
argument_list|()
argument_list|,
name|isClean
argument_list|()
argument_list|)
expr_stmt|;
name|anotherMap_
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|anotherMapBuilder_
return|;
block|}
comment|// optional .MapFieldEntry noMap = 2;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|noMap_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|SingleFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|noMapBuilder_
decl_stmt|;
comment|/**        *<code>optional .MapFieldEntry noMap = 2;</code>        */
specifier|public
name|boolean
name|hasNoMap
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**        *<code>optional .MapFieldEntry noMap = 2;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|getNoMap
parameter_list|()
block|{
if|if
condition|(
name|noMapBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|noMap_
return|;
block|}
else|else
block|{
return|return
name|noMapBuilder_
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
comment|/**        *<code>optional .MapFieldEntry noMap = 2;</code>        */
specifier|public
name|Builder
name|setNoMap
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|value
parameter_list|)
block|{
if|if
condition|(
name|noMapBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|noMap_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|noMapBuilder_
operator|.
name|setMessage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional .MapFieldEntry noMap = 2;</code>        */
specifier|public
name|Builder
name|setNoMap
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|noMapBuilder_
operator|==
literal|null
condition|)
block|{
name|noMap_
operator|=
name|builderForValue
operator|.
name|build
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|noMapBuilder_
operator|.
name|setMessage
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional .MapFieldEntry noMap = 2;</code>        */
specifier|public
name|Builder
name|mergeNoMap
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|value
parameter_list|)
block|{
if|if
condition|(
name|noMapBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
operator|&&
name|noMap_
operator|!=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|getDefaultInstance
argument_list|()
condition|)
block|{
name|noMap_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|newBuilder
argument_list|(
name|noMap_
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|value
argument_list|)
operator|.
name|buildPartial
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|noMap_
operator|=
name|value
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|noMapBuilder_
operator|.
name|mergeFrom
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional .MapFieldEntry noMap = 2;</code>        */
specifier|public
name|Builder
name|clearNoMap
parameter_list|()
block|{
if|if
condition|(
name|noMapBuilder_
operator|==
literal|null
condition|)
block|{
name|noMap_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|noMapBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional .MapFieldEntry noMap = 2;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|getNoMapBuilder
parameter_list|()
block|{
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|getNoMapFieldBuilder
argument_list|()
operator|.
name|getBuilder
argument_list|()
return|;
block|}
comment|/**        *<code>optional .MapFieldEntry noMap = 2;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
name|getNoMapOrBuilder
parameter_list|()
block|{
if|if
condition|(
name|noMapBuilder_
operator|!=
literal|null
condition|)
block|{
return|return
name|noMapBuilder_
operator|.
name|getMessageOrBuilder
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|noMap_
return|;
block|}
block|}
comment|/**        *<code>optional .MapFieldEntry noMap = 2;</code>        */
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|SingleFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|getNoMapFieldBuilder
parameter_list|()
block|{
if|if
condition|(
name|noMapBuilder_
operator|==
literal|null
condition|)
block|{
name|noMapBuilder_
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|SingleFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
argument_list|(
name|noMap_
argument_list|,
name|getParentForChildren
argument_list|()
argument_list|,
name|isClean
argument_list|()
argument_list|)
expr_stmt|;
name|noMap_
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|noMapBuilder_
return|;
block|}
comment|// repeated int32 intList = 3;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|intList_
init|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|void
name|ensureIntListIsMutable
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|intList_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
argument_list|(
name|intList_
argument_list|)
expr_stmt|;
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
block|}
block|}
comment|/**        *<code>repeated int32 intList = 3;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|getIntListList
parameter_list|()
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|intList_
argument_list|)
return|;
block|}
comment|/**        *<code>repeated int32 intList = 3;</code>        */
specifier|public
name|int
name|getIntListCount
parameter_list|()
block|{
return|return
name|intList_
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**        *<code>repeated int32 intList = 3;</code>        */
specifier|public
name|int
name|getIntList
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|intList_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**        *<code>repeated int32 intList = 3;</code>        */
specifier|public
name|Builder
name|setIntList
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|ensureIntListIsMutable
argument_list|()
expr_stmt|;
name|intList_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated int32 intList = 3;</code>        */
specifier|public
name|Builder
name|addIntList
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|ensureIntListIsMutable
argument_list|()
expr_stmt|;
name|intList_
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated int32 intList = 3;</code>        */
specifier|public
name|Builder
name|addAllIntList
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Iterable
argument_list|<
name|?
extends|extends
name|java
operator|.
name|lang
operator|.
name|Integer
argument_list|>
name|values
parameter_list|)
block|{
name|ensureIntListIsMutable
argument_list|()
expr_stmt|;
name|super
operator|.
name|addAll
argument_list|(
name|values
argument_list|,
name|intList_
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated int32 intList = 3;</code>        */
specifier|public
name|Builder
name|clearIntList
parameter_list|()
block|{
name|intList_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// @@protoc_insertion_point(builder_scope:Mesg1)
block|}
static|static
block|{
name|defaultInstance
operator|=
operator|new
name|Mesg1
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|defaultInstance
operator|.
name|initFields
argument_list|()
expr_stmt|;
block|}
comment|// @@protoc_insertion_point(class_scope:Mesg1)
block|}
specifier|public
interface|interface
name|AllTypesOrBuilder
extends|extends
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|MessageOrBuilder
block|{
comment|// optional double doubleType = 1;
comment|/**      *<code>optional double doubleType = 1;</code>      */
name|boolean
name|hasDoubleType
parameter_list|()
function_decl|;
comment|/**      *<code>optional double doubleType = 1;</code>      */
name|double
name|getDoubleType
parameter_list|()
function_decl|;
comment|// optional float floatType = 2;
comment|/**      *<code>optional float floatType = 2;</code>      */
name|boolean
name|hasFloatType
parameter_list|()
function_decl|;
comment|/**      *<code>optional float floatType = 2;</code>      */
name|float
name|getFloatType
parameter_list|()
function_decl|;
comment|// optional int32 int32Type = 3;
comment|/**      *<code>optional int32 int32Type = 3;</code>      */
name|boolean
name|hasInt32Type
parameter_list|()
function_decl|;
comment|/**      *<code>optional int32 int32Type = 3;</code>      */
name|int
name|getInt32Type
parameter_list|()
function_decl|;
comment|// optional int64 int64Type = 4;
comment|/**      *<code>optional int64 int64Type = 4;</code>      */
name|boolean
name|hasInt64Type
parameter_list|()
function_decl|;
comment|/**      *<code>optional int64 int64Type = 4;</code>      */
name|long
name|getInt64Type
parameter_list|()
function_decl|;
comment|// optional uint32 uint32Type = 5;
comment|/**      *<code>optional uint32 uint32Type = 5;</code>      */
name|boolean
name|hasUint32Type
parameter_list|()
function_decl|;
comment|/**      *<code>optional uint32 uint32Type = 5;</code>      */
name|int
name|getUint32Type
parameter_list|()
function_decl|;
comment|// optional uint64 uint64Type = 6;
comment|/**      *<code>optional uint64 uint64Type = 6;</code>      */
name|boolean
name|hasUint64Type
parameter_list|()
function_decl|;
comment|/**      *<code>optional uint64 uint64Type = 6;</code>      */
name|long
name|getUint64Type
parameter_list|()
function_decl|;
comment|// optional sint32 sint32Type = 7;
comment|/**      *<code>optional sint32 sint32Type = 7;</code>      */
name|boolean
name|hasSint32Type
parameter_list|()
function_decl|;
comment|/**      *<code>optional sint32 sint32Type = 7;</code>      */
name|int
name|getSint32Type
parameter_list|()
function_decl|;
comment|// optional sint64 sint64Type = 8;
comment|/**      *<code>optional sint64 sint64Type = 8;</code>      */
name|boolean
name|hasSint64Type
parameter_list|()
function_decl|;
comment|/**      *<code>optional sint64 sint64Type = 8;</code>      */
name|long
name|getSint64Type
parameter_list|()
function_decl|;
comment|// optional fixed32 fixed32Type = 9;
comment|/**      *<code>optional fixed32 fixed32Type = 9;</code>      */
name|boolean
name|hasFixed32Type
parameter_list|()
function_decl|;
comment|/**      *<code>optional fixed32 fixed32Type = 9;</code>      */
name|int
name|getFixed32Type
parameter_list|()
function_decl|;
comment|// optional fixed64 fixed64Type = 10;
comment|/**      *<code>optional fixed64 fixed64Type = 10;</code>      */
name|boolean
name|hasFixed64Type
parameter_list|()
function_decl|;
comment|/**      *<code>optional fixed64 fixed64Type = 10;</code>      */
name|long
name|getFixed64Type
parameter_list|()
function_decl|;
comment|// optional sfixed32 sfixed32Type = 11;
comment|/**      *<code>optional sfixed32 sfixed32Type = 11;</code>      */
name|boolean
name|hasSfixed32Type
parameter_list|()
function_decl|;
comment|/**      *<code>optional sfixed32 sfixed32Type = 11;</code>      */
name|int
name|getSfixed32Type
parameter_list|()
function_decl|;
comment|// optional sfixed64 sfixed64Type = 12;
comment|/**      *<code>optional sfixed64 sfixed64Type = 12;</code>      */
name|boolean
name|hasSfixed64Type
parameter_list|()
function_decl|;
comment|/**      *<code>optional sfixed64 sfixed64Type = 12;</code>      */
name|long
name|getSfixed64Type
parameter_list|()
function_decl|;
comment|// optional bool boolType = 13;
comment|/**      *<code>optional bool boolType = 13;</code>      */
name|boolean
name|hasBoolType
parameter_list|()
function_decl|;
comment|/**      *<code>optional bool boolType = 13;</code>      */
name|boolean
name|getBoolType
parameter_list|()
function_decl|;
comment|// optional string stringType = 14;
comment|/**      *<code>optional string stringType = 14;</code>      */
name|boolean
name|hasStringType
parameter_list|()
function_decl|;
comment|/**      *<code>optional string stringType = 14;</code>      */
name|java
operator|.
name|lang
operator|.
name|String
name|getStringType
parameter_list|()
function_decl|;
comment|/**      *<code>optional string stringType = 14;</code>      */
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getStringTypeBytes
parameter_list|()
function_decl|;
comment|// optional bytes bytesType = 15;
comment|/**      *<code>optional bytes bytesType = 15;</code>      */
name|boolean
name|hasBytesType
parameter_list|()
function_decl|;
comment|/**      *<code>optional bytes bytesType = 15;</code>      */
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getBytesType
parameter_list|()
function_decl|;
comment|// repeated .MapFieldEntry mapType = 16;
comment|/**      *<code>repeated .MapFieldEntry mapType = 16;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|getMapTypeList
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .MapFieldEntry mapType = 16;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|getMapType
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**      *<code>repeated .MapFieldEntry mapType = 16;</code>      */
name|int
name|getMapTypeCount
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .MapFieldEntry mapType = 16;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|getMapTypeOrBuilderList
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .MapFieldEntry mapType = 16;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
name|getMapTypeOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|// repeated string stringListType = 17;
comment|/**      *<code>repeated string stringListType = 17;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|getStringListTypeList
parameter_list|()
function_decl|;
comment|/**      *<code>repeated string stringListType = 17;</code>      */
name|int
name|getStringListTypeCount
parameter_list|()
function_decl|;
comment|/**      *<code>repeated string stringListType = 17;</code>      */
name|java
operator|.
name|lang
operator|.
name|String
name|getStringListType
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**      *<code>repeated string stringListType = 17;</code>      */
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getStringListTypeBytes
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|// optional .Mesg1 messageType = 18;
comment|/**      *<code>optional .Mesg1 messageType = 18;</code>      */
name|boolean
name|hasMessageType
parameter_list|()
function_decl|;
comment|/**      *<code>optional .Mesg1 messageType = 18;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|getMessageType
parameter_list|()
function_decl|;
comment|/**      *<code>optional .Mesg1 messageType = 18;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
name|getMessageTypeOrBuilder
parameter_list|()
function_decl|;
comment|// repeated .Mesg1 messageListType = 19;
comment|/**      *<code>repeated .Mesg1 messageListType = 19;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|>
name|getMessageListTypeList
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .Mesg1 messageListType = 19;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|getMessageListType
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**      *<code>repeated .Mesg1 messageListType = 19;</code>      */
name|int
name|getMessageListTypeCount
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .Mesg1 messageListType = 19;</code>      */
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
argument_list|>
name|getMessageListTypeOrBuilderList
parameter_list|()
function_decl|;
comment|/**      *<code>repeated .Mesg1 messageListType = 19;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
name|getMessageListTypeOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|// optional .AllTypes.Enum1 enumType = 20;
comment|/**      *<code>optional .AllTypes.Enum1 enumType = 20;</code>      */
name|boolean
name|hasEnumType
parameter_list|()
function_decl|;
comment|/**      *<code>optional .AllTypes.Enum1 enumType = 20;</code>      */
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
name|getEnumType
parameter_list|()
function_decl|;
block|}
comment|/**    * Protobuf type {@code AllTypes}    */
specifier|public
specifier|static
specifier|final
class|class
name|AllTypes
extends|extends
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
implements|implements
name|AllTypesOrBuilder
block|{
comment|// Use AllTypes.newBuilder() to construct.
specifier|private
name|AllTypes
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|Builder
argument_list|<
name|?
argument_list|>
name|builder
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|this
operator|.
name|unknownFields
operator|=
name|builder
operator|.
name|getUnknownFields
argument_list|()
expr_stmt|;
block|}
specifier|private
name|AllTypes
parameter_list|(
name|boolean
name|noInit
parameter_list|)
block|{
name|this
operator|.
name|unknownFields
operator|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|AllTypes
name|defaultInstance
decl_stmt|;
specifier|public
specifier|static
name|AllTypes
name|getDefaultInstance
parameter_list|()
block|{
return|return
name|defaultInstance
return|;
block|}
specifier|public
name|AllTypes
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|defaultInstance
return|;
block|}
specifier|private
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|unknownFields
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
name|getUnknownFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|unknownFields
return|;
block|}
specifier|private
name|AllTypes
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
name|initFields
argument_list|()
expr_stmt|;
name|int
name|mutable_bitField0_
init|=
literal|0
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|Builder
name|unknownFields
init|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnknownFieldSet
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|int
name|tag
init|=
name|input
operator|.
name|readTag
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|tag
condition|)
block|{
case|case
literal|0
case|:
name|done
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
block|{
if|if
condition|(
operator|!
name|parseUnknownField
argument_list|(
name|input
argument_list|,
name|unknownFields
argument_list|,
name|extensionRegistry
argument_list|,
name|tag
argument_list|)
condition|)
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|9
case|:
block|{
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|doubleType_
operator|=
name|input
operator|.
name|readDouble
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|21
case|:
block|{
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|floatType_
operator|=
name|input
operator|.
name|readFloat
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|24
case|:
block|{
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
name|int32Type_
operator|=
name|input
operator|.
name|readInt32
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|32
case|:
block|{
name|bitField0_
operator||=
literal|0x00000008
expr_stmt|;
name|int64Type_
operator|=
name|input
operator|.
name|readInt64
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|40
case|:
block|{
name|bitField0_
operator||=
literal|0x00000010
expr_stmt|;
name|uint32Type_
operator|=
name|input
operator|.
name|readUInt32
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|48
case|:
block|{
name|bitField0_
operator||=
literal|0x00000020
expr_stmt|;
name|uint64Type_
operator|=
name|input
operator|.
name|readUInt64
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|56
case|:
block|{
name|bitField0_
operator||=
literal|0x00000040
expr_stmt|;
name|sint32Type_
operator|=
name|input
operator|.
name|readSInt32
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|64
case|:
block|{
name|bitField0_
operator||=
literal|0x00000080
expr_stmt|;
name|sint64Type_
operator|=
name|input
operator|.
name|readSInt64
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|77
case|:
block|{
name|bitField0_
operator||=
literal|0x00000100
expr_stmt|;
name|fixed32Type_
operator|=
name|input
operator|.
name|readFixed32
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|81
case|:
block|{
name|bitField0_
operator||=
literal|0x00000200
expr_stmt|;
name|fixed64Type_
operator|=
name|input
operator|.
name|readFixed64
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|93
case|:
block|{
name|bitField0_
operator||=
literal|0x00000400
expr_stmt|;
name|sfixed32Type_
operator|=
name|input
operator|.
name|readSFixed32
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|97
case|:
block|{
name|bitField0_
operator||=
literal|0x00000800
expr_stmt|;
name|sfixed64Type_
operator|=
name|input
operator|.
name|readSFixed64
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|104
case|:
block|{
name|bitField0_
operator||=
literal|0x00001000
expr_stmt|;
name|boolType_
operator|=
name|input
operator|.
name|readBool
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|114
case|:
block|{
name|bitField0_
operator||=
literal|0x00002000
expr_stmt|;
name|stringType_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|122
case|:
block|{
name|bitField0_
operator||=
literal|0x00004000
expr_stmt|;
name|bytesType_
operator|=
name|input
operator|.
name|readBytes
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|130
case|:
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00008000
operator|)
operator|==
literal|0x00008000
operator|)
condition|)
block|{
name|mapType_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
argument_list|()
expr_stmt|;
name|mutable_bitField0_
operator||=
literal|0x00008000
expr_stmt|;
block|}
name|mapType_
operator|.
name|add
argument_list|(
name|input
operator|.
name|readMessage
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|PARSER
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|138
case|:
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00010000
operator|)
operator|==
literal|0x00010000
operator|)
condition|)
block|{
name|stringListType_
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
argument_list|()
expr_stmt|;
name|mutable_bitField0_
operator||=
literal|0x00010000
expr_stmt|;
block|}
name|stringListType_
operator|.
name|add
argument_list|(
name|input
operator|.
name|readBytes
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|146
case|:
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
name|subBuilder
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00008000
operator|)
operator|==
literal|0x00008000
operator|)
condition|)
block|{
name|subBuilder
operator|=
name|messageType_
operator|.
name|toBuilder
argument_list|()
expr_stmt|;
block|}
name|messageType_
operator|=
name|input
operator|.
name|readMessage
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|PARSER
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
if|if
condition|(
name|subBuilder
operator|!=
literal|null
condition|)
block|{
name|subBuilder
operator|.
name|mergeFrom
argument_list|(
name|messageType_
argument_list|)
expr_stmt|;
name|messageType_
operator|=
name|subBuilder
operator|.
name|buildPartial
argument_list|()
expr_stmt|;
block|}
name|bitField0_
operator||=
literal|0x00008000
expr_stmt|;
break|break;
block|}
case|case
literal|154
case|:
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00040000
operator|)
operator|==
literal|0x00040000
operator|)
condition|)
block|{
name|messageListType_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|>
argument_list|()
expr_stmt|;
name|mutable_bitField0_
operator||=
literal|0x00040000
expr_stmt|;
block|}
name|messageListType_
operator|.
name|add
argument_list|(
name|input
operator|.
name|readMessage
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|PARSER
argument_list|,
name|extensionRegistry
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|160
case|:
block|{
name|int
name|rawValue
init|=
name|input
operator|.
name|readEnum
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
name|value
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
operator|.
name|valueOf
argument_list|(
name|rawValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unknownFields
operator|.
name|mergeVarintField
argument_list|(
literal|20
argument_list|,
name|rawValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bitField0_
operator||=
literal|0x00010000
expr_stmt|;
name|enumType_
operator|=
name|value
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|setUnfinishedMessage
argument_list|(
name|this
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00008000
operator|)
operator|==
literal|0x00008000
operator|)
condition|)
block|{
name|mapType_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|mapType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00010000
operator|)
operator|==
literal|0x00010000
operator|)
condition|)
block|{
name|stringListType_
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnmodifiableLazyStringList
argument_list|(
name|stringListType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|mutable_bitField0_
operator|&
literal|0x00040000
operator|)
operator|==
literal|0x00040000
operator|)
condition|)
block|{
name|messageListType_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|messageListType_
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|unknownFields
operator|=
name|unknownFields
operator|.
name|build
argument_list|()
expr_stmt|;
name|makeExtensionsImmutable
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_AllTypes_descriptor
return|;
block|}
specifier|protected
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_AllTypes_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|AllTypes
argument_list|>
name|PARSER
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|AbstractParser
argument_list|<
name|AllTypes
argument_list|>
argument_list|()
block|{
specifier|public
name|AllTypes
name|parsePartialFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
operator|new
name|AllTypes
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Parser
argument_list|<
name|AllTypes
argument_list|>
name|getParserForType
parameter_list|()
block|{
return|return
name|PARSER
return|;
block|}
comment|/**      * Protobuf enum {@code AllTypes.Enum1}      */
specifier|public
enum|enum
name|Enum1
implements|implements
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ProtocolMessageEnum
block|{
comment|/**        *<code>VAL1 = 1;</code>        */
name|VAL1
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
block|,
comment|/**        *<code>VAL2 = 2;</code>        */
name|VAL2
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
block|,       ;
comment|/**        *<code>VAL1 = 1;</code>        */
specifier|public
specifier|static
specifier|final
name|int
name|VAL1_VALUE
init|=
literal|1
decl_stmt|;
comment|/**        *<code>VAL2 = 2;</code>        */
specifier|public
specifier|static
specifier|final
name|int
name|VAL2_VALUE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
name|int
name|getNumber
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|Enum1
name|valueOf
parameter_list|(
name|int
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|value
condition|)
block|{
case|case
literal|1
case|:
return|return
name|VAL1
return|;
case|case
literal|2
case|:
return|return
name|VAL2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|EnumLiteMap
argument_list|<
name|Enum1
argument_list|>
name|internalGetValueMap
parameter_list|()
block|{
return|return
name|internalValueMap
return|;
block|}
specifier|private
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|EnumLiteMap
argument_list|<
name|Enum1
argument_list|>
name|internalValueMap
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Internal
operator|.
name|EnumLiteMap
argument_list|<
name|Enum1
argument_list|>
argument_list|()
block|{
specifier|public
name|Enum1
name|findValueByNumber
parameter_list|(
name|int
name|number
parameter_list|)
block|{
return|return
name|Enum1
operator|.
name|valueOf
argument_list|(
name|number
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumValueDescriptor
name|getValueDescriptor
parameter_list|()
block|{
return|return
name|getDescriptor
argument_list|()
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumDescriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|getDescriptor
argument_list|()
return|;
block|}
specifier|public
specifier|static
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumDescriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getEnumTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Enum1
index|[]
name|VALUES
init|=
name|values
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|Enum1
name|valueOf
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|EnumValueDescriptor
name|desc
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|.
name|getType
argument_list|()
operator|!=
name|getDescriptor
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
argument_list|(
literal|"EnumValueDescriptor is not for this type."
argument_list|)
throw|;
block|}
return|return
name|VALUES
index|[
name|desc
operator|.
name|getIndex
argument_list|()
index|]
return|;
block|}
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
specifier|private
specifier|final
name|int
name|value
decl_stmt|;
specifier|private
name|Enum1
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|// @@protoc_insertion_point(enum_scope:AllTypes.Enum1)
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
comment|// optional double doubleType = 1;
specifier|public
specifier|static
specifier|final
name|int
name|DOUBLETYPE_FIELD_NUMBER
init|=
literal|1
decl_stmt|;
specifier|private
name|double
name|doubleType_
decl_stmt|;
comment|/**      *<code>optional double doubleType = 1;</code>      */
specifier|public
name|boolean
name|hasDoubleType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**      *<code>optional double doubleType = 1;</code>      */
specifier|public
name|double
name|getDoubleType
parameter_list|()
block|{
return|return
name|doubleType_
return|;
block|}
comment|// optional float floatType = 2;
specifier|public
specifier|static
specifier|final
name|int
name|FLOATTYPE_FIELD_NUMBER
init|=
literal|2
decl_stmt|;
specifier|private
name|float
name|floatType_
decl_stmt|;
comment|/**      *<code>optional float floatType = 2;</code>      */
specifier|public
name|boolean
name|hasFloatType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**      *<code>optional float floatType = 2;</code>      */
specifier|public
name|float
name|getFloatType
parameter_list|()
block|{
return|return
name|floatType_
return|;
block|}
comment|// optional int32 int32Type = 3;
specifier|public
specifier|static
specifier|final
name|int
name|INT32TYPE_FIELD_NUMBER
init|=
literal|3
decl_stmt|;
specifier|private
name|int
name|int32Type_
decl_stmt|;
comment|/**      *<code>optional int32 int32Type = 3;</code>      */
specifier|public
name|boolean
name|hasInt32Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
return|;
block|}
comment|/**      *<code>optional int32 int32Type = 3;</code>      */
specifier|public
name|int
name|getInt32Type
parameter_list|()
block|{
return|return
name|int32Type_
return|;
block|}
comment|// optional int64 int64Type = 4;
specifier|public
specifier|static
specifier|final
name|int
name|INT64TYPE_FIELD_NUMBER
init|=
literal|4
decl_stmt|;
specifier|private
name|long
name|int64Type_
decl_stmt|;
comment|/**      *<code>optional int64 int64Type = 4;</code>      */
specifier|public
name|boolean
name|hasInt64Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
return|;
block|}
comment|/**      *<code>optional int64 int64Type = 4;</code>      */
specifier|public
name|long
name|getInt64Type
parameter_list|()
block|{
return|return
name|int64Type_
return|;
block|}
comment|// optional uint32 uint32Type = 5;
specifier|public
specifier|static
specifier|final
name|int
name|UINT32TYPE_FIELD_NUMBER
init|=
literal|5
decl_stmt|;
specifier|private
name|int
name|uint32Type_
decl_stmt|;
comment|/**      *<code>optional uint32 uint32Type = 5;</code>      */
specifier|public
name|boolean
name|hasUint32Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
return|;
block|}
comment|/**      *<code>optional uint32 uint32Type = 5;</code>      */
specifier|public
name|int
name|getUint32Type
parameter_list|()
block|{
return|return
name|uint32Type_
return|;
block|}
comment|// optional uint64 uint64Type = 6;
specifier|public
specifier|static
specifier|final
name|int
name|UINT64TYPE_FIELD_NUMBER
init|=
literal|6
decl_stmt|;
specifier|private
name|long
name|uint64Type_
decl_stmt|;
comment|/**      *<code>optional uint64 uint64Type = 6;</code>      */
specifier|public
name|boolean
name|hasUint64Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
return|;
block|}
comment|/**      *<code>optional uint64 uint64Type = 6;</code>      */
specifier|public
name|long
name|getUint64Type
parameter_list|()
block|{
return|return
name|uint64Type_
return|;
block|}
comment|// optional sint32 sint32Type = 7;
specifier|public
specifier|static
specifier|final
name|int
name|SINT32TYPE_FIELD_NUMBER
init|=
literal|7
decl_stmt|;
specifier|private
name|int
name|sint32Type_
decl_stmt|;
comment|/**      *<code>optional sint32 sint32Type = 7;</code>      */
specifier|public
name|boolean
name|hasSint32Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
return|;
block|}
comment|/**      *<code>optional sint32 sint32Type = 7;</code>      */
specifier|public
name|int
name|getSint32Type
parameter_list|()
block|{
return|return
name|sint32Type_
return|;
block|}
comment|// optional sint64 sint64Type = 8;
specifier|public
specifier|static
specifier|final
name|int
name|SINT64TYPE_FIELD_NUMBER
init|=
literal|8
decl_stmt|;
specifier|private
name|long
name|sint64Type_
decl_stmt|;
comment|/**      *<code>optional sint64 sint64Type = 8;</code>      */
specifier|public
name|boolean
name|hasSint64Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000080
operator|)
operator|==
literal|0x00000080
operator|)
return|;
block|}
comment|/**      *<code>optional sint64 sint64Type = 8;</code>      */
specifier|public
name|long
name|getSint64Type
parameter_list|()
block|{
return|return
name|sint64Type_
return|;
block|}
comment|// optional fixed32 fixed32Type = 9;
specifier|public
specifier|static
specifier|final
name|int
name|FIXED32TYPE_FIELD_NUMBER
init|=
literal|9
decl_stmt|;
specifier|private
name|int
name|fixed32Type_
decl_stmt|;
comment|/**      *<code>optional fixed32 fixed32Type = 9;</code>      */
specifier|public
name|boolean
name|hasFixed32Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000100
operator|)
operator|==
literal|0x00000100
operator|)
return|;
block|}
comment|/**      *<code>optional fixed32 fixed32Type = 9;</code>      */
specifier|public
name|int
name|getFixed32Type
parameter_list|()
block|{
return|return
name|fixed32Type_
return|;
block|}
comment|// optional fixed64 fixed64Type = 10;
specifier|public
specifier|static
specifier|final
name|int
name|FIXED64TYPE_FIELD_NUMBER
init|=
literal|10
decl_stmt|;
specifier|private
name|long
name|fixed64Type_
decl_stmt|;
comment|/**      *<code>optional fixed64 fixed64Type = 10;</code>      */
specifier|public
name|boolean
name|hasFixed64Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000200
operator|)
operator|==
literal|0x00000200
operator|)
return|;
block|}
comment|/**      *<code>optional fixed64 fixed64Type = 10;</code>      */
specifier|public
name|long
name|getFixed64Type
parameter_list|()
block|{
return|return
name|fixed64Type_
return|;
block|}
comment|// optional sfixed32 sfixed32Type = 11;
specifier|public
specifier|static
specifier|final
name|int
name|SFIXED32TYPE_FIELD_NUMBER
init|=
literal|11
decl_stmt|;
specifier|private
name|int
name|sfixed32Type_
decl_stmt|;
comment|/**      *<code>optional sfixed32 sfixed32Type = 11;</code>      */
specifier|public
name|boolean
name|hasSfixed32Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000400
operator|)
operator|==
literal|0x00000400
operator|)
return|;
block|}
comment|/**      *<code>optional sfixed32 sfixed32Type = 11;</code>      */
specifier|public
name|int
name|getSfixed32Type
parameter_list|()
block|{
return|return
name|sfixed32Type_
return|;
block|}
comment|// optional sfixed64 sfixed64Type = 12;
specifier|public
specifier|static
specifier|final
name|int
name|SFIXED64TYPE_FIELD_NUMBER
init|=
literal|12
decl_stmt|;
specifier|private
name|long
name|sfixed64Type_
decl_stmt|;
comment|/**      *<code>optional sfixed64 sfixed64Type = 12;</code>      */
specifier|public
name|boolean
name|hasSfixed64Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000800
operator|)
operator|==
literal|0x00000800
operator|)
return|;
block|}
comment|/**      *<code>optional sfixed64 sfixed64Type = 12;</code>      */
specifier|public
name|long
name|getSfixed64Type
parameter_list|()
block|{
return|return
name|sfixed64Type_
return|;
block|}
comment|// optional bool boolType = 13;
specifier|public
specifier|static
specifier|final
name|int
name|BOOLTYPE_FIELD_NUMBER
init|=
literal|13
decl_stmt|;
specifier|private
name|boolean
name|boolType_
decl_stmt|;
comment|/**      *<code>optional bool boolType = 13;</code>      */
specifier|public
name|boolean
name|hasBoolType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00001000
operator|)
operator|==
literal|0x00001000
operator|)
return|;
block|}
comment|/**      *<code>optional bool boolType = 13;</code>      */
specifier|public
name|boolean
name|getBoolType
parameter_list|()
block|{
return|return
name|boolType_
return|;
block|}
comment|// optional string stringType = 14;
specifier|public
specifier|static
specifier|final
name|int
name|STRINGTYPE_FIELD_NUMBER
init|=
literal|14
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|stringType_
decl_stmt|;
comment|/**      *<code>optional string stringType = 14;</code>      */
specifier|public
name|boolean
name|hasStringType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00002000
operator|)
operator|==
literal|0x00002000
operator|)
return|;
block|}
comment|/**      *<code>optional string stringType = 14;</code>      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getStringType
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|stringType_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
else|else
block|{
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bs
init|=
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
name|bs
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|isValidUtf8
argument_list|()
condition|)
block|{
name|stringType_
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
block|}
comment|/**      *<code>optional string stringType = 14;</code>      */
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getStringTypeBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|stringType_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
condition|)
block|{
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|stringType_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
comment|// optional bytes bytesType = 15;
specifier|public
specifier|static
specifier|final
name|int
name|BYTESTYPE_FIELD_NUMBER
init|=
literal|15
decl_stmt|;
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bytesType_
decl_stmt|;
comment|/**      *<code>optional bytes bytesType = 15;</code>      */
specifier|public
name|boolean
name|hasBytesType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00004000
operator|)
operator|==
literal|0x00004000
operator|)
return|;
block|}
comment|/**      *<code>optional bytes bytesType = 15;</code>      */
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getBytesType
parameter_list|()
block|{
return|return
name|bytesType_
return|;
block|}
comment|// repeated .MapFieldEntry mapType = 16;
specifier|public
specifier|static
specifier|final
name|int
name|MAPTYPE_FIELD_NUMBER
init|=
literal|16
decl_stmt|;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|mapType_
decl_stmt|;
comment|/**      *<code>repeated .MapFieldEntry mapType = 16;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|getMapTypeList
parameter_list|()
block|{
return|return
name|mapType_
return|;
block|}
comment|/**      *<code>repeated .MapFieldEntry mapType = 16;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|getMapTypeOrBuilderList
parameter_list|()
block|{
return|return
name|mapType_
return|;
block|}
comment|/**      *<code>repeated .MapFieldEntry mapType = 16;</code>      */
specifier|public
name|int
name|getMapTypeCount
parameter_list|()
block|{
return|return
name|mapType_
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      *<code>repeated .MapFieldEntry mapType = 16;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|getMapType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|mapType_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      *<code>repeated .MapFieldEntry mapType = 16;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
name|getMapTypeOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|mapType_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|// repeated string stringListType = 17;
specifier|public
specifier|static
specifier|final
name|int
name|STRINGLISTTYPE_FIELD_NUMBER
init|=
literal|17
decl_stmt|;
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringList
name|stringListType_
decl_stmt|;
comment|/**      *<code>repeated string stringListType = 17;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|getStringListTypeList
parameter_list|()
block|{
return|return
name|stringListType_
return|;
block|}
comment|/**      *<code>repeated string stringListType = 17;</code>      */
specifier|public
name|int
name|getStringListTypeCount
parameter_list|()
block|{
return|return
name|stringListType_
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      *<code>repeated string stringListType = 17;</code>      */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getStringListType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|stringListType_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      *<code>repeated string stringListType = 17;</code>      */
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getStringListTypeBytes
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|stringListType_
operator|.
name|getByteString
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|// optional .Mesg1 messageType = 18;
specifier|public
specifier|static
specifier|final
name|int
name|MESSAGETYPE_FIELD_NUMBER
init|=
literal|18
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|messageType_
decl_stmt|;
comment|/**      *<code>optional .Mesg1 messageType = 18;</code>      */
specifier|public
name|boolean
name|hasMessageType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00008000
operator|)
operator|==
literal|0x00008000
operator|)
return|;
block|}
comment|/**      *<code>optional .Mesg1 messageType = 18;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|getMessageType
parameter_list|()
block|{
return|return
name|messageType_
return|;
block|}
comment|/**      *<code>optional .Mesg1 messageType = 18;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
name|getMessageTypeOrBuilder
parameter_list|()
block|{
return|return
name|messageType_
return|;
block|}
comment|// repeated .Mesg1 messageListType = 19;
specifier|public
specifier|static
specifier|final
name|int
name|MESSAGELISTTYPE_FIELD_NUMBER
init|=
literal|19
decl_stmt|;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|>
name|messageListType_
decl_stmt|;
comment|/**      *<code>repeated .Mesg1 messageListType = 19;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|>
name|getMessageListTypeList
parameter_list|()
block|{
return|return
name|messageListType_
return|;
block|}
comment|/**      *<code>repeated .Mesg1 messageListType = 19;</code>      */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
argument_list|>
name|getMessageListTypeOrBuilderList
parameter_list|()
block|{
return|return
name|messageListType_
return|;
block|}
comment|/**      *<code>repeated .Mesg1 messageListType = 19;</code>      */
specifier|public
name|int
name|getMessageListTypeCount
parameter_list|()
block|{
return|return
name|messageListType_
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      *<code>repeated .Mesg1 messageListType = 19;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|getMessageListType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|messageListType_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      *<code>repeated .Mesg1 messageListType = 19;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
name|getMessageListTypeOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|messageListType_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|// optional .AllTypes.Enum1 enumType = 20;
specifier|public
specifier|static
specifier|final
name|int
name|ENUMTYPE_FIELD_NUMBER
init|=
literal|20
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
name|enumType_
decl_stmt|;
comment|/**      *<code>optional .AllTypes.Enum1 enumType = 20;</code>      */
specifier|public
name|boolean
name|hasEnumType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00010000
operator|)
operator|==
literal|0x00010000
operator|)
return|;
block|}
comment|/**      *<code>optional .AllTypes.Enum1 enumType = 20;</code>      */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
name|getEnumType
parameter_list|()
block|{
return|return
name|enumType_
return|;
block|}
specifier|private
name|void
name|initFields
parameter_list|()
block|{
name|doubleType_
operator|=
literal|0D
expr_stmt|;
name|floatType_
operator|=
literal|0F
expr_stmt|;
name|int32Type_
operator|=
literal|0
expr_stmt|;
name|int64Type_
operator|=
literal|0L
expr_stmt|;
name|uint32Type_
operator|=
literal|0
expr_stmt|;
name|uint64Type_
operator|=
literal|0L
expr_stmt|;
name|sint32Type_
operator|=
literal|0
expr_stmt|;
name|sint64Type_
operator|=
literal|0L
expr_stmt|;
name|fixed32Type_
operator|=
literal|0
expr_stmt|;
name|fixed64Type_
operator|=
literal|0L
expr_stmt|;
name|sfixed32Type_
operator|=
literal|0
expr_stmt|;
name|sfixed64Type_
operator|=
literal|0L
expr_stmt|;
name|boolType_
operator|=
literal|false
expr_stmt|;
name|stringType_
operator|=
literal|""
expr_stmt|;
name|bytesType_
operator|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|mapType_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|stringListType_
operator|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
operator|.
name|EMPTY
expr_stmt|;
name|messageType_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
name|messageListType_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|enumType_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
operator|.
name|VAL1
expr_stmt|;
block|}
specifier|private
name|byte
name|memoizedIsInitialized
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
name|byte
name|isInitialized
init|=
name|memoizedIsInitialized
decl_stmt|;
if|if
condition|(
name|isInitialized
operator|!=
operator|-
literal|1
condition|)
return|return
name|isInitialized
operator|==
literal|1
return|;
name|memoizedIsInitialized
operator|=
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
name|output
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|getSerializedSize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|output
operator|.
name|writeDouble
argument_list|(
literal|1
argument_list|,
name|doubleType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|output
operator|.
name|writeFloat
argument_list|(
literal|2
argument_list|,
name|floatType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|output
operator|.
name|writeInt32
argument_list|(
literal|3
argument_list|,
name|int32Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
condition|)
block|{
name|output
operator|.
name|writeInt64
argument_list|(
literal|4
argument_list|,
name|int64Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
condition|)
block|{
name|output
operator|.
name|writeUInt32
argument_list|(
literal|5
argument_list|,
name|uint32Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
condition|)
block|{
name|output
operator|.
name|writeUInt64
argument_list|(
literal|6
argument_list|,
name|uint64Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
condition|)
block|{
name|output
operator|.
name|writeSInt32
argument_list|(
literal|7
argument_list|,
name|sint32Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000080
operator|)
operator|==
literal|0x00000080
operator|)
condition|)
block|{
name|output
operator|.
name|writeSInt64
argument_list|(
literal|8
argument_list|,
name|sint64Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000100
operator|)
operator|==
literal|0x00000100
operator|)
condition|)
block|{
name|output
operator|.
name|writeFixed32
argument_list|(
literal|9
argument_list|,
name|fixed32Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000200
operator|)
operator|==
literal|0x00000200
operator|)
condition|)
block|{
name|output
operator|.
name|writeFixed64
argument_list|(
literal|10
argument_list|,
name|fixed64Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000400
operator|)
operator|==
literal|0x00000400
operator|)
condition|)
block|{
name|output
operator|.
name|writeSFixed32
argument_list|(
literal|11
argument_list|,
name|sfixed32Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000800
operator|)
operator|==
literal|0x00000800
operator|)
condition|)
block|{
name|output
operator|.
name|writeSFixed64
argument_list|(
literal|12
argument_list|,
name|sfixed64Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00001000
operator|)
operator|==
literal|0x00001000
operator|)
condition|)
block|{
name|output
operator|.
name|writeBool
argument_list|(
literal|13
argument_list|,
name|boolType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00002000
operator|)
operator|==
literal|0x00002000
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|14
argument_list|,
name|getStringTypeBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00004000
operator|)
operator|==
literal|0x00004000
operator|)
condition|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|15
argument_list|,
name|bytesType_
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapType_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeMessage
argument_list|(
literal|16
argument_list|,
name|mapType_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stringListType_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeBytes
argument_list|(
literal|17
argument_list|,
name|stringListType_
operator|.
name|getByteString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00008000
operator|)
operator|==
literal|0x00008000
operator|)
condition|)
block|{
name|output
operator|.
name|writeMessage
argument_list|(
literal|18
argument_list|,
name|messageType_
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageListType_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeMessage
argument_list|(
literal|19
argument_list|,
name|messageListType_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00010000
operator|)
operator|==
literal|0x00010000
operator|)
condition|)
block|{
name|output
operator|.
name|writeEnum
argument_list|(
literal|20
argument_list|,
name|enumType_
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getUnknownFields
argument_list|()
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|memoizedSerializedSize
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|int
name|getSerializedSize
parameter_list|()
block|{
name|int
name|size
init|=
name|memoizedSerializedSize
decl_stmt|;
if|if
condition|(
name|size
operator|!=
operator|-
literal|1
condition|)
return|return
name|size
return|;
name|size
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeDoubleSize
argument_list|(
literal|1
argument_list|,
name|doubleType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeFloatSize
argument_list|(
literal|2
argument_list|,
name|floatType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeInt32Size
argument_list|(
literal|3
argument_list|,
name|int32Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeInt64Size
argument_list|(
literal|4
argument_list|,
name|int64Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeUInt32Size
argument_list|(
literal|5
argument_list|,
name|uint32Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeUInt64Size
argument_list|(
literal|6
argument_list|,
name|uint64Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeSInt32Size
argument_list|(
literal|7
argument_list|,
name|sint32Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000080
operator|)
operator|==
literal|0x00000080
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeSInt64Size
argument_list|(
literal|8
argument_list|,
name|sint64Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000100
operator|)
operator|==
literal|0x00000100
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeFixed32Size
argument_list|(
literal|9
argument_list|,
name|fixed32Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000200
operator|)
operator|==
literal|0x00000200
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeFixed64Size
argument_list|(
literal|10
argument_list|,
name|fixed64Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000400
operator|)
operator|==
literal|0x00000400
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeSFixed32Size
argument_list|(
literal|11
argument_list|,
name|sfixed32Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000800
operator|)
operator|==
literal|0x00000800
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeSFixed64Size
argument_list|(
literal|12
argument_list|,
name|sfixed64Type_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00001000
operator|)
operator|==
literal|0x00001000
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBoolSize
argument_list|(
literal|13
argument_list|,
name|boolType_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00002000
operator|)
operator|==
literal|0x00002000
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|14
argument_list|,
name|getStringTypeBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00004000
operator|)
operator|==
literal|0x00004000
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSize
argument_list|(
literal|15
argument_list|,
name|bytesType_
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapType_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeMessageSize
argument_list|(
literal|16
argument_list|,
name|mapType_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|dataSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stringListType_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|dataSize
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeBytesSizeNoTag
argument_list|(
name|stringListType_
operator|.
name|getByteString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|size
operator|+=
name|dataSize
expr_stmt|;
name|size
operator|+=
literal|2
operator|*
name|getStringListTypeList
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00008000
operator|)
operator|==
literal|0x00008000
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeMessageSize
argument_list|(
literal|18
argument_list|,
name|messageType_
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageListType_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeMessageSize
argument_list|(
literal|19
argument_list|,
name|messageListType_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00010000
operator|)
operator|==
literal|0x00010000
operator|)
condition|)
block|{
name|size
operator|+=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
operator|.
name|computeEnumSize
argument_list|(
literal|20
argument_list|,
name|enumType_
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|size
operator|+=
name|getUnknownFields
argument_list|()
operator|.
name|getSerializedSize
argument_list|()
expr_stmt|;
name|memoizedSerializedSize
operator|=
name|size
expr_stmt|;
return|return
name|size
return|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0L
decl_stmt|;
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|protected
name|java
operator|.
name|lang
operator|.
name|Object
name|writeReplace
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|ObjectStreamException
block|{
return|return
name|super
operator|.
name|writeReplace
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|data
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|parseFrom
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|parseFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseDelimitedFrom
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|parseDelimitedFrom
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseDelimitedFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|parseFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|PARSER
operator|.
name|parseFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
name|Builder
operator|.
name|create
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|newBuilderForType
parameter_list|()
block|{
return|return
name|newBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|prototype
parameter_list|)
block|{
return|return
name|newBuilder
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|prototype
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|toBuilder
parameter_list|()
block|{
return|return
name|newBuilder
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|java
operator|.
name|lang
operator|.
name|Override
specifier|protected
name|Builder
name|newBuilderForType
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|Builder
name|builder
init|=
operator|new
name|Builder
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Protobuf type {@code AllTypes}      */
specifier|public
specifier|static
specifier|final
class|class
name|Builder
extends|extends
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|Builder
argument_list|<
name|Builder
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypesOrBuilder
block|{
specifier|public
specifier|static
specifier|final
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_AllTypes_descriptor
return|;
block|}
specifier|protected
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
name|internalGetFieldAccessorTable
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_AllTypes_fieldAccessorTable
operator|.
name|ensureFieldAccessorsInitialized
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Builder
operator|.
name|class
argument_list|)
return|;
block|}
comment|// Construct using org.apache.hadoop.hive.contrib.serde2.SampleProtos.AllTypes.newBuilder()
specifier|private
name|Builder
parameter_list|()
block|{
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Builder
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|BuilderParent
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|maybeForceBuilderInitialization
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|maybeForceBuilderInitialization
parameter_list|()
block|{
if|if
condition|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|alwaysUseFieldBuilders
condition|)
block|{
name|getMapTypeFieldBuilder
argument_list|()
expr_stmt|;
name|getMessageTypeFieldBuilder
argument_list|()
expr_stmt|;
name|getMessageListTypeFieldBuilder
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Builder
name|create
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|doubleType_
operator|=
literal|0D
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|floatType_
operator|=
literal|0F
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|int32Type_
operator|=
literal|0
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
name|int64Type_
operator|=
literal|0L
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000008
operator|)
expr_stmt|;
name|uint32Type_
operator|=
literal|0
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000010
operator|)
expr_stmt|;
name|uint64Type_
operator|=
literal|0L
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000020
operator|)
expr_stmt|;
name|sint32Type_
operator|=
literal|0
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000040
operator|)
expr_stmt|;
name|sint64Type_
operator|=
literal|0L
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000080
operator|)
expr_stmt|;
name|fixed32Type_
operator|=
literal|0
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000100
operator|)
expr_stmt|;
name|fixed64Type_
operator|=
literal|0L
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000200
operator|)
expr_stmt|;
name|sfixed32Type_
operator|=
literal|0
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000400
operator|)
expr_stmt|;
name|sfixed64Type_
operator|=
literal|0L
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000800
operator|)
expr_stmt|;
name|boolType_
operator|=
literal|false
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00001000
operator|)
expr_stmt|;
name|stringType_
operator|=
literal|""
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00002000
operator|)
expr_stmt|;
name|bytesType_
operator|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00004000
operator|)
expr_stmt|;
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|mapType_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00008000
operator|)
expr_stmt|;
block|}
else|else
block|{
name|mapTypeBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|stringListType_
operator|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00010000
operator|)
expr_stmt|;
if|if
condition|(
name|messageTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|messageType_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageTypeBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00020000
operator|)
expr_stmt|;
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|messageListType_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00040000
operator|)
expr_stmt|;
block|}
else|else
block|{
name|messageListTypeBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|enumType_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
operator|.
name|VAL1
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00080000
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|clone
parameter_list|()
block|{
return|return
name|create
argument_list|()
operator|.
name|mergeFrom
argument_list|(
name|buildPartial
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|internal_static_AllTypes_descriptor
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|getDefaultInstanceForType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|getDefaultInstance
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|build
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|result
init|=
name|buildPartial
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
throw|throw
name|newUninitializedMessageException
argument_list|(
name|result
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|buildPartial
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|result
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|from_bitField0_
init|=
name|bitField0_
decl_stmt|;
name|int
name|to_bitField0_
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000001
expr_stmt|;
block|}
name|result
operator|.
name|doubleType_
operator|=
name|doubleType_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000002
expr_stmt|;
block|}
name|result
operator|.
name|floatType_
operator|=
name|floatType_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000004
expr_stmt|;
block|}
name|result
operator|.
name|int32Type_
operator|=
name|int32Type_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000008
expr_stmt|;
block|}
name|result
operator|.
name|int64Type_
operator|=
name|int64Type_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000010
expr_stmt|;
block|}
name|result
operator|.
name|uint32Type_
operator|=
name|uint32Type_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000020
expr_stmt|;
block|}
name|result
operator|.
name|uint64Type_
operator|=
name|uint64Type_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000040
expr_stmt|;
block|}
name|result
operator|.
name|sint32Type_
operator|=
name|sint32Type_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000080
operator|)
operator|==
literal|0x00000080
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000080
expr_stmt|;
block|}
name|result
operator|.
name|sint64Type_
operator|=
name|sint64Type_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000100
operator|)
operator|==
literal|0x00000100
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000100
expr_stmt|;
block|}
name|result
operator|.
name|fixed32Type_
operator|=
name|fixed32Type_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000200
operator|)
operator|==
literal|0x00000200
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000200
expr_stmt|;
block|}
name|result
operator|.
name|fixed64Type_
operator|=
name|fixed64Type_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000400
operator|)
operator|==
literal|0x00000400
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000400
expr_stmt|;
block|}
name|result
operator|.
name|sfixed32Type_
operator|=
name|sfixed32Type_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00000800
operator|)
operator|==
literal|0x00000800
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00000800
expr_stmt|;
block|}
name|result
operator|.
name|sfixed64Type_
operator|=
name|sfixed64Type_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00001000
operator|)
operator|==
literal|0x00001000
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00001000
expr_stmt|;
block|}
name|result
operator|.
name|boolType_
operator|=
name|boolType_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00002000
operator|)
operator|==
literal|0x00002000
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00002000
expr_stmt|;
block|}
name|result
operator|.
name|stringType_
operator|=
name|stringType_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00004000
operator|)
operator|==
literal|0x00004000
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00004000
expr_stmt|;
block|}
name|result
operator|.
name|bytesType_
operator|=
name|bytesType_
expr_stmt|;
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00008000
operator|)
operator|==
literal|0x00008000
operator|)
condition|)
block|{
name|mapType_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|mapType_
argument_list|)
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00008000
operator|)
expr_stmt|;
block|}
name|result
operator|.
name|mapType_
operator|=
name|mapType_
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|mapType_
operator|=
name|mapTypeBuilder_
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00010000
operator|)
operator|==
literal|0x00010000
operator|)
condition|)
block|{
name|stringListType_
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnmodifiableLazyStringList
argument_list|(
name|stringListType_
argument_list|)
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00010000
operator|)
expr_stmt|;
block|}
name|result
operator|.
name|stringListType_
operator|=
name|stringListType_
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00020000
operator|)
operator|==
literal|0x00020000
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00008000
expr_stmt|;
block|}
if|if
condition|(
name|messageTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|messageType_
operator|=
name|messageType_
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|messageType_
operator|=
name|messageTypeBuilder_
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00040000
operator|)
operator|==
literal|0x00040000
operator|)
condition|)
block|{
name|messageListType_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|messageListType_
argument_list|)
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00040000
operator|)
expr_stmt|;
block|}
name|result
operator|.
name|messageListType_
operator|=
name|messageListType_
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|messageListType_
operator|=
name|messageListTypeBuilder_
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|from_bitField0_
operator|&
literal|0x00080000
operator|)
operator|==
literal|0x00080000
operator|)
condition|)
block|{
name|to_bitField0_
operator||=
literal|0x00010000
expr_stmt|;
block|}
name|result
operator|.
name|enumType_
operator|=
name|enumType_
expr_stmt|;
name|result
operator|.
name|bitField0_
operator|=
name|to_bitField0_
expr_stmt|;
name|onBuilt
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
condition|)
block|{
return|return
name|mergeFrom
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|)
name|other
argument_list|)
return|;
block|}
else|else
block|{
name|super
operator|.
name|mergeFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|getDefaultInstance
argument_list|()
condition|)
return|return
name|this
return|;
if|if
condition|(
name|other
operator|.
name|hasDoubleType
argument_list|()
condition|)
block|{
name|setDoubleType
argument_list|(
name|other
operator|.
name|getDoubleType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasFloatType
argument_list|()
condition|)
block|{
name|setFloatType
argument_list|(
name|other
operator|.
name|getFloatType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasInt32Type
argument_list|()
condition|)
block|{
name|setInt32Type
argument_list|(
name|other
operator|.
name|getInt32Type
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasInt64Type
argument_list|()
condition|)
block|{
name|setInt64Type
argument_list|(
name|other
operator|.
name|getInt64Type
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasUint32Type
argument_list|()
condition|)
block|{
name|setUint32Type
argument_list|(
name|other
operator|.
name|getUint32Type
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasUint64Type
argument_list|()
condition|)
block|{
name|setUint64Type
argument_list|(
name|other
operator|.
name|getUint64Type
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasSint32Type
argument_list|()
condition|)
block|{
name|setSint32Type
argument_list|(
name|other
operator|.
name|getSint32Type
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasSint64Type
argument_list|()
condition|)
block|{
name|setSint64Type
argument_list|(
name|other
operator|.
name|getSint64Type
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasFixed32Type
argument_list|()
condition|)
block|{
name|setFixed32Type
argument_list|(
name|other
operator|.
name|getFixed32Type
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasFixed64Type
argument_list|()
condition|)
block|{
name|setFixed64Type
argument_list|(
name|other
operator|.
name|getFixed64Type
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasSfixed32Type
argument_list|()
condition|)
block|{
name|setSfixed32Type
argument_list|(
name|other
operator|.
name|getSfixed32Type
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasSfixed64Type
argument_list|()
condition|)
block|{
name|setSfixed64Type
argument_list|(
name|other
operator|.
name|getSfixed64Type
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasBoolType
argument_list|()
condition|)
block|{
name|setBoolType
argument_list|(
name|other
operator|.
name|getBoolType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasStringType
argument_list|()
condition|)
block|{
name|bitField0_
operator||=
literal|0x00002000
expr_stmt|;
name|stringType_
operator|=
name|other
operator|.
name|stringType_
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasBytesType
argument_list|()
condition|)
block|{
name|setBytesType
argument_list|(
name|other
operator|.
name|getBytesType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|mapType_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|mapType_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mapType_
operator|=
name|other
operator|.
name|mapType_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00008000
operator|)
expr_stmt|;
block|}
else|else
block|{
name|ensureMapTypeIsMutable
argument_list|()
expr_stmt|;
name|mapType_
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|mapType_
argument_list|)
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|mapType_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mapTypeBuilder_
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|mapTypeBuilder_
operator|=
literal|null
expr_stmt|;
name|mapType_
operator|=
name|other
operator|.
name|mapType_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00008000
operator|)
expr_stmt|;
name|mapTypeBuilder_
operator|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|alwaysUseFieldBuilders
condition|?
name|getMapTypeFieldBuilder
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
else|else
block|{
name|mapTypeBuilder_
operator|.
name|addAllMessages
argument_list|(
name|other
operator|.
name|mapType_
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|other
operator|.
name|stringListType_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|stringListType_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stringListType_
operator|=
name|other
operator|.
name|stringListType_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00010000
operator|)
expr_stmt|;
block|}
else|else
block|{
name|ensureStringListTypeIsMutable
argument_list|()
expr_stmt|;
name|stringListType_
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|stringListType_
argument_list|)
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|hasMessageType
argument_list|()
condition|)
block|{
name|mergeMessageType
argument_list|(
name|other
operator|.
name|getMessageType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|messageListType_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|messageListType_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|messageListType_
operator|=
name|other
operator|.
name|messageListType_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00040000
operator|)
expr_stmt|;
block|}
else|else
block|{
name|ensureMessageListTypeIsMutable
argument_list|()
expr_stmt|;
name|messageListType_
operator|.
name|addAll
argument_list|(
name|other
operator|.
name|messageListType_
argument_list|)
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|messageListType_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|messageListTypeBuilder_
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|messageListTypeBuilder_
operator|=
literal|null
expr_stmt|;
name|messageListType_
operator|=
name|other
operator|.
name|messageListType_
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00040000
operator|)
expr_stmt|;
name|messageListTypeBuilder_
operator|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|alwaysUseFieldBuilders
condition|?
name|getMessageListTypeFieldBuilder
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
else|else
block|{
name|messageListTypeBuilder_
operator|.
name|addAllMessages
argument_list|(
name|other
operator|.
name|messageListType_
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|other
operator|.
name|hasEnumType
argument_list|()
condition|)
block|{
name|setEnumType
argument_list|(
name|other
operator|.
name|getEnumType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|mergeUnknownFields
argument_list|(
name|other
operator|.
name|getUnknownFields
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|Builder
name|mergeFrom
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedInputStream
name|input
parameter_list|,
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistryLite
name|extensionRegistry
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
name|parsedMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedMessage
operator|=
name|PARSER
operator|.
name|parsePartialFrom
argument_list|(
name|input
argument_list|,
name|extensionRegistry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
name|parsedMessage
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|)
name|e
operator|.
name|getUnfinishedMessage
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|parsedMessage
operator|!=
literal|null
condition|)
block|{
name|mergeFrom
argument_list|(
name|parsedMessage
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|int
name|bitField0_
decl_stmt|;
comment|// optional double doubleType = 1;
specifier|private
name|double
name|doubleType_
decl_stmt|;
comment|/**        *<code>optional double doubleType = 1;</code>        */
specifier|public
name|boolean
name|hasDoubleType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000001
operator|)
operator|==
literal|0x00000001
operator|)
return|;
block|}
comment|/**        *<code>optional double doubleType = 1;</code>        */
specifier|public
name|double
name|getDoubleType
parameter_list|()
block|{
return|return
name|doubleType_
return|;
block|}
comment|/**        *<code>optional double doubleType = 1;</code>        */
specifier|public
name|Builder
name|setDoubleType
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000001
expr_stmt|;
name|doubleType_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional double doubleType = 1;</code>        */
specifier|public
name|Builder
name|clearDoubleType
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000001
operator|)
expr_stmt|;
name|doubleType_
operator|=
literal|0D
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional float floatType = 2;
specifier|private
name|float
name|floatType_
decl_stmt|;
comment|/**        *<code>optional float floatType = 2;</code>        */
specifier|public
name|boolean
name|hasFloatType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000002
operator|)
operator|==
literal|0x00000002
operator|)
return|;
block|}
comment|/**        *<code>optional float floatType = 2;</code>        */
specifier|public
name|float
name|getFloatType
parameter_list|()
block|{
return|return
name|floatType_
return|;
block|}
comment|/**        *<code>optional float floatType = 2;</code>        */
specifier|public
name|Builder
name|setFloatType
parameter_list|(
name|float
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000002
expr_stmt|;
name|floatType_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional float floatType = 2;</code>        */
specifier|public
name|Builder
name|clearFloatType
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000002
operator|)
expr_stmt|;
name|floatType_
operator|=
literal|0F
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional int32 int32Type = 3;
specifier|private
name|int
name|int32Type_
decl_stmt|;
comment|/**        *<code>optional int32 int32Type = 3;</code>        */
specifier|public
name|boolean
name|hasInt32Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000004
operator|)
operator|==
literal|0x00000004
operator|)
return|;
block|}
comment|/**        *<code>optional int32 int32Type = 3;</code>        */
specifier|public
name|int
name|getInt32Type
parameter_list|()
block|{
return|return
name|int32Type_
return|;
block|}
comment|/**        *<code>optional int32 int32Type = 3;</code>        */
specifier|public
name|Builder
name|setInt32Type
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000004
expr_stmt|;
name|int32Type_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional int32 int32Type = 3;</code>        */
specifier|public
name|Builder
name|clearInt32Type
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000004
operator|)
expr_stmt|;
name|int32Type_
operator|=
literal|0
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional int64 int64Type = 4;
specifier|private
name|long
name|int64Type_
decl_stmt|;
comment|/**        *<code>optional int64 int64Type = 4;</code>        */
specifier|public
name|boolean
name|hasInt64Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000008
operator|)
operator|==
literal|0x00000008
operator|)
return|;
block|}
comment|/**        *<code>optional int64 int64Type = 4;</code>        */
specifier|public
name|long
name|getInt64Type
parameter_list|()
block|{
return|return
name|int64Type_
return|;
block|}
comment|/**        *<code>optional int64 int64Type = 4;</code>        */
specifier|public
name|Builder
name|setInt64Type
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000008
expr_stmt|;
name|int64Type_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional int64 int64Type = 4;</code>        */
specifier|public
name|Builder
name|clearInt64Type
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000008
operator|)
expr_stmt|;
name|int64Type_
operator|=
literal|0L
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional uint32 uint32Type = 5;
specifier|private
name|int
name|uint32Type_
decl_stmt|;
comment|/**        *<code>optional uint32 uint32Type = 5;</code>        */
specifier|public
name|boolean
name|hasUint32Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000010
operator|)
operator|==
literal|0x00000010
operator|)
return|;
block|}
comment|/**        *<code>optional uint32 uint32Type = 5;</code>        */
specifier|public
name|int
name|getUint32Type
parameter_list|()
block|{
return|return
name|uint32Type_
return|;
block|}
comment|/**        *<code>optional uint32 uint32Type = 5;</code>        */
specifier|public
name|Builder
name|setUint32Type
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000010
expr_stmt|;
name|uint32Type_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional uint32 uint32Type = 5;</code>        */
specifier|public
name|Builder
name|clearUint32Type
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000010
operator|)
expr_stmt|;
name|uint32Type_
operator|=
literal|0
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional uint64 uint64Type = 6;
specifier|private
name|long
name|uint64Type_
decl_stmt|;
comment|/**        *<code>optional uint64 uint64Type = 6;</code>        */
specifier|public
name|boolean
name|hasUint64Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000020
operator|)
operator|==
literal|0x00000020
operator|)
return|;
block|}
comment|/**        *<code>optional uint64 uint64Type = 6;</code>        */
specifier|public
name|long
name|getUint64Type
parameter_list|()
block|{
return|return
name|uint64Type_
return|;
block|}
comment|/**        *<code>optional uint64 uint64Type = 6;</code>        */
specifier|public
name|Builder
name|setUint64Type
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000020
expr_stmt|;
name|uint64Type_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional uint64 uint64Type = 6;</code>        */
specifier|public
name|Builder
name|clearUint64Type
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000020
operator|)
expr_stmt|;
name|uint64Type_
operator|=
literal|0L
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional sint32 sint32Type = 7;
specifier|private
name|int
name|sint32Type_
decl_stmt|;
comment|/**        *<code>optional sint32 sint32Type = 7;</code>        */
specifier|public
name|boolean
name|hasSint32Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000040
operator|)
operator|==
literal|0x00000040
operator|)
return|;
block|}
comment|/**        *<code>optional sint32 sint32Type = 7;</code>        */
specifier|public
name|int
name|getSint32Type
parameter_list|()
block|{
return|return
name|sint32Type_
return|;
block|}
comment|/**        *<code>optional sint32 sint32Type = 7;</code>        */
specifier|public
name|Builder
name|setSint32Type
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000040
expr_stmt|;
name|sint32Type_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional sint32 sint32Type = 7;</code>        */
specifier|public
name|Builder
name|clearSint32Type
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000040
operator|)
expr_stmt|;
name|sint32Type_
operator|=
literal|0
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional sint64 sint64Type = 8;
specifier|private
name|long
name|sint64Type_
decl_stmt|;
comment|/**        *<code>optional sint64 sint64Type = 8;</code>        */
specifier|public
name|boolean
name|hasSint64Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000080
operator|)
operator|==
literal|0x00000080
operator|)
return|;
block|}
comment|/**        *<code>optional sint64 sint64Type = 8;</code>        */
specifier|public
name|long
name|getSint64Type
parameter_list|()
block|{
return|return
name|sint64Type_
return|;
block|}
comment|/**        *<code>optional sint64 sint64Type = 8;</code>        */
specifier|public
name|Builder
name|setSint64Type
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000080
expr_stmt|;
name|sint64Type_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional sint64 sint64Type = 8;</code>        */
specifier|public
name|Builder
name|clearSint64Type
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000080
operator|)
expr_stmt|;
name|sint64Type_
operator|=
literal|0L
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional fixed32 fixed32Type = 9;
specifier|private
name|int
name|fixed32Type_
decl_stmt|;
comment|/**        *<code>optional fixed32 fixed32Type = 9;</code>        */
specifier|public
name|boolean
name|hasFixed32Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000100
operator|)
operator|==
literal|0x00000100
operator|)
return|;
block|}
comment|/**        *<code>optional fixed32 fixed32Type = 9;</code>        */
specifier|public
name|int
name|getFixed32Type
parameter_list|()
block|{
return|return
name|fixed32Type_
return|;
block|}
comment|/**        *<code>optional fixed32 fixed32Type = 9;</code>        */
specifier|public
name|Builder
name|setFixed32Type
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000100
expr_stmt|;
name|fixed32Type_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional fixed32 fixed32Type = 9;</code>        */
specifier|public
name|Builder
name|clearFixed32Type
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000100
operator|)
expr_stmt|;
name|fixed32Type_
operator|=
literal|0
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional fixed64 fixed64Type = 10;
specifier|private
name|long
name|fixed64Type_
decl_stmt|;
comment|/**        *<code>optional fixed64 fixed64Type = 10;</code>        */
specifier|public
name|boolean
name|hasFixed64Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000200
operator|)
operator|==
literal|0x00000200
operator|)
return|;
block|}
comment|/**        *<code>optional fixed64 fixed64Type = 10;</code>        */
specifier|public
name|long
name|getFixed64Type
parameter_list|()
block|{
return|return
name|fixed64Type_
return|;
block|}
comment|/**        *<code>optional fixed64 fixed64Type = 10;</code>        */
specifier|public
name|Builder
name|setFixed64Type
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000200
expr_stmt|;
name|fixed64Type_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional fixed64 fixed64Type = 10;</code>        */
specifier|public
name|Builder
name|clearFixed64Type
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000200
operator|)
expr_stmt|;
name|fixed64Type_
operator|=
literal|0L
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional sfixed32 sfixed32Type = 11;
specifier|private
name|int
name|sfixed32Type_
decl_stmt|;
comment|/**        *<code>optional sfixed32 sfixed32Type = 11;</code>        */
specifier|public
name|boolean
name|hasSfixed32Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000400
operator|)
operator|==
literal|0x00000400
operator|)
return|;
block|}
comment|/**        *<code>optional sfixed32 sfixed32Type = 11;</code>        */
specifier|public
name|int
name|getSfixed32Type
parameter_list|()
block|{
return|return
name|sfixed32Type_
return|;
block|}
comment|/**        *<code>optional sfixed32 sfixed32Type = 11;</code>        */
specifier|public
name|Builder
name|setSfixed32Type
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000400
expr_stmt|;
name|sfixed32Type_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional sfixed32 sfixed32Type = 11;</code>        */
specifier|public
name|Builder
name|clearSfixed32Type
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000400
operator|)
expr_stmt|;
name|sfixed32Type_
operator|=
literal|0
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional sfixed64 sfixed64Type = 12;
specifier|private
name|long
name|sfixed64Type_
decl_stmt|;
comment|/**        *<code>optional sfixed64 sfixed64Type = 12;</code>        */
specifier|public
name|boolean
name|hasSfixed64Type
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00000800
operator|)
operator|==
literal|0x00000800
operator|)
return|;
block|}
comment|/**        *<code>optional sfixed64 sfixed64Type = 12;</code>        */
specifier|public
name|long
name|getSfixed64Type
parameter_list|()
block|{
return|return
name|sfixed64Type_
return|;
block|}
comment|/**        *<code>optional sfixed64 sfixed64Type = 12;</code>        */
specifier|public
name|Builder
name|setSfixed64Type
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00000800
expr_stmt|;
name|sfixed64Type_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional sfixed64 sfixed64Type = 12;</code>        */
specifier|public
name|Builder
name|clearSfixed64Type
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00000800
operator|)
expr_stmt|;
name|sfixed64Type_
operator|=
literal|0L
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional bool boolType = 13;
specifier|private
name|boolean
name|boolType_
decl_stmt|;
comment|/**        *<code>optional bool boolType = 13;</code>        */
specifier|public
name|boolean
name|hasBoolType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00001000
operator|)
operator|==
literal|0x00001000
operator|)
return|;
block|}
comment|/**        *<code>optional bool boolType = 13;</code>        */
specifier|public
name|boolean
name|getBoolType
parameter_list|()
block|{
return|return
name|boolType_
return|;
block|}
comment|/**        *<code>optional bool boolType = 13;</code>        */
specifier|public
name|Builder
name|setBoolType
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|bitField0_
operator||=
literal|0x00001000
expr_stmt|;
name|boolType_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional bool boolType = 13;</code>        */
specifier|public
name|Builder
name|clearBoolType
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00001000
operator|)
expr_stmt|;
name|boolType_
operator|=
literal|false
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional string stringType = 14;
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|stringType_
init|=
literal|""
decl_stmt|;
comment|/**        *<code>optional string stringType = 14;</code>        */
specifier|public
name|boolean
name|hasStringType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00002000
operator|)
operator|==
literal|0x00002000
operator|)
return|;
block|}
comment|/**        *<code>optional string stringType = 14;</code>        */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getStringType
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|stringType_
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ref
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|String
operator|)
condition|)
block|{
name|java
operator|.
name|lang
operator|.
name|String
name|s
init|=
operator|(
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
operator|)
operator|.
name|toStringUtf8
argument_list|()
decl_stmt|;
name|stringType_
operator|=
name|s
expr_stmt|;
return|return
name|s
return|;
block|}
else|else
block|{
return|return
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
return|;
block|}
block|}
comment|/**        *<code>optional string stringType = 14;</code>        */
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getStringTypeBytes
parameter_list|()
block|{
name|java
operator|.
name|lang
operator|.
name|Object
name|ref
init|=
name|stringType_
decl_stmt|;
if|if
condition|(
name|ref
operator|instanceof
name|String
condition|)
block|{
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|b
init|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|copyFromUtf8
argument_list|(
operator|(
name|java
operator|.
name|lang
operator|.
name|String
operator|)
name|ref
argument_list|)
decl_stmt|;
name|stringType_
operator|=
name|b
expr_stmt|;
return|return
name|b
return|;
block|}
else|else
block|{
return|return
operator|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|)
name|ref
return|;
block|}
block|}
comment|/**        *<code>optional string stringType = 14;</code>        */
specifier|public
name|Builder
name|setStringType
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00002000
expr_stmt|;
name|stringType_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional string stringType = 14;</code>        */
specifier|public
name|Builder
name|clearStringType
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00002000
operator|)
expr_stmt|;
name|stringType_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getStringType
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional string stringType = 14;</code>        */
specifier|public
name|Builder
name|setStringTypeBytes
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00002000
expr_stmt|;
name|stringType_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional bytes bytesType = 15;
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|bytesType_
init|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
operator|.
name|EMPTY
decl_stmt|;
comment|/**        *<code>optional bytes bytesType = 15;</code>        */
specifier|public
name|boolean
name|hasBytesType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00004000
operator|)
operator|==
literal|0x00004000
operator|)
return|;
block|}
comment|/**        *<code>optional bytes bytesType = 15;</code>        */
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getBytesType
parameter_list|()
block|{
return|return
name|bytesType_
return|;
block|}
comment|/**        *<code>optional bytes bytesType = 15;</code>        */
specifier|public
name|Builder
name|setBytesType
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00004000
expr_stmt|;
name|bytesType_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional bytes bytesType = 15;</code>        */
specifier|public
name|Builder
name|clearBytesType
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00004000
operator|)
expr_stmt|;
name|bytesType_
operator|=
name|getDefaultInstance
argument_list|()
operator|.
name|getBytesType
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// repeated .MapFieldEntry mapType = 16;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|mapType_
init|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|void
name|ensureMapTypeIsMutable
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00008000
operator|)
operator|==
literal|0x00008000
operator|)
condition|)
block|{
name|mapType_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
argument_list|(
name|mapType_
argument_list|)
expr_stmt|;
name|bitField0_
operator||=
literal|0x00008000
expr_stmt|;
block|}
block|}
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|mapTypeBuilder_
decl_stmt|;
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|getMapTypeList
parameter_list|()
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|mapType_
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mapTypeBuilder_
operator|.
name|getMessageList
argument_list|()
return|;
block|}
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|int
name|getMapTypeCount
parameter_list|()
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|mapType_
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|mapTypeBuilder_
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|getMapType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|mapType_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mapTypeBuilder_
operator|.
name|getMessage
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|Builder
name|setMapType
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|value
parameter_list|)
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureMapTypeIsMutable
argument_list|()
expr_stmt|;
name|mapType_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mapTypeBuilder_
operator|.
name|setMessage
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|Builder
name|setMapType
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureMapTypeIsMutable
argument_list|()
expr_stmt|;
name|mapType_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mapTypeBuilder_
operator|.
name|setMessage
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|Builder
name|addMapType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|value
parameter_list|)
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureMapTypeIsMutable
argument_list|()
expr_stmt|;
name|mapType_
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mapTypeBuilder_
operator|.
name|addMessage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|Builder
name|addMapType
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
name|value
parameter_list|)
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureMapTypeIsMutable
argument_list|()
expr_stmt|;
name|mapType_
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mapTypeBuilder_
operator|.
name|addMessage
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|Builder
name|addMapType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureMapTypeIsMutable
argument_list|()
expr_stmt|;
name|mapType_
operator|.
name|add
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mapTypeBuilder_
operator|.
name|addMessage
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|Builder
name|addMapType
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureMapTypeIsMutable
argument_list|()
expr_stmt|;
name|mapType_
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mapTypeBuilder_
operator|.
name|addMessage
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|Builder
name|addAllMapType
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Iterable
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureMapTypeIsMutable
argument_list|()
expr_stmt|;
name|super
operator|.
name|addAll
argument_list|(
name|values
argument_list|,
name|mapType_
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mapTypeBuilder_
operator|.
name|addAllMessages
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|Builder
name|clearMapType
parameter_list|()
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|mapType_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00008000
operator|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mapTypeBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|Builder
name|removeMapType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureMapTypeIsMutable
argument_list|()
expr_stmt|;
name|mapType_
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mapTypeBuilder_
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|getMapTypeBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getMapTypeFieldBuilder
argument_list|()
operator|.
name|getBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
name|getMapTypeOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|mapType_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mapTypeBuilder_
operator|.
name|getMessageOrBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|getMapTypeOrBuilderList
parameter_list|()
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|!=
literal|null
condition|)
block|{
return|return
name|mapTypeBuilder_
operator|.
name|getMessageOrBuilderList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|mapType_
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|addMapTypeBuilder
parameter_list|()
block|{
return|return
name|getMapTypeFieldBuilder
argument_list|()
operator|.
name|addBuilder
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
name|addMapTypeBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getMapTypeFieldBuilder
argument_list|()
operator|.
name|addBuilder
argument_list|(
name|index
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .MapFieldEntry mapType = 16;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
argument_list|>
name|getMapTypeBuilderList
parameter_list|()
block|{
return|return
name|getMapTypeFieldBuilder
argument_list|()
operator|.
name|getBuilderList
argument_list|()
return|;
block|}
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
name|getMapTypeFieldBuilder
parameter_list|()
block|{
if|if
condition|(
name|mapTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|mapTypeBuilder_
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntry
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|MapFieldEntryOrBuilder
argument_list|>
argument_list|(
name|mapType_
argument_list|,
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00008000
operator|)
operator|==
literal|0x00008000
operator|)
argument_list|,
name|getParentForChildren
argument_list|()
argument_list|,
name|isClean
argument_list|()
argument_list|)
expr_stmt|;
name|mapType_
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|mapTypeBuilder_
return|;
block|}
comment|// repeated string stringListType = 17;
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringList
name|stringListType_
init|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
operator|.
name|EMPTY
decl_stmt|;
specifier|private
name|void
name|ensureStringListTypeIsMutable
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00010000
operator|)
operator|==
literal|0x00010000
operator|)
condition|)
block|{
name|stringListType_
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
argument_list|(
name|stringListType_
argument_list|)
expr_stmt|;
name|bitField0_
operator||=
literal|0x00010000
expr_stmt|;
block|}
block|}
comment|/**        *<code>repeated string stringListType = 17;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|getStringListTypeList
parameter_list|()
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|stringListType_
argument_list|)
return|;
block|}
comment|/**        *<code>repeated string stringListType = 17;</code>        */
specifier|public
name|int
name|getStringListTypeCount
parameter_list|()
block|{
return|return
name|stringListType_
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**        *<code>repeated string stringListType = 17;</code>        */
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|getStringListType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|stringListType_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**        *<code>repeated string stringListType = 17;</code>        */
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|getStringListTypeBytes
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|stringListType_
operator|.
name|getByteString
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**        *<code>repeated string stringListType = 17;</code>        */
specifier|public
name|Builder
name|setStringListType
parameter_list|(
name|int
name|index
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureStringListTypeIsMutable
argument_list|()
expr_stmt|;
name|stringListType_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated string stringListType = 17;</code>        */
specifier|public
name|Builder
name|addStringListType
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureStringListTypeIsMutable
argument_list|()
expr_stmt|;
name|stringListType_
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated string stringListType = 17;</code>        */
specifier|public
name|Builder
name|addAllStringListType
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Iterable
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|values
parameter_list|)
block|{
name|ensureStringListTypeIsMutable
argument_list|()
expr_stmt|;
name|super
operator|.
name|addAll
argument_list|(
name|values
argument_list|,
name|stringListType_
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated string stringListType = 17;</code>        */
specifier|public
name|Builder
name|clearStringListType
parameter_list|()
block|{
name|stringListType_
operator|=
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|LazyStringArrayList
operator|.
name|EMPTY
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00010000
operator|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated string stringListType = 17;</code>        */
specifier|public
name|Builder
name|addStringListTypeBytes
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureStringListTypeIsMutable
argument_list|()
expr_stmt|;
name|stringListType_
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// optional .Mesg1 messageType = 18;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|messageType_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|SingleFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
argument_list|>
name|messageTypeBuilder_
decl_stmt|;
comment|/**        *<code>optional .Mesg1 messageType = 18;</code>        */
specifier|public
name|boolean
name|hasMessageType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00020000
operator|)
operator|==
literal|0x00020000
operator|)
return|;
block|}
comment|/**        *<code>optional .Mesg1 messageType = 18;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|getMessageType
parameter_list|()
block|{
if|if
condition|(
name|messageTypeBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|messageType_
return|;
block|}
else|else
block|{
return|return
name|messageTypeBuilder_
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
comment|/**        *<code>optional .Mesg1 messageType = 18;</code>        */
specifier|public
name|Builder
name|setMessageType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|value
parameter_list|)
block|{
if|if
condition|(
name|messageTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|messageType_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageTypeBuilder_
operator|.
name|setMessage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|bitField0_
operator||=
literal|0x00020000
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional .Mesg1 messageType = 18;</code>        */
specifier|public
name|Builder
name|setMessageType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|messageTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|messageType_
operator|=
name|builderForValue
operator|.
name|build
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageTypeBuilder_
operator|.
name|setMessage
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bitField0_
operator||=
literal|0x00020000
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional .Mesg1 messageType = 18;</code>        */
specifier|public
name|Builder
name|mergeMessageType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|value
parameter_list|)
block|{
if|if
condition|(
name|messageTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00020000
operator|)
operator|==
literal|0x00020000
operator|)
operator|&&
name|messageType_
operator|!=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|getDefaultInstance
argument_list|()
condition|)
block|{
name|messageType_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|newBuilder
argument_list|(
name|messageType_
argument_list|)
operator|.
name|mergeFrom
argument_list|(
name|value
argument_list|)
operator|.
name|buildPartial
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageType_
operator|=
name|value
expr_stmt|;
block|}
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageTypeBuilder_
operator|.
name|mergeFrom
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|bitField0_
operator||=
literal|0x00020000
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional .Mesg1 messageType = 18;</code>        */
specifier|public
name|Builder
name|clearMessageType
parameter_list|()
block|{
if|if
condition|(
name|messageTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|messageType_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|getDefaultInstance
argument_list|()
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageTypeBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00020000
operator|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional .Mesg1 messageType = 18;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
name|getMessageTypeBuilder
parameter_list|()
block|{
name|bitField0_
operator||=
literal|0x00020000
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|getMessageTypeFieldBuilder
argument_list|()
operator|.
name|getBuilder
argument_list|()
return|;
block|}
comment|/**        *<code>optional .Mesg1 messageType = 18;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
name|getMessageTypeOrBuilder
parameter_list|()
block|{
if|if
condition|(
name|messageTypeBuilder_
operator|!=
literal|null
condition|)
block|{
return|return
name|messageTypeBuilder_
operator|.
name|getMessageOrBuilder
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|messageType_
return|;
block|}
block|}
comment|/**        *<code>optional .Mesg1 messageType = 18;</code>        */
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|SingleFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
argument_list|>
name|getMessageTypeFieldBuilder
parameter_list|()
block|{
if|if
condition|(
name|messageTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|messageTypeBuilder_
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|SingleFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
argument_list|>
argument_list|(
name|messageType_
argument_list|,
name|getParentForChildren
argument_list|()
argument_list|,
name|isClean
argument_list|()
argument_list|)
expr_stmt|;
name|messageType_
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|messageTypeBuilder_
return|;
block|}
comment|// repeated .Mesg1 messageListType = 19;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|>
name|messageListType_
init|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|private
name|void
name|ensureMessageListTypeIsMutable
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00040000
operator|)
operator|==
literal|0x00040000
operator|)
condition|)
block|{
name|messageListType_
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|>
argument_list|(
name|messageListType_
argument_list|)
expr_stmt|;
name|bitField0_
operator||=
literal|0x00040000
expr_stmt|;
block|}
block|}
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
argument_list|>
name|messageListTypeBuilder_
decl_stmt|;
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|>
name|getMessageListTypeList
parameter_list|()
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|messageListType_
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|messageListTypeBuilder_
operator|.
name|getMessageList
argument_list|()
return|;
block|}
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|int
name|getMessageListTypeCount
parameter_list|()
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|messageListType_
operator|.
name|size
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|messageListTypeBuilder_
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|getMessageListType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|messageListType_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|messageListTypeBuilder_
operator|.
name|getMessage
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|Builder
name|setMessageListType
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|value
parameter_list|)
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureMessageListTypeIsMutable
argument_list|()
expr_stmt|;
name|messageListType_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageListTypeBuilder_
operator|.
name|setMessage
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|Builder
name|setMessageListType
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureMessageListTypeIsMutable
argument_list|()
expr_stmt|;
name|messageListType_
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageListTypeBuilder_
operator|.
name|setMessage
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|Builder
name|addMessageListType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|value
parameter_list|)
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureMessageListTypeIsMutable
argument_list|()
expr_stmt|;
name|messageListType_
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageListTypeBuilder_
operator|.
name|addMessage
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|Builder
name|addMessageListType
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
name|value
parameter_list|)
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|ensureMessageListTypeIsMutable
argument_list|()
expr_stmt|;
name|messageListType_
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageListTypeBuilder_
operator|.
name|addMessage
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|Builder
name|addMessageListType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureMessageListTypeIsMutable
argument_list|()
expr_stmt|;
name|messageListType_
operator|.
name|add
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageListTypeBuilder_
operator|.
name|addMessage
argument_list|(
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|Builder
name|addMessageListType
parameter_list|(
name|int
name|index
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
name|builderForValue
parameter_list|)
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureMessageListTypeIsMutable
argument_list|()
expr_stmt|;
name|messageListType_
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageListTypeBuilder_
operator|.
name|addMessage
argument_list|(
name|index
argument_list|,
name|builderForValue
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|Builder
name|addAllMessageListType
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Iterable
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureMessageListTypeIsMutable
argument_list|()
expr_stmt|;
name|super
operator|.
name|addAll
argument_list|(
name|values
argument_list|,
name|messageListType_
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageListTypeBuilder_
operator|.
name|addAllMessages
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|Builder
name|clearMessageListType
parameter_list|()
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|messageListType_
operator|=
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00040000
operator|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageListTypeBuilder_
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|Builder
name|removeMessageListType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|ensureMessageListTypeIsMutable
argument_list|()
expr_stmt|;
name|messageListType_
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messageListTypeBuilder_
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
name|getMessageListTypeBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getMessageListTypeFieldBuilder
argument_list|()
operator|.
name|getBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
name|getMessageListTypeOrBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
return|return
name|messageListType_
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|messageListTypeBuilder_
operator|.
name|getMessageOrBuilder
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
argument_list|>
name|getMessageListTypeOrBuilderList
parameter_list|()
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|!=
literal|null
condition|)
block|{
return|return
name|messageListTypeBuilder_
operator|.
name|getMessageOrBuilderList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|messageListType_
argument_list|)
return|;
block|}
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
name|addMessageListTypeBuilder
parameter_list|()
block|{
return|return
name|getMessageListTypeFieldBuilder
argument_list|()
operator|.
name|addBuilder
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
name|addMessageListTypeBuilder
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|getMessageListTypeFieldBuilder
argument_list|()
operator|.
name|addBuilder
argument_list|(
name|index
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
return|;
block|}
comment|/**        *<code>repeated .Mesg1 messageListType = 19;</code>        */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
argument_list|>
name|getMessageListTypeBuilderList
parameter_list|()
block|{
return|return
name|getMessageListTypeFieldBuilder
argument_list|()
operator|.
name|getBuilderList
argument_list|()
return|;
block|}
specifier|private
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
argument_list|>
name|getMessageListTypeFieldBuilder
parameter_list|()
block|{
if|if
condition|(
name|messageListTypeBuilder_
operator|==
literal|null
condition|)
block|{
name|messageListTypeBuilder_
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RepeatedFieldBuilder
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1
operator|.
name|Builder
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|Mesg1OrBuilder
argument_list|>
argument_list|(
name|messageListType_
argument_list|,
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00040000
operator|)
operator|==
literal|0x00040000
operator|)
argument_list|,
name|getParentForChildren
argument_list|()
argument_list|,
name|isClean
argument_list|()
argument_list|)
expr_stmt|;
name|messageListType_
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|messageListTypeBuilder_
return|;
block|}
comment|// optional .AllTypes.Enum1 enumType = 20;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
name|enumType_
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
operator|.
name|VAL1
decl_stmt|;
comment|/**        *<code>optional .AllTypes.Enum1 enumType = 20;</code>        */
specifier|public
name|boolean
name|hasEnumType
parameter_list|()
block|{
return|return
operator|(
operator|(
name|bitField0_
operator|&
literal|0x00080000
operator|)
operator|==
literal|0x00080000
operator|)
return|;
block|}
comment|/**        *<code>optional .AllTypes.Enum1 enumType = 20;</code>        */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
name|getEnumType
parameter_list|()
block|{
return|return
name|enumType_
return|;
block|}
comment|/**        *<code>optional .AllTypes.Enum1 enumType = 20;</code>        */
specifier|public
name|Builder
name|setEnumType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|bitField0_
operator||=
literal|0x00080000
expr_stmt|;
name|enumType_
operator|=
name|value
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**        *<code>optional .AllTypes.Enum1 enumType = 20;</code>        */
specifier|public
name|Builder
name|clearEnumType
parameter_list|()
block|{
name|bitField0_
operator|=
operator|(
name|bitField0_
operator|&
operator|~
literal|0x00080000
operator|)
expr_stmt|;
name|enumType_
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|contrib
operator|.
name|serde2
operator|.
name|SampleProtos
operator|.
name|AllTypes
operator|.
name|Enum1
operator|.
name|VAL1
expr_stmt|;
name|onChanged
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// @@protoc_insertion_point(builder_scope:AllTypes)
block|}
static|static
block|{
name|defaultInstance
operator|=
operator|new
name|AllTypes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|defaultInstance
operator|.
name|initFields
argument_list|()
expr_stmt|;
block|}
comment|// @@protoc_insertion_point(class_scope:AllTypes)
block|}
specifier|private
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|internal_static_MapFieldEntry_descriptor
decl_stmt|;
specifier|private
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
name|internal_static_MapFieldEntry_fieldAccessorTable
decl_stmt|;
specifier|private
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|internal_static_Mesg1_descriptor
decl_stmt|;
specifier|private
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
name|internal_static_Mesg1_fieldAccessorTable
decl_stmt|;
specifier|private
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|Descriptor
name|internal_static_AllTypes_descriptor
decl_stmt|;
specifier|private
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
name|internal_static_AllTypes_fieldAccessorTable
decl_stmt|;
specifier|public
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
name|getDescriptor
parameter_list|()
block|{
return|return
name|descriptor
return|;
block|}
specifier|private
specifier|static
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
name|descriptor
decl_stmt|;
static|static
block|{
name|java
operator|.
name|lang
operator|.
name|String
index|[]
name|descriptorData
init|=
block|{
literal|"\n\022SampleProtos.proto\"+\n\rMapFieldEntry\022\013\n"
operator|+
literal|"\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"[\n\005Mesg1\022\"\n\nan"
operator|+
literal|"otherMap\030\001 \003(\0132\016.MapFieldEntry\022\035\n\005noMap\030"
operator|+
literal|"\002 \001(\0132\016.MapFieldEntry\022\017\n\007intList\030\003 \003(\005\"\355"
operator|+
literal|"\003\n\010AllTypes\022\022\n\ndoubleType\030\001 \001(\001\022\021\n\tfloat"
operator|+
literal|"Type\030\002 \001(\002\022\021\n\tint32Type\030\003 \001(\005\022\021\n\tint64Ty"
operator|+
literal|"pe\030\004 \001(\003\022\022\n\nuint32Type\030\005 \001(\r\022\022\n\nuint64Ty"
operator|+
literal|"pe\030\006 \001(\004\022\022\n\nsint32Type\030\007 \001(\021\022\022\n\nsint64Ty"
operator|+
literal|"pe\030\010 \001(\022\022\023\n\013fixed32Type\030\t \001(\007\022\023\n\013fixed64"
operator|+
literal|"Type\030\n \001(\006\022\024\n\014sfixed32Type\030\013 \001(\017\022\024\n\014sfix"
block|,
literal|"ed64Type\030\014 \001(\020\022\020\n\010boolType\030\r \001(\010\022\022\n\nstri"
operator|+
literal|"ngType\030\016 \001(\t\022\021\n\tbytesType\030\017 \001(\014\022\037\n\007mapTy"
operator|+
literal|"pe\030\020 \003(\0132\016.MapFieldEntry\022\026\n\016stringListTy"
operator|+
literal|"pe\030\021 \003(\t\022\033\n\013messageType\030\022 \001(\0132\006.Mesg1\022\037\n"
operator|+
literal|"\017messageListType\030\023 \003(\0132\006.Mesg1\022!\n\010enumTy"
operator|+
literal|"pe\030\024 \001(\0162\017.AllTypes.Enum1\"\033\n\005Enum1\022\010\n\004VA"
operator|+
literal|"L1\020\001\022\010\n\004VAL2\020\002B5\n%org.apache.hadoop.hive"
operator|+
literal|".contrib.serde2B\014SampleProtos"
block|}
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|InternalDescriptorAssigner
name|assigner
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|InternalDescriptorAssigner
argument_list|()
block|{
specifier|public
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ExtensionRegistry
name|assignDescriptors
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
name|root
parameter_list|)
block|{
name|descriptor
operator|=
name|root
expr_stmt|;
name|internal_static_MapFieldEntry_descriptor
operator|=
name|getDescriptor
argument_list|()
operator|.
name|getMessageTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|internal_static_MapFieldEntry_fieldAccessorTable
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
argument_list|(
name|internal_static_MapFieldEntry_descriptor
argument_list|,
operator|new
name|java
operator|.
name|lang
operator|.
name|String
index|[]
block|{
literal|"Key"
block|,
literal|"Value"
block|, }
argument_list|)
expr_stmt|;
name|internal_static_Mesg1_descriptor
operator|=
name|getDescriptor
argument_list|()
operator|.
name|getMessageTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|internal_static_Mesg1_fieldAccessorTable
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
argument_list|(
name|internal_static_Mesg1_descriptor
argument_list|,
operator|new
name|java
operator|.
name|lang
operator|.
name|String
index|[]
block|{
literal|"AnotherMap"
block|,
literal|"NoMap"
block|,
literal|"IntList"
block|, }
argument_list|)
expr_stmt|;
name|internal_static_AllTypes_descriptor
operator|=
name|getDescriptor
argument_list|()
operator|.
name|getMessageTypes
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|internal_static_AllTypes_fieldAccessorTable
operator|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
operator|.
name|FieldAccessorTable
argument_list|(
name|internal_static_AllTypes_descriptor
argument_list|,
operator|new
name|java
operator|.
name|lang
operator|.
name|String
index|[]
block|{
literal|"DoubleType"
block|,
literal|"FloatType"
block|,
literal|"Int32Type"
block|,
literal|"Int64Type"
block|,
literal|"Uint32Type"
block|,
literal|"Uint64Type"
block|,
literal|"Sint32Type"
block|,
literal|"Sint64Type"
block|,
literal|"Fixed32Type"
block|,
literal|"Fixed64Type"
block|,
literal|"Sfixed32Type"
block|,
literal|"Sfixed64Type"
block|,
literal|"BoolType"
block|,
literal|"StringType"
block|,
literal|"BytesType"
block|,
literal|"MapType"
block|,
literal|"StringListType"
block|,
literal|"MessageType"
block|,
literal|"MessageListType"
block|,
literal|"EnumType"
block|, }
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
operator|.
name|internalBuildGeneratedFileFrom
argument_list|(
name|descriptorData
argument_list|,
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|FileDescriptor
index|[]
block|{         }
argument_list|,
name|assigner
argument_list|)
expr_stmt|;
block|}
comment|// @@protoc_insertion_point(outer_class_scope)
block|}
end_class

end_unit

