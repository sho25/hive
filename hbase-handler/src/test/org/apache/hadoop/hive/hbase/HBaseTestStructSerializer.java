begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|ColumnMappings
operator|.
name|ColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|struct
operator|.
name|HBaseStructValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazySimpleStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_comment
comment|/**  * Test specific implementation of {@link org.apache.hadoop.hive.serde2.lazy.LazyStruct}  */
end_comment

begin_class
specifier|public
class|class
name|HBaseTestStructSerializer
extends|extends
name|HBaseStructValue
block|{
specifier|protected
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|protected
name|String
name|bytesAsString
decl_stmt|;
specifier|protected
name|Properties
name|tbl
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|ColumnMapping
name|colMapping
decl_stmt|;
specifier|protected
name|String
name|testValue
decl_stmt|;
specifier|public
name|HBaseTestStructSerializer
parameter_list|(
name|LazySimpleStructObjectInspector
name|oi
parameter_list|,
name|Properties
name|tbl
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ColumnMapping
name|colMapping
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|this
operator|.
name|tbl
operator|=
name|tbl
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|colMapping
operator|=
name|colMapping
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ByteArrayRef
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
operator|.
name|getData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getField
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
if|if
condition|(
name|bytesAsString
operator|==
literal|null
condition|)
block|{
name|bytesAsString
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
comment|// Randomly pick the character corresponding to the field id and convert it to byte array
name|byte
index|[]
name|fieldBytes
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|bytesAsString
operator|.
name|charAt
argument_list|(
name|fieldID
argument_list|)
block|}
decl_stmt|;
return|return
name|toLazyObject
argument_list|(
name|fieldID
argument_list|,
name|fieldBytes
argument_list|)
return|;
block|}
comment|/**    * Create an initialize a {@link LazyObject} with the given bytes for the given fieldID.    *    * @param fieldID field for which the object is to be created    * @param bytes value with which the object is to be initialized with    *     * @return initialized {@link LazyObject}    * */
annotation|@
name|Override
specifier|public
name|LazyObject
argument_list|<
name|?
extends|extends
name|ObjectInspector
argument_list|>
name|toLazyObject
parameter_list|(
name|int
name|fieldID
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|ObjectInspector
name|fieldOI
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
name|fieldID
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|LazyObject
argument_list|<
name|?
extends|extends
name|ObjectInspector
argument_list|>
name|lazyObject
init|=
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|fieldOI
argument_list|)
decl_stmt|;
name|ByteArrayRef
name|ref
init|=
operator|new
name|ByteArrayRef
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setData
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
comment|// initialize the lazy object
name|lazyObject
operator|.
name|init
argument_list|(
name|ref
argument_list|,
literal|0
argument_list|,
name|ref
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|lazyObject
return|;
block|}
block|}
end_class

end_unit

