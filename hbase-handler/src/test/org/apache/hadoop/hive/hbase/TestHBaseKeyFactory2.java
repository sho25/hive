begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexPredicateAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|BaseStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|TestHBaseKeyFactory2
extends|extends
name|AbstractHBaseKeyFactory
block|{
specifier|private
specifier|static
specifier|final
name|int
name|FIXED_LENGTH
init|=
literal|10
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|createKeyObjectInspector
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
block|{
return|return
operator|new
name|StringArrayOI
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LazyObjectBase
name|createKey
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|)
throws|throws
name|SerDeException
block|{
return|return
operator|new
name|FixedLengthed
argument_list|(
name|FIXED_LENGTH
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|ByteStream
operator|.
name|Output
name|output
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|serializeKey
parameter_list|(
name|Object
name|object
parameter_list|,
name|StructField
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|inspector
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"invalid type value "
operator|+
name|inspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|element
range|:
operator|(
operator|(
name|StructObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|object
argument_list|)
control|)
block|{
name|output
operator|.
name|write
argument_list|(
name|toBinary
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|element
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FIXED_LENGTH
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|output
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|?
name|output
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
return|;
block|}
specifier|private
name|byte
index|[]
name|toBinary
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|max
parameter_list|,
name|boolean
name|end
parameter_list|,
name|boolean
name|nextBA
parameter_list|)
block|{
return|return
name|toBinary
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
name|max
argument_list|,
name|end
argument_list|,
name|nextBA
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|toBinary
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|max
parameter_list|,
name|boolean
name|end
parameter_list|,
name|boolean
name|nextBA
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|max
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|value
operator|.
name|length
argument_list|,
name|max
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|bytes
argument_list|,
name|value
operator|.
name|length
argument_list|,
name|max
argument_list|,
operator|(
name|byte
operator|)
literal|0xff
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextBA
condition|)
block|{
name|bytes
index|[
name|max
index|]
operator|=
literal|0x01
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
annotation|@
name|Override
specifier|public
name|DecomposedPredicate
name|decomposePredicate
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Deserializer
name|deserializer
parameter_list|,
name|ExprNodeDesc
name|predicate
parameter_list|)
block|{
name|String
name|keyColName
init|=
name|keyMapping
operator|.
name|columnName
decl_stmt|;
name|IndexPredicateAnalyzer
name|analyzer
init|=
name|IndexPredicateAnalyzer
operator|.
name|createAnalyzer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|allowColumnName
argument_list|(
name|keyColName
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setAcceptsFields
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DecomposedPredicate
name|decomposed
init|=
operator|new
name|DecomposedPredicate
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|searchConditions
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|()
decl_stmt|;
name|decomposed
operator|.
name|residualPredicate
operator|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|analyzer
operator|.
name|analyzePredicate
argument_list|(
name|predicate
argument_list|,
name|searchConditions
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|searchConditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|decomposed
operator|.
name|pushedPredicate
operator|=
name|analyzer
operator|.
name|translateSearchConditions
argument_list|(
name|searchConditions
argument_list|)
expr_stmt|;
try|try
block|{
name|decomposed
operator|.
name|pushedPredicateObject
operator|=
name|setupFilter
argument_list|(
name|keyColName
argument_list|,
name|searchConditions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|decomposed
return|;
block|}
specifier|private
name|HBaseScanRange
name|setupFilter
parameter_list|(
name|String
name|keyColName
parameter_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|conditions
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|>
name|fieldConds
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|condition
range|:
name|conditions
control|)
block|{
assert|assert
name|keyColName
operator|.
name|equals
argument_list|(
name|condition
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getColumn
argument_list|()
argument_list|)
assert|;
name|String
name|fieldName
init|=
name|condition
operator|.
name|getFields
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|fieldCond
init|=
name|fieldConds
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldCond
operator|==
literal|null
condition|)
block|{
name|fieldConds
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|fieldCond
operator|=
operator|new
name|ArrayList
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fieldCond
operator|.
name|add
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
name|HBaseScanRange
name|range
init|=
operator|new
name|HBaseScanRange
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|startRow
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|stopRow
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|StructTypeInfo
name|type
init|=
operator|(
name|StructTypeInfo
operator|)
name|keyMapping
operator|.
name|columnType
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|type
operator|.
name|getAllStructFieldNames
argument_list|()
control|)
block|{
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|fieldCond
init|=
name|fieldConds
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldCond
operator|==
literal|null
operator|||
name|fieldCond
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
continue|continue;
block|}
name|byte
index|[]
name|startElement
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|stopElement
init|=
literal|null
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|condition
range|:
name|fieldCond
control|)
block|{
if|if
condition|(
name|condition
operator|.
name|getConstantDesc
argument_list|()
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|comparisonOp
init|=
name|condition
operator|.
name|getComparisonOp
argument_list|()
decl_stmt|;
name|String
name|constantVal
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|condition
operator|.
name|getConstantDesc
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparisonOp
operator|.
name|endsWith
argument_list|(
literal|"UDFOPEqual"
argument_list|)
condition|)
block|{
name|startElement
operator|=
name|toBinary
argument_list|(
name|constantVal
argument_list|,
name|FIXED_LENGTH
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stopElement
operator|=
name|toBinary
argument_list|(
name|constantVal
argument_list|,
name|FIXED_LENGTH
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comparisonOp
operator|.
name|endsWith
argument_list|(
literal|"UDFOPEqualOrGreaterThan"
argument_list|)
condition|)
block|{
name|startElement
operator|=
name|toBinary
argument_list|(
name|constantVal
argument_list|,
name|FIXED_LENGTH
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comparisonOp
operator|.
name|endsWith
argument_list|(
literal|"UDFOPGreaterThan"
argument_list|)
condition|)
block|{
name|startElement
operator|=
name|toBinary
argument_list|(
name|constantVal
argument_list|,
name|FIXED_LENGTH
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comparisonOp
operator|.
name|endsWith
argument_list|(
literal|"UDFOPEqualOrLessThan"
argument_list|)
condition|)
block|{
name|stopElement
operator|=
name|toBinary
argument_list|(
name|constantVal
argument_list|,
name|FIXED_LENGTH
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comparisonOp
operator|.
name|endsWith
argument_list|(
literal|"UDFOPLessThan"
argument_list|)
condition|)
block|{
name|stopElement
operator|=
name|toBinary
argument_list|(
name|constantVal
argument_list|,
name|FIXED_LENGTH
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|comparisonOp
operator|+
literal|" is not a supported comparison operator"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startRow
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|startElement
operator|!=
literal|null
condition|)
block|{
name|startRow
operator|.
name|write
argument_list|(
name|startElement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|startRow
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|range
operator|.
name|setStartRow
argument_list|(
name|startRow
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|stopRow
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|stopElement
operator|!=
literal|null
condition|)
block|{
name|stopRow
operator|.
name|write
argument_list|(
name|stopElement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|stopRow
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|range
operator|.
name|setStopRow
argument_list|(
name|stopRow
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stopRow
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|startElement
operator|==
literal|null
operator|&&
name|stopElement
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|startRow
operator|!=
literal|null
operator|&&
name|startRow
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|range
operator|.
name|setStartRow
argument_list|(
name|startRow
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stopRow
operator|!=
literal|null
operator|&&
name|stopRow
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|range
operator|.
name|setStopRow
argument_list|(
name|stopRow
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|range
return|;
block|}
specifier|private
specifier|static
class|class
name|FixedLengthed
implements|implements
name|LazyObjectBase
block|{
specifier|private
specifier|final
name|int
name|fixedLength
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|FixedLengthed
parameter_list|(
name|int
name|fixedLength
parameter_list|)
block|{
name|this
operator|.
name|fixedLength
operator|=
name|fixedLength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ByteArrayRef
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|fields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|bytes
operator|.
name|getData
argument_list|()
decl_stmt|;
name|int
name|rowStart
init|=
name|start
decl_stmt|;
name|int
name|rowStop
init|=
name|rowStart
operator|+
name|fixedLength
decl_stmt|;
for|for
control|(
init|;
name|rowStart
operator|<
name|length
condition|;
name|rowStart
operator|=
name|rowStop
operator|+
literal|1
operator|,
name|rowStop
operator|=
name|rowStart
operator|+
name|fixedLength
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|rowStart
argument_list|,
name|rowStop
operator|-
name|rowStart
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StringArrayOI
extends|extends
name|BaseStructObjectInspector
block|{
specifier|private
name|int
name|length
decl_stmt|;
specifier|private
name|StringArrayOI
parameter_list|(
name|StructTypeInfo
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|type
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ois
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|(
name|names
argument_list|,
name|ois
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getStructFieldData
parameter_list|(
name|Object
name|data
parameter_list|,
name|StructField
name|fieldRef
parameter_list|)
block|{
return|return
operator|(
operator|(
name|FixedLengthed
operator|)
name|data
operator|)
operator|.
name|fields
operator|.
name|get
argument_list|(
operator|(
operator|(
name|MyField
operator|)
name|fieldRef
operator|)
operator|.
name|getFieldID
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getStructFieldsDataAsList
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
return|return
operator|(
operator|(
name|FixedLengthed
operator|)
name|data
operator|)
operator|.
name|fields
return|;
block|}
block|}
block|}
end_class

end_unit

