begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Avro  *   * DO NOT EDIT DIRECTLY  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
package|;
end_package

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"all"
argument_list|)
annotation|@
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|AvroGenerated
specifier|public
class|class
name|Address
extends|extends
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecordBase
implements|implements
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecord
block|{
specifier|public
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
name|SCHEMA$
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
operator|.
name|Parser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"{\"type\":\"record\",\"name\":\"Address\",\"namespace\":\"org.apache.hadoop.hive.hbase.avro\",\"fields\":[{\"name\":\"address1\",\"type\":\"string\"},{\"name\":\"address2\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"zipcode\",\"type\":\"long\"},{\"name\":\"county\",\"type\":[{\"type\":\"record\",\"name\":\"HomePhone\",\"fields\":[{\"name\":\"areaCode\",\"type\":\"long\"},{\"name\":\"number\",\"type\":\"long\"}]},{\"type\":\"record\",\"name\":\"OfficePhone\",\"fields\":[{\"name\":\"areaCode\",\"type\":\"long\"},{\"name\":\"number\",\"type\":\"long\"}]},\"string\",\"null\"]},{\"name\":\"aliases\",\"type\":[{\"type\":\"array\",\"items\":\"string\"},\"null\"]},{\"name\":\"metadata\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]}]}"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
name|getClassSchema
parameter_list|()
block|{
return|return
name|SCHEMA$
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|address1
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|address2
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|city
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|long
name|zipcode
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|county
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|aliases
decl_stmt|;
annotation|@
name|Deprecated
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|,
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|metadata
decl_stmt|;
comment|/**    * Default constructor.  Note that this does not initialize fields    * to their default values from the schema.  If that is desired then    * one should use<code>newBuilder()</code>.     */
specifier|public
name|Address
parameter_list|()
block|{}
comment|/**    * All-args constructor.    */
specifier|public
name|Address
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|address1
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|address2
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|city
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Long
name|zipcode
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|county
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|aliases
parameter_list|,
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|,
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|address1
operator|=
name|address1
expr_stmt|;
name|this
operator|.
name|address2
operator|=
name|address2
expr_stmt|;
name|this
operator|.
name|city
operator|=
name|city
expr_stmt|;
name|this
operator|.
name|zipcode
operator|=
name|zipcode
expr_stmt|;
name|this
operator|.
name|county
operator|=
name|county
expr_stmt|;
name|this
operator|.
name|aliases
operator|=
name|aliases
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
name|getSchema
parameter_list|()
block|{
return|return
name|SCHEMA$
return|;
block|}
comment|// Used by DatumWriter.  Applications should not call.
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|get
parameter_list|(
name|int
name|field$
parameter_list|)
block|{
switch|switch
condition|(
name|field$
condition|)
block|{
case|case
literal|0
case|:
return|return
name|address1
return|;
case|case
literal|1
case|:
return|return
name|address2
return|;
case|case
literal|2
case|:
return|return
name|city
return|;
case|case
literal|3
case|:
return|return
name|zipcode
return|;
case|case
literal|4
case|:
return|return
name|county
return|;
case|case
literal|5
case|:
return|return
name|aliases
return|;
case|case
literal|6
case|:
return|return
name|metadata
return|;
default|default:
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
argument_list|(
literal|"Bad index"
argument_list|)
throw|;
block|}
block|}
comment|// Used by DatumReader.  Applications should not call.
annotation|@
name|SuppressWarnings
argument_list|(
name|value
operator|=
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|put
parameter_list|(
name|int
name|field$
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|Object
name|value$
parameter_list|)
block|{
switch|switch
condition|(
name|field$
condition|)
block|{
case|case
literal|0
case|:
name|address1
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|address2
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|city
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|zipcode
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Long
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|county
operator|=
operator|(
name|java
operator|.
name|lang
operator|.
name|Object
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|aliases
operator|=
operator|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
operator|)
name|value$
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|metadata
operator|=
operator|(
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|,
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
operator|)
name|value$
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
argument_list|(
literal|"Bad index"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Gets the value of the 'address1' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|getAddress1
parameter_list|()
block|{
return|return
name|address1
return|;
block|}
comment|/**    * Sets the value of the 'address1' field.    * @param value the value to set.    */
specifier|public
name|void
name|setAddress1
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|value
parameter_list|)
block|{
name|this
operator|.
name|address1
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'address2' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|getAddress2
parameter_list|()
block|{
return|return
name|address2
return|;
block|}
comment|/**    * Sets the value of the 'address2' field.    * @param value the value to set.    */
specifier|public
name|void
name|setAddress2
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|value
parameter_list|)
block|{
name|this
operator|.
name|address2
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'city' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|getCity
parameter_list|()
block|{
return|return
name|city
return|;
block|}
comment|/**    * Sets the value of the 'city' field.    * @param value the value to set.    */
specifier|public
name|void
name|setCity
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|value
parameter_list|)
block|{
name|this
operator|.
name|city
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'zipcode' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|getZipcode
parameter_list|()
block|{
return|return
name|zipcode
return|;
block|}
comment|/**    * Sets the value of the 'zipcode' field.    * @param value the value to set.    */
specifier|public
name|void
name|setZipcode
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Long
name|value
parameter_list|)
block|{
name|this
operator|.
name|zipcode
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'county' field.    */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getCounty
parameter_list|()
block|{
return|return
name|county
return|;
block|}
comment|/**    * Sets the value of the 'county' field.    * @param value the value to set.    */
specifier|public
name|void
name|setCounty
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|county
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'aliases' field.    */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|getAliases
parameter_list|()
block|{
return|return
name|aliases
return|;
block|}
comment|/**    * Sets the value of the 'aliases' field.    * @param value the value to set.    */
specifier|public
name|void
name|setAliases
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|value
parameter_list|)
block|{
name|this
operator|.
name|aliases
operator|=
name|value
expr_stmt|;
block|}
comment|/**    * Gets the value of the 'metadata' field.    */
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|,
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
comment|/**    * Sets the value of the 'metadata' field.    * @param value the value to set.    */
specifier|public
name|void
name|setMetadata
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|,
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|value
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|value
expr_stmt|;
block|}
comment|/** Creates a new Address RecordBuilder */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
argument_list|()
return|;
block|}
comment|/** Creates a new Address RecordBuilder by copying an existing Builder */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|other
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/** Creates a new Address RecordBuilder by copying an existing Address instance */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|newBuilder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
name|other
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
argument_list|(
name|other
argument_list|)
return|;
block|}
comment|/**    * RecordBuilder for Address instances.    */
specifier|public
specifier|static
class|class
name|Builder
extends|extends
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecordBuilderBase
argument_list|<
name|Address
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|data
operator|.
name|RecordBuilder
argument_list|<
name|Address
argument_list|>
block|{
specifier|private
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|address1
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|address2
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|city
decl_stmt|;
specifier|private
name|long
name|zipcode
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|Object
name|county
decl_stmt|;
specifier|private
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|aliases
decl_stmt|;
specifier|private
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|,
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|metadata
decl_stmt|;
comment|/** Creates a new Builder */
specifier|private
name|Builder
parameter_list|()
block|{
name|super
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|SCHEMA$
argument_list|)
expr_stmt|;
block|}
comment|/** Creates a Builder by copying an existing Builder */
specifier|private
name|Builder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|other
operator|.
name|address1
argument_list|)
condition|)
block|{
name|this
operator|.
name|address1
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|address1
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|other
operator|.
name|address2
argument_list|)
condition|)
block|{
name|this
operator|.
name|address2
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|address2
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
argument_list|,
name|other
operator|.
name|city
argument_list|)
condition|)
block|{
name|this
operator|.
name|city
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|city
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
argument_list|,
name|other
operator|.
name|zipcode
argument_list|)
condition|)
block|{
name|this
operator|.
name|zipcode
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|zipcode
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
argument_list|,
name|other
operator|.
name|county
argument_list|)
condition|)
block|{
name|this
operator|.
name|county
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|county
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
argument_list|,
name|other
operator|.
name|aliases
argument_list|)
condition|)
block|{
name|this
operator|.
name|aliases
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|aliases
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
argument_list|,
name|other
operator|.
name|metadata
argument_list|)
condition|)
block|{
name|this
operator|.
name|metadata
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|metadata
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/** Creates a Builder by copying an existing Address instance */
specifier|private
name|Builder
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|SCHEMA$
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|other
operator|.
name|address1
argument_list|)
condition|)
block|{
name|this
operator|.
name|address1
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|address1
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|other
operator|.
name|address2
argument_list|)
condition|)
block|{
name|this
operator|.
name|address2
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|address2
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
argument_list|,
name|other
operator|.
name|city
argument_list|)
condition|)
block|{
name|this
operator|.
name|city
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|city
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
argument_list|,
name|other
operator|.
name|zipcode
argument_list|)
condition|)
block|{
name|this
operator|.
name|zipcode
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|zipcode
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
argument_list|,
name|other
operator|.
name|county
argument_list|)
condition|)
block|{
name|this
operator|.
name|county
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|county
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
argument_list|,
name|other
operator|.
name|aliases
argument_list|)
condition|)
block|{
name|this
operator|.
name|aliases
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|aliases
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isValidValue
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
argument_list|,
name|other
operator|.
name|metadata
argument_list|)
condition|)
block|{
name|this
operator|.
name|metadata
operator|=
name|data
argument_list|()
operator|.
name|deepCopy
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
operator|.
name|schema
argument_list|()
argument_list|,
name|other
operator|.
name|metadata
argument_list|)
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/** Gets the value of the 'address1' field */
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|getAddress1
parameter_list|()
block|{
return|return
name|address1
return|;
block|}
comment|/** Sets the value of the 'address1' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|setAddress1
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|address1
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks whether the 'address1' field has been set */
specifier|public
name|boolean
name|hasAddress1
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
return|;
block|}
comment|/** Clears the value of the 'address1' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|clearAddress1
parameter_list|()
block|{
name|address1
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Gets the value of the 'address2' field */
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|getAddress2
parameter_list|()
block|{
return|return
name|address2
return|;
block|}
comment|/** Sets the value of the 'address2' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|setAddress2
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|address2
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks whether the 'address2' field has been set */
specifier|public
name|boolean
name|hasAddress2
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
return|;
block|}
comment|/** Clears the value of the 'address2' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|clearAddress2
parameter_list|()
block|{
name|address2
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Gets the value of the 'city' field */
specifier|public
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|getCity
parameter_list|()
block|{
return|return
name|city
return|;
block|}
comment|/** Sets the value of the 'city' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|setCity
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|city
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks whether the 'city' field has been set */
specifier|public
name|boolean
name|hasCity
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
return|;
block|}
comment|/** Clears the value of the 'city' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|clearCity
parameter_list|()
block|{
name|city
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Gets the value of the 'zipcode' field */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Long
name|getZipcode
parameter_list|()
block|{
return|return
name|zipcode
return|;
block|}
comment|/** Sets the value of the 'zipcode' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|setZipcode
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|zipcode
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks whether the 'zipcode' field has been set */
specifier|public
name|boolean
name|hasZipcode
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
return|;
block|}
comment|/** Clears the value of the 'zipcode' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|clearZipcode
parameter_list|()
block|{
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Gets the value of the 'county' field */
specifier|public
name|java
operator|.
name|lang
operator|.
name|Object
name|getCounty
parameter_list|()
block|{
return|return
name|county
return|;
block|}
comment|/** Sets the value of the 'county' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|setCounty
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Object
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|county
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks whether the 'county' field has been set */
specifier|public
name|boolean
name|hasCounty
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
return|;
block|}
comment|/** Clears the value of the 'county' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|clearCounty
parameter_list|()
block|{
name|county
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Gets the value of the 'aliases' field */
specifier|public
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|getAliases
parameter_list|()
block|{
return|return
name|aliases
return|;
block|}
comment|/** Sets the value of the 'aliases' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|setAliases
parameter_list|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|aliases
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks whether the 'aliases' field has been set */
specifier|public
name|boolean
name|hasAliases
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
return|;
block|}
comment|/** Clears the value of the 'aliases' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|clearAliases
parameter_list|()
block|{
name|aliases
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Gets the value of the 'metadata' field */
specifier|public
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|,
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
comment|/** Sets the value of the 'metadata' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|setMetadata
parameter_list|(
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|,
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
name|value
parameter_list|)
block|{
name|validate
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|value
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/** Checks whether the 'metadata' field has been set */
specifier|public
name|boolean
name|hasMetadata
parameter_list|()
block|{
return|return
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
return|;
block|}
comment|/** Clears the value of the 'metadata' field */
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
operator|.
name|Builder
name|clearMetadata
parameter_list|()
block|{
name|metadata
operator|=
literal|null
expr_stmt|;
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
operator|=
literal|false
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Address
name|build
parameter_list|()
block|{
try|try
block|{
name|Address
name|record
init|=
operator|new
name|Address
argument_list|()
decl_stmt|;
name|record
operator|.
name|address1
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|0
index|]
condition|?
name|this
operator|.
name|address1
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|address2
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|1
index|]
condition|?
name|this
operator|.
name|address2
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|city
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|2
index|]
condition|?
name|this
operator|.
name|city
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|CharSequence
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|zipcode
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|3
index|]
condition|?
name|this
operator|.
name|zipcode
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Long
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|county
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|4
index|]
condition|?
name|this
operator|.
name|county
else|:
operator|(
name|java
operator|.
name|lang
operator|.
name|Object
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|aliases
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|5
index|]
condition|?
name|this
operator|.
name|aliases
else|:
operator|(
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|record
operator|.
name|metadata
operator|=
name|fieldSetFlags
argument_list|()
index|[
literal|6
index|]
condition|?
name|this
operator|.
name|metadata
else|:
operator|(
name|java
operator|.
name|util
operator|.
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|,
name|java
operator|.
name|lang
operator|.
name|CharSequence
argument_list|>
operator|)
name|defaultValue
argument_list|(
name|fields
argument_list|()
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|AvroRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

