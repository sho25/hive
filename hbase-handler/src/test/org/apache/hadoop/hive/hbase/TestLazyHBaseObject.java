begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|HBaseSerDe
operator|.
name|ColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyPrimitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazyMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazySimpleStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * TestLazyHBaseObject is a test for the LazyHBaseXXX classes.  */
end_comment

begin_class
specifier|public
class|class
name|TestLazyHBaseObject
extends|extends
name|TestCase
block|{
comment|/**    * Test the LazyMap class with Integer-to-String.    * @throws SerDeException    */
specifier|public
name|void
name|testLazyHBaseCellMap1
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// Map of Integer to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<int,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyHBaseCellMap
name|b
init|=
operator|new
name|LazyHBaseCellMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
decl_stmt|;
comment|// Initialize a result
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfacol1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfacol2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"def"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"8"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfccol3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|mapBinaryStorage
init|=
operator|new
name|ArrayList
argument_list|<
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|mapBinaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mapBinaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|b
operator|.
name|init
argument_list|(
name|r
argument_list|,
literal|"cfb"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"def"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|12345
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{0:'0',2:'def',8:'abc'}"
operator|.
name|replace
argument_list|(
literal|'\''
argument_list|,
literal|'\"'
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|b
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyMap class with String-to-String.    * @throws SerDeException    */
specifier|public
name|void
name|testLazyHBaseCellMap2
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// Map of String to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<string,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'#'
block|,
operator|(
name|byte
operator|)
literal|'\t'
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyHBaseCellMap
name|b
init|=
operator|new
name|LazyHBaseCellMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
decl_stmt|;
comment|// Initialize a result
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfacol1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfacol2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d\tf"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"8"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfccol3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|mapBinaryStorage
init|=
operator|new
name|ArrayList
argument_list|<
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|mapBinaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mapBinaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|b
operator|.
name|init
argument_list|(
name|r
argument_list|,
literal|"cfb"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"d\tf"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"8"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'0':'0','2':'d\\tf','8':'abc'}"
operator|.
name|replace
argument_list|(
literal|'\''
argument_list|,
literal|'\"'
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|b
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyHBaseCellMap class for the case where both the key and the value in the family    * map are stored in binary format using the appropriate LazyPrimitive objects.    * @throws SerDeException    */
specifier|public
name|void
name|testLazyHBaseCellMap3
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|TypeInfo
name|mapBinaryIntKeyValue
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
literal|"map<int,int>"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|mapBinaryIntKeyValue
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyHBaseCellMap
name|hbaseCellMap
init|=
operator|new
name|LazyHBaseCellMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
literal|"row-key"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfInt
init|=
literal|"cf-int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|mapBinaryStorage
init|=
operator|new
name|ArrayList
argument_list|<
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|mapBinaryStorage
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mapBinaryStorage
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfInt
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|IntWritable
name|expectedIntValue
init|=
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lazyPrimitive
init|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedIntValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedIntValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfInt
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedIntValue
operator|=
operator|new
name|IntWritable
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedIntValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedIntValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfInt
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedIntValue
operator|=
operator|new
name|IntWritable
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedIntValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedIntValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|TypeInfo
name|mapBinaryByteKeyValue
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
literal|"map<tinyint,tinyint>"
argument_list|)
decl_stmt|;
name|oi
operator|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|mapBinaryByteKeyValue
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|=
operator|new
name|LazyHBaseCellMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cfByte
init|=
literal|"cf-byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfByte
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfByte
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|ByteWritable
name|expectedByteValue
init|=
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
decl_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedByteValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedByteValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfByte
argument_list|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MIN_VALUE
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MIN_VALUE
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfByte
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedByteValue
operator|=
operator|new
name|ByteWritable
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedByteValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedByteValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfByte
argument_list|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MAX_VALUE
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MAX_VALUE
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfByte
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedByteValue
operator|=
operator|new
name|ByteWritable
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedByteValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedByteValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|TypeInfo
name|mapBinaryShortKeyValue
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
literal|"map<smallint,smallint>"
argument_list|)
decl_stmt|;
name|oi
operator|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|mapBinaryShortKeyValue
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|=
operator|new
name|LazyHBaseCellMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cfShort
init|=
literal|"cf-short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfShort
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|ShortWritable
name|expectedShortValue
init|=
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedShortValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedShortValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfShort
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedShortValue
operator|=
operator|new
name|ShortWritable
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedShortValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedShortValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfShort
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedShortValue
operator|=
operator|new
name|ShortWritable
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedShortValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedShortValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|TypeInfo
name|mapBinaryLongKeyValue
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
literal|"map<bigint,bigint>"
argument_list|)
decl_stmt|;
name|oi
operator|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|mapBinaryLongKeyValue
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|=
operator|new
name|LazyHBaseCellMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cfLong
init|=
literal|"cf-long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfLong
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|LongWritable
name|expectedLongValue
init|=
operator|new
name|LongWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedLongValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLongValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfLong
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedLongValue
operator|=
operator|new
name|LongWritable
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedLongValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLongValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfLong
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedLongValue
operator|=
operator|new
name|LongWritable
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedLongValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLongValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|TypeInfo
name|mapBinaryFloatKeyValue
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
literal|"map<float,float>"
argument_list|)
decl_stmt|;
name|oi
operator|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|mapBinaryFloatKeyValue
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|=
operator|new
name|LazyHBaseCellMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cfFloat
init|=
literal|"cf-float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
literal|1.0F
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
literal|1.0F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfFloat
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|FloatWritable
name|expectedFloatValue
init|=
operator|new
name|FloatWritable
argument_list|(
literal|1.0F
argument_list|)
decl_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedFloatValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFloatValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
name|Float
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
name|Float
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfFloat
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedFloatValue
operator|=
operator|new
name|FloatWritable
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedFloatValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFloatValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
name|Float
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
name|Float
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfFloat
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedFloatValue
operator|=
operator|new
name|FloatWritable
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedFloatValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFloatValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|TypeInfo
name|mapBinaryDoubleKeyValue
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
literal|"map<double,double>"
argument_list|)
decl_stmt|;
name|oi
operator|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|mapBinaryDoubleKeyValue
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|=
operator|new
name|LazyHBaseCellMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cfDouble
init|=
literal|"cf-double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1.0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfDouble
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|DoubleWritable
name|expectedDoubleValue
init|=
operator|new
name|DoubleWritable
argument_list|(
literal|1.0
argument_list|)
decl_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedDoubleValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedDoubleValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfDouble
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedDoubleValue
operator|=
operator|new
name|DoubleWritable
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedDoubleValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedDoubleValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfDouble
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedDoubleValue
operator|=
operator|new
name|DoubleWritable
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedDoubleValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedDoubleValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|TypeInfo
name|mapBinaryBooleanKeyValue
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
literal|"map<boolean,boolean>"
argument_list|)
decl_stmt|;
name|oi
operator|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|mapBinaryBooleanKeyValue
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|=
operator|new
name|LazyHBaseCellMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cfBoolean
init|=
literal|"cf-boolean"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfBoolean
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|false
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfBoolean
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|BooleanWritable
name|expectedBooleanValue
init|=
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedBooleanValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBooleanValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfBoolean
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|true
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|hbaseCellMap
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|cfBoolean
argument_list|,
name|mapBinaryStorage
argument_list|)
expr_stmt|;
name|expectedBooleanValue
operator|=
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lazyPrimitive
operator|=
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|hbaseCellMap
operator|.
name|getMapValueElement
argument_list|(
name|expectedBooleanValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBooleanValue
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyHBaseRow class with one-for-one mappings between    * Hive fields and HBase columns.    * @throws SerDeException    */
specifier|public
name|void
name|testLazyHBaseRow1
parameter_list|()
throws|throws
name|SerDeException
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"string,int,array<string>,map<string,string>,string"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"key"
block|,
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|)
decl_stmt|;
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|String
name|hbaseColsMapping
init|=
literal|":key,cfa:a,cfa:b,cfb:c,cfb:d"
decl_stmt|;
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|columnsMapping
init|=
literal|null
decl_stmt|;
try|try
block|{
name|columnsMapping
operator|=
name|parseColumnsMapping
argument_list|(
name|hbaseColsMapping
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnsMapping
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ColumnMapping
name|colMap
init|=
name|columnsMapping
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|colMap
operator|.
name|hbaseRowKey
operator|&&
name|colMap
operator|.
name|qualifierName
operator|==
literal|null
condition|)
block|{
name|colMap
operator|.
name|binaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|colMap
operator|.
name|binaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colMap
operator|.
name|binaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyStructInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypeInfos
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|' '
block|,
literal|':'
block|,
literal|'='
block|}
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyHBaseRow
name|o
init|=
operator|new
name|LazyHBaseRow
argument_list|(
operator|(
name|LazySimpleStructObjectInspector
operator|)
name|oi
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a:b:c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d=e:f=g"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hi"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|o
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|columnsMapping
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|"{'key':'test-row','a':123,'b':['a','b','c'],"
operator|+
literal|"'c':{'d':'e','f':'g'},'d':'hi'}"
operator|)
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d=e:f=g"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|o
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|columnsMapping
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|"{'key':'test-row','a':123,'b':null,"
operator|+
literal|"'c':{'d':'e','f':'g'},'d':null}"
operator|)
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d=\\N:f=g:h"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"no"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|o
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|columnsMapping
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|"{'key':'test-row','a':null,'b':['a'],"
operator|+
literal|"'c':{'d':null,'f':'g','h':null},'d':'no'}"
operator|)
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|":a::"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"no"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|o
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|columnsMapping
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|"{'key':'test-row','a':null,'b':['','a','',''],"
operator|+
literal|"'c':null,'d':'no'}"
operator|)
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
comment|// This is intentionally duplicated because of HIVE-3179
name|assertEquals
argument_list|(
operator|(
literal|"{'key':'test-row','a':null,'b':['','a','',''],"
operator|+
literal|"'c':null,'d':'no'}"
operator|)
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|o
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|columnsMapping
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'key':'test-row','a':123,'b':[],'c':{},'d':''}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyHBaseRow class with a mapping from a Hive field to    * an HBase column family.    * @throws SerDeException    */
specifier|public
name|void
name|testLazyHBaseRow2
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// column family is mapped to Map<string,string>
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"string,int,array<string>,map<string,string>,string"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"key"
block|,
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|)
decl_stmt|;
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|columnsMapping
init|=
literal|null
decl_stmt|;
name|String
name|hbaseColsMapping
init|=
literal|":key,cfa:a,cfa:b,cfb:,cfc:d"
decl_stmt|;
try|try
block|{
name|columnsMapping
operator|=
name|parseColumnsMapping
argument_list|(
name|hbaseColsMapping
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnsMapping
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ColumnMapping
name|colMap
init|=
name|columnsMapping
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|colMap
operator|.
name|hbaseRowKey
operator|&&
name|colMap
operator|.
name|qualifierName
operator|==
literal|null
condition|)
block|{
name|colMap
operator|.
name|binaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|colMap
operator|.
name|binaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colMap
operator|.
name|binaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyStructInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypeInfos
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|' '
block|,
literal|':'
block|,
literal|'='
block|}
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyHBaseRow
name|o
init|=
operator|new
name|LazyHBaseRow
argument_list|(
operator|(
name|LazySimpleStructObjectInspector
operator|)
name|oi
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a:b:c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hi"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|o
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|columnsMapping
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|"{'key':'test-row','a':123,'b':['a','b','c'],"
operator|+
literal|"'c':{'d':'e','f':'g'},'d':'hi'}"
operator|)
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|o
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|columnsMapping
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|"{'key':'test-row','a':123,'b':null,"
operator|+
literal|"'c':{'d':'e','f':'g'},'d':null}"
operator|)
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"no"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|o
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|columnsMapping
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|"{'key':'test-row','a':null,'b':['a'],"
operator|+
literal|"'c':{'f':'g'},'d':'no'}"
operator|)
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|":a::"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"no"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|o
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|columnsMapping
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|"{'key':'test-row','a':null,'b':['','a','',''],"
operator|+
literal|"'c':{},'d':'no'}"
operator|)
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|o
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|columnsMapping
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'key':'test-row','a':123,'b':[],'c':{},'d':''}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyHBaseRow class with a one-to-one/onto mapping between Hive columns and    * HBase column family/column qualifier pairs. The column types are primitive and fields    * are stored in binary format in HBase.    * @throws SerDeException    */
specifier|public
name|void
name|testLazyHBaseRow3
parameter_list|()
throws|throws
name|SerDeException
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"string,int,tinyint,smallint,bigint,float,double,string,boolean"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"key"
block|,
literal|"c_int"
block|,
literal|"c_byte"
block|,
literal|"c_short"
block|,
literal|"c_long"
block|,
literal|"c_float"
block|,
literal|"c_double"
block|,
literal|"c_string"
block|,
literal|"c_bool"
block|}
argument_list|)
decl_stmt|;
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|String
name|hbaseColumnsMapping
init|=
literal|":key#str,cf-int:cq-int#bin,cf-byte:cq-byte#bin,"
operator|+
literal|"cf-short:cq-short#bin,cf-long:cq-long#bin,cf-float:cq-float#bin,cf-double:cq-double#bin,"
operator|+
literal|"cf-string:cq-string#str,cf-bool:cq-bool#bin"
decl_stmt|;
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|columnsMapping
init|=
literal|null
decl_stmt|;
try|try
block|{
name|columnsMapping
operator|=
name|parseColumnsMapping
argument_list|(
name|hbaseColumnsMapping
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|sde
parameter_list|)
block|{
name|fail
argument_list|(
name|sde
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnsMapping
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ColumnMapping
name|colMap
init|=
name|columnsMapping
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
literal|7
condition|)
block|{
name|colMap
operator|.
name|binaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colMap
operator|.
name|binaryStorage
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyStructInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypeInfos
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|' '
block|,
literal|':'
block|,
literal|'='
block|}
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyHBaseRow
name|o
init|=
operator|new
name|LazyHBaseRow
argument_list|(
operator|(
name|LazySimpleStructObjectInspector
operator|)
name|oi
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
literal|"row-key"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|columnsMapping
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|1
case|:
name|value
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|value
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|}
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|value
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|value
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|value
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
literal|1.0F
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|value
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|double
operator|)
literal|1.0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|value
operator|=
literal|"Hadoop, Hive, with HBase storage handler."
operator|.
name|getBytes
argument_list|()
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|value
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not expected: "
operator|+
name|i
argument_list|)
throw|;
block|}
name|ColumnMapping
name|colMap
init|=
name|columnsMapping
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|colMap
operator|.
name|familyNameBytes
argument_list|,
name|colMap
operator|.
name|qualifierNameBytes
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|kvs
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|o
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|columnsMapping
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getStructFieldData
argument_list|(
name|o
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|fieldData
operator|!=
literal|null
operator|)
assert|;
assert|assert
operator|(
name|fieldData
operator|instanceof
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
assert|;
name|Writable
name|writable
init|=
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|fieldData
operator|)
operator|.
name|getWritableObject
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
literal|"row-key"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|writable
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|IntWritable
name|iw
init|=
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|iw
argument_list|,
name|writable
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|ByteWritable
name|bw
init|=
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bw
argument_list|,
name|writable
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|ShortWritable
name|sw
init|=
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sw
argument_list|,
name|writable
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|LongWritable
name|lw
init|=
operator|new
name|LongWritable
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lw
argument_list|,
name|writable
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|FloatWritable
name|fw
init|=
operator|new
name|FloatWritable
argument_list|(
literal|1.0F
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fw
argument_list|,
name|writable
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|DoubleWritable
name|dw
init|=
operator|new
name|DoubleWritable
argument_list|(
literal|1.0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dw
argument_list|,
name|writable
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|Text
name|t
init|=
operator|new
name|Text
argument_list|(
literal|"Hadoop, Hive, with HBase storage handler."
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|,
name|writable
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|BooleanWritable
name|boolWritable
init|=
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|boolWritable
argument_list|,
name|writable
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"Error: Unanticipated value in deserializing fields for HBaseSerDe."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * Parses the HBase columns mapping specifier to identify the column families, qualifiers    * and also caches the byte arrays corresponding to them. One of the Hive table    * columns maps to the HBase row key, by default the first column.    *    * @param columnsMappingSpec string hbase.columns.mapping specified when creating table    * @return List<ColumnMapping> which contains the column mapping information by position    * @throws SerDeException    */
specifier|public
specifier|static
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|parseColumnsMapping
parameter_list|(
name|String
name|columnsMappingSpec
parameter_list|)
throws|throws
name|SerDeException
block|{
return|return
name|HBaseSerDe
operator|.
name|parseColumnsMapping
argument_list|(
name|columnsMappingSpec
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

