begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazyMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|TestLazyHBaseCellMap
block|{
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|TEST_ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUAL_PREFIX
init|=
literal|"col_"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testInitColumnPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<string,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyHBaseCellMap
name|b
init|=
operator|new
name|LazyHBaseCellMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|oi
argument_list|)
decl_stmt|;
comment|// Initialize a result
name|Cell
index|[]
name|cells
init|=
operator|new
name|KeyValue
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|String
name|col1
init|=
literal|"1"
decl_stmt|;
specifier|final
name|String
name|col2
init|=
literal|"2"
decl_stmt|;
name|cells
index|[
literal|0
index|]
operator|=
operator|new
name|KeyValue
argument_list|(
name|TEST_ROW
argument_list|,
name|COLUMN_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|QUAL_PREFIX
operator|+
name|col1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfacol1"
argument_list|)
argument_list|)
expr_stmt|;
name|cells
index|[
literal|1
index|]
operator|=
operator|new
name|KeyValue
argument_list|(
name|TEST_ROW
argument_list|,
name|COLUMN_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|QUAL_PREFIX
operator|+
name|col2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cfacol2"
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|mapBinaryStorage
init|=
operator|new
name|ArrayList
argument_list|<
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|mapBinaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mapBinaryStorage
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|b
operator|.
name|init
argument_list|(
name|r
argument_list|,
name|COLUMN_FAMILY
argument_list|,
name|mapBinaryStorage
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|QUAL_PREFIX
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
name|col1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
name|col2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

