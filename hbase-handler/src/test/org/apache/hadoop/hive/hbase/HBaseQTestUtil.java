begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|QTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_comment
comment|/**  * HBaseQTestUtil defines HBase-specific test fixtures.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseQTestUtil
extends|extends
name|QTestUtil
block|{
specifier|private
name|String
name|tmpdir
decl_stmt|;
specifier|private
name|MiniHBaseCluster
name|hbase
init|=
literal|null
decl_stmt|;
specifier|private
name|MiniZooKeeperCluster
name|zooKeeperCluster
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_REGIONSERVERS
init|=
literal|1
decl_stmt|;
specifier|public
name|HBaseQTestUtil
parameter_list|(
name|String
name|outDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|boolean
name|miniMr
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|outDir
argument_list|,
name|logDir
argument_list|,
name|miniMr
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|preTestUtilInit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup the hbase Cluster
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.master"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|tmpdir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
operator|+
literal|"/../build/ql/tmp"
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rootdir"
argument_list|,
literal|"file://"
operator|+
name|tmpdir
operator|+
literal|"/hbase"
argument_list|)
expr_stmt|;
name|zooKeeperCluster
operator|=
operator|new
name|MiniZooKeeperCluster
argument_list|()
expr_stmt|;
name|int
name|clientPort
init|=
name|zooKeeperCluster
operator|.
name|startup
argument_list|(
operator|new
name|File
argument_list|(
name|tmpdir
argument_list|,
literal|"zookeeper"
argument_list|)
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.zookeeper.property.clientPort"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|clientPort
argument_list|)
argument_list|)
expr_stmt|;
name|HBaseConfiguration
name|hbaseConf
init|=
operator|new
name|HBaseConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hbase
operator|=
operator|new
name|MiniHBaseCluster
argument_list|(
name|hbaseConf
argument_list|,
name|NUM_REGIONSERVERS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.master"
argument_list|,
name|hbase
operator|.
name|getHMasterAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// opening the META table ensures that cluster is running
operator|new
name|HTable
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|hbase
operator|!=
literal|null
condition|)
block|{
name|hbase
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|zooKeeperCluster
operator|!=
literal|null
condition|)
block|{
name|zooKeeperCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|String
name|auxJars
init|=
name|conf
operator|.
name|getAuxJars
argument_list|()
decl_stmt|;
name|auxJars
operator|=
operator|(
operator|(
name|auxJars
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
operator|(
name|auxJars
operator|+
literal|","
operator|)
operator|)
operator|+
literal|"file://"
operator|+
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|HBaseConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getJar
argument_list|()
expr_stmt|;
name|auxJars
operator|+=
literal|",file://"
operator|+
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|HBaseSerDe
operator|.
name|class
argument_list|)
operator|.
name|getJar
argument_list|()
expr_stmt|;
name|auxJars
operator|+=
literal|",file://"
operator|+
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|,
name|Watcher
operator|.
name|class
argument_list|)
operator|.
name|getJar
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setAuxJars
argument_list|(
name|auxJars
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hbase
operator|!=
literal|null
condition|)
block|{
name|HConnectionManager
operator|.
name|deleteConnectionInfo
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hbase
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|hbase
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|zooKeeperCluster
operator|!=
literal|null
condition|)
block|{
name|zooKeeperCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|zooKeeperCluster
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

