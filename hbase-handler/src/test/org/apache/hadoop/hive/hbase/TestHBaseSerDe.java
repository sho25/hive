begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyPrimitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Tests the HBaseSerDe class.  */
end_comment

begin_class
specifier|public
class|class
name|TestHBaseSerDe
extends|extends
name|TestCase
block|{
comment|/**    * Test the LazySimpleSerDe class.    */
specifier|public
name|void
name|testHBaseSerDe
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// Create the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createProperties
argument_list|()
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfb
init|=
literal|"colb"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfc
init|=
literal|"colc"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualByte
init|=
literal|"byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualShort
init|=
literal|"short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualInt
init|=
literal|"int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualLong
init|=
literal|"long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualFloat
init|=
literal|"float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualDouble
init|=
literal|"double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualString
init|=
literal|"string"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualBool
init|=
literal|"boolean"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualByte
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|kvs
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualByte
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|123
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|456
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
literal|789
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
literal|1000
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
operator|-
literal|0.01F
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
literal|5.3
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
decl_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deserializeAndSerialize
parameter_list|(
name|HBaseSerDe
name|serDe
parameter_list|,
name|Result
name|r
parameter_list|,
name|Put
name|p
parameter_list|,
name|Object
index|[]
name|expectedFieldsData
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// Get the row structure
name|StructObjectInspector
name|oi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|fieldRefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deserialize
name|Object
name|row
init|=
name|serDe
operator|.
name|deserialize
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldData
operator|!=
literal|null
condition|)
block|{
name|fieldData
operator|=
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|fieldData
operator|)
operator|.
name|getWritableObject
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Field "
operator|+
name|i
argument_list|,
name|expectedFieldsData
index|[
name|i
index|]
argument_list|,
name|fieldData
argument_list|)
expr_stmt|;
block|}
comment|// Serialize
name|assertEquals
argument_list|(
name|Put
operator|.
name|class
argument_list|,
name|serDe
operator|.
name|getSerializedClass
argument_list|()
argument_list|)
expr_stmt|;
name|Put
name|serializedPut
init|=
operator|(
name|Put
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|oi
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Serialized data"
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|serializedPut
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createProperties
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|"cola:byte,colb:short,colc:int,cola:long,colb:float,colc:double,cola:string,colb:boolean"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
block|}
end_class

end_unit

