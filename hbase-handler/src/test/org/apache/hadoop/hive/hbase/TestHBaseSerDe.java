begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyPrimitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Tests the HBaseSerDe class.  */
end_comment

begin_class
specifier|public
class|class
name|TestHBaseSerDe
extends|extends
name|TestCase
block|{
comment|/**    * Test the default behavior of the Lazy family of objects and object inspectors.    */
specifier|public
name|void
name|testHBaseSerDeI
parameter_list|()
throws|throws
name|SerDeException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfb
init|=
literal|"colb"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfc
init|=
literal|"colc"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualByte
init|=
literal|"byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualShort
init|=
literal|"short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualInt
init|=
literal|"int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualLong
init|=
literal|"long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualFloat
init|=
literal|"float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualDouble
init|=
literal|"double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualString
init|=
literal|"string"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualBool
init|=
literal|"boolean"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualByte
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|kvs
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualByte
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|123
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|456
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
literal|789
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
literal|1000
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
operator|-
literal|0.01F
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
literal|5.3
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesI_I
argument_list|()
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
name|serDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesI_II
argument_list|()
expr_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
name|serDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesI_III
argument_list|()
expr_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
name|serDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesI_IV
argument_list|()
expr_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithTimestamp
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// Create the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesI_I
argument_list|()
decl_stmt|;
name|long
name|putTimestamp
init|=
literal|1
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_PUT_TIMESTAMP
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|putTimestamp
argument_list|)
argument_list|)
expr_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfb
init|=
literal|"colb"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfc
init|=
literal|"colc"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualByte
init|=
literal|"byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualShort
init|=
literal|"short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualInt
init|=
literal|"int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualLong
init|=
literal|"long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualFloat
init|=
literal|"float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualDouble
init|=
literal|"double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualString
init|=
literal|"string"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualBool
init|=
literal|"boolean"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualByte
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|kvs
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|,
name|putTimestamp
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualByte
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|123
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|456
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
literal|789
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
literal|1000
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
operator|-
literal|0.01F
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
literal|5.3
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
decl_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deserializeAndSerialize
parameter_list|(
name|HBaseSerDe
name|serDe
parameter_list|,
name|Result
name|r
parameter_list|,
name|Put
name|p
parameter_list|,
name|Object
index|[]
name|expectedFieldsData
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// Get the row structure
name|StructObjectInspector
name|oi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|fieldRefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deserialize
name|Object
name|row
init|=
name|serDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldData
operator|!=
literal|null
condition|)
block|{
name|fieldData
operator|=
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|fieldData
operator|)
operator|.
name|getWritableObject
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Field "
operator|+
name|i
argument_list|,
name|expectedFieldsData
index|[
name|i
index|]
argument_list|,
name|fieldData
argument_list|)
expr_stmt|;
block|}
comment|// Serialize
name|assertEquals
argument_list|(
name|PutWritable
operator|.
name|class
argument_list|,
name|serDe
operator|.
name|getSerializedClass
argument_list|()
argument_list|)
expr_stmt|;
name|PutWritable
name|serializedPut
init|=
operator|(
name|PutWritable
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|oi
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Serialized data"
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|serializedPut
operator|.
name|getPut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// No specifications default to UTF8 String storage for backwards compatibility
specifier|private
name|Properties
name|createPropertiesI_I
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|"cola:byte,colb:short,colc:int,cola:long,colb:float,colc:double,cola:string,colb:boolean"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
comment|// Default column storage specification inherits from table level default
comment|// (in this case a missing specification) of UTF String storage
specifier|private
name|Properties
name|createPropertiesI_II
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cola:byte#s,colb:short#-,colc:int#s,cola:long#s,colb:float#-,colc:double#-,"
operator|+
literal|"cola:string#s,colb:boolean#s"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
comment|// String storage type overrides table level default of binary storage
specifier|private
name|Properties
name|createPropertiesI_III
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#s,cola:byte#s,colb:short#s,colc:int#s,cola:long#s,colb:float#s,colc:double#s,"
operator|+
literal|"cola:string#s,colb:boolean#s"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
comment|// String type is never stored as anything other than an escaped string
comment|// A specification of binary storage should not affect ser/de.
specifier|private
name|Properties
name|createPropertiesI_IV
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cola:byte#s,colb:short#s,colc:int#s,cola:long#s,colb:float#s,colc:double#s,"
operator|+
literal|"cola:string#b,colb:boolean#s"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeII
parameter_list|()
throws|throws
name|SerDeException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cfa"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfb
init|=
literal|"cfb"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfc
init|=
literal|"cfc"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualByte
init|=
literal|"byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualShort
init|=
literal|"short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualInt
init|=
literal|"int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualLong
init|=
literal|"long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualFloat
init|=
literal|"float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualDouble
init|=
literal|"double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualString
init|=
literal|"string"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualBool
init|=
literal|"boolean"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row-2"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualByte
argument_list|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MIN_VALUE
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive Again!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|kvs
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualByte
argument_list|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MIN_VALUE
block|}
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive Again!"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"test-row-2"
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"Hadoop, HBase, and Hive Again!"
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesII_I
argument_list|()
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
name|serDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesII_II
argument_list|()
expr_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
name|serDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesII_III
argument_list|()
expr_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesII_I
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cfa:byte#b,cfb:short#b,cfc:int#-,cfa:long#b,cfb:float#-,cfc:double#b,"
operator|+
literal|"cfa:string#b,cfb:boolean#-"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|Properties
name|createPropertiesII_II
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#b,cfa:byte#b,cfb:short#b,cfc:int#b,cfa:long#b,cfb:float#b,cfc:double#b,"
operator|+
literal|"cfa:string#b,cfb:boolean#b"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|Properties
name|createPropertiesII_III
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cfa:byte#b,cfb:short#b,cfc:int#b,cfa:long#b,cfb:float#b,cfc:double#b,"
operator|+
literal|"cfa:string#-,cfb:boolean#b"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithHiveMapToHBaseColumnFamily
parameter_list|()
throws|throws
name|SerDeException
block|{
name|byte
index|[]
name|cfint
init|=
literal|"cf-int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfbyte
init|=
literal|"cf-byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfshort
init|=
literal|"cf-short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cflong
init|=
literal|"cf-long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cffloat
init|=
literal|"cf-float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfdouble
init|=
literal|"cf-double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfbool
init|=
literal|"cf-bool"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|columnFamilies
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|cfint
block|,
name|cfbyte
block|,
name|cfshort
block|,
name|cflong
block|,
name|cffloat
block|,
name|cfdouble
block|,
name|cfbool
block|}
decl_stmt|;
name|byte
index|[]
index|[]
name|rowKeys
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
operator|.
name|getBytes
argument_list|()
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
operator|.
name|getBytes
argument_list|()
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|getBytes
argument_list|()
block|}
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|columnQualifiersAndValues
init|=
operator|new
name|byte
index|[]
index|[]
index|[]
block|{
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
literal|1.0F
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1.0
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|true
argument_list|)
block|}
block|,
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MIN_VALUE
block|}
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|short
operator|)
name|Short
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
name|Long
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
name|Float
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|false
argument_list|)
block|}
block|,
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MAX_VALUE
block|}
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|short
operator|)
name|Short
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
name|Float
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|true
argument_list|)
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|Result
index|[]
name|r
init|=
operator|new
name|Result
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
decl_stmt|;
name|Put
index|[]
name|p
init|=
operator|new
name|Put
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p
index|[
name|i
index|]
operator|=
operator|new
name|Put
argument_list|(
name|rowKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columnQualifiersAndValues
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKeys
index|[
name|i
index|]
argument_list|,
name|columnFamilies
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|p
index|[
name|i
index|]
operator|.
name|add
argument_list|(
name|columnFamilies
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|r
index|[
name|i
index|]
operator|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
index|[]
name|expectedData
init|=
block|{
block|{
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
literal|1.0F
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
literal|1.0
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
block|,
block|{
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
block|}
block|,
block|{
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
block|}
decl_stmt|;
name|HBaseSerDe
name|hbaseSerDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForHiveMapHBaseColumnFamily
argument_list|()
decl_stmt|;
name|hbaseSerDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveMapHBaseColumnFamily
argument_list|(
name|hbaseSerDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedData
argument_list|,
name|rowKeys
argument_list|,
name|columnFamilies
argument_list|,
name|columnQualifiersAndValues
argument_list|)
expr_stmt|;
name|hbaseSerDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesForHiveMapHBaseColumnFamilyII
argument_list|()
expr_stmt|;
name|hbaseSerDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveMapHBaseColumnFamily
argument_list|(
name|hbaseSerDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedData
argument_list|,
name|rowKeys
argument_list|,
name|columnFamilies
argument_list|,
name|columnQualifiersAndValues
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deserializeAndSerializeHiveMapHBaseColumnFamily
parameter_list|(
name|HBaseSerDe
name|hbaseSerDe
parameter_list|,
name|Result
index|[]
name|r
parameter_list|,
name|Put
index|[]
name|p
parameter_list|,
name|Object
index|[]
index|[]
name|expectedData
parameter_list|,
name|byte
index|[]
index|[]
name|rowKeys
parameter_list|,
name|byte
index|[]
index|[]
name|columnFamilies
parameter_list|,
name|byte
index|[]
index|[]
index|[]
name|columnQualifiersAndValues
parameter_list|)
throws|throws
name|SerDeException
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|hbaseSerDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|fieldRefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deserialize
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|row
init|=
name|hbaseSerDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Put
name|serializedPut
init|=
operator|(
operator|(
name|PutWritable
operator|)
name|hbaseSerDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
operator|)
operator|.
name|getPut
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|serializedPut
operator|.
name|getRow
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|rowKey
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|rowKey
index|[
name|k
index|]
argument_list|,
name|rowKeys
index|[
name|i
index|]
index|[
name|k
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|columnFamilies
operator|.
name|length
argument_list|,
name|serializedPut
operator|.
name|numFamilies
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedData
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|,
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|fieldData
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyHBaseCellMap
condition|)
block|{
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lazyPrimitive
init|=
call|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
argument_list|)
operator|.
name|getMapValueElement
argument_list|(
name|expectedData
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedData
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Error: field data not an instance of LazyPrimitive<?,?> or LazyMap"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Properties
name|createPropertiesForHiveMapHBaseColumnFamily
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,valint,valbyte,valshort,vallong,valfloat,valdouble,valbool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string:map<int,int>:map<tinyint,tinyint>:map<smallint,smallint>:map<bigint,bigint>:"
operator|+
literal|"map<float,float>:map<double,double>:map<boolean,boolean>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cf-int:#b:b,cf-byte:#b:b,cf-short:#b:b,cf-long:#b:b,cf-float:#b:b,cf-double:#b:b,"
operator|+
literal|"cf-bool:#b:b"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveMapHBaseColumnFamilyII
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,valint,valbyte,valshort,vallong,valfloat,valdouble,valbool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string:map<int,int>:map<tinyint,tinyint>:map<smallint,smallint>:map<bigint,bigint>:"
operator|+
literal|"map<float,float>:map<double,double>:map<boolean,boolean>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cf-int:#-:-,cf-byte:#-:-,cf-short:#-:-,cf-long:#-:-,cf-float:#-:-,cf-double:#-:-,"
operator|+
literal|"cf-bool:#-:-"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithHiveMapToHBaseColumnFamilyII
parameter_list|()
throws|throws
name|SerDeException
block|{
name|byte
index|[]
name|cfbyte
init|=
literal|"cf-byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfshort
init|=
literal|"cf-short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfint
init|=
literal|"cf-int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cflong
init|=
literal|"cf-long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cffloat
init|=
literal|"cf-float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfdouble
init|=
literal|"cf-double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfstring
init|=
literal|"cf-string"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfbool
init|=
literal|"cf-bool"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|columnFamilies
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|cfbyte
block|,
name|cfshort
block|,
name|cfint
block|,
name|cflong
block|,
name|cffloat
block|,
name|cfdouble
block|,
name|cfstring
block|,
name|cfbool
block|}
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row-key"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|columnQualifiersAndValues
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hive"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
block|}
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columnQualifiersAndValues
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|columnFamilies
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|columnFamilies
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Object
index|[]
name|expectedData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"row-key"
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|123
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|456
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
literal|789
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
literal|1000
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
operator|-
literal|0.01F
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
literal|5.3
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"Hive"
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
decl_stmt|;
name|HBaseSerDe
name|hbaseSerDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForHiveMapHBaseColumnFamilyII_I
argument_list|()
decl_stmt|;
name|hbaseSerDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveMapHBaseColumnFamilyII
argument_list|(
name|hbaseSerDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedData
argument_list|,
name|columnFamilies
argument_list|,
name|columnQualifiersAndValues
argument_list|)
expr_stmt|;
name|hbaseSerDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesForHiveMapHBaseColumnFamilyII_II
argument_list|()
expr_stmt|;
name|hbaseSerDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveMapHBaseColumnFamilyII
argument_list|(
name|hbaseSerDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedData
argument_list|,
name|columnFamilies
argument_list|,
name|columnQualifiersAndValues
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveMapHBaseColumnFamilyII_I
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,valbyte,valshort,valint,vallong,valfloat,valdouble,valstring,valbool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string:map<tinyint,tinyint>:map<smallint,smallint>:map<int,int>:map<bigint,bigint>:"
operator|+
literal|"map<float,float>:map<double,double>:map<string,string>:map<boolean,boolean>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#s,cf-byte:#-:s,cf-short:#s:-,cf-int:#s:s,cf-long:#-:-,cf-float:#s:-,cf-double:#-:s,"
operator|+
literal|"cf-string:#s:s,cf-bool:#-:-"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveMapHBaseColumnFamilyII_II
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,valbyte,valshort,valint,vallong,valfloat,valdouble,valstring,valbool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string:map<tinyint,tinyint>:map<smallint,smallint>:map<int,int>:map<bigint,bigint>:"
operator|+
literal|"map<float,float>:map<double,double>:map<string,string>:map<boolean,boolean>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#s,cf-byte:#s:s,cf-short:#s:s,cf-int:#s:s,cf-long:#s:s,cf-float:#s:s,cf-double:#s:s,"
operator|+
literal|"cf-string:#s:s,cf-bool:#s:s"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|void
name|deserializeAndSerializeHiveMapHBaseColumnFamilyII
parameter_list|(
name|HBaseSerDe
name|hbaseSerDe
parameter_list|,
name|Result
name|r
parameter_list|,
name|Put
name|p
parameter_list|,
name|Object
index|[]
name|expectedData
parameter_list|,
name|byte
index|[]
index|[]
name|columnFamilies
parameter_list|,
name|byte
index|[]
index|[]
name|columnQualifiersAndValues
parameter_list|)
throws|throws
name|SerDeException
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|hbaseSerDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|fieldRefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deserialize
name|Object
name|row
init|=
name|hbaseSerDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedData
index|[
name|j
index|]
argument_list|,
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|fieldData
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyHBaseCellMap
condition|)
block|{
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lazyPrimitive
init|=
call|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
argument_list|)
operator|.
name|getMapValueElement
argument_list|(
name|expectedData
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedData
index|[
name|j
index|]
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Error: field data not an instance of LazyPrimitive<?, ?> or LazyHBaseCellMap"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Serialize
name|Put
name|serializedPut
init|=
operator|(
operator|(
name|PutWritable
operator|)
name|hbaseSerDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
operator|)
operator|.
name|getPut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Serialized data: "
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|serializedPut
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithColumnPrefixes
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualA
init|=
literal|"prefixA_col1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualB
init|=
literal|"prefixB_col2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualC
init|=
literal|"prefixB_col3"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualD
init|=
literal|"unwanted_col"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|qualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixA_col1"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_col2"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_col3"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"unwanted_col"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|expectedQualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|expectedQualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixA_col1"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedQualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_col2"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedQualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_col3"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|dataA
init|=
literal|"This is first test data"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|dataB
init|=
literal|"This is second test data"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|dataC
init|=
literal|"This is third test data"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|dataD
init|=
literal|"Unwanted data"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualA
argument_list|,
name|dataA
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualB
argument_list|,
name|dataB
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualC
argument_list|,
name|dataC
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualD
argument_list|,
name|dataD
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
operator|new
name|Result
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualA
argument_list|,
name|dataA
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualB
argument_list|,
name|dataB
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualC
argument_list|,
name|dataC
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"This is first test data"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"This is second test data"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"This is third test data"
argument_list|)
block|}
decl_stmt|;
name|int
index|[]
name|expectedMapSize
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForColumnPrefixes
argument_list|()
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|Object
name|notPresentKey
init|=
operator|new
name|Text
argument_list|(
literal|"unwanted_col"
argument_list|)
decl_stmt|;
name|deserializeAndSerializeHivePrefixColumnFamily
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|,
name|expectedMapSize
argument_list|,
name|expectedQualifiers
argument_list|,
name|notPresentKey
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForColumnPrefixes
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,astring,along"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string:map<string,string>:map<string,string>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,cola:prefixA_.*,cola:prefixB_.*"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|void
name|deserializeAndSerializeHivePrefixColumnFamily
parameter_list|(
name|HBaseSerDe
name|serDe
parameter_list|,
name|Result
name|r
parameter_list|,
name|Put
name|p
parameter_list|,
name|Object
index|[]
name|expectedFieldsData
parameter_list|,
name|int
index|[]
name|expectedMapSize
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|expectedQualifiers
parameter_list|,
name|Object
name|notPresentKey
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|Object
name|row
init|=
name|serDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedFieldsData
index|[
name|i
index|]
argument_list|,
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|fieldData
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyHBaseCellMap
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedFieldsData
index|[
name|i
index|]
argument_list|,
operator|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
operator|)
operator|.
name|getMapValueElement
argument_list|(
name|expectedQualifiers
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMapSize
index|[
name|j
index|]
argument_list|,
operator|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
operator|)
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that the unwanted key is not present in the map
name|assertNull
argument_list|(
operator|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
operator|)
operator|.
name|getMapValueElement
argument_list|(
name|notPresentKey
argument_list|)
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Error: field data not an instance of LazyPrimitive<?, ?> or LazyHBaseCellMap"
argument_list|)
expr_stmt|;
block|}
block|}
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
expr_stmt|;
comment|// Now serialize
name|Put
name|put
init|=
operator|(
operator|(
name|PutWritable
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
operator|)
operator|.
name|getPut
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Serialized put:"
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|put
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

