begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|file
operator|.
name|DataFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericDatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|Encoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|EncoderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificDatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|ContactInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Employee
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|Gender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|HomePhone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|avro
operator|.
name|OfficePhone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyPrimitive
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_comment
comment|/**  * Tests the HBaseSerDe class.  */
end_comment

begin_class
specifier|public
class|class
name|TestHBaseSerDe
extends|extends
name|TestCase
block|{
specifier|static
specifier|final
name|byte
index|[]
name|TEST_BYTE_ARRAY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RECORD_SCHEMA
init|=
literal|"{\n"
operator|+
literal|"  \"namespace\": \"testing.test.mctesty\",\n"
operator|+
literal|"  \"name\": \"oneRecord\",\n"
operator|+
literal|"  \"type\": \"record\",\n"
operator|+
literal|"  \"fields\": [\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"name\":\"aRecord\",\n"
operator|+
literal|"      \"type\":{\"type\":\"record\",\n"
operator|+
literal|"              \"name\":\"recordWithinARecord\",\n"
operator|+
literal|"              \"fields\": [\n"
operator|+
literal|"                 {\n"
operator|+
literal|"                  \"name\":\"int1\",\n"
operator|+
literal|"                  \"type\":\"int\"\n"
operator|+
literal|"                },\n"
operator|+
literal|"                {\n"
operator|+
literal|"                  \"name\":\"boolean1\",\n"
operator|+
literal|"                  \"type\":\"boolean\"\n"
operator|+
literal|"                },\n"
operator|+
literal|"                {\n"
operator|+
literal|"                  \"name\":\"long1\",\n"
operator|+
literal|"                  \"type\":\"long\"\n"
operator|+
literal|"                }\n"
operator|+
literal|"      ]}\n"
operator|+
literal|"    }\n"
operator|+
literal|"  ]\n"
operator|+
literal|"}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RECORD_SCHEMA_EVOLVED
init|=
literal|"{\n"
operator|+
literal|"  \"namespace\": \"testing.test.mctesty\",\n"
operator|+
literal|"  \"name\": \"oneRecord\",\n"
operator|+
literal|"  \"type\": \"record\",\n"
operator|+
literal|"  \"fields\": [\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"name\":\"aRecord\",\n"
operator|+
literal|"      \"type\":{\"type\":\"record\",\n"
operator|+
literal|"              \"name\":\"recordWithinARecord\",\n"
operator|+
literal|"              \"fields\": [\n"
operator|+
literal|"                 {\n"
operator|+
literal|"                  \"name\":\"int1\",\n"
operator|+
literal|"                  \"type\":\"int\"\n"
operator|+
literal|"                },\n"
operator|+
literal|"                {\n"
operator|+
literal|"                  \"name\":\"string1\",\n"
operator|+
literal|"                  \"type\":\"string\", \"default\": \"test\"\n"
operator|+
literal|"                },\n"
operator|+
literal|"                {\n"
operator|+
literal|"                  \"name\":\"boolean1\",\n"
operator|+
literal|"                  \"type\":\"boolean\"\n"
operator|+
literal|"                },\n"
operator|+
literal|"                {\n"
operator|+
literal|"                  \"name\":\"long1\",\n"
operator|+
literal|"                  \"type\":\"long\"\n"
operator|+
literal|"                }\n"
operator|+
literal|"      ]}\n"
operator|+
literal|"    }\n"
operator|+
literal|"  ]\n"
operator|+
literal|"}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_DESERIALIZED_AVRO_STRING
init|=
literal|"{\"key\":\"test-row1\",\"cola_avro\":{\"arecord\":{\"int1\":42,\"boolean1\":true,"
operator|+
literal|"\"long1\":42432234234}}}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_DESERIALIZED_AVRO_STRING_2
init|=
literal|"{\"key\":\"test-row1\","
operator|+
literal|"\"cola_avro\":{\"employeename\":\"Avro Employee1\","
operator|+
literal|"\"employeeid\":11111,\"age\":25,\"gender\":\"FEMALE\","
operator|+
literal|"\"contactinfo\":{\"address\":[{\"address1\":\"Avro First Address1\",\"address2\":"
operator|+
literal|"\"Avro Second Address1\",\"city\":\"Avro City1\",\"zipcode\":123456,\"county\":"
operator|+
literal|"{0:{\"areacode\":999,\"number\":1234567890}},\"aliases\":null,\"metadata\":"
operator|+
literal|"{\"testkey\":\"testvalue\"}},{\"address1\":\"Avro First Address1\",\"address2\":"
operator|+
literal|"\"Avro Second Address1\",\"city\":\"Avro City1\",\"zipcode\":123456,\"county\":"
operator|+
literal|"{0:{\"areacode\":999,\"number\":1234567890}},\"aliases\":null,\"metadata\":"
operator|+
literal|"{\"testkey\":\"testvalue\"}}],\"homephone\":{\"areacode\":999,\"number\":1234567890},"
operator|+
literal|"\"officephone\":{\"areacode\":999,\"number\":1234455555}}}}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_DESERIALIZED_AVRO_STRING_3
init|=
literal|"{\"key\":\"test-row1\",\"cola_avro\":{\"arecord\":{\"int1\":42,\"string1\":\"test\","
operator|+
literal|"\"boolean1\":true,\"long1\":42432234234}}}"
decl_stmt|;
comment|/**    * Test the default behavior of the Lazy family of objects and object inspectors.    */
specifier|public
name|void
name|testHBaseSerDeI
parameter_list|()
throws|throws
name|SerDeException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfb
init|=
literal|"colb"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfc
init|=
literal|"colc"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualByte
init|=
literal|"byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualShort
init|=
literal|"short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualInt
init|=
literal|"int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualLong
init|=
literal|"long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualFloat
init|=
literal|"float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualDouble
init|=
literal|"double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualString
init|=
literal|"string"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualBool
init|=
literal|"boolean"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualByte
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|kvs
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfa
argument_list|,
name|qualByte
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|123
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|456
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
literal|789
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
literal|1000
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
operator|-
literal|0.01F
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
literal|5.3
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesI_I
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
name|serDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesI_II
argument_list|()
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
name|serDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesI_III
argument_list|()
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
name|serDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesI_IV
argument_list|()
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithTimestamp
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// Create the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesI_I
argument_list|()
decl_stmt|;
name|long
name|putTimestamp
init|=
literal|1
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_PUT_TIMESTAMP
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|putTimestamp
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfb
init|=
literal|"colb"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfc
init|=
literal|"colc"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualByte
init|=
literal|"byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualShort
init|=
literal|"short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualInt
init|=
literal|"int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualLong
init|=
literal|"long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualFloat
init|=
literal|"float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualDouble
init|=
literal|"double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualString
init|=
literal|"string"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualBool
init|=
literal|"boolean"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualByte
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|kvs
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|,
name|putTimestamp
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfa
argument_list|,
name|qualByte
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|123
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|456
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
literal|789
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
literal|1000
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
operator|-
literal|0.01F
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
literal|5.3
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"Hadoop, HBase, and Hive"
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
decl_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deserializeAndSerialize
parameter_list|(
name|HBaseSerDe
name|serDe
parameter_list|,
name|Result
name|r
parameter_list|,
name|Put
name|p
parameter_list|,
name|Object
index|[]
name|expectedFieldsData
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// Get the row structure
name|StructObjectInspector
name|oi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|fieldRefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deserialize
name|Object
name|row
init|=
name|serDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldData
operator|!=
literal|null
condition|)
block|{
name|fieldData
operator|=
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|fieldData
operator|)
operator|.
name|getWritableObject
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Field "
operator|+
name|i
argument_list|,
name|expectedFieldsData
index|[
name|i
index|]
argument_list|,
name|fieldData
argument_list|)
expr_stmt|;
block|}
comment|// Serialize
name|assertEquals
argument_list|(
name|PutWritable
operator|.
name|class
argument_list|,
name|serDe
operator|.
name|getSerializedClass
argument_list|()
argument_list|)
expr_stmt|;
name|PutWritable
name|serializedPut
init|=
operator|(
name|PutWritable
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|oi
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Serialized data"
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|serializedPut
operator|.
name|getPut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// No specifications default to UTF8 String storage for backwards compatibility
specifier|private
name|Properties
name|createPropertiesI_I
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|"cola:byte,colb:short,colc:int,cola:long,colb:float,colc:double,cola:string,colb:boolean"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
comment|// Default column storage specification inherits from table level default
comment|// (in this case a missing specification) of UTF String storage
specifier|private
name|Properties
name|createPropertiesI_II
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cola:byte#s,colb:short#-,colc:int#s,cola:long#s,colb:float#-,colc:double#-,"
operator|+
literal|"cola:string#s,colb:boolean#s"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
comment|// String storage type overrides table level default of binary storage
specifier|private
name|Properties
name|createPropertiesI_III
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#s,cola:byte#s,colb:short#s,colc:int#s,cola:long#s,colb:float#s,colc:double#s,"
operator|+
literal|"cola:string#s,colb:boolean#s"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
comment|// String type is never stored as anything other than an escaped string
comment|// A specification of binary storage should not affect ser/de.
specifier|private
name|Properties
name|createPropertiesI_IV
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cola:byte#s,colb:short#s,colc:int#s,cola:long#s,colb:float#s,colc:double#s,"
operator|+
literal|"cola:string#b,colb:boolean#s"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeII
parameter_list|()
throws|throws
name|SerDeException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cfa"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfb
init|=
literal|"cfb"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfc
init|=
literal|"cfc"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualByte
init|=
literal|"byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualShort
init|=
literal|"short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualInt
init|=
literal|"int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualLong
init|=
literal|"long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualFloat
init|=
literal|"float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualDouble
init|=
literal|"double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualString
init|=
literal|"string"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualBool
init|=
literal|"boolean"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row-2"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualByte
argument_list|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MIN_VALUE
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive Again!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//    When using only HBase2, then we could change to this
comment|//    Collections.sort(kvs, CellComparator.COMPARATOR);
name|Collections
operator|.
name|sort
argument_list|(
name|kvs
argument_list|,
name|KeyValue
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfa
argument_list|,
name|qualByte
argument_list|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MIN_VALUE
block|}
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfb
argument_list|,
name|qualShort
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfc
argument_list|,
name|qualInt
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfa
argument_list|,
name|qualLong
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfb
argument_list|,
name|qualFloat
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfc
argument_list|,
name|qualDouble
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfa
argument_list|,
name|qualString
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hadoop, HBase, and Hive Again!"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cfb
argument_list|,
name|qualBool
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"test-row-2"
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"Hadoop, HBase, and Hive Again!"
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesII_I
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
name|serDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesII_II
argument_list|()
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
name|serDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesII_III
argument_list|()
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerialize
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesII_I
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cfa:byte#b,cfb:short#b,cfc:int#-,cfa:long#b,cfb:float#-,cfc:double#b,"
operator|+
literal|"cfa:string#b,cfb:boolean#-"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|Properties
name|createPropertiesII_II
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#b,cfa:byte#b,cfb:short#b,cfc:int#b,cfa:long#b,cfb:float#b,cfc:double#b,"
operator|+
literal|"cfa:string#b,cfb:boolean#b"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|Properties
name|createPropertiesII_III
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Set the configuration parameters
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"key,abyte,ashort,aint,along,afloat,adouble,astring,abool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
literal|"string,tinyint:smallint:int:bigint:float:double:string:boolean"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cfa:byte#b,cfb:short#b,cfc:int#b,cfa:long#b,cfb:float#b,cfc:double#b,"
operator|+
literal|"cfa:string#-,cfb:boolean#b"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithHiveMapToHBaseColumnFamily
parameter_list|()
throws|throws
name|SerDeException
block|{
name|byte
index|[]
name|cfint
init|=
literal|"cf-int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfbyte
init|=
literal|"cf-byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfshort
init|=
literal|"cf-short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cflong
init|=
literal|"cf-long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cffloat
init|=
literal|"cf-float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfdouble
init|=
literal|"cf-double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfbool
init|=
literal|"cf-bool"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|columnFamilies
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|cfint
block|,
name|cfbyte
block|,
name|cfshort
block|,
name|cflong
block|,
name|cffloat
block|,
name|cfdouble
block|,
name|cfbool
block|}
decl_stmt|;
name|byte
index|[]
index|[]
name|rowKeys
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
operator|.
name|getBytes
argument_list|()
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
operator|.
name|getBytes
argument_list|()
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|getBytes
argument_list|()
block|}
decl_stmt|;
name|byte
index|[]
index|[]
index|[]
name|columnQualifiersAndValues
init|=
operator|new
name|byte
index|[]
index|[]
index|[]
block|{
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
literal|1
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
literal|1.0F
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1.0
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|true
argument_list|)
block|}
block|,
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MIN_VALUE
block|}
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|short
operator|)
name|Short
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
name|Long
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
name|Float
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|false
argument_list|)
block|}
block|,
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|byte
index|[]
block|{
name|Byte
operator|.
name|MAX_VALUE
block|}
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|short
operator|)
name|Short
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|float
operator|)
name|Float
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|true
argument_list|)
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|Result
index|[]
name|r
init|=
operator|new
name|Result
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
decl_stmt|;
name|Put
index|[]
name|p
init|=
operator|new
name|Put
index|[]
block|{
literal|null
block|,
literal|null
block|,
literal|null
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|p
index|[
name|i
index|]
operator|=
operator|new
name|Put
argument_list|(
name|rowKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columnQualifiersAndValues
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKeys
index|[
name|i
index|]
argument_list|,
name|columnFamilies
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|p
index|[
name|i
index|]
operator|.
name|addColumn
argument_list|(
name|columnFamilies
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|r
index|[
name|i
index|]
operator|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
index|[]
name|expectedData
init|=
block|{
block|{
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
literal|1.0F
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
literal|1.0
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
block|,
block|{
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
name|Byte
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
name|Short
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
name|Float
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
name|Double
operator|.
name|MIN_VALUE
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|false
argument_list|)
block|}
block|,
block|{
operator|new
name|Text
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
block|}
decl_stmt|;
name|HBaseSerDe
name|hbaseSerDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForHiveMapHBaseColumnFamily
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|hbaseSerDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveMapHBaseColumnFamily
argument_list|(
name|hbaseSerDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedData
argument_list|,
name|rowKeys
argument_list|,
name|columnFamilies
argument_list|,
name|columnQualifiersAndValues
argument_list|)
expr_stmt|;
name|hbaseSerDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesForHiveMapHBaseColumnFamilyII
argument_list|()
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|hbaseSerDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveMapHBaseColumnFamily
argument_list|(
name|hbaseSerDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedData
argument_list|,
name|rowKeys
argument_list|,
name|columnFamilies
argument_list|,
name|columnQualifiersAndValues
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deserializeAndSerializeHiveMapHBaseColumnFamily
parameter_list|(
name|HBaseSerDe
name|hbaseSerDe
parameter_list|,
name|Result
index|[]
name|r
parameter_list|,
name|Put
index|[]
name|p
parameter_list|,
name|Object
index|[]
index|[]
name|expectedData
parameter_list|,
name|byte
index|[]
index|[]
name|rowKeys
parameter_list|,
name|byte
index|[]
index|[]
name|columnFamilies
parameter_list|,
name|byte
index|[]
index|[]
index|[]
name|columnQualifiersAndValues
parameter_list|)
throws|throws
name|SerDeException
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|hbaseSerDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|fieldRefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deserialize
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|row
init|=
name|hbaseSerDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Put
name|serializedPut
init|=
operator|(
operator|(
name|PutWritable
operator|)
name|hbaseSerDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
operator|)
operator|.
name|getPut
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|serializedPut
operator|.
name|getRow
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|rowKey
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|rowKey
index|[
name|k
index|]
argument_list|,
name|rowKeys
index|[
name|i
index|]
index|[
name|k
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|columnFamilies
operator|.
name|length
argument_list|,
name|serializedPut
operator|.
name|numFamilies
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedData
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|,
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|fieldData
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyHBaseCellMap
condition|)
block|{
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lazyPrimitive
init|=
call|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
argument_list|)
operator|.
name|getMapValueElement
argument_list|(
name|expectedData
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedData
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Error: field data not an instance of LazyPrimitive<?,?> or LazyMap"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Properties
name|createPropertiesForHiveMapHBaseColumnFamily
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,valint,valbyte,valshort,vallong,valfloat,valdouble,valbool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string:map<int,int>:map<tinyint,tinyint>:map<smallint,smallint>:map<bigint,bigint>:"
operator|+
literal|"map<float,float>:map<double,double>:map<boolean,boolean>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cf-int:#b:b,cf-byte:#b:b,cf-short:#b:b,cf-long:#b:b,cf-float:#b:b,cf-double:#b:b,"
operator|+
literal|"cf-bool:#b:b"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveMapHBaseColumnFamilyII
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,valint,valbyte,valshort,vallong,valfloat,valdouble,valbool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string:map<int,int>:map<tinyint,tinyint>:map<smallint,smallint>:map<bigint,bigint>:"
operator|+
literal|"map<float,float>:map<double,double>:map<boolean,boolean>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#-,cf-int:#-:-,cf-byte:#-:-,cf-short:#-:-,cf-long:#-:-,cf-float:#-:-,cf-double:#-:-,"
operator|+
literal|"cf-bool:#-:-"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithHiveMapToHBaseColumnFamilyII
parameter_list|()
throws|throws
name|SerDeException
block|{
name|byte
index|[]
name|cfbyte
init|=
literal|"cf-byte"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfshort
init|=
literal|"cf-short"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfint
init|=
literal|"cf-int"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cflong
init|=
literal|"cf-long"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cffloat
init|=
literal|"cf-float"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfdouble
init|=
literal|"cf-double"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfstring
init|=
literal|"cf-string"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cfbool
init|=
literal|"cf-bool"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|columnFamilies
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|cfbyte
block|,
name|cfshort
block|,
name|cfint
block|,
name|cflong
block|,
name|cffloat
block|,
name|cfdouble
block|,
name|cfstring
block|,
name|cfbool
block|}
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row-key"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|columnQualifiersAndValues
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"456"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"789"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-0.01"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5.3"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Hive"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"true"
argument_list|)
block|}
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columnQualifiersAndValues
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|columnFamilies
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|columnFamilies
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|j
index|]
argument_list|,
name|columnQualifiersAndValues
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Object
index|[]
name|expectedData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"row-key"
argument_list|)
block|,
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|123
argument_list|)
block|,
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|456
argument_list|)
block|,
operator|new
name|IntWritable
argument_list|(
literal|789
argument_list|)
block|,
operator|new
name|LongWritable
argument_list|(
literal|1000
argument_list|)
block|,
operator|new
name|FloatWritable
argument_list|(
operator|-
literal|0.01F
argument_list|)
block|,
operator|new
name|DoubleWritable
argument_list|(
literal|5.3
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"Hive"
argument_list|)
block|,
operator|new
name|BooleanWritable
argument_list|(
literal|true
argument_list|)
block|}
decl_stmt|;
name|HBaseSerDe
name|hbaseSerDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForHiveMapHBaseColumnFamilyII_I
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|hbaseSerDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveMapHBaseColumnFamilyII
argument_list|(
name|hbaseSerDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedData
argument_list|,
name|columnFamilies
argument_list|,
name|columnQualifiersAndValues
argument_list|)
expr_stmt|;
name|hbaseSerDe
operator|=
operator|new
name|HBaseSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|createPropertiesForHiveMapHBaseColumnFamilyII_II
argument_list|()
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|hbaseSerDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveMapHBaseColumnFamilyII
argument_list|(
name|hbaseSerDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedData
argument_list|,
name|columnFamilies
argument_list|,
name|columnQualifiersAndValues
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveMapHBaseColumnFamilyII_I
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,valbyte,valshort,valint,vallong,valfloat,valdouble,valstring,valbool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string:map<tinyint,tinyint>:map<smallint,smallint>:map<int,int>:map<bigint,bigint>:"
operator|+
literal|"map<float,float>:map<double,double>:map<string,string>:map<boolean,boolean>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#s,cf-byte:#-:s,cf-short:#s:-,cf-int:#s:s,cf-long:#-:-,cf-float:#s:-,cf-double:#-:s,"
operator|+
literal|"cf-string:#s:s,cf-bool:#-:-"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveMapHBaseColumnFamilyII_II
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,valbyte,valshort,valint,vallong,valfloat,valdouble,valstring,valbool"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string:map<tinyint,tinyint>:map<smallint,smallint>:map<int,int>:map<bigint,bigint>:"
operator|+
literal|"map<float,float>:map<double,double>:map<string,string>:map<boolean,boolean>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key#s,cf-byte:#s:s,cf-short:#s:s,cf-int:#s:s,cf-long:#s:s,cf-float:#s:s,cf-double:#s:s,"
operator|+
literal|"cf-string:#s:s,cf-bool:#s:s"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"binary"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|void
name|deserializeAndSerializeHiveMapHBaseColumnFamilyII
parameter_list|(
name|HBaseSerDe
name|hbaseSerDe
parameter_list|,
name|Result
name|r
parameter_list|,
name|Put
name|p
parameter_list|,
name|Object
index|[]
name|expectedData
parameter_list|,
name|byte
index|[]
index|[]
name|columnFamilies
parameter_list|,
name|byte
index|[]
index|[]
name|columnQualifiersAndValues
parameter_list|)
throws|throws
name|SerDeException
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|hbaseSerDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|fieldRefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Deserialize
name|Object
name|row
init|=
name|hbaseSerDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedData
index|[
name|j
index|]
argument_list|,
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|fieldData
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyHBaseCellMap
condition|)
block|{
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lazyPrimitive
init|=
call|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
argument_list|)
operator|.
name|getMapValueElement
argument_list|(
name|expectedData
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedData
index|[
name|j
index|]
argument_list|,
name|lazyPrimitive
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Error: field data not an instance of LazyPrimitive<?, ?> or LazyHBaseCellMap"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Serialize
name|Put
name|serializedPut
init|=
operator|(
operator|(
name|PutWritable
operator|)
name|hbaseSerDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
operator|)
operator|.
name|getPut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Serialized data: "
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|serializedPut
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithColumnPrefixes
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualA
init|=
literal|"prefixA_col1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualB
init|=
literal|"prefixB_col2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualC
init|=
literal|"prefixB_col3"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualD
init|=
literal|"unwanted_col"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|qualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixA_col1"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_col2"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_col3"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"unwanted_col"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|expectedQualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|expectedQualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixA_col1"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedQualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_col2"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedQualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_col3"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|dataA
init|=
literal|"This is first test data"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|dataB
init|=
literal|"This is second test data"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|dataC
init|=
literal|"This is third test data"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|dataD
init|=
literal|"Unwanted data"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualA
argument_list|,
name|dataA
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualB
argument_list|,
name|dataB
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualC
argument_list|,
name|dataC
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualD
argument_list|,
name|dataD
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualA
argument_list|,
name|dataA
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualB
argument_list|,
name|dataB
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualC
argument_list|,
name|dataC
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"This is first test data"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"This is second test data"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"This is third test data"
argument_list|)
block|}
decl_stmt|;
name|int
index|[]
name|expectedMapSize
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForColumnPrefixes
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Object
name|notPresentKey
init|=
operator|new
name|Text
argument_list|(
literal|"unwanted_col"
argument_list|)
decl_stmt|;
name|deserializeAndSerializeHivePrefixColumnFamily
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|,
name|expectedMapSize
argument_list|,
name|expectedQualifiers
argument_list|,
name|notPresentKey
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForColumnPrefixes
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,astring,along"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string:map<string,string>:map<string,string>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,cola:prefixA_.*,cola:prefixB_.*"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|void
name|deserializeAndSerializeHivePrefixColumnFamily
parameter_list|(
name|HBaseSerDe
name|serDe
parameter_list|,
name|Result
name|r
parameter_list|,
name|Put
name|p
parameter_list|,
name|Object
index|[]
name|expectedFieldsData
parameter_list|,
name|int
index|[]
name|expectedMapSize
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|expectedQualifiers
parameter_list|,
name|Object
name|notPresentKey
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|Object
name|row
init|=
name|serDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedFieldsData
index|[
name|i
index|]
argument_list|,
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|fieldData
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyHBaseCellMap
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedFieldsData
index|[
name|i
index|]
argument_list|,
operator|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
operator|)
operator|.
name|getMapValueElement
argument_list|(
name|expectedQualifiers
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMapSize
index|[
name|j
index|]
argument_list|,
operator|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
operator|)
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that the unwanted key is not present in the map
name|assertNull
argument_list|(
operator|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
operator|)
operator|.
name|getMapValueElement
argument_list|(
name|notPresentKey
argument_list|)
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Error: field data not an instance of LazyPrimitive<?, ?> or LazyHBaseCellMap"
argument_list|)
expr_stmt|;
block|}
block|}
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
expr_stmt|;
comment|// Now serialize
name|Put
name|put
init|=
operator|(
operator|(
name|PutWritable
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
operator|)
operator|.
name|getPut
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Serialized put:"
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|put
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testHBaseSerDeCompositeKeyWithSeparator
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|TException
throws|,
name|IOException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualStruct
init|=
literal|"struct"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|TestStruct
name|testStruct
init|=
operator|new
name|TestStruct
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|,
literal|true
argument_list|,
operator|(
name|byte
operator|)
literal|45
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|testStruct
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|testData
init|=
literal|"This is a test data"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualStruct
argument_list|,
name|testData
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
comment|// Post serialization, separators are automatically inserted between different fields in the
comment|// struct. Currently there is not way to disable that. So the work around here is to pad the
comment|// data with the separator bytes before creating a "Put" object
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualStruct
argument_list|,
name|testData
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForCompositeKeyWithSeparator
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHBaseCompositeKey
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForCompositeKeyWithSeparator
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,astring"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"struct<col1:string,col2:string,col3:string>,string"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,cola:struct"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|COLLECTION_DELIM
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeCompositeKeyWithoutSeparator
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|TException
throws|,
name|IOException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualStruct
init|=
literal|"struct"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|TestStruct
name|testStruct
init|=
operator|new
name|TestStruct
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|testStruct
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|testData
init|=
literal|"This is a test data"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualStruct
argument_list|,
name|testData
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|byte
index|[]
name|putRowKey
init|=
name|testStruct
operator|.
name|getBytesWithDelimiters
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|putRowKey
argument_list|)
decl_stmt|;
comment|// Post serialization, separators are automatically inserted between different fields in the
comment|// struct. Currently there is not way to disable that. So the work around here is to pad the
comment|// data with the separator bytes before creating a "Put" object
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|putRowKey
argument_list|,
name|cfa
argument_list|,
name|qualStruct
argument_list|,
name|testData
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForCompositeKeyWithoutSeparator
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHBaseCompositeKey
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForCompositeKeyWithoutSeparator
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,astring"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"struct<col1:string,col2:string,col3:string>,string"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,cola:struct"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COMPOSITE_KEY_CLASS
argument_list|,
literal|"org.apache.hadoop.hive.hbase.HBaseTestCompositeKey"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|void
name|deserializeAndSerializeHBaseCompositeKey
parameter_list|(
name|HBaseSerDe
name|serDe
parameter_list|,
name|Result
name|r
parameter_list|,
name|Put
name|p
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|Object
name|row
init|=
name|serDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"{\"key\":{\"col1\":\"A\",\"col2\":\"B\",\"col3\":\"C\"},\"astring\":\"This is a test data\"}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now serialize
name|Put
name|put
init|=
operator|(
operator|(
name|PutWritable
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
operator|)
operator|.
name|getPut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Serialized put:"
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|put
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithAvroSchemaInline
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualAvro
init|=
literal|"avro"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|avroData
init|=
name|getTestAvroBytesFromSchema
argument_list|(
name|RECORD_SCHEMA
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
comment|// Post serialization, separators are automatically inserted between different fields in the
comment|// struct. Currently there is not way to disable that. So the work around here is to pad the
comment|// data with the separator bytes before creating a "Put" object
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|String
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"[[42, true, 42432234234]]"
argument_list|)
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForHiveAvroSchemaInline
argument_list|()
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveAvro
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|,
name|EXPECTED_DESERIALIZED_AVRO_STRING
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveAvroSchemaInline
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro.serialization.type"
argument_list|,
literal|"avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro."
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_LITERAL
operator|.
name|getPropName
argument_list|()
argument_list|,
name|RECORD_SCHEMA
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,cola:avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_AUTOGENERATE_STRUCT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithForwardEvolvedSchema
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualAvro
init|=
literal|"avro"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|avroData
init|=
name|getTestAvroBytesFromSchema
argument_list|(
name|RECORD_SCHEMA
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
comment|// Post serialization, separators are automatically inserted between different fields in the
comment|// struct. Currently there is not way to disable that. So the work around here is to pad the
comment|// data with the separator bytes before creating a "Put" object
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|String
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"[[42, test, true, 42432234234]]"
argument_list|)
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForHiveAvroForwardEvolvedSchema
argument_list|()
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveAvro
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|,
name|EXPECTED_DESERIALIZED_AVRO_STRING_3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveAvroForwardEvolvedSchema
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro.serialization.type"
argument_list|,
literal|"avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro."
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_LITERAL
operator|.
name|getPropName
argument_list|()
argument_list|,
name|RECORD_SCHEMA_EVOLVED
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,cola:avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_AUTOGENERATE_STRUCT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithBackwardEvolvedSchema
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualAvro
init|=
literal|"avro"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|avroData
init|=
name|getTestAvroBytesFromSchema
argument_list|(
name|RECORD_SCHEMA_EVOLVED
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
comment|// Post serialization, separators are automatically inserted between different fields in the
comment|// struct. Currently there is not way to disable that. So the work around here is to pad the
comment|// data with the separator bytes before creating a "Put" object
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|String
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"[[42, true, 42432234234]]"
argument_list|)
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForHiveAvroBackwardEvolvedSchema
argument_list|()
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveAvro
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|,
name|EXPECTED_DESERIALIZED_AVRO_STRING
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveAvroBackwardEvolvedSchema
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro.serialization.type"
argument_list|,
literal|"avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro."
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_LITERAL
operator|.
name|getPropName
argument_list|()
argument_list|,
name|RECORD_SCHEMA
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,cola:avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_AUTOGENERATE_STRUCT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithAvroSerClass
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualAvro
init|=
literal|"avro"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|avroData
init|=
name|getTestAvroBytesFromClass1
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
comment|// Post serialization, separators are automatically inserted between different fields in the
comment|// struct. Currently there is not way to disable that. So the work around here is to pad the
comment|// data with the separator bytes before creating a "Put" object
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|String
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"[Avro Employee1, 11111, 25, FEMALE, [[[Avro First Address1, Avro Second Address1, Avro City1, 123456, 0:[999, 1234567890], null, {testkey=testvalue}], "
operator|+
literal|"[Avro First Address1, Avro Second Address1, Avro City1, 123456, 0:[999, 1234567890], null, {testkey=testvalue}]], "
operator|+
literal|"[999, 1234567890], [999, 1234455555]]]"
argument_list|)
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForHiveAvroSerClass
argument_list|()
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveAvro
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|,
name|EXPECTED_DESERIALIZED_AVRO_STRING_2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveAvroSerClass
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro.serialization.type"
argument_list|,
literal|"avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro."
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
argument_list|,
literal|"org.apache.hadoop.hive.hbase.avro.Employee"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,cola:avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_AUTOGENERATE_STRUCT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithAvroSchemaUrl
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualAvro
init|=
literal|"avro"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|avroData
init|=
name|getTestAvroBytesFromSchema
argument_list|(
name|RECORD_SCHEMA
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
comment|// Post serialization, separators are automatically inserted between different fields in the
comment|// struct. Currently there is not way to disable that. So the work around here is to pad the
comment|// data with the separator bytes before creating a "Put" object
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|String
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"[[42, true, 42432234234]]"
argument_list|)
block|}
decl_stmt|;
name|MiniDFSCluster
name|miniDfs
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// MiniDFSCluster litters files and folders all over the place.
name|miniDfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|miniDfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/path/to/schema"
argument_list|)
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|out
init|=
name|miniDfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/path/to/schema/schema.avsc"
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|RECORD_SCHEMA
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|onHDFS
init|=
name|miniDfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getUri
argument_list|()
operator|+
literal|"/path/to/schema/schema.avsc"
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForHiveAvroSchemaUrl
argument_list|(
name|onHDFS
argument_list|)
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveAvro
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|,
name|EXPECTED_DESERIALIZED_AVRO_STRING
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Teardown the cluster
if|if
condition|(
name|miniDfs
operator|!=
literal|null
condition|)
block|{
name|miniDfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Properties
name|createPropertiesForHiveAvroSchemaUrl
parameter_list|(
name|String
name|schemaUrl
parameter_list|)
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro.serialization.type"
argument_list|,
literal|"avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro."
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_URL
operator|.
name|getPropName
argument_list|()
argument_list|,
name|schemaUrl
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,cola:avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_AUTOGENERATE_STRUCT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithAvroExternalSchema
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualAvro
init|=
literal|"avro"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|avroData
init|=
name|getTestAvroBytesFromClass2
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
comment|// Post serialization, separators are automatically inserted between different fields in the
comment|// struct. Currently there is not way to disable that. So the work around here is to pad the
comment|// data with the separator bytes before creating a "Put" object
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvro
argument_list|,
name|avroData
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|String
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"[Avro Employee1, 11111, 25, FEMALE, [[[Avro First Address1, Avro Second Address1, Avro City1, 123456, 0:[999, 1234567890], null, {testkey=testvalue}], [Avro First Address1, Avro Second Address1, Avro City1, 123456, 0:[999, 1234567890], null, {testkey=testvalue}]], "
operator|+
literal|"[999, 1234567890], [999, 1234455555]]]"
argument_list|)
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForHiveAvroExternalSchema
argument_list|()
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHiveAvro
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|,
name|EXPECTED_DESERIALIZED_AVRO_STRING_2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveAvroExternalSchema
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro.serialization.type"
argument_list|,
literal|"avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|AvroTableProperties
operator|.
name|SCHEMA_RETRIEVER
operator|.
name|getPropName
argument_list|()
argument_list|,
literal|"org.apache.hadoop.hive.hbase.HBaseTestAvroSchemaRetriever"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.avro."
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
argument_list|,
literal|"org.apache.hadoop.hive.hbase.avro.Employee"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,cola:avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_AUTOGENERATE_STRUCT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeWithHiveMapToHBaseAvroColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualAvroA
init|=
literal|"prefixA_avro1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualAvroB
init|=
literal|"prefixB_avro2"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualAvroC
init|=
literal|"prefixB_avro3"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|qualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixA_avro1"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_avro2"
argument_list|)
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_avro3"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|expectedQualifiers
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|expectedQualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_avro2"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedQualifiers
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"prefixB_avro3"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test-row1"
argument_list|)
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|avroDataA
init|=
name|getTestAvroBytesFromSchema
argument_list|(
name|RECORD_SCHEMA
argument_list|)
decl_stmt|;
name|byte
index|[]
name|avroDataB
init|=
name|getTestAvroBytesFromClass1
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|avroDataC
init|=
name|getTestAvroBytesFromClass1
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvroA
argument_list|,
name|avroDataA
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvroB
argument_list|,
name|avroDataB
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvroC
argument_list|,
name|avroDataC
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
comment|// Post serialization, separators are automatically inserted between different fields in the
comment|// struct. Currently there is not way to disable that. So the work around here is to pad the
comment|// data with the separator bytes before creating a "Put" object
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvroB
argument_list|,
name|Bytes
operator|.
name|padTail
argument_list|(
name|avroDataB
argument_list|,
literal|11
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowKey
argument_list|,
name|cfa
argument_list|,
name|qualAvroC
argument_list|,
name|Bytes
operator|.
name|padTail
argument_list|(
name|avroDataC
argument_list|,
literal|11
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|expectedFieldsData
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"test-row1"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"[Avro Employee1, 11111, 25, FEMALE, [[[Avro First Address1, Avro Second Address1, Avro City1, 123456, 0:[999, 1234567890], null, {testkey=testvalue}], [Avro First Address1, Avro Second Address1, Avro City1, 123456, 0:[999, 1234567890], null, {testkey=testvalue}]], "
operator|+
literal|"[999, 1234567890], [999, 1234455555]]]"
argument_list|)
block|,
operator|new
name|String
argument_list|(
literal|"[Avro Employee2, 11111, 25, FEMALE, [[[Avro First Address2, Avro Second Address2, Avro City2, 123456, 0:[999, 1234567890], null, {testkey=testvalue}], [Avro First Address2, Avro Second Address2, Avro City2, 123456, 0:[999, 1234567890], null, {testkey=testvalue}]], "
operator|+
literal|"[999, 1234567890], [999, 1234455555]]]"
argument_list|)
block|}
decl_stmt|;
name|int
index|[]
name|expectedMapSize
init|=
operator|new
name|int
index|[]
block|{
literal|2
block|}
decl_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForHiveAvroColumnFamilyMap
argument_list|()
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|Object
name|notPresentKey
init|=
operator|new
name|Text
argument_list|(
literal|"prefixA_avro1"
argument_list|)
decl_stmt|;
name|deserializeAndSerializeHiveStructColumnFamily
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|,
name|expectedFieldsData
argument_list|,
name|expectedMapSize
argument_list|,
name|expectedQualifiers
argument_list|,
name|notPresentKey
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForHiveAvroColumnFamilyMap
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.prefixB_.serialization.type"
argument_list|,
literal|"avro"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.prefixB_."
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
argument_list|,
literal|"org.apache.hadoop.hive.hbase.avro.Employee"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|"cola:prefixB_.*"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_AUTOGENERATE_STRUCT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|LazySerDeParameters
operator|.
name|SERIALIZATION_EXTEND_NESTING_LEVELS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|public
name|void
name|testHBaseSerDeCustomStructValue
parameter_list|()
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
name|byte
index|[]
name|cfa
init|=
literal|"cola"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualStruct
init|=
literal|"struct"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|TestStruct
name|testStruct
init|=
operator|new
name|TestStruct
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|testStruct
operator|.
name|getBytes
argument_list|()
decl_stmt|;
comment|// Data
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|testData
init|=
name|testStruct
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|key
argument_list|,
name|cfa
argument_list|,
name|qualStruct
argument_list|,
name|testData
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|Result
operator|.
name|create
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|byte
index|[]
name|putKey
init|=
name|testStruct
operator|.
name|getBytesWithDelimiters
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|putKey
argument_list|)
decl_stmt|;
comment|// Post serialization, separators are automatically inserted between different fields in the
comment|// struct. Currently there is not way to disable that. So the work around here is to pad the
comment|// data with the separator bytes before creating a "Put" object
name|p
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|putKey
argument_list|,
name|cfa
argument_list|,
name|qualStruct
argument_list|,
name|Bytes
operator|.
name|padTail
argument_list|(
name|testData
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create, initialize, and test the SerDe
name|HBaseSerDe
name|serDe
init|=
operator|new
name|HBaseSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
name|createPropertiesForValueStruct
argument_list|()
decl_stmt|;
name|serDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|deserializeAndSerializeHBaseValueStruct
argument_list|(
name|serDe
argument_list|,
name|r
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|createPropertiesForValueStruct
parameter_list|()
block|{
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.struct.serialization.type"
argument_list|,
literal|"struct"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
literal|"cola.struct.test.value"
argument_list|,
literal|"test value"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_STRUCT_SERIALIZER_CLASS
argument_list|,
literal|"org.apache.hadoop.hive.hbase.HBaseTestStructSerializer"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"key,astring"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"struct<col1:string,col2:string,col3:string>,struct<col1:string,col2:string,col3:string>"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|,
literal|":key,cola:struct"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COMPOSITE_KEY_CLASS
argument_list|,
literal|"org.apache.hadoop.hive.hbase.HBaseTestCompositeKey"
argument_list|)
expr_stmt|;
return|return
name|tbl
return|;
block|}
specifier|private
name|void
name|deserializeAndSerializeHBaseValueStruct
parameter_list|(
name|HBaseSerDe
name|serDe
parameter_list|,
name|Result
name|r
parameter_list|,
name|Put
name|p
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|Object
name|row
init|=
name|serDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|fieldData
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|fieldData
operator|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyStruct
condition|)
block|{
name|assertEquals
argument_list|(
operator|(
operator|(
name|LazyStruct
operator|)
name|fieldData
operator|)
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|LazyStruct
operator|)
name|fieldData
operator|)
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|LazyStruct
operator|)
name|fieldData
operator|)
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"fieldData should be an instance of LazyStruct"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"{\"key\":{\"col1\":\"A\",\"col2\":\"B\",\"col3\":\"C\"},\"astring\":{\"col1\":\"A\",\"col2\":\"B\",\"col3\":\"C\"}}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now serialize
name|Put
name|put
init|=
operator|(
operator|(
name|PutWritable
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
operator|)
operator|.
name|getPut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Serialized put:"
argument_list|,
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|put
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deserializeAndSerializeHiveAvro
parameter_list|(
name|HBaseSerDe
name|serDe
parameter_list|,
name|Result
name|r
parameter_list|,
name|Put
name|p
parameter_list|,
name|Object
index|[]
name|expectedFieldsData
parameter_list|,
name|String
name|expectedDeserializedAvroString
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|Object
name|row
init|=
name|serDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedFieldsData
index|[
name|j
index|]
argument_list|,
name|fieldData
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedDeserializedAvroString
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now serialize
name|Put
name|put
init|=
operator|(
operator|(
name|PutWritable
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
operator|)
operator|.
name|getPut
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|,
name|put
operator|.
name|getFamilyCellMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deserializeAndSerializeHiveStructColumnFamily
parameter_list|(
name|HBaseSerDe
name|serDe
parameter_list|,
name|Result
name|r
parameter_list|,
name|Put
name|p
parameter_list|,
name|Object
index|[]
name|expectedFieldsData
parameter_list|,
name|int
index|[]
name|expectedMapSize
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|expectedQualifiers
parameter_list|,
name|Object
name|notPresentKey
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|Object
name|row
init|=
name|serDe
operator|.
name|deserialize
argument_list|(
operator|new
name|ResultWritable
argument_list|(
name|r
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldRefs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|fieldData
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldData
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedFieldsData
index|[
name|i
index|]
argument_list|,
operator|(
operator|(
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|fieldData
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldData
operator|instanceof
name|LazyHBaseCellMap
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
operator|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
operator|)
operator|.
name|getMapSize
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expectedFieldsData
index|[
name|k
operator|+
literal|1
index|]
argument_list|,
operator|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
operator|)
operator|.
name|getMapValueElement
argument_list|(
name|expectedQualifiers
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedMapSize
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
operator|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
operator|)
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that the unwanted key is not present in the map
name|assertNull
argument_list|(
operator|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fieldData
operator|)
operator|.
name|getMapValueElement
argument_list|(
name|notPresentKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Error: field data not an instance of LazyPrimitive<?, ?> or LazyHBaseCellMap"
argument_list|)
expr_stmt|;
block|}
block|}
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
expr_stmt|;
comment|// Now serialize
name|Put
name|put
init|=
operator|(
operator|(
name|PutWritable
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|soi
argument_list|)
operator|)
operator|.
name|getPut
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|getTestAvroBytesFromSchema
parameter_list|(
name|String
name|schemaToUse
parameter_list|)
throws|throws
name|IOException
block|{
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|schemaToUse
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|innerRecord
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
operator|.
name|getField
argument_list|(
literal|"aRecord"
argument_list|)
operator|.
name|schema
argument_list|()
argument_list|)
decl_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"int1"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"boolean1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"long1"
argument_list|,
literal|42432234234l
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaToUse
operator|.
name|equals
argument_list|(
name|RECORD_SCHEMA_EVOLVED
argument_list|)
condition|)
block|{
name|innerRecord
operator|.
name|put
argument_list|(
literal|"string1"
argument_list|,
literal|"new value"
argument_list|)
expr_stmt|;
block|}
name|record
operator|.
name|put
argument_list|(
literal|"aRecord"
argument_list|,
name|innerRecord
argument_list|)
expr_stmt|;
name|DatumWriter
argument_list|<
name|GenericRecord
argument_list|>
name|datumWriter
init|=
operator|new
name|GenericDatumWriter
argument_list|<
name|GenericRecord
argument_list|>
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataFileWriter
argument_list|<
name|GenericRecord
argument_list|>
name|dataFileWriter
init|=
operator|new
name|DataFileWriter
argument_list|<
name|GenericRecord
argument_list|>
argument_list|(
name|datumWriter
argument_list|)
decl_stmt|;
name|dataFileWriter
operator|.
name|create
argument_list|(
name|s
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|dataFileWriter
operator|.
name|append
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|dataFileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|byte
index|[]
name|getTestAvroBytesFromClass1
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|Employee
name|employee
init|=
operator|new
name|Employee
argument_list|()
decl_stmt|;
name|employee
operator|.
name|setEmployeeName
argument_list|(
literal|"Avro Employee"
operator|+
name|i
argument_list|)
expr_stmt|;
name|employee
operator|.
name|setEmployeeID
argument_list|(
literal|11111L
argument_list|)
expr_stmt|;
name|employee
operator|.
name|setGender
argument_list|(
name|Gender
operator|.
name|FEMALE
argument_list|)
expr_stmt|;
name|employee
operator|.
name|setAge
argument_list|(
literal|25L
argument_list|)
expr_stmt|;
name|Address
name|address
init|=
operator|new
name|Address
argument_list|()
decl_stmt|;
name|address
operator|.
name|setAddress1
argument_list|(
literal|"Avro First Address"
operator|+
name|i
argument_list|)
expr_stmt|;
name|address
operator|.
name|setAddress2
argument_list|(
literal|"Avro Second Address"
operator|+
name|i
argument_list|)
expr_stmt|;
name|address
operator|.
name|setCity
argument_list|(
literal|"Avro City"
operator|+
name|i
argument_list|)
expr_stmt|;
name|address
operator|.
name|setZipcode
argument_list|(
literal|123456L
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|CharSequence
argument_list|,
name|CharSequence
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<
name|CharSequence
argument_list|,
name|CharSequence
argument_list|>
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|put
argument_list|(
literal|"testkey"
argument_list|,
literal|"testvalue"
argument_list|)
expr_stmt|;
name|address
operator|.
name|setMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|HomePhone
name|hPhone
init|=
operator|new
name|HomePhone
argument_list|()
decl_stmt|;
name|hPhone
operator|.
name|setAreaCode
argument_list|(
literal|999L
argument_list|)
expr_stmt|;
name|hPhone
operator|.
name|setNumber
argument_list|(
literal|1234567890L
argument_list|)
expr_stmt|;
name|OfficePhone
name|oPhone
init|=
operator|new
name|OfficePhone
argument_list|()
decl_stmt|;
name|oPhone
operator|.
name|setAreaCode
argument_list|(
literal|999L
argument_list|)
expr_stmt|;
name|oPhone
operator|.
name|setNumber
argument_list|(
literal|1234455555L
argument_list|)
expr_stmt|;
name|ContactInfo
name|contact
init|=
operator|new
name|ContactInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Address
argument_list|>
name|addresses
init|=
operator|new
name|ArrayList
argument_list|<
name|Address
argument_list|>
argument_list|()
decl_stmt|;
name|address
operator|.
name|setCounty
argument_list|(
name|hPhone
argument_list|)
expr_stmt|;
comment|// set value for the union type
name|addresses
operator|.
name|add
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|addresses
operator|.
name|add
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setAddress
argument_list|(
name|addresses
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setHomePhone
argument_list|(
name|hPhone
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setOfficePhone
argument_list|(
name|oPhone
argument_list|)
expr_stmt|;
name|employee
operator|.
name|setContactInfo
argument_list|(
name|contact
argument_list|)
expr_stmt|;
name|DatumWriter
argument_list|<
name|Employee
argument_list|>
name|datumWriter
init|=
operator|new
name|SpecificDatumWriter
argument_list|<
name|Employee
argument_list|>
argument_list|(
name|Employee
operator|.
name|class
argument_list|)
decl_stmt|;
name|DataFileWriter
argument_list|<
name|Employee
argument_list|>
name|dataFileWriter
init|=
operator|new
name|DataFileWriter
argument_list|<
name|Employee
argument_list|>
argument_list|(
name|datumWriter
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|dataFileWriter
operator|.
name|create
argument_list|(
name|employee
operator|.
name|getSchema
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|dataFileWriter
operator|.
name|append
argument_list|(
name|employee
argument_list|)
expr_stmt|;
name|dataFileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|getTestAvroBytesFromClass2
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|Employee
name|employee
init|=
operator|new
name|Employee
argument_list|()
decl_stmt|;
name|employee
operator|.
name|setEmployeeName
argument_list|(
literal|"Avro Employee"
operator|+
name|i
argument_list|)
expr_stmt|;
name|employee
operator|.
name|setEmployeeID
argument_list|(
literal|11111L
argument_list|)
expr_stmt|;
name|employee
operator|.
name|setGender
argument_list|(
name|Gender
operator|.
name|FEMALE
argument_list|)
expr_stmt|;
name|employee
operator|.
name|setAge
argument_list|(
literal|25L
argument_list|)
expr_stmt|;
name|Address
name|address
init|=
operator|new
name|Address
argument_list|()
decl_stmt|;
name|address
operator|.
name|setAddress1
argument_list|(
literal|"Avro First Address"
operator|+
name|i
argument_list|)
expr_stmt|;
name|address
operator|.
name|setAddress2
argument_list|(
literal|"Avro Second Address"
operator|+
name|i
argument_list|)
expr_stmt|;
name|address
operator|.
name|setCity
argument_list|(
literal|"Avro City"
operator|+
name|i
argument_list|)
expr_stmt|;
name|address
operator|.
name|setZipcode
argument_list|(
literal|123456L
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|CharSequence
argument_list|,
name|CharSequence
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<
name|CharSequence
argument_list|,
name|CharSequence
argument_list|>
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|put
argument_list|(
literal|"testkey"
argument_list|,
literal|"testvalue"
argument_list|)
expr_stmt|;
name|address
operator|.
name|setMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|HomePhone
name|hPhone
init|=
operator|new
name|HomePhone
argument_list|()
decl_stmt|;
name|hPhone
operator|.
name|setAreaCode
argument_list|(
literal|999L
argument_list|)
expr_stmt|;
name|hPhone
operator|.
name|setNumber
argument_list|(
literal|1234567890L
argument_list|)
expr_stmt|;
name|OfficePhone
name|oPhone
init|=
operator|new
name|OfficePhone
argument_list|()
decl_stmt|;
name|oPhone
operator|.
name|setAreaCode
argument_list|(
literal|999L
argument_list|)
expr_stmt|;
name|oPhone
operator|.
name|setNumber
argument_list|(
literal|1234455555L
argument_list|)
expr_stmt|;
name|ContactInfo
name|contact
init|=
operator|new
name|ContactInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Address
argument_list|>
name|addresses
init|=
operator|new
name|ArrayList
argument_list|<
name|Address
argument_list|>
argument_list|()
decl_stmt|;
name|address
operator|.
name|setCounty
argument_list|(
name|hPhone
argument_list|)
expr_stmt|;
comment|// set value for the union type
name|addresses
operator|.
name|add
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|addresses
operator|.
name|add
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setAddress
argument_list|(
name|addresses
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setHomePhone
argument_list|(
name|hPhone
argument_list|)
expr_stmt|;
name|contact
operator|.
name|setOfficePhone
argument_list|(
name|oPhone
argument_list|)
expr_stmt|;
name|employee
operator|.
name|setContactInfo
argument_list|(
name|contact
argument_list|)
expr_stmt|;
name|DatumWriter
argument_list|<
name|Employee
argument_list|>
name|employeeWriter
init|=
operator|new
name|SpecificDatumWriter
argument_list|<
name|Employee
argument_list|>
argument_list|(
name|Employee
operator|.
name|class
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Encoder
name|encoder
init|=
name|EncoderFactory
operator|.
name|get
argument_list|()
operator|.
name|binaryEncoder
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// write out a header for the payload
name|out
operator|.
name|write
argument_list|(
name|TEST_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|employeeWriter
operator|.
name|write
argument_list|(
name|employee
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
class|class
name|TestStruct
block|{
name|String
name|f1
decl_stmt|;
name|String
name|f2
decl_stmt|;
name|String
name|f3
decl_stmt|;
name|boolean
name|hasSeparator
decl_stmt|;
name|byte
name|separator
decl_stmt|;
name|TestStruct
parameter_list|(
name|String
name|f1
parameter_list|,
name|String
name|f2
parameter_list|,
name|String
name|f3
parameter_list|,
name|boolean
name|hasSeparator
parameter_list|,
name|byte
name|separator
parameter_list|)
block|{
name|this
operator|.
name|f1
operator|=
name|f1
expr_stmt|;
name|this
operator|.
name|f2
operator|=
name|f2
expr_stmt|;
name|this
operator|.
name|f3
operator|=
name|f3
expr_stmt|;
name|this
operator|.
name|hasSeparator
operator|=
name|hasSeparator
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|f1
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSeparator
condition|)
block|{
name|bos
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
comment|// Add field separator
block|}
name|bos
operator|.
name|write
argument_list|(
name|f2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSeparator
condition|)
block|{
name|bos
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|bos
operator|.
name|write
argument_list|(
name|f3
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|public
name|byte
index|[]
name|getBytesWithDelimiters
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Add Ctrl-B delimiter between the fields. This is necessary because for structs in case no
comment|// delimiter is provided, hive automatically adds Ctrl-B as a default delimiter between fields
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|f1
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|"\002"
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|f2
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|"\002"
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|f3
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

