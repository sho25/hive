begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|BaseStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|TestHBaseKeyFactory
extends|extends
name|DefaultHBaseKeyFactory
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DELIMITER_PATTERN
init|=
literal|"\\$\\$"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DELIMITER_BINARY
init|=
literal|"$$"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|createKeyObjectInspector
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
block|{
return|return
operator|new
name|SlashSeparatedOI
argument_list|(
operator|(
name|StructTypeInfo
operator|)
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LazyObjectBase
name|createKey
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|)
throws|throws
name|SerDeException
block|{
return|return
operator|new
name|DoubleDollarSeparated
argument_list|()
return|;
block|}
specifier|private
specifier|final
name|ByteStream
operator|.
name|Output
name|output
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|serializeKey
parameter_list|(
name|Object
name|object
parameter_list|,
name|StructField
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectInspector
name|inspector
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|inspector
operator|.
name|getCategory
argument_list|()
operator|!=
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"invalid type value "
operator|+
name|inspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|element
range|:
operator|(
operator|(
name|StructObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|object
argument_list|)
control|)
block|{
if|if
condition|(
name|output
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|DELIMITER_BINARY
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|write
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|element
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|output
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|?
name|output
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
return|;
block|}
specifier|private
specifier|static
class|class
name|DoubleDollarSeparated
implements|implements
name|LazyObjectBase
block|{
specifier|private
name|Object
index|[]
name|fields
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ByteArrayRef
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|fields
operator|=
operator|new
name|String
argument_list|(
name|bytes
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
operator|.
name|split
argument_list|(
name|DELIMITER_PATTERN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SlashSeparatedOI
extends|extends
name|BaseStructObjectInspector
block|{
specifier|private
name|int
name|length
decl_stmt|;
specifier|private
name|SlashSeparatedOI
parameter_list|(
name|StructTypeInfo
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|type
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ois
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|(
name|names
argument_list|,
name|ois
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getStructFieldData
parameter_list|(
name|Object
name|data
parameter_list|,
name|StructField
name|fieldRef
parameter_list|)
block|{
return|return
operator|(
operator|(
name|DoubleDollarSeparated
operator|)
name|data
operator|)
operator|.
name|fields
index|[
operator|(
operator|(
name|MyField
operator|)
name|fieldRef
operator|)
operator|.
name|getFieldID
argument_list|()
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getStructFieldsDataAsList
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
operator|(
name|DoubleDollarSeparated
operator|)
name|data
operator|)
operator|.
name|fields
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

