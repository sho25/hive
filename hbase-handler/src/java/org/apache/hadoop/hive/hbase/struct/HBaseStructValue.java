begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|struct
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazySimpleStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_comment
comment|/**  * This is an extension of LazyStruct. All value structs should extend this class and override the  * {@link LazyStruct#getField(int)} method where fieldID corresponds to the ID of a value in the  * value structure.  *<p>  * For example, for a value structure<i>"/part1/part2/part3"</i>,<i>part1</i> will have an id  *<i>0</i>,<i>part2</i> will have an id<i>1</i> and<i>part3</i> will have an id<i>2</i>. Custom  * implementations of getField(fieldID) should return the value corresponding to that fieldID. So,  * for the above example, the value returned for<i>getField(0)</i> should be</i>part1</i>,  *<i>getField(1)</i> should be<i>part2</i> and<i>getField(2)</i> should be<i>part3</i>.  *</p>  *<p>  * All implementation are expected to have a constructor of the form<br>  *  *<pre>  * MyCustomStructObject(LazySimpleStructObjectInspector oi, Properties props, Configuration conf, ColumnMapping colMap)  *</pre>  *   *</p>  * */
end_comment

begin_class
specifier|public
class|class
name|HBaseStructValue
extends|extends
name|LazyStruct
block|{
comment|/**    * The column family name    */
specifier|protected
name|String
name|familyName
decl_stmt|;
comment|/**    * The column qualifier name    */
specifier|protected
name|String
name|qualifierName
decl_stmt|;
specifier|public
name|HBaseStructValue
parameter_list|(
name|LazySimpleStructObjectInspector
name|oi
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the row data for this LazyStruct.    *     * @see LazyObject#init(ByteArrayRef, int, int)    *     * @param familyName The column family name    * @param qualifierName The column qualifier name    */
specifier|public
name|void
name|init
parameter_list|(
name|ByteArrayRef
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|String
name|familyName
parameter_list|,
name|String
name|qualifierName
parameter_list|)
block|{
name|init
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|familyName
operator|=
name|familyName
expr_stmt|;
name|this
operator|.
name|qualifierName
operator|=
name|qualifierName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|getFieldsAsList
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|allFields
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|allFields
operator|.
name|add
argument_list|(
name|getField
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|allFields
return|;
block|}
comment|/**    * Create an initialize a {@link LazyObject} with the given bytes for the given fieldID.    *     * @param fieldID field for which the object is to be created    * @param bytes value with which the object is to be initialized with    * @return initialized {@link LazyObject}    * */
specifier|public
name|LazyObject
argument_list|<
name|?
extends|extends
name|ObjectInspector
argument_list|>
name|toLazyObject
parameter_list|(
name|int
name|fieldID
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|ObjectInspector
name|fieldOI
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
name|fieldID
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|LazyObject
argument_list|<
name|?
extends|extends
name|ObjectInspector
argument_list|>
name|lazyObject
init|=
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|fieldOI
argument_list|)
decl_stmt|;
name|ByteArrayRef
name|ref
init|=
operator|new
name|ByteArrayRef
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setData
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
comment|// initialize the lazy object
name|lazyObject
operator|.
name|init
argument_list|(
name|ref
argument_list|,
literal|0
argument_list|,
name|ref
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|lazyObject
return|;
block|}
block|}
end_class

end_unit

