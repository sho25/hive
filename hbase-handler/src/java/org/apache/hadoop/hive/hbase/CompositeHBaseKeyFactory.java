begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FamilyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapReduceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexPredicateAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeFieldDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazySimpleStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeHBaseKeyFactory
parameter_list|<
name|T
extends|extends
name|HBaseCompositeKey
parameter_list|>
extends|extends
name|DefaultHBaseKeyFactory
implements|implements
name|Configurable
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CompositeHBaseKeyFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|keyClass
decl_stmt|;
specifier|private
specifier|final
name|Constructor
name|constructor
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|CompositeHBaseKeyFactory
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|keyClass
parameter_list|)
throws|throws
name|Exception
block|{
comment|// see javadoc of HBaseCompositeKey
name|this
operator|.
name|keyClass
operator|=
name|keyClass
expr_stmt|;
name|this
operator|.
name|constructor
operator|=
name|keyClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|LazySimpleStructObjectInspector
operator|.
name|class
argument_list|,
name|Properties
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureJobConf
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|configureJobConf
argument_list|(
name|tableDesc
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|jobConf
argument_list|,
name|keyClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|createKey
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
return|return
operator|(
name|T
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|inspector
argument_list|,
name|properties
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DecomposedPredicate
name|decomposePredicate
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|Deserializer
name|deserializer
parameter_list|,
name|ExprNodeDesc
name|predicate
parameter_list|)
block|{
name|String
name|keyColName
init|=
name|hbaseParams
operator|.
name|getKeyColumnMapping
argument_list|()
operator|.
name|columnName
decl_stmt|;
name|IndexPredicateAnalyzer
name|analyzer
init|=
name|IndexPredicateAnalyzer
operator|.
name|createAnalyzer
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|allowColumnName
argument_list|(
name|keyColName
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setAcceptsFields
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setFieldValidator
argument_list|(
operator|new
name|Validator
argument_list|()
argument_list|)
expr_stmt|;
name|DecomposedPredicate
name|decomposed
init|=
operator|new
name|DecomposedPredicate
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|conditions
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|()
decl_stmt|;
name|decomposed
operator|.
name|residualPredicate
operator|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|analyzer
operator|.
name|analyzePredicate
argument_list|(
name|predicate
argument_list|,
name|conditions
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|conditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|decomposed
operator|.
name|pushedPredicate
operator|=
name|analyzer
operator|.
name|translateSearchConditions
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
try|try
block|{
name|decomposed
operator|.
name|pushedPredicateObject
operator|=
name|setupFilter
argument_list|(
name|keyColName
argument_list|,
name|conditions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to decompose predicates"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|decomposed
return|;
block|}
specifier|protected
name|Serializable
name|setupFilter
parameter_list|(
name|String
name|keyColName
parameter_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|conditions
parameter_list|)
throws|throws
name|Exception
block|{
name|HBaseScanRange
name|scanRange
init|=
operator|new
name|HBaseScanRange
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|condition
range|:
name|conditions
control|)
block|{
if|if
condition|(
name|condition
operator|.
name|getFields
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|field
init|=
name|condition
operator|.
name|getFields
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|value
init|=
name|condition
operator|.
name|getConstantDesc
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|scanRange
operator|.
name|addFilter
argument_list|(
operator|new
name|FamilyFilter
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|field
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scanRange
return|;
block|}
specifier|private
specifier|static
class|class
name|Validator
implements|implements
name|IndexPredicateAnalyzer
operator|.
name|FieldValidator
block|{
comment|/**      * Validates the field in the {@link ExprNodeFieldDesc}. Basically this validates that the given field is the first field in the given struct.      * This is important specially in case of structs as order of fields in the structs is important when using for any filter down the line      **/
specifier|public
name|boolean
name|validate
parameter_list|(
name|ExprNodeFieldDesc
name|fieldDesc
parameter_list|)
block|{
name|String
name|fieldName
init|=
name|fieldDesc
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|nodeDesc
init|=
name|fieldDesc
operator|.
name|getDesc
argument_list|()
decl_stmt|;
name|TypeInfo
name|typeInfo
init|=
name|nodeDesc
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|typeInfo
operator|instanceof
name|StructTypeInfo
operator|)
condition|)
block|{
comment|// since we are working off a ExprNodeFieldDesc which represents a field within a struct, this
comment|// should never happen
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Expected StructTypeInfo. Found:"
operator|+
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|allFieldNames
init|=
operator|(
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|allFieldNames
operator|==
literal|null
operator|||
name|allFieldNames
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|firstElement
init|=
name|allFieldNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|firstElement
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

