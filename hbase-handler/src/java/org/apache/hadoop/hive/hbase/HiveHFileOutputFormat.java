begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|HFileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|FSRecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * HiveHFileOutputFormat implements HiveOutputFormat for HFile bulk  * loading.  Until HBASE-1861 is implemented, it can only be used  * for loading a table with a single column family.  */
end_comment

begin_class
specifier|public
class|class
name|HiveHFileOutputFormat
extends|extends
name|HFileOutputFormat
implements|implements
name|HiveOutputFormat
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|KeyValue
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HFILE_FAMILY_PATH
init|=
literal|"hfile.family.path"
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveHFileOutputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|KeyValue
argument_list|>
name|getFileWriter
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
name|tac
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|super
operator|.
name|getRecordWriter
argument_list|(
name|tac
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|FSRecordWriter
name|getHiveRecordWriter
parameter_list|(
specifier|final
name|JobConf
name|jc
parameter_list|,
specifier|final
name|Path
name|finalOutPath
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|Properties
name|tableProperties
parameter_list|,
specifier|final
name|Progressable
name|progressable
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Read configuration for the target path
name|String
name|hfilePath
init|=
name|tableProperties
operator|.
name|getProperty
argument_list|(
name|HFILE_FAMILY_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|hfilePath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Please set "
operator|+
name|HFILE_FAMILY_PATH
operator|+
literal|" to target location for HFiles"
argument_list|)
throw|;
block|}
comment|// Target path's last component is also the column family name.
specifier|final
name|Path
name|columnFamilyPath
init|=
operator|new
name|Path
argument_list|(
name|hfilePath
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnFamilyName
init|=
name|columnFamilyPath
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|columnFamilyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|columnFamilyName
argument_list|)
decl_stmt|;
specifier|final
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|setCompressOutput
argument_list|(
name|job
argument_list|,
name|isCompressed
argument_list|)
expr_stmt|;
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|finalOutPath
argument_list|)
expr_stmt|;
comment|// Create the HFile writer
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
name|tac
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|newTaskAttemptContext
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|progressable
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|outputdir
init|=
name|FileOutputFormat
operator|.
name|getOutputPath
argument_list|(
name|tac
argument_list|)
decl_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordWriter
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|KeyValue
argument_list|>
name|fileWriter
init|=
name|getFileWriter
argument_list|(
name|tac
argument_list|)
decl_stmt|;
comment|// Individual columns are going to be pivoted to HBase cells,
comment|// and for each row, they need to be written out in order
comment|// of column name, so sort the column names now, creating a
comment|// mapping to their column position.  However, the first
comment|// column is interpreted as the row key.
name|String
name|columnList
init|=
name|tableProperties
operator|.
name|getProperty
argument_list|(
literal|"columns"
argument_list|)
decl_stmt|;
name|String
index|[]
name|columnArray
init|=
name|columnList
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
specifier|final
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|columnMap
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|columnName
range|:
name|columnArray
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|columnMap
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|columnName
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
operator|new
name|FSRecordWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|abort
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|fileWriter
operator|.
name|close
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|abort
condition|)
block|{
return|return;
block|}
comment|// Move the region file(s) from the task output directory
comment|// to the location specified by the user.  There should
comment|// actually only be one (each reducer produces one HFile),
comment|// but we don't know what its name is.
name|FileSystem
name|fs
init|=
name|outputdir
operator|.
name|getFileSystem
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|columnFamilyPath
argument_list|)
expr_stmt|;
name|Path
name|srcDir
init|=
name|outputdir
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|files
operator|==
literal|null
operator|)
operator|||
operator|(
name|files
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No files found in "
operator|+
name|srcDir
argument_list|)
throw|;
block|}
if|if
condition|(
name|files
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Multiple files found in "
operator|+
name|srcDir
argument_list|)
throw|;
block|}
name|srcDir
operator|=
name|files
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|srcDir
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|columnFamilyName
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
for|for
control|(
name|FileStatus
name|regionFile
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|srcDir
argument_list|)
control|)
block|{
name|fs
operator|.
name|rename
argument_list|(
name|regionFile
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|columnFamilyPath
argument_list|,
name|regionFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Hive actually wants a file as task output (not a directory), so
comment|// replace the empty directory with an empty file to keep it happy.
name|fs
operator|.
name|delete
argument_list|(
name|outputdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|outputdir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Writable
name|w
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Decompose the incoming text row into fields.
name|String
name|s
init|=
operator|(
operator|(
name|Text
operator|)
name|w
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|fields
init|=
name|s
operator|.
name|split
argument_list|(
literal|"\u0001"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|fields
operator|.
name|length
operator|<=
operator|(
name|columnMap
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
operator|)
assert|;
comment|// First field is the row key.
name|byte
index|[]
name|rowKeyBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|fields
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// Remaining fields are cells addressed by column name within row.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|columnMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|columnNameBytes
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|iColumn
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|val
decl_stmt|;
if|if
condition|(
name|iColumn
operator|>=
name|fields
operator|.
name|length
condition|)
block|{
comment|// trailing blank field
name|val
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
name|fields
index|[
name|iColumn
index|]
expr_stmt|;
if|if
condition|(
literal|"\\N"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
comment|// omit nulls
continue|continue;
block|}
block|}
name|byte
index|[]
name|valBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rowKeyBytes
argument_list|,
name|columnFamilyNameBytes
argument_list|,
name|columnNameBytes
argument_list|,
name|valBytes
argument_list|)
decl_stmt|;
try|try
block|{
name|fileWriter
operator|.
name|write
argument_list|(
literal|null
argument_list|,
name|kv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|jc
parameter_list|)
throws|throws
name|IOException
block|{
comment|//delegate to the new api
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|jc
argument_list|)
decl_stmt|;
name|JobContext
name|jobContext
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|newJobContext
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|checkOutputSpecs
argument_list|(
name|jobContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|KeyValue
argument_list|>
name|getRecordWriter
parameter_list|(
name|FileSystem
name|ignored
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|String
name|name
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"This will not be invoked"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

