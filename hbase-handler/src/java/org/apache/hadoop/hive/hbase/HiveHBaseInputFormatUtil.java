begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|ColumnMappings
operator|.
name|ColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Util code common between HiveHBaseTableInputFormat and HiveHBaseTableSnapshotInputFormat.  */
end_comment

begin_class
class|class
name|HiveHBaseInputFormatUtil
block|{
comment|/**    * Parse {@code jobConf} to create the target {@link HTable} instance.    */
specifier|public
specifier|static
name|HTable
name|getTable
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hbaseTableName
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_NAME
argument_list|)
decl_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|jobConf
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|hbaseTableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Parse {@code jobConf} to create a {@link Scan} instance.    */
specifier|public
specifier|static
name|Scan
name|getScan
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hbaseColumnsMapping
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|)
decl_stmt|;
name|boolean
name|doColumnRegexMatching
init|=
name|jobConf
operator|.
name|getBoolean
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_REGEX_MATCHING
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|readColIDs
init|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|ColumnMappings
name|columnMappings
decl_stmt|;
try|try
block|{
name|columnMappings
operator|=
name|HBaseSerDe
operator|.
name|parseColumnsMapping
argument_list|(
name|hbaseColumnsMapping
argument_list|,
name|doColumnRegexMatching
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|columnMappings
operator|.
name|size
argument_list|()
operator|<
name|readColIDs
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot read more columns than the given table contains."
argument_list|)
throw|;
block|}
name|boolean
name|readAllColumns
init|=
name|ColumnProjectionUtils
operator|.
name|isReadAllColumns
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|boolean
name|empty
init|=
literal|true
decl_stmt|;
comment|// The list of families that have been added to the scan
name|List
argument_list|<
name|String
argument_list|>
name|addedFamilies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|readAllColumns
condition|)
block|{
name|ColumnMapping
index|[]
name|columnsMapping
init|=
name|columnMappings
operator|.
name|getColumnsMapping
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|readColIDs
control|)
block|{
name|ColumnMapping
name|colMap
init|=
name|columnsMapping
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|colMap
operator|.
name|hbaseRowKey
operator|||
name|colMap
operator|.
name|hbaseTimestamp
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|colMap
operator|.
name|qualifierName
operator|==
literal|null
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|)
expr_stmt|;
name|addedFamilies
operator|.
name|add
argument_list|(
name|colMap
operator|.
name|familyName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|addedFamilies
operator|.
name|contains
argument_list|(
name|colMap
operator|.
name|familyName
argument_list|)
condition|)
block|{
comment|// add only if the corresponding family has not already been added
name|scan
operator|.
name|addColumn
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|,
name|colMap
operator|.
name|qualifierNameBytes
argument_list|)
expr_stmt|;
block|}
block|}
name|empty
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// The HBase table's row key maps to a Hive table column. In the corner case when only the
comment|// row key column is selected in Hive, the HBase Scan will be empty i.e. no column family/
comment|// column qualifier will have been added to the scan. We arbitrarily add at least one column
comment|// to the HBase scan so that we can retrieve all of the row keys and return them as the Hive
comment|// tables column projection.
if|if
condition|(
name|empty
condition|)
block|{
for|for
control|(
name|ColumnMapping
name|colMap
range|:
name|columnMappings
control|)
block|{
if|if
condition|(
name|colMap
operator|.
name|hbaseRowKey
operator|||
name|colMap
operator|.
name|hbaseTimestamp
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|colMap
operator|.
name|qualifierName
operator|==
literal|null
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|,
name|colMap
operator|.
name|qualifierNameBytes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|readAllColumns
condition|)
block|{
break|break;
block|}
block|}
block|}
name|String
name|scanCache
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_SCAN_CACHE
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanCache
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setCaching
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|scanCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|scanCacheBlocks
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_SCAN_CACHEBLOCKS
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanCacheBlocks
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setCacheBlocks
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|scanCacheBlocks
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|scanBatch
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_SCAN_BATCH
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanBatch
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setBatch
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|scanBatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
specifier|public
specifier|static
name|boolean
name|getStorageFormatOfKey
parameter_list|(
name|String
name|spec
parameter_list|,
name|String
name|defaultFormat
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|mapInfo
init|=
name|spec
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
name|boolean
name|tblLevelDefault
init|=
literal|"binary"
operator|.
name|equalsIgnoreCase
argument_list|(
name|defaultFormat
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mapInfo
operator|.
name|length
condition|)
block|{
case|case
literal|1
case|:
return|return
name|tblLevelDefault
return|;
case|case
literal|2
case|:
name|String
name|storageType
init|=
name|mapInfo
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|storageType
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
return|return
name|tblLevelDefault
return|;
block|}
elseif|else
if|if
condition|(
literal|"string"
operator|.
name|startsWith
argument_list|(
name|storageType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
literal|"binary"
operator|.
name|startsWith
argument_list|(
name|storageType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Malformed string: "
operator|+
name|spec
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|>
name|decompose
parameter_list|(
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|searchConditions
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|condition
range|:
name|searchConditions
control|)
block|{
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|conditions
init|=
name|result
operator|.
name|get
argument_list|(
name|condition
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|conditions
operator|==
literal|null
condition|)
block|{
name|conditions
operator|=
operator|new
name|ArrayList
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|condition
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getColumn
argument_list|()
argument_list|,
name|conditions
argument_list|)
expr_stmt|;
block|}
name|conditions
operator|.
name|add
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

