begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|KeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|ColumnMappings
operator|.
name|ColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeConstantEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Util code common between HiveHBaseTableInputFormat and HiveHBaseTableSnapshotInputFormat.  */
end_comment

begin_class
class|class
name|HiveHBaseInputFormatUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveHBaseInputFormatUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Parse {@code jobConf} to create a {@link Scan} instance.    */
specifier|public
specifier|static
name|Scan
name|getScan
parameter_list|(
name|JobConf
name|jobConf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hbaseColumnsMapping
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|)
decl_stmt|;
name|boolean
name|doColumnRegexMatching
init|=
name|jobConf
operator|.
name|getBoolean
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_REGEX_MATCHING
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|readColIDs
init|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|ColumnMappings
name|columnMappings
decl_stmt|;
try|try
block|{
name|columnMappings
operator|=
name|HBaseSerDe
operator|.
name|parseColumnsMapping
argument_list|(
name|hbaseColumnsMapping
argument_list|,
name|doColumnRegexMatching
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|columnMappings
operator|.
name|size
argument_list|()
operator|<
name|readColIDs
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot read more columns than the given table contains."
argument_list|)
throw|;
block|}
name|boolean
name|readAllColumns
init|=
name|ColumnProjectionUtils
operator|.
name|isReadAllColumns
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|boolean
name|empty
init|=
literal|true
decl_stmt|;
comment|// The list of families that have been added to the scan
name|List
argument_list|<
name|String
argument_list|>
name|addedFamilies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|readAllColumns
condition|)
block|{
name|ColumnMapping
index|[]
name|columnsMapping
init|=
name|columnMappings
operator|.
name|getColumnsMapping
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|readColIDs
control|)
block|{
name|ColumnMapping
name|colMap
init|=
name|columnsMapping
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|colMap
operator|.
name|hbaseRowKey
operator|||
name|colMap
operator|.
name|hbaseTimestamp
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|colMap
operator|.
name|qualifierName
operator|==
literal|null
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|)
expr_stmt|;
name|addedFamilies
operator|.
name|add
argument_list|(
name|colMap
operator|.
name|familyName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|addedFamilies
operator|.
name|contains
argument_list|(
name|colMap
operator|.
name|familyName
argument_list|)
condition|)
block|{
comment|// add only if the corresponding family has not already been added
name|scan
operator|.
name|addColumn
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|,
name|colMap
operator|.
name|qualifierNameBytes
argument_list|)
expr_stmt|;
block|}
block|}
name|empty
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// If we have cases where we are running a query like count(key) or count(*),
comment|// in such cases, the readColIDs is either empty(for count(*)) or has just the
comment|// key column in it. In either case, nothing gets added to the scan. So if readAllColumns is
comment|// true, we are going to add all columns. Else we are just going to add a key filter to run a
comment|// count only on the keys
if|if
condition|(
name|empty
condition|)
block|{
if|if
condition|(
name|readAllColumns
condition|)
block|{
for|for
control|(
name|ColumnMapping
name|colMap
range|:
name|columnMappings
control|)
block|{
if|if
condition|(
name|colMap
operator|.
name|hbaseRowKey
operator|||
name|colMap
operator|.
name|hbaseTimestamp
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|colMap
operator|.
name|qualifierName
operator|==
literal|null
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|,
name|colMap
operator|.
name|qualifierNameBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Add a filter to just do a scan on the keys so that we pick up everything
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|,
operator|new
name|KeyOnlyFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|scanCache
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_SCAN_CACHE
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanCache
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setCaching
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|scanCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|scanCacheBlocks
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_SCAN_CACHEBLOCKS
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanCacheBlocks
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setCacheBlocks
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|scanCacheBlocks
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|scanBatch
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_SCAN_BATCH
argument_list|)
decl_stmt|;
if|if
condition|(
name|scanBatch
operator|!=
literal|null
condition|)
block|{
name|scan
operator|.
name|setBatch
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|scanBatch
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|filterObjectSerialized
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_OBJECT_CONF_STR
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterObjectSerialized
operator|!=
literal|null
condition|)
block|{
name|setupScanRange
argument_list|(
name|scan
argument_list|,
name|filterObjectSerialized
argument_list|,
name|jobConf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
specifier|public
specifier|static
name|boolean
name|getStorageFormatOfKey
parameter_list|(
name|String
name|spec
parameter_list|,
name|String
name|defaultFormat
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|mapInfo
init|=
name|spec
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
name|boolean
name|tblLevelDefault
init|=
literal|"binary"
operator|.
name|equalsIgnoreCase
argument_list|(
name|defaultFormat
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mapInfo
operator|.
name|length
condition|)
block|{
case|case
literal|1
case|:
return|return
name|tblLevelDefault
return|;
case|case
literal|2
case|:
name|String
name|storageType
init|=
name|mapInfo
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|storageType
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
return|return
name|tblLevelDefault
return|;
block|}
elseif|else
if|if
condition|(
literal|"string"
operator|.
name|startsWith
argument_list|(
name|storageType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
literal|"binary"
operator|.
name|startsWith
argument_list|(
name|storageType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Malformed string: "
operator|+
name|spec
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|>
name|decompose
parameter_list|(
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|searchConditions
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|condition
range|:
name|searchConditions
control|)
block|{
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|conditions
init|=
name|result
operator|.
name|get
argument_list|(
name|condition
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|conditions
operator|==
literal|null
condition|)
block|{
name|conditions
operator|=
operator|new
name|ArrayList
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|condition
operator|.
name|getColumnDesc
argument_list|()
operator|.
name|getColumn
argument_list|()
argument_list|,
name|conditions
argument_list|)
expr_stmt|;
block|}
name|conditions
operator|.
name|add
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|static
name|void
name|setupScanRange
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|String
name|filterObjectSerialized
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|boolean
name|filterOnly
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseScanRange
name|range
init|=
name|SerializationUtilities
operator|.
name|deserializeObject
argument_list|(
name|filterObjectSerialized
argument_list|,
name|HBaseScanRange
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|range
operator|.
name|setup
argument_list|(
name|scan
argument_list|,
name|jobConf
argument_list|,
name|filterOnly
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|void
name|setupKeyRange
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|conditions
parameter_list|,
name|boolean
name|isBinary
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Convert the search condition into a restriction on the HBase scan
name|byte
index|[]
name|startRow
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|,
name|stopRow
init|=
name|HConstants
operator|.
name|EMPTY_END_ROW
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|sc
range|:
name|conditions
control|)
block|{
name|ExprNodeConstantEvaluator
name|eval
init|=
operator|new
name|ExprNodeConstantEvaluator
argument_list|(
name|sc
operator|.
name|getConstantDesc
argument_list|()
argument_list|)
decl_stmt|;
name|PrimitiveObjectInspector
name|objInspector
decl_stmt|;
name|Object
name|writable
decl_stmt|;
try|try
block|{
name|objInspector
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|eval
operator|.
name|initialize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|writable
operator|=
name|eval
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Currently only primitve types are supported. Found: "
operator|+
name|sc
operator|.
name|getConstantDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|byte
index|[]
name|constantVal
init|=
name|getConstantVal
argument_list|(
name|writable
argument_list|,
name|objInspector
argument_list|,
name|isBinary
argument_list|)
decl_stmt|;
name|String
name|comparisonOp
init|=
name|sc
operator|.
name|getComparisonOp
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|startRow
operator|=
name|constantVal
expr_stmt|;
name|stopRow
operator|=
name|getNextBA
argument_list|(
name|constantVal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPLessThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|stopRow
operator|=
name|constantVal
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|startRow
operator|=
name|constantVal
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPGreaterThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|startRow
operator|=
name|getNextBA
argument_list|(
name|constantVal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrLessThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|stopRow
operator|=
name|getNextBA
argument_list|(
name|constantVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|comparisonOp
operator|+
literal|" is not a supported comparison operator"
argument_list|)
throw|;
block|}
block|}
name|scan
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startRow
argument_list|)
operator|+
literal|" ~ "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|setupTimeRange
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|conditions
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
literal|0
decl_stmt|;
name|long
name|end
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|sc
range|:
name|conditions
control|)
block|{
name|long
name|timestamp
init|=
name|getTimestampVal
argument_list|(
name|sc
argument_list|)
decl_stmt|;
name|String
name|comparisonOp
init|=
name|sc
operator|.
name|getComparisonOp
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|start
operator|=
name|timestamp
expr_stmt|;
name|end
operator|=
name|timestamp
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPLessThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|end
operator|=
name|timestamp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|start
operator|=
name|timestamp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPGreaterThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|start
operator|=
name|timestamp
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrLessThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|end
operator|=
name|timestamp
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|comparisonOp
operator|+
literal|" is not a supported comparison operator"
argument_list|)
throw|;
block|}
block|}
name|scan
operator|.
name|setTimeRange
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|static
name|long
name|getTimestampVal
parameter_list|(
name|IndexSearchCondition
name|sc
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|timestamp
decl_stmt|;
try|try
block|{
name|ExprNodeConstantEvaluator
name|eval
init|=
operator|new
name|ExprNodeConstantEvaluator
argument_list|(
name|sc
operator|.
name|getConstantDesc
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInspector
name|inspector
init|=
name|eval
operator|.
name|initialize
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|eval
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|inspector
operator|instanceof
name|LongObjectInspector
condition|)
block|{
name|timestamp
operator|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|get
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PrimitiveObjectInspector
name|primitive
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|inspector
decl_stmt|;
name|timestamp
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestamp
argument_list|(
name|value
argument_list|,
name|primitive
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|timestamp
return|;
block|}
specifier|static
name|byte
index|[]
name|getConstantVal
parameter_list|(
name|Object
name|writable
parameter_list|,
name|PrimitiveObjectInspector
name|poi
parameter_list|,
name|boolean
name|isKeyBinary
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isKeyBinary
condition|)
block|{
comment|// Key is stored in text format. Get bytes representation of constant also of
comment|// text format.
name|byte
index|[]
name|startRow
decl_stmt|;
name|ByteStream
operator|.
name|Output
name|serializeStream
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
name|LazyUtils
operator|.
name|writePrimitiveUTF8
argument_list|(
name|serializeStream
argument_list|,
name|writable
argument_list|,
name|poi
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|startRow
operator|=
operator|new
name|byte
index|[
name|serializeStream
operator|.
name|getLength
argument_list|()
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|serializeStream
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|startRow
argument_list|,
literal|0
argument_list|,
name|serializeStream
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|startRow
return|;
block|}
name|PrimitiveCategory
name|pc
init|=
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|INT
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|IntWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|BOOLEAN
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|BooleanWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|LongWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|FloatWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|DoubleWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|ShortWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|writable
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|ByteWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Type not supported "
operator|+
name|pc
argument_list|)
throw|;
block|}
block|}
specifier|static
name|byte
index|[]
name|getNextBA
parameter_list|(
name|byte
index|[]
name|current
parameter_list|)
block|{
comment|// startRow is inclusive while stopRow is exclusive,
comment|// this util method returns very next bytearray which will occur after the current one
comment|// by padding current one with a trailing 0 byte.
name|byte
index|[]
name|next
init|=
operator|new
name|byte
index|[
name|current
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|current
argument_list|,
literal|0
argument_list|,
name|next
argument_list|,
literal|0
argument_list|,
name|current
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|next
return|;
block|}
block|}
end_class

end_unit

