begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazySimpleStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * HBaseSerDe can be used to serialize object into an HBase table and  * deserialize objects from an HBase table.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseSerDe
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_COLUMNS_MAPPING
init|=
literal|"hbase.columns.mapping"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_TABLE_NAME
init|=
literal|"hbase.table.name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
init|=
literal|"hbase.table.default.storage.type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_KEY_COL
init|=
literal|":key"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_PUT_TIMESTAMP
init|=
literal|"hbase.put.timestamp"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_COMPOSITE_KEY_CLASS
init|=
literal|"hbase.composite.key.class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_SCAN_CACHE
init|=
literal|"hbase.scan.cache"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_SCAN_CACHEBLOCKS
init|=
literal|"hbase.scan.cacheblock"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_SCAN_BATCH
init|=
literal|"hbase.scan.batch"
decl_stmt|;
comment|/**    *  Determines whether a regex matching should be done on the columns or not. Defaults to true.    *<strong>WARNING: Note that currently this only supports the suffix wildcard .*</strong>    */
specifier|public
specifier|static
specifier|final
name|String
name|HBASE_COLUMNS_REGEX_MATCHING
init|=
literal|"hbase.columns.mapping.regex.matching"
decl_stmt|;
specifier|private
name|ObjectInspector
name|cachedObjectInspector
decl_stmt|;
specifier|private
name|LazyHBaseRow
name|cachedHBaseRow
decl_stmt|;
specifier|private
name|Object
name|compositeKeyObj
decl_stmt|;
specifier|private
name|HBaseSerDeParameters
name|serdeParams
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"["
operator|+
name|serdeParams
operator|.
name|getColumnMappingString
argument_list|()
operator|+
literal|":"
operator|+
name|serdeParams
operator|.
name|getRowTypeInfo
argument_list|()
operator|.
name|getAllStructFieldNames
argument_list|()
operator|+
literal|":"
operator|+
name|serdeParams
operator|.
name|getRowTypeInfo
argument_list|()
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|HBaseSerDe
parameter_list|()
throws|throws
name|SerDeException
block|{   }
comment|/**    * Initialize the SerDe given parameters.    * @see SerDe#initialize(Configuration, Properties)    */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
name|serdeParams
operator|=
operator|new
name|HBaseSerDeParameters
argument_list|()
expr_stmt|;
name|serdeParams
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cachedObjectInspector
operator|=
name|LazyFactory
operator|.
name|createLazyStructInspector
argument_list|(
name|serdeParams
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getSeparators
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getNullSequence
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|isLastColumnTakesRest
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|isEscaped
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getEscapeChar
argument_list|()
argument_list|)
expr_stmt|;
name|cachedHBaseRow
operator|=
operator|new
name|LazyHBaseRow
argument_list|(
operator|(
name|LazySimpleStructObjectInspector
operator|)
name|cachedObjectInspector
argument_list|)
expr_stmt|;
if|if
condition|(
name|serdeParams
operator|.
name|getCompositeKeyClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// initialize the constructor of the composite key class with its object inspector
name|initCompositeKeyClass
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"HBaseSerDe initialized with : columnNames = "
operator|+
name|serdeParams
operator|.
name|getColumnNames
argument_list|()
operator|+
literal|" columnTypes = "
operator|+
name|serdeParams
operator|.
name|getColumnTypes
argument_list|()
operator|+
literal|" hbaseColumnMapping = "
operator|+
name|serdeParams
operator|.
name|getColumnMappingString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Parses the HBase columns mapping specifier to identify the column families, qualifiers    * and also caches the byte arrays corresponding to them. One of the Hive table    * columns maps to the HBase row key, by default the first column.    *    * @param columnsMappingSpec string hbase.columns.mapping specified when creating table    * @param doColumnRegexMatching whether to do a regex matching on the columns or not    * @return List<ColumnMapping> which contains the column mapping information by position    * @throws SerDeException    */
specifier|public
specifier|static
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|parseColumnsMapping
parameter_list|(
name|String
name|columnsMappingSpec
parameter_list|,
name|boolean
name|doColumnRegexMatching
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|columnsMappingSpec
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Error: hbase.columns.mapping missing for this HBase table."
argument_list|)
throw|;
block|}
if|if
condition|(
name|columnsMappingSpec
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|columnsMappingSpec
operator|.
name|equals
argument_list|(
name|HBASE_KEY_COL
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Error: hbase.columns.mapping specifies only the HBase table"
operator|+
literal|" row key. A valid Hive-HBase table must specify at least one additional column."
argument_list|)
throw|;
block|}
name|int
name|rowKeyIndex
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|columnsMapping
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnMapping
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|columnSpecs
init|=
name|columnsMappingSpec
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|ColumnMapping
name|columnMapping
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnSpecs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|mappingSpec
init|=
name|columnSpecs
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
index|[]
name|mapInfo
init|=
name|mappingSpec
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
name|String
name|colInfo
init|=
name|mapInfo
index|[
literal|0
index|]
decl_stmt|;
name|int
name|idxFirst
init|=
name|colInfo
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|int
name|idxLast
init|=
name|colInfo
operator|.
name|lastIndexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxFirst
operator|<
literal|0
operator|||
operator|!
operator|(
name|idxFirst
operator|==
name|idxLast
operator|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Error: the HBase columns mapping contains a badly formed "
operator|+
literal|"column family, column qualifier specification."
argument_list|)
throw|;
block|}
name|columnMapping
operator|=
operator|new
name|ColumnMapping
argument_list|()
expr_stmt|;
if|if
condition|(
name|colInfo
operator|.
name|equals
argument_list|(
name|HBASE_KEY_COL
argument_list|)
condition|)
block|{
name|rowKeyIndex
operator|=
name|i
expr_stmt|;
name|columnMapping
operator|.
name|familyName
operator|=
name|colInfo
expr_stmt|;
name|columnMapping
operator|.
name|familyNameBytes
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|colInfo
argument_list|)
expr_stmt|;
name|columnMapping
operator|.
name|qualifierName
operator|=
literal|null
expr_stmt|;
name|columnMapping
operator|.
name|qualifierNameBytes
operator|=
literal|null
expr_stmt|;
name|columnMapping
operator|.
name|hbaseRowKey
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|parts
init|=
name|colInfo
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|parts
operator|.
name|length
operator|>
literal|0
operator|&&
name|parts
operator|.
name|length
operator|<=
literal|2
operator|)
assert|;
name|columnMapping
operator|.
name|familyName
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|columnMapping
operator|.
name|familyNameBytes
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|columnMapping
operator|.
name|hbaseRowKey
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|doColumnRegexMatching
operator|&&
name|parts
index|[
literal|1
index|]
operator|.
name|endsWith
argument_list|(
literal|".*"
argument_list|)
condition|)
block|{
comment|// we have a prefix with a wildcard
name|columnMapping
operator|.
name|qualifierPrefix
operator|=
name|parts
index|[
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|parts
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|columnMapping
operator|.
name|qualifierPrefixBytes
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|columnMapping
operator|.
name|qualifierPrefix
argument_list|)
expr_stmt|;
comment|// we weren't provided any actual qualifier name. Set these to
comment|// null.
name|columnMapping
operator|.
name|qualifierName
operator|=
literal|null
expr_stmt|;
name|columnMapping
operator|.
name|qualifierNameBytes
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// set the regular provided qualifier names
name|columnMapping
operator|.
name|qualifierName
operator|=
name|parts
index|[
literal|1
index|]
expr_stmt|;
name|columnMapping
operator|.
name|qualifierNameBytes
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
else|else
block|{
name|columnMapping
operator|.
name|qualifierName
operator|=
literal|null
expr_stmt|;
name|columnMapping
operator|.
name|qualifierNameBytes
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|columnMapping
operator|.
name|mappingSpec
operator|=
name|mappingSpec
expr_stmt|;
name|columnsMapping
operator|.
name|add
argument_list|(
name|columnMapping
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rowKeyIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|columnMapping
operator|=
operator|new
name|ColumnMapping
argument_list|()
expr_stmt|;
name|columnMapping
operator|.
name|familyName
operator|=
name|HBASE_KEY_COL
expr_stmt|;
name|columnMapping
operator|.
name|familyNameBytes
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HBASE_KEY_COL
argument_list|)
expr_stmt|;
name|columnMapping
operator|.
name|qualifierName
operator|=
literal|null
expr_stmt|;
name|columnMapping
operator|.
name|qualifierNameBytes
operator|=
literal|null
expr_stmt|;
name|columnMapping
operator|.
name|hbaseRowKey
operator|=
literal|true
expr_stmt|;
name|columnMapping
operator|.
name|mappingSpec
operator|=
name|HBASE_KEY_COL
expr_stmt|;
name|columnsMapping
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|columnMapping
argument_list|)
expr_stmt|;
block|}
return|return
name|columnsMapping
return|;
block|}
specifier|static
class|class
name|ColumnMapping
block|{
name|ColumnMapping
parameter_list|()
block|{
name|binaryStorage
operator|=
operator|new
name|ArrayList
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|String
name|familyName
decl_stmt|;
name|String
name|qualifierName
decl_stmt|;
name|byte
index|[]
name|familyNameBytes
decl_stmt|;
name|byte
index|[]
name|qualifierNameBytes
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|binaryStorage
decl_stmt|;
name|boolean
name|hbaseRowKey
decl_stmt|;
name|String
name|mappingSpec
decl_stmt|;
name|String
name|qualifierPrefix
decl_stmt|;
name|byte
index|[]
name|qualifierPrefixBytes
decl_stmt|;
block|}
comment|/**    * Deserialize a row from the HBase Result writable to a LazyObject    * @param result the HBase Result Writable containing the row    * @return the deserialized object    * @see SerDe#deserialize(Writable)    */
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|result
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
operator|!
operator|(
name|result
operator|instanceof
name|ResultWritable
operator|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": expects ResultWritable!"
argument_list|)
throw|;
block|}
name|cachedHBaseRow
operator|.
name|init
argument_list|(
operator|(
operator|(
name|ResultWritable
operator|)
name|result
operator|)
operator|.
name|getResult
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getColumnMapping
argument_list|()
argument_list|,
name|compositeKeyObj
argument_list|)
expr_stmt|;
return|return
name|cachedHBaseRow
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|cachedObjectInspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|PutWritable
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|objInspector
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" can only serialize struct types, but we got: "
operator|+
name|objInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
comment|// Prepare the field ObjectInspectors
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|declaredFields
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|getObjectInspector
argument_list|()
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|int
name|iKey
init|=
name|serdeParams
operator|.
name|getKeyIndex
argument_list|()
decl_stmt|;
name|StructField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|iKey
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|list
operator|.
name|get
argument_list|(
name|iKey
argument_list|)
decl_stmt|;
name|StructField
name|declaredField
init|=
name|declaredFields
operator|.
name|get
argument_list|(
name|iKey
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
decl_stmt|;
try|try
block|{
name|key
operator|=
name|serializeKeyField
argument_list|(
name|field
argument_list|,
name|value
argument_list|,
name|declaredField
argument_list|,
name|serdeParams
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"HBase row key cannot be NULL"
argument_list|)
throw|;
block|}
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|long
name|putTimestamp
init|=
name|serdeParams
operator|.
name|getPutTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|putTimestamp
operator|>=
literal|0
condition|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|key
argument_list|,
name|putTimestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Serialize each field
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|iKey
condition|)
block|{
continue|continue;
block|}
name|field
operator|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|value
operator|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|declaredField
operator|=
name|declaredFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ColumnMapping
name|colMap
init|=
name|serdeParams
operator|.
name|getColumnMapping
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|serializeField
argument_list|(
name|put
argument_list|,
name|field
argument_list|,
name|value
argument_list|,
name|declaredField
argument_list|,
name|colMap
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|PutWritable
argument_list|(
name|put
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|serializeKeyField
parameter_list|(
name|StructField
name|keyField
parameter_list|,
name|Object
name|keyValue
parameter_list|,
name|StructField
name|declaredKeyField
parameter_list|,
name|HBaseSerDeParameters
name|serdeParams
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|keyValue
operator|==
literal|null
condition|)
block|{
comment|// a null object, we do not serialize it
return|return
literal|null
return|;
block|}
name|boolean
name|writeBinary
init|=
name|serdeParams
operator|.
name|getKeyColumnMapping
argument_list|()
operator|.
name|binaryStorage
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ObjectInspector
name|keyFieldOI
init|=
name|keyField
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|keyFieldOI
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|)
operator|&&
name|declaredKeyField
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|)
condition|)
block|{
comment|// we always serialize the String type using the escaped algorithm for LazyString
return|return
name|serialize
argument_list|(
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|keyValue
argument_list|,
name|keyFieldOI
argument_list|)
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|serdeParams
argument_list|)
return|;
block|}
else|else
block|{
comment|// use the serialization option switch to write primitive values as either a variable
comment|// length UTF8 string or a fixed width bytes if serializing in binary format
return|return
name|serialize
argument_list|(
name|keyValue
argument_list|,
name|keyFieldOI
argument_list|,
literal|1
argument_list|,
name|writeBinary
argument_list|,
name|serdeParams
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|serializeField
parameter_list|(
name|Put
name|put
parameter_list|,
name|StructField
name|field
parameter_list|,
name|Object
name|value
parameter_list|,
name|StructField
name|declaredField
parameter_list|,
name|ColumnMapping
name|colMap
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// a null object, we do not serialize it
return|return;
block|}
comment|// Get the field objectInspector and the field object.
name|ObjectInspector
name|foi
init|=
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
comment|// If the field corresponds to a column family in HBase
if|if
condition|(
name|colMap
operator|.
name|qualifierName
operator|==
literal|null
condition|)
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|foi
decl_stmt|;
name|ObjectInspector
name|koi
init|=
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|voi
init|=
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|moi
operator|.
name|getMap
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Get the Key
comment|// Map keys are required to be primitive and may be serialized in binary format
name|byte
index|[]
name|columnQualifierBytes
init|=
name|serialize
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|koi
argument_list|,
literal|3
argument_list|,
name|colMap
operator|.
name|binaryStorage
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnQualifierBytes
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// Map values may be serialized in binary format when they are primitive and binary
comment|// serialization is the option selected
name|byte
index|[]
name|bytes
init|=
name|serialize
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|voi
argument_list|,
literal|3
argument_list|,
name|colMap
operator|.
name|binaryStorage
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|put
operator|.
name|add
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|,
name|columnQualifierBytes
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|byte
index|[]
name|bytes
init|=
literal|null
decl_stmt|;
comment|// If the field that is passed in is NOT a primitive, and either the
comment|// field is not declared (no schema was given at initialization), or
comment|// the field is declared as a primitive in initialization, serialize
comment|// the data to JSON string.  Otherwise serialize the data in the
comment|// delimited way.
if|if
condition|(
operator|!
name|foi
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|)
operator|&&
name|declaredField
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|)
condition|)
block|{
comment|// we always serialize the String type using the escaped algorithm for LazyString
name|bytes
operator|=
name|serialize
argument_list|(
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|value
argument_list|,
name|foi
argument_list|)
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|serdeParams
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// use the serialization option switch to write primitive values as either a variable
comment|// length UTF8 string or a fixed width bytes if serializing in binary format
name|bytes
operator|=
name|serialize
argument_list|(
name|value
argument_list|,
name|foi
argument_list|,
literal|1
argument_list|,
name|colMap
operator|.
name|binaryStorage
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|serdeParams
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|put
operator|.
name|add
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|,
name|colMap
operator|.
name|qualifierNameBytes
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|getBytesFromStream
parameter_list|(
name|ByteStream
operator|.
name|Output
name|ss
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|ss
operator|.
name|getCount
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ss
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|ss
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
comment|/*    * Serialize the row into a ByteStream.    *    * @param obj           The object for the current field.    * @param objInspector  The ObjectInspector for the current Object.    * @param level         The current level of separator.    * @param writeBinary   Whether to write a primitive object as an UTF8 variable length string or    *                      as a fixed width byte array onto the byte stream.    * @throws IOException  On error in writing to the serialization stream.    * @return true         On serializing a non-null object, otherwise false.    */
specifier|private
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|,
name|int
name|level
parameter_list|,
name|boolean
name|writeBinary
parameter_list|,
name|HBaseSerDeParameters
name|serdeParams
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteStream
operator|.
name|Output
name|ss
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
if|if
condition|(
name|objInspector
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
operator|&&
name|writeBinary
condition|)
block|{
name|LazyUtils
operator|.
name|writePrimitive
argument_list|(
name|ss
argument_list|,
name|obj
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|objInspector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|false
operator|==
name|serialize
argument_list|(
name|obj
argument_list|,
name|objInspector
argument_list|,
name|level
argument_list|,
name|serdeParams
argument_list|,
name|ss
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|getBytesFromStream
argument_list|(
name|ss
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|,
name|int
name|level
parameter_list|,
name|HBaseSerDeParameters
name|serdeParams
parameter_list|,
name|ByteStream
operator|.
name|Output
name|ss
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|separators
init|=
name|serdeParams
operator|.
name|getSeparators
argument_list|()
decl_stmt|;
name|boolean
name|escaped
init|=
name|serdeParams
operator|.
name|isEscaped
argument_list|()
decl_stmt|;
name|byte
name|escapeChar
init|=
name|serdeParams
operator|.
name|getEscapeChar
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|needsEscape
init|=
name|serdeParams
operator|.
name|getNeedsEscape
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|objInspector
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|LazyUtils
operator|.
name|writePrimitiveUTF8
argument_list|(
name|ss
argument_list|,
name|obj
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|objInspector
argument_list|,
name|escaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|LIST
case|:
name|char
name|separator
init|=
operator|(
name|char
operator|)
name|separators
index|[
name|level
index|]
decl_stmt|;
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|loi
operator|.
name|getList
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|ObjectInspector
name|eoi
init|=
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|ss
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|serialize
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|eoi
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|serdeParams
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
case|case
name|MAP
case|:
name|char
name|sep
init|=
operator|(
name|char
operator|)
name|separators
index|[
name|level
index|]
decl_stmt|;
name|char
name|keyValueSeparator
init|=
operator|(
name|char
operator|)
name|separators
index|[
name|level
operator|+
literal|1
index|]
decl_stmt|;
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|ObjectInspector
name|koi
init|=
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|voi
init|=
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|moi
operator|.
name|getMap
argument_list|(
name|obj
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|ss
operator|.
name|write
argument_list|(
name|sep
argument_list|)
expr_stmt|;
block|}
name|serialize
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|koi
argument_list|,
name|level
operator|+
literal|2
argument_list|,
name|serdeParams
argument_list|,
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|write
argument_list|(
name|keyValueSeparator
argument_list|)
expr_stmt|;
name|serialize
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|voi
argument_list|,
name|level
operator|+
literal|2
argument_list|,
name|serdeParams
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
case|case
name|STRUCT
case|:
name|sep
operator|=
operator|(
name|char
operator|)
name|separators
index|[
name|level
index|]
expr_stmt|;
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|list
operator|=
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|obj
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|ss
operator|.
name|write
argument_list|(
name|sep
argument_list|)
expr_stmt|;
block|}
name|serialize
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|serdeParams
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown category type: "
operator|+
name|objInspector
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Initialize the composite key class with the objectinspector for the key    *    * @throws SerDeException    * */
specifier|private
name|void
name|initCompositeKeyClass
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// find the hbase row key
for|for
control|(
name|ColumnMapping
name|colMap
range|:
name|serdeParams
operator|.
name|getColumnMapping
argument_list|()
control|)
block|{
if|if
condition|(
name|colMap
operator|.
name|hbaseRowKey
condition|)
block|{
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|ObjectInspector
name|keyObjectInspector
init|=
operator|(
operator|(
name|LazySimpleStructObjectInspector
operator|)
name|cachedObjectInspector
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
try|try
block|{
name|compositeKeyObj
operator|=
name|serdeParams
operator|.
name|getCompositeKeyClass
argument_list|()
operator|.
name|getDeclaredConstructor
argument_list|(
name|LazySimpleStructObjectInspector
operator|.
name|class
argument_list|,
name|Properties
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
operator|(
operator|(
name|LazySimpleStructObjectInspector
operator|)
name|keyObjectInspector
operator|)
argument_list|,
name|tbl
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// the constructor wasn't defined in the implementation class. Flag error
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Constructor not defined in composite key class ["
operator|+
name|serdeParams
operator|.
name|getCompositeKeyClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return 0-based offset of the key column within the table    */
name|int
name|getKeyColumnOffset
parameter_list|()
block|{
return|return
name|serdeParams
operator|.
name|getKeyIndex
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Boolean
argument_list|>
name|getStorageFormatOfCol
parameter_list|(
name|int
name|colPos
parameter_list|)
block|{
return|return
name|serdeParams
operator|.
name|getColumnMapping
argument_list|()
operator|.
name|get
argument_list|(
name|colPos
argument_list|)
operator|.
name|binaryStorage
return|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
comment|// no support for statistics
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|int
name|getRowKeyColumnOffset
parameter_list|(
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|columnsMapping
parameter_list|)
throws|throws
name|SerDeException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnsMapping
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ColumnMapping
name|colMap
init|=
name|columnsMapping
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|colMap
operator|.
name|hbaseRowKey
operator|&&
name|colMap
operator|.
name|familyName
operator|.
name|equals
argument_list|(
name|HBASE_KEY_COL
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"HBaseSerDe Error: columns mapping list does not contain"
operator|+
literal|" row key column."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

