begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
operator|.
name|TableMapReduceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableInputFormatBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|ColumnMappings
operator|.
name|ColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|ExprNodeConstantEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexPredicateAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableScanDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_comment
comment|/**  * HiveHBaseTableInputFormat implements InputFormat for HBase storage handler  * tables, decorating an underlying HBase TableInputFormat with extra Hive logic  * such as column pruning and filter pushdown.  */
end_comment

begin_class
specifier|public
class|class
name|HiveHBaseTableInputFormat
extends|extends
name|TableInputFormatBase
implements|implements
name|InputFormat
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ResultWritable
argument_list|>
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveHBaseTableInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ResultWritable
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
specifier|final
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseSplit
name|hbaseSplit
init|=
operator|(
name|HBaseSplit
operator|)
name|split
decl_stmt|;
name|TableSplit
name|tableSplit
init|=
name|hbaseSplit
operator|.
name|getTableSplit
argument_list|()
decl_stmt|;
name|setHTable
argument_list|(
name|HiveHBaseInputFormatUtil
operator|.
name|getTable
argument_list|(
name|jobConf
argument_list|)
argument_list|)
expr_stmt|;
name|setScan
argument_list|(
name|HiveHBaseInputFormatUtil
operator|.
name|getScan
argument_list|(
name|jobConf
argument_list|)
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|TaskAttemptContext
name|tac
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|newTaskAttemptContext
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|reporter
argument_list|)
decl_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|Result
argument_list|>
name|recordReader
init|=
name|createRecordReader
argument_list|(
name|tableSplit
argument_list|,
name|tac
argument_list|)
decl_stmt|;
try|try
block|{
name|recordReader
operator|.
name|initialize
argument_list|(
name|tableSplit
argument_list|,
name|tac
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to initialize RecordReader"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|RecordReader
argument_list|<
name|ImmutableBytesWritable
argument_list|,
name|ResultWritable
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|recordReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ImmutableBytesWritable
name|createKey
parameter_list|()
block|{
return|return
operator|new
name|ImmutableBytesWritable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResultWritable
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|ResultWritable
argument_list|(
operator|new
name|Result
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
throws|throws
name|IOException
block|{
name|float
name|progress
init|=
literal|0.0F
decl_stmt|;
try|try
block|{
name|progress
operator|=
name|recordReader
operator|.
name|getProgress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|progress
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|ImmutableBytesWritable
name|rowKey
parameter_list|,
name|ResultWritable
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|next
init|=
literal|false
decl_stmt|;
try|try
block|{
name|next
operator|=
name|recordReader
operator|.
name|nextKeyValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
condition|)
block|{
name|rowKey
operator|.
name|set
argument_list|(
name|recordReader
operator|.
name|getCurrentValue
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|setResult
argument_list|(
name|recordReader
operator|.
name|getCurrentValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|next
return|;
block|}
block|}
return|;
block|}
comment|/**    * Converts a filter (which has been pushed down from Hive's optimizer)    * into corresponding restrictions on the HBase scan.  The    * filter should already be in a form which can be fully converted.    *    * @param jobConf configuration for the scan    *    * @param iKey 0-based offset of key column within Hive table    *    * @return converted table split if any    */
specifier|private
name|Scan
name|createFilterScan
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|int
name|iKey
parameter_list|,
name|int
name|iTimestamp
parameter_list|,
name|boolean
name|isKeyBinary
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: assert iKey is HBaseSerDe#HBASE_KEY_COL
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|String
name|filterObjectSerialized
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_OBJECT_CONF_STR
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterObjectSerialized
operator|!=
literal|null
condition|)
block|{
name|HBaseScanRange
name|range
init|=
name|Utilities
operator|.
name|deserializeObject
argument_list|(
name|filterObjectSerialized
argument_list|,
name|HBaseScanRange
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|range
operator|.
name|setup
argument_list|(
name|scan
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|scan
return|;
block|}
name|String
name|filterExprSerialized
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|TableScanDesc
operator|.
name|FILTER_EXPR_CONF_STR
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterExprSerialized
operator|==
literal|null
condition|)
block|{
return|return
name|scan
return|;
block|}
name|ExprNodeGenericFuncDesc
name|filterExpr
init|=
name|Utilities
operator|.
name|deserializeExpression
argument_list|(
name|filterExprSerialized
argument_list|)
decl_stmt|;
name|String
name|keyColName
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
name|iKey
index|]
decl_stmt|;
name|String
name|colType
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
name|iKey
index|]
decl_stmt|;
name|boolean
name|isKeyComparable
init|=
name|isKeyBinary
operator|||
name|colType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"string"
argument_list|)
decl_stmt|;
name|String
name|tsColName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iTimestamp
operator|>=
literal|0
condition|)
block|{
name|tsColName
operator|=
name|jobConf
operator|.
name|get
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
name|iTimestamp
index|]
expr_stmt|;
block|}
name|IndexPredicateAnalyzer
name|analyzer
init|=
name|newIndexPredicateAnalyzer
argument_list|(
name|keyColName
argument_list|,
name|isKeyComparable
argument_list|,
name|tsColName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|conditions
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|()
decl_stmt|;
name|ExprNodeDesc
name|residualPredicate
init|=
name|analyzer
operator|.
name|analyzePredicate
argument_list|(
name|filterExpr
argument_list|,
name|conditions
argument_list|)
decl_stmt|;
comment|// There should be no residual since we already negotiated that earlier in
comment|// HBaseStorageHandler.decomposePredicate. However, with hive.optimize.index.filter
comment|// OpProcFactory#pushFilterToStorageHandler pushes the original filter back down again.
comment|// Since pushed-down filters are not omitted at the higher levels (and thus the
comment|// contract of negotiation is ignored anyway), just ignore the residuals.
comment|// Re-assess this when negotiation is honored and the duplicate evaluation is removed.
comment|// THIS IGNORES RESIDUAL PARSING FROM HBaseStorageHandler#decomposePredicate
if|if
condition|(
name|residualPredicate
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring residual predicate "
operator|+
name|residualPredicate
operator|.
name|getExprString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|>
name|split
init|=
name|HiveHBaseInputFormatUtil
operator|.
name|decompose
argument_list|(
name|conditions
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|keyConditions
init|=
name|split
operator|.
name|get
argument_list|(
name|keyColName
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyConditions
operator|!=
literal|null
operator|&&
operator|!
name|keyConditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setupKeyRange
argument_list|(
name|scan
argument_list|,
name|keyConditions
argument_list|,
name|isKeyBinary
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|tsConditions
init|=
name|split
operator|.
name|get
argument_list|(
name|tsColName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tsConditions
operator|!=
literal|null
operator|&&
operator|!
name|tsConditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setupTimeRange
argument_list|(
name|scan
argument_list|,
name|tsConditions
argument_list|)
expr_stmt|;
block|}
return|return
name|scan
return|;
block|}
specifier|private
name|void
name|setupKeyRange
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|conditions
parameter_list|,
name|boolean
name|isBinary
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Convert the search condition into a restriction on the HBase scan
name|byte
index|[]
name|startRow
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|,
name|stopRow
init|=
name|HConstants
operator|.
name|EMPTY_END_ROW
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|sc
range|:
name|conditions
control|)
block|{
name|ExprNodeConstantEvaluator
name|eval
init|=
operator|new
name|ExprNodeConstantEvaluator
argument_list|(
name|sc
operator|.
name|getConstantDesc
argument_list|()
argument_list|)
decl_stmt|;
name|PrimitiveObjectInspector
name|objInspector
decl_stmt|;
name|Object
name|writable
decl_stmt|;
try|try
block|{
name|objInspector
operator|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|eval
operator|.
name|initialize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|writable
operator|=
name|eval
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Currently only primitve types are supported. Found: "
operator|+
name|sc
operator|.
name|getConstantDesc
argument_list|()
operator|.
name|getTypeString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|byte
index|[]
name|constantVal
init|=
name|getConstantVal
argument_list|(
name|writable
argument_list|,
name|objInspector
argument_list|,
name|isBinary
argument_list|)
decl_stmt|;
name|String
name|comparisonOp
init|=
name|sc
operator|.
name|getComparisonOp
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|startRow
operator|=
name|constantVal
expr_stmt|;
name|stopRow
operator|=
name|getNextBA
argument_list|(
name|constantVal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPLessThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|stopRow
operator|=
name|constantVal
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|startRow
operator|=
name|constantVal
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPGreaterThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|startRow
operator|=
name|getNextBA
argument_list|(
name|constantVal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrLessThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|stopRow
operator|=
name|getNextBA
argument_list|(
name|constantVal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|comparisonOp
operator|+
literal|" is not a supported comparison operator"
argument_list|)
throw|;
block|}
block|}
name|scan
operator|.
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|stopRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startRow
argument_list|)
operator|+
literal|" ~ "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|stopRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setupTimeRange
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|conditions
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
literal|0
decl_stmt|;
name|long
name|end
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|IndexSearchCondition
name|sc
range|:
name|conditions
control|)
block|{
name|long
name|timestamp
init|=
name|getTimestampVal
argument_list|(
name|sc
argument_list|)
decl_stmt|;
name|String
name|comparisonOp
init|=
name|sc
operator|.
name|getComparisonOp
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|start
operator|=
name|timestamp
expr_stmt|;
name|end
operator|=
name|timestamp
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPLessThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|end
operator|=
name|timestamp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|start
operator|=
name|timestamp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPGreaterThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|start
operator|=
name|timestamp
operator|+
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrLessThan"
operator|.
name|equals
argument_list|(
name|comparisonOp
argument_list|)
condition|)
block|{
name|end
operator|=
name|timestamp
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|comparisonOp
operator|+
literal|" is not a supported comparison operator"
argument_list|)
throw|;
block|}
block|}
name|scan
operator|.
name|setTimeRange
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|getTimestampVal
parameter_list|(
name|IndexSearchCondition
name|sc
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|timestamp
decl_stmt|;
try|try
block|{
name|ExprNodeConstantEvaluator
name|eval
init|=
operator|new
name|ExprNodeConstantEvaluator
argument_list|(
name|sc
operator|.
name|getConstantDesc
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInspector
name|inspector
init|=
name|eval
operator|.
name|initialize
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|eval
operator|.
name|evaluate
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|inspector
operator|instanceof
name|LongObjectInspector
condition|)
block|{
name|timestamp
operator|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|inspector
operator|)
operator|.
name|get
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PrimitiveObjectInspector
name|primitive
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|inspector
decl_stmt|;
name|timestamp
operator|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTimestamp
argument_list|(
name|value
argument_list|,
name|primitive
argument_list|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|timestamp
return|;
block|}
specifier|private
name|byte
index|[]
name|getConstantVal
parameter_list|(
name|Object
name|writable
parameter_list|,
name|PrimitiveObjectInspector
name|poi
parameter_list|,
name|boolean
name|isKeyBinary
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isKeyBinary
condition|)
block|{
comment|// Key is stored in text format. Get bytes representation of constant also of
comment|// text format.
name|byte
index|[]
name|startRow
decl_stmt|;
name|ByteStream
operator|.
name|Output
name|serializeStream
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
name|LazyUtils
operator|.
name|writePrimitiveUTF8
argument_list|(
name|serializeStream
argument_list|,
name|writable
argument_list|,
name|poi
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|startRow
operator|=
operator|new
name|byte
index|[
name|serializeStream
operator|.
name|getLength
argument_list|()
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|serializeStream
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|startRow
argument_list|,
literal|0
argument_list|,
name|serializeStream
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|startRow
return|;
block|}
name|PrimitiveCategory
name|pc
init|=
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|INT
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|IntWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|BOOLEAN
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|BooleanWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|LongWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|FloatWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|DoubleWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|ShortWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|writable
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
operator|(
name|ByteWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Type not supported "
operator|+
name|pc
argument_list|)
throw|;
block|}
block|}
specifier|private
name|byte
index|[]
name|getNextBA
parameter_list|(
name|byte
index|[]
name|current
parameter_list|)
block|{
comment|// startRow is inclusive while stopRow is exclusive,
comment|// this util method returns very next bytearray which will occur after the current one
comment|// by padding current one with a trailing 0 byte.
name|byte
index|[]
name|next
init|=
operator|new
name|byte
index|[
name|current
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|current
argument_list|,
literal|0
argument_list|,
name|next
argument_list|,
literal|0
argument_list|,
name|current
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|next
return|;
block|}
comment|/**    * Instantiates a new predicate analyzer suitable for    * determining how to push a filter down into the HBase scan,    * based on the rules for what kinds of pushdown we currently support.    *    * @param keyColumnName name of the Hive column mapped to the HBase row key    *    * @return preconfigured predicate analyzer    */
specifier|static
name|IndexPredicateAnalyzer
name|newIndexPredicateAnalyzer
parameter_list|(
name|String
name|keyColumnName
parameter_list|,
name|boolean
name|isKeyComparable
parameter_list|,
name|String
name|timestampColumn
parameter_list|)
block|{
name|IndexPredicateAnalyzer
name|analyzer
init|=
operator|new
name|IndexPredicateAnalyzer
argument_list|()
decl_stmt|;
comment|// We can always do equality predicate. Just need to make sure we get appropriate
comment|// BA representation of constant of filter condition.
comment|// We can do other comparisons only if storage format in hbase is either binary
comment|// or we are dealing with string types since there lexicographic ordering will suffice.
if|if
condition|(
name|isKeyComparable
condition|)
block|{
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
name|keyColumnName
argument_list|,
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual"
argument_list|,
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan"
argument_list|,
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrLessThan"
argument_list|,
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPLessThan"
argument_list|,
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPGreaterThan"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
name|keyColumnName
argument_list|,
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timestampColumn
operator|!=
literal|null
condition|)
block|{
name|analyzer
operator|.
name|addComparisonOp
argument_list|(
name|timestampColumn
argument_list|,
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqual"
argument_list|,
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrGreaterThan"
argument_list|,
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPEqualOrLessThan"
argument_list|,
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPLessThan"
argument_list|,
literal|"org.apache.hadoop.hive.ql.udf.generic.GenericUDFOPGreaterThan"
argument_list|)
expr_stmt|;
block|}
return|return
name|analyzer
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|jobConf
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
comment|//obtain delegation tokens for the job
name|TableMapReduceUtil
operator|.
name|initCredentials
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
name|String
name|hbaseTableName
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_NAME
argument_list|)
decl_stmt|;
name|setHTable
argument_list|(
operator|new
name|HTable
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|jobConf
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|hbaseTableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|hbaseColumnsMapping
init|=
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
argument_list|)
decl_stmt|;
name|boolean
name|doColumnRegexMatching
init|=
name|jobConf
operator|.
name|getBoolean
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_REGEX_MATCHING
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|hbaseColumnsMapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COLUMNS_MAPPING
operator|+
literal|" required for HBase Table."
argument_list|)
throw|;
block|}
name|ColumnMappings
name|columnMappings
init|=
literal|null
decl_stmt|;
try|try
block|{
name|columnMappings
operator|=
name|HBaseSerDe
operator|.
name|parseColumnsMapping
argument_list|(
name|hbaseColumnsMapping
argument_list|,
name|doColumnRegexMatching
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|int
name|iKey
init|=
name|columnMappings
operator|.
name|getKeyIndex
argument_list|()
decl_stmt|;
name|int
name|iTimestamp
init|=
name|columnMappings
operator|.
name|getTimestampIndex
argument_list|()
decl_stmt|;
name|ColumnMapping
name|keyMapping
init|=
name|columnMappings
operator|.
name|getKeyMapping
argument_list|()
decl_stmt|;
comment|// Take filter pushdown into account while calculating splits; this
comment|// allows us to prune off regions immediately.  Note that although
comment|// the Javadoc for the superclass getSplits says that it returns one
comment|// split per region, the implementation actually takes the scan
comment|// definition into account and excludes regions which don't satisfy
comment|// the start/stop row conditions (HBASE-1829).
name|Scan
name|scan
init|=
name|createFilterScan
argument_list|(
name|jobConf
argument_list|,
name|iKey
argument_list|,
name|iTimestamp
argument_list|,
name|HiveHBaseInputFormatUtil
operator|.
name|getStorageFormatOfKey
argument_list|(
name|keyMapping
operator|.
name|mappingSpec
argument_list|,
name|jobConf
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_DEFAULT_STORAGE_TYPE
argument_list|,
literal|"string"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// The list of families that have been added to the scan
name|List
argument_list|<
name|String
argument_list|>
name|addedFamilies
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// REVIEW:  are we supposed to be applying the getReadColumnIDs
comment|// same as in getRecordReader?
for|for
control|(
name|ColumnMapping
name|colMap
range|:
name|columnMappings
control|)
block|{
if|if
condition|(
name|colMap
operator|.
name|hbaseRowKey
operator|||
name|colMap
operator|.
name|hbaseTimestamp
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|colMap
operator|.
name|qualifierName
operator|==
literal|null
condition|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|)
expr_stmt|;
name|addedFamilies
operator|.
name|add
argument_list|(
name|colMap
operator|.
name|familyName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|addedFamilies
operator|.
name|contains
argument_list|(
name|colMap
operator|.
name|familyName
argument_list|)
condition|)
block|{
comment|// add the column only if the family has not already been added
name|scan
operator|.
name|addColumn
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|,
name|colMap
operator|.
name|qualifierNameBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setScan
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
operator|new
name|Job
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|JobContext
name|jobContext
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|newJobContext
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|Path
index|[]
name|tablePaths
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|jobContext
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
argument_list|>
name|splits
init|=
name|super
operator|.
name|getSplits
argument_list|(
name|jobContext
argument_list|)
decl_stmt|;
name|InputSplit
index|[]
name|results
init|=
operator|new
name|InputSplit
index|[
name|splits
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
operator|new
name|HBaseSplit
argument_list|(
operator|(
name|TableSplit
operator|)
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|tablePaths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

