begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ImmutableBytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|RowResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
operator|.
name|TableSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ColumnProjectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConfigurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_comment
comment|/**  * HiveHBaseTableInputFormat implements InputFormat for HBase storage handler  * tables, decorating an underlying HBase TableInputFormat with extra Hive logic  * such as column pruning.  */
end_comment

begin_class
specifier|public
class|class
name|HiveHBaseTableInputFormat
parameter_list|<
name|K
extends|extends
name|ImmutableBytesWritable
parameter_list|,
name|V
extends|extends
name|RowResult
parameter_list|>
implements|implements
name|InputFormat
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|JobConfigurable
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveHBaseTableInputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HBaseExposedTableInputFormat
name|hbaseInputFormat
decl_stmt|;
specifier|public
name|HiveHBaseTableInputFormat
parameter_list|()
block|{
name|hbaseInputFormat
operator|=
operator|new
name|HBaseExposedTableInputFormat
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getRecordReader
parameter_list|(
name|InputSplit
name|split
parameter_list|,
name|JobConf
name|job
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseSplit
name|hbaseSplit
init|=
operator|(
name|HBaseSplit
operator|)
name|split
decl_stmt|;
name|byte
index|[]
name|tableNameBytes
decl_stmt|;
name|String
name|hbaseTableName
init|=
name|job
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_NAME
argument_list|)
decl_stmt|;
name|hbaseInputFormat
operator|.
name|setHBaseTable
argument_list|(
operator|new
name|HTable
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|(
name|job
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|hbaseTableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|columnMapping
init|=
name|hbaseSplit
operator|.
name|getColumnsMapping
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|HBaseSerDe
operator|.
name|parseColumnMapping
argument_list|(
name|columnMapping
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|readColIDs
init|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|job
argument_list|)
decl_stmt|;
if|if
condition|(
name|columns
operator|.
name|size
argument_list|()
operator|<
name|readColIDs
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot read more columns than the given table contains."
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|scanColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|addAll
init|=
operator|(
name|readColIDs
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|addAll
condition|)
block|{
for|for
control|(
name|int
name|iColumn
range|:
name|readColIDs
control|)
block|{
name|String
name|column
init|=
name|columns
operator|.
name|get
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|HBaseSerDe
operator|.
name|isSpecialColumn
argument_list|(
name|column
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|scanColumns
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|scanColumns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|column
range|:
name|columns
control|)
block|{
if|if
condition|(
name|HBaseSerDe
operator|.
name|isSpecialColumn
argument_list|(
name|column
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|scanColumns
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|addAll
condition|)
block|{
break|break;
block|}
block|}
block|}
name|hbaseInputFormat
operator|.
name|setScanColumns
argument_list|(
name|scanColumns
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[]
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|RecordReader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|hbaseInputFormat
operator|.
name|getRecordReader
argument_list|(
name|hbaseSplit
operator|.
name|getSplit
argument_list|()
argument_list|,
name|job
argument_list|,
name|reporter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputSplit
index|[]
name|getSplits
parameter_list|(
name|JobConf
name|job
parameter_list|,
name|int
name|numSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
index|[]
name|tableNames
init|=
name|FileInputFormat
operator|.
name|getInputPaths
argument_list|(
name|job
argument_list|)
decl_stmt|;
name|String
name|hbaseTableName
init|=
name|job
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_TABLE_NAME
argument_list|)
decl_stmt|;
name|hbaseInputFormat
operator|.
name|setHBaseTable
argument_list|(
operator|new
name|HTable
argument_list|(
operator|new
name|HBaseConfiguration
argument_list|(
name|job
argument_list|)
argument_list|,
name|hbaseTableName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|hbaseSchemaMapping
init|=
name|job
operator|.
name|get
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COL_MAPPING
argument_list|)
decl_stmt|;
if|if
condition|(
name|hbaseSchemaMapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"hbase.columns.mapping required for HBase Table."
argument_list|)
throw|;
block|}
comment|// REVIEW:  are we supposed to be applying the getReadColumnIDs
comment|// same as in getRecordReader?
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
name|HBaseSerDe
operator|.
name|parseColumnMapping
argument_list|(
name|hbaseSchemaMapping
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|inputColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|column
range|:
name|columns
control|)
block|{
if|if
condition|(
name|HBaseSerDe
operator|.
name|isSpecialColumn
argument_list|(
name|column
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|inputColumns
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hbaseInputFormat
operator|.
name|setScanColumns
argument_list|(
name|inputColumns
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[]
argument_list|)
argument_list|)
expr_stmt|;
name|InputSplit
index|[]
name|splits
init|=
name|hbaseInputFormat
operator|.
name|getSplits
argument_list|(
name|job
argument_list|,
name|numSplits
operator|<=
literal|0
condition|?
literal|1
else|:
name|numSplits
argument_list|)
decl_stmt|;
name|InputSplit
index|[]
name|results
init|=
operator|new
name|InputSplit
index|[
name|splits
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
operator|new
name|HBaseSplit
argument_list|(
operator|(
name|TableSplit
operator|)
name|splits
index|[
name|i
index|]
argument_list|,
name|hbaseSchemaMapping
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|hbaseInputFormat
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBaseExposedTableInputFormat exposes some protected methods    * from the HBase TableInputFormatBase.    */
specifier|static
class|class
name|HBaseExposedTableInputFormat
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapred
operator|.
name|TableInputFormatBase
implements|implements
name|JobConfigurable
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
comment|// not needed for now
block|}
specifier|public
name|void
name|setScanColumns
parameter_list|(
name|byte
index|[]
index|[]
name|scanColumns
parameter_list|)
block|{
name|setInputColumns
argument_list|(
name|scanColumns
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setHBaseTable
parameter_list|(
name|HTable
name|table
parameter_list|)
block|{
name|setHTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

