begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|HBaseSerDeParameters
operator|.
name|AVRO_SERIALIZATION_TYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|reflect
operator|.
name|ReflectData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|ColumnMappings
operator|.
name|ColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroObjectInspectorGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazyMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Helper class for {@link HBaseSerDe}  * */
end_comment

begin_class
specifier|public
class|class
name|HBaseSerDeHelper
block|{
comment|/**    * Logger    * */
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseSerDeHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Autogenerates the columns from the given serialization class    *     * @param tbl the hive table properties    * @param columnsMapping the hbase columns mapping determining hbase column families and    *          qualifiers    * @param sb StringBuilder to form the list of columns    * @throws IllegalArgumentException if any of the given arguments was null    * */
specifier|public
specifier|static
name|void
name|generateColumns
parameter_list|(
name|Properties
name|tbl
parameter_list|,
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|columnsMapping
parameter_list|,
name|StringBuilder
name|sb
parameter_list|)
block|{
comment|// Generate the columns according to the column mapping provided
comment|// Note: The generated column names are same as the
comment|// family_name.qualifier_name. If the qualifier
comment|// name is null, each column is familyname_col[i] where i is the index of
comment|// the column ranging
comment|// from 0 to n-1 where n is the size of the column mapping. The filter
comment|// function removes any
comment|// special characters other than alphabets and numbers from the column
comment|// family and qualifier name
comment|// as the only special character allowed in a column name is "_" which is
comment|// used as a separator
comment|// between the column family and qualifier name.
if|if
condition|(
name|columnsMapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"columnsMapping cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"StringBuilder cannot be null"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnsMapping
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ColumnMapping
name|colMap
init|=
name|columnsMapping
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|colMap
operator|.
name|hbaseRowKey
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"key"
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|COMMA_STR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colMap
operator|.
name|qualifierName
operator|==
literal|null
condition|)
block|{
comment|// this corresponds to a map<string,?>
if|if
condition|(
name|colMap
operator|.
name|qualifierPrefix
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|filter
argument_list|(
name|colMap
operator|.
name|familyName
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
operator|.
name|append
argument_list|(
name|filter
argument_list|(
name|colMap
operator|.
name|qualifierPrefix
argument_list|)
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|COMMA_STR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|filter
argument_list|(
name|colMap
operator|.
name|familyName
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
operator|.
name|append
argument_list|(
literal|"col"
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|COMMA_STR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// just an individual column
name|sb
operator|.
name|append
argument_list|(
name|filter
argument_list|(
name|colMap
operator|.
name|familyName
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
operator|.
name|append
argument_list|(
name|filter
argument_list|(
name|colMap
operator|.
name|qualifierName
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|COMMA_STR
argument_list|)
expr_stmt|;
block|}
block|}
comment|// trim off the ending ",", if any
name|trim
argument_list|(
name|sb
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated columns: ["
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Autogenerates the column types from the given serialization class    *     * @param tbl the hive table properties    * @param columnsMapping the hbase columns mapping determining hbase column families and    *          qualifiers    * @param sb StringBuilder to form the list of columns    * @param conf configuration    * @throws IllegalArgumentException if any of the given arguments was null    * @throws SerDeException if there was an error generating the column types    * */
specifier|public
specifier|static
name|void
name|generateColumnTypes
parameter_list|(
name|Properties
name|tbl
parameter_list|,
name|List
argument_list|<
name|ColumnMapping
argument_list|>
name|columnsMapping
parameter_list|,
name|StringBuilder
name|sb
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"tbl cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|columnsMapping
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"columnsMapping cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"StringBuilder cannot be null"
argument_list|)
throw|;
block|}
comment|// Generate the columns according to the column mapping provided
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnsMapping
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|ColumnMapping
name|colMap
init|=
name|columnsMapping
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|colMap
operator|.
name|hbaseRowKey
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compositeKeyParts
init|=
name|getCompositeKeyParts
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
name|StringBuilder
name|keyStruct
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|compositeKeyParts
operator|==
literal|null
operator|||
name|compositeKeyParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|compKeyClass
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COMPOSITE_KEY_CLASS
argument_list|)
decl_stmt|;
name|String
name|compKeyTypes
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COMPOSITE_KEY_TYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|compKeyTypes
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|compKeyClass
operator|!=
literal|null
condition|)
block|{
comment|// a composite key class was provided. But neither the types
comment|// property was set and
comment|// neither the getParts() method of HBaseCompositeKey was
comment|// overidden in the
comment|// implementation. Flag exception.
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Either the hbase.composite.key.types property should be set or the getParts method must be overridden in "
operator|+
name|compKeyClass
argument_list|)
throw|;
block|}
comment|// the row key column becomes a STRING
name|sb
operator|.
name|append
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generateKeyStruct
argument_list|(
name|compKeyTypes
argument_list|,
name|keyStruct
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|generateKeyStruct
argument_list|(
name|compositeKeyParts
argument_list|,
name|keyStruct
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|keyStruct
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colMap
operator|.
name|qualifierName
operator|==
literal|null
condition|)
block|{
name|String
name|serClassName
init|=
literal|null
decl_stmt|;
name|String
name|serType
init|=
literal|null
decl_stmt|;
name|String
name|schemaLiteral
init|=
literal|null
decl_stmt|;
name|String
name|schemaUrl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|colMap
operator|.
name|qualifierPrefix
operator|!=
literal|null
condition|)
block|{
name|serType
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|colMap
operator|.
name|qualifierPrefix
operator|+
literal|"."
operator|+
name|HBaseSerDe
operator|.
name|SERIALIZATION_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|serType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|HBaseSerDe
operator|.
name|SERIALIZATION_TYPE
operator|+
literal|" property not provided for column family ["
operator|+
name|colMap
operator|.
name|familyName
operator|+
literal|"] and prefix ["
operator|+
name|colMap
operator|.
name|qualifierPrefix
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// we are provided with a prefix
name|serClassName
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|colMap
operator|.
name|qualifierPrefix
operator|+
literal|"."
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
argument_list|)
expr_stmt|;
if|if
condition|(
name|serClassName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|serType
operator|.
name|equalsIgnoreCase
argument_list|(
name|HBaseSerDeParameters
operator|.
name|AVRO_SERIALIZATION_TYPE
argument_list|)
condition|)
block|{
comment|// for avro type, the serialization class parameter is optional
name|schemaLiteral
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|colMap
operator|.
name|qualifierPrefix
operator|+
literal|"."
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_LITERAL
operator|.
name|getPropName
argument_list|()
argument_list|)
expr_stmt|;
name|schemaUrl
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|colMap
operator|.
name|qualifierPrefix
operator|+
literal|"."
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_URL
operator|.
name|getPropName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaLiteral
operator|==
literal|null
operator|&&
name|schemaUrl
operator|==
literal|null
condition|)
block|{
comment|// either schema literal, schema url or serialization class must
comment|// be provided
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"For an avro schema, either "
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_LITERAL
operator|.
name|getPropName
argument_list|()
operator|+
literal|", "
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_URL
operator|.
name|getPropName
argument_list|()
operator|+
literal|" or "
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
operator|+
literal|" property must be set."
argument_list|)
throw|;
block|}
if|if
condition|(
name|schemaUrl
operator|!=
literal|null
condition|)
block|{
name|schemaLiteral
operator|=
name|getSchemaFromFS
argument_list|(
name|schemaUrl
argument_list|,
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
operator|+
literal|" property not provided for column family ["
operator|+
name|colMap
operator|.
name|familyName
operator|+
literal|"] and prefix ["
operator|+
name|colMap
operator|.
name|qualifierPrefix
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|serType
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|HBaseSerDe
operator|.
name|SERIALIZATION_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|serType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|HBaseSerDe
operator|.
name|SERIALIZATION_TYPE
operator|+
literal|" property not provided for column family ["
operator|+
name|colMap
operator|.
name|familyName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|serClassName
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
argument_list|)
expr_stmt|;
if|if
condition|(
name|serClassName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|serType
operator|.
name|equalsIgnoreCase
argument_list|(
name|AVRO_SERIALIZATION_TYPE
argument_list|)
condition|)
block|{
comment|// for avro type, the serialization class parameter is optional
name|schemaLiteral
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_LITERAL
operator|.
name|getPropName
argument_list|()
argument_list|)
expr_stmt|;
name|schemaUrl
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_URL
operator|.
name|getPropName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaLiteral
operator|==
literal|null
operator|&&
name|schemaUrl
operator|==
literal|null
condition|)
block|{
comment|// either schema literal or serialization class must be provided
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"For an avro schema, either "
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_LITERAL
operator|.
name|getPropName
argument_list|()
operator|+
literal|" property or "
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
operator|+
literal|" property must be set."
argument_list|)
throw|;
block|}
if|if
condition|(
name|schemaUrl
operator|!=
literal|null
condition|)
block|{
name|schemaLiteral
operator|=
name|getSchemaFromFS
argument_list|(
name|schemaUrl
argument_list|,
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
operator|+
literal|" property not provided for column family ["
operator|+
name|colMap
operator|.
name|familyName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
block|}
name|StringBuilder
name|generatedStruct
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// generate struct for each of the given prefixes
name|generateColumnStruct
argument_list|(
name|serType
argument_list|,
name|serClassName
argument_list|,
name|schemaLiteral
argument_list|,
name|colMap
argument_list|,
name|generatedStruct
argument_list|)
expr_stmt|;
comment|// a column family becomes a MAP
name|sb
operator|.
name|append
argument_list|(
name|serdeConstants
operator|.
name|MAP_TYPE_NAME
operator|+
literal|"<"
operator|+
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
operator|+
literal|","
operator|+
name|generatedStruct
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|qualifierName
init|=
name|colMap
operator|.
name|qualifierName
decl_stmt|;
if|if
condition|(
name|colMap
operator|.
name|qualifierName
operator|.
name|endsWith
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
comment|// we are provided with a prefix
name|qualifierName
operator|=
name|colMap
operator|.
name|qualifierName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colMap
operator|.
name|qualifierName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|serType
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|qualifierName
operator|+
literal|"."
operator|+
name|HBaseSerDe
operator|.
name|SERIALIZATION_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|serType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|HBaseSerDe
operator|.
name|SERIALIZATION_TYPE
operator|+
literal|" property not provided for column family ["
operator|+
name|colMap
operator|.
name|familyName
operator|+
literal|"] and qualifier ["
operator|+
name|qualifierName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|String
name|serClassName
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|qualifierName
operator|+
literal|"."
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
argument_list|)
decl_stmt|;
name|String
name|schemaLiteral
init|=
literal|null
decl_stmt|;
name|String
name|schemaUrl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|serClassName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|serType
operator|.
name|equalsIgnoreCase
argument_list|(
name|AVRO_SERIALIZATION_TYPE
argument_list|)
condition|)
block|{
comment|// for avro type, the serialization class parameter is optional
name|schemaLiteral
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|qualifierName
operator|+
literal|"."
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_LITERAL
operator|.
name|getPropName
argument_list|()
argument_list|)
expr_stmt|;
name|schemaUrl
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|colMap
operator|.
name|familyName
operator|+
literal|"."
operator|+
name|qualifierName
operator|+
literal|"."
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_URL
operator|.
name|getPropName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaLiteral
operator|==
literal|null
operator|&&
name|schemaUrl
operator|==
literal|null
condition|)
block|{
comment|// either schema literal, schema url or serialization class must
comment|// be provided
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"For an avro schema, either "
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_LITERAL
operator|.
name|getPropName
argument_list|()
operator|+
literal|", "
operator|+
name|AvroTableProperties
operator|.
name|SCHEMA_URL
operator|.
name|getPropName
argument_list|()
operator|+
literal|" or "
operator|+
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
operator|+
literal|" property must be set."
argument_list|)
throw|;
block|}
if|if
condition|(
name|schemaUrl
operator|!=
literal|null
condition|)
block|{
name|schemaLiteral
operator|=
name|getSchemaFromFS
argument_list|(
name|schemaUrl
argument_list|,
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_CLASS
operator|+
literal|" property not provided for column family ["
operator|+
name|colMap
operator|.
name|familyName
operator|+
literal|"] and qualifier ["
operator|+
name|qualifierName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
name|StringBuilder
name|generatedStruct
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|generateColumnStruct
argument_list|(
name|serType
argument_list|,
name|serClassName
argument_list|,
name|schemaLiteral
argument_list|,
name|colMap
argument_list|,
name|generatedStruct
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|generatedStruct
argument_list|)
expr_stmt|;
block|}
block|}
comment|// trim off ending ",", if any
name|trim
argument_list|(
name|sb
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generated column types: ["
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Read the schema from the given hdfs url for the schema    * */
specifier|public
specifier|static
name|Schema
name|getSchemaFromFS
parameter_list|(
name|String
name|schemaFSUrl
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|SerDeException
block|{
name|FSDataInputStream
name|in
init|=
literal|null
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|schemaFSUrl
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|in
operator|=
name|fs
operator|.
name|open
argument_list|(
operator|new
name|Path
argument_list|(
name|schemaFSUrl
argument_list|)
argument_list|)
expr_stmt|;
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
name|s
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Failure reading schema from filesystem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Failure reading schema from filesystem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create the {@link LazyObjectBase lazy field}    * */
specifier|public
specifier|static
name|LazyObjectBase
name|createLazyField
parameter_list|(
name|ColumnMapping
index|[]
name|columnMappings
parameter_list|,
name|int
name|fieldID
parameter_list|,
name|ObjectInspector
name|inspector
parameter_list|)
block|{
name|ColumnMapping
name|colMap
init|=
name|columnMappings
index|[
name|fieldID
index|]
decl_stmt|;
if|if
condition|(
name|colMap
operator|.
name|getQualifierName
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|colMap
operator|.
name|isHbaseRowKey
argument_list|()
condition|)
block|{
comment|// a column family
return|return
operator|new
name|LazyHBaseCellMap
argument_list|(
operator|(
name|LazyMapObjectInspector
operator|)
name|inspector
argument_list|)
return|;
block|}
return|return
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|inspector
argument_list|,
name|colMap
operator|.
name|getBinaryStorage
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Auto-generates the key struct for composite keys    *     * @param compositeKeyParts map of composite key part name to its type. Usually this would be    *          provided by the custom implementation of {@link HBaseCompositeKey composite key}    * @param sb StringBuilder object to construct the struct    * */
specifier|private
specifier|static
name|void
name|generateKeyStruct
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|compositeKeyParts
parameter_list|,
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"struct<"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|compositeKeyParts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
comment|// trim the trailing ","
name|trim
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Auto-generates the key struct for composite keys    *     * @param compositeKeyTypes comma separated list of composite key types in order    * @param sb StringBuilder object to construct the struct    * */
specifier|private
specifier|static
name|void
name|generateKeyStruct
parameter_list|(
name|String
name|compositeKeyTypes
parameter_list|,
name|StringBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"struct<"
argument_list|)
expr_stmt|;
comment|// composite key types is a comma separated list of different parts of the
comment|// composite keys in
comment|// order in which they appear in the key
name|String
index|[]
name|keyTypes
init|=
name|compositeKeyTypes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"col"
operator|+
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|keyTypes
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|COMMA_STR
argument_list|)
expr_stmt|;
block|}
comment|// trim the trailing ","
name|trim
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Auto-generates the column struct    *     * @param serType serialization type    * @param serClassName serialization class name    * @param schemaLiteral schema string    * @param colMap hbase column mapping    * @param sb StringBuilder to hold the generated struct    * @throws SerDeException if something goes wrong while generating the struct    * */
specifier|private
specifier|static
name|void
name|generateColumnStruct
parameter_list|(
name|String
name|serType
parameter_list|,
name|String
name|serClassName
parameter_list|,
name|String
name|schemaLiteral
parameter_list|,
name|ColumnMapping
name|colMap
parameter_list|,
name|StringBuilder
name|sb
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|serType
operator|.
name|equalsIgnoreCase
argument_list|(
name|AVRO_SERIALIZATION_TYPE
argument_list|)
condition|)
block|{
if|if
condition|(
name|serClassName
operator|!=
literal|null
condition|)
block|{
name|generateAvroStructFromClass
argument_list|(
name|serClassName
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generateAvroStructFromSchema
argument_list|(
name|schemaLiteral
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Unknown "
operator|+
name|HBaseSerDe
operator|.
name|SERIALIZATION_TYPE
operator|+
literal|" found for column family ["
operator|+
name|colMap
operator|.
name|familyName
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Auto-generate the avro struct from class    *     * @param serClassName serialization class for avro struct    * @param sb StringBuilder to hold the generated struct    * @throws SerDeException if something goes wrong while generating the struct    * */
specifier|private
specifier|static
name|void
name|generateAvroStructFromClass
parameter_list|(
name|String
name|serClassName
parameter_list|,
name|StringBuilder
name|sb
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|serClass
decl_stmt|;
try|try
block|{
name|serClass
operator|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|serClassName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Error obtaining descriptor for "
operator|+
name|serClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Schema
name|schema
init|=
name|ReflectData
operator|.
name|get
argument_list|()
operator|.
name|getSchema
argument_list|(
name|serClass
argument_list|)
decl_stmt|;
name|generateAvroStructFromSchema
argument_list|(
name|schema
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Auto-generate the avro struct from schema    *     * @param schemaLiteral schema for the avro struct as string    * @param sb StringBuilder to hold the generated struct    * @throws SerDeException if something goes wrong while generating the struct    * */
specifier|private
specifier|static
name|void
name|generateAvroStructFromSchema
parameter_list|(
name|String
name|schemaLiteral
parameter_list|,
name|StringBuilder
name|sb
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Schema
name|schema
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|schemaLiteral
argument_list|)
decl_stmt|;
name|generateAvroStructFromSchema
argument_list|(
name|schema
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Auto-generate the avro struct from schema    *     * @param schema schema for the avro struct    * @param sb StringBuilder to hold the generated struct    * @throws SerDeException if something goes wrong while generating the struct    * */
specifier|private
specifier|static
name|void
name|generateAvroStructFromSchema
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|StringBuilder
name|sb
parameter_list|)
throws|throws
name|SerDeException
block|{
name|AvroObjectInspectorGenerator
name|avig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"struct<"
argument_list|)
expr_stmt|;
comment|// Get the column names and their corresponding types
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|avig
operator|.
name|getColumnNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
init|=
name|avig
operator|.
name|getColumnTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnNames
operator|.
name|size
argument_list|()
operator|!=
name|columnTypes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"The number of column names should be the same as column types"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|columnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|columnTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|trim
argument_list|(
name|sb
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Trims by removing the trailing "," if any    *     * @param sb StringBuilder to trim    * @return StringBuilder trimmed StringBuilder    * */
specifier|private
specifier|static
name|StringBuilder
name|trim
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
if|if
condition|(
name|sb
operator|.
name|charAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
name|StringUtils
operator|.
name|COMMA
condition|)
block|{
return|return
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
name|sb
return|;
block|}
comment|/**    * Filters the given name by removing any special character and convert to lowercase    * */
specifier|private
specifier|static
name|String
name|filter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|replaceAll
argument_list|(
literal|"[^a-zA-Z0-9]+"
argument_list|,
literal|""
argument_list|)
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
comment|/**    * Return the types for the composite key.    *     * @param tbl Properties for the table    * @return a comma-separated list of composite key types    * @throws SerDeException if something goes wrong while getting the composite key parts    * */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getCompositeKeyParts
parameter_list|(
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
name|String
name|compKeyClassName
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|HBaseSerDe
operator|.
name|HBASE_COMPOSITE_KEY_CLASS
argument_list|)
decl_stmt|;
if|if
condition|(
name|compKeyClassName
operator|==
literal|null
condition|)
block|{
comment|// no custom composite key class provided. return null
return|return
literal|null
return|;
block|}
name|CompositeHBaseKeyFactory
argument_list|<
name|HBaseCompositeKey
argument_list|>
name|keyFactory
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|keyClass
decl_stmt|;
try|try
block|{
name|keyClass
operator|=
name|JavaUtils
operator|.
name|loadClass
argument_list|(
name|compKeyClassName
argument_list|)
expr_stmt|;
name|keyFactory
operator|=
operator|new
name|CompositeHBaseKeyFactory
argument_list|(
name|keyClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|HBaseCompositeKey
name|compKey
init|=
name|keyFactory
operator|.
name|createKey
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|compKey
operator|.
name|getParts
argument_list|()
return|;
block|}
block|}
end_class

end_unit

