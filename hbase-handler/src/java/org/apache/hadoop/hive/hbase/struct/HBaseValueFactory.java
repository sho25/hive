begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|struct
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|HBaseKeyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|HBaseSerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * Provides capability to plugin custom implementations for querying of data stored in HBase.  * */
end_comment

begin_interface
specifier|public
interface|interface
name|HBaseValueFactory
block|{
comment|/**    * Initialize factory with properties    *     * @param hbaseParam the {@link HBaseParameters hbase parameters}    * @param conf the hadoop {@link Configuration configuration}    * @param properties the custom {@link Properties}    * @throws SerDeException if there was an issue initializing the factory    */
name|void
name|init
parameter_list|(
name|HBaseSerDeParameters
name|hbaseParam
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|SerDeException
function_decl|;
comment|/**    * create custom object inspector for the value    *     * @param type type information    * @throws SerDeException if there was an issue creating the {@link ObjectInspector object inspector}    */
name|ObjectInspector
name|createValueObjectInspector
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|SerDeException
function_decl|;
comment|/**    * create custom object for hbase value    *    * @param inspector OI create by {@link HBaseKeyFactory#createKeyObjectInspector}    */
name|LazyObjectBase
name|createValueObject
parameter_list|(
name|ObjectInspector
name|inspector
parameter_list|)
throws|throws
name|SerDeException
function_decl|;
comment|/**    * Serialize the given hive object    *     * @param object the object to be serialized    * @param field the {@link StructField}    * @return the serialized value    * @throws {@link IOException} if there was an issue serializing the value    */
name|byte
index|[]
name|serializeValue
parameter_list|(
name|Object
name|object
parameter_list|,
name|StructField
name|field
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

