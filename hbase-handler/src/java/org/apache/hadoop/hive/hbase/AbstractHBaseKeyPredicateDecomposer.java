begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexPredicateAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|index
operator|.
name|IndexSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStoragePredicateHandler
operator|.
name|DecomposedPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_comment
comment|/**  * Simple abstract class to help with creation of a {@link DecomposedPredicate}. In order to create  * one, consumers should extend this class and override the "getScanRange" method to define the  * start/stop keys and/or filters on their hbase scans  * */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHBaseKeyPredicateDecomposer
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractHBaseKeyPredicateDecomposer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|DecomposedPredicate
name|decomposePredicate
parameter_list|(
name|String
name|keyColName
parameter_list|,
name|ExprNodeDesc
name|predicate
parameter_list|)
block|{
name|IndexPredicateAnalyzer
name|analyzer
init|=
name|IndexPredicateAnalyzer
operator|.
name|createAnalyzer
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|allowColumnName
argument_list|(
name|keyColName
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setAcceptsFields
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|setFieldValidator
argument_list|(
name|getFieldValidator
argument_list|()
argument_list|)
expr_stmt|;
name|DecomposedPredicate
name|decomposed
init|=
operator|new
name|DecomposedPredicate
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|conditions
init|=
operator|new
name|ArrayList
argument_list|<
name|IndexSearchCondition
argument_list|>
argument_list|()
decl_stmt|;
name|decomposed
operator|.
name|residualPredicate
operator|=
operator|(
name|ExprNodeGenericFuncDesc
operator|)
name|analyzer
operator|.
name|analyzePredicate
argument_list|(
name|predicate
argument_list|,
name|conditions
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|conditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|decomposed
operator|.
name|pushedPredicate
operator|=
name|analyzer
operator|.
name|translateSearchConditions
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
try|try
block|{
name|decomposed
operator|.
name|pushedPredicateObject
operator|=
name|getScanRange
argument_list|(
name|conditions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to decompose predicates"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
name|decomposed
return|;
block|}
comment|/**    * Get the scan range that specifies the start/stop keys and/or filters to be applied onto the    * hbase scan    * */
specifier|protected
specifier|abstract
name|HBaseScanRange
name|getScanRange
parameter_list|(
name|List
argument_list|<
name|IndexSearchCondition
argument_list|>
name|searchConditions
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**    * Get an optional {@link IndexPredicateAnalyzer.FieldValidator validator}. A validator can be    * used to optinally filter out the predicates which need not be decomposed. By default this    * method returns {@code null} which means that all predicates are pushed but consumers can choose    * to override this to provide a custom validator as well.    * */
specifier|protected
name|IndexPredicateAnalyzer
operator|.
name|FieldValidator
name|getFieldValidator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

