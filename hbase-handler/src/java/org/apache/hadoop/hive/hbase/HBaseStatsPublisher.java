begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|stats
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A class that implements the StatsPublisher interface through HBase.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseStatsPublisher
implements|implements
name|StatsPublisher
block|{
specifier|private
name|HTable
name|htable
decl_stmt|;
specifier|private
name|byte
index|[]
name|rowCountFamily
decl_stmt|,
name|rowCountColumn
decl_stmt|;
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Does the necessary HBase initializations.    */
specifier|public
name|boolean
name|connect
parameter_list|(
name|Configuration
name|hiveconf
parameter_list|)
block|{
try|try
block|{
name|HBaseConfiguration
name|hbaseConf
init|=
operator|new
name|HBaseConfiguration
argument_list|(
name|hiveconf
argument_list|)
decl_stmt|;
name|HBaseAdmin
name|hbase
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|hbaseConf
argument_list|)
decl_stmt|;
name|rowCountFamily
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HBaseStatsSetupConstants
operator|.
name|PART_STAT_ROW_COUNT_COLUMN_FAMILY
argument_list|)
expr_stmt|;
name|rowCountColumn
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HBaseStatsSetupConstants
operator|.
name|PART_STAT_ROW_COUNT_COLUMN_NAME
argument_list|)
expr_stmt|;
name|htable
operator|=
operator|new
name|HTable
argument_list|(
name|HBaseStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
argument_list|)
expr_stmt|;
comment|// for performance reason, defer update until the closeConnection
name|htable
operator|.
name|setAutoFlush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during HBase connection. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Writes temporary statistics into HBase;    */
specifier|public
name|boolean
name|publishStat
parameter_list|(
name|String
name|rowID
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|key
operator|!=
name|StatsSetupConst
operator|.
name|ROW_COUNT
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning. Invalid statistic. Currently "
operator|+
literal|"row count is the only supported statistic"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Write in HBase
try|try
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowID
argument_list|)
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|htable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|int
name|oldVal
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|oldVal
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|rowCountFamily
argument_list|,
name|rowCountColumn
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldVal
operator|<
name|val
condition|)
block|{
name|Put
name|row
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowID
argument_list|)
argument_list|)
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
name|rowCountFamily
argument_list|,
name|rowCountColumn
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|htable
operator|.
name|put
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during publishing statistics. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|closeConnection
parameter_list|()
block|{
comment|// batch update
try|try
block|{
name|htable
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot commit changes in stats publishing."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Does the necessary HBase initializations.    */
specifier|public
name|boolean
name|init
parameter_list|(
name|Configuration
name|hiveconf
parameter_list|)
block|{
try|try
block|{
name|HBaseConfiguration
name|hbaseConf
init|=
operator|new
name|HBaseConfiguration
argument_list|(
name|hiveconf
argument_list|)
decl_stmt|;
name|HBaseAdmin
name|hbase
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|hbaseConf
argument_list|)
decl_stmt|;
name|rowCountFamily
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HBaseStatsSetupConstants
operator|.
name|PART_STAT_ROW_COUNT_COLUMN_FAMILY
argument_list|)
expr_stmt|;
name|rowCountColumn
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HBaseStatsSetupConstants
operator|.
name|PART_STAT_ROW_COUNT_COLUMN_NAME
argument_list|)
expr_stmt|;
comment|// Creating table if not exists
if|if
condition|(
operator|!
name|hbase
operator|.
name|tableExists
argument_list|(
name|HBaseStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
argument_list|)
condition|)
block|{
name|HTableDescriptor
name|table
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|HBaseStatsSetupConstants
operator|.
name|PART_STAT_TABLE_NAME
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|rowCount
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|rowCountFamily
argument_list|)
decl_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
name|hbase
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error during HBase initialization. "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

