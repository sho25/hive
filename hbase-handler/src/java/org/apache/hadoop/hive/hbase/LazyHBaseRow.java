begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|ColumnMappings
operator|.
name|ColumnMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|struct
operator|.
name|HBaseValueFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazySimpleStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * LazyObject for storing an HBase row.  The field of an HBase row can be  * primitive or non-primitive.  */
end_comment

begin_class
specifier|public
class|class
name|LazyHBaseRow
extends|extends
name|LazyStruct
block|{
comment|/**    * The HBase columns mapping of the row.    */
specifier|private
name|Result
name|result
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|cachedList
decl_stmt|;
specifier|private
specifier|final
name|HBaseKeyFactory
name|keyFactory
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|HBaseValueFactory
argument_list|>
name|valueFactories
decl_stmt|;
specifier|private
specifier|final
name|ColumnMapping
index|[]
name|columnsMapping
decl_stmt|;
annotation|@
name|VisibleForTesting
name|LazyHBaseRow
parameter_list|(
name|LazySimpleStructObjectInspector
name|oi
parameter_list|,
name|ColumnMappings
name|columnMappings
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|this
operator|.
name|keyFactory
operator|=
name|DefaultHBaseKeyFactory
operator|.
name|forTest
argument_list|(
literal|null
argument_list|,
name|columnMappings
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueFactories
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columnsMapping
operator|=
name|columnMappings
operator|.
name|getColumnsMapping
argument_list|()
expr_stmt|;
block|}
comment|/**    * Construct a LazyHBaseRow object with the ObjectInspector.    */
specifier|public
name|LazyHBaseRow
parameter_list|(
name|LazySimpleStructObjectInspector
name|oi
parameter_list|,
name|HBaseSerDeParameters
name|serdeParams
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|this
operator|.
name|keyFactory
operator|=
name|serdeParams
operator|.
name|getKeyFactory
argument_list|()
expr_stmt|;
name|this
operator|.
name|valueFactories
operator|=
name|serdeParams
operator|.
name|getValueFactories
argument_list|()
expr_stmt|;
name|this
operator|.
name|columnsMapping
operator|=
name|serdeParams
operator|.
name|getColumnMappings
argument_list|()
operator|.
name|getColumnsMapping
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set the HBase row data(a Result writable) for this LazyStruct.    * @see LazyHBaseRow#init(org.apache.hadoop.hbase.client.Result)    */
specifier|public
name|void
name|init
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
name|this
operator|.
name|result
operator|=
name|r
expr_stmt|;
name|setParsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|LazyObjectBase
name|createLazyField
parameter_list|(
specifier|final
name|int
name|fieldID
parameter_list|,
specifier|final
name|StructField
name|fieldRef
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|columnsMapping
index|[
name|fieldID
index|]
operator|.
name|hbaseRowKey
condition|)
block|{
return|return
name|keyFactory
operator|.
name|createKey
argument_list|(
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|columnsMapping
index|[
name|fieldID
index|]
operator|.
name|hbaseTimestamp
condition|)
block|{
return|return
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|valueFactories
operator|!=
literal|null
condition|)
block|{
return|return
name|valueFactories
operator|.
name|get
argument_list|(
name|fieldID
argument_list|)
operator|.
name|createValueObject
argument_list|(
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
return|;
block|}
comment|// fallback to default
return|return
name|HBaseSerDeHelper
operator|.
name|createLazyField
argument_list|(
name|columnsMapping
argument_list|,
name|fieldID
argument_list|,
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get one field out of the HBase row.    *    * If the field is a primitive field, return the actual object.    * Otherwise return the LazyObject.  This is because PrimitiveObjectInspector    * does not have control over the object used by the user - the user simply    * directly uses the Object instead of going through    * Object PrimitiveObjectInspector.get(Object).    *    * @param fieldID  The field ID    * @return         The field as a LazyObject    */
annotation|@
name|Override
specifier|public
name|Object
name|getField
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
name|initFields
argument_list|()
expr_stmt|;
return|return
name|uncheckedGetField
argument_list|(
name|fieldID
argument_list|)
return|;
block|}
specifier|private
name|void
name|initFields
parameter_list|()
block|{
if|if
condition|(
name|getFields
argument_list|()
operator|==
literal|null
condition|)
block|{
name|initLazyFields
argument_list|(
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getParsed
argument_list|()
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|getFieldInited
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setParsed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the field out of the row without checking whether parsing is needed.    * This is called by both getField and getFieldsAsList.    * @param fieldID  The id of the field starting from 0.    * @return  The value of the field    */
specifier|private
name|Object
name|uncheckedGetField
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
name|LazyObjectBase
index|[]
name|fields
init|=
name|getFields
argument_list|()
decl_stmt|;
name|boolean
index|[]
name|fieldsInited
init|=
name|getFieldInited
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fieldsInited
index|[
name|fieldID
index|]
condition|)
block|{
name|fieldsInited
index|[
name|fieldID
index|]
operator|=
literal|true
expr_stmt|;
name|ColumnMapping
name|colMap
init|=
name|columnsMapping
index|[
name|fieldID
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|colMap
operator|.
name|hbaseRowKey
operator|&&
operator|!
name|colMap
operator|.
name|hbaseTimestamp
operator|&&
name|colMap
operator|.
name|qualifierName
operator|==
literal|null
condition|)
block|{
comment|// it is a column family
comment|// primitive type for Map<Key, Value> can be stored in binary format. Pass in the
comment|// qualifier prefix to cherry pick the qualifiers that match the prefix instead of picking
comment|// up everything
operator|(
operator|(
name|LazyHBaseCellMap
operator|)
name|fields
index|[
name|fieldID
index|]
operator|)
operator|.
name|init
argument_list|(
name|result
argument_list|,
name|colMap
operator|.
name|familyNameBytes
argument_list|,
name|colMap
operator|.
name|binaryStorage
argument_list|,
name|colMap
operator|.
name|qualifierPrefixBytes
argument_list|,
name|colMap
operator|.
name|isDoPrefixCut
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fields
index|[
name|fieldID
index|]
operator|.
name|getObject
argument_list|()
return|;
block|}
if|if
condition|(
name|colMap
operator|.
name|hbaseTimestamp
condition|)
block|{
comment|// Get the latest timestamp of all the cells as the row timestamp
name|long
name|timestamp
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
comment|// from hbase-0.96.0
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|timestamp
operator|=
name|Math
operator|.
name|max
argument_list|(
name|timestamp
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
index|[
name|i
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LazyObjectBase
name|lz
init|=
name|fields
index|[
name|fieldID
index|]
decl_stmt|;
if|if
condition|(
name|lz
operator|instanceof
name|LazyTimestamp
condition|)
block|{
operator|(
operator|(
name|LazyTimestamp
operator|)
name|lz
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|set
argument_list|(
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
name|timestamp
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|LazyLong
operator|)
name|lz
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|set
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
return|return
name|lz
operator|.
name|getObject
argument_list|()
return|;
block|}
name|byte
index|[]
name|bytes
decl_stmt|;
if|if
condition|(
name|colMap
operator|.
name|hbaseRowKey
condition|)
block|{
name|bytes
operator|=
name|result
operator|.
name|getRow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// it is a column i.e. a column-family with column-qualifier
name|bytes
operator|=
name|result
operator|.
name|getValue
argument_list|(
name|colMap
operator|.
name|familyNameBytes
argument_list|,
name|colMap
operator|.
name|qualifierNameBytes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|isNull
argument_list|(
name|oi
operator|.
name|getNullSequence
argument_list|()
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
condition|)
block|{
name|fields
index|[
name|fieldID
index|]
operator|.
name|setNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ByteArrayRef
name|ref
init|=
operator|new
name|ByteArrayRef
argument_list|()
decl_stmt|;
name|ref
operator|.
name|setData
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|fields
index|[
name|fieldID
index|]
operator|.
name|init
argument_list|(
name|ref
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
index|[
name|fieldID
index|]
operator|.
name|getObject
argument_list|()
return|;
block|}
comment|/**    * Get the values of the fields as an ArrayList.    * @return The values of the fields as an ArrayList.    */
annotation|@
name|Override
specifier|public
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|getFieldsAsList
parameter_list|()
block|{
name|initFields
argument_list|()
expr_stmt|;
if|if
condition|(
name|cachedList
operator|==
literal|null
condition|)
block|{
name|cachedList
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cachedList
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getFields
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cachedList
operator|.
name|add
argument_list|(
name|uncheckedGetField
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedList
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

