begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|struct
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|hbase
operator|.
name|HBaseSerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroLazyObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroSchemaRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroSerdeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_comment
comment|/**  * Avro specific implementation of the {@link HBaseValueFactory}  * */
end_comment

begin_class
specifier|public
class|class
name|AvroHBaseValueFactory
extends|extends
name|DefaultHBaseValueFactory
block|{
specifier|private
name|AvroSchemaRetriever
name|avroSchemaRetriever
decl_stmt|;
specifier|private
name|Schema
name|schema
decl_stmt|;
comment|/**    * Constructor    *     * @param schema the associated {@link Schema schema}    * */
specifier|public
name|AvroHBaseValueFactory
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|HBaseSerDeParameters
name|hbaseParams
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|SerDeException
block|{
name|super
operator|.
name|init
argument_list|(
name|hbaseParams
argument_list|,
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|String
name|avroSchemaRetClass
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|AvroSerdeUtils
operator|.
name|SCHEMA_RETRIEVER
argument_list|)
decl_stmt|;
if|if
condition|(
name|avroSchemaRetClass
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|avroSchemaRetrieverClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|avroSchemaRetrieverClass
operator|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|avroSchemaRetClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|initAvroSchemaRetriever
argument_list|(
name|avroSchemaRetrieverClass
argument_list|,
name|conf
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|createValueObjectInspector
parameter_list|(
name|TypeInfo
name|type
parameter_list|)
throws|throws
name|SerDeException
block|{
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|type
argument_list|,
name|serdeParams
operator|.
name|getSeparators
argument_list|()
argument_list|,
literal|1
argument_list|,
name|serdeParams
operator|.
name|getNullSequence
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|isEscaped
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getEscapeChar
argument_list|()
argument_list|,
name|ObjectInspectorOptions
operator|.
name|AVRO
argument_list|)
decl_stmt|;
comment|// initialize the object inspectors
name|initInternalObjectInspectors
argument_list|(
name|oi
argument_list|)
expr_stmt|;
return|return
name|oi
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|serializeValue
parameter_list|(
name|Object
name|object
parameter_list|,
name|StructField
name|field
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Explicit avro serialization not supported yet. Revert to default
return|return
name|super
operator|.
name|serializeValue
argument_list|(
name|object
argument_list|,
name|field
argument_list|)
return|;
block|}
comment|/**    * Initialize the instance for {@link AvroSchemaRetriever}    *    * @throws SerDeException    * */
specifier|private
name|void
name|initAvroSchemaRetriever
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|avroSchemaRetrieverClass
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|avroSchemaRetriever
operator|=
operator|(
name|AvroSchemaRetriever
operator|)
name|avroSchemaRetrieverClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|,
name|Properties
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// the constructor wasn't defined in the implementation class. Flag error
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Constructor not defined in schema retriever class ["
operator|+
name|avroSchemaRetrieverClass
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Initialize the internal object inspectors    * */
specifier|private
name|void
name|initInternalObjectInspectors
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|oi
operator|instanceof
name|AvroLazyObjectInspector
condition|)
block|{
name|initAvroObjectInspector
argument_list|(
name|oi
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|MapObjectInspector
condition|)
block|{
comment|// we found a map objectinspector. Grab the objectinspector for the value and initialize it
comment|// aptly
name|ObjectInspector
name|valueOI
init|=
operator|(
operator|(
name|MapObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueOI
operator|instanceof
name|AvroLazyObjectInspector
condition|)
block|{
name|initAvroObjectInspector
argument_list|(
name|valueOI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Recursively initialize the {@link AvroLazyObjectInspector} and all its nested ois    *    * @param oi ObjectInspector to be recursively initialized    * @param schema {@link Schema} to be initialized with    * @param schemaRetriever class to be used to retrieve schema    * */
specifier|private
name|void
name|initAvroObjectInspector
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
comment|// Check for a list. If found, recursively init its members
if|if
condition|(
name|oi
operator|instanceof
name|ListObjectInspector
condition|)
block|{
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|initAvroObjectInspector
argument_list|(
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check for a nested message. If found, set the schema, else return.
if|if
condition|(
operator|!
operator|(
name|oi
operator|instanceof
name|AvroLazyObjectInspector
operator|)
condition|)
block|{
return|return;
block|}
name|AvroLazyObjectInspector
name|aoi
init|=
operator|(
name|AvroLazyObjectInspector
operator|)
name|oi
decl_stmt|;
name|aoi
operator|.
name|setSchemaRetriever
argument_list|(
name|avroSchemaRetriever
argument_list|)
expr_stmt|;
name|aoi
operator|.
name|setReaderSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
comment|// call the method recursively over all the internal fields of the given avro
comment|// objectinspector
for|for
control|(
name|StructField
name|field
range|:
name|aoi
operator|.
name|getAllStructFieldRefs
argument_list|()
control|)
block|{
name|initAvroObjectInspector
argument_list|(
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

