begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|RecordReaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
specifier|public
class|class
name|TestOrcNullOptimization
block|{
name|TypeDescription
name|createMyStruct
parameter_list|()
block|{
return|return
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"a"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"b"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"c"
argument_list|,
name|TypeDescription
operator|.
name|createBoolean
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"d"
argument_list|,
name|TypeDescription
operator|.
name|createList
argument_list|(
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"z"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|void
name|addRow
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|VectorizedRowBatch
name|batch
parameter_list|,
name|Integer
name|a
parameter_list|,
name|String
name|b
parameter_list|,
name|Boolean
name|c
parameter_list|,
name|Integer
modifier|...
name|d
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|batch
operator|.
name|size
operator|==
name|batch
operator|.
name|getMaxSize
argument_list|()
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|int
name|row
init|=
name|batch
operator|.
name|size
operator|++
decl_stmt|;
name|LongColumnVector
name|aColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|BytesColumnVector
name|bColumn
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|LongColumnVector
name|cColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|ListColumnVector
name|dColumn
init|=
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|StructColumnVector
name|dStruct
init|=
operator|(
name|StructColumnVector
operator|)
name|dColumn
operator|.
name|child
decl_stmt|;
name|LongColumnVector
name|dInt
init|=
operator|(
name|LongColumnVector
operator|)
name|dStruct
operator|.
name|fields
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|aColumn
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|aColumn
operator|.
name|isNull
index|[
name|row
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|aColumn
operator|.
name|vector
index|[
name|row
index|]
operator|=
name|a
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|bColumn
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|bColumn
operator|.
name|isNull
index|[
name|row
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|bColumn
operator|.
name|setVal
argument_list|(
name|row
argument_list|,
name|b
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|cColumn
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|cColumn
operator|.
name|isNull
index|[
name|row
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|cColumn
operator|.
name|vector
index|[
name|row
index|]
operator|=
name|c
condition|?
literal|1
else|:
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|dColumn
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|dColumn
operator|.
name|isNull
index|[
name|row
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|dColumn
operator|.
name|offsets
index|[
name|row
index|]
operator|=
name|dColumn
operator|.
name|childCount
expr_stmt|;
name|dColumn
operator|.
name|lengths
index|[
name|row
index|]
operator|=
name|d
operator|.
name|length
expr_stmt|;
name|dColumn
operator|.
name|childCount
operator|+=
name|d
operator|.
name|length
expr_stmt|;
for|for
control|(
name|int
name|e
init|=
literal|0
init|;
name|e
operator|<
name|d
operator|.
name|length
condition|;
operator|++
name|e
control|)
block|{
name|dInt
operator|.
name|vector
index|[
operator|(
name|int
operator|)
name|dColumn
operator|.
name|offsets
index|[
name|row
index|]
operator|+
name|e
index|]
operator|=
name|d
index|[
name|e
index|]
expr_stmt|;
block|}
block|}
block|}
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|,
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|Path
name|testFilePath
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testCaseName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|openFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
name|workDir
argument_list|,
literal|"TestOrcNullOptimization."
operator|+
name|testCaseName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|".orc"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiStripeWithNull
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createMyStruct
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|20000
condition|;
name|i
operator|++
control|)
block|{
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
comment|// check the stats
name|ColumnStatistics
index|[]
name|stats
init|=
name|reader
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|20000
argument_list|,
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|isSumDefined
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 19998 hasNull: true min: 0 max: 0 sum: 0"
argument_list|,
name|stats
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|2
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|2
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|19998
argument_list|,
name|stats
index|[
literal|2
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 19998 hasNull: true min: a max: a sum: 19998"
argument_list|,
name|stats
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the inspectors
name|assertEquals
argument_list|(
literal|"struct<a:int,b:string,c:boolean,d:array<struct<z:int>>>"
argument_list|,
name|reader
operator|.
name|getSchema
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|expected
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|StripeInformation
name|sinfo
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// only the first and last stripe will have PRESENT stream
name|expected
operator|.
name|set
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|.
name|set
argument_list|(
name|expected
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|got
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// check if the strip footer contains PRESENT stream
for|for
control|(
name|StripeInformation
name|sinfo
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
name|OrcProto
operator|.
name|StripeFooter
name|sf
init|=
operator|(
operator|(
name|RecordReaderImpl
operator|)
name|rows
operator|)
operator|.
name|readStripeFooter
argument_list|(
name|sinfo
argument_list|)
decl_stmt|;
name|got
operator|.
name|add
argument_list|(
name|sf
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|PRESENT
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|got
argument_list|)
expr_stmt|;
name|batch
operator|=
name|reader
operator|.
name|getSchema
argument_list|()
operator|.
name|createRowBatch
argument_list|()
expr_stmt|;
name|LongColumnVector
name|aColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|BytesColumnVector
name|bColumn
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|LongColumnVector
name|cColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|ListColumnVector
name|dColumn
init|=
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|LongColumnVector
name|dElements
init|=
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
operator|(
name|StructColumnVector
operator|)
name|dColumn
operator|.
name|child
operator|)
operator|.
name|fields
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// row 1
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|aColumn
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bColumn
operator|.
name|isNull
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cColumn
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dColumn
operator|.
name|offsets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dColumn
operator|.
name|lengths
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|dElements
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|rows
operator|.
name|seekToRow
argument_list|(
literal|19998
argument_list|)
expr_stmt|;
name|rows
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// last-1 row
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aColumn
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|bColumn
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cColumn
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dColumn
operator|.
name|offsets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dColumn
operator|.
name|lengths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|dElements
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// last row
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|aColumn
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bColumn
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cColumn
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dColumn
operator|.
name|offsets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dColumn
operator|.
name|lengths
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|dElements
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rows
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiStripeWithoutNull
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createMyStruct
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|20000
condition|;
name|i
operator|++
control|)
block|{
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
literal|0
argument_list|,
literal|"b"
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
comment|// check the stats
name|ColumnStatistics
index|[]
name|stats
init|=
name|reader
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|20000
argument_list|,
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|isSumDefined
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 20000 hasNull: false min: 0 max: 0 sum: 0"
argument_list|,
name|stats
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|2
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|2
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000
argument_list|,
name|stats
index|[
literal|2
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 20000 hasNull: false min: a max: b sum: 20000"
argument_list|,
name|stats
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the inspectors
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"struct<a:int,b:string,c:boolean,d:array<struct<z:int>>>"
argument_list|,
name|reader
operator|.
name|getSchema
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
comment|// none of the stripes will have PRESENT stream
name|List
argument_list|<
name|Boolean
argument_list|>
name|expected
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|StripeInformation
name|sinfo
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Boolean
argument_list|>
name|got
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// check if the strip footer contains PRESENT stream
for|for
control|(
name|StripeInformation
name|sinfo
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
name|OrcProto
operator|.
name|StripeFooter
name|sf
init|=
operator|(
operator|(
name|RecordReaderImpl
operator|)
name|rows
operator|)
operator|.
name|readStripeFooter
argument_list|(
name|sinfo
argument_list|)
decl_stmt|;
name|got
operator|.
name|add
argument_list|(
name|sf
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|PRESENT
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|got
argument_list|)
expr_stmt|;
name|rows
operator|.
name|seekToRow
argument_list|(
literal|19998
argument_list|)
expr_stmt|;
name|batch
operator|=
name|reader
operator|.
name|getSchema
argument_list|()
operator|.
name|createRowBatch
argument_list|()
expr_stmt|;
name|LongColumnVector
name|aColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|BytesColumnVector
name|bColumn
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|LongColumnVector
name|cColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|ListColumnVector
name|dColumn
init|=
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|LongColumnVector
name|dElements
init|=
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
operator|(
name|StructColumnVector
operator|)
name|dColumn
operator|.
name|child
operator|)
operator|.
name|fields
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// last-1 row
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aColumn
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|bColumn
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cColumn
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dColumn
operator|.
name|offsets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dColumn
operator|.
name|lengths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|dElements
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// last row
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aColumn
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|bColumn
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cColumn
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dColumn
operator|.
name|offsets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dColumn
operator|.
name|lengths
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|dElements
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnsWithNullAndCompression
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|createMyStruct
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|()
decl_stmt|;
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
literal|3
argument_list|,
literal|"a"
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
literal|3
argument_list|,
literal|"d"
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
literal|2
argument_list|,
literal|"e"
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
literal|2
argument_list|,
literal|"f"
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
literal|2
argument_list|,
literal|"g"
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|writer
argument_list|,
name|batch
argument_list|,
literal|2
argument_list|,
literal|"h"
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
name|OrcFile
operator|.
name|createReader
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|readerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|filesystem
argument_list|(
name|fs
argument_list|)
argument_list|)
decl_stmt|;
comment|// check the stats
name|ColumnStatistics
index|[]
name|stats
init|=
name|reader
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|reader
operator|.
name|getNumberOfRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|stats
index|[
literal|0
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|isSumDefined
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
operator|(
operator|(
name|IntegerColumnStatistics
operator|)
name|stats
index|[
literal|1
index|]
operator|)
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 7 hasNull: true min: 2 max: 3 sum: 17"
argument_list|,
name|stats
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"h"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|2
index|]
operator|)
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|StringColumnStatistics
operator|)
name|stats
index|[
literal|2
index|]
operator|)
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|stats
index|[
literal|2
index|]
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"count: 7 hasNull: true min: a max: h sum: 7"
argument_list|,
name|stats
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the inspectors
name|batch
operator|=
name|reader
operator|.
name|getSchema
argument_list|()
operator|.
name|createRowBatch
argument_list|()
expr_stmt|;
name|LongColumnVector
name|aColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
decl_stmt|;
name|BytesColumnVector
name|bColumn
init|=
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
decl_stmt|;
name|LongColumnVector
name|cColumn
init|=
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
decl_stmt|;
name|ListColumnVector
name|dColumn
init|=
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
decl_stmt|;
name|LongColumnVector
name|dElements
init|=
call|(
name|LongColumnVector
call|)
argument_list|(
operator|(
operator|(
name|StructColumnVector
operator|)
name|dColumn
operator|.
name|child
operator|)
operator|.
name|fields
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"struct<a:int,b:string,c:boolean,d:array<struct<z:int>>>"
argument_list|,
name|reader
operator|.
name|getSchema
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RecordReader
name|rows
init|=
name|reader
operator|.
name|rows
argument_list|()
decl_stmt|;
comment|// only the last strip will have PRESENT stream
name|List
argument_list|<
name|Boolean
argument_list|>
name|expected
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|StripeInformation
name|sinfo
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|expected
operator|.
name|set
argument_list|(
name|expected
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|got
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// check if the strip footer contains PRESENT stream
for|for
control|(
name|StripeInformation
name|sinfo
range|:
name|reader
operator|.
name|getStripes
argument_list|()
control|)
block|{
name|OrcProto
operator|.
name|StripeFooter
name|sf
init|=
operator|(
operator|(
name|RecordReaderImpl
operator|)
name|rows
operator|)
operator|.
name|readStripeFooter
argument_list|(
name|sinfo
argument_list|)
decl_stmt|;
name|got
operator|.
name|add
argument_list|(
name|sf
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|PRESENT
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|got
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|rows
operator|.
name|nextBatch
argument_list|(
name|batch
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
comment|// row 1
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|aColumn
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|bColumn
operator|.
name|toString
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cColumn
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dColumn
operator|.
name|offsets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dColumn
operator|.
name|lengths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|dElements
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// row 2
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|aColumn
operator|.
name|isNull
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|bColumn
operator|.
name|toString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cColumn
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dColumn
operator|.
name|offsets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dColumn
operator|.
name|lengths
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|dElements
operator|.
name|vector
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// row 3
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|aColumn
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bColumn
operator|.
name|isNull
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cColumn
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dColumn
operator|.
name|offsets
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dColumn
operator|.
name|lengths
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|dElements
operator|.
name|vector
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|rows
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

