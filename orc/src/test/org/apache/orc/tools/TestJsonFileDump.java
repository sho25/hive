begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestJsonFileDump
block|{
specifier|public
specifier|static
name|String
name|getFileFromClasspath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|URL
name|url
init|=
name|ClassLoader
operator|.
name|getSystemResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|url
operator|.
name|getPath
argument_list|()
return|;
block|}
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|Path
name|testFilePath
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|openFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
literal|"TestFileDump.testDump.orc"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|checkOutput
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
throws|throws
name|Exception
block|{
name|BufferedReader
name|eStream
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|getFileFromClasspath
argument_list|(
name|expected
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|aStream
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|actual
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|expectedLine
init|=
name|eStream
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|expectedLine
operator|!=
literal|null
condition|)
block|{
name|String
name|actualLine
init|=
name|aStream
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"actual:   "
operator|+
name|actualLine
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expected: "
operator|+
name|expectedLine
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLine
argument_list|,
name|actualLine
argument_list|)
expr_stmt|;
name|expectedLine
operator|=
name|eStream
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|eStream
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|aStream
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJsonDump
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"i"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"l"
argument_list|,
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"s"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OrcConf
operator|.
name|ENCODING_STRATEGY
operator|.
name|getAttribute
argument_list|()
argument_list|,
literal|"COMPRESSION"
argument_list|)
expr_stmt|;
name|OrcFile
operator|.
name|WriterOptions
name|options
init|=
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|fileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|ZLIB
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|1000
argument_list|)
operator|.
name|bloomFilterColumns
argument_list|(
literal|"s"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Random
name|r1
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|words
init|=
operator|new
name|String
index|[]
block|{
literal|"It"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"best"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"worst"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"wisdom,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"foolishness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"belief,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"incredulity,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Light,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Darkness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"spring"
block|,
literal|"of"
block|,
literal|"hope,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"winter"
block|,
literal|"of"
block|,
literal|"despair,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"everything"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"nothing"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"to"
block|,
literal|"Heaven,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"the"
block|,
literal|"other"
block|,
literal|"way"
block|}
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21000
condition|;
operator|++
name|i
control|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|batch
operator|.
name|size
index|]
operator|=
name|r1
operator|.
name|nextInt
argument_list|()
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
name|batch
operator|.
name|size
index|]
operator|=
name|r1
operator|.
name|nextLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
name|batch
operator|.
name|size
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|batch
operator|.
name|size
argument_list|,
name|words
index|[
name|r1
operator|.
name|nextInt
argument_list|(
name|words
operator|.
name|length
argument_list|)
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|size
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
name|batch
operator|.
name|getMaxSize
argument_list|()
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|batch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|String
name|outputFilename
init|=
literal|"orc-file-dump.json"
decl_stmt|;
name|FileOutputStream
name|myOut
init|=
operator|new
name|FileOutputStream
argument_list|(
name|workDir
operator|+
name|File
operator|.
name|separator
operator|+
name|outputFilename
argument_list|)
decl_stmt|;
comment|// replace stdout and run command
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myOut
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|testFilePath
operator|.
name|toString
argument_list|()
block|,
literal|"-j"
block|,
literal|"-p"
block|,
literal|"--rowindex=3"
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
name|checkOutput
argument_list|(
name|outputFilename
argument_list|,
name|workDir
operator|+
name|File
operator|.
name|separator
operator|+
name|outputFilename
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

