begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestFileDump
block|{
name|Path
name|workDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.tmp.dir"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
name|Path
name|testFilePath
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|openFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setWorkingDirectory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
name|testFilePath
operator|=
operator|new
name|Path
argument_list|(
literal|"TestFileDump.testDump.orc"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|static
name|TypeDescription
name|getMyRecordType
parameter_list|()
block|{
return|return
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"i"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"l"
argument_list|,
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"s"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|void
name|appendMyRecord
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|i
parameter_list|,
name|long
name|l
parameter_list|,
name|String
name|str
parameter_list|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|batch
operator|.
name|size
index|]
operator|=
name|i
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
name|batch
operator|.
name|size
index|]
operator|=
name|l
expr_stmt|;
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|.
name|isNull
index|[
name|batch
operator|.
name|size
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|batch
operator|.
name|size
argument_list|,
name|str
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|batch
operator|.
name|size
operator|+=
literal|1
expr_stmt|;
block|}
specifier|static
name|TypeDescription
name|getAllTypesType
parameter_list|()
block|{
return|return
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"b"
argument_list|,
name|TypeDescription
operator|.
name|createBoolean
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"bt"
argument_list|,
name|TypeDescription
operator|.
name|createByte
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"s"
argument_list|,
name|TypeDescription
operator|.
name|createShort
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"i"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"l"
argument_list|,
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"f"
argument_list|,
name|TypeDescription
operator|.
name|createFloat
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"d"
argument_list|,
name|TypeDescription
operator|.
name|createDouble
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"de"
argument_list|,
name|TypeDescription
operator|.
name|createDecimal
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"t"
argument_list|,
name|TypeDescription
operator|.
name|createTimestamp
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"dt"
argument_list|,
name|TypeDescription
operator|.
name|createDate
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"str"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"c"
argument_list|,
name|TypeDescription
operator|.
name|createChar
argument_list|()
operator|.
name|withMaxLength
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"vc"
argument_list|,
name|TypeDescription
operator|.
name|createVarchar
argument_list|()
operator|.
name|withMaxLength
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"m"
argument_list|,
name|TypeDescription
operator|.
name|createMap
argument_list|(
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"a"
argument_list|,
name|TypeDescription
operator|.
name|createList
argument_list|(
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addField
argument_list|(
literal|"st"
argument_list|,
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"i"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"s"
argument_list|,
name|TypeDescription
operator|.
name|createString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|void
name|appendAllTypes
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|boolean
name|b
parameter_list|,
name|byte
name|bt
parameter_list|,
name|short
name|s
parameter_list|,
name|int
name|i
parameter_list|,
name|long
name|l
parameter_list|,
name|float
name|f
parameter_list|,
name|double
name|d
parameter_list|,
name|HiveDecimalWritable
name|de
parameter_list|,
name|Timestamp
name|t
parameter_list|,
name|DateWritable
name|dt
parameter_list|,
name|String
name|str
parameter_list|,
name|String
name|c
parameter_list|,
name|String
name|vc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|a
parameter_list|,
name|int
name|sti
parameter_list|,
name|String
name|sts
parameter_list|)
block|{
name|int
name|row
init|=
name|batch
operator|.
name|size
operator|++
decl_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|=
name|b
condition|?
literal|1
else|:
literal|0
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|1
index|]
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|=
name|bt
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|2
index|]
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|=
name|s
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|3
index|]
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|=
name|i
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|4
index|]
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|=
name|l
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|5
index|]
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|=
name|f
expr_stmt|;
operator|(
operator|(
name|DoubleColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|6
index|]
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|=
name|d
expr_stmt|;
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|7
index|]
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|.
name|set
argument_list|(
name|de
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TimestampColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|8
index|]
operator|)
operator|.
name|set
argument_list|(
name|row
argument_list|,
name|t
argument_list|)
expr_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|9
index|]
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|=
name|dt
operator|.
name|getDays
argument_list|()
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|10
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|row
argument_list|,
name|str
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|11
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|row
argument_list|,
name|c
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|12
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|row
argument_list|,
name|vc
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|MapColumnVector
name|map
init|=
operator|(
name|MapColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|13
index|]
decl_stmt|;
name|int
name|offset
init|=
name|map
operator|.
name|childCount
decl_stmt|;
name|map
operator|.
name|offsets
index|[
name|row
index|]
operator|=
name|offset
expr_stmt|;
name|map
operator|.
name|lengths
index|[
name|row
index|]
operator|=
name|m
operator|.
name|size
argument_list|()
expr_stmt|;
name|map
operator|.
name|childCount
operator|+=
name|map
operator|.
name|lengths
index|[
name|row
index|]
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
operator|(
operator|(
name|BytesColumnVector
operator|)
name|map
operator|.
name|keys
operator|)
operator|.
name|setVal
argument_list|(
name|offset
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|map
operator|.
name|values
operator|)
operator|.
name|setVal
argument_list|(
name|offset
operator|++
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ListColumnVector
name|list
init|=
operator|(
name|ListColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|14
index|]
decl_stmt|;
name|offset
operator|=
name|list
operator|.
name|childCount
expr_stmt|;
name|list
operator|.
name|offsets
index|[
name|row
index|]
operator|=
name|offset
expr_stmt|;
name|list
operator|.
name|lengths
index|[
name|row
index|]
operator|=
name|a
operator|.
name|size
argument_list|()
expr_stmt|;
name|list
operator|.
name|childCount
operator|+=
name|list
operator|.
name|lengths
index|[
name|row
index|]
expr_stmt|;
for|for
control|(
name|int
name|e
init|=
literal|0
init|;
name|e
operator|<
name|a
operator|.
name|size
argument_list|()
condition|;
operator|++
name|e
control|)
block|{
operator|(
operator|(
name|LongColumnVector
operator|)
name|list
operator|.
name|child
operator|)
operator|.
name|vector
index|[
name|offset
operator|+
name|e
index|]
operator|=
name|a
operator|.
name|get
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|StructColumnVector
name|struct
init|=
operator|(
name|StructColumnVector
operator|)
name|batch
operator|.
name|cols
index|[
literal|15
index|]
decl_stmt|;
operator|(
operator|(
name|LongColumnVector
operator|)
name|struct
operator|.
name|fields
index|[
literal|0
index|]
operator|)
operator|.
name|vector
index|[
name|row
index|]
operator|=
name|sti
expr_stmt|;
operator|(
operator|(
name|BytesColumnVector
operator|)
name|struct
operator|.
name|fields
index|[
literal|1
index|]
operator|)
operator|.
name|setVal
argument_list|(
name|row
argument_list|,
name|sts
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkOutput
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|)
throws|throws
name|Exception
block|{
name|BufferedReader
name|eStream
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|TestJsonFileDump
operator|.
name|getFileFromClasspath
argument_list|(
name|expected
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|BufferedReader
name|aStream
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|actual
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|expectedLine
init|=
name|eStream
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
while|while
condition|(
name|expectedLine
operator|!=
literal|null
condition|)
block|{
name|String
name|actualLine
init|=
name|aStream
operator|.
name|readLine
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"actual:   "
operator|+
name|actualLine
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expected: "
operator|+
name|expectedLine
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedLine
argument_list|,
name|actualLine
argument_list|)
expr_stmt|;
name|expectedLine
operator|=
name|eStream
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|expectedLine
operator|=
name|expectedLine
operator|==
literal|null
condition|?
literal|null
else|:
name|expectedLine
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNull
argument_list|(
name|eStream
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|aStream
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|eStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|aStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDump
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|getMyRecordType
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OrcConf
operator|.
name|ENCODING_STRATEGY
operator|.
name|getAttribute
argument_list|()
argument_list|,
literal|"COMPRESSION"
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|fileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|ZLIB
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|Random
name|r1
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|words
init|=
operator|new
name|String
index|[]
block|{
literal|"It"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"best"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"worst"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"wisdom,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"foolishness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"belief,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"incredulity,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Light,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Darkness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"spring"
block|,
literal|"of"
block|,
literal|"hope,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"winter"
block|,
literal|"of"
block|,
literal|"despair,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"everything"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"nothing"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"to"
block|,
literal|"Heaven,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"the"
block|,
literal|"other"
block|,
literal|"way"
block|}
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21000
condition|;
operator|++
name|i
control|)
block|{
name|appendMyRecord
argument_list|(
name|batch
argument_list|,
name|r1
operator|.
name|nextInt
argument_list|()
argument_list|,
name|r1
operator|.
name|nextLong
argument_list|()
argument_list|,
name|words
index|[
name|r1
operator|.
name|nextInt
argument_list|(
name|words
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
name|batch
operator|.
name|getMaxSize
argument_list|()
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|batch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|String
name|outputFilename
init|=
literal|"orc-file-dump.out"
decl_stmt|;
name|FileOutputStream
name|myOut
init|=
operator|new
name|FileOutputStream
argument_list|(
name|workDir
operator|+
name|File
operator|.
name|separator
operator|+
name|outputFilename
argument_list|)
decl_stmt|;
comment|// replace stdout and run command
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myOut
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|testFilePath
operator|.
name|toString
argument_list|()
block|,
literal|"--rowindex=1,2,3"
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
name|checkOutput
argument_list|(
name|outputFilename
argument_list|,
name|workDir
operator|+
name|File
operator|.
name|separator
operator|+
name|outputFilename
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDataDump
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|getAllTypesType
argument_list|()
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|fileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|NONE
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"k1"
argument_list|,
literal|"v1"
argument_list|)
expr_stmt|;
name|appendAllTypes
argument_list|(
name|batch
argument_list|,
literal|true
argument_list|,
operator|(
name|byte
operator|)
literal|10
argument_list|,
operator|(
name|short
operator|)
literal|100
argument_list|,
literal|1000
argument_list|,
literal|10000L
argument_list|,
literal|4.0f
argument_list|,
literal|20.0
argument_list|,
operator|new
name|HiveDecimalWritable
argument_list|(
literal|"4.2222"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|1416967764000L
argument_list|)
argument_list|,
operator|new
name|DateWritable
argument_list|(
operator|new
name|Date
argument_list|(
literal|1416967764000L
argument_list|)
argument_list|)
argument_list|,
literal|"string"
argument_list|,
literal|"hello"
argument_list|,
literal|"hello"
argument_list|,
name|m
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|100
argument_list|,
literal|200
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"k3"
argument_list|,
literal|"v3"
argument_list|)
expr_stmt|;
name|appendAllTypes
argument_list|(
name|batch
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|20
argument_list|,
operator|(
name|short
operator|)
literal|200
argument_list|,
literal|2000
argument_list|,
literal|20000L
argument_list|,
literal|8.0f
argument_list|,
literal|40.0
argument_list|,
operator|new
name|HiveDecimalWritable
argument_list|(
literal|"2.2222"
argument_list|)
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|1416967364000L
argument_list|)
argument_list|,
operator|new
name|DateWritable
argument_list|(
operator|new
name|Date
argument_list|(
literal|1411967764000L
argument_list|)
argument_list|)
argument_list|,
literal|"abcd"
argument_list|,
literal|"world"
argument_list|,
literal|"world"
argument_list|,
name|m
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|)
argument_list|,
literal|20
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|ByteArrayOutputStream
name|myOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// replace stdout and run command
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myOut
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|testFilePath
operator|.
name|toString
argument_list|()
block|,
literal|"-d"
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
name|String
index|[]
name|lines
init|=
name|myOut
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"b\":true,\"bt\":10,\"s\":100,\"i\":1000,\"l\":10000,\"f\":4,\"d\":20,\"de\":\"4.2222\",\"t\":\"2014-11-25 18:09:24.0\",\"dt\":\"2014-11-25\",\"str\":\"string\",\"c\":\"hello\",\"vc\":\"hello\",\"m\":[{\"_key\":\"k1\",\"_value\":\"v1\"}],\"a\":[100,200],\"st\":{\"i\":10,\"s\":\"foo\"}}"
argument_list|,
name|lines
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{\"b\":false,\"bt\":20,\"s\":200,\"i\":2000,\"l\":20000,\"f\":8,\"d\":40,\"de\":\"2.2222\",\"t\":\"2014-11-25 18:02:44.0\",\"dt\":\"2014-09-28\",\"str\":\"abcd\",\"c\":\"world\",\"vc\":\"world\",\"m\":[{\"_key\":\"k3\",\"_value\":\"v3\"}],\"a\":[200,300],\"st\":{\"i\":20,\"s\":\"bar\"}}"
argument_list|,
name|lines
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Test that if the fraction of rows that have distinct strings is greater than the configured
comment|// threshold dictionary encoding is turned off.  If dictionary encoding is turned off the length
comment|// of the dictionary stream for the column will be 0 in the ORC file dump.
annotation|@
name|Test
specifier|public
name|void
name|testDictionaryThreshold
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|getMyRecordType
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OrcConf
operator|.
name|ENCODING_STRATEGY
operator|.
name|getAttribute
argument_list|()
argument_list|,
literal|"COMPRESSION"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|OrcConf
operator|.
name|DICTIONARY_KEY_SIZE_THRESHOLD
operator|.
name|getAttribute
argument_list|()
argument_list|,
literal|0.49f
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|fileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|ZLIB
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|1000
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Random
name|r1
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|words
init|=
operator|new
name|String
index|[]
block|{
literal|"It"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"best"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"worst"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"wisdom,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"foolishness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"belief,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"incredulity,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Light,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Darkness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"spring"
block|,
literal|"of"
block|,
literal|"hope,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"winter"
block|,
literal|"of"
block|,
literal|"despair,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"everything"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"nothing"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"to"
block|,
literal|"Heaven,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"the"
block|,
literal|"other"
block|,
literal|"way"
block|}
decl_stmt|;
name|int
name|nextInt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21000
condition|;
operator|++
name|i
control|)
block|{
comment|// Write out the same string twice, this guarantees the fraction of rows with
comment|// distinct strings is 0.5
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|nextInt
operator|=
name|r1
operator|.
name|nextInt
argument_list|(
name|words
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Append the value of i to the word, this guarantees when an index or word is repeated
comment|// the actual string is unique.
name|words
index|[
name|nextInt
index|]
operator|+=
literal|"-"
operator|+
name|i
expr_stmt|;
block|}
name|appendMyRecord
argument_list|(
name|batch
argument_list|,
name|r1
operator|.
name|nextInt
argument_list|()
argument_list|,
name|r1
operator|.
name|nextLong
argument_list|()
argument_list|,
name|words
index|[
name|nextInt
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
name|batch
operator|.
name|getMaxSize
argument_list|()
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|batch
operator|.
name|size
operator|!=
literal|0
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|String
name|outputFilename
init|=
literal|"orc-file-dump-dictionary-threshold.out"
decl_stmt|;
name|FileOutputStream
name|myOut
init|=
operator|new
name|FileOutputStream
argument_list|(
name|workDir
operator|+
name|File
operator|.
name|separator
operator|+
name|outputFilename
argument_list|)
decl_stmt|;
comment|// replace stdout and run command
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myOut
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|testFilePath
operator|.
name|toString
argument_list|()
block|,
literal|"--rowindex=1,2,3"
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
name|checkOutput
argument_list|(
name|outputFilename
argument_list|,
name|workDir
operator|+
name|File
operator|.
name|separator
operator|+
name|outputFilename
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|getMyRecordType
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OrcConf
operator|.
name|ENCODING_STRATEGY
operator|.
name|getAttribute
argument_list|()
argument_list|,
literal|"COMPRESSION"
argument_list|)
expr_stmt|;
name|OrcFile
operator|.
name|WriterOptions
name|options
init|=
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|fileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|ZLIB
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|1000
argument_list|)
operator|.
name|bloomFilterColumns
argument_list|(
literal|"S"
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Random
name|r1
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|words
init|=
operator|new
name|String
index|[]
block|{
literal|"It"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"best"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"worst"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"wisdom,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"foolishness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"belief,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"incredulity,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Light,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Darkness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"spring"
block|,
literal|"of"
block|,
literal|"hope,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"winter"
block|,
literal|"of"
block|,
literal|"despair,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"everything"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"nothing"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"to"
block|,
literal|"Heaven,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"the"
block|,
literal|"other"
block|,
literal|"way"
block|}
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21000
condition|;
operator|++
name|i
control|)
block|{
name|appendMyRecord
argument_list|(
name|batch
argument_list|,
name|r1
operator|.
name|nextInt
argument_list|()
argument_list|,
name|r1
operator|.
name|nextLong
argument_list|()
argument_list|,
name|words
index|[
name|r1
operator|.
name|nextInt
argument_list|(
name|words
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
name|batch
operator|.
name|getMaxSize
argument_list|()
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|batch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|String
name|outputFilename
init|=
literal|"orc-file-dump-bloomfilter.out"
decl_stmt|;
name|FileOutputStream
name|myOut
init|=
operator|new
name|FileOutputStream
argument_list|(
name|workDir
operator|+
name|File
operator|.
name|separator
operator|+
name|outputFilename
argument_list|)
decl_stmt|;
comment|// replace stdout and run command
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myOut
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|testFilePath
operator|.
name|toString
argument_list|()
block|,
literal|"--rowindex=3"
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
name|checkOutput
argument_list|(
name|outputFilename
argument_list|,
name|workDir
operator|+
name|File
operator|.
name|separator
operator|+
name|outputFilename
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomFilter2
parameter_list|()
throws|throws
name|Exception
block|{
name|TypeDescription
name|schema
init|=
name|getMyRecordType
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|OrcConf
operator|.
name|ENCODING_STRATEGY
operator|.
name|getAttribute
argument_list|()
argument_list|,
literal|"COMPRESSION"
argument_list|)
expr_stmt|;
name|OrcFile
operator|.
name|WriterOptions
name|options
init|=
name|OrcFile
operator|.
name|writerOptions
argument_list|(
name|conf
argument_list|)
operator|.
name|fileSystem
argument_list|(
name|fs
argument_list|)
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
operator|.
name|stripeSize
argument_list|(
literal|100000
argument_list|)
operator|.
name|compress
argument_list|(
name|CompressionKind
operator|.
name|ZLIB
argument_list|)
operator|.
name|bufferSize
argument_list|(
literal|10000
argument_list|)
operator|.
name|rowIndexStride
argument_list|(
literal|1000
argument_list|)
operator|.
name|bloomFilterColumns
argument_list|(
literal|"l"
argument_list|)
operator|.
name|bloomFilterFpp
argument_list|(
literal|0.01
argument_list|)
decl_stmt|;
name|VectorizedRowBatch
name|batch
init|=
name|schema
operator|.
name|createRowBatch
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|OrcFile
operator|.
name|createWriter
argument_list|(
name|testFilePath
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|Random
name|r1
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|words
init|=
operator|new
name|String
index|[]
block|{
literal|"It"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"best"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"worst"
block|,
literal|"of"
block|,
literal|"times,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"wisdom,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"age"
block|,
literal|"of"
block|,
literal|"foolishness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"belief,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"epoch"
block|,
literal|"of"
block|,
literal|"incredulity,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Light,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"season"
block|,
literal|"of"
block|,
literal|"Darkness,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"spring"
block|,
literal|"of"
block|,
literal|"hope,"
block|,
literal|"it"
block|,
literal|"was"
block|,
literal|"the"
block|,
literal|"winter"
block|,
literal|"of"
block|,
literal|"despair,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"everything"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"had"
block|,
literal|"nothing"
block|,
literal|"before"
block|,
literal|"us,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"to"
block|,
literal|"Heaven,"
block|,
literal|"we"
block|,
literal|"were"
block|,
literal|"all"
block|,
literal|"going"
block|,
literal|"direct"
block|,
literal|"the"
block|,
literal|"other"
block|,
literal|"way"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21000
condition|;
operator|++
name|i
control|)
block|{
name|appendMyRecord
argument_list|(
name|batch
argument_list|,
name|r1
operator|.
name|nextInt
argument_list|()
argument_list|,
name|r1
operator|.
name|nextLong
argument_list|()
argument_list|,
name|words
index|[
name|r1
operator|.
name|nextInt
argument_list|(
name|words
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|batch
operator|.
name|size
operator|==
name|batch
operator|.
name|getMaxSize
argument_list|()
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|batch
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|batch
operator|.
name|size
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|addRowBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|String
name|outputFilename
init|=
literal|"orc-file-dump-bloomfilter2.out"
decl_stmt|;
name|FileOutputStream
name|myOut
init|=
operator|new
name|FileOutputStream
argument_list|(
name|workDir
operator|+
name|File
operator|.
name|separator
operator|+
name|outputFilename
argument_list|)
decl_stmt|;
comment|// replace stdout and run command
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|myOut
argument_list|)
argument_list|)
expr_stmt|;
name|FileDump
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|testFilePath
operator|.
name|toString
argument_list|()
block|,
literal|"--rowindex=2"
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
name|checkOutput
argument_list|(
name|outputFilename
argument_list|,
name|workDir
operator|+
name|File
operator|.
name|separator
operator|+
name|outputFilename
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

