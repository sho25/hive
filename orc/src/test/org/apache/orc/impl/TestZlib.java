begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|TestZlib
block|{
annotation|@
name|Test
specifier|public
name|void
name|testNoOverflow
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBuffer
name|in
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|ByteBuffer
name|out
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|in
operator|.
name|put
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|10
block|}
argument_list|)
expr_stmt|;
name|in
operator|.
name|flip
argument_list|()
expr_stmt|;
name|CompressionCodec
name|codec
init|=
operator|new
name|ZlibCodec
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|codec
operator|.
name|compress
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorrupt
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|buf
operator|.
name|put
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|127
block|,
operator|-
literal|128
block|,
literal|0
block|,
literal|99
block|,
literal|98
block|,
operator|-
literal|1
block|}
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|CompressionCodec
name|codec
init|=
operator|new
name|ZlibCodec
argument_list|()
decl_stmt|;
name|ByteBuffer
name|out
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
try|try
block|{
name|codec
operator|.
name|decompress
argument_list|(
name|buf
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// EXPECTED
block|}
block|}
block|}
end_class

end_unit

