begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|DynamicByteArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|DynamicIntArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TestDynamicArray
block|{
annotation|@
name|Test
specifier|public
name|void
name|testByteArray
parameter_list|()
throws|throws
name|Exception
block|{
name|DynamicByteArray
name|dba
init|=
operator|new
name|DynamicByteArray
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|dba
operator|.
name|add
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|dba
operator|.
name|add
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|dba
operator|.
name|set
argument_list|(
literal|3
argument_list|,
operator|(
name|byte
operator|)
literal|3
argument_list|)
expr_stmt|;
name|dba
operator|.
name|set
argument_list|(
literal|2
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
expr_stmt|;
name|dba
operator|.
name|add
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{0,1,2,3,4}"
argument_list|,
name|dba
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|dba
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|val
decl_stmt|;
name|val
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|42
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
operator|new
name|byte
index|[
literal|256
index|]
expr_stmt|;
for|for
control|(
name|int
name|b
init|=
operator|-
literal|128
init|;
name|b
operator|<
literal|128
condition|;
operator|++
name|b
control|)
block|{
name|dba
operator|.
name|add
argument_list|(
operator|(
name|byte
operator|)
name|b
argument_list|)
expr_stmt|;
name|val
index|[
name|b
operator|+
literal|128
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|256
argument_list|,
literal|5
argument_list|,
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|254
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|120
argument_list|,
literal|1
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
operator|new
name|byte
index|[
literal|1024
index|]
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|1701
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|rand
operator|.
name|nextBytes
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|dba
operator|.
name|add
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1285
argument_list|,
name|dba
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dba
operator|.
name|compare
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
literal|261
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntArray
parameter_list|()
throws|throws
name|Exception
block|{
name|DynamicIntArray
name|dia
init|=
operator|new
name|DynamicIntArray
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
name|dia
operator|.
name|add
argument_list|(
literal|2
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|dia
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|2
operator|*
name|i
argument_list|,
name|dia
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dia
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dia
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|dia
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|dia
operator|.
name|add
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|dia
operator|.
name|add
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{3,12,65}"
argument_list|,
name|dia
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|dia
operator|.
name|increment
argument_list|(
name|i
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"{6,15,68,3,3}"
argument_list|,
name|dia
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

