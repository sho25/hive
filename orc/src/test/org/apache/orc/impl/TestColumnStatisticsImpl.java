begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestColumnStatisticsImpl
block|{
annotation|@
name|Test
specifier|public
name|void
name|testUpdateDate
parameter_list|()
throws|throws
name|Exception
block|{
name|ColumnStatisticsImpl
name|stat
init|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|TypeDescription
operator|.
name|createDate
argument_list|()
argument_list|)
decl_stmt|;
name|DateWritable
name|date
init|=
operator|new
name|DateWritable
argument_list|(
literal|16400
argument_list|)
decl_stmt|;
name|stat
operator|.
name|increment
argument_list|()
expr_stmt|;
name|stat
operator|.
name|updateDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|assertDateStatistics
argument_list|(
name|stat
argument_list|,
literal|1
argument_list|,
literal|16400
argument_list|,
literal|16400
argument_list|)
expr_stmt|;
name|date
operator|.
name|set
argument_list|(
literal|16410
argument_list|)
expr_stmt|;
name|stat
operator|.
name|increment
argument_list|()
expr_stmt|;
name|stat
operator|.
name|updateDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|assertDateStatistics
argument_list|(
name|stat
argument_list|,
literal|2
argument_list|,
literal|16400
argument_list|,
literal|16410
argument_list|)
expr_stmt|;
name|date
operator|.
name|set
argument_list|(
literal|16420
argument_list|)
expr_stmt|;
name|stat
operator|.
name|increment
argument_list|()
expr_stmt|;
name|stat
operator|.
name|updateDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|assertDateStatistics
argument_list|(
name|stat
argument_list|,
literal|3
argument_list|,
literal|16400
argument_list|,
literal|16420
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDateStatistics
parameter_list|(
name|ColumnStatisticsImpl
name|stat
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|minimum
parameter_list|,
name|int
name|maximum
parameter_list|)
block|{
name|OrcProto
operator|.
name|ColumnStatistics
operator|.
name|Builder
name|builder
init|=
name|stat
operator|.
name|serialize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|builder
operator|.
name|getNumberOfValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builder
operator|.
name|hasDateStatistics
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|builder
operator|.
name|hasStringStatistics
argument_list|()
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|DateStatistics
name|protoStat
init|=
name|builder
operator|.
name|getDateStatistics
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|protoStat
operator|.
name|hasMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minimum
argument_list|,
name|protoStat
operator|.
name|getMinimum
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|protoStat
operator|.
name|hasMaximum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maximum
argument_list|,
name|protoStat
operator|.
name|getMaximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

