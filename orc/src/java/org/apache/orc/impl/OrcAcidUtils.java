begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_class
specifier|public
class|class
name|OrcAcidUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ACID_STATS
init|=
literal|"hive.acid.stats"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELTA_SIDE_FILE_SUFFIX
init|=
literal|"_flush_length"
decl_stmt|;
comment|/**    * Get the filename of the ORC ACID side file that contains the lengths    * of the intermediate footers.    * @param main the main ORC filename    * @return the name of the side file    */
specifier|public
specifier|static
name|Path
name|getSideFile
parameter_list|(
name|Path
name|main
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|main
operator|+
name|DELTA_SIDE_FILE_SUFFIX
argument_list|)
return|;
block|}
comment|/**    * Read the side file to get the last flush length.    * @param fs the file system to use    * @param deltaFile the path of the delta file    * @return the maximum size of the file to use    * @throws IOException    */
specifier|public
specifier|static
name|long
name|getLastFlushLength
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|deltaFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|lengths
init|=
name|getSideFile
argument_list|(
name|deltaFile
argument_list|)
decl_stmt|;
name|long
name|result
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|lengths
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
try|try
init|(
name|FSDataInputStream
name|stream
init|=
name|fs
operator|.
name|open
argument_list|(
name|lengths
argument_list|)
init|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
while|while
condition|(
name|stream
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|stream
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Charset
name|utf8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CharsetDecoder
name|utf8Decoder
init|=
name|utf8
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|AcidStats
name|parseAcidStats
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|.
name|hasMetadataValue
argument_list|(
name|ACID_STATS
argument_list|)
condition|)
block|{
try|try
block|{
name|ByteBuffer
name|val
init|=
name|reader
operator|.
name|getMetadataValue
argument_list|(
name|ACID_STATS
argument_list|)
operator|.
name|duplicate
argument_list|()
decl_stmt|;
return|return
operator|new
name|AcidStats
argument_list|(
name|utf8Decoder
operator|.
name|decode
argument_list|(
name|val
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad string encoding for "
operator|+
name|ACID_STATS
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

