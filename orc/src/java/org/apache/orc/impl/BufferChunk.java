begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|DiskRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * The sections of stripe that we have read.  * This might not match diskRange - 1 disk range can be multiple buffer chunks,  * depending on DFS block boundaries.  */
end_comment

begin_class
specifier|public
class|class
name|BufferChunk
extends|extends
name|DiskRangeList
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BufferChunk
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ByteBuffer
name|chunk
decl_stmt|;
specifier|public
name|BufferChunk
parameter_list|(
name|ByteBuffer
name|chunk
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|super
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|chunk
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|chunk
operator|=
name|chunk
expr_stmt|;
block|}
specifier|public
name|ByteBuffer
name|getChunk
parameter_list|()
block|{
return|return
name|chunk
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasData
parameter_list|()
block|{
return|return
name|chunk
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
name|boolean
name|makesSense
init|=
name|chunk
operator|.
name|remaining
argument_list|()
operator|==
operator|(
name|end
operator|-
name|offset
operator|)
decl_stmt|;
return|return
literal|"data range ["
operator|+
name|offset
operator|+
literal|", "
operator|+
name|end
operator|+
literal|"), size: "
operator|+
name|chunk
operator|.
name|remaining
argument_list|()
operator|+
operator|(
name|makesSense
condition|?
literal|""
else|:
literal|"(!)"
operator|)
operator|+
literal|" type: "
operator|+
operator|(
name|chunk
operator|.
name|isDirect
argument_list|()
condition|?
literal|"direct"
else|:
literal|"array-backed"
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DiskRange
name|sliceAndShift
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|end
parameter_list|,
name|long
name|shiftBy
parameter_list|)
block|{
assert|assert
name|offset
operator|<=
name|end
operator|&&
name|offset
operator|>=
name|this
operator|.
name|offset
operator|&&
name|end
operator|<=
name|this
operator|.
name|end
assert|;
assert|assert
name|offset
operator|+
name|shiftBy
operator|>=
literal|0
assert|;
name|ByteBuffer
name|sliceBuf
init|=
name|chunk
operator|.
name|slice
argument_list|()
decl_stmt|;
name|int
name|newPos
init|=
call|(
name|int
call|)
argument_list|(
name|offset
operator|-
name|this
operator|.
name|offset
argument_list|)
decl_stmt|;
name|int
name|newLimit
init|=
name|newPos
operator|+
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|offset
argument_list|)
decl_stmt|;
try|try
block|{
name|sliceBuf
operator|.
name|position
argument_list|(
name|newPos
argument_list|)
expr_stmt|;
name|sliceBuf
operator|.
name|limit
argument_list|(
name|newLimit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to slice buffer chunk with range"
operator|+
literal|" ["
operator|+
name|this
operator|.
name|offset
operator|+
literal|", "
operator|+
name|this
operator|.
name|end
operator|+
literal|"), position: "
operator|+
name|chunk
operator|.
name|position
argument_list|()
operator|+
literal|" limit: "
operator|+
name|chunk
operator|.
name|limit
argument_list|()
operator|+
literal|", "
operator|+
operator|(
name|chunk
operator|.
name|isDirect
argument_list|()
condition|?
literal|"direct"
else|:
literal|"array"
operator|)
operator|+
literal|"; to ["
operator|+
name|offset
operator|+
literal|", "
operator|+
name|end
operator|+
literal|") "
operator|+
name|t
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
return|return
operator|new
name|BufferChunk
argument_list|(
name|sliceBuf
argument_list|,
name|offset
operator|+
name|shiftBy
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getData
parameter_list|()
block|{
return|return
name|chunk
return|;
block|}
block|}
end_class

end_unit

