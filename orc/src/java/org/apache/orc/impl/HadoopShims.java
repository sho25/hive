begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_interface
specifier|public
interface|interface
name|HadoopShims
block|{
enum|enum
name|DirectCompressionType
block|{
name|NONE
block|,
name|ZLIB_NOHEADER
block|,
name|ZLIB
block|,
name|SNAPPY
block|,   }
interface|interface
name|DirectDecompressor
block|{
name|void
name|decompress
parameter_list|(
name|ByteBuffer
name|var1
parameter_list|,
name|ByteBuffer
name|var2
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Get a direct decompressor codec, if it is available    * @param codec    * @return    */
name|DirectDecompressor
name|getDirectDecompressor
parameter_list|(
name|DirectCompressionType
name|codec
parameter_list|)
function_decl|;
class|class
name|Factory
block|{
specifier|private
specifier|static
name|HadoopShims
name|SHIMS
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|synchronized
name|HadoopShims
name|get
parameter_list|()
block|{
if|if
condition|(
name|SHIMS
operator|==
literal|null
condition|)
block|{
name|String
index|[]
name|versionParts
init|=
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|.
name|split
argument_list|(
literal|"[.]"
argument_list|)
decl_stmt|;
name|int
name|major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|versionParts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|minor
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|versionParts
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|major
operator|<
literal|2
operator|||
operator|(
name|major
operator|==
literal|2
operator|&&
name|minor
operator|<
literal|3
operator|)
condition|)
block|{
name|SHIMS
operator|=
operator|new
name|HadoopShims_2_2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SHIMS
operator|=
operator|new
name|HadoopShimsCurrent
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|SHIMS
return|;
block|}
block|}
block|}
end_interface

end_unit

