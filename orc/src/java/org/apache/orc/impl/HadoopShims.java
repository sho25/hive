begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_interface
specifier|public
interface|interface
name|HadoopShims
block|{
enum|enum
name|DirectCompressionType
block|{
name|NONE
block|,
name|ZLIB_NOHEADER
block|,
name|ZLIB
block|,
name|SNAPPY
block|,   }
interface|interface
name|DirectDecompressor
block|{
name|void
name|decompress
parameter_list|(
name|ByteBuffer
name|var1
parameter_list|,
name|ByteBuffer
name|var2
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Get a direct decompressor codec, if it is available    * @param codec    * @return    */
name|DirectDecompressor
name|getDirectDecompressor
parameter_list|(
name|DirectCompressionType
name|codec
parameter_list|)
function_decl|;
comment|/**    * a hadoop.io ByteBufferPool shim.    */
specifier|public
interface|interface
name|ByteBufferPoolShim
block|{
comment|/**      * Get a new ByteBuffer from the pool.  The pool can provide this from      * removing a buffer from its internal cache, or by allocating a      * new buffer.      *      * @param direct     Whether the buffer should be direct.      * @param length     The minimum length the buffer will have.      * @return           A new ByteBuffer. Its capacity can be less      *                   than what was requested, but must be at      *                   least 1 byte.      */
name|ByteBuffer
name|getBuffer
parameter_list|(
name|boolean
name|direct
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
comment|/**      * Release a buffer back to the pool.      * The pool may choose to put this buffer into its cache/free it.      *      * @param buffer    a direct bytebuffer      */
name|void
name|putBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
function_decl|;
block|}
comment|/**    * Provides an HDFS ZeroCopyReader shim.    * @param in FSDataInputStream to read from (where the cached/mmap buffers are tied to)    * @param in ByteBufferPoolShim to allocate fallback buffers with    *    * @return returns null if not supported    */
specifier|public
name|ZeroCopyReaderShim
name|getZeroCopyReader
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|,
name|ByteBufferPoolShim
name|pool
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|public
interface|interface
name|ZeroCopyReaderShim
extends|extends
name|Closeable
block|{
comment|/**      * Get a ByteBuffer from the FSDataInputStream - this can be either a HeapByteBuffer or an MappedByteBuffer.      * Also move the in stream by that amount. The data read can be small than maxLength.      *      * @return ByteBuffer read from the stream,      */
specifier|public
name|ByteBuffer
name|readBuffer
parameter_list|(
name|int
name|maxLength
parameter_list|,
name|boolean
name|verifyChecksums
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Release a ByteBuffer obtained from a read on the      * Also move the in stream by that amount. The data read can be small than maxLength.      *      */
specifier|public
name|void
name|releaseBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
function_decl|;
comment|/**      * Close the underlying stream.      * @throws IOException      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Read data into a Text object in the fastest way possible    */
specifier|public
interface|interface
name|TextReaderShim
block|{
comment|/**      * @param txt      * @param size      * @return bytes read      * @throws IOException      */
name|void
name|read
parameter_list|(
name|Text
name|txt
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Wrap a TextReaderShim around an input stream. The reader shim will not    * buffer any reads from the underlying stream and will only consume bytes    * which are required for TextReaderShim.read() input.    */
specifier|public
name|TextReaderShim
name|getTextReaderShim
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
function_decl|;
class|class
name|Factory
block|{
specifier|private
specifier|static
name|HadoopShims
name|SHIMS
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|synchronized
name|HadoopShims
name|get
parameter_list|()
block|{
if|if
condition|(
name|SHIMS
operator|==
literal|null
condition|)
block|{
name|String
index|[]
name|versionParts
init|=
name|VersionInfo
operator|.
name|getVersion
argument_list|()
operator|.
name|split
argument_list|(
literal|"[.]"
argument_list|)
decl_stmt|;
name|int
name|major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|versionParts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|minor
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|versionParts
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|major
operator|<
literal|2
operator|||
operator|(
name|major
operator|==
literal|2
operator|&&
name|minor
operator|<
literal|3
operator|)
condition|)
block|{
name|SHIMS
operator|=
operator|new
name|HadoopShims_2_2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SHIMS
operator|=
operator|new
name|HadoopShimsCurrent
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|SHIMS
return|;
block|}
block|}
block|}
end_interface

end_unit

