begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|TimestampUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Convert ORC tree readers.  */
end_comment

begin_class
specifier|public
class|class
name|ConvertTreeReaderFactory
extends|extends
name|TreeReaderFactory
block|{
comment|/**    * Override methods like checkEncoding to pass-thru to the convert TreeReader.    */
specifier|public
specifier|static
class|class
name|ConvertTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
name|TreeReader
name|convertTreeReader
decl_stmt|;
name|ConvertTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
block|}
comment|// The ordering of types here is used to determine which numeric types
comment|// are common/convertible to one another. Probably better to rely on the
comment|// ordering explicitly defined here than to assume that the enum values
comment|// that were arbitrarily assigned in PrimitiveCategory work for our purposes.
specifier|private
specifier|static
name|EnumMap
argument_list|<
name|TypeDescription
operator|.
name|Category
argument_list|,
name|Integer
argument_list|>
name|numericTypes
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|TypeDescription
operator|.
name|Category
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|registerNumericType
argument_list|(
name|TypeDescription
operator|.
name|Category
operator|.
name|BOOLEAN
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|TypeDescription
operator|.
name|Category
operator|.
name|BYTE
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|TypeDescription
operator|.
name|Category
operator|.
name|SHORT
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|TypeDescription
operator|.
name|Category
operator|.
name|INT
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|TypeDescription
operator|.
name|Category
operator|.
name|LONG
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|TypeDescription
operator|.
name|Category
operator|.
name|FLOAT
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|TypeDescription
operator|.
name|Category
operator|.
name|DOUBLE
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|registerNumericType
argument_list|(
name|TypeDescription
operator|.
name|Category
operator|.
name|DECIMAL
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|registerNumericType
parameter_list|(
name|TypeDescription
operator|.
name|Category
name|kind
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|numericTypes
operator|.
name|put
argument_list|(
name|kind
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setConvertTreeReader
parameter_list|(
name|TreeReader
name|convertTreeReader
parameter_list|)
block|{
name|this
operator|.
name|convertTreeReader
operator|=
name|convertTreeReader
expr_stmt|;
block|}
specifier|protected
name|TreeReader
name|getStringGroupTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|fileType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|STRING
case|:
return|return
operator|new
name|StringTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|new
name|CharTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
operator|.
name|getMaxLength
argument_list|()
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
operator|new
name|VarcharTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
operator|.
name|getMaxLength
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected type kind "
operator|+
name|fileType
operator|.
name|getCategory
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|assignStringGroupVectorEntry
parameter_list|(
name|BytesColumnVector
name|bytesColVector
parameter_list|,
name|int
name|elementNum
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|assignStringGroupVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|,
name|readerType
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/*      * Assign a BytesColumnVector entry when we have a byte array, start, and      * length for the string group which can be (STRING, CHAR, VARCHAR).      */
specifier|protected
name|void
name|assignStringGroupVectorEntry
parameter_list|(
name|BytesColumnVector
name|bytesColVector
parameter_list|,
name|int
name|elementNum
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|STRING
case|:
name|bytesColVector
operator|.
name|setVal
argument_list|(
name|elementNum
argument_list|,
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
block|{
name|int
name|adjustedDownLen
init|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|readerType
operator|.
name|getMaxLength
argument_list|()
argument_list|)
decl_stmt|;
name|bytesColVector
operator|.
name|setVal
argument_list|(
name|elementNum
argument_list|,
name|bytes
argument_list|,
name|start
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
name|int
name|adjustedDownLen
init|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|readerType
operator|.
name|getMaxLength
argument_list|()
argument_list|)
decl_stmt|;
name|bytesColVector
operator|.
name|setVal
argument_list|(
name|elementNum
argument_list|,
name|bytes
argument_list|,
name|start
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected type kind "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|convertStringGroupVectorElement
parameter_list|(
name|BytesColumnVector
name|bytesColVector
parameter_list|,
name|int
name|elementNum
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
block|{
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|STRING
case|:
comment|// No conversion needed.
break|break;
case|case
name|CHAR
case|:
block|{
name|int
name|length
init|=
name|bytesColVector
operator|.
name|length
index|[
name|elementNum
index|]
decl_stmt|;
name|int
name|adjustedDownLen
init|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|bytesColVector
operator|.
name|vector
index|[
name|elementNum
index|]
argument_list|,
name|bytesColVector
operator|.
name|start
index|[
name|elementNum
index|]
argument_list|,
name|length
argument_list|,
name|readerType
operator|.
name|getMaxLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|length
condition|)
block|{
name|bytesColVector
operator|.
name|length
index|[
name|elementNum
index|]
operator|=
name|adjustedDownLen
expr_stmt|;
block|}
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
name|int
name|length
init|=
name|bytesColVector
operator|.
name|length
index|[
name|elementNum
index|]
decl_stmt|;
name|int
name|adjustedDownLen
init|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|bytesColVector
operator|.
name|vector
index|[
name|elementNum
index|]
argument_list|,
name|bytesColVector
operator|.
name|start
index|[
name|elementNum
index|]
argument_list|,
name|length
argument_list|,
name|readerType
operator|.
name|getMaxLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|length
condition|)
block|{
name|bytesColVector
operator|.
name|length
index|[
name|elementNum
index|]
operator|=
name|adjustedDownLen
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected type kind "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isParseError
decl_stmt|;
comment|/*      * We do this because we want the various parse methods return a primitive.      *      * @return true if there was a parse error in the last call to      * parseLongFromString, etc.      */
specifier|protected
name|boolean
name|getIsParseError
parameter_list|()
block|{
return|return
name|isParseError
return|;
block|}
specifier|protected
name|long
name|parseLongFromString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
try|try
block|{
name|long
name|longValue
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|isParseError
operator|=
literal|false
expr_stmt|;
return|return
name|longValue
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|isParseError
operator|=
literal|true
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
specifier|protected
name|float
name|parseFloatFromString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
try|try
block|{
name|float
name|floatValue
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|isParseError
operator|=
literal|false
expr_stmt|;
return|return
name|floatValue
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|isParseError
operator|=
literal|true
expr_stmt|;
return|return
name|Float
operator|.
name|NaN
return|;
block|}
block|}
specifier|protected
name|double
name|parseDoubleFromString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
try|try
block|{
name|double
name|value
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|isParseError
operator|=
literal|false
expr_stmt|;
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|isParseError
operator|=
literal|true
expr_stmt|;
return|return
name|Double
operator|.
name|NaN
return|;
block|}
block|}
comment|/**      * @param string      * @return the HiveDecimal parsed, or null if there was a parse error.      */
specifier|protected
name|HiveDecimal
name|parseDecimalFromString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
try|try
block|{
name|HiveDecimal
name|value
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|string
argument_list|)
decl_stmt|;
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * @param string      * @return the Timestamp parsed, or null if there was a parse error.      */
specifier|protected
name|Timestamp
name|parseTimestampFromString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
try|try
block|{
name|Timestamp
name|value
init|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|string
argument_list|)
decl_stmt|;
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * @param string      * @return the Date parsed, or null if there was a parse error.      */
specifier|protected
name|Date
name|parseDateFromString
parameter_list|(
name|String
name|string
parameter_list|)
block|{
try|try
block|{
name|Date
name|value
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|string
argument_list|)
decl_stmt|;
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|String
name|stringFromBytesColumnVectorEntry
parameter_list|(
name|BytesColumnVector
name|bytesColVector
parameter_list|,
name|int
name|elementNum
parameter_list|)
block|{
name|String
name|string
decl_stmt|;
name|string
operator|=
operator|new
name|String
argument_list|(
name|bytesColVector
operator|.
name|vector
index|[
name|elementNum
index|]
argument_list|,
name|bytesColVector
operator|.
name|start
index|[
name|elementNum
index|]
argument_list|,
name|bytesColVector
operator|.
name|length
index|[
name|elementNum
index|]
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
return|return
name|string
return|;
block|}
specifier|private
specifier|static
specifier|final
name|double
name|MIN_LONG_AS_DOUBLE
init|=
operator|-
literal|0x1p63
decl_stmt|;
comment|/*      * We cannot store Long.MAX_VALUE as a double without losing precision. Instead, we store      * Long.MAX_VALUE + 1 == -Long.MIN_VALUE, and then offset all comparisons by 1.      */
specifier|private
specifier|static
specifier|final
name|double
name|MAX_LONG_AS_DOUBLE_PLUS_ONE
init|=
literal|0x1p63
decl_stmt|;
specifier|public
name|boolean
name|doubleCanFitInLong
parameter_list|(
name|double
name|doubleValue
parameter_list|)
block|{
comment|// Borrowed from Guava DoubleMath.roundToLong except do not want dependency on Guava and we
comment|// don't want to catch an exception.
return|return
operator|(
operator|(
name|MIN_LONG_AS_DOUBLE
operator|-
name|doubleValue
operator|<
literal|1.0
operator|)
operator|&&
operator|(
name|doubleValue
operator|<
name|MAX_LONG_AS_DOUBLE_PLUS_ONE
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Pass-thru.
name|convertTreeReader
operator|.
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Pass-thru.
name|convertTreeReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Pass-thru.
name|convertTreeReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Pass-thru.
name|convertTreeReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Pass-thru.
name|convertTreeReader
operator|.
name|skipRows
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
comment|/**      * Override this to use convertVector.      * Source and result are member variables in the subclass with the right      * type.      * @param elementNum      * @throws IOException      */
comment|// Override this to use convertVector.
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected this method to be overriden"
argument_list|)
throw|;
block|}
comment|// Common code used by the conversion.
specifier|public
name|void
name|convertVector
parameter_list|(
name|ColumnVector
name|fromColVector
parameter_list|,
name|ColumnVector
name|resultColVector
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|resultColVector
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|fromColVector
operator|.
name|isRepeating
condition|)
block|{
name|resultColVector
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|fromColVector
operator|.
name|noNulls
operator|||
operator|!
name|fromColVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|setConvertVectorElement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|resultColVector
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|fromColVector
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|setConvertVectorElement
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|fromColVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|setConvertVectorElement
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|resultColVector
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|downCastAnyInteger
parameter_list|(
name|LongColumnVector
name|longColVector
parameter_list|,
name|int
name|elementNum
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
block|{
name|downCastAnyInteger
argument_list|(
name|longColVector
argument_list|,
name|elementNum
argument_list|,
name|longColVector
operator|.
name|vector
index|[
name|elementNum
index|]
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|downCastAnyInteger
parameter_list|(
name|LongColumnVector
name|longColVector
parameter_list|,
name|int
name|elementNum
parameter_list|,
name|long
name|inputLong
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
block|{
name|long
index|[]
name|vector
init|=
name|longColVector
operator|.
name|vector
decl_stmt|;
name|long
name|outputLong
decl_stmt|;
name|Category
name|readerCategory
init|=
name|readerType
operator|.
name|getCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|readerCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
comment|// No data loss for boolean.
name|vector
index|[
name|elementNum
index|]
operator|=
name|inputLong
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
expr_stmt|;
return|return;
case|case
name|BYTE
case|:
name|outputLong
operator|=
operator|(
name|byte
operator|)
name|inputLong
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|outputLong
operator|=
operator|(
name|short
operator|)
name|inputLong
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|outputLong
operator|=
operator|(
name|int
operator|)
name|inputLong
expr_stmt|;
break|break;
case|case
name|LONG
case|:
comment|// No data loss for long.
name|vector
index|[
name|elementNum
index|]
operator|=
name|inputLong
expr_stmt|;
return|return;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected type kind "
operator|+
name|readerCategory
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|outputLong
operator|!=
name|inputLong
condition|)
block|{
comment|// Data loss.
name|longColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
name|longColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|vector
index|[
name|elementNum
index|]
operator|=
name|outputLong
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|integerDownCastNeeded
parameter_list|(
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
block|{
name|Integer
name|fileLevel
init|=
name|numericTypes
operator|.
name|get
argument_list|(
name|fileType
operator|.
name|getCategory
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|schemaLevel
init|=
name|numericTypes
operator|.
name|get
argument_list|(
name|readerType
operator|.
name|getCategory
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|schemaLevel
operator|.
name|intValue
argument_list|()
operator|<
name|fileLevel
operator|.
name|intValue
argument_list|()
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AnyIntegerTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TypeDescription
operator|.
name|Category
name|fileTypeCategory
decl_stmt|;
specifier|private
name|TreeReader
name|anyIntegerTreeReader
decl_stmt|;
specifier|private
name|long
name|longValue
decl_stmt|;
name|AnyIntegerTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileTypeCategory
operator|=
name|fileType
operator|.
name|getCategory
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|fileTypeCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|anyIntegerTreeReader
operator|=
operator|new
name|BooleanTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|anyIntegerTreeReader
operator|=
operator|new
name|ByteTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|anyIntegerTreeReader
operator|=
operator|new
name|ShortTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|anyIntegerTreeReader
operator|=
operator|new
name|IntTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|anyIntegerTreeReader
operator|=
operator|new
name|LongTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected type kind "
operator|+
name|fileType
operator|.
name|getCategory
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
name|setConvertTreeReader
argument_list|(
name|anyIntegerTreeReader
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|long
name|getLong
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|longValue
return|;
block|}
specifier|protected
name|String
name|getString
parameter_list|(
name|long
name|longValue
parameter_list|)
block|{
if|if
condition|(
name|fileTypeCategory
operator|==
name|TypeDescription
operator|.
name|Category
operator|.
name|BOOLEAN
condition|)
block|{
return|return
name|longValue
operator|==
literal|0
condition|?
literal|"FALSE"
else|:
literal|"TRUE"
return|;
block|}
else|else
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|longValue
argument_list|)
return|;
block|}
block|}
specifier|protected
name|String
name|getString
parameter_list|()
block|{
return|return
name|getString
argument_list|(
name|longValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|anyIntegerTreeReader
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AnyIntegerFromAnyIntegerTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|AnyIntegerTreeReader
name|anyIntegerAsLongTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|downCastNeeded
decl_stmt|;
name|AnyIntegerFromAnyIntegerTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|anyIntegerAsLongTreeReader
operator|=
operator|new
name|AnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|anyIntegerAsLongTreeReader
argument_list|)
expr_stmt|;
name|downCastNeeded
operator|=
name|integerDownCastNeeded
argument_list|(
name|fileType
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|anyIntegerAsLongTreeReader
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|LongColumnVector
name|resultColVector
init|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
decl_stmt|;
if|if
condition|(
name|downCastNeeded
condition|)
block|{
if|if
condition|(
name|resultColVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|resultColVector
operator|.
name|noNulls
operator|||
operator|!
name|resultColVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|downCastAnyInteger
argument_list|(
name|resultColVector
argument_list|,
literal|0
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Result remains null.
block|}
block|}
elseif|else
if|if
condition|(
name|resultColVector
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|downCastAnyInteger
argument_list|(
name|resultColVector
argument_list|,
name|i
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|resultColVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|downCastAnyInteger
argument_list|(
name|resultColVector
argument_list|,
name|i
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Result remains null.
block|}
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|AnyIntegerFromFloatTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|FloatTreeReader
name|floatTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
name|AnyIntegerFromFloatTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|floatTreeReader
operator|=
operator|new
name|FloatTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|floatTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|doubleValue
init|=
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|doubleCanFitInLong
argument_list|(
name|doubleValue
argument_list|)
condition|)
block|{
name|longColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
name|longColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// UNDONE: Does the overflow check above using double really work here for float?
name|float
name|floatValue
init|=
operator|(
name|float
operator|)
name|doubleValue
decl_stmt|;
name|downCastAnyInteger
argument_list|(
name|longColVector
argument_list|,
name|elementNum
argument_list|,
operator|(
name|long
operator|)
name|floatValue
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doubleColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|doubleColVector
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|longColVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|floatTreeReader
operator|.
name|nextVector
argument_list|(
name|doubleColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|doubleColVector
argument_list|,
name|longColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AnyIntegerFromDoubleTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DoubleTreeReader
name|doubleTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
name|AnyIntegerFromDoubleTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|doubleTreeReader
operator|=
operator|new
name|DoubleTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|doubleTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|doubleValue
init|=
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|doubleCanFitInLong
argument_list|(
name|doubleValue
argument_list|)
condition|)
block|{
name|longColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
name|longColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|downCastAnyInteger
argument_list|(
name|longColVector
argument_list|,
name|elementNum
argument_list|,
operator|(
name|long
operator|)
name|doubleValue
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doubleColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|doubleColVector
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|longColVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|doubleTreeReader
operator|.
name|nextVector
argument_list|(
name|doubleColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|doubleColVector
argument_list|,
name|longColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AnyIntegerFromDecimalTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DecimalTreeReader
name|decimalTreeReader
decl_stmt|;
specifier|private
specifier|final
name|int
name|precision
decl_stmt|;
specifier|private
specifier|final
name|int
name|scale
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|decimalColVector
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
name|AnyIntegerFromDecimalTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|fileType
operator|.
name|getPrecision
argument_list|()
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|fileType
operator|.
name|getScale
argument_list|()
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|decimalTreeReader
operator|=
operator|new
name|DecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|decimalTreeReader
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|HiveDecimal
name|DECIMAL_MAX_LONG
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HiveDecimal
name|DECIMAL_MIN_LONG
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveDecimal
name|decimalValue
init|=
name|decimalColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
if|if
condition|(
name|decimalValue
operator|.
name|compareTo
argument_list|(
name|DECIMAL_MAX_LONG
argument_list|)
operator|>
literal|0
operator|||
name|decimalValue
operator|.
name|compareTo
argument_list|(
name|DECIMAL_MIN_LONG
argument_list|)
operator|<
literal|0
condition|)
block|{
name|longColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
name|longColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: lossy conversion!
name|downCastAnyInteger
argument_list|(
name|longColVector
argument_list|,
name|elementNum
argument_list|,
name|decimalValue
operator|.
name|longValue
argument_list|()
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|decimalColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|decimalColVector
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|longColVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|decimalTreeReader
operator|.
name|nextVector
argument_list|(
name|decimalColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|decimalColVector
argument_list|,
name|longColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AnyIntegerFromStringGroupTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TreeReader
name|stringGroupTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
name|AnyIntegerFromStringGroupTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|stringGroupTreeReader
operator|=
name|getStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|stringGroupTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|string
init|=
name|stringFromBytesColumnVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|)
decl_stmt|;
name|long
name|longValue
init|=
name|parseLongFromString
argument_list|(
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getIsParseError
argument_list|()
condition|)
block|{
name|downCastAnyInteger
argument_list|(
name|longColVector
argument_list|,
name|elementNum
argument_list|,
name|longValue
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|longColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|longColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytesColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|bytesColVector
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|longColVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|stringGroupTreeReader
operator|.
name|nextVector
argument_list|(
name|bytesColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|bytesColVector
argument_list|,
name|longColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AnyIntegerFromTimestampTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TimestampTreeReader
name|timestampTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
name|AnyIntegerFromTimestampTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|timestampTreeReader
operator|=
operator|new
name|TimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|timestampTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Use TimestampWritable's getSeconds.
name|long
name|longValue
init|=
name|TimestampUtils
operator|.
name|millisToSeconds
argument_list|(
name|timestampColVector
operator|.
name|asScratchTimestamp
argument_list|(
name|elementNum
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|downCastAnyInteger
argument_list|(
name|longColVector
argument_list|,
name|elementNum
argument_list|,
name|longValue
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|timestampColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|timestampColVector
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
name|longColVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|timestampTreeReader
operator|.
name|nextVector
argument_list|(
name|timestampColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|timestampColVector
argument_list|,
name|longColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FloatFromAnyIntegerTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|AnyIntegerTreeReader
name|anyIntegerAsLongTreeReader
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
name|FloatFromAnyIntegerTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|anyIntegerAsLongTreeReader
operator|=
operator|new
name|AnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|anyIntegerAsLongTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|floatValue
init|=
operator|(
name|float
operator|)
name|longColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|floatValue
argument_list|)
condition|)
block|{
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
name|floatValue
expr_stmt|;
block|}
else|else
block|{
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|doubleColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|doubleColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|longColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|longColVector
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|doubleColVector
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|anyIntegerAsLongTreeReader
operator|.
name|nextVector
argument_list|(
name|longColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|longColVector
argument_list|,
name|doubleColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FloatFromDoubleTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DoubleTreeReader
name|doubleTreeReader
decl_stmt|;
name|FloatFromDoubleTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|doubleTreeReader
operator|=
operator|new
name|DoubleTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|doubleTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|doubleTreeReader
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|DoubleColumnVector
name|resultColVector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
decl_stmt|;
name|double
index|[]
name|resultVector
init|=
name|resultColVector
operator|.
name|vector
decl_stmt|;
if|if
condition|(
name|resultColVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|resultColVector
operator|.
name|noNulls
operator|||
operator|!
name|resultColVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|resultVector
index|[
literal|0
index|]
operator|=
operator|(
name|float
operator|)
name|resultVector
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// Remains null.
block|}
block|}
elseif|else
if|if
condition|(
name|resultColVector
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|resultVector
index|[
name|i
index|]
operator|=
operator|(
name|float
operator|)
name|resultVector
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|resultColVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|resultVector
index|[
name|i
index|]
operator|=
operator|(
name|float
operator|)
name|resultVector
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// Remains null.
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|FloatFromDecimalTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DecimalTreeReader
name|decimalTreeReader
decl_stmt|;
specifier|private
specifier|final
name|int
name|precision
decl_stmt|;
specifier|private
specifier|final
name|int
name|scale
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|decimalColVector
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
name|FloatFromDecimalTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|fileType
operator|.
name|getPrecision
argument_list|()
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|fileType
operator|.
name|getScale
argument_list|()
expr_stmt|;
name|decimalTreeReader
operator|=
operator|new
name|DecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|decimalTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
operator|(
name|float
operator|)
name|decimalColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|decimalColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|decimalColVector
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|doubleColVector
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|decimalTreeReader
operator|.
name|nextVector
argument_list|(
name|decimalColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|decimalColVector
argument_list|,
name|doubleColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FloatFromStringGroupTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TreeReader
name|stringGroupTreeReader
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
name|FloatFromStringGroupTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|stringGroupTreeReader
operator|=
name|getStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|stringGroupTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|string
init|=
name|stringFromBytesColumnVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|)
decl_stmt|;
name|float
name|floatValue
init|=
name|parseFloatFromString
argument_list|(
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getIsParseError
argument_list|()
condition|)
block|{
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
name|floatValue
expr_stmt|;
block|}
else|else
block|{
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|doubleColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|doubleColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytesColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|bytesColVector
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|doubleColVector
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|stringGroupTreeReader
operator|.
name|nextVector
argument_list|(
name|bytesColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|bytesColVector
argument_list|,
name|doubleColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FloatFromTimestampTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TimestampTreeReader
name|timestampTreeReader
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
name|FloatFromTimestampTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|timestampTreeReader
operator|=
operator|new
name|TimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|timestampTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
operator|(
name|float
operator|)
name|TimestampUtils
operator|.
name|getDouble
argument_list|(
name|timestampColVector
operator|.
name|asScratchTimestamp
argument_list|(
name|elementNum
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|timestampColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|timestampColVector
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
name|doubleColVector
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|timestampTreeReader
operator|.
name|nextVector
argument_list|(
name|timestampColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|timestampColVector
argument_list|,
name|doubleColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleFromAnyIntegerTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|AnyIntegerTreeReader
name|anyIntegerAsLongTreeReader
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
name|DoubleFromAnyIntegerTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|anyIntegerAsLongTreeReader
operator|=
operator|new
name|AnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|anyIntegerAsLongTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|double
name|doubleValue
init|=
operator|(
name|double
operator|)
name|longColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|doubleValue
argument_list|)
condition|)
block|{
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
name|doubleValue
expr_stmt|;
block|}
else|else
block|{
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|doubleColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|doubleColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|longColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|longColVector
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|doubleColVector
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|anyIntegerAsLongTreeReader
operator|.
name|nextVector
argument_list|(
name|longColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|longColVector
argument_list|,
name|doubleColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleFromFloatTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|FloatTreeReader
name|floatTreeReader
decl_stmt|;
name|DoubleFromFloatTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|floatTreeReader
operator|=
operator|new
name|FloatTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|floatTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we get the DoubleColumnVector produced by float tree reader first, then iterate through
comment|// the elements and make double -> float -> string -> double conversion to preserve the
comment|// precision. When float tree reader reads float and assign it to double, java's widening
comment|// conversion adds more precision which will break all comparisons.
comment|// Example: float f = 74.72
comment|// double d = f ---> 74.72000122070312
comment|// Double.parseDouble(String.valueOf(f)) ---> 74.72
name|floatTreeReader
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|DoubleColumnVector
name|doubleColumnVector
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
decl_stmt|;
if|if
condition|(
name|doubleColumnVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|doubleColumnVector
operator|.
name|noNulls
operator|||
operator|!
name|doubleColumnVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
specifier|final
name|float
name|f
init|=
operator|(
name|float
operator|)
name|doubleColumnVector
operator|.
name|vector
index|[
literal|0
index|]
decl_stmt|;
name|doubleColumnVector
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|doubleColumnVector
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|float
name|f
init|=
operator|(
name|float
operator|)
name|doubleColumnVector
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|doubleColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|doubleColumnVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|float
name|f
init|=
operator|(
name|float
operator|)
name|doubleColumnVector
operator|.
name|vector
index|[
name|i
index|]
decl_stmt|;
name|doubleColumnVector
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleFromDecimalTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DecimalTreeReader
name|decimalTreeReader
decl_stmt|;
specifier|private
specifier|final
name|int
name|precision
decl_stmt|;
specifier|private
specifier|final
name|int
name|scale
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|decimalColVector
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
name|DoubleFromDecimalTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|fileType
operator|.
name|getPrecision
argument_list|()
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|fileType
operator|.
name|getScale
argument_list|()
expr_stmt|;
name|decimalTreeReader
operator|=
operator|new
name|DecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|decimalTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
name|decimalColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|decimalColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|decimalColVector
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|doubleColVector
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|decimalTreeReader
operator|.
name|nextVector
argument_list|(
name|decimalColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|decimalColVector
argument_list|,
name|doubleColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleFromStringGroupTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TreeReader
name|stringGroupTreeReader
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
name|DoubleFromStringGroupTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|stringGroupTreeReader
operator|=
name|getStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|stringGroupTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|string
init|=
name|stringFromBytesColumnVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|)
decl_stmt|;
name|double
name|doubleValue
init|=
name|parseDoubleFromString
argument_list|(
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getIsParseError
argument_list|()
condition|)
block|{
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
name|doubleValue
expr_stmt|;
block|}
else|else
block|{
name|doubleColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|doubleColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytesColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|bytesColVector
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|doubleColVector
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|stringGroupTreeReader
operator|.
name|nextVector
argument_list|(
name|bytesColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|bytesColVector
argument_list|,
name|doubleColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleFromTimestampTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TimestampTreeReader
name|timestampTreeReader
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
name|DoubleFromTimestampTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|timestampTreeReader
operator|=
operator|new
name|TimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|timestampTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
name|TimestampUtils
operator|.
name|getDouble
argument_list|(
name|timestampColVector
operator|.
name|asScratchTimestamp
argument_list|(
name|elementNum
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|timestampColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|timestampColVector
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
name|doubleColVector
operator|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|timestampTreeReader
operator|.
name|nextVector
argument_list|(
name|timestampColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|timestampColVector
argument_list|,
name|doubleColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DecimalFromAnyIntegerTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|AnyIntegerTreeReader
name|anyIntegerAsLongTreeReader
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|decimalColVector
decl_stmt|;
name|DecimalFromAnyIntegerTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|anyIntegerAsLongTreeReader
operator|=
operator|new
name|AnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|anyIntegerAsLongTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|long
name|longValue
init|=
name|longColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
name|HiveDecimalWritable
name|hiveDecimalWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|longValue
argument_list|)
decl_stmt|;
comment|// The DecimalColumnVector will enforce precision and scale and set the entry to null when out of bounds.
name|decimalColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
name|hiveDecimalWritable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|longColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|longColVector
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|decimalColVector
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|anyIntegerAsLongTreeReader
operator|.
name|nextVector
argument_list|(
name|longColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|longColVector
argument_list|,
name|decimalColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DecimalFromFloatTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|FloatTreeReader
name|floatTreeReader
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|decimalColVector
decl_stmt|;
name|DecimalFromFloatTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|floatTreeReader
operator|=
operator|new
name|FloatTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|floatTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|float
name|floatValue
init|=
operator|(
name|float
operator|)
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|floatValue
argument_list|)
condition|)
block|{
name|HiveDecimal
name|decimalValue
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|Float
operator|.
name|toString
argument_list|(
name|floatValue
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|decimalValue
operator|!=
literal|null
condition|)
block|{
comment|// The DecimalColumnVector will enforce precision and scale and set the entry to null when out of bounds.
name|decimalColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
name|decimalValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|decimalColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|decimalColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|decimalColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|decimalColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doubleColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|doubleColVector
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|decimalColVector
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|floatTreeReader
operator|.
name|nextVector
argument_list|(
name|doubleColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|doubleColVector
argument_list|,
name|decimalColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DecimalFromDoubleTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DoubleTreeReader
name|doubleTreeReader
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|decimalColVector
decl_stmt|;
name|DecimalFromDoubleTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|doubleTreeReader
operator|=
operator|new
name|DoubleTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|doubleTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveDecimal
name|value
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|decimalColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|decimalColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|decimalColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doubleColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|doubleColVector
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|decimalColVector
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|doubleTreeReader
operator|.
name|nextVector
argument_list|(
name|doubleColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|doubleColVector
argument_list|,
name|decimalColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DecimalFromStringGroupTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TreeReader
name|stringGroupTreeReader
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|decimalColVector
decl_stmt|;
name|DecimalFromStringGroupTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|stringGroupTreeReader
operator|=
name|getStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|stringGroupTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|string
init|=
name|stringFromBytesColumnVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|)
decl_stmt|;
name|HiveDecimal
name|value
init|=
name|parseDecimalFromString
argument_list|(
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// The DecimalColumnVector will enforce precision and scale and set the entry to null when out of bounds.
name|decimalColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|decimalColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|decimalColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytesColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|bytesColVector
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|decimalColVector
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|stringGroupTreeReader
operator|.
name|nextVector
argument_list|(
name|bytesColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|bytesColVector
argument_list|,
name|decimalColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DecimalFromTimestampTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TimestampTreeReader
name|timestampTreeReader
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|decimalColVector
decl_stmt|;
name|DecimalFromTimestampTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|timestampTreeReader
operator|=
operator|new
name|TimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|timestampTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|doubleValue
init|=
name|TimestampUtils
operator|.
name|getDouble
argument_list|(
name|timestampColVector
operator|.
name|asScratchTimestamp
argument_list|(
name|elementNum
argument_list|)
argument_list|)
decl_stmt|;
name|HiveDecimal
name|value
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|doubleValue
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// The DecimalColumnVector will enforce precision and scale and set the entry to null when out of bounds.
name|decimalColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|decimalColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|decimalColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|timestampColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|timestampColVector
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
name|decimalColVector
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|timestampTreeReader
operator|.
name|nextVector
argument_list|(
name|timestampColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|timestampColVector
argument_list|,
name|decimalColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DecimalFromDecimalTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DecimalTreeReader
name|decimalTreeReader
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|fileDecimalColVector
decl_stmt|;
specifier|private
name|int
name|filePrecision
decl_stmt|;
specifier|private
name|int
name|fileScale
decl_stmt|;
specifier|private
name|int
name|readerPrecision
decl_stmt|;
specifier|private
name|int
name|readerScale
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|decimalColVector
decl_stmt|;
name|DecimalFromDecimalTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|filePrecision
operator|=
name|fileType
operator|.
name|getPrecision
argument_list|()
expr_stmt|;
name|fileScale
operator|=
name|fileType
operator|.
name|getScale
argument_list|()
expr_stmt|;
name|readerPrecision
operator|=
name|readerType
operator|.
name|getPrecision
argument_list|()
expr_stmt|;
name|readerScale
operator|=
name|readerType
operator|.
name|getScale
argument_list|()
expr_stmt|;
name|decimalTreeReader
operator|=
operator|new
name|DecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|filePrecision
argument_list|,
name|fileScale
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|decimalTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveDecimalWritable
name|valueWritable
init|=
name|HiveDecimalWritable
operator|.
name|enforcePrecisionScale
argument_list|(
name|fileDecimalColVector
operator|.
name|vector
index|[
name|elementNum
index|]
argument_list|,
name|readerPrecision
argument_list|,
name|readerScale
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueWritable
operator|!=
literal|null
condition|)
block|{
name|decimalColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
name|valueWritable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|decimalColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|decimalColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileDecimalColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|fileDecimalColVector
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
name|filePrecision
argument_list|,
name|fileScale
argument_list|)
expr_stmt|;
name|decimalColVector
operator|=
operator|(
name|DecimalColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|decimalTreeReader
operator|.
name|nextVector
argument_list|(
name|fileDecimalColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|fileDecimalColVector
argument_list|,
name|decimalColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StringGroupFromAnyIntegerTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|AnyIntegerTreeReader
name|anyIntegerAsLongTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
name|StringGroupFromAnyIntegerTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|anyIntegerAsLongTreeReader
operator|=
operator|new
name|AnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|anyIntegerAsLongTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|long
name|longValue
init|=
name|longColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
name|String
name|string
init|=
name|anyIntegerAsLongTreeReader
operator|.
name|getString
argument_list|(
name|longValue
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|string
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assignStringGroupVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|,
name|readerType
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|longColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|longColVector
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|bytesColVector
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|anyIntegerAsLongTreeReader
operator|.
name|nextVector
argument_list|(
name|longColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|longColVector
argument_list|,
name|bytesColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StringGroupFromFloatTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|FloatTreeReader
name|floatTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
name|StringGroupFromFloatTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|floatTreeReader
operator|=
operator|new
name|FloatTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|floatTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|float
name|floatValue
init|=
operator|(
name|float
operator|)
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|Float
operator|.
name|isNaN
argument_list|(
name|floatValue
argument_list|)
condition|)
block|{
name|String
name|string
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|floatValue
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|string
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assignStringGroupVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|,
name|readerType
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytesColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|bytesColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doubleColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|doubleColVector
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|bytesColVector
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|floatTreeReader
operator|.
name|nextVector
argument_list|(
name|doubleColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|doubleColVector
argument_list|,
name|bytesColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StringGroupFromDoubleTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DoubleTreeReader
name|doubleTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
name|StringGroupFromDoubleTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|doubleTreeReader
operator|=
operator|new
name|DoubleTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|doubleTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|double
name|doubleValue
init|=
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|doubleValue
argument_list|)
condition|)
block|{
name|String
name|string
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|doubleValue
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|string
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assignStringGroupVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|,
name|readerType
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytesColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|bytesColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doubleColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|doubleColVector
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|bytesColVector
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|doubleTreeReader
operator|.
name|nextVector
argument_list|(
name|doubleColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|doubleColVector
argument_list|,
name|bytesColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StringGroupFromDecimalTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DecimalTreeReader
name|decimalTreeReader
decl_stmt|;
specifier|private
name|int
name|precision
decl_stmt|;
specifier|private
name|int
name|scale
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|decimalColVector
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
name|StringGroupFromDecimalTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|fileType
operator|.
name|getPrecision
argument_list|()
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|fileType
operator|.
name|getScale
argument_list|()
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|decimalTreeReader
operator|=
operator|new
name|DecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|decimalTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|String
name|string
init|=
name|decimalColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|string
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assignStringGroupVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|,
name|readerType
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|decimalColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|decimalColVector
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|bytesColVector
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|decimalTreeReader
operator|.
name|nextVector
argument_list|(
name|decimalColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|decimalColVector
argument_list|,
name|bytesColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StringGroupFromTimestampTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TimestampTreeReader
name|timestampTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
name|StringGroupFromTimestampTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|timestampTreeReader
operator|=
operator|new
name|TimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|timestampTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|string
init|=
name|timestampColVector
operator|.
name|asScratchTimestamp
argument_list|(
name|elementNum
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|string
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assignStringGroupVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|,
name|readerType
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|timestampColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|timestampColVector
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
name|bytesColVector
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|timestampTreeReader
operator|.
name|nextVector
argument_list|(
name|timestampColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|timestampColVector
argument_list|,
name|bytesColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StringGroupFromDateTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DateTreeReader
name|dateTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
specifier|private
name|Date
name|date
decl_stmt|;
name|StringGroupFromDateTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|dateTreeReader
operator|=
operator|new
name|DateTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|dateTreeReader
argument_list|)
expr_stmt|;
name|date
operator|=
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|date
operator|.
name|setTime
argument_list|(
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|longColVector
operator|.
name|vector
index|[
name|elementNum
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|string
init|=
name|date
operator|.
name|toString
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|string
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|assignStringGroupVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|,
name|readerType
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|longColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|longColVector
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|bytesColVector
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|dateTreeReader
operator|.
name|nextVector
argument_list|(
name|longColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|longColVector
argument_list|,
name|bytesColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StringGroupFromStringGroupTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TreeReader
name|stringGroupTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
name|StringGroupFromStringGroupTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|stringGroupTreeReader
operator|=
name|getStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|stringGroupTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|stringGroupTreeReader
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|resultColVector
init|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
decl_stmt|;
if|if
condition|(
name|resultColVector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|resultColVector
operator|.
name|noNulls
operator|||
operator|!
name|resultColVector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|convertStringGroupVectorElement
argument_list|(
name|resultColVector
argument_list|,
literal|0
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remains null.
block|}
block|}
elseif|else
if|if
condition|(
name|resultColVector
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|convertStringGroupVectorElement
argument_list|(
name|resultColVector
argument_list|,
name|i
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|resultColVector
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|convertStringGroupVectorElement
argument_list|(
name|resultColVector
argument_list|,
name|i
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remains null.
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|StringGroupFromBinaryTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|BinaryTreeReader
name|binaryTreeReader
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerType
decl_stmt|;
specifier|private
name|BytesColumnVector
name|inBytesColVector
decl_stmt|;
specifier|private
name|BytesColumnVector
name|outBytesColVector
decl_stmt|;
name|StringGroupFromBinaryTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|readerType
operator|=
name|readerType
expr_stmt|;
name|binaryTreeReader
operator|=
operator|new
name|BinaryTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|binaryTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|inBytesColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
name|int
name|start
init|=
name|inBytesColVector
operator|.
name|start
index|[
name|elementNum
index|]
decl_stmt|;
name|int
name|length
init|=
name|inBytesColVector
operator|.
name|length
index|[
name|elementNum
index|]
decl_stmt|;
name|byte
index|[]
name|string
init|=
operator|new
name|byte
index|[
name|length
operator|==
literal|0
condition|?
literal|0
else|:
literal|3
operator|*
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|string
operator|.
name|length
condition|;
name|p
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|0
condition|)
block|{
name|string
index|[
name|p
operator|++
index|]
operator|=
literal|' '
expr_stmt|;
block|}
name|int
name|num
init|=
literal|0xff
operator|&
name|bytes
index|[
name|start
operator|++
index|]
decl_stmt|;
name|int
name|digit
init|=
name|num
operator|/
literal|16
decl_stmt|;
name|string
index|[
name|p
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|digit
operator|)
operator|+
operator|(
name|digit
operator|<
literal|10
condition|?
literal|'0'
else|:
literal|'a'
operator|-
literal|10
operator|)
argument_list|)
expr_stmt|;
name|digit
operator|=
name|num
operator|%
literal|16
expr_stmt|;
name|string
index|[
name|p
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|digit
operator|)
operator|+
operator|(
name|digit
operator|<
literal|10
condition|?
literal|'0'
else|:
literal|'a'
operator|-
literal|10
operator|)
argument_list|)
expr_stmt|;
block|}
name|assignStringGroupVectorEntry
argument_list|(
name|outBytesColVector
argument_list|,
name|elementNum
argument_list|,
name|readerType
argument_list|,
name|string
argument_list|,
literal|0
argument_list|,
name|string
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|inBytesColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|inBytesColVector
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|outBytesColVector
operator|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|binaryTreeReader
operator|.
name|nextVector
argument_list|(
name|inBytesColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|inBytesColVector
argument_list|,
name|outBytesColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimestampFromAnyIntegerTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|AnyIntegerTreeReader
name|anyIntegerAsLongTreeReader
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
name|TimestampFromAnyIntegerTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|anyIntegerAsLongTreeReader
operator|=
operator|new
name|AnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|anyIntegerAsLongTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|long
name|longValue
init|=
name|longColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
comment|// UNDONE: What does the boolean setting need to be?
name|timestampColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|longValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|longColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|longColVector
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|timestampColVector
operator|=
operator|(
name|TimestampColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|anyIntegerAsLongTreeReader
operator|.
name|nextVector
argument_list|(
name|longColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|longColVector
argument_list|,
name|timestampColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimestampFromFloatTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|FloatTreeReader
name|floatTreeReader
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
name|TimestampFromFloatTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|floatTreeReader
operator|=
operator|new
name|FloatTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|floatTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|float
name|floatValue
init|=
operator|(
name|float
operator|)
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
name|Timestamp
name|timestampValue
init|=
name|TimestampUtils
operator|.
name|doubleToTimestamp
argument_list|(
name|floatValue
argument_list|)
decl_stmt|;
comment|// The TimestampColumnVector will set the entry to null when a null timestamp is passed in.
name|timestampColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
name|timestampValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doubleColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|doubleColVector
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|timestampColVector
operator|=
operator|(
name|TimestampColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|floatTreeReader
operator|.
name|nextVector
argument_list|(
name|doubleColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|doubleColVector
argument_list|,
name|timestampColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimestampFromDoubleTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DoubleTreeReader
name|doubleTreeReader
decl_stmt|;
specifier|private
name|DoubleColumnVector
name|doubleColVector
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
name|TimestampFromDoubleTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|doubleTreeReader
operator|=
operator|new
name|DoubleTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|doubleTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|double
name|doubleValue
init|=
name|doubleColVector
operator|.
name|vector
index|[
name|elementNum
index|]
decl_stmt|;
name|Timestamp
name|timestampValue
init|=
name|TimestampUtils
operator|.
name|doubleToTimestamp
argument_list|(
name|doubleValue
argument_list|)
decl_stmt|;
comment|// The TimestampColumnVector will set the entry to null when a null timestamp is passed in.
name|timestampColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
name|timestampValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doubleColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|doubleColVector
operator|=
operator|new
name|DoubleColumnVector
argument_list|()
expr_stmt|;
name|timestampColVector
operator|=
operator|(
name|TimestampColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|doubleTreeReader
operator|.
name|nextVector
argument_list|(
name|doubleColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|doubleColVector
argument_list|,
name|timestampColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimestampFromDecimalTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DecimalTreeReader
name|decimalTreeReader
decl_stmt|;
specifier|private
specifier|final
name|int
name|precision
decl_stmt|;
specifier|private
specifier|final
name|int
name|scale
decl_stmt|;
specifier|private
name|DecimalColumnVector
name|decimalColVector
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
name|TimestampFromDecimalTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|fileType
operator|.
name|getPrecision
argument_list|()
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|fileType
operator|.
name|getScale
argument_list|()
expr_stmt|;
name|decimalTreeReader
operator|=
operator|new
name|DecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|decimalTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|Timestamp
name|timestampValue
init|=
name|TimestampUtils
operator|.
name|decimalToTimestamp
argument_list|(
name|decimalColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
decl_stmt|;
comment|// The TimestampColumnVector will set the entry to null when a null timestamp is passed in.
name|timestampColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
name|timestampValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|decimalColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|decimalColVector
operator|=
operator|new
name|DecimalColumnVector
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|timestampColVector
operator|=
operator|(
name|TimestampColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|decimalTreeReader
operator|.
name|nextVector
argument_list|(
name|decimalColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|decimalColVector
argument_list|,
name|timestampColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimestampFromStringGroupTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TreeReader
name|stringGroupTreeReader
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
name|TimestampFromStringGroupTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|stringGroupTreeReader
operator|=
name|getStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|stringGroupTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|stringValue
init|=
name|stringFromBytesColumnVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|)
decl_stmt|;
name|Timestamp
name|timestampValue
init|=
name|parseTimestampFromString
argument_list|(
name|stringValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestampValue
operator|!=
literal|null
condition|)
block|{
name|timestampColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
name|timestampValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timestampColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|timestampColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytesColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|bytesColVector
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|timestampColVector
operator|=
operator|(
name|TimestampColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|stringGroupTreeReader
operator|.
name|nextVector
argument_list|(
name|bytesColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|bytesColVector
argument_list|,
name|timestampColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimestampFromDateTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|DateTreeReader
name|dateTreeReader
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
name|TimestampFromDateTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|dateTreeReader
operator|=
operator|new
name|DateTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|dateTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|long
name|millis
init|=
name|DateWritable
operator|.
name|daysToMillis
argument_list|(
operator|(
name|int
operator|)
name|longColVector
operator|.
name|vector
index|[
name|elementNum
index|]
argument_list|)
decl_stmt|;
name|timestampColVector
operator|.
name|set
argument_list|(
name|elementNum
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|millis
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|longColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|longColVector
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|timestampColVector
operator|=
operator|(
name|TimestampColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|dateTreeReader
operator|.
name|nextVector
argument_list|(
name|longColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|longColVector
argument_list|,
name|timestampColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DateFromStringGroupTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TreeReader
name|stringGroupTreeReader
decl_stmt|;
specifier|private
name|BytesColumnVector
name|bytesColVector
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
name|DateFromStringGroupTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|stringGroupTreeReader
operator|=
name|getStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|stringGroupTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|stringValue
init|=
name|stringFromBytesColumnVectorEntry
argument_list|(
name|bytesColVector
argument_list|,
name|elementNum
argument_list|)
decl_stmt|;
name|Date
name|dateValue
init|=
name|parseDateFromString
argument_list|(
name|stringValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|dateValue
operator|!=
literal|null
condition|)
block|{
name|longColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
name|DateWritable
operator|.
name|dateToDays
argument_list|(
name|dateValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|longColVector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|longColVector
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytesColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|bytesColVector
operator|=
operator|new
name|BytesColumnVector
argument_list|()
expr_stmt|;
name|longColVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|stringGroupTreeReader
operator|.
name|nextVector
argument_list|(
name|bytesColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|bytesColVector
argument_list|,
name|longColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DateFromTimestampTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TimestampTreeReader
name|timestampTreeReader
decl_stmt|;
specifier|private
name|TimestampColumnVector
name|timestampColVector
decl_stmt|;
specifier|private
name|LongColumnVector
name|longColVector
decl_stmt|;
name|DateFromTimestampTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|timestampTreeReader
operator|=
operator|new
name|TimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|timestampTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConvertVectorElement
parameter_list|(
name|int
name|elementNum
parameter_list|)
throws|throws
name|IOException
block|{
name|Date
name|dateValue
init|=
name|DateWritable
operator|.
name|timeToDate
argument_list|(
name|TimestampUtils
operator|.
name|millisToSeconds
argument_list|(
name|timestampColVector
operator|.
name|asScratchTimestamp
argument_list|(
name|elementNum
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|longColVector
operator|.
name|vector
index|[
name|elementNum
index|]
operator|=
name|DateWritable
operator|.
name|dateToDays
argument_list|(
name|dateValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|timestampColVector
operator|==
literal|null
condition|)
block|{
comment|// Allocate column vector for file; cast column vector for reader.
name|timestampColVector
operator|=
operator|new
name|TimestampColumnVector
argument_list|()
expr_stmt|;
name|longColVector
operator|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
expr_stmt|;
block|}
comment|// Read present/isNull stream
name|timestampTreeReader
operator|.
name|nextVector
argument_list|(
name|timestampColVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|convertVector
argument_list|(
name|timestampColVector
argument_list|,
name|longColVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BinaryFromStringGroupTreeReader
extends|extends
name|ConvertTreeReader
block|{
specifier|private
name|TreeReader
name|stringGroupTreeReader
decl_stmt|;
name|BinaryFromStringGroupTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|stringGroupTreeReader
operator|=
name|getStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
expr_stmt|;
name|setConvertTreeReader
argument_list|(
name|stringGroupTreeReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createAnyIntegerConvertTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// CONVERT from (BOOLEAN, BYTE, SHORT, INT, LONG) to schema type.
comment|//
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
if|if
condition|(
name|fileType
operator|.
name|getCategory
argument_list|()
operator|==
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No conversion of type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
operator|+
literal|" to self needed"
argument_list|)
throw|;
block|}
return|return
operator|new
name|AnyIntegerFromAnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatFromAnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleFromAnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalFromAnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
operator|new
name|StringGroupFromAnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampFromAnyIntegerTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
comment|// Not currently supported conversion(s):
case|case
name|BINARY
case|:
case|case
name|DATE
case|:
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createFloatConvertTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// CONVERT from FLOAT to schema type.
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
return|return
operator|new
name|AnyIntegerFromFloatTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|FLOAT
case|:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No conversion of type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
operator|+
literal|" to self needed"
argument_list|)
throw|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleFromFloatTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalFromFloatTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
operator|new
name|StringGroupFromFloatTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampFromFloatTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
comment|// Not currently supported conversion(s):
case|case
name|BINARY
case|:
case|case
name|DATE
case|:
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createDoubleConvertTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// CONVERT from DOUBLE to schema type.
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
return|return
operator|new
name|AnyIntegerFromDoubleTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatFromDoubleTreeReader
argument_list|(
name|columnId
argument_list|)
return|;
case|case
name|DOUBLE
case|:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No conversion of type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
operator|+
literal|" to self needed"
argument_list|)
throw|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalFromDoubleTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
operator|new
name|StringGroupFromDoubleTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampFromDoubleTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
comment|// Not currently supported conversion(s):
case|case
name|BINARY
case|:
case|case
name|DATE
case|:
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createDecimalConvertTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// CONVERT from DECIMAL to schema type.
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
return|return
operator|new
name|AnyIntegerFromDecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatFromDecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleFromDecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
operator|new
name|StringGroupFromDecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampFromDecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalFromDecimalTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
comment|// Not currently supported conversion(s):
case|case
name|BINARY
case|:
case|case
name|DATE
case|:
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createStringConvertTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// CONVERT from STRING to schema type.
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
return|return
operator|new
name|AnyIntegerFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|new
name|StringGroupFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
operator|new
name|StringGroupFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|STRING
case|:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No conversion of type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
operator|+
literal|" to self needed"
argument_list|)
throw|;
case|case
name|BINARY
case|:
return|return
operator|new
name|BinaryFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
comment|// Not currently supported conversion(s):
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createCharConvertTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// CONVERT from CHAR to schema type.
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
return|return
operator|new
name|AnyIntegerFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
operator|new
name|StringGroupFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
operator|new
name|StringGroupFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|new
name|StringGroupFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
operator|new
name|BinaryFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
comment|// Not currently supported conversion(s):
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createVarcharConvertTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// CONVERT from VARCHAR to schema type.
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
return|return
operator|new
name|AnyIntegerFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
operator|new
name|StringGroupFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|new
name|StringGroupFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
operator|new
name|StringGroupFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
operator|new
name|BinaryFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateFromStringGroupTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|)
return|;
comment|// Not currently supported conversion(s):
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createTimestampConvertTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// CONVERT from TIMESTAMP to schema type.
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
return|return
operator|new
name|AnyIntegerFromTimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatFromTimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleFromTimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalFromTimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
operator|new
name|StringGroupFromTimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No conversion of type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
operator|+
literal|" to self needed"
argument_list|)
throw|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateFromTimestampTreeReader
argument_list|(
name|columnId
argument_list|,
name|skipCorrupt
argument_list|)
return|;
comment|// Not currently supported conversion(s):
case|case
name|BINARY
case|:
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createDateConvertTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// CONVERT from DATE to schema type.
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
operator|new
name|StringGroupFromDateTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampFromDateTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DATE
case|:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No conversion of type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
operator|+
literal|" to self needed"
argument_list|)
throw|;
comment|// Not currently supported conversion(s):
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|FLOAT
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|DOUBLE
case|:
case|case
name|BINARY
case|:
case|case
name|DECIMAL
case|:
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TreeReader
name|createBinaryConvertTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
comment|// CONVERT from DATE to schema type.
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
operator|new
name|StringGroupFromBinaryTreeReader
argument_list|(
name|columnId
argument_list|,
name|readerType
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|BINARY
case|:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No conversion of type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
operator|+
literal|" to self needed"
argument_list|)
throw|;
comment|// Not currently supported conversion(s):
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|FLOAT
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|DOUBLE
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|DECIMAL
case|:
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|readerType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * (Rules from Hive's PrimitiveObjectInspectorUtils conversion)    *    * To BOOLEAN, BYTE, SHORT, INT, LONG:    *   Convert from (BOOLEAN, BYTE, SHORT, INT, LONG) with down cast if necessary.    *   Convert from (FLOAT, DOUBLE) using type cast to long and down cast if necessary.    *   Convert from DECIMAL from longValue and down cast if necessary.    *   Convert from STRING using LazyLong.parseLong and down cast if necessary.    *   Convert from (CHAR, VARCHAR) from Integer.parseLong and down cast if necessary.    *   Convert from TIMESTAMP using timestamp getSeconds and down cast if necessary.    *    *   AnyIntegerFromAnyIntegerTreeReader (written)    *   AnyIntegerFromFloatTreeReader (written)    *   AnyIntegerFromDoubleTreeReader (written)    *   AnyIntegerFromDecimalTreeReader (written)    *   AnyIntegerFromStringGroupTreeReader (written)    *   AnyIntegerFromTimestampTreeReader (written)    *    * To FLOAT/DOUBLE:    *   Convert from (BOOLEAN, BYTE, SHORT, INT, LONG) using cast    *   Convert from FLOAT using cast    *   Convert from DECIMAL using getDouble    *   Convert from (STRING, CHAR, VARCHAR) using Double.parseDouble    *   Convert from TIMESTAMP using timestamp getDouble    *    *   FloatFromAnyIntegerTreeReader (existing)    *   FloatFromDoubleTreeReader (written)    *   FloatFromDecimalTreeReader (written)    *   FloatFromStringGroupTreeReader (written)    *    *   DoubleFromAnyIntegerTreeReader (existing)    *   DoubleFromFloatTreeReader (existing)    *   DoubleFromDecimalTreeReader (written)    *   DoubleFromStringGroupTreeReader (written)    *    * To DECIMAL:    *   Convert from (BOOLEAN, BYTE, SHORT, INT, LONG) using to HiveDecimal.create()    *   Convert from (FLOAT, DOUBLE) using to HiveDecimal.create(string value)    *   Convert from (STRING, CHAR, VARCHAR) using HiveDecimal.create(string value)    *   Convert from TIMESTAMP using HiveDecimal.create(string value of timestamp getDouble)    *    *   DecimalFromAnyIntegerTreeReader (existing)    *   DecimalFromFloatTreeReader (existing)    *   DecimalFromDoubleTreeReader (existing)    *   DecimalFromStringGroupTreeReader (written)    *    * To STRING, CHAR, VARCHAR:    *   Convert from (BOOLEAN, BYTE, SHORT, INT, LONG) using to string conversion    *   Convert from (FLOAT, DOUBLE) using to string conversion    *   Convert from DECIMAL using HiveDecimal.toString    *   Convert from CHAR by stripping pads    *   Convert from VARCHAR with value    *   Convert from TIMESTAMP using Timestamp.toString    *   Convert from DATE using Date.toString    *   Convert from BINARY using Text.decode    *    *   StringGroupFromAnyIntegerTreeReader (written)    *   StringGroupFromFloatTreeReader (written)    *   StringGroupFromDoubleTreeReader (written)    *   StringGroupFromDecimalTreeReader (written)    *    *   String from Char/Varchar conversion    *   Char from String/Varchar conversion    *   Varchar from String/Char conversion    *    *   StringGroupFromTimestampTreeReader (written)    *   StringGroupFromDateTreeReader (written)    *   StringGroupFromBinaryTreeReader *****    *    * To TIMESTAMP:    *   Convert from (BOOLEAN, BYTE, SHORT, INT, LONG) using TimestampWritable.longToTimestamp    *   Convert from (FLOAT, DOUBLE) using TimestampWritable.doubleToTimestamp    *   Convert from DECIMAL using TimestampWritable.decimalToTimestamp    *   Convert from (STRING, CHAR, VARCHAR) using string conversion    *   Or, from DATE    *    *   TimestampFromAnyIntegerTreeReader (written)    *   TimestampFromFloatTreeReader (written)    *   TimestampFromDoubleTreeReader (written)    *   TimestampFromDecimalTreeeReader (written)    *   TimestampFromStringGroupTreeReader (written)    *   TimestampFromDateTreeReader    *    *    * To DATE:    *   Convert from (STRING, CHAR, VARCHAR) using string conversion.    *   Or, from TIMESTAMP.    *    *  DateFromStringGroupTreeReader (written)    *  DateFromTimestampTreeReader (written)    *    * To BINARY:    *   Convert from (STRING, CHAR, VARCHAR) using getBinaryFromText    *    *  BinaryFromStringGroupTreeReader (written)    *    * (Notes from StructConverter)    *    * To STRUCT:    *   Input must be data type STRUCT    *   minFields = Math.min(numSourceFields, numTargetFields)    *   Convert those fields    *   Extra targetFields --> NULL    *    * (Notes from ListConverter)    *    * To LIST:    *   Input must be data type LIST    *   Convert elements    *    * (Notes from MapConverter)    *    * To MAP:    *   Input must be data type MAP    *   Convert keys and values    *    * (Notes from UnionConverter)    *    * To UNION:    *   Input must be data type UNION    *   Convert value for tag    *    * @param readerType    * @param evolution    * @param included    * @param skipCorrupt    * @return    * @throws IOException    */
specifier|public
specifier|static
name|TreeReader
name|createConvertTreeReader
parameter_list|(
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|columnId
init|=
name|readerType
operator|.
name|getId
argument_list|()
decl_stmt|;
name|TypeDescription
name|fileType
init|=
name|evolution
operator|.
name|getFileType
argument_list|(
name|readerType
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|fileType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
return|return
name|createAnyIntegerConvertTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|createFloatConvertTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|createDoubleConvertTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
name|createDecimalConvertTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|createStringConvertTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
name|createCharConvertTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
name|createVarcharConvertTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|createTimestampConvertTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|createDateConvertTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
name|createBinaryConvertTreeReader
argument_list|(
name|columnId
argument_list|,
name|fileType
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
comment|// UNDONE: Complex conversions...
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|fileType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|canConvert
parameter_list|(
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
name|Category
name|readerTypeCategory
init|=
name|readerType
operator|.
name|getCategory
argument_list|()
decl_stmt|;
comment|// We don't convert from any to complex.
switch|switch
condition|(
name|readerTypeCategory
condition|)
block|{
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
return|return
literal|false
return|;
default|default:
comment|// Fall through.
block|}
comment|// Now look for the few cases we don't convert from
switch|switch
condition|(
name|fileType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|DECIMAL
case|:
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
comment|// Not currently supported conversion(s):
case|case
name|BINARY
case|:
case|case
name|DATE
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
comment|// Not currently supported conversion(s):
comment|// (None)
default|default:
return|return
literal|true
return|;
block|}
case|case
name|TIMESTAMP
case|:
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
comment|// Not currently supported conversion(s):
case|case
name|BINARY
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
case|case
name|DATE
case|:
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
comment|// Not currently supported conversion(s):
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|FLOAT
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|DOUBLE
case|:
case|case
name|BINARY
case|:
case|case
name|DECIMAL
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
case|case
name|BINARY
case|:
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
comment|// Not currently supported conversion(s):
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|FLOAT
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|DOUBLE
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|DECIMAL
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
comment|// We don't convert from complex to any.
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
return|return
literal|false
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|fileType
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

