begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * A class that is a growable array of bytes. Growth is managed in terms of  * chunks that are allocated when needed.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DynamicByteArray
block|{
specifier|static
specifier|final
name|int
name|DEFAULT_CHUNKSIZE
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_CHUNKS
init|=
literal|128
decl_stmt|;
specifier|private
specifier|final
name|int
name|chunkSize
decl_stmt|;
comment|// our allocation sizes
specifier|private
name|byte
index|[]
index|[]
name|data
decl_stmt|;
comment|// the real data
specifier|private
name|int
name|length
decl_stmt|;
comment|// max set element index +1
specifier|private
name|int
name|initializedChunks
init|=
literal|0
decl_stmt|;
comment|// the number of chunks created
specifier|public
name|DynamicByteArray
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_NUM_CHUNKS
argument_list|,
name|DEFAULT_CHUNKSIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DynamicByteArray
parameter_list|(
name|int
name|numChunks
parameter_list|,
name|int
name|chunkSize
parameter_list|)
block|{
if|if
condition|(
name|chunkSize
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad chunksize"
argument_list|)
throw|;
block|}
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|numChunks
index|]
index|[]
expr_stmt|;
block|}
comment|/**    * Ensure that the given index is valid.    */
specifier|private
name|void
name|grow
parameter_list|(
name|int
name|chunkIndex
parameter_list|)
block|{
if|if
condition|(
name|chunkIndex
operator|>=
name|initializedChunks
condition|)
block|{
if|if
condition|(
name|chunkIndex
operator|>=
name|data
operator|.
name|length
condition|)
block|{
name|int
name|newSize
init|=
name|Math
operator|.
name|max
argument_list|(
name|chunkIndex
operator|+
literal|1
argument_list|,
literal|2
operator|*
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|newChunk
init|=
operator|new
name|byte
index|[
name|newSize
index|]
index|[]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|newChunk
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|data
operator|=
name|newChunk
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|initializedChunks
init|;
name|i
operator|<=
name|chunkIndex
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[
name|chunkSize
index|]
expr_stmt|;
block|}
name|initializedChunks
operator|=
name|chunkIndex
operator|+
literal|1
expr_stmt|;
block|}
block|}
specifier|public
name|byte
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index "
operator|+
name|index
operator|+
literal|" is outside of 0.."
operator|+
operator|(
name|length
operator|-
literal|1
operator|)
argument_list|)
throw|;
block|}
name|int
name|i
init|=
name|index
operator|/
name|chunkSize
decl_stmt|;
name|int
name|j
init|=
name|index
operator|%
name|chunkSize
decl_stmt|;
return|return
name|data
index|[
name|i
index|]
index|[
name|j
index|]
return|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|byte
name|value
parameter_list|)
block|{
name|int
name|i
init|=
name|index
operator|/
name|chunkSize
decl_stmt|;
name|int
name|j
init|=
name|index
operator|%
name|chunkSize
decl_stmt|;
name|grow
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
name|length
condition|)
block|{
name|length
operator|=
name|index
operator|+
literal|1
expr_stmt|;
block|}
name|data
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|int
name|add
parameter_list|(
name|byte
name|value
parameter_list|)
block|{
name|int
name|i
init|=
name|length
operator|/
name|chunkSize
decl_stmt|;
name|int
name|j
init|=
name|length
operator|%
name|chunkSize
decl_stmt|;
name|grow
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|data
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|value
expr_stmt|;
name|int
name|result
init|=
name|length
decl_stmt|;
name|length
operator|+=
literal|1
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Copy a slice of a byte array into our buffer.    * @param value the array to copy from    * @param valueOffset the first location to copy from value    * @param valueLength the number of bytes to copy from value    * @return the offset of the start of the value    */
specifier|public
name|int
name|add
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|valueOffset
parameter_list|,
name|int
name|valueLength
parameter_list|)
block|{
name|int
name|i
init|=
name|length
operator|/
name|chunkSize
decl_stmt|;
name|int
name|j
init|=
name|length
operator|%
name|chunkSize
decl_stmt|;
name|grow
argument_list|(
operator|(
name|length
operator|+
name|valueLength
operator|)
operator|/
name|chunkSize
argument_list|)
expr_stmt|;
name|int
name|remaining
init|=
name|valueLength
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|size
init|=
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|chunkSize
operator|-
name|j
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
name|valueOffset
argument_list|,
name|data
index|[
name|i
index|]
argument_list|,
name|j
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|remaining
operator|-=
name|size
expr_stmt|;
name|valueOffset
operator|+=
name|size
expr_stmt|;
name|i
operator|+=
literal|1
expr_stmt|;
name|j
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|result
init|=
name|length
decl_stmt|;
name|length
operator|+=
name|valueLength
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Read the entire stream into this array.    * @param in the stream to read from    * @throws IOException    */
specifier|public
name|void
name|readAll
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|currentChunk
init|=
name|length
operator|/
name|chunkSize
decl_stmt|;
name|int
name|currentOffset
init|=
name|length
operator|%
name|chunkSize
decl_stmt|;
name|grow
argument_list|(
name|currentChunk
argument_list|)
expr_stmt|;
name|int
name|currentLength
init|=
name|in
operator|.
name|read
argument_list|(
name|data
index|[
name|currentChunk
index|]
argument_list|,
name|currentOffset
argument_list|,
name|chunkSize
operator|-
name|currentOffset
argument_list|)
decl_stmt|;
while|while
condition|(
name|currentLength
operator|>
literal|0
condition|)
block|{
name|length
operator|+=
name|currentLength
expr_stmt|;
name|currentOffset
operator|=
name|length
operator|%
name|chunkSize
expr_stmt|;
if|if
condition|(
name|currentOffset
operator|==
literal|0
condition|)
block|{
name|currentChunk
operator|=
name|length
operator|/
name|chunkSize
expr_stmt|;
name|grow
argument_list|(
name|currentChunk
argument_list|)
expr_stmt|;
block|}
name|currentLength
operator|=
name|in
operator|.
name|read
argument_list|(
name|data
index|[
name|currentChunk
index|]
argument_list|,
name|currentOffset
argument_list|,
name|chunkSize
operator|-
name|currentOffset
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Byte compare a set of bytes against the bytes in this dynamic array.    * @param other source of the other bytes    * @param otherOffset start offset in the other array    * @param otherLength number of bytes in the other array    * @param ourOffset the offset in our array    * @param ourLength the number of bytes in our array    * @return negative for less, 0 for equal, positive for greater    */
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|other
parameter_list|,
name|int
name|otherOffset
parameter_list|,
name|int
name|otherLength
parameter_list|,
name|int
name|ourOffset
parameter_list|,
name|int
name|ourLength
parameter_list|)
block|{
name|int
name|currentChunk
init|=
name|ourOffset
operator|/
name|chunkSize
decl_stmt|;
name|int
name|currentOffset
init|=
name|ourOffset
operator|%
name|chunkSize
decl_stmt|;
name|int
name|maxLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|otherLength
argument_list|,
name|ourLength
argument_list|)
decl_stmt|;
while|while
condition|(
name|maxLength
operator|>
literal|0
operator|&&
name|other
index|[
name|otherOffset
index|]
operator|==
name|data
index|[
name|currentChunk
index|]
index|[
name|currentOffset
index|]
condition|)
block|{
name|otherOffset
operator|+=
literal|1
expr_stmt|;
name|currentOffset
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|currentOffset
operator|==
name|chunkSize
condition|)
block|{
name|currentChunk
operator|+=
literal|1
expr_stmt|;
name|currentOffset
operator|=
literal|0
expr_stmt|;
block|}
name|maxLength
operator|-=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|maxLength
operator|==
literal|0
condition|)
block|{
return|return
name|otherLength
operator|-
name|ourLength
return|;
block|}
name|int
name|otherByte
init|=
literal|0xff
operator|&
name|other
index|[
name|otherOffset
index|]
decl_stmt|;
name|int
name|ourByte
init|=
literal|0xff
operator|&
name|data
index|[
name|currentChunk
index|]
index|[
name|currentOffset
index|]
decl_stmt|;
return|return
name|otherByte
operator|>
name|ourByte
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
comment|/**    * Get the size of the array.    * @return the number of bytes in the array    */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**    * Clear the array to its original pristine state.    */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|length
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|initializedChunks
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * Set a text value from the bytes in this dynamic array.    * @param result the value to set    * @param offset the start of the bytes to copy    * @param length the number of bytes to copy    */
specifier|public
name|void
name|setText
parameter_list|(
name|Text
name|result
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|currentChunk
init|=
name|offset
operator|/
name|chunkSize
decl_stmt|;
name|int
name|currentOffset
init|=
name|offset
operator|%
name|chunkSize
decl_stmt|;
name|int
name|currentLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|chunkSize
operator|-
name|currentOffset
argument_list|)
decl_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|data
index|[
name|currentChunk
index|]
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
name|length
operator|-=
name|currentLength
expr_stmt|;
name|currentChunk
operator|+=
literal|1
expr_stmt|;
name|currentOffset
operator|=
literal|0
expr_stmt|;
name|currentLength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|chunkSize
operator|-
name|currentOffset
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Write out a range of this dynamic array to an output stream.    * @param out the stream to write to    * @param offset the first offset to write    * @param length the number of bytes to write    * @throws IOException    */
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|currentChunk
init|=
name|offset
operator|/
name|chunkSize
decl_stmt|;
name|int
name|currentOffset
init|=
name|offset
operator|%
name|chunkSize
decl_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|currentLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|chunkSize
operator|-
name|currentOffset
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
index|[
name|currentChunk
index|]
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
name|length
operator|-=
name|currentLength
expr_stmt|;
name|currentChunk
operator|+=
literal|1
expr_stmt|;
name|currentOffset
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
operator|*
literal|3
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|int
name|l
init|=
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setByteBuffer
parameter_list|(
name|ByteBuffer
name|result
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|currentChunk
init|=
name|offset
operator|/
name|chunkSize
decl_stmt|;
name|int
name|currentOffset
init|=
name|offset
operator|%
name|chunkSize
decl_stmt|;
name|int
name|currentLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|chunkSize
operator|-
name|currentOffset
argument_list|)
decl_stmt|;
while|while
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|data
index|[
name|currentChunk
index|]
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
name|length
operator|-=
name|currentLength
expr_stmt|;
name|currentChunk
operator|+=
literal|1
expr_stmt|;
name|currentOffset
operator|=
literal|0
expr_stmt|;
name|currentLength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|chunkSize
operator|-
name|currentOffset
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Gets all the bytes of the array.    *    * @return Bytes of the array    */
specifier|public
name|byte
index|[]
name|get
parameter_list|()
block|{
name|byte
index|[]
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|currentChunk
init|=
literal|0
decl_stmt|;
name|int
name|currentOffset
init|=
literal|0
decl_stmt|;
name|int
name|currentLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
name|int
name|destOffset
init|=
literal|0
decl_stmt|;
name|result
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|int
name|totalLength
init|=
name|length
decl_stmt|;
while|while
condition|(
name|totalLength
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|data
index|[
name|currentChunk
index|]
argument_list|,
name|currentOffset
argument_list|,
name|result
argument_list|,
name|destOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
name|destOffset
operator|+=
name|currentLength
expr_stmt|;
name|totalLength
operator|-=
name|currentLength
expr_stmt|;
name|currentChunk
operator|+=
literal|1
expr_stmt|;
name|currentOffset
operator|=
literal|0
expr_stmt|;
name|currentLength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|totalLength
argument_list|,
name|chunkSize
operator|-
name|currentOffset
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the size of the buffers.    */
specifier|public
name|long
name|getSizeInBytes
parameter_list|()
block|{
return|return
name|initializedChunks
operator|*
name|chunkSize
return|;
block|}
block|}
end_class

end_unit

