begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_comment
comment|/**  * Statistics about the ACID operations in an ORC file  */
end_comment

begin_class
specifier|public
class|class
name|AcidStats
block|{
specifier|public
name|long
name|inserts
decl_stmt|;
specifier|public
name|long
name|updates
decl_stmt|;
specifier|public
name|long
name|deletes
decl_stmt|;
specifier|public
name|AcidStats
parameter_list|()
block|{
name|inserts
operator|=
literal|0
expr_stmt|;
name|updates
operator|=
literal|0
expr_stmt|;
name|deletes
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|AcidStats
parameter_list|(
name|String
name|serialized
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|serialized
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|inserts
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|updates
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|deletes
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|serialize
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|inserts
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|updates
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" inserts: "
argument_list|)
operator|.
name|append
argument_list|(
name|inserts
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" updates: "
argument_list|)
operator|.
name|append
argument_list|(
name|updates
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" deletes: "
argument_list|)
operator|.
name|append
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

