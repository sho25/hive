begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_comment
comment|/**  * Take the file types and the (optional) configuration column names/types and see if there  * has been schema evolution.  */
end_comment

begin_class
specifier|public
class|class
name|SchemaEvolution
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|TypeDescription
argument_list|,
name|TypeDescription
argument_list|>
name|readerToFile
decl_stmt|;
specifier|private
specifier|final
name|boolean
index|[]
name|included
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|readerSchema
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SchemaEvolution
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|SchemaEvolution
parameter_list|(
name|TypeDescription
name|readerSchema
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|)
block|{
name|this
operator|.
name|included
operator|=
name|included
expr_stmt|;
name|readerToFile
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|readerSchema
operator|=
name|readerSchema
expr_stmt|;
block|}
specifier|public
name|SchemaEvolution
parameter_list|(
name|TypeDescription
name|fileSchema
parameter_list|,
name|TypeDescription
name|readerSchema
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|)
throws|throws
name|IOException
block|{
name|readerToFile
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|readerSchema
operator|.
name|getMaximumId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|included
operator|=
name|included
expr_stmt|;
if|if
condition|(
name|checkAcidSchema
argument_list|(
name|fileSchema
argument_list|)
condition|)
block|{
name|this
operator|.
name|readerSchema
operator|=
name|createEventSchema
argument_list|(
name|readerSchema
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|readerSchema
operator|=
name|readerSchema
expr_stmt|;
block|}
name|buildMapping
argument_list|(
name|fileSchema
argument_list|,
name|this
operator|.
name|readerSchema
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypeDescription
name|getReaderSchema
parameter_list|()
block|{
return|return
name|readerSchema
return|;
block|}
specifier|public
name|TypeDescription
name|getFileType
parameter_list|(
name|TypeDescription
name|readerType
parameter_list|)
block|{
name|TypeDescription
name|result
decl_stmt|;
if|if
condition|(
name|readerToFile
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|included
operator|==
literal|null
operator|||
name|included
index|[
name|readerType
operator|.
name|getId
argument_list|()
index|]
condition|)
block|{
name|result
operator|=
name|readerType
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|readerToFile
operator|.
name|get
argument_list|(
name|readerType
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|void
name|buildMapping
parameter_list|(
name|TypeDescription
name|fileType
parameter_list|,
name|TypeDescription
name|readerType
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if the column isn't included, don't map it
if|if
condition|(
name|included
operator|!=
literal|null
operator|&&
operator|!
name|included
index|[
name|readerType
operator|.
name|getId
argument_list|()
index|]
condition|)
block|{
return|return;
block|}
name|boolean
name|isOk
init|=
literal|true
decl_stmt|;
comment|// check the easy case first
if|if
condition|(
name|fileType
operator|.
name|getCategory
argument_list|()
operator|==
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|readerType
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|DOUBLE
case|:
case|case
name|FLOAT
case|:
case|case
name|STRING
case|:
case|case
name|TIMESTAMP
case|:
case|case
name|BINARY
case|:
case|case
name|DATE
case|:
comment|// these are always a match
break|break;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
comment|// HIVE-13648: Look at ORC data type conversion edge cases (CHAR, VARCHAR, DECIMAL)
name|isOk
operator|=
name|fileType
operator|.
name|getMaxLength
argument_list|()
operator|==
name|readerType
operator|.
name|getMaxLength
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
comment|// HIVE-13648: Look at ORC data type conversion edge cases (CHAR, VARCHAR, DECIMAL)
comment|// TODO we don't enforce scale and precision checks, but probably should
break|break;
case|case
name|UNION
case|:
case|case
name|MAP
case|:
case|case
name|LIST
case|:
block|{
comment|// these must be an exact match
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|fileChildren
init|=
name|fileType
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|readerChildren
init|=
name|readerType
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileChildren
operator|.
name|size
argument_list|()
operator|==
name|readerChildren
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileChildren
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|buildMapping
argument_list|(
name|fileChildren
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|readerChildren
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|isOk
operator|=
literal|false
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
comment|// allow either side to have fewer fields than the other
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|fileChildren
init|=
name|fileType
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|readerChildren
init|=
name|readerType
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|int
name|jointSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|fileChildren
operator|.
name|size
argument_list|()
argument_list|,
name|readerChildren
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jointSize
condition|;
operator|++
name|i
control|)
block|{
name|buildMapping
argument_list|(
name|fileChildren
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|readerChildren
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type "
operator|+
name|readerType
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|/*        * Check for the few cases where will not convert....        */
name|isOk
operator|=
name|ConvertTreeReaderFactory
operator|.
name|canConvert
argument_list|(
name|fileType
argument_list|,
name|readerType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOk
condition|)
block|{
name|readerToFile
operator|.
name|put
argument_list|(
name|readerType
argument_list|,
name|fileType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"ORC does not support type conversion from file type %s (%d) to reader type %s (%d)"
argument_list|,
name|fileType
operator|.
name|toString
argument_list|()
argument_list|,
name|fileType
operator|.
name|getId
argument_list|()
argument_list|,
name|readerType
operator|.
name|toString
argument_list|()
argument_list|,
name|readerType
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|checkAcidSchema
parameter_list|(
name|TypeDescription
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|TypeDescription
operator|.
name|Category
operator|.
name|STRUCT
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rootFields
init|=
name|type
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|acidEventFieldNames
operator|.
name|equals
argument_list|(
name|rootFields
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * @param typeDescr    * @return ORC types for the ACID event based on the row's type description    */
specifier|public
specifier|static
name|TypeDescription
name|createEventSchema
parameter_list|(
name|TypeDescription
name|typeDescr
parameter_list|)
block|{
name|TypeDescription
name|result
init|=
name|TypeDescription
operator|.
name|createStruct
argument_list|()
operator|.
name|addField
argument_list|(
literal|"operation"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"originalTransaction"
argument_list|,
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"bucket"
argument_list|,
name|TypeDescription
operator|.
name|createInt
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"rowId"
argument_list|,
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"currentTransaction"
argument_list|,
name|TypeDescription
operator|.
name|createLong
argument_list|()
argument_list|)
operator|.
name|addField
argument_list|(
literal|"row"
argument_list|,
name|typeDescr
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|acidEventFieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"operation"
argument_list|)
expr_stmt|;
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"originalTransaction"
argument_list|)
expr_stmt|;
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"bucket"
argument_list|)
expr_stmt|;
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"rowId"
argument_list|)
expr_stmt|;
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"currentTransaction"
argument_list|)
expr_stmt|;
name|acidEventFieldNames
operator|.
name|add
argument_list|(
literal|"row"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

