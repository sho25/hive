begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionCodec
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcFile
operator|.
name|CompressionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|BloomFilterIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|Footer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|PostScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|StripeFooter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|StripeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
operator|.
name|RowIndex
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|PhysicalFsWriter
implements|implements
name|PhysicalWriter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PhysicalFsWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|HDFS_BUFFER_SIZE
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
specifier|private
name|FSDataOutputStream
name|rawWriter
init|=
literal|null
decl_stmt|;
comment|// the compressed metadata information outStream
specifier|private
name|OutStream
name|writer
init|=
literal|null
decl_stmt|;
comment|// a protobuf outStream around streamFactory
specifier|private
name|CodedOutputStream
name|protobufWriter
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
specifier|private
specifier|final
name|long
name|blockSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|private
specifier|final
name|CompressionCodec
name|codec
decl_stmt|;
specifier|private
specifier|final
name|double
name|paddingTolerance
decl_stmt|;
specifier|private
specifier|final
name|long
name|defaultStripeSize
decl_stmt|;
specifier|private
specifier|final
name|CompressionKind
name|compress
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|addBlockPadding
decl_stmt|;
specifier|private
specifier|final
name|CompressionStrategy
name|compressionStrategy
decl_stmt|;
comment|// the streams that make up the current stripe
specifier|private
specifier|final
name|Map
argument_list|<
name|StreamName
argument_list|,
name|BufferedStream
argument_list|>
name|streams
init|=
operator|new
name|TreeMap
argument_list|<
name|StreamName
argument_list|,
name|BufferedStream
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|adjustedStripeSize
decl_stmt|;
specifier|private
name|long
name|headerLength
decl_stmt|;
specifier|private
name|long
name|stripeStart
decl_stmt|;
specifier|private
name|int
name|metadataLength
decl_stmt|;
specifier|private
name|int
name|footerLength
decl_stmt|;
specifier|public
name|PhysicalFsWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|numColumns
parameter_list|,
name|OrcFile
operator|.
name|WriterOptions
name|opts
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|defaultStripeSize
operator|=
name|this
operator|.
name|adjustedStripeSize
operator|=
name|opts
operator|.
name|getStripeSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|addBlockPadding
operator|=
name|opts
operator|.
name|getBlockPadding
argument_list|()
expr_stmt|;
if|if
condition|(
name|opts
operator|.
name|isEnforceBufferSize
argument_list|()
condition|)
block|{
name|this
operator|.
name|bufferSize
operator|=
name|opts
operator|.
name|getBufferSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|bufferSize
operator|=
name|getEstimatedBufferSize
argument_list|(
name|defaultStripeSize
argument_list|,
name|numColumns
argument_list|,
name|opts
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|compress
operator|=
name|opts
operator|.
name|getCompress
argument_list|()
expr_stmt|;
name|this
operator|.
name|compressionStrategy
operator|=
name|opts
operator|.
name|getCompressionStrategy
argument_list|()
expr_stmt|;
name|codec
operator|=
name|createCodec
argument_list|(
name|compress
argument_list|)
expr_stmt|;
name|this
operator|.
name|paddingTolerance
operator|=
name|opts
operator|.
name|getPaddingTolerance
argument_list|()
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|opts
operator|.
name|getBlockSize
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ORC writer created for path: {} with stripeSize: {} blockSize: {}"
operator|+
literal|" compression: {} bufferSize: {}"
argument_list|,
name|path
argument_list|,
name|defaultStripeSize
argument_list|,
name|blockSize
argument_list|,
name|compress
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|rawWriter
operator|!=
literal|null
condition|)
return|return;
name|rawWriter
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|HDFS_BUFFER_SIZE
argument_list|,
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|path
argument_list|)
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|rawWriter
operator|.
name|writeBytes
argument_list|(
name|OrcFile
operator|.
name|MAGIC
argument_list|)
expr_stmt|;
name|headerLength
operator|=
name|rawWriter
operator|.
name|getPos
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|OutStream
argument_list|(
literal|"metadata"
argument_list|,
name|bufferSize
argument_list|,
name|codec
argument_list|,
operator|new
name|DirectStream
argument_list|(
name|rawWriter
argument_list|)
argument_list|)
expr_stmt|;
name|protobufWriter
operator|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|padStripe
parameter_list|(
name|long
name|indexSize
parameter_list|,
name|long
name|dataSize
parameter_list|,
name|int
name|footerSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|stripeStart
operator|=
name|rawWriter
operator|.
name|getPos
argument_list|()
expr_stmt|;
specifier|final
name|long
name|currentStripeSize
init|=
name|indexSize
operator|+
name|dataSize
operator|+
name|footerSize
decl_stmt|;
specifier|final
name|long
name|available
init|=
name|blockSize
operator|-
operator|(
name|stripeStart
operator|%
name|blockSize
operator|)
decl_stmt|;
specifier|final
name|long
name|overflow
init|=
name|currentStripeSize
operator|-
name|adjustedStripeSize
decl_stmt|;
specifier|final
name|float
name|availRatio
init|=
operator|(
name|float
operator|)
name|available
operator|/
operator|(
name|float
operator|)
name|defaultStripeSize
decl_stmt|;
if|if
condition|(
name|availRatio
operator|>
literal|0.0f
operator|&&
name|availRatio
argument_list|<
literal|1.0f
operator|&&
name|availRatio
argument_list|>
name|paddingTolerance
condition|)
block|{
comment|// adjust default stripe size to fit into remaining space, also adjust
comment|// the next stripe for correction based on the current stripe size
comment|// and user specified padding tolerance. Since stripe size can overflow
comment|// the default stripe size we should apply this correction to avoid
comment|// writing portion of last stripe to next hdfs block.
name|double
name|correction
init|=
name|overflow
operator|>
literal|0
condition|?
operator|(
name|double
operator|)
name|overflow
operator|/
operator|(
name|double
operator|)
name|adjustedStripeSize
else|:
literal|0.0
decl_stmt|;
comment|// correction should not be greater than user specified padding
comment|// tolerance
name|correction
operator|=
name|correction
operator|>
name|paddingTolerance
condition|?
name|paddingTolerance
else|:
name|correction
expr_stmt|;
comment|// adjust next stripe size based on current stripe estimate correction
name|adjustedStripeSize
operator|=
call|(
name|long
call|)
argument_list|(
operator|(
literal|1.0f
operator|-
name|correction
operator|)
operator|*
operator|(
name|availRatio
operator|*
name|defaultStripeSize
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|availRatio
operator|>=
literal|1.0
condition|)
block|{
name|adjustedStripeSize
operator|=
name|defaultStripeSize
expr_stmt|;
block|}
if|if
condition|(
name|availRatio
operator|<
name|paddingTolerance
operator|&&
name|addBlockPadding
condition|)
block|{
name|long
name|padding
init|=
name|blockSize
operator|-
operator|(
name|stripeStart
operator|%
name|blockSize
operator|)
decl_stmt|;
name|byte
index|[]
name|pad
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|HDFS_BUFFER_SIZE
argument_list|,
name|padding
argument_list|)
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Padding ORC by %d bytes (<=  %.2f * %d)"
argument_list|,
name|padding
argument_list|,
name|availRatio
argument_list|,
name|defaultStripeSize
argument_list|)
argument_list|)
expr_stmt|;
name|stripeStart
operator|+=
name|padding
expr_stmt|;
while|while
condition|(
name|padding
operator|>
literal|0
condition|)
block|{
name|int
name|writeLen
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|padding
argument_list|,
name|pad
operator|.
name|length
argument_list|)
decl_stmt|;
name|rawWriter
operator|.
name|write
argument_list|(
name|pad
argument_list|,
literal|0
argument_list|,
name|writeLen
argument_list|)
expr_stmt|;
name|padding
operator|-=
name|writeLen
expr_stmt|;
block|}
name|adjustedStripeSize
operator|=
name|defaultStripeSize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentStripeSize
argument_list|<
name|blockSize
operator|&&
operator|(
name|stripeStart
operator|%
name|blockSize
operator|)
operator|+
name|currentStripeSize
argument_list|>
name|blockSize
condition|)
block|{
comment|// even if you don't pad, reset the default stripe size when crossing a
comment|// block boundary
name|adjustedStripeSize
operator|=
name|defaultStripeSize
expr_stmt|;
block|}
block|}
comment|/**    * An output receiver that writes the ByteBuffers to the output stream    * as they are received.    */
specifier|private
class|class
name|DirectStream
implements|implements
name|OutStream
operator|.
name|OutputReceiver
block|{
specifier|private
specifier|final
name|FSDataOutputStream
name|output
decl_stmt|;
name|DirectStream
parameter_list|(
name|FSDataOutputStream
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|output
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|buffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|buffer
operator|.
name|position
argument_list|()
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPhysicalStripeSize
parameter_list|()
block|{
return|return
name|adjustedStripeSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCompressed
parameter_list|()
block|{
return|return
name|codec
operator|!=
literal|null
return|;
block|}
specifier|public
specifier|static
name|CompressionCodec
name|createCodec
parameter_list|(
name|CompressionKind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|NONE
case|:
return|return
literal|null
return|;
case|case
name|ZLIB
case|:
return|return
operator|new
name|ZlibCodec
argument_list|()
return|;
case|case
name|SNAPPY
case|:
return|return
operator|new
name|SnappyCodec
argument_list|()
return|;
case|case
name|LZO
case|:
try|try
block|{
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
name|loader
operator|=
name|WriterImpl
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|lzo
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
operator|)
name|loader
operator|.
name|loadClass
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.LzoCodec"
argument_list|)
decl_stmt|;
return|return
name|lzo
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"LZO is not available."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Problem initializing LZO"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Insufficient access to LZO"
argument_list|,
name|e
argument_list|)
throw|;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown compression codec: "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|writeStripeFooter
parameter_list|(
name|StripeFooter
name|footer
parameter_list|,
name|long
name|dataSize
parameter_list|,
name|long
name|indexSize
parameter_list|,
name|StripeInformation
operator|.
name|Builder
name|dirEntry
parameter_list|)
throws|throws
name|IOException
block|{
name|footer
operator|.
name|writeTo
argument_list|(
name|protobufWriter
argument_list|)
expr_stmt|;
name|protobufWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|dirEntry
operator|.
name|setOffset
argument_list|(
name|stripeStart
argument_list|)
expr_stmt|;
name|dirEntry
operator|.
name|setFooterLength
argument_list|(
name|rawWriter
operator|.
name|getPos
argument_list|()
operator|-
name|stripeStart
operator|-
name|dataSize
operator|-
name|indexSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|int
name|getEstimatedBufferSize
parameter_list|(
name|long
name|stripeSize
parameter_list|,
name|int
name|numColumns
parameter_list|,
name|int
name|bs
parameter_list|)
block|{
comment|// The worst case is that there are 2 big streams per a column and
comment|// we want to guarantee that each stream gets ~10 buffers.
comment|// This keeps buffers small enough that we don't get really small stripe
comment|// sizes.
name|int
name|estBufferSize
init|=
call|(
name|int
call|)
argument_list|(
name|stripeSize
operator|/
operator|(
literal|20
operator|*
name|numColumns
operator|)
argument_list|)
decl_stmt|;
name|estBufferSize
operator|=
name|getClosestBufferSize
argument_list|(
name|estBufferSize
argument_list|)
expr_stmt|;
return|return
name|estBufferSize
operator|>
name|bs
condition|?
name|bs
else|:
name|estBufferSize
return|;
block|}
specifier|private
specifier|static
name|int
name|getClosestBufferSize
parameter_list|(
name|int
name|estBufferSize
parameter_list|)
block|{
specifier|final
name|int
name|kb4
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb8
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb16
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb32
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb64
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb128
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb256
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
if|if
condition|(
name|estBufferSize
operator|<=
name|kb4
condition|)
block|{
return|return
name|kb4
return|;
block|}
elseif|else
if|if
condition|(
name|estBufferSize
operator|>
name|kb4
operator|&&
name|estBufferSize
operator|<=
name|kb8
condition|)
block|{
return|return
name|kb8
return|;
block|}
elseif|else
if|if
condition|(
name|estBufferSize
operator|>
name|kb8
operator|&&
name|estBufferSize
operator|<=
name|kb16
condition|)
block|{
return|return
name|kb16
return|;
block|}
elseif|else
if|if
condition|(
name|estBufferSize
operator|>
name|kb16
operator|&&
name|estBufferSize
operator|<=
name|kb32
condition|)
block|{
return|return
name|kb32
return|;
block|}
elseif|else
if|if
condition|(
name|estBufferSize
operator|>
name|kb32
operator|&&
name|estBufferSize
operator|<=
name|kb64
condition|)
block|{
return|return
name|kb64
return|;
block|}
elseif|else
if|if
condition|(
name|estBufferSize
operator|>
name|kb64
operator|&&
name|estBufferSize
operator|<=
name|kb128
condition|)
block|{
return|return
name|kb128
return|;
block|}
else|else
block|{
return|return
name|kb256
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeFileMetadata
parameter_list|(
name|Metadata
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startPosn
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|writeTo
argument_list|(
name|protobufWriter
argument_list|)
expr_stmt|;
name|protobufWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|this
operator|.
name|metadataLength
operator|=
call|(
name|int
call|)
argument_list|(
name|rawWriter
operator|.
name|getPos
argument_list|()
operator|-
name|startPosn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeFileFooter
parameter_list|(
name|Footer
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|bodyLength
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
operator|-
name|metadataLength
decl_stmt|;
name|builder
operator|.
name|setContentLength
argument_list|(
name|bodyLength
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHeaderLength
argument_list|(
name|headerLength
argument_list|)
expr_stmt|;
name|long
name|startPosn
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|Footer
name|footer
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|footer
operator|.
name|writeTo
argument_list|(
name|protobufWriter
argument_list|)
expr_stmt|;
name|protobufWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|this
operator|.
name|footerLength
operator|=
call|(
name|int
call|)
argument_list|(
name|rawWriter
operator|.
name|getPos
argument_list|()
operator|-
name|startPosn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writePostScript
parameter_list|(
name|PostScript
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|setCompression
argument_list|(
name|writeCompressionKind
argument_list|(
name|compress
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setFooterLength
argument_list|(
name|footerLength
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMetadataLength
argument_list|(
name|metadataLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|compress
operator|!=
name|CompressionKind
operator|.
name|NONE
condition|)
block|{
name|builder
operator|.
name|setCompressionBlockSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
block|}
name|PostScript
name|ps
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// need to write this uncompressed
name|long
name|startPosn
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|ps
operator|.
name|writeTo
argument_list|(
name|rawWriter
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
operator|-
name|startPosn
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|255
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"PostScript too large at "
operator|+
name|length
argument_list|)
throw|;
block|}
name|rawWriter
operator|.
name|writeByte
argument_list|(
operator|(
name|int
operator|)
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|rawWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|OrcProto
operator|.
name|CompressionKind
name|writeCompressionKind
parameter_list|(
name|CompressionKind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|NONE
case|:
return|return
name|OrcProto
operator|.
name|CompressionKind
operator|.
name|NONE
return|;
case|case
name|ZLIB
case|:
return|return
name|OrcProto
operator|.
name|CompressionKind
operator|.
name|ZLIB
return|;
case|case
name|SNAPPY
case|:
return|return
name|OrcProto
operator|.
name|CompressionKind
operator|.
name|SNAPPY
return|;
case|case
name|LZO
case|:
return|return
name|OrcProto
operator|.
name|CompressionKind
operator|.
name|LZO
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown compression "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|rawWriter
operator|.
name|hflush
argument_list|()
expr_stmt|;
comment|// TODO: reset?
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRawWriterPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|rawWriter
operator|.
name|getPos
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendRawStripe
parameter_list|(
name|byte
index|[]
name|stripe
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|StripeInformation
operator|.
name|Builder
name|dirEntry
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|long
name|availBlockSpace
init|=
name|blockSize
operator|-
operator|(
name|start
operator|%
name|blockSize
operator|)
decl_stmt|;
comment|// see if stripe can fit in the current hdfs block, else pad the remaining
comment|// space in the block
if|if
condition|(
name|length
argument_list|<
name|blockSize
operator|&&
name|length
argument_list|>
name|availBlockSpace
operator|&&
name|addBlockPadding
condition|)
block|{
name|byte
index|[]
name|pad
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|HDFS_BUFFER_SIZE
argument_list|,
name|availBlockSpace
argument_list|)
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Padding ORC by %d bytes while merging.."
argument_list|,
name|availBlockSpace
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|+=
name|availBlockSpace
expr_stmt|;
while|while
condition|(
name|availBlockSpace
operator|>
literal|0
condition|)
block|{
name|int
name|writeLen
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|availBlockSpace
argument_list|,
name|pad
operator|.
name|length
argument_list|)
decl_stmt|;
name|rawWriter
operator|.
name|write
argument_list|(
name|pad
argument_list|,
literal|0
argument_list|,
name|writeLen
argument_list|)
expr_stmt|;
name|availBlockSpace
operator|-=
name|writeLen
expr_stmt|;
block|}
block|}
name|rawWriter
operator|.
name|write
argument_list|(
name|stripe
argument_list|)
expr_stmt|;
name|dirEntry
operator|.
name|setOffset
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
comment|/**    * This class is used to hold the contents of streams as they are buffered.    * The TreeWriters write to the outStream and the codec compresses the    * data as buffers fill up and stores them in the output list. When the    * stripe is being written, the whole stream is written to the file.    */
specifier|private
class|class
name|BufferedStream
implements|implements
name|OutStream
operator|.
name|OutputReceiver
block|{
specifier|private
specifier|final
name|OutStream
name|outStream
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|output
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
name|BufferedStream
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|=
operator|new
name|OutStream
argument_list|(
name|name
argument_list|,
name|bufferSize
argument_list|,
name|codec
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Receive a buffer from the compression codec.      * @param buffer the buffer to save      */
annotation|@
name|Override
specifier|public
name|void
name|output
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|output
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the number of bytes in buffers that are allocated to this stream.      */
specifier|public
name|long
name|getBufferSize
parameter_list|()
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|buf
range|:
name|output
control|)
block|{
name|result
operator|+=
name|buf
operator|.
name|capacity
argument_list|()
expr_stmt|;
block|}
return|return
name|outStream
operator|.
name|getBufferSize
argument_list|()
operator|+
name|result
return|;
block|}
comment|/**      * Write any saved buffers to the OutputStream if needed, and clears all the buffers.      */
specifier|public
name|void
name|spillToDiskAndClear
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|outStream
operator|.
name|isSuppressed
argument_list|()
condition|)
block|{
for|for
control|(
name|ByteBuffer
name|buffer
range|:
name|output
control|)
block|{
name|rawWriter
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|buffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|buffer
operator|.
name|position
argument_list|()
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|outStream
operator|.
name|clear
argument_list|()
expr_stmt|;
name|output
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return The number of bytes that will be written to the output. Assumes the stream writing      *         into this receiver has already been flushed.      */
specifier|public
name|long
name|getOutputSize
parameter_list|()
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|buffer
range|:
name|output
control|)
block|{
name|result
operator|+=
name|buffer
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|outStream
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|OutStream
name|getOrCreatePhysicalStream
parameter_list|(
name|StreamName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedStream
name|result
init|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|EnumSet
argument_list|<
name|Modifier
argument_list|>
name|modifiers
init|=
name|createCompressionModifiers
argument_list|(
name|name
operator|.
name|getKind
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|BufferedStream
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|bufferSize
argument_list|,
name|codec
operator|==
literal|null
condition|?
literal|null
else|:
name|codec
operator|.
name|modify
argument_list|(
name|modifiers
argument_list|)
argument_list|)
expr_stmt|;
name|streams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|outStream
return|;
block|}
specifier|private
name|EnumSet
argument_list|<
name|Modifier
argument_list|>
name|createCompressionModifiers
parameter_list|(
name|Kind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|BLOOM_FILTER
case|:
case|case
name|DATA
case|:
case|case
name|DICTIONARY_DATA
case|:
return|return
name|EnumSet
operator|.
name|of
argument_list|(
name|Modifier
operator|.
name|TEXT
argument_list|,
name|compressionStrategy
operator|==
name|CompressionStrategy
operator|.
name|SPEED
condition|?
name|Modifier
operator|.
name|FAST
else|:
name|Modifier
operator|.
name|DEFAULT
argument_list|)
return|;
case|case
name|LENGTH
case|:
case|case
name|DICTIONARY_COUNT
case|:
case|case
name|PRESENT
case|:
case|case
name|ROW_INDEX
case|:
case|case
name|SECONDARY
case|:
comment|// easily compressed using the fastest modes
return|return
name|EnumSet
operator|.
name|of
argument_list|(
name|CompressionCodec
operator|.
name|Modifier
operator|.
name|FASTEST
argument_list|,
name|CompressionCodec
operator|.
name|Modifier
operator|.
name|BINARY
argument_list|)
return|;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing ORC compression modifiers for "
operator|+
name|kind
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|finalizeStripe
parameter_list|(
name|StripeFooter
operator|.
name|Builder
name|footerBuilder
parameter_list|,
name|StripeInformation
operator|.
name|Builder
name|dirEntry
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|indexSize
init|=
literal|0
decl_stmt|;
name|long
name|dataSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|StreamName
argument_list|,
name|BufferedStream
argument_list|>
name|pair
range|:
name|streams
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BufferedStream
name|receiver
init|=
name|pair
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|OutStream
name|outStream
init|=
name|receiver
operator|.
name|outStream
decl_stmt|;
if|if
condition|(
operator|!
name|outStream
operator|.
name|isSuppressed
argument_list|()
condition|)
block|{
name|outStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|long
name|streamSize
init|=
name|receiver
operator|.
name|getOutputSize
argument_list|()
decl_stmt|;
name|StreamName
name|name
init|=
name|pair
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|footerBuilder
operator|.
name|addStreams
argument_list|(
name|OrcProto
operator|.
name|Stream
operator|.
name|newBuilder
argument_list|()
operator|.
name|setColumn
argument_list|(
name|name
operator|.
name|getColumn
argument_list|()
argument_list|)
operator|.
name|setKind
argument_list|(
name|name
operator|.
name|getKind
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|streamSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|StreamName
operator|.
name|Area
operator|.
name|INDEX
operator|==
name|name
operator|.
name|getArea
argument_list|()
condition|)
block|{
name|indexSize
operator|+=
name|streamSize
expr_stmt|;
block|}
else|else
block|{
name|dataSize
operator|+=
name|streamSize
expr_stmt|;
block|}
block|}
block|}
name|dirEntry
operator|.
name|setIndexLength
argument_list|(
name|indexSize
argument_list|)
operator|.
name|setDataLength
argument_list|(
name|dataSize
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|StripeFooter
name|footer
init|=
name|footerBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Do we need to pad the file so the stripe doesn't straddle a block boundary?
name|padStripe
argument_list|(
name|indexSize
argument_list|,
name|dataSize
argument_list|,
name|footer
operator|.
name|getSerializedSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// write out the data streams
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|StreamName
argument_list|,
name|BufferedStream
argument_list|>
name|pair
range|:
name|streams
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|pair
operator|.
name|getValue
argument_list|()
operator|.
name|spillToDiskAndClear
argument_list|()
expr_stmt|;
block|}
comment|// Write out the footer.
name|writeStripeFooter
argument_list|(
name|footer
argument_list|,
name|dataSize
argument_list|,
name|indexSize
argument_list|,
name|dirEntry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|estimateMemory
parameter_list|()
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BufferedStream
name|stream
range|:
name|streams
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|+=
name|stream
operator|.
name|getBufferSize
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeIndexStream
parameter_list|(
name|StreamName
name|name
parameter_list|,
name|Builder
name|rowIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|OutStream
name|stream
init|=
name|getOrCreatePhysicalStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|rowIndex
operator|.
name|build
argument_list|()
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeBloomFilterStream
parameter_list|(
name|StreamName
name|name
parameter_list|,
name|BloomFilterIndex
operator|.
name|Builder
name|bloomFilterIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|OutStream
name|stream
init|=
name|getOrCreatePhysicalStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|bloomFilterIndex
operator|.
name|build
argument_list|()
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|OutputStream
name|getStream
parameter_list|()
throws|throws
name|IOException
block|{
name|initialize
argument_list|()
expr_stmt|;
return|return
name|rawWriter
return|;
block|}
block|}
end_class

end_unit

