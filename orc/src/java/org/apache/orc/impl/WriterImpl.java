begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|JavaDataModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|BinaryColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|BloomFilterIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|CompressionKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StringColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|StripeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|UnionColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_comment
comment|/**  * An ORC file writer. The file is divided into stripes, which is the natural  * unit of work when reading. Each stripe is buffered in memory until the  * memory reaches the stripe size and then it is written out broken down by  * columns. Each column is written by a TreeWriter that is specific to that  * type of column. TreeWriters may have children TreeWriters that handle the  * sub-types. Each of the TreeWriters writes the column's data as a set of  * streams.  *  * This class is unsynchronized like most Stream objects, so from the creation  * of an OrcFile and all access to a single instance has to be from a single  * thread.  *  * There are no known cases where these happen between different threads today.  *  * Caveat: the MemoryManager is created during WriterOptions create, that has  * to be confined to a single thread as well.  *  */
end_comment

begin_class
specifier|public
class|class
name|WriterImpl
implements|implements
name|Writer
implements|,
name|MemoryManager
operator|.
name|Callback
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WriterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|HDFS_BUFFER_SIZE
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MIN_ROW_INDEX_STRIDE
init|=
literal|1000
decl_stmt|;
comment|// threshold above which buffer size will be automatically resized
specifier|private
specifier|static
specifier|final
name|int
name|COLUMN_COUNT_THRESHOLD
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
specifier|private
specifier|final
name|long
name|defaultStripeSize
decl_stmt|;
specifier|private
name|long
name|adjustedStripeSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|rowIndexStride
decl_stmt|;
specifier|private
specifier|final
name|CompressionKind
name|compress
decl_stmt|;
specifier|private
specifier|final
name|CompressionCodec
name|codec
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|addBlockPadding
decl_stmt|;
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
specifier|private
specifier|final
name|long
name|blockSize
decl_stmt|;
specifier|private
specifier|final
name|double
name|paddingTolerance
decl_stmt|;
specifier|private
specifier|final
name|TypeDescription
name|schema
decl_stmt|;
comment|// the streams that make up the current stripe
specifier|private
specifier|final
name|Map
argument_list|<
name|StreamName
argument_list|,
name|BufferedStream
argument_list|>
name|streams
init|=
operator|new
name|TreeMap
argument_list|<
name|StreamName
argument_list|,
name|BufferedStream
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|FSDataOutputStream
name|rawWriter
init|=
literal|null
decl_stmt|;
comment|// the compressed metadata information outStream
specifier|private
name|OutStream
name|writer
init|=
literal|null
decl_stmt|;
comment|// a protobuf outStream around streamFactory
specifier|private
name|CodedOutputStream
name|protobufWriter
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|headerLength
decl_stmt|;
specifier|private
name|int
name|columnCount
decl_stmt|;
specifier|private
name|long
name|rowCount
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|rowsInStripe
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|rawDataSize
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|rowsInIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|stripesAtLastFlush
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|OrcProto
operator|.
name|StripeInformation
argument_list|>
name|stripes
init|=
operator|new
name|ArrayList
argument_list|<
name|OrcProto
operator|.
name|StripeInformation
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ByteString
argument_list|>
name|userMetadata
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ByteString
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TreeWriter
name|treeWriter
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|buildIndex
decl_stmt|;
specifier|private
specifier|final
name|MemoryManager
name|memoryManager
decl_stmt|;
specifier|private
specifier|final
name|OrcFile
operator|.
name|Version
name|version
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|OrcFile
operator|.
name|WriterCallback
name|callback
decl_stmt|;
specifier|private
specifier|final
name|OrcFile
operator|.
name|WriterContext
name|callbackContext
decl_stmt|;
specifier|private
specifier|final
name|OrcFile
operator|.
name|EncodingStrategy
name|encodingStrategy
decl_stmt|;
specifier|private
specifier|final
name|OrcFile
operator|.
name|CompressionStrategy
name|compressionStrategy
decl_stmt|;
specifier|private
specifier|final
name|boolean
index|[]
name|bloomFilterColumns
decl_stmt|;
specifier|private
specifier|final
name|double
name|bloomFilterFpp
decl_stmt|;
specifier|private
name|boolean
name|writeTimeZone
decl_stmt|;
specifier|public
name|WriterImpl
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|OrcFile
operator|.
name|WriterOptions
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|opts
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|opts
operator|.
name|getCallback
argument_list|()
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|opts
operator|.
name|getSchema
argument_list|()
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callbackContext
operator|=
operator|new
name|OrcFile
operator|.
name|WriterContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Writer
name|getWriter
parameter_list|()
block|{
return|return
name|WriterImpl
operator|.
name|this
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|callbackContext
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|adjustedStripeSize
operator|=
name|opts
operator|.
name|getStripeSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|defaultStripeSize
operator|=
name|opts
operator|.
name|getStripeSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|opts
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|this
operator|.
name|encodingStrategy
operator|=
name|opts
operator|.
name|getEncodingStrategy
argument_list|()
expr_stmt|;
name|this
operator|.
name|compressionStrategy
operator|=
name|opts
operator|.
name|getCompressionStrategy
argument_list|()
expr_stmt|;
name|this
operator|.
name|addBlockPadding
operator|=
name|opts
operator|.
name|getBlockPadding
argument_list|()
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|opts
operator|.
name|getBlockSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|paddingTolerance
operator|=
name|opts
operator|.
name|getPaddingTolerance
argument_list|()
expr_stmt|;
name|this
operator|.
name|compress
operator|=
name|opts
operator|.
name|getCompress
argument_list|()
expr_stmt|;
name|this
operator|.
name|rowIndexStride
operator|=
name|opts
operator|.
name|getRowIndexStride
argument_list|()
expr_stmt|;
name|this
operator|.
name|memoryManager
operator|=
name|opts
operator|.
name|getMemoryManager
argument_list|()
expr_stmt|;
name|buildIndex
operator|=
name|rowIndexStride
operator|>
literal|0
expr_stmt|;
name|codec
operator|=
name|createCodec
argument_list|(
name|compress
argument_list|)
expr_stmt|;
name|int
name|numColumns
init|=
name|schema
operator|.
name|getMaximumId
argument_list|()
operator|+
literal|1
decl_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|getEstimatedBufferSize
argument_list|(
name|defaultStripeSize
argument_list|,
name|numColumns
argument_list|,
name|opts
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|==
name|OrcFile
operator|.
name|Version
operator|.
name|V_0_11
condition|)
block|{
comment|/* do not write bloom filters for ORC v11 */
name|this
operator|.
name|bloomFilterColumns
operator|=
operator|new
name|boolean
index|[
name|schema
operator|.
name|getMaximumId
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|bloomFilterColumns
operator|=
name|OrcUtils
operator|.
name|includeColumns
argument_list|(
name|opts
operator|.
name|getBloomFilterColumns
argument_list|()
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|bloomFilterFpp
operator|=
name|opts
operator|.
name|getBloomFilterFpp
argument_list|()
expr_stmt|;
name|treeWriter
operator|=
name|createTreeWriter
argument_list|(
name|schema
argument_list|,
name|streamFactory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|buildIndex
operator|&&
name|rowIndexStride
operator|<
name|MIN_ROW_INDEX_STRIDE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Row stride must be at least "
operator|+
name|MIN_ROW_INDEX_STRIDE
argument_list|)
throw|;
block|}
comment|// ensure that we are able to handle callbacks before we register ourselves
name|memoryManager
operator|.
name|addWriter
argument_list|(
name|path
argument_list|,
name|opts
operator|.
name|getStripeSize
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ORC writer created for path: {} with stripeSize: {} blockSize: {}"
operator|+
literal|" compression: {} estimatedBufferSize: {}"
argument_list|,
name|path
argument_list|,
name|defaultStripeSize
argument_list|,
name|blockSize
argument_list|,
name|compress
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|int
name|getEstimatedBufferSize
parameter_list|(
name|long
name|stripeSize
parameter_list|,
name|int
name|numColumns
parameter_list|,
name|int
name|bs
parameter_list|)
block|{
comment|// The worst case is that there are 2 big streams per a column and
comment|// we want to guarantee that each stream gets ~10 buffers.
comment|// This keeps buffers small enough that we don't get really small stripe
comment|// sizes.
name|int
name|estBufferSize
init|=
call|(
name|int
call|)
argument_list|(
name|stripeSize
operator|/
operator|(
literal|20
operator|*
name|numColumns
operator|)
argument_list|)
decl_stmt|;
name|estBufferSize
operator|=
name|getClosestBufferSize
argument_list|(
name|estBufferSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|estBufferSize
operator|>
name|bs
condition|)
block|{
name|estBufferSize
operator|=
name|bs
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"WIDE TABLE - Number of columns: "
operator|+
name|numColumns
operator|+
literal|" Chosen compression buffer size: "
operator|+
name|estBufferSize
argument_list|)
expr_stmt|;
block|}
return|return
name|estBufferSize
return|;
block|}
specifier|private
specifier|static
name|int
name|getClosestBufferSize
parameter_list|(
name|int
name|estBufferSize
parameter_list|)
block|{
specifier|final
name|int
name|kb4
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb8
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb16
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb32
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb64
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb128
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|kb256
init|=
literal|256
operator|*
literal|1024
decl_stmt|;
if|if
condition|(
name|estBufferSize
operator|<=
name|kb4
condition|)
block|{
return|return
name|kb4
return|;
block|}
elseif|else
if|if
condition|(
name|estBufferSize
operator|>
name|kb4
operator|&&
name|estBufferSize
operator|<=
name|kb8
condition|)
block|{
return|return
name|kb8
return|;
block|}
elseif|else
if|if
condition|(
name|estBufferSize
operator|>
name|kb8
operator|&&
name|estBufferSize
operator|<=
name|kb16
condition|)
block|{
return|return
name|kb16
return|;
block|}
elseif|else
if|if
condition|(
name|estBufferSize
operator|>
name|kb16
operator|&&
name|estBufferSize
operator|<=
name|kb32
condition|)
block|{
return|return
name|kb32
return|;
block|}
elseif|else
if|if
condition|(
name|estBufferSize
operator|>
name|kb32
operator|&&
name|estBufferSize
operator|<=
name|kb64
condition|)
block|{
return|return
name|kb64
return|;
block|}
elseif|else
if|if
condition|(
name|estBufferSize
operator|>
name|kb64
operator|&&
name|estBufferSize
operator|<=
name|kb128
condition|)
block|{
return|return
name|kb128
return|;
block|}
else|else
block|{
return|return
name|kb256
return|;
block|}
block|}
specifier|public
specifier|static
name|CompressionCodec
name|createCodec
parameter_list|(
name|CompressionKind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|NONE
case|:
return|return
literal|null
return|;
case|case
name|ZLIB
case|:
return|return
operator|new
name|ZlibCodec
argument_list|()
return|;
case|case
name|SNAPPY
case|:
return|return
operator|new
name|SnappyCodec
argument_list|()
return|;
case|case
name|LZO
case|:
try|try
block|{
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
name|loader
operator|=
name|WriterImpl
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
name|lzo
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|CompressionCodec
argument_list|>
operator|)
name|loader
operator|.
name|loadClass
argument_list|(
literal|"org.apache.hadoop.hive.ql.io.orc.LzoCodec"
argument_list|)
decl_stmt|;
return|return
name|lzo
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"LZO is not available."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Problem initializing LZO"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Insufficient access to LZO"
argument_list|,
name|e
argument_list|)
throw|;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown compression codec: "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkMemory
parameter_list|(
name|double
name|newScale
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|limit
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|round
argument_list|(
name|adjustedStripeSize
operator|*
name|newScale
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|estimateStripeSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ORC writer "
operator|+
name|path
operator|+
literal|" size = "
operator|+
name|size
operator|+
literal|" limit = "
operator|+
name|limit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|>
name|limit
condition|)
block|{
name|flushStripe
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * This class is used to hold the contents of streams as they are buffered.    * The TreeWriters write to the outStream and the codec compresses the    * data as buffers fill up and stores them in the output list. When the    * stripe is being written, the whole stream is written to the file.    */
specifier|private
class|class
name|BufferedStream
implements|implements
name|OutStream
operator|.
name|OutputReceiver
block|{
specifier|private
specifier|final
name|OutStream
name|outStream
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|output
init|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|()
decl_stmt|;
name|BufferedStream
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|=
operator|new
name|OutStream
argument_list|(
name|name
argument_list|,
name|bufferSize
argument_list|,
name|codec
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Receive a buffer from the compression codec.      * @param buffer the buffer to save      */
annotation|@
name|Override
specifier|public
name|void
name|output
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|output
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the number of bytes in buffers that are allocated to this stream.      * @return number of bytes in buffers      */
specifier|public
name|long
name|getBufferSize
parameter_list|()
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|buf
range|:
name|output
control|)
block|{
name|result
operator|+=
name|buf
operator|.
name|capacity
argument_list|()
expr_stmt|;
block|}
return|return
name|outStream
operator|.
name|getBufferSize
argument_list|()
operator|+
name|result
return|;
block|}
comment|/**      * Flush the stream to the codec.      * @throws IOException      */
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Clear all of the buffers.      * @throws IOException      */
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|clear
argument_list|()
expr_stmt|;
name|output
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Check the state of suppress flag in output stream      * @return value of suppress flag      */
specifier|public
name|boolean
name|isSuppressed
parameter_list|()
block|{
return|return
name|outStream
operator|.
name|isSuppressed
argument_list|()
return|;
block|}
comment|/**      * Get the number of bytes that will be written to the output. Assumes      * the stream has already been flushed.      * @return the number of bytes      */
specifier|public
name|long
name|getOutputSize
parameter_list|()
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|buffer
range|:
name|output
control|)
block|{
name|result
operator|+=
name|buffer
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Write the saved compressed buffers to the OutputStream.      * @param out the stream to write to      * @throws IOException      */
name|void
name|spillTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|ByteBuffer
name|buffer
range|:
name|output
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|buffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|buffer
operator|.
name|position
argument_list|()
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|outStream
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * An output receiver that writes the ByteBuffers to the output stream    * as they are received.    */
specifier|private
class|class
name|DirectStream
implements|implements
name|OutStream
operator|.
name|OutputReceiver
block|{
specifier|private
specifier|final
name|FSDataOutputStream
name|output
decl_stmt|;
name|DirectStream
parameter_list|(
name|FSDataOutputStream
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|output
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|buffer
operator|.
name|arrayOffset
argument_list|()
operator|+
name|buffer
operator|.
name|position
argument_list|()
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RowIndexPositionRecorder
implements|implements
name|PositionRecorder
block|{
specifier|private
specifier|final
name|OrcProto
operator|.
name|RowIndexEntry
operator|.
name|Builder
name|builder
decl_stmt|;
name|RowIndexPositionRecorder
parameter_list|(
name|OrcProto
operator|.
name|RowIndexEntry
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addPosition
parameter_list|(
name|long
name|position
parameter_list|)
block|{
name|builder
operator|.
name|addPositions
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Interface from the Writer to the TreeWriters. This limits the visibility    * that the TreeWriters have into the Writer.    */
specifier|private
class|class
name|StreamFactory
block|{
comment|/**      * Create a stream to store part of a column.      * @param column the column id for the stream      * @param kind the kind of stream      * @return The output outStream that the section needs to be written to.      * @throws IOException      */
specifier|public
name|OutStream
name|createStream
parameter_list|(
name|int
name|column
parameter_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
name|kind
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|column
argument_list|,
name|kind
argument_list|)
decl_stmt|;
specifier|final
name|EnumSet
argument_list|<
name|CompressionCodec
operator|.
name|Modifier
argument_list|>
name|modifiers
decl_stmt|;
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|BLOOM_FILTER
case|:
case|case
name|DATA
case|:
case|case
name|DICTIONARY_DATA
case|:
if|if
condition|(
name|getCompressionStrategy
argument_list|()
operator|==
name|OrcFile
operator|.
name|CompressionStrategy
operator|.
name|SPEED
condition|)
block|{
name|modifiers
operator|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CompressionCodec
operator|.
name|Modifier
operator|.
name|FAST
argument_list|,
name|CompressionCodec
operator|.
name|Modifier
operator|.
name|TEXT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|modifiers
operator|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CompressionCodec
operator|.
name|Modifier
operator|.
name|DEFAULT
argument_list|,
name|CompressionCodec
operator|.
name|Modifier
operator|.
name|TEXT
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LENGTH
case|:
case|case
name|DICTIONARY_COUNT
case|:
case|case
name|PRESENT
case|:
case|case
name|ROW_INDEX
case|:
case|case
name|SECONDARY
case|:
comment|// easily compressed using the fastest modes
name|modifiers
operator|=
name|EnumSet
operator|.
name|of
argument_list|(
name|CompressionCodec
operator|.
name|Modifier
operator|.
name|FASTEST
argument_list|,
name|CompressionCodec
operator|.
name|Modifier
operator|.
name|BINARY
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing ORC compression modifiers for "
operator|+
name|kind
argument_list|)
expr_stmt|;
name|modifiers
operator|=
literal|null
expr_stmt|;
break|break;
block|}
name|BufferedStream
name|result
init|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|BufferedStream
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|bufferSize
argument_list|,
name|codec
operator|==
literal|null
condition|?
name|codec
else|:
name|codec
operator|.
name|modify
argument_list|(
name|modifiers
argument_list|)
argument_list|)
expr_stmt|;
name|streams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|outStream
return|;
block|}
comment|/**      * Get the next column id.      * @return a number from 0 to the number of columns - 1      */
specifier|public
name|int
name|getNextColumnId
parameter_list|()
block|{
return|return
name|columnCount
operator|++
return|;
block|}
comment|/**      * Get the stride rate of the row index.      */
specifier|public
name|int
name|getRowIndexStride
parameter_list|()
block|{
return|return
name|rowIndexStride
return|;
block|}
comment|/**      * Should be building the row index.      * @return true if we are building the index      */
specifier|public
name|boolean
name|buildIndex
parameter_list|()
block|{
return|return
name|buildIndex
return|;
block|}
comment|/**      * Is the ORC file compressed?      * @return are the streams compressed      */
specifier|public
name|boolean
name|isCompressed
parameter_list|()
block|{
return|return
name|codec
operator|!=
literal|null
return|;
block|}
comment|/**      * Get the encoding strategy to use.      * @return encoding strategy      */
specifier|public
name|OrcFile
operator|.
name|EncodingStrategy
name|getEncodingStrategy
parameter_list|()
block|{
return|return
name|encodingStrategy
return|;
block|}
comment|/**      * Get the compression strategy to use.      * @return compression strategy      */
specifier|public
name|OrcFile
operator|.
name|CompressionStrategy
name|getCompressionStrategy
parameter_list|()
block|{
return|return
name|compressionStrategy
return|;
block|}
comment|/**      * Get the bloom filter columns      * @return bloom filter columns      */
specifier|public
name|boolean
index|[]
name|getBloomFilterColumns
parameter_list|()
block|{
return|return
name|bloomFilterColumns
return|;
block|}
comment|/**      * Get bloom filter false positive percentage.      * @return fpp      */
specifier|public
name|double
name|getBloomFilterFPP
parameter_list|()
block|{
return|return
name|bloomFilterFpp
return|;
block|}
comment|/**      * Get the writer's configuration.      * @return configuration      */
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**      * Get the version of the file to write.      */
specifier|public
name|OrcFile
operator|.
name|Version
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|void
name|useWriterTimeZone
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|writeTimeZone
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasWriterTimeZone
parameter_list|()
block|{
return|return
name|writeTimeZone
return|;
block|}
block|}
comment|/**    * The parent class of all of the writers for each column. Each column    * is written by an instance of this class. The compound types (struct,    * list, map, and union) have children tree writers that write the children    * types.    */
specifier|private
specifier|abstract
specifier|static
class|class
name|TreeWriter
block|{
specifier|protected
specifier|final
name|int
name|id
decl_stmt|;
specifier|protected
specifier|final
name|BitFieldWriter
name|isPresent
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isCompressed
decl_stmt|;
specifier|protected
specifier|final
name|ColumnStatisticsImpl
name|indexStatistics
decl_stmt|;
specifier|protected
specifier|final
name|ColumnStatisticsImpl
name|stripeColStatistics
decl_stmt|;
specifier|private
specifier|final
name|ColumnStatisticsImpl
name|fileStatistics
decl_stmt|;
specifier|protected
name|TreeWriter
index|[]
name|childrenWriters
decl_stmt|;
specifier|protected
specifier|final
name|RowIndexPositionRecorder
name|rowIndexPosition
decl_stmt|;
specifier|private
specifier|final
name|OrcProto
operator|.
name|RowIndex
operator|.
name|Builder
name|rowIndex
decl_stmt|;
specifier|private
specifier|final
name|OrcProto
operator|.
name|RowIndexEntry
operator|.
name|Builder
name|rowIndexEntry
decl_stmt|;
specifier|private
specifier|final
name|PositionedOutputStream
name|rowIndexStream
decl_stmt|;
specifier|private
specifier|final
name|PositionedOutputStream
name|bloomFilterStream
decl_stmt|;
specifier|protected
specifier|final
name|BloomFilterIO
name|bloomFilter
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|createBloomFilter
decl_stmt|;
specifier|private
specifier|final
name|OrcProto
operator|.
name|BloomFilterIndex
operator|.
name|Builder
name|bloomFilterIndex
decl_stmt|;
specifier|private
specifier|final
name|OrcProto
operator|.
name|BloomFilter
operator|.
name|Builder
name|bloomFilterEntry
decl_stmt|;
specifier|private
name|boolean
name|foundNulls
decl_stmt|;
specifier|private
name|OutStream
name|isPresentOutStream
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|OrcProto
operator|.
name|StripeStatistics
operator|.
name|Builder
argument_list|>
name|stripeStatsBuilders
decl_stmt|;
specifier|private
specifier|final
name|StreamFactory
name|streamFactory
decl_stmt|;
comment|/**      * Create a tree writer.      * @param columnId the column id of the column to write      * @param schema the row schema      * @param streamFactory limited access to the Writer's data.      * @param nullable can the value be null?      * @throws IOException      */
name|TreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|streamFactory
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|streamFactory
operator|=
name|streamFactory
expr_stmt|;
name|this
operator|.
name|isCompressed
operator|=
name|streamFactory
operator|.
name|isCompressed
argument_list|()
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|columnId
expr_stmt|;
if|if
condition|(
name|nullable
condition|)
block|{
name|isPresentOutStream
operator|=
name|streamFactory
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|PRESENT
argument_list|)
expr_stmt|;
name|isPresent
operator|=
operator|new
name|BitFieldWriter
argument_list|(
name|isPresentOutStream
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isPresent
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|foundNulls
operator|=
literal|false
expr_stmt|;
name|createBloomFilter
operator|=
name|streamFactory
operator|.
name|getBloomFilterColumns
argument_list|()
index|[
name|columnId
index|]
expr_stmt|;
name|indexStatistics
operator|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|stripeColStatistics
operator|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|fileStatistics
operator|=
name|ColumnStatisticsImpl
operator|.
name|create
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|childrenWriters
operator|=
operator|new
name|TreeWriter
index|[
literal|0
index|]
expr_stmt|;
name|rowIndex
operator|=
name|OrcProto
operator|.
name|RowIndex
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|rowIndexEntry
operator|=
name|OrcProto
operator|.
name|RowIndexEntry
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|rowIndexPosition
operator|=
operator|new
name|RowIndexPositionRecorder
argument_list|(
name|rowIndexEntry
argument_list|)
expr_stmt|;
name|stripeStatsBuilders
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
if|if
condition|(
name|streamFactory
operator|.
name|buildIndex
argument_list|()
condition|)
block|{
name|rowIndexStream
operator|=
name|streamFactory
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|ROW_INDEX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rowIndexStream
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilterEntry
operator|=
name|OrcProto
operator|.
name|BloomFilter
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|bloomFilterIndex
operator|=
name|OrcProto
operator|.
name|BloomFilterIndex
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|bloomFilterStream
operator|=
name|streamFactory
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|BLOOM_FILTER
argument_list|)
expr_stmt|;
name|bloomFilter
operator|=
operator|new
name|BloomFilterIO
argument_list|(
name|streamFactory
operator|.
name|getRowIndexStride
argument_list|()
argument_list|,
name|streamFactory
operator|.
name|getBloomFilterFPP
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bloomFilterEntry
operator|=
literal|null
expr_stmt|;
name|bloomFilterIndex
operator|=
literal|null
expr_stmt|;
name|bloomFilterStream
operator|=
literal|null
expr_stmt|;
name|bloomFilter
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|OrcProto
operator|.
name|RowIndex
operator|.
name|Builder
name|getRowIndex
parameter_list|()
block|{
return|return
name|rowIndex
return|;
block|}
specifier|protected
name|ColumnStatisticsImpl
name|getStripeStatistics
parameter_list|()
block|{
return|return
name|stripeColStatistics
return|;
block|}
specifier|protected
name|OrcProto
operator|.
name|RowIndexEntry
operator|.
name|Builder
name|getRowIndexEntry
parameter_list|()
block|{
return|return
name|rowIndexEntry
return|;
block|}
name|IntegerWriter
name|createIntegerWriter
parameter_list|(
name|PositionedOutputStream
name|output
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|boolean
name|isDirectV2
parameter_list|,
name|StreamFactory
name|writer
parameter_list|)
block|{
if|if
condition|(
name|isDirectV2
condition|)
block|{
name|boolean
name|alignedBitpacking
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|writer
operator|.
name|getEncodingStrategy
argument_list|()
operator|.
name|equals
argument_list|(
name|OrcFile
operator|.
name|EncodingStrategy
operator|.
name|SPEED
argument_list|)
condition|)
block|{
name|alignedBitpacking
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|new
name|RunLengthIntegerWriterV2
argument_list|(
name|output
argument_list|,
name|signed
argument_list|,
name|alignedBitpacking
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|RunLengthIntegerWriter
argument_list|(
name|output
argument_list|,
name|signed
argument_list|)
return|;
block|}
block|}
name|boolean
name|isNewWriteFormat
parameter_list|(
name|StreamFactory
name|writer
parameter_list|)
block|{
return|return
name|writer
operator|.
name|getVersion
argument_list|()
operator|!=
name|OrcFile
operator|.
name|Version
operator|.
name|V_0_11
return|;
block|}
comment|/**      * Handle the top level object write.      *      * This default method is used for all types except structs, which are the      * typical case. VectorizedRowBatch assumes the top level object is a      * struct, so we use the first column for all other types.      * @param batch the batch to write from      * @param offset the row to start on      * @param length the number of rows to write      * @throws IOException      */
name|void
name|writeRootBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|writeBatch
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * Write the values from the given vector from offset for length elements.      * @param vector the vector to write from      * @param offset the first value from the vector to write      * @param length the number of values from the vector to write      * @throws IOException      */
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
condition|)
block|{
name|indexStatistics
operator|.
name|increment
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPresent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|isPresent
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
name|boolean
name|isNull
init|=
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|isPresent
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|isPresent
operator|.
name|write
argument_list|(
name|isNull
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isNull
condition|)
block|{
name|foundNulls
operator|=
literal|true
expr_stmt|;
name|indexStatistics
operator|.
name|setNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|indexStatistics
operator|.
name|increment
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// count the number of non-null values
name|int
name|nonNullCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|boolean
name|isNull
init|=
name|vector
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|isNull
condition|)
block|{
name|nonNullCount
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|isPresent
operator|!=
literal|null
condition|)
block|{
name|isPresent
operator|.
name|write
argument_list|(
name|isNull
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|indexStatistics
operator|.
name|increment
argument_list|(
name|nonNullCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonNullCount
operator|!=
name|length
condition|)
block|{
name|foundNulls
operator|=
literal|true
expr_stmt|;
name|indexStatistics
operator|.
name|setNull
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|removeIsPresentPositions
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowIndex
operator|.
name|getEntryCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|OrcProto
operator|.
name|RowIndexEntry
operator|.
name|Builder
name|entry
init|=
name|rowIndex
operator|.
name|getEntryBuilder
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|positions
init|=
name|entry
operator|.
name|getPositionsList
argument_list|()
decl_stmt|;
comment|// bit streams use 3 positions if uncompressed, 4 if compressed
name|positions
operator|=
name|positions
operator|.
name|subList
argument_list|(
name|isCompressed
condition|?
literal|4
else|:
literal|3
argument_list|,
name|positions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|clearPositions
argument_list|()
expr_stmt|;
name|entry
operator|.
name|addAllPositions
argument_list|(
name|positions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Write the stripe out to the file.      * @param builder the stripe footer that contains the information about the      *                layout of the stripe. The TreeWriter is required to update      *                the footer with its information.      * @param requiredIndexEntries the number of index entries that are      *                             required. this is to check to make sure the      *                             row index is well formed.      * @throws IOException      */
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isPresent
operator|!=
literal|null
condition|)
block|{
name|isPresent
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// if no nulls are found in a stream, then suppress the stream
if|if
condition|(
operator|!
name|foundNulls
condition|)
block|{
name|isPresentOutStream
operator|.
name|suppress
argument_list|()
expr_stmt|;
comment|// since isPresent bitstream is suppressed, update the index to
comment|// remove the positions of the isPresent stream
if|if
condition|(
name|rowIndexStream
operator|!=
literal|null
condition|)
block|{
name|removeIsPresentPositions
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// merge stripe-level column statistics to file statistics and write it to
comment|// stripe statistics
name|OrcProto
operator|.
name|StripeStatistics
operator|.
name|Builder
name|stripeStatsBuilder
init|=
name|OrcProto
operator|.
name|StripeStatistics
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|writeStripeStatistics
argument_list|(
name|stripeStatsBuilder
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|stripeStatsBuilders
operator|.
name|add
argument_list|(
name|stripeStatsBuilder
argument_list|)
expr_stmt|;
comment|// reset the flag for next stripe
name|foundNulls
operator|=
literal|false
expr_stmt|;
name|builder
operator|.
name|addColumns
argument_list|(
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|streamFactory
operator|.
name|hasWriterTimeZone
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setWriterTimezone
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rowIndexStream
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rowIndex
operator|.
name|getEntryCount
argument_list|()
operator|!=
name|requiredIndexEntries
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Column has wrong number of "
operator|+
literal|"index entries found: "
operator|+
name|rowIndex
operator|.
name|getEntryCount
argument_list|()
operator|+
literal|" expected: "
operator|+
name|requiredIndexEntries
argument_list|)
throw|;
block|}
name|rowIndex
operator|.
name|build
argument_list|()
operator|.
name|writeTo
argument_list|(
name|rowIndexStream
argument_list|)
expr_stmt|;
name|rowIndexStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|rowIndex
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rowIndexEntry
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// write the bloom filter to out stream
if|if
condition|(
name|bloomFilterStream
operator|!=
literal|null
condition|)
block|{
name|bloomFilterIndex
operator|.
name|build
argument_list|()
operator|.
name|writeTo
argument_list|(
name|bloomFilterStream
argument_list|)
expr_stmt|;
name|bloomFilterStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|bloomFilterIndex
operator|.
name|clear
argument_list|()
expr_stmt|;
name|bloomFilterEntry
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeStripeStatistics
parameter_list|(
name|OrcProto
operator|.
name|StripeStatistics
operator|.
name|Builder
name|builder
parameter_list|,
name|TreeWriter
name|treeWriter
parameter_list|)
block|{
name|treeWriter
operator|.
name|fileStatistics
operator|.
name|merge
argument_list|(
name|treeWriter
operator|.
name|stripeColStatistics
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addColStats
argument_list|(
name|treeWriter
operator|.
name|stripeColStatistics
operator|.
name|serialize
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|treeWriter
operator|.
name|stripeColStatistics
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|TreeWriter
name|child
range|:
name|treeWriter
operator|.
name|getChildrenWriters
argument_list|()
control|)
block|{
name|writeStripeStatistics
argument_list|(
name|builder
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
name|TreeWriter
index|[]
name|getChildrenWriters
parameter_list|()
block|{
return|return
name|childrenWriters
return|;
block|}
comment|/**      * Get the encoding for this column.      * @return the information about the encoding of this column      */
name|OrcProto
operator|.
name|ColumnEncoding
name|getEncoding
parameter_list|()
block|{
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Create a row index entry with the previous location and the current      * index statistics. Also merges the index statistics into the file      * statistics before they are cleared. Finally, it records the start of the      * next index and ensures all of the children columns also create an entry.      * @throws IOException      */
name|void
name|createRowIndexEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|stripeColStatistics
operator|.
name|merge
argument_list|(
name|indexStatistics
argument_list|)
expr_stmt|;
name|rowIndexEntry
operator|.
name|setStatistics
argument_list|(
name|indexStatistics
operator|.
name|serialize
argument_list|()
argument_list|)
expr_stmt|;
name|indexStatistics
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rowIndex
operator|.
name|addEntry
argument_list|(
name|rowIndexEntry
argument_list|)
expr_stmt|;
name|rowIndexEntry
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addBloomFilterEntry
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeWriter
name|child
range|:
name|childrenWriters
control|)
block|{
name|child
operator|.
name|createRowIndexEntry
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|addBloomFilterEntry
parameter_list|()
block|{
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilterEntry
operator|.
name|setNumHashFunctions
argument_list|(
name|bloomFilter
operator|.
name|getNumHashFunctions
argument_list|()
argument_list|)
expr_stmt|;
name|bloomFilterEntry
operator|.
name|addAllBitset
argument_list|(
name|Longs
operator|.
name|asList
argument_list|(
name|bloomFilter
operator|.
name|getBitSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bloomFilterIndex
operator|.
name|addBloomFilter
argument_list|(
name|bloomFilterEntry
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|bloomFilter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|bloomFilterEntry
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Record the current position in each of this column's streams.      * @param recorder where should the locations be recorded      * @throws IOException      */
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isPresent
operator|!=
literal|null
condition|)
block|{
name|isPresent
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Estimate how much memory the writer is consuming excluding the streams.      * @return the number of bytes.      */
name|long
name|estimateMemory
parameter_list|()
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TreeWriter
name|child
range|:
name|childrenWriters
control|)
block|{
name|result
operator|+=
name|child
operator|.
name|estimateMemory
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BooleanTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|BitFieldWriter
name|writer
decl_stmt|;
name|BooleanTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|PositionedOutputStream
name|out
init|=
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|this
operator|.
name|writer
operator|=
operator|new
name|BitFieldWriter
argument_list|(
name|out
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|LongColumnVector
name|vec
init|=
operator|(
name|LongColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|int
name|value
init|=
name|vec
operator|.
name|vector
index|[
literal|0
index|]
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|indexStatistics
operator|.
name|updateBoolean
argument_list|(
name|value
operator|!=
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|int
name|value
init|=
name|vec
operator|.
name|vector
index|[
name|i
operator|+
name|offset
index|]
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|indexStatistics
operator|.
name|updateBoolean
argument_list|(
name|value
operator|!=
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|writer
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ByteTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|RunLengthByteWriter
name|writer
decl_stmt|;
name|ByteTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
operator|new
name|RunLengthByteWriter
argument_list|(
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|LongColumnVector
name|vec
init|=
operator|(
name|LongColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|byte
name|value
init|=
operator|(
name|byte
operator|)
name|vec
operator|.
name|vector
index|[
literal|0
index|]
decl_stmt|;
name|indexStatistics
operator|.
name|updateInteger
argument_list|(
name|value
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|byte
name|value
init|=
operator|(
name|byte
operator|)
name|vec
operator|.
name|vector
index|[
name|i
operator|+
name|offset
index|]
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|indexStatistics
operator|.
name|updateInteger
argument_list|(
name|value
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|writer
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|IntegerTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|IntegerWriter
name|writer
decl_stmt|;
specifier|private
name|boolean
name|isDirectV2
init|=
literal|true
decl_stmt|;
name|IntegerTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|OutStream
name|out
init|=
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|this
operator|.
name|isDirectV2
operator|=
name|isNewWriteFormat
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|createIntegerWriter
argument_list|(
name|out
argument_list|,
literal|true
argument_list|,
name|isDirectV2
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|OrcProto
operator|.
name|ColumnEncoding
name|getEncoding
parameter_list|()
block|{
if|if
condition|(
name|isDirectV2
condition|)
block|{
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|LongColumnVector
name|vec
init|=
operator|(
name|LongColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|long
name|value
init|=
name|vec
operator|.
name|vector
index|[
literal|0
index|]
decl_stmt|;
name|indexStatistics
operator|.
name|updateInteger
argument_list|(
name|value
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|long
name|value
init|=
name|vec
operator|.
name|vector
index|[
name|i
operator|+
name|offset
index|]
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|indexStatistics
operator|.
name|updateInteger
argument_list|(
name|value
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|writer
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FloatTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|PositionedOutputStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|SerializationUtils
name|utils
decl_stmt|;
name|FloatTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|this
operator|.
name|utils
operator|=
operator|new
name|SerializationUtils
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|DoubleColumnVector
name|vec
init|=
operator|(
name|DoubleColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|float
name|value
init|=
operator|(
name|float
operator|)
name|vec
operator|.
name|vector
index|[
literal|0
index|]
decl_stmt|;
name|indexStatistics
operator|.
name|updateDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|utils
operator|.
name|writeFloat
argument_list|(
name|stream
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|float
name|value
init|=
operator|(
name|float
operator|)
name|vec
operator|.
name|vector
index|[
name|i
operator|+
name|offset
index|]
decl_stmt|;
name|utils
operator|.
name|writeFloat
argument_list|(
name|stream
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|indexStatistics
operator|.
name|updateDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|stream
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DoubleTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|PositionedOutputStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|SerializationUtils
name|utils
decl_stmt|;
name|DoubleTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|this
operator|.
name|utils
operator|=
operator|new
name|SerializationUtils
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|DoubleColumnVector
name|vec
init|=
operator|(
name|DoubleColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|double
name|value
init|=
name|vec
operator|.
name|vector
index|[
literal|0
index|]
decl_stmt|;
name|indexStatistics
operator|.
name|updateDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|utils
operator|.
name|writeDouble
argument_list|(
name|stream
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|double
name|value
init|=
name|vec
operator|.
name|vector
index|[
name|i
operator|+
name|offset
index|]
decl_stmt|;
name|utils
operator|.
name|writeDouble
argument_list|(
name|stream
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|indexStatistics
operator|.
name|updateDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|stream
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|StringBaseTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|static
specifier|final
name|int
name|INITIAL_DICTIONARY_SIZE
init|=
literal|4096
decl_stmt|;
specifier|private
specifier|final
name|OutStream
name|stringOutput
decl_stmt|;
specifier|private
specifier|final
name|IntegerWriter
name|lengthOutput
decl_stmt|;
specifier|private
specifier|final
name|IntegerWriter
name|rowOutput
decl_stmt|;
specifier|protected
specifier|final
name|StringRedBlackTree
name|dictionary
init|=
operator|new
name|StringRedBlackTree
argument_list|(
name|INITIAL_DICTIONARY_SIZE
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|DynamicIntArray
name|rows
init|=
operator|new
name|DynamicIntArray
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|PositionedOutputStream
name|directStreamOutput
decl_stmt|;
specifier|protected
specifier|final
name|IntegerWriter
name|directLengthOutput
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|OrcProto
operator|.
name|RowIndexEntry
argument_list|>
name|savedRowIndex
init|=
operator|new
name|ArrayList
argument_list|<
name|OrcProto
operator|.
name|RowIndexEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|buildIndex
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|rowIndexValueCount
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// If the number of keys in a dictionary is greater than this fraction of
comment|//the total number of non-null rows, turn off dictionary encoding
specifier|private
specifier|final
name|double
name|dictionaryKeySizeThreshold
decl_stmt|;
specifier|protected
name|boolean
name|useDictionaryEncoding
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|isDirectV2
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|doneDictionaryCheck
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|strideDictionaryCheck
decl_stmt|;
name|StringBaseTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|this
operator|.
name|isDirectV2
operator|=
name|isNewWriteFormat
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|stringOutput
operator|=
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DICTIONARY_DATA
argument_list|)
expr_stmt|;
name|lengthOutput
operator|=
name|createIntegerWriter
argument_list|(
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|,
literal|false
argument_list|,
name|isDirectV2
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|rowOutput
operator|=
name|createIntegerWriter
argument_list|(
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|,
literal|false
argument_list|,
name|isDirectV2
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
name|rowIndexValueCount
operator|.
name|add
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|buildIndex
operator|=
name|writer
operator|.
name|buildIndex
argument_list|()
expr_stmt|;
name|directStreamOutput
operator|=
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|directLengthOutput
operator|=
name|createIntegerWriter
argument_list|(
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|,
literal|false
argument_list|,
name|isDirectV2
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|writer
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|dictionaryKeySizeThreshold
operator|=
name|OrcConf
operator|.
name|DICTIONARY_KEY_SIZE_THRESHOLD
operator|.
name|getDouble
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|strideDictionaryCheck
operator|=
name|OrcConf
operator|.
name|ROW_INDEX_STRIDE_DICTIONARY_CHECK
operator|.
name|getBoolean
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|doneDictionaryCheck
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|boolean
name|checkDictionaryEncoding
parameter_list|()
block|{
if|if
condition|(
operator|!
name|doneDictionaryCheck
condition|)
block|{
comment|// Set the flag indicating whether or not to use dictionary encoding
comment|// based on whether or not the fraction of distinct keys over number of
comment|// non-null rows is less than the configured threshold
name|float
name|ratio
init|=
name|rows
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
call|(
name|float
call|)
argument_list|(
name|dictionary
operator|.
name|size
argument_list|()
argument_list|)
operator|/
name|rows
operator|.
name|size
argument_list|()
else|:
literal|0.0f
decl_stmt|;
name|useDictionaryEncoding
operator|=
operator|!
name|isDirectV2
operator|||
name|ratio
operator|<=
name|dictionaryKeySizeThreshold
expr_stmt|;
name|doneDictionaryCheck
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|useDictionaryEncoding
return|;
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if rows in stripe is less than dictionaryCheckAfterRows, dictionary
comment|// checking would not have happened. So do it again here.
name|checkDictionaryEncoding
argument_list|()
expr_stmt|;
if|if
condition|(
name|useDictionaryEncoding
condition|)
block|{
name|flushDictionary
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// flushout any left over entries from dictionary
if|if
condition|(
name|rows
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|flushDictionary
argument_list|()
expr_stmt|;
block|}
comment|// suppress the stream for every stripe if dictionary is disabled
name|stringOutput
operator|.
name|suppress
argument_list|()
expr_stmt|;
block|}
comment|// we need to build the rowindex before calling super, since it
comment|// writes it out.
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|stringOutput
operator|.
name|flush
argument_list|()
expr_stmt|;
name|lengthOutput
operator|.
name|flush
argument_list|()
expr_stmt|;
name|rowOutput
operator|.
name|flush
argument_list|()
expr_stmt|;
name|directStreamOutput
operator|.
name|flush
argument_list|()
expr_stmt|;
name|directLengthOutput
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// reset all of the fields to be ready for the next stripe.
name|dictionary
operator|.
name|clear
argument_list|()
expr_stmt|;
name|savedRowIndex
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rowIndexValueCount
operator|.
name|clear
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
name|rowIndexValueCount
operator|.
name|add
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useDictionaryEncoding
condition|)
block|{
comment|// record the start positions of first index stride of next stripe i.e
comment|// beginning of the direct streams when dictionary is disabled
name|recordDirectStreamPosition
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|flushDictionary
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
index|[]
name|dumpOrder
init|=
operator|new
name|int
index|[
name|dictionary
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|useDictionaryEncoding
condition|)
block|{
comment|// Write the dictionary by traversing the red-black tree writing out
comment|// the bytes and lengths; and creating the map from the original order
comment|// to the final sorted order.
name|dictionary
operator|.
name|visit
argument_list|(
operator|new
name|StringRedBlackTree
operator|.
name|Visitor
argument_list|()
block|{
specifier|private
name|int
name|currentId
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|StringRedBlackTree
operator|.
name|VisitorContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|context
operator|.
name|writeBytes
argument_list|(
name|stringOutput
argument_list|)
expr_stmt|;
name|lengthOutput
operator|.
name|write
argument_list|(
name|context
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|dumpOrder
index|[
name|context
operator|.
name|getOriginalPosition
argument_list|()
index|]
operator|=
name|currentId
operator|++
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for direct encoding, we don't want the dictionary data stream
name|stringOutput
operator|.
name|suppress
argument_list|()
expr_stmt|;
block|}
name|int
name|length
init|=
name|rows
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|rowIndexEntry
init|=
literal|0
decl_stmt|;
name|OrcProto
operator|.
name|RowIndex
operator|.
name|Builder
name|rowIndex
init|=
name|getRowIndex
argument_list|()
decl_stmt|;
name|Text
name|text
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
comment|// write the values translated into the dump order.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|// now that we are writing out the row values, we can finalize the
comment|// row index
if|if
condition|(
name|buildIndex
condition|)
block|{
while|while
condition|(
name|i
operator|==
name|rowIndexValueCount
operator|.
name|get
argument_list|(
name|rowIndexEntry
argument_list|)
operator|&&
name|rowIndexEntry
operator|<
name|savedRowIndex
operator|.
name|size
argument_list|()
condition|)
block|{
name|OrcProto
operator|.
name|RowIndexEntry
operator|.
name|Builder
name|base
init|=
name|savedRowIndex
operator|.
name|get
argument_list|(
name|rowIndexEntry
operator|++
argument_list|)
operator|.
name|toBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|useDictionaryEncoding
condition|)
block|{
name|rowOutput
operator|.
name|getPosition
argument_list|(
operator|new
name|RowIndexPositionRecorder
argument_list|(
name|base
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PositionRecorder
name|posn
init|=
operator|new
name|RowIndexPositionRecorder
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|directStreamOutput
operator|.
name|getPosition
argument_list|(
name|posn
argument_list|)
expr_stmt|;
name|directLengthOutput
operator|.
name|getPosition
argument_list|(
name|posn
argument_list|)
expr_stmt|;
block|}
name|rowIndex
operator|.
name|addEntry
argument_list|(
name|base
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|!=
name|length
condition|)
block|{
if|if
condition|(
name|useDictionaryEncoding
condition|)
block|{
name|rowOutput
operator|.
name|write
argument_list|(
name|dumpOrder
index|[
name|rows
operator|.
name|get
argument_list|(
name|i
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dictionary
operator|.
name|getText
argument_list|(
name|text
argument_list|,
name|rows
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|directStreamOutput
operator|.
name|write
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|directLengthOutput
operator|.
name|write
argument_list|(
name|text
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rows
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|OrcProto
operator|.
name|ColumnEncoding
name|getEncoding
parameter_list|()
block|{
comment|// Returns the encoding used for the last call to writeStripe
if|if
condition|(
name|useDictionaryEncoding
condition|)
block|{
if|if
condition|(
name|isDirectV2
condition|)
block|{
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY_V2
argument_list|)
operator|.
name|setDictionarySize
argument_list|(
name|dictionary
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY
argument_list|)
operator|.
name|setDictionarySize
argument_list|(
name|dictionary
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
if|if
condition|(
name|isDirectV2
condition|)
block|{
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
comment|/**      * This method doesn't call the super method, because unlike most of the      * other TreeWriters, this one can't record the position in the streams      * until the stripe is being flushed. Therefore it saves all of the entries      * and augments them with the final information as the stripe is written.      * @throws IOException      */
annotation|@
name|Override
name|void
name|createRowIndexEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|getStripeStatistics
argument_list|()
operator|.
name|merge
argument_list|(
name|indexStatistics
argument_list|)
expr_stmt|;
name|OrcProto
operator|.
name|RowIndexEntry
operator|.
name|Builder
name|rowIndexEntry
init|=
name|getRowIndexEntry
argument_list|()
decl_stmt|;
name|rowIndexEntry
operator|.
name|setStatistics
argument_list|(
name|indexStatistics
operator|.
name|serialize
argument_list|()
argument_list|)
expr_stmt|;
name|indexStatistics
operator|.
name|reset
argument_list|()
expr_stmt|;
name|OrcProto
operator|.
name|RowIndexEntry
name|base
init|=
name|rowIndexEntry
operator|.
name|build
argument_list|()
decl_stmt|;
name|savedRowIndex
operator|.
name|add
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|rowIndexEntry
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addBloomFilterEntry
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
name|rowIndexValueCount
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|rows
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|strideDictionaryCheck
condition|)
block|{
name|checkDictionaryEncoding
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|useDictionaryEncoding
condition|)
block|{
if|if
condition|(
name|rows
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|flushDictionary
argument_list|()
expr_stmt|;
comment|// just record the start positions of next index stride
name|recordDirectStreamPosition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// record the start positions of next index stride
name|recordDirectStreamPosition
argument_list|()
expr_stmt|;
name|getRowIndex
argument_list|()
operator|.
name|addEntry
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|recordDirectStreamPosition
parameter_list|()
throws|throws
name|IOException
block|{
name|directStreamOutput
operator|.
name|getPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
name|directLengthOutput
operator|.
name|getPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|long
name|estimateMemory
parameter_list|()
block|{
return|return
name|rows
operator|.
name|getSizeInBytes
argument_list|()
operator|+
name|dictionary
operator|.
name|getSizeInBytes
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StringTreeWriter
extends|extends
name|StringBaseTreeWriter
block|{
name|StringTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|vec
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
if|if
condition|(
name|useDictionaryEncoding
condition|)
block|{
name|int
name|id
init|=
name|dictionary
operator|.
name|add
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|rows
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|directStreamOutput
operator|.
name|write
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|directLengthOutput
operator|.
name|write
argument_list|(
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|indexStatistics
operator|.
name|updateString
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addBytes
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
if|if
condition|(
name|useDictionaryEncoding
condition|)
block|{
name|rows
operator|.
name|add
argument_list|(
name|dictionary
operator|.
name|add
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|directStreamOutput
operator|.
name|write
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
name|directLengthOutput
operator|.
name|write
argument_list|(
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|indexStatistics
operator|.
name|updateString
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addBytes
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Under the covers, char is written to ORC the same way as string.    */
specifier|private
specifier|static
class|class
name|CharTreeWriter
extends|extends
name|StringBaseTreeWriter
block|{
specifier|private
specifier|final
name|int
name|itemLength
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|padding
decl_stmt|;
name|CharTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|itemLength
operator|=
name|schema
operator|.
name|getMaxLength
argument_list|()
expr_stmt|;
name|padding
operator|=
operator|new
name|byte
index|[
name|itemLength
index|]
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|vec
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|byte
index|[]
name|ptr
decl_stmt|;
name|int
name|ptrOffset
decl_stmt|;
if|if
condition|(
name|vec
operator|.
name|length
index|[
literal|0
index|]
operator|>=
name|itemLength
condition|)
block|{
name|ptr
operator|=
name|vec
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
name|ptrOffset
operator|=
name|vec
operator|.
name|start
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|ptr
operator|=
name|padding
expr_stmt|;
name|ptrOffset
operator|=
literal|0
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|ptr
argument_list|,
literal|0
argument_list|,
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ptr
argument_list|,
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|,
name|itemLength
argument_list|,
operator|(
name|byte
operator|)
literal|' '
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useDictionaryEncoding
condition|)
block|{
name|int
name|id
init|=
name|dictionary
operator|.
name|add
argument_list|(
name|ptr
argument_list|,
name|ptrOffset
argument_list|,
name|itemLength
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|rows
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|directStreamOutput
operator|.
name|write
argument_list|(
name|ptr
argument_list|,
name|ptrOffset
argument_list|,
name|itemLength
argument_list|)
expr_stmt|;
name|directLengthOutput
operator|.
name|write
argument_list|(
name|itemLength
argument_list|)
expr_stmt|;
block|}
block|}
name|indexStatistics
operator|.
name|updateString
argument_list|(
name|ptr
argument_list|,
name|ptrOffset
argument_list|,
name|itemLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addBytes
argument_list|(
name|ptr
argument_list|,
name|ptrOffset
argument_list|,
name|itemLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|byte
index|[]
name|ptr
decl_stmt|;
name|int
name|ptrOffset
decl_stmt|;
if|if
condition|(
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
operator|>=
name|itemLength
condition|)
block|{
name|ptr
operator|=
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
expr_stmt|;
name|ptrOffset
operator|=
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// it is the wrong length, so copy it
name|ptr
operator|=
name|padding
expr_stmt|;
name|ptrOffset
operator|=
literal|0
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|ptr
argument_list|,
literal|0
argument_list|,
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|ptr
argument_list|,
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|itemLength
argument_list|,
operator|(
name|byte
operator|)
literal|' '
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useDictionaryEncoding
condition|)
block|{
name|rows
operator|.
name|add
argument_list|(
name|dictionary
operator|.
name|add
argument_list|(
name|ptr
argument_list|,
name|ptrOffset
argument_list|,
name|itemLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|directStreamOutput
operator|.
name|write
argument_list|(
name|ptr
argument_list|,
name|ptrOffset
argument_list|,
name|itemLength
argument_list|)
expr_stmt|;
name|directLengthOutput
operator|.
name|write
argument_list|(
name|itemLength
argument_list|)
expr_stmt|;
block|}
name|indexStatistics
operator|.
name|updateString
argument_list|(
name|ptr
argument_list|,
name|ptrOffset
argument_list|,
name|itemLength
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addBytes
argument_list|(
name|ptr
argument_list|,
name|ptrOffset
argument_list|,
name|itemLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Under the covers, varchar is written to ORC the same way as string.    */
specifier|private
specifier|static
class|class
name|VarcharTreeWriter
extends|extends
name|StringBaseTreeWriter
block|{
specifier|private
specifier|final
name|int
name|maxLength
decl_stmt|;
name|VarcharTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|maxLength
operator|=
name|schema
operator|.
name|getMaxLength
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|vec
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|int
name|itemLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|useDictionaryEncoding
condition|)
block|{
name|int
name|id
init|=
name|dictionary
operator|.
name|add
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|itemLength
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|rows
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|directStreamOutput
operator|.
name|write
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|itemLength
argument_list|)
expr_stmt|;
name|directLengthOutput
operator|.
name|write
argument_list|(
name|itemLength
argument_list|)
expr_stmt|;
block|}
block|}
name|indexStatistics
operator|.
name|updateString
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|itemLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addBytes
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|itemLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|int
name|itemLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|useDictionaryEncoding
condition|)
block|{
name|rows
operator|.
name|add
argument_list|(
name|dictionary
operator|.
name|add
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|itemLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|directStreamOutput
operator|.
name|write
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|itemLength
argument_list|)
expr_stmt|;
name|directLengthOutput
operator|.
name|write
argument_list|(
name|itemLength
argument_list|)
expr_stmt|;
block|}
name|indexStatistics
operator|.
name|updateString
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|itemLength
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addBytes
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|itemLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|BinaryTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|PositionedOutputStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|IntegerWriter
name|length
decl_stmt|;
specifier|private
name|boolean
name|isDirectV2
init|=
literal|true
decl_stmt|;
name|BinaryTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|this
operator|.
name|isDirectV2
operator|=
name|isNewWriteFormat
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|createIntegerWriter
argument_list|(
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|,
literal|false
argument_list|,
name|isDirectV2
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|OrcProto
operator|.
name|ColumnEncoding
name|getEncoding
parameter_list|()
block|{
if|if
condition|(
name|isDirectV2
condition|)
block|{
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|vec
init|=
operator|(
name|BytesColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|.
name|write
argument_list|(
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|indexStatistics
operator|.
name|updateBinary
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addBytes
argument_list|(
name|vec
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|.
name|write
argument_list|(
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
name|indexStatistics
operator|.
name|updateBinary
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addBytes
argument_list|(
name|vec
operator|.
name|vector
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|start
index|[
name|offset
operator|+
name|i
index|]
argument_list|,
name|vec
operator|.
name|length
index|[
name|offset
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|length
operator|.
name|flush
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|stream
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|length
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|int
name|MILLIS_PER_SECOND
init|=
literal|1000
decl_stmt|;
specifier|static
specifier|final
name|int
name|NANOS_PER_SECOND
init|=
literal|1000000000
decl_stmt|;
specifier|static
specifier|final
name|int
name|MILLIS_PER_NANO
init|=
literal|1000000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BASE_TIMESTAMP_STRING
init|=
literal|"2015-01-01 00:00:00"
decl_stmt|;
specifier|private
specifier|static
class|class
name|TimestampTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|IntegerWriter
name|seconds
decl_stmt|;
specifier|private
specifier|final
name|IntegerWriter
name|nanos
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDirectV2
decl_stmt|;
specifier|private
specifier|final
name|long
name|base_timestamp
decl_stmt|;
name|TimestampTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|this
operator|.
name|isDirectV2
operator|=
name|isNewWriteFormat
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|this
operator|.
name|seconds
operator|=
name|createIntegerWriter
argument_list|(
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|,
literal|true
argument_list|,
name|isDirectV2
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|this
operator|.
name|nanos
operator|=
name|createIntegerWriter
argument_list|(
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|SECONDARY
argument_list|)
argument_list|,
literal|false
argument_list|,
name|isDirectV2
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
comment|// for unit tests to set different time zones
name|this
operator|.
name|base_timestamp
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|BASE_TIMESTAMP_STRING
argument_list|)
operator|.
name|getTime
argument_list|()
operator|/
name|MILLIS_PER_SECOND
expr_stmt|;
name|writer
operator|.
name|useWriterTimeZone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|OrcProto
operator|.
name|ColumnEncoding
name|getEncoding
parameter_list|()
block|{
if|if
condition|(
name|isDirectV2
condition|)
block|{
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|TimestampColumnVector
name|vec
init|=
operator|(
name|TimestampColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|long
name|millis
init|=
name|vec
operator|.
name|getEpochMilliseconds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|adjustedNanos
init|=
name|vec
operator|.
name|getSignedNanos
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjustedNanos
operator|<
literal|0
condition|)
block|{
name|adjustedNanos
operator|+=
name|NANOS_PER_SECOND
expr_stmt|;
block|}
name|indexStatistics
operator|.
name|updateTimestamp
argument_list|(
name|millis
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addLong
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|secs
init|=
name|vec
operator|.
name|getEpochSeconds
argument_list|(
literal|0
argument_list|)
operator|-
name|base_timestamp
decl_stmt|;
specifier|final
name|long
name|nano
init|=
name|formatNanos
argument_list|(
name|adjustedNanos
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|seconds
operator|.
name|write
argument_list|(
name|secs
argument_list|)
expr_stmt|;
name|nanos
operator|.
name|write
argument_list|(
name|nano
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|long
name|secs
init|=
name|vec
operator|.
name|getEpochSeconds
argument_list|(
name|i
operator|+
name|offset
argument_list|)
operator|-
name|base_timestamp
decl_stmt|;
name|long
name|millis
init|=
name|vec
operator|.
name|getEpochMilliseconds
argument_list|(
name|i
operator|+
name|offset
argument_list|)
decl_stmt|;
name|int
name|adjustedNanos
init|=
name|vec
operator|.
name|getSignedNanos
argument_list|(
name|i
operator|+
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjustedNanos
operator|<
literal|0
condition|)
block|{
name|adjustedNanos
operator|+=
name|NANOS_PER_SECOND
expr_stmt|;
block|}
name|seconds
operator|.
name|write
argument_list|(
name|secs
argument_list|)
expr_stmt|;
name|nanos
operator|.
name|write
argument_list|(
name|formatNanos
argument_list|(
name|adjustedNanos
argument_list|)
argument_list|)
expr_stmt|;
name|indexStatistics
operator|.
name|updateTimestamp
argument_list|(
name|millis
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addLong
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|seconds
operator|.
name|flush
argument_list|()
expr_stmt|;
name|nanos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|long
name|formatNanos
parameter_list|(
name|int
name|nanos
parameter_list|)
block|{
if|if
condition|(
name|nanos
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|nanos
operator|%
literal|100
operator|!=
literal|0
condition|)
block|{
return|return
operator|(
operator|(
name|long
operator|)
name|nanos
operator|)
operator|<<
literal|3
return|;
block|}
else|else
block|{
name|nanos
operator|/=
literal|100
expr_stmt|;
name|int
name|trailingZeros
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|nanos
operator|%
literal|10
operator|==
literal|0
operator|&&
name|trailingZeros
operator|<
literal|7
condition|)
block|{
name|nanos
operator|/=
literal|10
expr_stmt|;
name|trailingZeros
operator|+=
literal|1
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|long
operator|)
name|nanos
operator|)
operator|<<
literal|3
operator||
name|trailingZeros
return|;
block|}
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|seconds
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|nanos
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DateTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|IntegerWriter
name|writer
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDirectV2
decl_stmt|;
name|DateTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|OutStream
name|out
init|=
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|this
operator|.
name|isDirectV2
operator|=
name|isNewWriteFormat
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|createIntegerWriter
argument_list|(
name|out
argument_list|,
literal|true
argument_list|,
name|isDirectV2
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|LongColumnVector
name|vec
init|=
operator|(
name|LongColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|int
name|value
init|=
operator|(
name|int
operator|)
name|vec
operator|.
name|vector
index|[
literal|0
index|]
decl_stmt|;
name|indexStatistics
operator|.
name|updateDate
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|int
name|value
init|=
operator|(
name|int
operator|)
name|vec
operator|.
name|vector
index|[
name|i
operator|+
name|offset
index|]
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|indexStatistics
operator|.
name|updateDate
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|writer
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|OrcProto
operator|.
name|ColumnEncoding
name|getEncoding
parameter_list|()
block|{
if|if
condition|(
name|isDirectV2
condition|)
block|{
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DecimalTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|PositionedOutputStream
name|valueStream
decl_stmt|;
specifier|private
specifier|final
name|IntegerWriter
name|scaleStream
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDirectV2
decl_stmt|;
name|DecimalTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|this
operator|.
name|isDirectV2
operator|=
name|isNewWriteFormat
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|valueStream
operator|=
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|this
operator|.
name|scaleStream
operator|=
name|createIntegerWriter
argument_list|(
name|writer
operator|.
name|createStream
argument_list|(
name|id
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|SECONDARY
argument_list|)
argument_list|,
literal|true
argument_list|,
name|isDirectV2
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|OrcProto
operator|.
name|ColumnEncoding
name|getEncoding
parameter_list|()
block|{
if|if
condition|(
name|isDirectV2
condition|)
block|{
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|DecimalColumnVector
name|vec
init|=
operator|(
name|DecimalColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|HiveDecimal
name|value
init|=
name|vec
operator|.
name|vector
index|[
literal|0
index|]
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
name|indexStatistics
operator|.
name|updateDecimal
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addString
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|SerializationUtils
operator|.
name|writeBigInteger
argument_list|(
name|valueStream
argument_list|,
name|value
operator|.
name|unscaledValue
argument_list|()
argument_list|)
expr_stmt|;
name|scaleStream
operator|.
name|write
argument_list|(
name|value
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|vec
operator|.
name|noNulls
operator|||
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|HiveDecimal
name|value
init|=
name|vec
operator|.
name|vector
index|[
name|i
operator|+
name|offset
index|]
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
name|SerializationUtils
operator|.
name|writeBigInteger
argument_list|(
name|valueStream
argument_list|,
name|value
operator|.
name|unscaledValue
argument_list|()
argument_list|)
expr_stmt|;
name|scaleStream
operator|.
name|write
argument_list|(
name|value
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|indexStatistics
operator|.
name|updateDecimal
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addString
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|valueStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|scaleStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|valueStream
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|scaleStream
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StructTreeWriter
extends|extends
name|TreeWriter
block|{
name|StructTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|children
init|=
name|schema
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|childrenWriters
operator|=
operator|new
name|TreeWriter
index|[
name|children
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenWriters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|childrenWriters
index|[
name|i
index|]
operator|=
name|createTreeWriter
argument_list|(
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|writeRootBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
comment|// update the statistics for the root column
name|indexStatistics
operator|.
name|increment
argument_list|(
name|length
argument_list|)
expr_stmt|;
comment|// I'm assuming that the root column isn't nullable so that I don't need
comment|// to update isPresent.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenWriters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|childrenWriters
index|[
name|i
index|]
operator|.
name|writeBatch
argument_list|(
name|batch
operator|.
name|cols
index|[
name|i
index|]
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeFields
parameter_list|(
name|StructColumnVector
name|vector
parameter_list|,
name|TreeWriter
index|[]
name|childrenWriters
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|field
init|=
literal|0
init|;
name|field
operator|<
name|childrenWriters
operator|.
name|length
condition|;
operator|++
name|field
control|)
block|{
name|childrenWriters
index|[
name|field
index|]
operator|.
name|writeBatch
argument_list|(
name|vector
operator|.
name|fields
index|[
name|field
index|]
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|StructColumnVector
name|vec
init|=
operator|(
name|StructColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|writeFields
argument_list|(
name|vec
argument_list|,
name|childrenWriters
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|vector
operator|.
name|noNulls
condition|)
block|{
name|writeFields
argument_list|(
name|vec
argument_list|,
name|childrenWriters
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// write the records in runs
name|int
name|currentRun
init|=
literal|0
decl_stmt|;
name|boolean
name|started
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|started
condition|)
block|{
name|started
operator|=
literal|true
expr_stmt|;
name|currentRun
operator|=
name|i
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|started
condition|)
block|{
name|started
operator|=
literal|false
expr_stmt|;
name|writeFields
argument_list|(
name|vec
argument_list|,
name|childrenWriters
argument_list|,
name|offset
operator|+
name|currentRun
argument_list|,
name|i
operator|-
name|currentRun
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|started
condition|)
block|{
name|writeFields
argument_list|(
name|vec
argument_list|,
name|childrenWriters
argument_list|,
name|offset
operator|+
name|currentRun
argument_list|,
name|length
operator|-
name|currentRun
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeWriter
name|child
range|:
name|childrenWriters
control|)
block|{
name|child
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
block|}
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ListTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|IntegerWriter
name|lengths
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDirectV2
decl_stmt|;
name|ListTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|this
operator|.
name|isDirectV2
operator|=
name|isNewWriteFormat
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|childrenWriters
operator|=
operator|new
name|TreeWriter
index|[
literal|1
index|]
expr_stmt|;
name|childrenWriters
index|[
literal|0
index|]
operator|=
name|createTreeWriter
argument_list|(
name|schema
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerWriter
argument_list|(
name|writer
operator|.
name|createStream
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|,
literal|false
argument_list|,
name|isDirectV2
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|OrcProto
operator|.
name|ColumnEncoding
name|getEncoding
parameter_list|()
block|{
if|if
condition|(
name|isDirectV2
condition|)
block|{
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|ListColumnVector
name|vec
init|=
operator|(
name|ListColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|int
name|childOffset
init|=
operator|(
name|int
operator|)
name|vec
operator|.
name|offsets
index|[
literal|0
index|]
decl_stmt|;
name|int
name|childLength
init|=
operator|(
name|int
operator|)
name|vec
operator|.
name|lengths
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|lengths
operator|.
name|write
argument_list|(
name|childLength
argument_list|)
expr_stmt|;
name|childrenWriters
index|[
literal|0
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|child
argument_list|,
name|childOffset
argument_list|,
name|childLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addLong
argument_list|(
name|childLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// write the elements in runs
name|int
name|currentOffset
init|=
literal|0
decl_stmt|;
name|int
name|currentLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|int
name|nextLength
init|=
operator|(
name|int
operator|)
name|vec
operator|.
name|lengths
index|[
name|offset
operator|+
name|i
index|]
decl_stmt|;
name|int
name|nextOffset
init|=
operator|(
name|int
operator|)
name|vec
operator|.
name|offsets
index|[
name|offset
operator|+
name|i
index|]
decl_stmt|;
name|lengths
operator|.
name|write
argument_list|(
name|nextLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentLength
operator|==
literal|0
condition|)
block|{
name|currentOffset
operator|=
name|nextOffset
expr_stmt|;
name|currentLength
operator|=
name|nextLength
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentOffset
operator|+
name|currentLength
operator|!=
name|nextOffset
condition|)
block|{
name|childrenWriters
index|[
literal|0
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|child
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
name|currentOffset
operator|=
name|nextOffset
expr_stmt|;
name|currentLength
operator|=
name|nextLength
expr_stmt|;
block|}
else|else
block|{
name|currentLength
operator|+=
name|nextLength
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentLength
operator|!=
literal|0
condition|)
block|{
name|childrenWriters
index|[
literal|0
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|child
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|TreeWriter
name|child
range|:
name|childrenWriters
control|)
block|{
name|child
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
block|}
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MapTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|IntegerWriter
name|lengths
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDirectV2
decl_stmt|;
name|MapTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|this
operator|.
name|isDirectV2
operator|=
name|isNewWriteFormat
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|childrenWriters
operator|=
operator|new
name|TreeWriter
index|[
literal|2
index|]
expr_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|children
init|=
name|schema
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|childrenWriters
index|[
literal|0
index|]
operator|=
name|createTreeWriter
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|childrenWriters
index|[
literal|1
index|]
operator|=
name|createTreeWriter
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerWriter
argument_list|(
name|writer
operator|.
name|createStream
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|,
literal|false
argument_list|,
name|isDirectV2
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|OrcProto
operator|.
name|ColumnEncoding
name|getEncoding
parameter_list|()
block|{
if|if
condition|(
name|isDirectV2
condition|)
block|{
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|MapColumnVector
name|vec
init|=
operator|(
name|MapColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|int
name|childOffset
init|=
operator|(
name|int
operator|)
name|vec
operator|.
name|offsets
index|[
literal|0
index|]
decl_stmt|;
name|int
name|childLength
init|=
operator|(
name|int
operator|)
name|vec
operator|.
name|lengths
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|lengths
operator|.
name|write
argument_list|(
name|childLength
argument_list|)
expr_stmt|;
name|childrenWriters
index|[
literal|0
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|keys
argument_list|,
name|childOffset
argument_list|,
name|childLength
argument_list|)
expr_stmt|;
name|childrenWriters
index|[
literal|1
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|values
argument_list|,
name|childOffset
argument_list|,
name|childLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addLong
argument_list|(
name|childLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// write the elements in runs
name|int
name|currentOffset
init|=
literal|0
decl_stmt|;
name|int
name|currentLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|int
name|nextLength
init|=
operator|(
name|int
operator|)
name|vec
operator|.
name|lengths
index|[
name|offset
operator|+
name|i
index|]
decl_stmt|;
name|int
name|nextOffset
init|=
operator|(
name|int
operator|)
name|vec
operator|.
name|offsets
index|[
name|offset
operator|+
name|i
index|]
decl_stmt|;
name|lengths
operator|.
name|write
argument_list|(
name|nextLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentLength
operator|==
literal|0
condition|)
block|{
name|currentOffset
operator|=
name|nextOffset
expr_stmt|;
name|currentLength
operator|=
name|nextLength
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentOffset
operator|+
name|currentLength
operator|!=
name|nextOffset
condition|)
block|{
name|childrenWriters
index|[
literal|0
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|keys
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
name|childrenWriters
index|[
literal|1
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|values
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
name|currentOffset
operator|=
name|nextOffset
expr_stmt|;
name|currentLength
operator|=
name|nextLength
expr_stmt|;
block|}
else|else
block|{
name|currentLength
operator|+=
name|nextLength
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|currentLength
operator|!=
literal|0
condition|)
block|{
name|childrenWriters
index|[
literal|0
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|keys
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
name|childrenWriters
index|[
literal|1
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|values
argument_list|,
name|currentOffset
argument_list|,
name|currentLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|TreeWriter
name|child
range|:
name|childrenWriters
control|)
block|{
name|child
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
block|}
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|UnionTreeWriter
extends|extends
name|TreeWriter
block|{
specifier|private
specifier|final
name|RunLengthByteWriter
name|tags
decl_stmt|;
name|UnionTreeWriter
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|writer
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|schema
argument_list|,
name|writer
argument_list|,
name|nullable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|children
init|=
name|schema
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|childrenWriters
operator|=
operator|new
name|TreeWriter
index|[
name|children
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenWriters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|childrenWriters
index|[
name|i
index|]
operator|=
name|createTreeWriter
argument_list|(
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|tags
operator|=
operator|new
name|RunLengthByteWriter
argument_list|(
name|writer
operator|.
name|createStream
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
expr_stmt|;
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|writeBatch
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeBatch
argument_list|(
name|vector
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|UnionColumnVector
name|vec
init|=
operator|(
name|UnionColumnVector
operator|)
name|vector
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|vector
operator|.
name|noNulls
operator|||
operator|!
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|byte
name|tag
init|=
operator|(
name|byte
operator|)
name|vec
operator|.
name|tags
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tags
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|createBloomFilter
condition|)
block|{
name|bloomFilter
operator|.
name|addLong
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
name|childrenWriters
index|[
name|tag
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|fields
index|[
name|tag
index|]
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// write the records in runs of the same tag
name|byte
name|prevTag
init|=
literal|0
decl_stmt|;
name|int
name|currentRun
init|=
literal|0
decl_stmt|;
name|boolean
name|started
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|vec
operator|.
name|isNull
index|[
name|i
operator|+
name|offset
index|]
condition|)
block|{
name|byte
name|tag
init|=
operator|(
name|byte
operator|)
name|vec
operator|.
name|tags
index|[
name|offset
operator|+
name|i
index|]
decl_stmt|;
name|tags
operator|.
name|write
argument_list|(
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|started
condition|)
block|{
name|started
operator|=
literal|true
expr_stmt|;
name|currentRun
operator|=
name|i
expr_stmt|;
name|prevTag
operator|=
name|tag
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|!=
name|prevTag
condition|)
block|{
name|childrenWriters
index|[
name|prevTag
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|fields
index|[
name|prevTag
index|]
argument_list|,
name|offset
operator|+
name|currentRun
argument_list|,
name|i
operator|-
name|currentRun
argument_list|)
expr_stmt|;
name|currentRun
operator|=
name|i
expr_stmt|;
name|prevTag
operator|=
name|tag
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|started
condition|)
block|{
name|started
operator|=
literal|false
expr_stmt|;
name|childrenWriters
index|[
name|prevTag
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|fields
index|[
name|prevTag
index|]
argument_list|,
name|offset
operator|+
name|currentRun
argument_list|,
name|i
operator|-
name|currentRun
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|started
condition|)
block|{
name|childrenWriters
index|[
name|prevTag
index|]
operator|.
name|writeBatch
argument_list|(
name|vec
operator|.
name|fields
index|[
name|prevTag
index|]
argument_list|,
name|offset
operator|+
name|currentRun
argument_list|,
name|length
operator|-
name|currentRun
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|writeStripe
parameter_list|(
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
parameter_list|,
name|int
name|requiredIndexEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|tags
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|TreeWriter
name|child
range|:
name|childrenWriters
control|)
block|{
name|child
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
block|}
name|recordPosition
argument_list|(
name|rowIndexPosition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|recordPosition
parameter_list|(
name|PositionRecorder
name|recorder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|recordPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|tags
operator|.
name|getPosition
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|TreeWriter
name|createTreeWriter
parameter_list|(
name|TypeDescription
name|schema
parameter_list|,
name|StreamFactory
name|streamFactory
parameter_list|,
name|boolean
name|nullable
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|schema
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|new
name|BooleanTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
operator|new
name|ByteTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
return|return
operator|new
name|IntegerTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
operator|new
name|StringTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|new
name|CharTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
operator|new
name|VarcharTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
operator|new
name|BinaryTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
operator|new
name|StructTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
operator|new
name|MapTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
operator|new
name|ListTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
operator|new
name|UnionTreeWriter
argument_list|(
name|streamFactory
operator|.
name|getNextColumnId
argument_list|()
argument_list|,
name|schema
argument_list|,
name|streamFactory
argument_list|,
name|nullable
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bad category: "
operator|+
name|schema
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeTypes
parameter_list|(
name|OrcProto
operator|.
name|Footer
operator|.
name|Builder
name|builder
parameter_list|,
name|TypeDescription
name|schema
parameter_list|)
block|{
name|OrcProto
operator|.
name|Type
operator|.
name|Builder
name|type
init|=
name|OrcProto
operator|.
name|Type
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|children
init|=
name|schema
operator|.
name|getChildren
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|schema
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|BYTE
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|SHORT
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|INT
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LONG
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRING
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|CHAR
argument_list|)
expr_stmt|;
name|type
operator|.
name|setMaximumLength
argument_list|(
name|schema
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
name|type
operator|.
name|setMaximumLength
argument_list|(
name|schema
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|BINARY
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|DATE
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|type
operator|.
name|setPrecision
argument_list|(
name|schema
operator|.
name|getPrecision
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setScale
argument_list|(
name|schema
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LIST
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|LIST
argument_list|)
expr_stmt|;
name|type
operator|.
name|addSubtypes
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|MAP
argument_list|)
expr_stmt|;
for|for
control|(
name|TypeDescription
name|t
range|:
name|children
control|)
block|{
name|type
operator|.
name|addSubtypes
argument_list|(
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STRUCT
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
for|for
control|(
name|TypeDescription
name|t
range|:
name|children
control|)
block|{
name|type
operator|.
name|addSubtypes
argument_list|(
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|field
range|:
name|schema
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|type
operator|.
name|addFieldNames
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UNION
case|:
name|type
operator|.
name|setKind
argument_list|(
name|OrcProto
operator|.
name|Type
operator|.
name|Kind
operator|.
name|UNION
argument_list|)
expr_stmt|;
for|for
control|(
name|TypeDescription
name|t
range|:
name|children
control|)
block|{
name|type
operator|.
name|addSubtypes
argument_list|(
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown category: "
operator|+
name|schema
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
name|builder
operator|.
name|addTypes
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TypeDescription
name|child
range|:
name|children
control|)
block|{
name|writeTypes
argument_list|(
name|builder
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|FSDataOutputStream
name|getStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|rawWriter
operator|==
literal|null
condition|)
block|{
name|rawWriter
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|HDFS_BUFFER_SIZE
argument_list|,
name|fs
operator|.
name|getDefaultReplication
argument_list|(
name|path
argument_list|)
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
name|rawWriter
operator|.
name|writeBytes
argument_list|(
name|OrcFile
operator|.
name|MAGIC
argument_list|)
expr_stmt|;
name|headerLength
operator|=
name|rawWriter
operator|.
name|getPos
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|OutStream
argument_list|(
literal|"metadata"
argument_list|,
name|bufferSize
argument_list|,
name|codec
argument_list|,
operator|new
name|DirectStream
argument_list|(
name|rawWriter
argument_list|)
argument_list|)
expr_stmt|;
name|protobufWriter
operator|=
name|CodedOutputStream
operator|.
name|newInstance
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
return|return
name|rawWriter
return|;
block|}
specifier|private
name|void
name|createRowIndexEntry
parameter_list|()
throws|throws
name|IOException
block|{
name|treeWriter
operator|.
name|createRowIndexEntry
argument_list|()
expr_stmt|;
name|rowsInIndex
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|flushStripe
parameter_list|()
throws|throws
name|IOException
block|{
name|getStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|buildIndex
operator|&&
name|rowsInIndex
operator|!=
literal|0
condition|)
block|{
name|createRowIndexEntry
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rowsInStripe
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|preStripeWrite
argument_list|(
name|callbackContext
argument_list|)
expr_stmt|;
block|}
comment|// finalize the data for the stripe
name|int
name|requiredIndexEntries
init|=
name|rowIndexStride
operator|==
literal|0
condition|?
literal|0
else|:
call|(
name|int
call|)
argument_list|(
operator|(
name|rowsInStripe
operator|+
name|rowIndexStride
operator|-
literal|1
operator|)
operator|/
name|rowIndexStride
argument_list|)
decl_stmt|;
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|Builder
name|builder
init|=
name|OrcProto
operator|.
name|StripeFooter
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|treeWriter
operator|.
name|writeStripe
argument_list|(
name|builder
argument_list|,
name|requiredIndexEntries
argument_list|)
expr_stmt|;
name|long
name|indexSize
init|=
literal|0
decl_stmt|;
name|long
name|dataSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|StreamName
argument_list|,
name|BufferedStream
argument_list|>
name|pair
range|:
name|streams
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BufferedStream
name|stream
init|=
name|pair
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|stream
operator|.
name|isSuppressed
argument_list|()
condition|)
block|{
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|StreamName
name|name
init|=
name|pair
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|long
name|streamSize
init|=
name|pair
operator|.
name|getValue
argument_list|()
operator|.
name|getOutputSize
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addStreams
argument_list|(
name|OrcProto
operator|.
name|Stream
operator|.
name|newBuilder
argument_list|()
operator|.
name|setColumn
argument_list|(
name|name
operator|.
name|getColumn
argument_list|()
argument_list|)
operator|.
name|setKind
argument_list|(
name|name
operator|.
name|getKind
argument_list|()
argument_list|)
operator|.
name|setLength
argument_list|(
name|streamSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|StreamName
operator|.
name|Area
operator|.
name|INDEX
operator|==
name|name
operator|.
name|getArea
argument_list|()
condition|)
block|{
name|indexSize
operator|+=
name|streamSize
expr_stmt|;
block|}
else|else
block|{
name|dataSize
operator|+=
name|streamSize
expr_stmt|;
block|}
block|}
block|}
name|OrcProto
operator|.
name|StripeFooter
name|footer
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Do we need to pad the file so the stripe doesn't straddle a block
comment|// boundary?
name|long
name|start
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
specifier|final
name|long
name|currentStripeSize
init|=
name|indexSize
operator|+
name|dataSize
operator|+
name|footer
operator|.
name|getSerializedSize
argument_list|()
decl_stmt|;
specifier|final
name|long
name|available
init|=
name|blockSize
operator|-
operator|(
name|start
operator|%
name|blockSize
operator|)
decl_stmt|;
specifier|final
name|long
name|overflow
init|=
name|currentStripeSize
operator|-
name|adjustedStripeSize
decl_stmt|;
specifier|final
name|float
name|availRatio
init|=
operator|(
name|float
operator|)
name|available
operator|/
operator|(
name|float
operator|)
name|defaultStripeSize
decl_stmt|;
if|if
condition|(
name|availRatio
operator|>
literal|0.0f
operator|&&
name|availRatio
argument_list|<
literal|1.0f
operator|&&
name|availRatio
argument_list|>
name|paddingTolerance
condition|)
block|{
comment|// adjust default stripe size to fit into remaining space, also adjust
comment|// the next stripe for correction based on the current stripe size
comment|// and user specified padding tolerance. Since stripe size can overflow
comment|// the default stripe size we should apply this correction to avoid
comment|// writing portion of last stripe to next hdfs block.
name|double
name|correction
init|=
name|overflow
operator|>
literal|0
condition|?
operator|(
name|double
operator|)
name|overflow
operator|/
operator|(
name|double
operator|)
name|adjustedStripeSize
else|:
literal|0.0
decl_stmt|;
comment|// correction should not be greater than user specified padding
comment|// tolerance
name|correction
operator|=
name|correction
operator|>
name|paddingTolerance
condition|?
name|paddingTolerance
else|:
name|correction
expr_stmt|;
comment|// adjust next stripe size based on current stripe estimate correction
name|adjustedStripeSize
operator|=
call|(
name|long
call|)
argument_list|(
operator|(
literal|1.0f
operator|-
name|correction
operator|)
operator|*
operator|(
name|availRatio
operator|*
name|defaultStripeSize
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|availRatio
operator|>=
literal|1.0
condition|)
block|{
name|adjustedStripeSize
operator|=
name|defaultStripeSize
expr_stmt|;
block|}
if|if
condition|(
name|availRatio
operator|<
name|paddingTolerance
operator|&&
name|addBlockPadding
condition|)
block|{
name|long
name|padding
init|=
name|blockSize
operator|-
operator|(
name|start
operator|%
name|blockSize
operator|)
decl_stmt|;
name|byte
index|[]
name|pad
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|HDFS_BUFFER_SIZE
argument_list|,
name|padding
argument_list|)
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Padding ORC by %d bytes (<=  %.2f * %d)"
argument_list|,
name|padding
argument_list|,
name|availRatio
argument_list|,
name|defaultStripeSize
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|+=
name|padding
expr_stmt|;
while|while
condition|(
name|padding
operator|>
literal|0
condition|)
block|{
name|int
name|writeLen
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|padding
argument_list|,
name|pad
operator|.
name|length
argument_list|)
decl_stmt|;
name|rawWriter
operator|.
name|write
argument_list|(
name|pad
argument_list|,
literal|0
argument_list|,
name|writeLen
argument_list|)
expr_stmt|;
name|padding
operator|-=
name|writeLen
expr_stmt|;
block|}
name|adjustedStripeSize
operator|=
name|defaultStripeSize
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentStripeSize
argument_list|<
name|blockSize
operator|&&
operator|(
name|start
operator|%
name|blockSize
operator|)
operator|+
name|currentStripeSize
argument_list|>
name|blockSize
condition|)
block|{
comment|// even if you don't pad, reset the default stripe size when crossing a
comment|// block boundary
name|adjustedStripeSize
operator|=
name|defaultStripeSize
expr_stmt|;
block|}
comment|// write out the data streams
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|StreamName
argument_list|,
name|BufferedStream
argument_list|>
name|pair
range|:
name|streams
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|BufferedStream
name|stream
init|=
name|pair
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|stream
operator|.
name|isSuppressed
argument_list|()
condition|)
block|{
name|stream
operator|.
name|spillTo
argument_list|(
name|rawWriter
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|footer
operator|.
name|writeTo
argument_list|(
name|protobufWriter
argument_list|)
expr_stmt|;
name|protobufWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|long
name|footerLength
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
operator|-
name|start
operator|-
name|dataSize
operator|-
name|indexSize
decl_stmt|;
name|OrcProto
operator|.
name|StripeInformation
name|dirEntry
init|=
name|OrcProto
operator|.
name|StripeInformation
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOffset
argument_list|(
name|start
argument_list|)
operator|.
name|setNumberOfRows
argument_list|(
name|rowsInStripe
argument_list|)
operator|.
name|setIndexLength
argument_list|(
name|indexSize
argument_list|)
operator|.
name|setDataLength
argument_list|(
name|dataSize
argument_list|)
operator|.
name|setFooterLength
argument_list|(
name|footerLength
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stripes
operator|.
name|add
argument_list|(
name|dirEntry
argument_list|)
expr_stmt|;
name|rowCount
operator|+=
name|rowsInStripe
expr_stmt|;
name|rowsInStripe
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|computeRawDataSize
parameter_list|()
block|{
return|return
name|getRawDataSize
argument_list|(
name|treeWriter
argument_list|,
name|schema
argument_list|)
return|;
block|}
specifier|private
name|long
name|getRawDataSize
parameter_list|(
name|TreeWriter
name|child
parameter_list|,
name|TypeDescription
name|schema
parameter_list|)
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
name|long
name|numVals
init|=
name|child
operator|.
name|fileStatistics
operator|.
name|getNumberOfValues
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|schema
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|FLOAT
case|:
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive1
argument_list|()
return|;
case|case
name|LONG
case|:
case|case
name|DOUBLE
case|:
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|primitive2
argument_list|()
return|;
case|case
name|STRING
case|:
case|case
name|VARCHAR
case|:
case|case
name|CHAR
case|:
comment|// ORC strings are converted to java Strings. so use JavaDataModel to
comment|// compute the overall size of strings
name|StringColumnStatistics
name|scs
init|=
operator|(
name|StringColumnStatistics
operator|)
name|child
operator|.
name|fileStatistics
decl_stmt|;
name|numVals
operator|=
name|numVals
operator|==
literal|0
condition|?
literal|1
else|:
name|numVals
expr_stmt|;
name|int
name|avgStringLen
init|=
call|(
name|int
call|)
argument_list|(
name|scs
operator|.
name|getSum
argument_list|()
operator|/
name|numVals
argument_list|)
decl_stmt|;
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthForStringOfLength
argument_list|(
name|avgStringLen
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDecimal
argument_list|()
return|;
case|case
name|DATE
case|:
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfDate
argument_list|()
return|;
case|case
name|BINARY
case|:
comment|// get total length of binary blob
name|BinaryColumnStatistics
name|bcs
init|=
operator|(
name|BinaryColumnStatistics
operator|)
name|child
operator|.
name|fileStatistics
decl_stmt|;
return|return
name|bcs
operator|.
name|getSum
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|numVals
operator|*
name|JavaDataModel
operator|.
name|get
argument_list|()
operator|.
name|lengthOfTimestamp
argument_list|()
return|;
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|UNION
case|:
case|case
name|STRUCT
case|:
block|{
name|TreeWriter
index|[]
name|childWriters
init|=
name|child
operator|.
name|getChildrenWriters
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|childTypes
init|=
name|schema
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childWriters
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|total
operator|+=
name|getRawDataSize
argument_list|(
name|childWriters
index|[
name|i
index|]
argument_list|,
name|childTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unknown object inspector category."
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|total
return|;
block|}
specifier|private
name|OrcProto
operator|.
name|CompressionKind
name|writeCompressionKind
parameter_list|(
name|CompressionKind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|NONE
case|:
return|return
name|OrcProto
operator|.
name|CompressionKind
operator|.
name|NONE
return|;
case|case
name|ZLIB
case|:
return|return
name|OrcProto
operator|.
name|CompressionKind
operator|.
name|ZLIB
return|;
case|case
name|SNAPPY
case|:
return|return
name|OrcProto
operator|.
name|CompressionKind
operator|.
name|SNAPPY
return|;
case|case
name|LZO
case|:
return|return
name|OrcProto
operator|.
name|CompressionKind
operator|.
name|LZO
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown compression "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|writeFileStatistics
parameter_list|(
name|OrcProto
operator|.
name|Footer
operator|.
name|Builder
name|builder
parameter_list|,
name|TreeWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|addStatistics
argument_list|(
name|writer
operator|.
name|fileStatistics
operator|.
name|serialize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeWriter
name|child
range|:
name|writer
operator|.
name|getChildrenWriters
argument_list|()
control|)
block|{
name|writeFileStatistics
argument_list|(
name|builder
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|writeMetadata
parameter_list|()
throws|throws
name|IOException
block|{
name|getStream
argument_list|()
expr_stmt|;
name|OrcProto
operator|.
name|Metadata
operator|.
name|Builder
name|builder
init|=
name|OrcProto
operator|.
name|Metadata
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|OrcProto
operator|.
name|StripeStatistics
operator|.
name|Builder
name|ssb
range|:
name|treeWriter
operator|.
name|stripeStatsBuilders
control|)
block|{
name|builder
operator|.
name|addStripeStats
argument_list|(
name|ssb
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|startPosn
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|Metadata
name|metadata
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|writeTo
argument_list|(
name|protobufWriter
argument_list|)
expr_stmt|;
name|protobufWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|rawWriter
operator|.
name|getPos
argument_list|()
operator|-
name|startPosn
argument_list|)
return|;
block|}
specifier|private
name|int
name|writeFooter
parameter_list|(
name|long
name|bodyLength
parameter_list|)
throws|throws
name|IOException
block|{
name|getStream
argument_list|()
expr_stmt|;
name|OrcProto
operator|.
name|Footer
operator|.
name|Builder
name|builder
init|=
name|OrcProto
operator|.
name|Footer
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setContentLength
argument_list|(
name|bodyLength
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHeaderLength
argument_list|(
name|headerLength
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNumberOfRows
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRowIndexStride
argument_list|(
name|rowIndexStride
argument_list|)
expr_stmt|;
comment|// populate raw data size
name|rawDataSize
operator|=
name|computeRawDataSize
argument_list|()
expr_stmt|;
comment|// serialize the types
name|writeTypes
argument_list|(
name|builder
argument_list|,
name|schema
argument_list|)
expr_stmt|;
comment|// add the stripe information
for|for
control|(
name|OrcProto
operator|.
name|StripeInformation
name|stripe
range|:
name|stripes
control|)
block|{
name|builder
operator|.
name|addStripes
argument_list|(
name|stripe
argument_list|)
expr_stmt|;
block|}
comment|// add the column statistics
name|writeFileStatistics
argument_list|(
name|builder
argument_list|,
name|treeWriter
argument_list|)
expr_stmt|;
comment|// add all of the user metadata
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteString
argument_list|>
name|entry
range|:
name|userMetadata
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|addMetadata
argument_list|(
name|OrcProto
operator|.
name|UserMetadataItem
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|startPosn
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|OrcProto
operator|.
name|Footer
name|footer
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|footer
operator|.
name|writeTo
argument_list|(
name|protobufWriter
argument_list|)
expr_stmt|;
name|protobufWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|rawWriter
operator|.
name|getPos
argument_list|()
operator|-
name|startPosn
argument_list|)
return|;
block|}
specifier|private
name|int
name|writePostScript
parameter_list|(
name|int
name|footerLength
parameter_list|,
name|int
name|metadataLength
parameter_list|)
throws|throws
name|IOException
block|{
name|OrcProto
operator|.
name|PostScript
operator|.
name|Builder
name|builder
init|=
name|OrcProto
operator|.
name|PostScript
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCompression
argument_list|(
name|writeCompressionKind
argument_list|(
name|compress
argument_list|)
argument_list|)
operator|.
name|setFooterLength
argument_list|(
name|footerLength
argument_list|)
operator|.
name|setMetadataLength
argument_list|(
name|metadataLength
argument_list|)
operator|.
name|setMagic
argument_list|(
name|OrcFile
operator|.
name|MAGIC
argument_list|)
operator|.
name|addVersion
argument_list|(
name|version
operator|.
name|getMajor
argument_list|()
argument_list|)
operator|.
name|addVersion
argument_list|(
name|version
operator|.
name|getMinor
argument_list|()
argument_list|)
operator|.
name|setWriterVersion
argument_list|(
name|OrcFile
operator|.
name|CURRENT_WRITER
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compress
operator|!=
name|CompressionKind
operator|.
name|NONE
condition|)
block|{
name|builder
operator|.
name|setCompressionBlockSize
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
block|}
name|OrcProto
operator|.
name|PostScript
name|ps
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// need to write this uncompressed
name|long
name|startPosn
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|ps
operator|.
name|writeTo
argument_list|(
name|rawWriter
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
operator|-
name|startPosn
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|255
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"PostScript too large at "
operator|+
name|length
argument_list|)
throw|;
block|}
return|return
operator|(
name|int
operator|)
name|length
return|;
block|}
specifier|private
name|long
name|estimateStripeSize
parameter_list|()
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BufferedStream
name|stream
range|:
name|streams
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|+=
name|stream
operator|.
name|getBufferSize
argument_list|()
expr_stmt|;
block|}
name|result
operator|+=
name|treeWriter
operator|.
name|estimateMemory
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|TypeDescription
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addUserMetadata
parameter_list|(
name|String
name|name
parameter_list|,
name|ByteBuffer
name|value
parameter_list|)
block|{
name|userMetadata
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRowBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|buildIndex
condition|)
block|{
comment|// Batch the writes up to the rowIndexStride so that we can get the
comment|// right size indexes.
name|int
name|posn
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|posn
operator|<
name|batch
operator|.
name|size
condition|)
block|{
name|int
name|chunkSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|batch
operator|.
name|size
operator|-
name|posn
argument_list|,
name|rowIndexStride
operator|-
name|rowsInIndex
argument_list|)
decl_stmt|;
name|treeWriter
operator|.
name|writeRootBatch
argument_list|(
name|batch
argument_list|,
name|posn
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|posn
operator|+=
name|chunkSize
expr_stmt|;
name|rowsInIndex
operator|+=
name|chunkSize
expr_stmt|;
name|rowsInStripe
operator|+=
name|chunkSize
expr_stmt|;
if|if
condition|(
name|rowsInIndex
operator|>=
name|rowIndexStride
condition|)
block|{
name|createRowIndexEntry
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|rowsInStripe
operator|+=
name|batch
operator|.
name|size
expr_stmt|;
name|treeWriter
operator|.
name|writeRootBatch
argument_list|(
name|batch
argument_list|,
literal|0
argument_list|,
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
name|memoryManager
operator|.
name|addedRow
argument_list|(
name|batch
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|preFooterWrite
argument_list|(
name|callbackContext
argument_list|)
expr_stmt|;
block|}
comment|// remove us from the memory manager so that we don't get any callbacks
name|memoryManager
operator|.
name|removeWriter
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// actually close the file
name|flushStripe
argument_list|()
expr_stmt|;
name|int
name|metadataLength
init|=
name|writeMetadata
argument_list|()
decl_stmt|;
name|int
name|footerLength
init|=
name|writeFooter
argument_list|(
name|rawWriter
operator|.
name|getPos
argument_list|()
operator|-
name|metadataLength
argument_list|)
decl_stmt|;
name|rawWriter
operator|.
name|writeByte
argument_list|(
name|writePostScript
argument_list|(
name|footerLength
argument_list|,
name|metadataLength
argument_list|)
argument_list|)
expr_stmt|;
name|rawWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Raw data size will be compute when writing the file footer. Hence raw data    * size value will be available only after closing the writer.    */
annotation|@
name|Override
specifier|public
name|long
name|getRawDataSize
parameter_list|()
block|{
return|return
name|rawDataSize
return|;
block|}
comment|/**    * Row count gets updated when flushing the stripes. To get accurate row    * count call this method after writer is closed.    */
annotation|@
name|Override
specifier|public
name|long
name|getNumberOfRows
parameter_list|()
block|{
return|return
name|rowCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|writeIntermediateFooter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// flush any buffered rows
name|flushStripe
argument_list|()
expr_stmt|;
comment|// write a footer
if|if
condition|(
name|stripesAtLastFlush
operator|!=
name|stripes
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|preFooterWrite
argument_list|(
name|callbackContext
argument_list|)
expr_stmt|;
block|}
name|int
name|metaLength
init|=
name|writeMetadata
argument_list|()
decl_stmt|;
name|int
name|footLength
init|=
name|writeFooter
argument_list|(
name|rawWriter
operator|.
name|getPos
argument_list|()
operator|-
name|metaLength
argument_list|)
decl_stmt|;
name|rawWriter
operator|.
name|writeByte
argument_list|(
name|writePostScript
argument_list|(
name|footLength
argument_list|,
name|metaLength
argument_list|)
argument_list|)
expr_stmt|;
name|stripesAtLastFlush
operator|=
name|stripes
operator|.
name|size
argument_list|()
expr_stmt|;
name|rawWriter
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
return|return
name|rawWriter
operator|.
name|getPos
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendStripe
parameter_list|(
name|byte
index|[]
name|stripe
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|StripeInformation
name|stripeInfo
parameter_list|,
name|OrcProto
operator|.
name|StripeStatistics
name|stripeStatistics
parameter_list|)
throws|throws
name|IOException
block|{
name|checkArgument
argument_list|(
name|stripe
operator|!=
literal|null
argument_list|,
literal|"Stripe must not be null"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|length
operator|<=
name|stripe
operator|.
name|length
argument_list|,
literal|"Specified length must not be greater specified array length"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|stripeInfo
operator|!=
literal|null
argument_list|,
literal|"Stripe information must not be null"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|stripeStatistics
operator|!=
literal|null
argument_list|,
literal|"Stripe statistics must not be null"
argument_list|)
expr_stmt|;
name|getStream
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|rawWriter
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|long
name|availBlockSpace
init|=
name|blockSize
operator|-
operator|(
name|start
operator|%
name|blockSize
operator|)
decl_stmt|;
comment|// see if stripe can fit in the current hdfs block, else pad the remaining
comment|// space in the block
if|if
condition|(
name|length
argument_list|<
name|blockSize
operator|&&
name|length
argument_list|>
name|availBlockSpace
operator|&&
name|addBlockPadding
condition|)
block|{
name|byte
index|[]
name|pad
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|HDFS_BUFFER_SIZE
argument_list|,
name|availBlockSpace
argument_list|)
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Padding ORC by %d bytes while merging.."
argument_list|,
name|availBlockSpace
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|+=
name|availBlockSpace
expr_stmt|;
while|while
condition|(
name|availBlockSpace
operator|>
literal|0
condition|)
block|{
name|int
name|writeLen
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|availBlockSpace
argument_list|,
name|pad
operator|.
name|length
argument_list|)
decl_stmt|;
name|rawWriter
operator|.
name|write
argument_list|(
name|pad
argument_list|,
literal|0
argument_list|,
name|writeLen
argument_list|)
expr_stmt|;
name|availBlockSpace
operator|-=
name|writeLen
expr_stmt|;
block|}
block|}
name|rawWriter
operator|.
name|write
argument_list|(
name|stripe
argument_list|)
expr_stmt|;
name|rowsInStripe
operator|=
name|stripeStatistics
operator|.
name|getColStats
argument_list|(
literal|0
argument_list|)
operator|.
name|getNumberOfValues
argument_list|()
expr_stmt|;
name|rowCount
operator|+=
name|rowsInStripe
expr_stmt|;
comment|// since we have already written the stripe, just update stripe statistics
name|treeWriter
operator|.
name|stripeStatsBuilders
operator|.
name|add
argument_list|(
name|stripeStatistics
operator|.
name|toBuilder
argument_list|()
argument_list|)
expr_stmt|;
comment|// update file level statistics
name|updateFileStatistics
argument_list|(
name|stripeStatistics
argument_list|)
expr_stmt|;
comment|// update stripe information
name|OrcProto
operator|.
name|StripeInformation
name|dirEntry
init|=
name|OrcProto
operator|.
name|StripeInformation
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOffset
argument_list|(
name|start
argument_list|)
operator|.
name|setNumberOfRows
argument_list|(
name|rowsInStripe
argument_list|)
operator|.
name|setIndexLength
argument_list|(
name|stripeInfo
operator|.
name|getIndexLength
argument_list|()
argument_list|)
operator|.
name|setDataLength
argument_list|(
name|stripeInfo
operator|.
name|getDataLength
argument_list|()
argument_list|)
operator|.
name|setFooterLength
argument_list|(
name|stripeInfo
operator|.
name|getFooterLength
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|stripes
operator|.
name|add
argument_list|(
name|dirEntry
argument_list|)
expr_stmt|;
comment|// reset it after writing the stripe
name|rowsInStripe
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|updateFileStatistics
parameter_list|(
name|OrcProto
operator|.
name|StripeStatistics
name|stripeStatistics
parameter_list|)
block|{
name|List
argument_list|<
name|OrcProto
operator|.
name|ColumnStatistics
argument_list|>
name|cs
init|=
name|stripeStatistics
operator|.
name|getColStatsList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TreeWriter
argument_list|>
name|allWriters
init|=
name|getAllColumnTreeWriters
argument_list|(
name|treeWriter
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allWriters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|allWriters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|fileStatistics
operator|.
name|merge
argument_list|(
name|ColumnStatisticsImpl
operator|.
name|deserialize
argument_list|(
name|cs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|TreeWriter
argument_list|>
name|getAllColumnTreeWriters
parameter_list|(
name|TreeWriter
name|rootTreeWriter
parameter_list|)
block|{
name|List
argument_list|<
name|TreeWriter
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|getAllColumnTreeWritersImpl
argument_list|(
name|rootTreeWriter
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|getAllColumnTreeWritersImpl
parameter_list|(
name|TreeWriter
name|tw
parameter_list|,
name|List
argument_list|<
name|TreeWriter
argument_list|>
name|result
parameter_list|)
block|{
name|result
operator|.
name|add
argument_list|(
name|tw
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeWriter
name|child
range|:
name|tw
operator|.
name|childrenWriters
control|)
block|{
name|getAllColumnTreeWritersImpl
argument_list|(
name|child
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendUserMetadata
parameter_list|(
name|List
argument_list|<
name|OrcProto
operator|.
name|UserMetadataItem
argument_list|>
name|userMetadata
parameter_list|)
block|{
if|if
condition|(
name|userMetadata
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|OrcProto
operator|.
name|UserMetadataItem
name|item
range|:
name|userMetadata
control|)
block|{
name|this
operator|.
name|userMetadata
operator|.
name|put
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|,
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

