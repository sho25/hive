begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|BytesColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DecimalColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|DoubleColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ListColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|LongColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|MapColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|StructColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|TimestampColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|UnionColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|TypeDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_comment
comment|/**  * Factory for creating ORC tree readers.  */
end_comment

begin_class
specifier|public
class|class
name|TreeReaderFactory
block|{
specifier|public
specifier|abstract
specifier|static
class|class
name|TreeReader
block|{
specifier|protected
specifier|final
name|int
name|columnId
decl_stmt|;
specifier|protected
name|BitFieldReader
name|present
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|valuePresent
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|vectorColumnCount
decl_stmt|;
name|TreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|TreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|columnId
operator|=
name|columnId
expr_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|present
operator|=
literal|null
expr_stmt|;
name|valuePresent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|present
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|in
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|vectorColumnCount
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|void
name|setVectorColumnCount
parameter_list|(
name|int
name|vectorColumnCount
parameter_list|)
block|{
name|this
operator|.
name|vectorColumnCount
operator|=
name|vectorColumnCount
expr_stmt|;
block|}
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
specifier|static
name|IntegerReader
name|createIntegerReader
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
name|kind
parameter_list|,
name|InStream
name|in
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|DIRECT_V2
case|:
case|case
name|DICTIONARY_V2
case|:
return|return
operator|new
name|RunLengthIntegerReaderV2
argument_list|(
name|in
argument_list|,
name|signed
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DIRECT
case|:
case|case
name|DICTIONARY
case|:
return|return
operator|new
name|RunLengthIntegerReader
argument_list|(
name|in
argument_list|,
name|signed
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown encoding "
operator|+
name|kind
argument_list|)
throw|;
block|}
block|}
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|checkEncoding
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
argument_list|)
expr_stmt|;
name|InStream
name|in
init|=
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|PRESENT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|present
operator|=
literal|null
expr_stmt|;
name|valuePresent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|present
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|in
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Seek to the given position.      *      * @param index the indexes loaded from the file      * @throws IOException      */
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|present
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|long
name|countNonNulls
parameter_list|(
name|long
name|rows
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
condition|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|c
init|=
literal|0
init|;
name|c
operator|<
name|rows
condition|;
operator|++
name|c
control|)
block|{
if|if
condition|(
name|present
operator|.
name|next
argument_list|()
operator|==
literal|1
condition|)
block|{
name|result
operator|+=
literal|1
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
name|rows
return|;
block|}
block|}
specifier|abstract
name|void
name|skipRows
parameter_list|(
name|long
name|rows
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Called at the top level to read into the given batch.      * @param batch the batch to read into      * @param batchSize the number of rows to read      * @throws IOException      */
specifier|public
name|void
name|nextBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|reset
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
literal|0
index|]
operator|.
name|ensureSize
argument_list|(
name|batchSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|nextVector
argument_list|(
name|batch
operator|.
name|cols
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * Populates the isNull vector array in the previousVector object based on      * the present stream values. This function is called from all the child      * readers, and they all set the values based on isNull field value.      *      * @param previous The columnVector object whose isNull value is populated      * @param isNull Whether the each value was null at a higher level. If      *               isNull is null, all values are non-null.      * @param batchSize      Size of the column vector      * @throws IOException      */
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previous
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|present
operator|!=
literal|null
operator|||
name|isNull
operator|!=
literal|null
condition|)
block|{
comment|// Set noNulls and isNull vector of the ColumnVector based on
comment|// present stream
name|previous
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
name|boolean
name|allNull
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isNull
operator|==
literal|null
operator|||
operator|!
name|isNull
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|present
operator|!=
literal|null
operator|&&
name|present
operator|.
name|next
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|previous
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|previous
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|previous
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|allNull
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|previous
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|previous
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|previous
operator|.
name|isRepeating
operator|=
operator|!
name|previous
operator|.
name|noNulls
operator|&&
name|allNull
expr_stmt|;
block|}
else|else
block|{
comment|// There is no present stream, this means that all the values are
comment|// present.
name|previous
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|previous
operator|.
name|isNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|BitFieldReader
name|getPresent
parameter_list|()
block|{
return|return
name|present
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|NullTreeReader
extends|extends
name|TreeReader
block|{
specifier|public
name|NullTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|footer
parameter_list|)
block|{
comment|// PASS
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|rows
parameter_list|)
block|{
comment|// PASS
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|position
parameter_list|)
block|{
comment|// PASS
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|position
parameter_list|)
block|{
comment|// PASS
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|vector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|vector
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|vector
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|vector
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BooleanTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|BitFieldReader
name|reader
init|=
literal|null
decl_stmt|;
name|BooleanTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BooleanTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|reader
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|data
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BitFieldReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LongColumnVector
name|result
init|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ByteTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|RunLengthByteReader
name|reader
init|=
literal|null
decl_stmt|;
name|ByteTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ByteTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
operator|new
name|RunLengthByteReader
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|RunLengthByteReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongColumnVector
name|result
init|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|vector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ShortTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|ShortTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ShortTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|data
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongColumnVector
name|result
init|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|vector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IntTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|IntTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|IntTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|data
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongColumnVector
name|result
init|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|vector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LongTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|LongTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|LongTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|data
argument_list|,
literal|true
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongColumnVector
name|result
init|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|vector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|FloatTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|InStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|SerializationUtils
name|utils
decl_stmt|;
name|FloatTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|FloatTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|this
operator|.
name|utils
operator|=
operator|new
name|SerializationUtils
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|data
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DoubleColumnVector
name|result
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|hasNulls
init|=
operator|!
name|result
operator|.
name|noNulls
decl_stmt|;
name|boolean
name|allNulls
init|=
name|hasNulls
decl_stmt|;
if|if
condition|(
name|hasNulls
condition|)
block|{
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|batchSize
operator|<=
name|result
operator|.
name|isNull
operator|.
name|length
operator|&&
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|allNulls
operator|=
name|allNulls
operator|&
name|result
operator|.
name|isNull
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|allNulls
condition|)
block|{
name|result
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|result
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// some nulls
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|batchSize
operator|<=
name|result
operator|.
name|isNull
operator|.
name|length
operator|&&
name|batchSize
operator|<=
name|result
operator|.
name|vector
operator|.
name|length
operator|&&
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is not present then set NaN
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// no nulls&> 1 row (check repeating)
name|boolean
name|repeating
init|=
operator|(
name|batchSize
operator|>
literal|1
operator|)
decl_stmt|;
specifier|final
name|float
name|f1
init|=
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|result
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|f1
expr_stmt|;
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|batchSize
operator|&&
name|batchSize
operator|<=
name|result
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|float
name|f2
init|=
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|repeating
operator|=
name|repeating
operator|&&
operator|(
name|f1
operator|==
name|f2
operator|)
expr_stmt|;
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|f2
expr_stmt|;
block|}
name|result
operator|.
name|isRepeating
operator|=
name|repeating
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|utils
operator|.
name|readFloat
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|InStream
name|stream
decl_stmt|;
specifier|private
specifier|final
name|SerializationUtils
name|utils
decl_stmt|;
name|DoubleTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DoubleTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|this
operator|.
name|utils
operator|=
operator|new
name|SerializationUtils
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|data
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DoubleColumnVector
name|result
init|=
operator|(
name|DoubleColumnVector
operator|)
name|previousVector
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|hasNulls
init|=
operator|!
name|result
operator|.
name|noNulls
decl_stmt|;
name|boolean
name|allNulls
init|=
name|hasNulls
decl_stmt|;
if|if
condition|(
name|hasNulls
condition|)
block|{
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
operator|&&
name|batchSize
operator|<=
name|result
operator|.
name|isNull
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|allNulls
operator|=
name|allNulls
operator|&
name|result
operator|.
name|isNull
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|allNulls
condition|)
block|{
name|result
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
name|result
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// some nulls
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|batchSize
operator|<=
name|result
operator|.
name|isNull
operator|.
name|length
operator|&&
name|batchSize
operator|<=
name|result
operator|.
name|vector
operator|.
name|length
operator|&&
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|utils
operator|.
name|readDouble
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is not present then set NaN
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|Double
operator|.
name|NaN
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// no nulls
name|boolean
name|repeating
init|=
operator|(
name|batchSize
operator|>
literal|1
operator|)
decl_stmt|;
specifier|final
name|double
name|d1
init|=
name|utils
operator|.
name|readDouble
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|result
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|d1
expr_stmt|;
comment|// conditions to ensure bounds checks skips
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|batchSize
operator|&&
name|batchSize
operator|<=
name|result
operator|.
name|vector
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|double
name|d2
init|=
name|utils
operator|.
name|readDouble
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|repeating
operator|=
name|repeating
operator|&&
operator|(
name|d1
operator|==
name|d2
operator|)
expr_stmt|;
name|result
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|d2
expr_stmt|;
block|}
name|result
operator|.
name|isRepeating
operator|=
name|repeating
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|len
init|=
name|items
operator|*
literal|8
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|len
operator|-=
name|stream
operator|.
name|skip
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|BinaryTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|InStream
name|stream
decl_stmt|;
specifier|protected
name|IntegerReader
name|lengths
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|LongColumnVector
name|scratchlcv
decl_stmt|;
name|BinaryTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BinaryTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|scratchlcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|data
expr_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|length
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesColumnVector
name|result
init|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|BytesColumnVectorUtil
operator|.
name|readOrcByteArrays
argument_list|(
name|stream
argument_list|,
name|lengths
argument_list|,
name|scratchlcv
argument_list|,
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|lengthToSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|lengthToSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|lengthToSkip
operator|>
literal|0
condition|)
block|{
name|lengthToSkip
operator|-=
name|stream
operator|.
name|skip
argument_list|(
name|lengthToSkip
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|TimestampTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|IntegerReader
name|data
init|=
literal|null
decl_stmt|;
specifier|protected
name|IntegerReader
name|nanos
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|skipCorrupt
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|baseTimestampMap
decl_stmt|;
specifier|private
name|long
name|base_timestamp
decl_stmt|;
specifier|private
specifier|final
name|TimeZone
name|readerTimeZone
decl_stmt|;
specifier|private
name|TimeZone
name|writerTimeZone
decl_stmt|;
specifier|private
name|boolean
name|hasSameTZRules
decl_stmt|;
name|TimestampTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|TimestampTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|presentStream
parameter_list|,
name|InStream
name|dataStream
parameter_list|,
name|InStream
name|nanosStream
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|presentStream
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipCorrupt
operator|=
name|skipCorrupt
expr_stmt|;
name|this
operator|.
name|baseTimestampMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|readerTimeZone
operator|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
expr_stmt|;
name|this
operator|.
name|writerTimeZone
operator|=
name|readerTimeZone
expr_stmt|;
name|this
operator|.
name|hasSameTZRules
operator|=
name|writerTimeZone
operator|.
name|hasSameRules
argument_list|(
name|readerTimeZone
argument_list|)
expr_stmt|;
name|this
operator|.
name|base_timestamp
operator|=
name|getBaseTimestamp
argument_list|(
name|readerTimeZone
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataStream
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|data
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|dataStream
argument_list|,
literal|true
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nanosStream
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nanos
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|nanosStream
argument_list|,
literal|false
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|data
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|nanos
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|SECONDARY
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|base_timestamp
operator|=
name|getBaseTimestamp
argument_list|(
name|stripeFooter
operator|.
name|getWriterTimezone
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|getBaseTimestamp
parameter_list|(
name|String
name|timeZoneId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// to make sure new readers read old files in the same way
if|if
condition|(
name|timeZoneId
operator|==
literal|null
operator|||
name|timeZoneId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|timeZoneId
operator|=
name|readerTimeZone
operator|.
name|getID
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|baseTimestampMap
operator|.
name|containsKey
argument_list|(
name|timeZoneId
argument_list|)
condition|)
block|{
name|writerTimeZone
operator|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|timeZoneId
argument_list|)
expr_stmt|;
name|hasSameTZRules
operator|=
name|writerTimeZone
operator|.
name|hasSameRules
argument_list|(
name|readerTimeZone
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
name|sdf
operator|.
name|setTimeZone
argument_list|(
name|writerTimeZone
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|epoch
init|=
name|sdf
operator|.
name|parse
argument_list|(
name|WriterImpl
operator|.
name|BASE_TIMESTAMP_STRING
argument_list|)
operator|.
name|getTime
argument_list|()
operator|/
name|WriterImpl
operator|.
name|MILLIS_PER_SECOND
decl_stmt|;
name|baseTimestampMap
operator|.
name|put
argument_list|(
name|timeZoneId
argument_list|,
name|epoch
argument_list|)
expr_stmt|;
return|return
name|epoch
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to create base timestamp"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|sdf
operator|.
name|setTimeZone
argument_list|(
name|readerTimeZone
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|baseTimestampMap
operator|.
name|get
argument_list|(
name|timeZoneId
argument_list|)
return|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|data
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|nanos
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|TimestampColumnVector
name|result
init|=
operator|(
name|TimestampColumnVector
operator|)
name|previousVector
decl_stmt|;
name|super
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|long
name|millis
init|=
name|data
operator|.
name|next
argument_list|()
operator|+
name|base_timestamp
decl_stmt|;
name|int
name|newNanos
init|=
name|parseNanos
argument_list|(
name|nanos
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|millis
operator|<
literal|0
operator|&&
name|newNanos
operator|!=
literal|0
condition|)
block|{
name|millis
operator|-=
literal|1
expr_stmt|;
block|}
name|millis
operator|*=
name|WriterImpl
operator|.
name|MILLIS_PER_SECOND
expr_stmt|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
comment|// If reader and writer time zones have different rules, adjust the timezone difference
comment|// between reader and writer taking day light savings into account.
if|if
condition|(
operator|!
name|hasSameTZRules
condition|)
block|{
name|offset
operator|=
name|writerTimeZone
operator|.
name|getOffset
argument_list|(
name|millis
argument_list|)
operator|-
name|readerTimeZone
operator|.
name|getOffset
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
name|long
name|adjustedMillis
init|=
name|millis
operator|+
name|offset
decl_stmt|;
comment|// Sometimes the reader timezone might have changed after adding the adjustedMillis.
comment|// To account for that change, check for any difference in reader timezone after
comment|// adding adjustedMillis. If so use the new offset (offset at adjustedMillis point of time).
if|if
condition|(
operator|!
name|hasSameTZRules
operator|&&
operator|(
name|readerTimeZone
operator|.
name|getOffset
argument_list|(
name|millis
argument_list|)
operator|!=
name|readerTimeZone
operator|.
name|getOffset
argument_list|(
name|adjustedMillis
argument_list|)
operator|)
condition|)
block|{
name|long
name|newOffset
init|=
name|writerTimeZone
operator|.
name|getOffset
argument_list|(
name|millis
argument_list|)
operator|-
name|readerTimeZone
operator|.
name|getOffset
argument_list|(
name|adjustedMillis
argument_list|)
decl_stmt|;
name|adjustedMillis
operator|=
name|millis
operator|+
name|newOffset
expr_stmt|;
block|}
name|result
operator|.
name|time
index|[
name|i
index|]
operator|=
name|adjustedMillis
expr_stmt|;
name|result
operator|.
name|nanos
index|[
name|i
index|]
operator|=
name|newNanos
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isRepeating
operator|&&
name|i
operator|!=
literal|0
operator|&&
operator|(
name|result
operator|.
name|time
index|[
literal|0
index|]
operator|!=
name|result
operator|.
name|time
index|[
name|i
index|]
operator|||
name|result
operator|.
name|nanos
index|[
literal|0
index|]
operator|!=
name|result
operator|.
name|nanos
index|[
name|i
index|]
operator|)
condition|)
block|{
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|int
name|parseNanos
parameter_list|(
name|long
name|serialized
parameter_list|)
block|{
name|int
name|zeros
init|=
literal|7
operator|&
operator|(
name|int
operator|)
name|serialized
decl_stmt|;
name|int
name|result
init|=
call|(
name|int
call|)
argument_list|(
name|serialized
operator|>>>
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|zeros
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|zeros
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|*=
literal|10
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|data
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|nanos
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DateTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|IntegerReader
name|reader
init|=
literal|null
decl_stmt|;
name|DateTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DateTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|data
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LongColumnVector
name|result
init|=
operator|(
name|LongColumnVector
operator|)
name|previousVector
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
name|reader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|vector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DecimalTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|InStream
name|valueStream
decl_stmt|;
specifier|protected
name|IntegerReader
name|scaleReader
init|=
literal|null
decl_stmt|;
specifier|private
name|int
index|[]
name|scratchScaleVector
decl_stmt|;
specifier|private
specifier|final
name|int
name|precision
decl_stmt|;
specifier|private
specifier|final
name|int
name|scale
decl_stmt|;
name|DecimalTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DecimalTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|valueStream
parameter_list|,
name|InStream
name|scaleStream
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|this
operator|.
name|scratchScaleVector
operator|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
expr_stmt|;
name|this
operator|.
name|valueStream
operator|=
name|valueStream
expr_stmt|;
if|if
condition|(
name|scaleStream
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|scaleReader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|scaleStream
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|valueStream
operator|=
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
expr_stmt|;
name|scaleReader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|SECONDARY
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|valueStream
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|scaleReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DecimalColumnVector
name|result
init|=
operator|(
name|DecimalColumnVector
operator|)
name|previousVector
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchSize
operator|>
name|scratchScaleVector
operator|.
name|length
condition|)
block|{
name|scratchScaleVector
operator|=
operator|new
name|int
index|[
operator|(
name|int
operator|)
name|batchSize
index|]
expr_stmt|;
block|}
comment|// read the scales
name|scaleReader
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|scratchScaleVector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// Read value entries based on isNull entries
if|if
condition|(
name|result
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|batchSize
condition|;
operator|++
name|r
control|)
block|{
name|BigInteger
name|bInt
init|=
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bInt
argument_list|,
name|scratchScaleVector
index|[
name|r
index|]
argument_list|)
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|r
argument_list|,
name|dec
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|result
operator|.
name|isRepeating
operator|||
operator|!
name|result
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|batchSize
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|BigInteger
name|bInt
init|=
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bInt
argument_list|,
name|scratchScaleVector
index|[
name|r
index|]
argument_list|)
decl_stmt|;
name|result
operator|.
name|set
argument_list|(
name|r
argument_list|,
name|dec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
name|i
operator|++
control|)
block|{
name|SerializationUtils
operator|.
name|readBigInteger
argument_list|(
name|valueStream
argument_list|)
expr_stmt|;
block|}
name|scaleReader
operator|.
name|skip
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A tree reader that will read string columns. At the start of the    * stripe, it creates an internal reader based on whether a direct or    * dictionary encoding was used.    */
specifier|public
specifier|static
class|class
name|StringTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
name|TreeReader
name|reader
decl_stmt|;
name|StringTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|StringTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|InStream
name|dictionary
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|DIRECT
case|:
case|case
name|DIRECT_V2
case|:
name|reader
operator|=
operator|new
name|StringDirectTreeReader
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|,
name|data
argument_list|,
name|length
argument_list|,
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DICTIONARY
case|:
case|case
name|DICTIONARY_V2
case|:
name|reader
operator|=
operator|new
name|StringDictionaryTreeReader
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|,
name|data
argument_list|,
name|length
argument_list|,
name|dictionary
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported encoding "
operator|+
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|checkEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// For each stripe, checks the encoding and initializes the appropriate
comment|// reader
switch|switch
condition|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|DIRECT
case|:
case|case
name|DIRECT_V2
case|:
name|reader
operator|=
operator|new
name|StringDirectTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
break|break;
case|case
name|DICTIONARY
case|:
case|case
name|DICTIONARY_V2
case|:
name|reader
operator|=
operator|new
name|StringDictionaryTreeReader
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported encoding "
operator|+
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|)
throw|;
block|}
name|reader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skipRows
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
comment|// This class collects together very similar methods for reading an ORC vector of byte arrays and
comment|// creating the BytesColumnVector.
comment|//
specifier|public
specifier|static
class|class
name|BytesColumnVectorUtil
block|{
specifier|private
specifier|static
name|byte
index|[]
name|commonReadByteArrays
parameter_list|(
name|InStream
name|stream
parameter_list|,
name|IntegerReader
name|lengths
parameter_list|,
name|LongColumnVector
name|scratchlcv
parameter_list|,
name|BytesColumnVector
name|result
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Read lengths
name|scratchlcv
operator|.
name|isNull
operator|=
name|result
operator|.
name|isNull
expr_stmt|;
comment|// Notice we are replacing the isNull vector here...
name|lengths
operator|.
name|nextVector
argument_list|(
name|scratchlcv
argument_list|,
name|scratchlcv
operator|.
name|vector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|int
name|totalLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|totalLength
operator|+=
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|totalLength
operator|=
call|(
name|int
call|)
argument_list|(
name|batchSize
operator|*
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Read all the strings for this batch
name|byte
index|[]
name|allBytes
init|=
operator|new
name|byte
index|[
name|totalLength
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|totalLength
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|bytesRead
init|=
name|stream
operator|.
name|read
argument_list|(
name|allBytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Can't finish byte read from "
operator|+
name|stream
argument_list|)
throw|;
block|}
name|len
operator|-=
name|bytesRead
expr_stmt|;
name|offset
operator|+=
name|bytesRead
expr_stmt|;
block|}
return|return
name|allBytes
return|;
block|}
comment|// This method has the common code for reading in bytes into a BytesColumnVector.
specifier|public
specifier|static
name|void
name|readOrcByteArrays
parameter_list|(
name|InStream
name|stream
parameter_list|,
name|IntegerReader
name|lengths
parameter_list|,
name|LongColumnVector
name|scratchlcv
parameter_list|,
name|BytesColumnVector
name|result
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
operator|(
name|result
operator|.
name|isRepeating
operator|&&
name|result
operator|.
name|isNull
index|[
literal|0
index|]
operator|)
condition|)
block|{
name|byte
index|[]
name|allBytes
init|=
name|commonReadByteArrays
argument_list|(
name|stream
argument_list|,
name|lengths
argument_list|,
name|scratchlcv
argument_list|,
name|result
argument_list|,
operator|(
name|int
operator|)
name|batchSize
argument_list|)
decl_stmt|;
comment|// Too expensive to figure out 'repeating' by comparisons.
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isRepeating
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
name|offset
argument_list|,
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
name|offset
argument_list|,
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|allBytes
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * A reader for string columns that are direct encoded in the current    * stripe.    */
specifier|public
specifier|static
class|class
name|StringDirectTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
specifier|static
specifier|final
name|HadoopShims
name|SHIMS
init|=
name|HadoopShims
operator|.
name|Factory
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|protected
name|InStream
name|stream
decl_stmt|;
specifier|protected
name|HadoopShims
operator|.
name|TextReaderShim
name|data
decl_stmt|;
specifier|protected
name|IntegerReader
name|lengths
decl_stmt|;
specifier|private
specifier|final
name|LongColumnVector
name|scratchlcv
decl_stmt|;
name|StringDirectTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|StringDirectTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|this
operator|.
name|scratchlcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|data
expr_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|encoding
argument_list|,
name|length
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|SHIMS
operator|.
name|getTextReaderShim
argument_list|(
name|this
operator|.
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|&&
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
decl_stmt|;
name|stream
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|data
operator|=
name|SHIMS
operator|.
name|getTextReaderShim
argument_list|(
name|this
operator|.
name|stream
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// don't seek data stream
name|lengths
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesColumnVector
name|result
init|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|BytesColumnVectorUtil
operator|.
name|readOrcByteArrays
argument_list|(
name|stream
argument_list|,
name|lengths
argument_list|,
name|scratchlcv
argument_list|,
name|result
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|lengthToSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|lengthToSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|lengthToSkip
operator|>
literal|0
condition|)
block|{
name|lengthToSkip
operator|-=
name|stream
operator|.
name|skip
argument_list|(
name|lengthToSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|IntegerReader
name|getLengths
parameter_list|()
block|{
return|return
name|lengths
return|;
block|}
specifier|public
name|InStream
name|getStream
parameter_list|()
block|{
return|return
name|stream
return|;
block|}
block|}
comment|/**    * A reader for string columns that are dictionary encoded in the current    * stripe.    */
specifier|public
specifier|static
class|class
name|StringDictionaryTreeReader
extends|extends
name|TreeReader
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTE_ARRAY
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|private
name|DynamicByteArray
name|dictionaryBuffer
decl_stmt|;
specifier|private
name|int
index|[]
name|dictionaryOffsets
decl_stmt|;
specifier|protected
name|IntegerReader
name|reader
decl_stmt|;
specifier|private
name|byte
index|[]
name|dictionaryBufferInBytesCache
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|LongColumnVector
name|scratchlcv
decl_stmt|;
name|StringDictionaryTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|StringDictionaryTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|InStream
name|dictionary
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|)
expr_stmt|;
name|scratchlcv
operator|=
operator|new
name|LongColumnVector
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|data
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|readDictionaryStream
argument_list|(
name|dictionary
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|!=
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|readDictionaryLengthStream
argument_list|(
name|length
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY
operator|&&
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DICTIONARY_V2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
comment|// read the dictionary blob
name|StreamName
name|name
init|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DICTIONARY_DATA
argument_list|)
decl_stmt|;
name|InStream
name|in
init|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|readDictionaryStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// read the lengths
name|name
operator|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
expr_stmt|;
name|in
operator|=
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|readDictionaryLengthStream
argument_list|(
name|in
argument_list|,
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
argument_list|)
expr_stmt|;
comment|// set up the row reader
name|name
operator|=
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|reader
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readDictionaryLengthStream
parameter_list|(
name|InStream
name|in
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|dictionarySize
init|=
name|encoding
operator|.
name|getDictionarySize
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
comment|// Guard against empty LENGTH stream.
name|IntegerReader
name|lenReader
init|=
name|createIntegerReader
argument_list|(
name|encoding
operator|.
name|getKind
argument_list|()
argument_list|,
name|in
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|dictionaryOffsets
operator|==
literal|null
operator|||
name|dictionaryOffsets
operator|.
name|length
operator|<
name|dictionarySize
operator|+
literal|1
condition|)
block|{
name|dictionaryOffsets
operator|=
operator|new
name|int
index|[
name|dictionarySize
operator|+
literal|1
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dictionarySize
condition|;
operator|++
name|i
control|)
block|{
name|dictionaryOffsets
index|[
name|i
index|]
operator|=
name|offset
expr_stmt|;
name|offset
operator|+=
operator|(
name|int
operator|)
name|lenReader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|dictionaryOffsets
index|[
name|dictionarySize
index|]
operator|=
name|offset
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|readDictionaryStream
parameter_list|(
name|InStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
comment|// Guard against empty dictionary stream.
if|if
condition|(
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dictionaryBuffer
operator|=
operator|new
name|DynamicByteArray
argument_list|(
literal|64
argument_list|,
name|in
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|dictionaryBuffer
operator|.
name|readAll
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Since its start of strip invalidate the cache.
name|dictionaryBufferInBytesCache
operator|=
literal|null
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dictionaryBuffer
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|seek
parameter_list|(
name|PositionProvider
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|reader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesColumnVector
name|result
init|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|length
decl_stmt|;
comment|// Read present/isNull stream
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionaryBuffer
operator|!=
literal|null
condition|)
block|{
comment|// Load dictionaryBuffer into cache.
if|if
condition|(
name|dictionaryBufferInBytesCache
operator|==
literal|null
condition|)
block|{
name|dictionaryBufferInBytesCache
operator|=
name|dictionaryBuffer
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Read string offsets
name|scratchlcv
operator|.
name|isNull
operator|=
name|result
operator|.
name|isNull
expr_stmt|;
name|scratchlcv
operator|.
name|ensureSize
argument_list|(
operator|(
name|int
operator|)
name|batchSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|nextVector
argument_list|(
name|scratchlcv
argument_list|,
name|scratchlcv
operator|.
name|vector
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isRepeating
condition|)
block|{
comment|// The vector has non-repeating strings. Iterate thru the batch
comment|// and set strings one by one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|scratchlcv
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|offset
operator|=
name|dictionaryOffsets
index|[
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
index|]
expr_stmt|;
name|length
operator|=
name|getDictionaryEntryLength
argument_list|(
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is null then set offset and length to zero (null string)
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// If the value is repeating then just set the first value in the
comment|// vector and set the isRepeating flag to true. No need to iterate thru and
comment|// set all the elements to the same value
name|offset
operator|=
name|dictionaryOffsets
index|[
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
index|]
expr_stmt|;
name|length
operator|=
name|getDictionaryEntryLength
argument_list|(
operator|(
name|int
operator|)
name|scratchlcv
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|dictionaryBufferInBytesCache
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|isRepeating
operator|=
name|scratchlcv
operator|.
name|isRepeating
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dictionaryOffsets
operator|==
literal|null
condition|)
block|{
comment|// Entire stripe contains null strings.
name|result
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|result
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// stripe contains nulls and empty strings
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|int
name|getDictionaryEntryLength
parameter_list|(
name|int
name|entry
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
specifier|final
name|int
name|length
decl_stmt|;
comment|// if it isn't the last entry, subtract the offsets otherwise use
comment|// the buffer length.
if|if
condition|(
name|entry
operator|<
name|dictionaryOffsets
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|length
operator|=
name|dictionaryOffsets
index|[
name|entry
operator|+
literal|1
index|]
operator|-
name|offset
expr_stmt|;
block|}
else|else
block|{
name|length
operator|=
name|dictionaryBuffer
operator|.
name|size
argument_list|()
operator|-
name|offset
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|reader
operator|.
name|skip
argument_list|(
name|countNonNulls
argument_list|(
name|items
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IntegerReader
name|getReader
parameter_list|()
block|{
return|return
name|reader
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CharTreeReader
extends|extends
name|StringTreeReader
block|{
name|int
name|maxLength
decl_stmt|;
name|CharTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
name|maxLength
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|CharTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|InStream
name|dictionary
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|,
name|data
argument_list|,
name|length
argument_list|,
name|dictionary
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the vector of strings from StringTreeReader, then make a 2nd pass to
comment|// adjust down the length (right trim and truncate) if necessary.
name|super
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|result
init|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
decl_stmt|;
name|int
name|adjustedDownLen
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
name|result
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|length
index|[
literal|0
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
literal|0
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|rightTrimAndTruncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|VarcharTreeReader
extends|extends
name|StringTreeReader
block|{
name|int
name|maxLength
decl_stmt|;
name|VarcharTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|columnId
argument_list|,
name|maxLength
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|VarcharTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|InStream
name|present
parameter_list|,
name|InStream
name|data
parameter_list|,
name|InStream
name|length
parameter_list|,
name|InStream
name|dictionary
parameter_list|,
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|,
name|present
argument_list|,
name|data
argument_list|,
name|length
argument_list|,
name|dictionary
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get the vector of strings from StringTreeReader, then make a 2nd pass to
comment|// adjust down the length (truncate) if necessary.
name|super
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|BytesColumnVector
name|result
init|=
operator|(
name|BytesColumnVector
operator|)
name|previousVector
decl_stmt|;
name|int
name|adjustedDownLen
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isRepeating
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
name|result
operator|.
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|length
index|[
literal|0
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
literal|0
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|vector
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|start
index|[
literal|0
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isNull
index|[
name|i
index|]
condition|)
block|{
name|adjustedDownLen
operator|=
name|StringExpr
operator|.
name|truncate
argument_list|(
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|length
index|[
name|i
index|]
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|adjustedDownLen
operator|<
name|result
operator|.
name|length
index|[
name|i
index|]
condition|)
block|{
name|result
operator|.
name|setRef
argument_list|(
name|i
argument_list|,
name|result
operator|.
name|vector
index|[
name|i
index|]
argument_list|,
name|result
operator|.
name|start
index|[
name|i
index|]
argument_list|,
name|adjustedDownLen
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
specifier|protected
specifier|static
class|class
name|StructTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
specifier|final
name|TreeReader
index|[]
name|fields
decl_stmt|;
specifier|protected
name|StructTreeReader
parameter_list|(
name|int
name|columnId
parameter_list|,
name|TypeDescription
name|readerSchema
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|columnId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|childrenTypes
init|=
name|readerSchema
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|TreeReader
index|[
name|childrenTypes
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|TypeDescription
name|subtype
init|=
name|childrenTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|this
operator|.
name|fields
index|[
name|i
index|]
operator|=
name|createTreeReader
argument_list|(
name|subtype
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|kid
range|:
name|fields
control|)
block|{
if|if
condition|(
name|kid
operator|!=
literal|null
condition|)
block|{
name|kid
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextBatch
parameter_list|(
name|VectorizedRowBatch
name|batch
parameter_list|,
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
operator|&&
operator|(
name|vectorColumnCount
operator|==
operator|-
literal|1
operator|||
name|i
operator|<
name|vectorColumnCount
operator|)
condition|;
operator|++
name|i
control|)
block|{
name|batch
operator|.
name|cols
index|[
name|i
index|]
operator|.
name|reset
argument_list|()
expr_stmt|;
name|batch
operator|.
name|cols
index|[
name|i
index|]
operator|.
name|ensureSize
argument_list|(
operator|(
name|int
operator|)
name|batchSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fields
index|[
name|i
index|]
operator|.
name|nextVector
argument_list|(
name|batch
operator|.
name|cols
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|nextVector
argument_list|(
name|previousVector
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|StructColumnVector
name|result
init|=
operator|(
name|StructColumnVector
operator|)
name|previousVector
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
operator|(
name|result
operator|.
name|isRepeating
operator|&&
name|result
operator|.
name|isNull
index|[
literal|0
index|]
operator|)
condition|)
block|{
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// Read all the members of struct as column vectors
name|boolean
index|[]
name|mask
init|=
name|result
operator|.
name|noNulls
condition|?
literal|null
else|:
name|result
operator|.
name|isNull
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|fields
operator|.
name|length
condition|;
name|f
operator|++
control|)
block|{
if|if
condition|(
name|fields
index|[
name|f
index|]
operator|!=
literal|null
condition|)
block|{
name|fields
index|[
name|f
index|]
operator|.
name|nextVector
argument_list|(
name|result
operator|.
name|fields
index|[
name|f
index|]
argument_list|,
name|mask
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|skipRows
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|UnionTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
specifier|final
name|TreeReader
index|[]
name|fields
decl_stmt|;
specifier|protected
name|RunLengthByteReader
name|tags
decl_stmt|;
specifier|protected
name|UnionTreeReader
parameter_list|(
name|int
name|fileColumn
parameter_list|,
name|TypeDescription
name|readerSchema
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fileColumn
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TypeDescription
argument_list|>
name|childrenTypes
init|=
name|readerSchema
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|int
name|fieldCount
init|=
name|childrenTypes
operator|.
name|size
argument_list|()
decl_stmt|;
name|this
operator|.
name|fields
operator|=
operator|new
name|TreeReader
index|[
name|fieldCount
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
operator|++
name|i
control|)
block|{
name|TypeDescription
name|subtype
init|=
name|childrenTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|this
operator|.
name|fields
index|[
name|i
index|]
operator|=
name|createTreeReader
argument_list|(
name|subtype
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|tags
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|kid
range|:
name|fields
control|)
block|{
name|kid
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previousVector
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|UnionColumnVector
name|result
init|=
operator|(
name|UnionColumnVector
operator|)
name|previousVector
decl_stmt|;
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
operator|(
name|result
operator|.
name|isRepeating
operator|&&
name|result
operator|.
name|isNull
index|[
literal|0
index|]
operator|)
condition|)
block|{
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|tags
operator|.
name|nextVector
argument_list|(
name|result
operator|.
name|noNulls
condition|?
literal|null
else|:
name|result
operator|.
name|isNull
argument_list|,
name|result
operator|.
name|tags
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|ignore
init|=
operator|new
name|boolean
index|[
operator|(
name|int
operator|)
name|batchSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|result
operator|.
name|fields
operator|.
name|length
condition|;
operator|++
name|f
control|)
block|{
comment|// build the ignore list for this tag
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|batchSize
condition|;
operator|++
name|r
control|)
block|{
name|ignore
index|[
name|r
index|]
operator|=
operator|(
operator|!
name|result
operator|.
name|noNulls
operator|&&
name|result
operator|.
name|isNull
index|[
name|r
index|]
operator|)
operator|||
name|result
operator|.
name|tags
index|[
name|r
index|]
operator|!=
name|f
expr_stmt|;
block|}
name|fields
index|[
name|f
index|]
operator|.
name|nextVector
argument_list|(
name|result
operator|.
name|fields
index|[
name|f
index|]
argument_list|,
name|ignore
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|tags
operator|=
operator|new
name|RunLengthByteReader
argument_list|(
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|DATA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TreeReader
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
index|[]
name|counts
init|=
operator|new
name|long
index|[
name|fields
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|counts
index|[
name|tags
operator|.
name|next
argument_list|()
index|]
operator|+=
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|counts
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|fields
index|[
name|i
index|]
operator|.
name|skipRows
argument_list|(
name|counts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ListTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
specifier|final
name|TreeReader
name|elementReader
decl_stmt|;
specifier|protected
name|IntegerReader
name|lengths
init|=
literal|null
decl_stmt|;
specifier|protected
name|ListTreeReader
parameter_list|(
name|int
name|fileColumn
parameter_list|,
name|TypeDescription
name|readerSchema
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fileColumn
argument_list|)
expr_stmt|;
name|TypeDescription
name|elementType
init|=
name|readerSchema
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|elementReader
operator|=
name|createTreeReader
argument_list|(
name|elementType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|elementReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previous
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|ListColumnVector
name|result
init|=
operator|(
name|ListColumnVector
operator|)
name|previous
decl_stmt|;
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// if we have some none-null values, then read them
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
operator|(
name|result
operator|.
name|isRepeating
operator|&&
name|result
operator|.
name|isNull
index|[
literal|0
index|]
operator|)
condition|)
block|{
name|lengths
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|lengths
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// even with repeating lengths, the list doesn't repeat
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// build the offsets vector and figure out how many children to read
name|result
operator|.
name|childCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|batchSize
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
name|result
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|result
operator|.
name|offsets
index|[
name|r
index|]
operator|=
name|result
operator|.
name|childCount
expr_stmt|;
name|result
operator|.
name|childCount
operator|+=
name|result
operator|.
name|lengths
index|[
name|r
index|]
expr_stmt|;
block|}
block|}
name|result
operator|.
name|child
operator|.
name|ensureSize
argument_list|(
name|result
operator|.
name|childCount
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|elementReader
operator|.
name|nextVector
argument_list|(
name|result
operator|.
name|child
argument_list|,
literal|null
argument_list|,
name|result
operator|.
name|childCount
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|elementReader
operator|!=
literal|null
condition|)
block|{
name|elementReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|childSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|childSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|elementReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MapTreeReader
extends|extends
name|TreeReader
block|{
specifier|protected
specifier|final
name|TreeReader
name|keyReader
decl_stmt|;
specifier|protected
specifier|final
name|TreeReader
name|valueReader
decl_stmt|;
specifier|protected
name|IntegerReader
name|lengths
init|=
literal|null
decl_stmt|;
specifier|protected
name|MapTreeReader
parameter_list|(
name|int
name|fileColumn
parameter_list|,
name|TypeDescription
name|readerSchema
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fileColumn
argument_list|)
expr_stmt|;
name|TypeDescription
name|keyType
init|=
name|readerSchema
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TypeDescription
name|valueType
init|=
name|readerSchema
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|keyReader
operator|=
name|createTreeReader
argument_list|(
name|keyType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
name|valueReader
operator|=
name|createTreeReader
argument_list|(
name|valueType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|seek
parameter_list|(
name|PositionProvider
index|[]
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|lengths
operator|.
name|seek
argument_list|(
name|index
index|[
name|columnId
index|]
argument_list|)
expr_stmt|;
name|keyReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|valueReader
operator|.
name|seek
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nextVector
parameter_list|(
name|ColumnVector
name|previous
parameter_list|,
name|boolean
index|[]
name|isNull
parameter_list|,
specifier|final
name|int
name|batchSize
parameter_list|)
throws|throws
name|IOException
block|{
name|MapColumnVector
name|result
init|=
operator|(
name|MapColumnVector
operator|)
name|previous
decl_stmt|;
name|super
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|isNull
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
operator|(
name|result
operator|.
name|isRepeating
operator|&&
name|result
operator|.
name|isNull
index|[
literal|0
index|]
operator|)
condition|)
block|{
name|lengths
operator|.
name|nextVector
argument_list|(
name|result
argument_list|,
name|result
operator|.
name|lengths
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
comment|// even with repeating lengths, the map doesn't repeat
name|result
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// build the offsets vector and figure out how many children to read
name|result
operator|.
name|childCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|batchSize
condition|;
operator|++
name|r
control|)
block|{
if|if
condition|(
name|result
operator|.
name|noNulls
operator|||
operator|!
name|result
operator|.
name|isNull
index|[
name|r
index|]
condition|)
block|{
name|result
operator|.
name|offsets
index|[
name|r
index|]
operator|=
name|result
operator|.
name|childCount
expr_stmt|;
name|result
operator|.
name|childCount
operator|+=
name|result
operator|.
name|lengths
index|[
name|r
index|]
expr_stmt|;
block|}
block|}
name|result
operator|.
name|keys
operator|.
name|ensureSize
argument_list|(
name|result
operator|.
name|childCount
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|result
operator|.
name|values
operator|.
name|ensureSize
argument_list|(
name|result
operator|.
name|childCount
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|keyReader
operator|.
name|nextVector
argument_list|(
name|result
operator|.
name|keys
argument_list|,
literal|null
argument_list|,
name|result
operator|.
name|childCount
argument_list|)
expr_stmt|;
name|valueReader
operator|.
name|nextVector
argument_list|(
name|result
operator|.
name|values
argument_list|,
literal|null
argument_list|,
name|result
operator|.
name|childCount
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|checkEncoding
parameter_list|(
name|OrcProto
operator|.
name|ColumnEncoding
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|getKind
argument_list|()
operator|!=
name|OrcProto
operator|.
name|ColumnEncoding
operator|.
name|Kind
operator|.
name|DIRECT_V2
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
operator|+
literal|" in column "
operator|+
name|columnId
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|startStripe
parameter_list|(
name|Map
argument_list|<
name|StreamName
argument_list|,
name|InStream
argument_list|>
name|streams
parameter_list|,
name|OrcProto
operator|.
name|StripeFooter
name|stripeFooter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
name|lengths
operator|=
name|createIntegerReader
argument_list|(
name|stripeFooter
operator|.
name|getColumnsList
argument_list|()
operator|.
name|get
argument_list|(
name|columnId
argument_list|)
operator|.
name|getKind
argument_list|()
argument_list|,
name|streams
operator|.
name|get
argument_list|(
operator|new
name|StreamName
argument_list|(
name|columnId
argument_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
operator|.
name|LENGTH
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyReader
operator|!=
literal|null
condition|)
block|{
name|keyReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueReader
operator|!=
literal|null
condition|)
block|{
name|valueReader
operator|.
name|startStripe
argument_list|(
name|streams
argument_list|,
name|stripeFooter
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|skipRows
parameter_list|(
name|long
name|items
parameter_list|)
throws|throws
name|IOException
block|{
name|items
operator|=
name|countNonNulls
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|long
name|childSkip
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
condition|;
operator|++
name|i
control|)
block|{
name|childSkip
operator|+=
name|lengths
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|keyReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
name|valueReader
operator|.
name|skipRows
argument_list|(
name|childSkip
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|TreeReader
name|createTreeReader
parameter_list|(
name|TypeDescription
name|readerType
parameter_list|,
name|SchemaEvolution
name|evolution
parameter_list|,
name|boolean
index|[]
name|included
parameter_list|,
name|boolean
name|skipCorrupt
parameter_list|)
throws|throws
name|IOException
block|{
name|TypeDescription
name|fileType
init|=
name|evolution
operator|.
name|getFileType
argument_list|(
name|readerType
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
literal|null
operator|||
operator|(
name|included
operator|!=
literal|null
operator|&&
operator|!
name|included
index|[
name|readerType
operator|.
name|getId
argument_list|()
index|]
operator|)
condition|)
block|{
return|return
operator|new
name|NullTreeReader
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|TypeDescription
operator|.
name|Category
name|readerTypeCategory
init|=
name|readerType
operator|.
name|getCategory
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fileType
operator|.
name|equals
argument_list|(
name|readerType
argument_list|)
operator|&&
operator|(
name|readerTypeCategory
operator|!=
name|TypeDescription
operator|.
name|Category
operator|.
name|STRUCT
operator|&&
name|readerTypeCategory
operator|!=
name|TypeDescription
operator|.
name|Category
operator|.
name|MAP
operator|&&
name|readerTypeCategory
operator|!=
name|TypeDescription
operator|.
name|Category
operator|.
name|LIST
operator|&&
name|readerTypeCategory
operator|!=
name|TypeDescription
operator|.
name|Category
operator|.
name|UNION
operator|)
condition|)
block|{
comment|// We only convert complex children.
return|return
name|ConvertTreeReaderFactory
operator|.
name|createConvertTreeReader
argument_list|(
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
block|}
switch|switch
condition|(
name|readerTypeCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|new
name|BooleanTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
operator|new
name|ByteTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|DoubleTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|FloatTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
operator|new
name|ShortTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|)
return|;
case|case
name|INT
case|:
return|return
operator|new
name|IntTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
operator|new
name|LongTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
operator|new
name|StringTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|new
name|CharTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|,
name|readerType
operator|.
name|getMaxLength
argument_list|()
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
operator|new
name|VarcharTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|,
name|readerType
operator|.
name|getMaxLength
argument_list|()
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
operator|new
name|BinaryTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
operator|new
name|TimestampTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|DateTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|new
name|DecimalTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|,
name|readerType
operator|.
name|getPrecision
argument_list|()
argument_list|,
name|readerType
operator|.
name|getScale
argument_list|()
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
operator|new
name|StructTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
operator|new
name|ListTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
operator|new
name|MapTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
case|case
name|UNION
case|:
return|return
operator|new
name|UnionTreeReader
argument_list|(
name|fileType
operator|.
name|getId
argument_list|()
argument_list|,
name|readerType
argument_list|,
name|evolution
argument_list|,
name|included
argument_list|,
name|skipCorrupt
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported type "
operator|+
name|readerTypeCategory
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

