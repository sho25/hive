begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|DynamicIntArray
import|;
end_import

begin_comment
comment|/**  * A memory efficient red-black tree that does not allocate any objects per  * an element. This class is abstract and assumes that the child class  * handles the key and comparisons with the key.  */
end_comment

begin_class
specifier|abstract
class|class
name|RedBlackTree
block|{
specifier|public
specifier|static
specifier|final
name|int
name|NULL
init|=
operator|-
literal|1
decl_stmt|;
comment|// Various values controlling the offset of the data within the array.
specifier|private
specifier|static
specifier|final
name|int
name|LEFT_OFFSET
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RIGHT_OFFSET
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ELEMENT_SIZE
init|=
literal|2
decl_stmt|;
specifier|protected
name|int
name|size
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|DynamicIntArray
name|data
decl_stmt|;
specifier|protected
name|int
name|root
init|=
name|NULL
decl_stmt|;
specifier|protected
name|int
name|lastAdd
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|wasAdd
init|=
literal|false
decl_stmt|;
comment|/**    * Create a set with the given initial capacity.    */
specifier|public
name|RedBlackTree
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|data
operator|=
operator|new
name|DynamicIntArray
argument_list|(
name|initialCapacity
operator|*
name|ELEMENT_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert a new node into the data array, growing the array as necessary.    *    * @return Returns the position of the new node.    */
specifier|private
name|int
name|insert
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|,
name|boolean
name|isRed
parameter_list|)
block|{
name|int
name|position
init|=
name|size
decl_stmt|;
name|size
operator|+=
literal|1
expr_stmt|;
name|setLeft
argument_list|(
name|position
argument_list|,
name|left
argument_list|,
name|isRed
argument_list|)
expr_stmt|;
name|setRight
argument_list|(
name|position
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return
name|position
return|;
block|}
comment|/**    * Compare the value at the given position to the new value.    * @return 0 if the values are the same, -1 if the new value is smaller and    *         1 if the new value is larger.    */
specifier|protected
specifier|abstract
name|int
name|compareValue
parameter_list|(
name|int
name|position
parameter_list|)
function_decl|;
comment|/**    * Is the given node red as opposed to black? To prevent having an extra word    * in the data array, we just the low bit on the left child index.    */
specifier|protected
name|boolean
name|isRed
parameter_list|(
name|int
name|position
parameter_list|)
block|{
return|return
name|position
operator|!=
name|NULL
operator|&&
operator|(
name|data
operator|.
name|get
argument_list|(
name|position
operator|*
name|ELEMENT_SIZE
operator|+
name|LEFT_OFFSET
argument_list|)
operator|&
literal|1
operator|)
operator|==
literal|1
return|;
block|}
comment|/**    * Set the red bit true or false.    */
specifier|private
name|void
name|setRed
parameter_list|(
name|int
name|position
parameter_list|,
name|boolean
name|isRed
parameter_list|)
block|{
name|int
name|offset
init|=
name|position
operator|*
name|ELEMENT_SIZE
operator|+
name|LEFT_OFFSET
decl_stmt|;
if|if
condition|(
name|isRed
condition|)
block|{
name|data
operator|.
name|set
argument_list|(
name|offset
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|offset
argument_list|)
operator||
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|set
argument_list|(
name|offset
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|offset
argument_list|)
operator|&
operator|~
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the left field of the given position.    */
specifier|protected
name|int
name|getLeft
parameter_list|(
name|int
name|position
parameter_list|)
block|{
return|return
name|data
operator|.
name|get
argument_list|(
name|position
operator|*
name|ELEMENT_SIZE
operator|+
name|LEFT_OFFSET
argument_list|)
operator|>>
literal|1
return|;
block|}
comment|/**    * Get the right field of the given position.    */
specifier|protected
name|int
name|getRight
parameter_list|(
name|int
name|position
parameter_list|)
block|{
return|return
name|data
operator|.
name|get
argument_list|(
name|position
operator|*
name|ELEMENT_SIZE
operator|+
name|RIGHT_OFFSET
argument_list|)
return|;
block|}
comment|/**    * Set the left field of the given position.    * Note that we are storing the node color in the low bit of the left pointer.    */
specifier|private
name|void
name|setLeft
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|left
parameter_list|)
block|{
name|int
name|offset
init|=
name|position
operator|*
name|ELEMENT_SIZE
operator|+
name|LEFT_OFFSET
decl_stmt|;
name|data
operator|.
name|set
argument_list|(
name|offset
argument_list|,
operator|(
name|left
operator|<<
literal|1
operator|)
operator||
operator|(
name|data
operator|.
name|get
argument_list|(
name|offset
argument_list|)
operator|&
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the left field of the given position.    * Note that we are storing the node color in the low bit of the left pointer.    */
specifier|private
name|void
name|setLeft
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|left
parameter_list|,
name|boolean
name|isRed
parameter_list|)
block|{
name|int
name|offset
init|=
name|position
operator|*
name|ELEMENT_SIZE
operator|+
name|LEFT_OFFSET
decl_stmt|;
name|data
operator|.
name|set
argument_list|(
name|offset
argument_list|,
operator|(
name|left
operator|<<
literal|1
operator|)
operator||
operator|(
name|isRed
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the right field of the given position.    */
specifier|private
name|void
name|setRight
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|right
parameter_list|)
block|{
name|data
operator|.
name|set
argument_list|(
name|position
operator|*
name|ELEMENT_SIZE
operator|+
name|RIGHT_OFFSET
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert or find a given key in the tree and rebalance the tree correctly.    * Rebalancing restores the red-black aspect of the tree to maintain the    * invariants:    *   1. If a node is red, both of its children are black.    *   2. Each child of a node has the same black height (the number of black    *      nodes between it and the leaves of the tree).    *    * Inserted nodes are at the leaves and are red, therefore there is at most a    * violation of rule 1 at the node we just put in. Instead of always keeping    * the parents, this routine passing down the context.    *    * The fix is broken down into 6 cases (1.{1,2,3} and 2.{1,2,3} that are    * left-right mirror images of each other). See Algorighms by Cormen,    * Leiserson, and Rivest for the explaination of the subcases.    *    * @param node The node that we are fixing right now.    * @param fromLeft Did we come down from the left?    * @param parent Nodes' parent    * @param grandparent Parent's parent    * @param greatGrandparent Grandparent's parent    * @return Does parent also need to be checked and/or fixed?    */
specifier|private
name|boolean
name|add
parameter_list|(
name|int
name|node
parameter_list|,
name|boolean
name|fromLeft
parameter_list|,
name|int
name|parent
parameter_list|,
name|int
name|grandparent
parameter_list|,
name|int
name|greatGrandparent
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
name|NULL
condition|)
block|{
if|if
condition|(
name|root
operator|==
name|NULL
condition|)
block|{
name|lastAdd
operator|=
name|insert
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|root
operator|=
name|lastAdd
expr_stmt|;
name|wasAdd
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|lastAdd
operator|=
name|insert
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|node
operator|=
name|lastAdd
expr_stmt|;
name|wasAdd
operator|=
literal|true
expr_stmt|;
comment|// connect the new node into the tree
if|if
condition|(
name|fromLeft
condition|)
block|{
name|setLeft
argument_list|(
name|parent
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setRight
argument_list|(
name|parent
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|compare
init|=
name|compareValue
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|boolean
name|keepGoing
decl_stmt|;
comment|// Recurse down to find where the node needs to be added
if|if
condition|(
name|compare
operator|<
literal|0
condition|)
block|{
name|keepGoing
operator|=
name|add
argument_list|(
name|getLeft
argument_list|(
name|node
argument_list|)
argument_list|,
literal|true
argument_list|,
name|node
argument_list|,
name|parent
argument_list|,
name|grandparent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compare
operator|>
literal|0
condition|)
block|{
name|keepGoing
operator|=
name|add
argument_list|(
name|getRight
argument_list|(
name|node
argument_list|)
argument_list|,
literal|false
argument_list|,
name|node
argument_list|,
name|parent
argument_list|,
name|grandparent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastAdd
operator|=
name|node
expr_stmt|;
name|wasAdd
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// we don't need to fix the root (because it is always set to black)
if|if
condition|(
name|node
operator|==
name|root
operator|||
operator|!
name|keepGoing
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Do we need to fix this node? Only if there are two reds right under each
comment|// other.
if|if
condition|(
name|isRed
argument_list|(
name|node
argument_list|)
operator|&&
name|isRed
argument_list|(
name|parent
argument_list|)
condition|)
block|{
if|if
condition|(
name|parent
operator|==
name|getLeft
argument_list|(
name|grandparent
argument_list|)
condition|)
block|{
name|int
name|uncle
init|=
name|getRight
argument_list|(
name|grandparent
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRed
argument_list|(
name|uncle
argument_list|)
condition|)
block|{
comment|// case 1.1
name|setRed
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setRed
argument_list|(
name|uncle
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setRed
argument_list|(
name|grandparent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|node
operator|==
name|getRight
argument_list|(
name|parent
argument_list|)
condition|)
block|{
comment|// case 1.2
comment|// swap node and parent
name|int
name|tmp
init|=
name|node
decl_stmt|;
name|node
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
name|tmp
expr_stmt|;
comment|// left-rotate on node
name|setLeft
argument_list|(
name|grandparent
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|setRight
argument_list|(
name|node
argument_list|,
name|getLeft
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|setLeft
argument_list|(
name|parent
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|// case 1.2 and 1.3
name|setRed
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setRed
argument_list|(
name|grandparent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// right-rotate on grandparent
if|if
condition|(
name|greatGrandparent
operator|==
name|NULL
condition|)
block|{
name|root
operator|=
name|parent
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getLeft
argument_list|(
name|greatGrandparent
argument_list|)
operator|==
name|grandparent
condition|)
block|{
name|setLeft
argument_list|(
name|greatGrandparent
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setRight
argument_list|(
name|greatGrandparent
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
name|setLeft
argument_list|(
name|grandparent
argument_list|,
name|getRight
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|setRight
argument_list|(
name|parent
argument_list|,
name|grandparent
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|int
name|uncle
init|=
name|getLeft
argument_list|(
name|grandparent
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRed
argument_list|(
name|uncle
argument_list|)
condition|)
block|{
comment|// case 2.1
name|setRed
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setRed
argument_list|(
name|uncle
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setRed
argument_list|(
name|grandparent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|node
operator|==
name|getLeft
argument_list|(
name|parent
argument_list|)
condition|)
block|{
comment|// case 2.2
comment|// swap node and parent
name|int
name|tmp
init|=
name|node
decl_stmt|;
name|node
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
name|tmp
expr_stmt|;
comment|// right-rotate on node
name|setRight
argument_list|(
name|grandparent
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|setLeft
argument_list|(
name|node
argument_list|,
name|getRight
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|setRight
argument_list|(
name|parent
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|// case 2.2 and 2.3
name|setRed
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setRed
argument_list|(
name|grandparent
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// left-rotate on grandparent
if|if
condition|(
name|greatGrandparent
operator|==
name|NULL
condition|)
block|{
name|root
operator|=
name|parent
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getRight
argument_list|(
name|greatGrandparent
argument_list|)
operator|==
name|grandparent
condition|)
block|{
name|setRight
argument_list|(
name|greatGrandparent
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setLeft
argument_list|(
name|greatGrandparent
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
name|setRight
argument_list|(
name|grandparent
argument_list|,
name|getLeft
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|setLeft
argument_list|(
name|parent
argument_list|,
name|grandparent
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Add the new key to the tree.    * @return true if the element is a new one.    */
specifier|protected
name|boolean
name|add
parameter_list|()
block|{
name|add
argument_list|(
name|root
argument_list|,
literal|false
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasAdd
condition|)
block|{
name|setRed
argument_list|(
name|root
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Get the number of elements in the set.    */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**    * Reset the table to empty.    */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|root
operator|=
name|NULL
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the buffer size in bytes.    */
specifier|public
name|long
name|getSizeInBytes
parameter_list|()
block|{
return|return
name|data
operator|.
name|getSizeInBytes
argument_list|()
return|;
block|}
block|}
end_class

end_unit

