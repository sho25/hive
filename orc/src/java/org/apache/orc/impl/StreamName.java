begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|OrcProto
import|;
end_import

begin_comment
comment|/**  * The name of a stream within a stripe.  */
end_comment

begin_class
specifier|public
class|class
name|StreamName
implements|implements
name|Comparable
argument_list|<
name|StreamName
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|column
decl_stmt|;
specifier|private
specifier|final
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
name|kind
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Area
block|{
name|DATA
block|,
name|INDEX
block|}
specifier|public
name|StreamName
parameter_list|(
name|int
name|column
parameter_list|,
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
name|kind
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
name|this
operator|.
name|kind
operator|=
name|kind
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|StreamName
condition|)
block|{
name|StreamName
name|other
init|=
operator|(
name|StreamName
operator|)
name|obj
decl_stmt|;
return|return
name|other
operator|.
name|column
operator|==
name|column
operator|&&
name|other
operator|.
name|kind
operator|==
name|kind
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|StreamName
name|streamName
parameter_list|)
block|{
if|if
condition|(
name|streamName
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|Area
name|area
init|=
name|getArea
argument_list|(
name|kind
argument_list|)
decl_stmt|;
name|Area
name|otherArea
init|=
name|streamName
operator|.
name|getArea
argument_list|(
name|streamName
operator|.
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|!=
name|otherArea
condition|)
block|{
return|return
operator|-
name|area
operator|.
name|compareTo
argument_list|(
name|otherArea
argument_list|)
return|;
block|}
if|if
condition|(
name|column
operator|!=
name|streamName
operator|.
name|column
condition|)
block|{
return|return
name|column
operator|<
name|streamName
operator|.
name|column
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
return|return
name|kind
operator|.
name|compareTo
argument_list|(
name|streamName
operator|.
name|kind
argument_list|)
return|;
block|}
specifier|public
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
specifier|public
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
name|getKind
parameter_list|()
block|{
return|return
name|kind
return|;
block|}
specifier|public
name|Area
name|getArea
parameter_list|()
block|{
return|return
name|getArea
argument_list|(
name|kind
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Area
name|getArea
parameter_list|(
name|OrcProto
operator|.
name|Stream
operator|.
name|Kind
name|kind
parameter_list|)
block|{
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|ROW_INDEX
case|:
case|case
name|DICTIONARY_COUNT
case|:
case|case
name|BLOOM_FILTER
case|:
return|return
name|Area
operator|.
name|INDEX
return|;
default|default:
return|return
name|Area
operator|.
name|DATA
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Stream for column "
operator|+
name|column
operator|+
literal|" kind "
operator|+
name|kind
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|column
operator|*
literal|101
operator|+
name|kind
operator|.
name|getNumber
argument_list|()
return|;
block|}
block|}
end_class

end_unit

