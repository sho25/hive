begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * Shims for versions of Hadoop up to and including 2.2.x  */
end_comment

begin_class
specifier|public
class|class
name|HadoopShims_2_2
implements|implements
name|HadoopShims
block|{
specifier|final
name|boolean
name|zeroCopy
decl_stmt|;
specifier|final
name|boolean
name|fastRead
decl_stmt|;
name|HadoopShims_2_2
parameter_list|()
block|{
name|boolean
name|zcr
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.fs.CacheFlag"
argument_list|,
literal|false
argument_list|,
name|HadoopShims_2_2
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|zcr
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ce
parameter_list|)
block|{     }
name|zeroCopy
operator|=
name|zcr
expr_stmt|;
name|boolean
name|fastRead
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|zcr
condition|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|Text
operator|.
name|class
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
literal|"readWithKnownLength"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|fastRead
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|fastRead
operator|=
name|fastRead
expr_stmt|;
block|}
specifier|public
name|DirectDecompressor
name|getDirectDecompressor
parameter_list|(
name|DirectCompressionType
name|codec
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ZeroCopyReaderShim
name|getZeroCopyReader
parameter_list|(
name|FSDataInputStream
name|in
parameter_list|,
name|ByteBufferPoolShim
name|pool
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|zeroCopy
condition|)
block|{
return|return
name|ZeroCopyShims
operator|.
name|getZeroCopyReader
argument_list|(
name|in
argument_list|,
name|pool
argument_list|)
return|;
block|}
comment|/* not supported */
return|return
literal|null
return|;
block|}
specifier|private
specifier|final
class|class
name|BasicTextReaderShim
implements|implements
name|TextReaderShim
block|{
specifier|private
specifier|final
name|InputStream
name|in
decl_stmt|;
specifier|public
name|BasicTextReaderShim
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|Text
name|txt
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|int
name|written
init|=
name|in
operator|.
name|read
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|written
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Can't finish read from "
operator|+
name|in
operator|+
literal|" read "
operator|+
operator|(
name|offset
operator|)
operator|+
literal|" bytes out of "
operator|+
name|bytes
operator|.
name|length
argument_list|)
throw|;
block|}
name|len
operator|-=
name|written
expr_stmt|;
name|offset
operator|+=
name|written
expr_stmt|;
block|}
name|txt
operator|.
name|set
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TextReaderShim
name|getTextReaderShim
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BasicTextReaderShim
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
end_class

end_unit

