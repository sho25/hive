begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|orc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|MemoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|ReaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|orc
operator|.
name|impl
operator|.
name|WriterImpl
import|;
end_import

begin_comment
comment|/**  * Contains factory methods to read or write ORC files.  */
end_comment

begin_class
specifier|public
class|class
name|OrcFile
block|{
specifier|public
specifier|static
specifier|final
name|String
name|MAGIC
init|=
literal|"ORC"
decl_stmt|;
comment|/**    * Create a version number for the ORC file format, so that we can add    * non-forward compatible changes in the future. To make it easier for users    * to understand the version numbers, we use the Hive release number that    * first wrote that version of ORC files.    *    * Thus, if you add new encodings or other non-forward compatible changes    * to ORC files, which prevent the old reader from reading the new format,    * you should change these variable to reflect the next Hive release number.    * Non-forward compatible changes should never be added in patch releases.    *    * Do not make any changes that break backwards compatibility, which would    * prevent the new reader from reading ORC files generated by any released    * version of Hive.    */
specifier|public
enum|enum
name|Version
block|{
name|V_0_11
argument_list|(
literal|"0.11"
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
block|,
name|V_0_12
argument_list|(
literal|"0.12"
argument_list|,
literal|0
argument_list|,
literal|12
argument_list|)
block|;
specifier|public
specifier|static
specifier|final
name|Version
name|CURRENT
init|=
name|V_0_12
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|int
name|major
decl_stmt|;
specifier|private
specifier|final
name|int
name|minor
decl_stmt|;
name|Version
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|major
operator|=
name|major
expr_stmt|;
name|this
operator|.
name|minor
operator|=
name|minor
expr_stmt|;
block|}
specifier|public
specifier|static
name|Version
name|byName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Version
name|version
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|version
operator|.
name|name
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|version
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown ORC version "
operator|+
name|name
argument_list|)
throw|;
block|}
comment|/**      * Get the human readable name for the version.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Get the major version number.      */
specifier|public
name|int
name|getMajor
parameter_list|()
block|{
return|return
name|major
return|;
block|}
comment|/**      * Get the minor version number.      */
specifier|public
name|int
name|getMinor
parameter_list|()
block|{
return|return
name|minor
return|;
block|}
block|}
comment|/**    * Records the version of the writer in terms of which bugs have been fixed.    * For bugs in the writer, but the old readers already read the new data    * correctly, bump this version instead of the Version.    */
specifier|public
enum|enum
name|WriterVersion
block|{
name|ORIGINAL
argument_list|(
literal|0
argument_list|)
block|,
name|HIVE_8732
argument_list|(
literal|1
argument_list|)
block|,
comment|// corrupted stripe/file maximum column statistics
name|HIVE_4243
argument_list|(
literal|2
argument_list|)
block|,
comment|// use real column names from Hive tables
name|HIVE_12055
argument_list|(
literal|3
argument_list|)
block|,
comment|// vectorized writer
name|HIVE_13083
argument_list|(
literal|4
argument_list|)
block|,
comment|// decimal writer updating present stream wrongly
comment|// Don't use any magic numbers here except for the below:
name|FUTURE
parameter_list|(
name|Integer
operator|.
name|MAX_VALUE
parameter_list|)
constructor_decl|;
comment|// a version from a future writer
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
name|WriterVersion
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|WriterVersion
index|[]
name|values
decl_stmt|;
static|static
block|{
comment|// Assumes few non-negative values close to zero.
name|int
name|max
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|WriterVersion
name|v
range|:
name|WriterVersion
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|v
operator|.
name|id
operator|<
literal|0
condition|)
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
if|if
condition|(
name|v
operator|.
name|id
operator|>
name|max
operator|&&
name|FUTURE
operator|.
name|id
operator|!=
name|v
operator|.
name|id
condition|)
block|{
name|max
operator|=
name|v
operator|.
name|id
expr_stmt|;
block|}
block|}
name|values
operator|=
operator|new
name|WriterVersion
index|[
name|max
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|WriterVersion
name|v
range|:
name|WriterVersion
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|v
operator|.
name|id
operator|<
name|values
operator|.
name|length
condition|)
block|{
name|values
index|[
name|v
operator|.
name|id
index|]
operator|=
name|v
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|WriterVersion
name|from
parameter_list|(
name|int
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
name|FUTURE
operator|.
name|id
condition|)
return|return
name|FUTURE
return|;
comment|// Special handling for the magic value.
return|return
name|values
index|[
name|val
index|]
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|WriterVersion
name|CURRENT_WRITER
init|=
name|WriterVersion
operator|.
name|HIVE_13083
decl_stmt|;
specifier|public
enum|enum
name|EncodingStrategy
block|{
name|SPEED
block|,
name|COMPRESSION
block|}
specifier|public
enum|enum
name|CompressionStrategy
block|{
name|SPEED
block|,
name|COMPRESSION
block|}
comment|// unused
specifier|protected
name|OrcFile
parameter_list|()
block|{}
specifier|public
specifier|static
class|class
name|ReaderOptions
block|{
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|FileSystem
name|filesystem
decl_stmt|;
specifier|private
name|FileMetaInfo
name|fileMetaInfo
decl_stmt|;
comment|// TODO: this comes from some place.
specifier|private
name|long
name|maxLength
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|FileMetadata
name|fullFileMetadata
decl_stmt|;
comment|// Propagate from LLAP cache.
specifier|public
name|ReaderOptions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|ReaderOptions
name|fileMetaInfo
parameter_list|(
name|FileMetaInfo
name|info
parameter_list|)
block|{
name|fileMetaInfo
operator|=
name|info
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderOptions
name|filesystem
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|filesystem
operator|=
name|fs
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderOptions
name|maxLength
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|maxLength
operator|=
name|val
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ReaderOptions
name|fileMetadata
parameter_list|(
name|FileMetadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|fullFileMetadata
operator|=
name|metadata
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|public
name|FileSystem
name|getFilesystem
parameter_list|()
block|{
return|return
name|filesystem
return|;
block|}
specifier|public
name|FileMetaInfo
name|getFileMetaInfo
parameter_list|()
block|{
return|return
name|fileMetaInfo
return|;
block|}
specifier|public
name|long
name|getMaxLength
parameter_list|()
block|{
return|return
name|maxLength
return|;
block|}
specifier|public
name|FileMetadata
name|getFileMetadata
parameter_list|()
block|{
return|return
name|fullFileMetadata
return|;
block|}
block|}
specifier|public
specifier|static
name|ReaderOptions
name|readerOptions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|ReaderOptions
argument_list|(
name|conf
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Reader
name|createReader
parameter_list|(
name|Path
name|path
parameter_list|,
name|ReaderOptions
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ReaderImpl
argument_list|(
name|path
argument_list|,
name|options
argument_list|)
return|;
block|}
specifier|public
interface|interface
name|WriterContext
block|{
name|Writer
name|getWriter
parameter_list|()
function_decl|;
block|}
specifier|public
interface|interface
name|WriterCallback
block|{
name|void
name|preStripeWrite
parameter_list|(
name|WriterContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|preFooterWrite
parameter_list|(
name|WriterContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * Options for creating ORC file writers.    */
specifier|public
specifier|static
class|class
name|WriterOptions
block|{
specifier|private
specifier|final
name|Configuration
name|configuration
decl_stmt|;
specifier|private
name|FileSystem
name|fileSystemValue
init|=
literal|null
decl_stmt|;
specifier|private
name|TypeDescription
name|schema
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|stripeSizeValue
decl_stmt|;
specifier|private
name|long
name|blockSizeValue
decl_stmt|;
specifier|private
name|int
name|rowIndexStrideValue
decl_stmt|;
specifier|private
name|int
name|bufferSizeValue
decl_stmt|;
specifier|private
name|boolean
name|enforceBufferSize
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|blockPaddingValue
decl_stmt|;
specifier|private
name|CompressionKind
name|compressValue
decl_stmt|;
specifier|private
name|MemoryManager
name|memoryManagerValue
decl_stmt|;
specifier|private
name|Version
name|versionValue
decl_stmt|;
specifier|private
name|WriterCallback
name|callback
decl_stmt|;
specifier|private
name|EncodingStrategy
name|encodingStrategy
decl_stmt|;
specifier|private
name|CompressionStrategy
name|compressionStrategy
decl_stmt|;
specifier|private
name|double
name|paddingTolerance
decl_stmt|;
specifier|private
name|String
name|bloomFilterColumns
decl_stmt|;
specifier|private
name|double
name|bloomFilterFpp
decl_stmt|;
specifier|protected
name|WriterOptions
parameter_list|(
name|Properties
name|tableProperties
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|configuration
operator|=
name|conf
expr_stmt|;
name|memoryManagerValue
operator|=
name|getStaticMemoryManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stripeSizeValue
operator|=
name|OrcConf
operator|.
name|STRIPE_SIZE
operator|.
name|getLong
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|blockSizeValue
operator|=
name|OrcConf
operator|.
name|BLOCK_SIZE
operator|.
name|getLong
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|rowIndexStrideValue
operator|=
operator|(
name|int
operator|)
name|OrcConf
operator|.
name|ROW_INDEX_STRIDE
operator|.
name|getLong
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|bufferSizeValue
operator|=
operator|(
name|int
operator|)
name|OrcConf
operator|.
name|BUFFER_SIZE
operator|.
name|getLong
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|blockPaddingValue
operator|=
name|OrcConf
operator|.
name|BLOCK_PADDING
operator|.
name|getBoolean
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|compressValue
operator|=
name|CompressionKind
operator|.
name|valueOf
argument_list|(
name|OrcConf
operator|.
name|COMPRESS
operator|.
name|getString
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|versionName
init|=
name|OrcConf
operator|.
name|WRITE_FORMAT
operator|.
name|getString
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|versionValue
operator|=
name|Version
operator|.
name|byName
argument_list|(
name|versionName
argument_list|)
expr_stmt|;
name|String
name|enString
init|=
name|OrcConf
operator|.
name|ENCODING_STRATEGY
operator|.
name|getString
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|encodingStrategy
operator|=
name|EncodingStrategy
operator|.
name|valueOf
argument_list|(
name|enString
argument_list|)
expr_stmt|;
name|String
name|compString
init|=
name|OrcConf
operator|.
name|COMPRESSION_STRATEGY
operator|.
name|getString
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|compressionStrategy
operator|=
name|CompressionStrategy
operator|.
name|valueOf
argument_list|(
name|compString
argument_list|)
expr_stmt|;
name|paddingTolerance
operator|=
name|OrcConf
operator|.
name|BLOCK_PADDING_TOLERANCE
operator|.
name|getDouble
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|bloomFilterColumns
operator|=
name|OrcConf
operator|.
name|BLOOM_FILTER_COLUMNS
operator|.
name|getString
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|bloomFilterFpp
operator|=
name|OrcConf
operator|.
name|BLOOM_FILTER_FPP
operator|.
name|getDouble
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Provide the filesystem for the path, if the client has it available.      * If it is not provided, it will be found from the path.      */
specifier|public
name|WriterOptions
name|fileSystem
parameter_list|(
name|FileSystem
name|value
parameter_list|)
block|{
name|fileSystemValue
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the stripe size for the file. The writer stores the contents of the      * stripe in memory until this memory limit is reached and the stripe      * is flushed to the HDFS file and the next stripe started.      */
specifier|public
name|WriterOptions
name|stripeSize
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|stripeSizeValue
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the file system block size for the file. For optimal performance,      * set the block size to be multiple factors of stripe size.      */
specifier|public
name|WriterOptions
name|blockSize
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|blockSizeValue
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the distance between entries in the row index. The minimum value is      * 1000 to prevent the index from overwhelming the data. If the stride is      * set to 0, no indexes will be included in the file.      */
specifier|public
name|WriterOptions
name|rowIndexStride
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|rowIndexStrideValue
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The size of the memory buffers used for compressing and storing the      * stripe in memory. NOTE: ORC writer may choose to use smaller buffer      * size based on stripe size and number of columns for efficient stripe      * writing and memory utilization. To enforce writer to use the requested      * buffer size use enforceBufferSize().      */
specifier|public
name|WriterOptions
name|bufferSize
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|bufferSizeValue
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Enforce writer to use requested buffer size instead of estimating      * buffer size based on stripe size and number of columns.      * See bufferSize() method for more info.      * Default: false      */
specifier|public
name|WriterOptions
name|enforceBufferSize
parameter_list|()
block|{
name|enforceBufferSize
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets whether the HDFS blocks are padded to prevent stripes from      * straddling blocks. Padding improves locality and thus the speed of      * reading, but costs space.      */
specifier|public
name|WriterOptions
name|blockPadding
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|blockPaddingValue
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the encoding strategy that is used to encode the data.      */
specifier|public
name|WriterOptions
name|encodingStrategy
parameter_list|(
name|EncodingStrategy
name|strategy
parameter_list|)
block|{
name|encodingStrategy
operator|=
name|strategy
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the tolerance for block padding as a percentage of stripe size.      */
specifier|public
name|WriterOptions
name|paddingTolerance
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|paddingTolerance
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Comma separated values of column names for which bloom filter is to be created.      */
specifier|public
name|WriterOptions
name|bloomFilterColumns
parameter_list|(
name|String
name|columns
parameter_list|)
block|{
name|bloomFilterColumns
operator|=
name|columns
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specify the false positive probability for bloom filter.      * @param fpp - false positive probability      * @return this      */
specifier|public
name|WriterOptions
name|bloomFilterFpp
parameter_list|(
name|double
name|fpp
parameter_list|)
block|{
name|bloomFilterFpp
operator|=
name|fpp
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the generic compression that is used to compress the data.      */
specifier|public
name|WriterOptions
name|compress
parameter_list|(
name|CompressionKind
name|value
parameter_list|)
block|{
name|compressValue
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set the schema for the file. This is a required parameter.      * @param schema the schema for the file.      * @return this      */
specifier|public
name|WriterOptions
name|setSchema
parameter_list|(
name|TypeDescription
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the version of the file that will be written.      */
specifier|public
name|WriterOptions
name|version
parameter_list|(
name|Version
name|value
parameter_list|)
block|{
name|versionValue
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add a listener for when the stripe and file are about to be closed.      * @param callback the object to be called when the stripe is closed      * @return this      */
specifier|public
name|WriterOptions
name|callback
parameter_list|(
name|WriterCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * A package local option to set the memory manager.      */
specifier|protected
name|WriterOptions
name|memory
parameter_list|(
name|MemoryManager
name|value
parameter_list|)
block|{
name|memoryManagerValue
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|getBlockPadding
parameter_list|()
block|{
return|return
name|blockPaddingValue
return|;
block|}
specifier|public
name|long
name|getBlockSize
parameter_list|()
block|{
return|return
name|blockSizeValue
return|;
block|}
specifier|public
name|String
name|getBloomFilterColumns
parameter_list|()
block|{
return|return
name|bloomFilterColumns
return|;
block|}
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|fileSystemValue
return|;
block|}
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
specifier|public
name|TypeDescription
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
specifier|public
name|long
name|getStripeSize
parameter_list|()
block|{
return|return
name|stripeSizeValue
return|;
block|}
specifier|public
name|CompressionKind
name|getCompress
parameter_list|()
block|{
return|return
name|compressValue
return|;
block|}
specifier|public
name|WriterCallback
name|getCallback
parameter_list|()
block|{
return|return
name|callback
return|;
block|}
specifier|public
name|Version
name|getVersion
parameter_list|()
block|{
return|return
name|versionValue
return|;
block|}
specifier|public
name|MemoryManager
name|getMemoryManager
parameter_list|()
block|{
return|return
name|memoryManagerValue
return|;
block|}
specifier|public
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|bufferSizeValue
return|;
block|}
specifier|public
name|boolean
name|isEnforceBufferSize
parameter_list|()
block|{
return|return
name|enforceBufferSize
return|;
block|}
specifier|public
name|int
name|getRowIndexStride
parameter_list|()
block|{
return|return
name|rowIndexStrideValue
return|;
block|}
specifier|public
name|CompressionStrategy
name|getCompressionStrategy
parameter_list|()
block|{
return|return
name|compressionStrategy
return|;
block|}
specifier|public
name|EncodingStrategy
name|getEncodingStrategy
parameter_list|()
block|{
return|return
name|encodingStrategy
return|;
block|}
specifier|public
name|double
name|getPaddingTolerance
parameter_list|()
block|{
return|return
name|paddingTolerance
return|;
block|}
specifier|public
name|double
name|getBloomFilterFpp
parameter_list|()
block|{
return|return
name|bloomFilterFpp
return|;
block|}
block|}
comment|/**    * Create a set of writer options based on a configuration.    * @param conf the configuration to use for values    * @return A WriterOptions object that can be modified    */
specifier|public
specifier|static
name|WriterOptions
name|writerOptions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|WriterOptions
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Create a set of write options based on a set of table properties and    * configuration.    * @param tableProperties the properties of the table    * @param conf the configuration of the query    * @return a WriterOptions object that can be modified    */
specifier|public
specifier|static
name|WriterOptions
name|writerOptions
parameter_list|(
name|Properties
name|tableProperties
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|WriterOptions
argument_list|(
name|tableProperties
argument_list|,
name|conf
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|MemoryManager
argument_list|>
name|memoryManager
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|synchronized
name|MemoryManager
name|getStaticMemoryManager
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|memoryManager
operator|==
literal|null
condition|)
block|{
name|memoryManager
operator|=
operator|new
name|ThreadLocal
argument_list|<
name|MemoryManager
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|MemoryManager
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|MemoryManager
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|memoryManager
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Create an ORC file writer. This is the public interface for creating    * writers going forward and new options will only be added to this method.    * @param path filename to write to    * @param opts the options    * @return a new ORC file writer    * @throws IOException    */
specifier|public
specifier|static
name|Writer
name|createWriter
parameter_list|(
name|Path
name|path
parameter_list|,
name|WriterOptions
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|opts
operator|.
name|getFileSystem
argument_list|()
operator|==
literal|null
condition|?
name|path
operator|.
name|getFileSystem
argument_list|(
name|opts
operator|.
name|getConfiguration
argument_list|()
argument_list|)
else|:
name|opts
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
return|return
operator|new
name|WriterImpl
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|opts
argument_list|)
return|;
block|}
block|}
end_class

end_unit

