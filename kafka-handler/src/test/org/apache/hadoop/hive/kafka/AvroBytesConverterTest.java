begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|io
operator|.
name|confluent
operator|.
name|kafka
operator|.
name|schemaregistry
operator|.
name|client
operator|.
name|MockSchemaRegistryClient
import|;
end_import

begin_import
import|import
name|io
operator|.
name|confluent
operator|.
name|kafka
operator|.
name|serializers
operator|.
name|AbstractKafkaAvroSerDeConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|confluent
operator|.
name|kafka
operator|.
name|serializers
operator|.
name|KafkaAvroSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroGenericRecordWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroSerdeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Test class for Hive Kafka Avro SerDe with variable bytes skipped.  */
end_comment

begin_class
specifier|public
class|class
name|AvroBytesConverterTest
block|{
specifier|private
specifier|static
name|SimpleRecord
name|simpleRecord
init|=
name|SimpleRecord
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
literal|"123"
argument_list|)
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|simpleRecordConfluentBytes
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|/**    * Use the KafkaAvroSerializer from Confluent to serialize the simpleRecord.    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|AbstractKafkaAvroSerDeConfig
operator|.
name|SCHEMA_REGISTRY_URL_CONFIG
argument_list|,
literal|"http://localhost:8081"
argument_list|)
expr_stmt|;
name|KafkaAvroSerializer
name|avroSerializer
init|=
operator|new
name|KafkaAvroSerializer
argument_list|(
operator|new
name|MockSchemaRegistryClient
argument_list|()
argument_list|)
decl_stmt|;
name|avroSerializer
operator|.
name|configure
argument_list|(
name|config
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|simpleRecordConfluentBytes
operator|=
name|avroSerializer
operator|.
name|serialize
argument_list|(
literal|"temp"
argument_list|,
name|simpleRecord
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runConversionTest
parameter_list|(
name|Properties
name|tbl
parameter_list|,
name|byte
index|[]
name|serializedSimpleRecord
parameter_list|)
throws|throws
name|SerDeException
block|{
name|KafkaSerDe
name|serde
init|=
operator|new
name|KafkaSerDe
argument_list|()
decl_stmt|;
name|Schema
name|schema
init|=
name|SimpleRecord
operator|.
name|getClassSchema
argument_list|()
decl_stmt|;
name|KafkaSerDe
operator|.
name|AvroBytesConverter
name|conv
init|=
operator|(
name|KafkaSerDe
operator|.
name|AvroBytesConverter
operator|)
name|serde
operator|.
name|getByteConverterForAvroDelegate
argument_list|(
name|schema
argument_list|,
name|tbl
argument_list|)
decl_stmt|;
name|AvroGenericRecordWritable
name|simpleRecordWritable
init|=
name|conv
operator|.
name|getWritable
argument_list|(
name|serializedSimpleRecord
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|simpleRecordWritable
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SimpleRecord
operator|.
name|class
argument_list|,
name|simpleRecordWritable
operator|.
name|getRecord
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleRecord
name|simpleRecordDeserialized
init|=
operator|(
name|SimpleRecord
operator|)
name|simpleRecordWritable
operator|.
name|getRecord
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|simpleRecordDeserialized
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|simpleRecord
argument_list|,
name|simpleRecordDeserialized
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the default case of no skipped bytes per record works properly.    */
annotation|@
name|Test
specifier|public
name|void
name|convertWithAvroBytesConverter
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// Since the serialized version was created by Confluent,
comment|// let's remove the first five bytes to get the actual message.
name|int
name|recordLength
init|=
name|simpleRecordConfluentBytes
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|simpleRecordWithNoOffset
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|simpleRecordConfluentBytes
argument_list|,
literal|5
argument_list|,
name|recordLength
argument_list|)
decl_stmt|;
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
operator|.
name|AVRO_SERDE_TYPE
operator|.
name|getPropName
argument_list|()
argument_list|,
literal|"NONE"
argument_list|)
expr_stmt|;
name|runConversionTest
argument_list|(
name|tbl
argument_list|,
name|simpleRecordWithNoOffset
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that the skip converter skips 5 bytes properly, which matches what Confluent needs.    */
annotation|@
name|Test
specifier|public
name|void
name|convertWithConfluentAvroBytesConverter
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Integer
name|offset
init|=
literal|5
decl_stmt|;
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
operator|.
name|AVRO_SERDE_TYPE
operator|.
name|getPropName
argument_list|()
argument_list|,
literal|"SKIP"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
operator|.
name|AVRO_SERDE_SKIP_BYTES
operator|.
name|getPropName
argument_list|()
argument_list|,
name|offset
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runConversionTest
argument_list|(
name|tbl
argument_list|,
name|simpleRecordConfluentBytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that the skip converter skips a custom number of bytes properly.    */
annotation|@
name|Test
specifier|public
name|void
name|convertWithCustomAvroSkipBytesConverter
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Integer
name|offset
init|=
literal|2
decl_stmt|;
comment|// Remove all but two bytes of the five byte offset which Confluent adds,
comment|// to simulate a message with only 2 bytes in front of each message.
name|int
name|recordLength
init|=
name|simpleRecordConfluentBytes
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|simpleRecordAsOffsetBytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|simpleRecordConfluentBytes
argument_list|,
literal|5
operator|-
name|offset
argument_list|,
name|recordLength
argument_list|)
decl_stmt|;
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
operator|.
name|AVRO_SERDE_TYPE
operator|.
name|getPropName
argument_list|()
argument_list|,
literal|"SKIP"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
operator|.
name|AVRO_SERDE_SKIP_BYTES
operator|.
name|getPropName
argument_list|()
argument_list|,
name|offset
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runConversionTest
argument_list|(
name|tbl
argument_list|,
name|simpleRecordAsOffsetBytes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that when we skip more bytes than are in the message, we throw an exception properly.    */
annotation|@
name|Test
specifier|public
name|void
name|skipBytesLargerThanMessageSizeConverter
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// The simple record we are serializing is two strings, that combine to be 7 characters or 14 bytes.
comment|// Adding in the 5 byte offset, we get 19 bytes. To make sure we go bigger than that, we are setting
comment|// the offset to ten times that value.
name|Integer
name|offset
init|=
literal|190
decl_stmt|;
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
operator|.
name|AVRO_SERDE_TYPE
operator|.
name|getPropName
argument_list|()
argument_list|,
literal|"SKIP"
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
operator|.
name|AVRO_SERDE_SKIP_BYTES
operator|.
name|getPropName
argument_list|()
argument_list|,
name|offset
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"org.apache.hadoop.hive.serde2.SerDeException: "
operator|+
literal|"Skip bytes value is larger than the message length."
argument_list|)
expr_stmt|;
name|runConversionTest
argument_list|(
name|tbl
argument_list|,
name|simpleRecordConfluentBytes
argument_list|)
expr_stmt|;
block|}
comment|/**   * Test that we properly parse the converter type, no matter the casing.   */
annotation|@
name|Test
specifier|public
name|void
name|bytesConverterTypeParseTest
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
argument_list|>
name|testCases
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"skip"
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
operator|.
name|SKIP
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"sKIp"
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
operator|.
name|SKIP
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"SKIP"
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
operator|.
name|SKIP
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"   skip   "
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
operator|.
name|SKIP
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"SKIP1"
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"skipper"
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|""
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|null
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"none"
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"NONE"
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
argument_list|>
name|entry
range|:
name|testCases
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|KafkaSerDe
operator|.
name|BytesConverterType
operator|.
name|fromString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

