begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|SerializationUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|PredicateLeaf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeColumnDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeConstantDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|ExprNodeGenericFuncDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPAnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPEqualOrLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPGreaterThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPLessThan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|udf
operator|.
name|generic
operator|.
name|GenericUDFOPOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|TopicPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Test Class for Kafka Trimmer Class.  */
end_comment

begin_class
specifier|public
class|class
name|KafkaScanTrimmerTest
block|{
specifier|private
specifier|static
specifier|final
name|Path
name|PATH
init|=
operator|new
name|Path
argument_list|(
literal|"/tmp"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExprNodeDesc
name|zeroInt
init|=
name|ConstantExprBuilder
operator|.
name|build
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExprNodeDesc
name|threeInt
init|=
name|ConstantExprBuilder
operator|.
name|build
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExprNodeDesc
name|thirtyLong
init|=
name|ConstantExprBuilder
operator|.
name|build
argument_list|(
literal|30L
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExprNodeDesc
name|thirtyFiveLong
init|=
name|ConstantExprBuilder
operator|.
name|build
argument_list|(
literal|35L
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExprNodeDesc
name|seventyFiveLong
init|=
name|ConstantExprBuilder
operator|.
name|build
argument_list|(
literal|75L
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExprNodeDesc
name|fortyLong
init|=
name|ConstantExprBuilder
operator|.
name|build
argument_list|(
literal|40L
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExprNodeDesc
name|partitionColumn
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|MetadataColumn
operator|.
name|PARTITION
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ExprNodeDesc
name|offsetColumn
init|=
operator|new
name|ExprNodeColumnDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|MetadataColumn
operator|.
name|OFFSET
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|topic
init|=
literal|"my_topic"
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|TopicPartition
argument_list|,
name|KafkaInputSplit
argument_list|>
name|fullHouse
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
operator|new
name|TopicPartition
argument_list|(
name|topic
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|KafkaInputSplit
argument_list|(
name|topic
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|45
argument_list|,
name|PATH
argument_list|)
argument_list|,
operator|new
name|TopicPartition
argument_list|(
name|topic
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|KafkaInputSplit
argument_list|(
name|topic
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1005
argument_list|,
name|PATH
argument_list|)
argument_list|,
operator|new
name|TopicPartition
argument_list|(
name|topic
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|KafkaInputSplit
argument_list|(
name|topic
argument_list|,
literal|2
argument_list|,
literal|9
argument_list|,
literal|100
argument_list|,
name|PATH
argument_list|)
argument_list|,
operator|new
name|TopicPartition
argument_list|(
name|topic
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|KafkaInputSplit
argument_list|(
name|topic
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|PATH
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|computeOptimizedScanPartitionBinaryOpFilter
parameter_list|()
block|{
name|KafkaScanTrimmer
name|kafkaScanTrimmer
init|=
operator|new
name|KafkaScanTrimmer
argument_list|(
name|fullHouse
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|partitionId
init|=
literal|2
decl_stmt|;
name|ExprNodeDesc
name|constant
init|=
name|ConstantExprBuilder
operator|.
name|build
argument_list|(
name|partitionId
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionColumn
argument_list|,
name|constant
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|node
init|=
name|eq
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|Map
name|actual
init|=
name|kafkaScanTrimmer
operator|.
name|computeOptimizedScan
argument_list|(
name|SerializationUtilities
operator|.
name|deserializeExpression
argument_list|(
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|node
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|expected
init|=
name|Maps
operator|.
name|filterValues
argument_list|(
name|fullHouse
argument_list|,
name|tp
lambda|->
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|tp
argument_list|)
operator|.
name|getPartition
argument_list|()
operator|==
name|partitionId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|lessNode
init|=
name|lessThan
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|lessNode
argument_list|)
expr_stmt|;
name|actual
operator|=
name|kafkaScanTrimmer
operator|.
name|computeOptimizedScan
argument_list|(
name|SerializationUtilities
operator|.
name|deserializeExpression
argument_list|(
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|lessNode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|filterValues
argument_list|(
name|fullHouse
argument_list|,
name|tp
lambda|->
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|tp
argument_list|)
operator|.
name|getPartition
argument_list|()
operator|<
name|partitionId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|lessEqNode
init|=
name|lessThanEq
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|lessEqNode
argument_list|)
expr_stmt|;
name|actual
operator|=
name|kafkaScanTrimmer
operator|.
name|computeOptimizedScan
argument_list|(
name|SerializationUtilities
operator|.
name|deserializeExpression
argument_list|(
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|lessEqNode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|filterValues
argument_list|(
name|fullHouse
argument_list|,
name|tp
lambda|->
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|tp
argument_list|)
operator|.
name|getPartition
argument_list|()
operator|<=
name|partitionId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|computeOptimizedScanFalseFilter
parameter_list|()
block|{
name|KafkaScanTrimmer
name|kafkaScanTrimmer
init|=
operator|new
name|KafkaScanTrimmer
argument_list|(
name|fullHouse
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|falseFilter
init|=
name|and
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|eq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionColumn
argument_list|,
name|zeroInt
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionColumn
argument_list|,
name|threeInt
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|falseFilter
argument_list|)
expr_stmt|;
name|Map
name|actual
init|=
name|kafkaScanTrimmer
operator|.
name|computeOptimizedScan
argument_list|(
name|SerializationUtilities
operator|.
name|deserializeExpression
argument_list|(
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|falseFilter
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|falseFilter2
init|=
name|and
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|eq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|offsetColumn
argument_list|,
name|thirtyFiveLong
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|offsetColumn
argument_list|,
name|fortyLong
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|falseFilter2
argument_list|)
expr_stmt|;
name|actual
operator|=
name|kafkaScanTrimmer
operator|.
name|computeOptimizedScan
argument_list|(
name|SerializationUtilities
operator|.
name|deserializeExpression
argument_list|(
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|falseFilter2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|filter3
init|=
name|or
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|falseFilter
argument_list|,
name|falseFilter2
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|filter3
argument_list|)
expr_stmt|;
name|actual
operator|=
name|kafkaScanTrimmer
operator|.
name|computeOptimizedScan
argument_list|(
name|SerializationUtilities
operator|.
name|deserializeExpression
argument_list|(
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|filter3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ExprNodeGenericFuncDesc
name|filter4
init|=
name|and
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filter3
argument_list|,
name|eq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionColumn
argument_list|,
name|zeroInt
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|filter4
argument_list|)
expr_stmt|;
name|actual
operator|=
name|kafkaScanTrimmer
operator|.
name|computeOptimizedScan
argument_list|(
name|SerializationUtilities
operator|.
name|deserializeExpression
argument_list|(
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|filter4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|computeOptimizedScanOrAndCombinedFilter
parameter_list|()
block|{
name|KafkaScanTrimmer
name|kafkaScanTrimmer
init|=
operator|new
name|KafkaScanTrimmer
argument_list|(
name|fullHouse
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// partition = 0 and 30<= offset< 35 or partition = 3 and 35<= offset< 75  or (partition = 0 and offset = 40)
name|ExprNodeGenericFuncDesc
name|part1
init|=
name|and
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|greaterThanEq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|offsetColumn
argument_list|,
name|thirtyLong
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionColumn
argument_list|,
name|zeroInt
argument_list|)
argument_list|)
argument_list|,
name|lessThan
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|offsetColumn
argument_list|,
name|thirtyFiveLong
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|part2
init|=
name|and
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|greaterThanEq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|offsetColumn
argument_list|,
name|thirtyFiveLong
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionColumn
argument_list|,
name|threeInt
argument_list|)
argument_list|)
argument_list|,
name|lessThan
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|offsetColumn
argument_list|,
name|seventyFiveLong
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|part3
init|=
name|and
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|eq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|offsetColumn
argument_list|,
name|fortyLong
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionColumn
argument_list|,
name|zeroInt
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|orExpression
init|=
name|or
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|part1
argument_list|,
name|part2
argument_list|,
name|part3
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|orExpression
argument_list|)
expr_stmt|;
name|Map
name|actual
init|=
name|kafkaScanTrimmer
operator|.
name|computeOptimizedScan
argument_list|(
name|SerializationUtilities
operator|.
name|deserializeExpression
argument_list|(
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|orExpression
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TopicPartition
name|tpZero
init|=
operator|new
name|TopicPartition
argument_list|(
name|topic
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TopicPartition
name|toThree
init|=
operator|new
name|TopicPartition
argument_list|(
name|topic
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|KafkaInputSplit
name|split1
init|=
operator|new
name|KafkaInputSplit
argument_list|(
name|topic
argument_list|,
literal|0
argument_list|,
literal|30
argument_list|,
literal|41
argument_list|,
name|PATH
argument_list|)
decl_stmt|;
name|KafkaInputSplit
name|split2
init|=
operator|new
name|KafkaInputSplit
argument_list|(
name|topic
argument_list|,
literal|3
argument_list|,
literal|35
argument_list|,
literal|75
argument_list|,
name|PATH
argument_list|)
decl_stmt|;
name|Map
name|expected
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|tpZero
argument_list|,
name|split1
argument_list|,
name|toThree
argument_list|,
name|split2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|computeOptimizedScanPartitionOrAndCombinedFilter
parameter_list|()
block|{
name|KafkaScanTrimmer
name|kafkaScanTrimmer
init|=
operator|new
name|KafkaScanTrimmer
argument_list|(
name|fullHouse
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// partition = 1 or (partition>2 and<= 3)
name|ExprNodeGenericFuncDesc
name|eq
init|=
name|eq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionColumn
argument_list|,
name|ConstantExprBuilder
operator|.
name|build
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|lessEq
init|=
name|lessThanEq
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionColumn
argument_list|,
name|ConstantExprBuilder
operator|.
name|build
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|greater
init|=
name|greaterThan
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|partitionColumn
argument_list|,
name|ConstantExprBuilder
operator|.
name|build
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ExprNodeGenericFuncDesc
name|orNode
init|=
name|or
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|and
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|lessEq
argument_list|,
name|greater
argument_list|)
argument_list|)
argument_list|,
name|eq
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|actual
init|=
name|kafkaScanTrimmer
operator|.
name|computeOptimizedScan
argument_list|(
name|SerializationUtilities
operator|.
name|deserializeExpression
argument_list|(
name|SerializationUtilities
operator|.
name|serializeExpression
argument_list|(
name|orNode
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|expected
init|=
name|Maps
operator|.
name|filterValues
argument_list|(
name|fullHouse
argument_list|,
name|tp
lambda|->
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|tp
argument_list|)
operator|.
name|getPartition
argument_list|()
operator|==
literal|1
operator|||
name|tp
operator|.
name|getPartition
argument_list|()
operator|==
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|orNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildScanFormPartitionPredicateEq
parameter_list|()
block|{
name|Map
name|actual
init|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromPartitionPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|EQUALS
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TopicPartition
name|topicPartition
init|=
operator|new
name|TopicPartition
argument_list|(
name|topic
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fullHouse
operator|.
name|get
argument_list|(
name|topicPartition
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|topicPartition
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildScanFormPartitionPredicateLess
parameter_list|()
block|{
comment|// partitionConst< partitionColumn (flip true)
name|int
name|partitionConst
init|=
literal|2
decl_stmt|;
name|Map
name|actual
init|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromPartitionPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|partitionConst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|expected
init|=
name|Maps
operator|.
name|filterEntries
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|partition
argument_list|()
operator|>
name|partitionConst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// partitionConst>= partitionColumn (flip true, negation true)
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromPartitionPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|partitionConst
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|filterEntries
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
name|partitionConst
operator|>=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|partition
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// partitionColumn>= partitionConst (negation true)
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromPartitionPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|partitionConst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|filterEntries
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|partition
argument_list|()
operator|>=
name|partitionConst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// partitionColumn< partitionConst (negation true)
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromPartitionPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|partitionConst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|filterEntries
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|partition
argument_list|()
operator|<
name|partitionConst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildScanFormPartitionPredicateLessEq
parameter_list|()
block|{
comment|// partitionConst<= partitionColumn (flip true)
name|int
name|partitionConst
init|=
literal|2
decl_stmt|;
name|Map
name|actual
init|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromPartitionPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|partitionConst
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|expected
init|=
name|Maps
operator|.
name|filterEntries
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|partition
argument_list|()
operator|>=
name|partitionConst
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// partitionConst> partitionColumn (flip true, negation true)
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromPartitionPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|partitionConst
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|filterEntries
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
name|partitionConst
operator|>
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|partition
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// partitionColumn> partitionConst (negation true)
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromPartitionPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|partitionConst
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|filterEntries
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|partition
argument_list|()
operator|>
name|partitionConst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// partitionColumn<= partitionConst (negation true)
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromPartitionPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|partitionConst
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|filterEntries
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|partition
argument_list|()
operator|<=
name|partitionConst
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildScanFromOffsetPredicateEq
parameter_list|()
block|{
name|long
name|constantOffset
init|=
literal|30
decl_stmt|;
name|Map
name|actual
init|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromOffsetPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|EQUALS
argument_list|,
name|constantOffset
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|expected
init|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
operator|new
name|KafkaInputSplit
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getTopic
argument_list|()
argument_list|,
name|entry
operator|.
name|getPartition
argument_list|()
argument_list|,
name|constantOffset
argument_list|,
name|constantOffset
operator|+
literal|1
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// seek to end if offset is out of reach
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromOffsetPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|EQUALS
argument_list|,
literal|3000000L
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
operator|new
name|KafkaInputSplit
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getTopic
argument_list|()
argument_list|,
name|entry
operator|.
name|getPartition
argument_list|()
argument_list|,
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// seek to end if offset is out of reach
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromOffsetPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|EQUALS
argument_list|,
literal|0L
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
operator|new
name|KafkaInputSplit
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getTopic
argument_list|()
argument_list|,
name|entry
operator|.
name|getPartition
argument_list|()
argument_list|,
name|entry
operator|.
name|getStartOffset
argument_list|()
operator|>
literal|0
condition|?
name|entry
operator|.
name|getEndOffset
argument_list|()
else|:
literal|0
argument_list|,
name|entry
operator|.
name|getStartOffset
argument_list|()
operator|>
literal|0
condition|?
name|entry
operator|.
name|getEndOffset
argument_list|()
else|:
literal|1
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildScanFromOffsetPredicateLess
parameter_list|()
block|{
name|long
name|constantOffset
init|=
literal|50
decl_stmt|;
comment|// columnOffset< constant
name|Map
name|actual
init|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromOffsetPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|constantOffset
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|expected
init|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
operator|new
name|KafkaInputSplit
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getTopic
argument_list|()
argument_list|,
name|entry
operator|.
name|getPartition
argument_list|()
argument_list|,
name|entry
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|constantOffset
argument_list|,
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// columnOffset> constant
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromOffsetPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|constantOffset
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
operator|new
name|KafkaInputSplit
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getTopic
argument_list|()
argument_list|,
name|entry
operator|.
name|getPartition
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|entry
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|constantOffset
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// columnOffset>= constant
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromOffsetPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|constantOffset
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
operator|new
name|KafkaInputSplit
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getTopic
argument_list|()
argument_list|,
name|entry
operator|.
name|getPartition
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|entry
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|constantOffset
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// columnOffset<= constant
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromOffsetPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|constantOffset
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
operator|new
name|KafkaInputSplit
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getTopic
argument_list|()
argument_list|,
name|entry
operator|.
name|getPartition
argument_list|()
argument_list|,
name|entry
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|constantOffset
operator|+
literal|1
argument_list|,
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|buildScanFromOffsetPredicateLessEq
parameter_list|()
block|{
name|long
name|constantOffset
init|=
literal|50
decl_stmt|;
comment|// columnOffset< constant
name|Map
name|actual
init|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromOffsetPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|constantOffset
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|expected
init|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
operator|new
name|KafkaInputSplit
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getTopic
argument_list|()
argument_list|,
name|entry
operator|.
name|getPartition
argument_list|()
argument_list|,
name|entry
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|constantOffset
operator|+
literal|1
argument_list|,
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// columnOffset>= constant
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromOffsetPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|constantOffset
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
operator|new
name|KafkaInputSplit
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getTopic
argument_list|()
argument_list|,
name|entry
operator|.
name|getPartition
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|entry
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|constantOffset
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// columnOffset> constant
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromOffsetPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|constantOffset
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
operator|new
name|KafkaInputSplit
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getTopic
argument_list|()
argument_list|,
name|entry
operator|.
name|getPartition
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|entry
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|constantOffset
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// columnOffset< constant
name|actual
operator|=
name|KafkaScanTrimmer
operator|.
name|buildScanFromOffsetPredicate
argument_list|(
name|fullHouse
argument_list|,
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|constantOffset
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|expected
operator|=
name|Maps
operator|.
name|transformValues
argument_list|(
name|fullHouse
argument_list|,
name|entry
lambda|->
operator|new
name|KafkaInputSplit
argument_list|(
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|entry
argument_list|)
operator|.
name|getTopic
argument_list|()
argument_list|,
name|entry
operator|.
name|getPartition
argument_list|()
argument_list|,
name|entry
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|constantOffset
argument_list|,
name|entry
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ConstantExprBuilder
block|{
specifier|static
name|ExprNodeDesc
name|build
parameter_list|(
name|long
name|constant
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|constant
argument_list|)
return|;
block|}
specifier|static
name|ExprNodeDesc
name|build
parameter_list|(
name|int
name|constant
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeConstantDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|constant
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|ExprNodeGenericFuncDesc
name|or
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
operator|new
name|GenericUDFOPOr
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ExprNodeGenericFuncDesc
name|and
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|TypeInfoFactory
operator|.
name|booleanTypeInfo
argument_list|,
operator|new
name|GenericUDFOPAnd
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ExprNodeGenericFuncDesc
name|eq
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
operator|new
name|GenericUDFOPEqual
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ExprNodeGenericFuncDesc
name|lessThan
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
operator|new
name|GenericUDFOPLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ExprNodeGenericFuncDesc
name|lessThanEq
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
operator|new
name|GenericUDFOPEqualOrLessThan
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ExprNodeGenericFuncDesc
name|greaterThan
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
operator|new
name|GenericUDFOPGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ExprNodeGenericFuncDesc
name|greaterThanEq
parameter_list|(
name|List
argument_list|<
name|ExprNodeDesc
argument_list|>
name|children
parameter_list|)
block|{
return|return
operator|new
name|ExprNodeGenericFuncDesc
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeInfo
argument_list|()
argument_list|,
operator|new
name|GenericUDFOPEqualOrGreaterThan
argument_list|()
argument_list|,
name|children
argument_list|)
return|;
block|}
block|}
end_class

end_unit

