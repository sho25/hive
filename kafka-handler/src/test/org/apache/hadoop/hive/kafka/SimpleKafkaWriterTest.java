begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|ConsumerRecords
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|KafkaConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|producer
operator|.
name|ProducerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|TopicPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|serialization
operator|.
name|ByteArrayDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_comment
comment|/**  * Test class for Kafka simple writer.  */
end_comment

begin_class
specifier|public
class|class
name|SimpleKafkaWriterTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SimpleKafkaWriterTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RECORD_NUMBER
init|=
literal|17384
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|KEY_BYTES
init|=
literal|"KEY"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KafkaBrokerResource
name|KAFKA_BROKER_RESOURCE
init|=
operator|new
name|KafkaBrokerResource
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|KafkaWritable
argument_list|>
name|RECORDS_WRITABLES
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|RECORD_NUMBER
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|number
lambda|->
block|{
specifier|final
name|byte
index|[]
name|value
init|=
operator|(
literal|"VALUE-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|number
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|KafkaWritable
argument_list|(
literal|0
argument_list|,
operator|(
name|long
operator|)
name|number
argument_list|,
name|value
argument_list|,
name|KEY_BYTES
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|private
name|KafkaConsumer
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|consumer
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Throwable
block|{
name|KAFKA_BROKER_RESOURCE
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownCluster
parameter_list|()
block|{
name|KAFKA_BROKER_RESOURCE
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"setting up Config"
argument_list|)
expr_stmt|;
name|setupConsumer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"tearDown"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupConsumer
parameter_list|()
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"kafka.bootstrap.servers"
argument_list|,
name|KafkaBrokerResource
operator|.
name|BROKER_IP_PORT
argument_list|)
expr_stmt|;
name|Properties
name|consumerProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"enable.auto.commit"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"auto.offset.reset"
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"bootstrap.servers"
argument_list|,
name|KafkaBrokerResource
operator|.
name|BROKER_IP_PORT
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"key.deserializer"
argument_list|,
name|ByteArrayDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"value.deserializer"
argument_list|,
name|ByteArrayDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"request.timeout.ms"
argument_list|,
literal|"3002"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"fetch.max.wait.ms"
argument_list|,
literal|"3001"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"session.timeout.ms"
argument_list|,
literal|"3001"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"metadata.max.age.ms"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
operator|new
name|KafkaConsumer
argument_list|<>
argument_list|(
name|consumerProps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMissingBrokerString
parameter_list|()
block|{
operator|new
name|SimpleKafkaWriter
argument_list|(
literal|"t"
argument_list|,
literal|null
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckWriterId
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|ProducerConfig
operator|.
name|BOOTSTRAP_SERVERS_CONFIG
argument_list|,
literal|"localhost:9290"
argument_list|)
expr_stmt|;
name|SimpleKafkaWriter
name|writer
init|=
operator|new
name|SimpleKafkaWriter
argument_list|(
literal|"t"
argument_list|,
literal|null
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|writer
operator|.
name|getWriterId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSendToNoWhere
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|notValidBroker
init|=
literal|"localhost:6090"
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|ProducerConfig
operator|.
name|BOOTSTRAP_SERVERS_CONFIG
argument_list|,
name|notValidBroker
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"request.timeout.ms"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"metadata.max.age.ms"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"max.block.ms"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|KafkaWritable
name|record
init|=
operator|new
name|KafkaWritable
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|"value"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SimpleKafkaWriter
name|writer
init|=
operator|new
name|SimpleKafkaWriter
argument_list|(
literal|"t"
argument_list|,
literal|null
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Must rethrow exception"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expect sent records not matching"
argument_list|,
literal|1
argument_list|,
name|writer
operator|.
name|getSentRecords
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expect lost records is not matching"
argument_list|,
literal|1
argument_list|,
name|writer
operator|.
name|getLostRecords
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSend
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|topic
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|ProducerConfig
operator|.
name|BOOTSTRAP_SERVERS_CONFIG
argument_list|,
name|KafkaBrokerResource
operator|.
name|BROKER_IP_PORT
argument_list|)
expr_stmt|;
name|SimpleKafkaWriter
name|writer
init|=
operator|new
name|SimpleKafkaWriter
argument_list|(
name|topic
argument_list|,
literal|null
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|RECORDS_WRITABLES
operator|.
name|forEach
argument_list|(
name|kafkaRecordWritable
lambda|->
block|{
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|kafkaRecordWritable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RECORD_NUMBER
argument_list|,
name|writer
operator|.
name|getSentRecords
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|writer
operator|.
name|getLostRecords
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|TopicPartition
argument_list|>
name|assignment
init|=
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|TopicPartition
argument_list|(
name|topic
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|assign
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|seekToBeginning
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|long
name|numRecords
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|numRecords
operator|<
name|RECORD_NUMBER
condition|)
block|{
name|ConsumerRecords
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|records
init|=
name|consumer
operator|.
name|poll
argument_list|(
name|Duration
operator|.
name|ofMillis
argument_list|(
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|records
operator|.
name|records
argument_list|(
operator|new
name|TopicPartition
argument_list|(
name|topic
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|consumerRecord
lambda|->
operator|!
name|RECORDS_WRITABLES
operator|.
name|contains
argument_list|(
operator|new
name|KafkaWritable
argument_list|(
literal|0
argument_list|,
name|consumerRecord
operator|.
name|timestamp
argument_list|()
argument_list|,
name|consumerRecord
operator|.
name|value
argument_list|()
argument_list|,
name|consumerRecord
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|numRecords
operator|+=
name|records
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RECORD_NUMBER
argument_list|,
name|numRecords
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

