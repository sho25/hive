begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|ConsumerRecords
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|KafkaConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|TopicPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|errors
operator|.
name|ProducerFencedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|serialization
operator|.
name|ByteArrayDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_comment
comment|/**  * Test Transactional Writer.  */
end_comment

begin_class
specifier|public
class|class
name|TransactionalKafkaWriterTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TOPIC
init|=
literal|"TOPIC_TEST"
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KafkaBrokerResource
name|KAFKA_BROKER_RESOURCE
init|=
operator|new
name|KafkaBrokerResource
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RECORD_NUMBER
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|KEY_BYTES
init|=
literal|"key"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|KafkaWritable
argument_list|>
name|RECORDS_WRITABLES
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|RECORD_NUMBER
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|number
lambda|->
block|{
specifier|final
name|byte
index|[]
name|value
init|=
operator|(
literal|"VALUE-"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|number
argument_list|)
operator|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|KafkaWritable
argument_list|(
literal|0
argument_list|,
operator|(
name|long
operator|)
name|number
argument_list|,
name|value
argument_list|,
name|KEY_BYTES
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|queryId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Path
name|queryWorkingPath
decl_stmt|;
specifier|private
name|KafkaStorageHandler
name|kafkaStorageHandler
decl_stmt|;
specifier|private
specifier|final
name|Table
name|table
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|KafkaConsumer
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|consumer
decl_stmt|;
specifier|private
name|Properties
name|properties
decl_stmt|;
specifier|private
name|void
name|setupConsumer
parameter_list|()
block|{
name|Properties
name|consumerProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"enable.auto.commit"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"auto.offset.reset"
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"bootstrap.servers"
argument_list|,
name|KafkaBrokerResource
operator|.
name|BROKER_IP_PORT
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"key.deserializer"
argument_list|,
name|ByteArrayDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"value.deserializer"
argument_list|,
name|ByteArrayDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"request.timeout.ms"
argument_list|,
literal|"3002"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"fetch.max.wait.ms"
argument_list|,
literal|"3001"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"session.timeout.ms"
argument_list|,
literal|"3001"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"metadata.max.age.ms"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"max.poll.interval.ms"
argument_list|,
literal|"300"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"max.block.ms"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|consumerProps
operator|.
name|setProperty
argument_list|(
literal|"isolation.level"
argument_list|,
literal|"read_committed"
argument_list|)
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
operator|new
name|KafkaConsumer
argument_list|<>
argument_list|(
name|consumerProps
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TransactionalKafkaWriterTest
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Throwable
block|{
name|KAFKA_BROKER_RESOURCE
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownCluster
parameter_list|()
block|{
name|KAFKA_BROKER_RESOURCE
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|setupConsumer
argument_list|()
expr_stmt|;
name|temporaryFolder
operator|.
name|create
argument_list|()
expr_stmt|;
name|Path
name|tableLocation
init|=
operator|new
name|Path
argument_list|(
name|temporaryFolder
operator|.
name|newFolder
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|queryWorkingPath
operator|=
operator|new
name|Path
argument_list|(
name|tableLocation
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
operator|.
name|varname
argument_list|,
name|queryId
argument_list|)
expr_stmt|;
name|String
name|taskId
init|=
literal|"attempt_m_0001_0"
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"mapred.task.id"
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_BOOTSTRAP_SERVERS
operator|.
name|getName
argument_list|()
argument_list|,
name|KafkaBrokerResource
operator|.
name|BROKER_IP_PORT
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|stream
argument_list|(
name|KafkaTableProperties
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|kafkaTableProperties
lambda|->
operator|!
name|kafkaTableProperties
operator|.
name|isMandatory
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|key
lambda|->
block|{
name|configuration
operator|.
name|set
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|,
name|key
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
argument_list|;
name|parameters
operator|.
name|put
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|,
name|key
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
argument_list|;
block|}
block|)
class|;
end_class

begin_expr_stmt
name|parameters
operator|.
name|put
argument_list|(
name|KafkaTableProperties
operator|.
name|WRITE_SEMANTIC_PROPERTY
operator|.
name|getName
argument_list|()
argument_list|,
name|KafkaOutputFormat
operator|.
name|WriteSemantic
operator|.
name|EXACTLY_ONCE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|configuration
operator|.
name|set
argument_list|(
name|KafkaTableProperties
operator|.
name|WRITE_SEMANTIC_PROPERTY
operator|.
name|getName
argument_list|()
argument_list|,
name|KafkaOutputFormat
operator|.
name|WriteSemantic
operator|.
name|EXACTLY_ONCE
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|parameters
operator|.
name|put
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_TOPIC
operator|.
name|getName
argument_list|()
argument_list|,
name|TOPIC
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|parameters
operator|.
name|put
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_BOOTSTRAP_SERVERS
operator|.
name|getName
argument_list|()
argument_list|,
name|KafkaBrokerResource
operator|.
name|BROKER_IP_PORT
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|parameters
operator|.
name|put
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_OPTIMISTIC_COMMIT
operator|.
name|getName
argument_list|()
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|kafkaStorageHandler
operator|=
operator|new
name|KafkaStorageHandler
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Mockito
operator|.
name|when
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|sd
operator|.
name|setLocation
argument_list|(
name|tableLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Mockito
operator|.
name|when
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sd
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|kafkaStorageHandler
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|properties
operator|=
name|KafkaUtils
operator|.
name|producerProperties
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|After
specifier|public
name|void
name|tearAfterTest
parameter_list|()
block|{
name|KAFKA_BROKER_RESOURCE
operator|.
name|deleteTopic
argument_list|(
name|TOPIC
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|(
name|Duration
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|consumer
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|writeAndCommit
parameter_list|()
throws|throws
name|IOException
throws|,
name|MetaException
block|{
name|TransactionalKafkaWriter
name|zombieWriter
init|=
operator|new
name|TransactionalKafkaWriter
argument_list|(
name|TOPIC
argument_list|,
name|properties
argument_list|,
name|queryWorkingPath
argument_list|,
name|fs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RECORDS_WRITABLES
operator|.
name|forEach
argument_list|(
name|kafkaRecordWritable
lambda|->
block|{
try|try
block|{
name|zombieWriter
operator|.
name|write
argument_list|(
name|kafkaRecordWritable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RECORD_NUMBER
argument_list|,
name|zombieWriter
operator|.
name|getSentRecords
argument_list|()
argument_list|)
expr_stmt|;
name|TransactionalKafkaWriter
name|writer
init|=
operator|new
name|TransactionalKafkaWriter
argument_list|(
name|TOPIC
argument_list|,
name|properties
argument_list|,
name|queryWorkingPath
argument_list|,
name|fs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RECORDS_WRITABLES
operator|.
name|forEach
argument_list|(
name|kafkaRecordWritable
lambda|->
block|{
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|kafkaRecordWritable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//TEST zombie id is the same as current writer and epoch is greater
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writer
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|zombieWriter
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|writer
operator|.
name|getProducerEpoch
argument_list|()
operator|>
name|zombieWriter
operator|.
name|getProducerEpoch
argument_list|()
argument_list|)
expr_stmt|;
name|zombieWriter
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|kafkaStorageHandler
operator|.
name|commitInsertTable
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkData
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|java
operator|.
name|lang
operator|.
name|AssertionError
operator|.
name|class
argument_list|)
specifier|public
name|void
name|writeAndNoCommit
parameter_list|()
throws|throws
name|IOException
block|{
name|TransactionalKafkaWriter
name|writer
init|=
operator|new
name|TransactionalKafkaWriter
argument_list|(
name|TOPIC
argument_list|,
name|properties
argument_list|,
name|queryWorkingPath
argument_list|,
name|fs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RECORDS_WRITABLES
operator|.
name|forEach
argument_list|(
name|kafkaRecordWritable
lambda|->
block|{
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|kafkaRecordWritable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|writer
operator|.
name|getSentRecords
argument_list|()
argument_list|,
name|RECORD_NUMBER
argument_list|)
expr_stmt|;
comment|//DATA is not committed
name|checkData
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|writerFencedOut
parameter_list|()
throws|throws
name|IOException
block|{
name|TransactionalKafkaWriter
name|writer
init|=
operator|new
name|TransactionalKafkaWriter
argument_list|(
name|TOPIC
argument_list|,
name|properties
argument_list|,
name|queryWorkingPath
argument_list|,
name|fs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//noinspection unused this is actually used, the contstructor start the TX that is what we need
name|TransactionalKafkaWriter
name|newWriter
init|=
operator|new
name|TransactionalKafkaWriter
argument_list|(
name|TOPIC
argument_list|,
name|properties
argument_list|,
name|queryWorkingPath
argument_list|,
name|fs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|KafkaWritable
name|record
range|:
name|RECORDS_WRITABLES
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ProducerFencedException
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|checkData
parameter_list|()
block|{
name|Set
argument_list|<
name|TopicPartition
argument_list|>
name|assignment
init|=
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|TopicPartition
argument_list|(
name|TOPIC
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|assign
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|seekToBeginning
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|long
name|numRecords
init|=
literal|0
decl_stmt|;
name|boolean
name|emptyPoll
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|numRecords
operator|<
name|RECORD_NUMBER
operator|&&
operator|!
name|emptyPoll
condition|)
block|{
name|ConsumerRecords
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|records
init|=
name|consumer
operator|.
name|poll
argument_list|(
name|Duration
operator|.
name|ofMillis
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|records
operator|.
name|records
argument_list|(
operator|new
name|TopicPartition
argument_list|(
name|TOPIC
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|consumerRecord
lambda|->
operator|!
name|RECORDS_WRITABLES
operator|.
name|contains
argument_list|(
operator|new
name|KafkaWritable
argument_list|(
literal|0
argument_list|,
name|consumerRecord
operator|.
name|timestamp
argument_list|()
argument_list|,
name|consumerRecord
operator|.
name|value
argument_list|()
argument_list|,
name|consumerRecord
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emptyPoll
operator|=
name|records
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|numRecords
operator|+=
name|records
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RECORD_NUMBER
argument_list|,
name|numRecords
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

