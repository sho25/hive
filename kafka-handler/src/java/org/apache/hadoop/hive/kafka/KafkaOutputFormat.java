begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|FileSinkOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|HiveOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Kafka Hive Output Format class used to write Hive Rows to a Kafka Queue.  */
end_comment

begin_class
specifier|public
class|class
name|KafkaOutputFormat
implements|implements
name|HiveOutputFormat
argument_list|<
name|NullWritable
argument_list|,
name|KafkaWritable
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KafkaOutputFormat
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|FileSinkOperator
operator|.
name|RecordWriter
name|getHiveRecordWriter
parameter_list|(
name|JobConf
name|jc
parameter_list|,
name|Path
name|finalOutPath
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|valueClass
parameter_list|,
name|boolean
name|isCompressed
parameter_list|,
name|Properties
name|tableProperties
parameter_list|,
name|Progressable
name|progress
parameter_list|)
block|{
specifier|final
name|String
name|topic
init|=
name|jc
operator|.
name|get
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_TOPIC
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Boolean
name|optimisticCommit
init|=
name|jc
operator|.
name|getBoolean
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_OPTIMISTIC_COMMIT
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|WriteSemantic
name|writeSemantic
init|=
name|WriteSemantic
operator|.
name|valueOf
argument_list|(
name|jc
operator|.
name|get
argument_list|(
name|KafkaTableProperties
operator|.
name|WRITE_SEMANTIC_PROPERTY
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Properties
name|producerProperties
init|=
name|KafkaUtils
operator|.
name|producerProperties
argument_list|(
name|jc
argument_list|)
decl_stmt|;
specifier|final
name|FileSinkOperator
operator|.
name|RecordWriter
name|recordWriter
decl_stmt|;
switch|switch
condition|(
name|writeSemantic
condition|)
block|{
case|case
name|BEST_EFFORT
case|:
name|recordWriter
operator|=
operator|new
name|SimpleKafkaWriter
argument_list|(
name|topic
argument_list|,
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|jc
argument_list|)
argument_list|,
literal|false
argument_list|,
name|producerProperties
argument_list|)
expr_stmt|;
break|break;
case|case
name|AT_LEAST_ONCE
case|:
name|recordWriter
operator|=
operator|new
name|SimpleKafkaWriter
argument_list|(
name|topic
argument_list|,
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|jc
argument_list|)
argument_list|,
literal|true
argument_list|,
name|producerProperties
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXACTLY_ONCE
case|:
name|FileSystem
name|fs
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|finalOutPath
operator|.
name|getFileSystem
argument_list|(
name|jc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not construct file system instance"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|String
name|queryId
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|jc
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
operator|.
name|varname
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|recordWriter
operator|=
operator|new
name|TransactionalKafkaWriter
argument_list|(
name|topic
argument_list|,
name|producerProperties
argument_list|,
operator|new
name|Path
argument_list|(
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|finalOutPath
argument_list|)
argument_list|,
name|queryId
argument_list|)
argument_list|,
name|fs
argument_list|,
name|optimisticCommit
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unknown delivery semantic [%s]"
argument_list|,
name|writeSemantic
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|recordWriter
return|;
block|}
annotation|@
name|Override
specifier|public
name|RecordWriter
argument_list|<
name|NullWritable
argument_list|,
name|KafkaWritable
argument_list|>
name|getRecordWriter
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|JobConf
name|jobConf
parameter_list|,
name|String
name|s
parameter_list|,
name|Progressable
name|progressable
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"this is not suppose to be here"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkOutputSpecs
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
block|{    }
comment|/**    * Possible write semantic supported by the Record Writer.    */
enum|enum
name|WriteSemantic
block|{
comment|/**      * Best effort delivery with no guarantees at all, user can set Producer properties as they wish,      * will carry on when possible unless it is a fatal exception.      */
name|BEST_EFFORT
block|,
comment|/**      * Deliver all the record at least once unless the job fails.      * Therefore duplicates can be introduced due to lost ACKs or Tasks retries.      * Currently this is the default.      */
name|AT_LEAST_ONCE
block|,
comment|/**      * Deliver every record exactly once.      */
name|EXACTLY_ONCE
block|,   }
block|}
end_class

end_unit

