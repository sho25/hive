begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|AbstractPrimitiveWritableObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Enum class for all the metadata columns appended to the Kafka row by the Hive Serializer/Deserializer.  *  *<p>  *<b>Design Notes:</b>  *  * It is important to note that the order at which columns are appended matters, the order is governed by:  * {@link MetadataColumn#KAFKA_METADATA_COLUMNS}.  *  * If you add a new Column make sure to added its Writable converter to {@link KafkaWritable}.  *  */
end_comment

begin_enum
enum|enum
name|MetadataColumn
block|{
comment|/**    * Kafka Record's offset column name added as extra metadata column to row as long.    */
name|OFFSET
argument_list|(
literal|"__offset"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|,
comment|/**    * Record Kafka Partition column name added as extra meta column of type int.    */
name|PARTITION
argument_list|(
literal|"__partition"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
block|,
comment|/**    * Record Kafka key column name added as extra meta column of type binary blob.    */
name|KEY
argument_list|(
literal|"__key"
argument_list|,
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|)
block|,
comment|/**    * Record Timestamp column name, added as extra meta column of type long.    */
name|TIMESTAMP
argument_list|(
literal|"__timestamp"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|,
comment|/**    * Start offset given by the input split, this will reflect the actual start of TP or start given by split pruner.    */
comment|// @TODO To be removed next PR it is here to make review easy
name|START_OFFSET
argument_list|(
literal|"__start_offset"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|,
comment|/**    * End offset given by input split at run time.    */
comment|// @TODO To be removed next PR it is here to make review easy
name|END_OFFSET
argument_list|(
literal|"__end_offset"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|;
comment|/**    * Kafka metadata columns list that indicates the order of appearance for each column in final row.    */
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|MetadataColumn
argument_list|>
name|KAFKA_METADATA_COLUMNS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|KEY
argument_list|,
name|PARTITION
argument_list|,
name|OFFSET
argument_list|,
name|TIMESTAMP
argument_list|,
name|START_OFFSET
argument_list|,
name|END_OFFSET
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|KAFKA_METADATA_INSPECTORS
init|=
name|KAFKA_METADATA_COLUMNS
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MetadataColumn
operator|::
name|getObjectInspector
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|KAFKA_METADATA_COLUMN_NAMES
init|=
name|KAFKA_METADATA_COLUMNS
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MetadataColumn
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|TypeInfo
name|typeInfo
decl_stmt|;
name|MetadataColumn
parameter_list|(
name|String
name|name
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|typeInfo
operator|=
name|typeInfo
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|AbstractPrimitiveWritableObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataColumn
argument_list|>
name|NAMES_MAP
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|MetadataColumn
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|MetadataColumn
operator|::
name|getName
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|/**    * Column name to MetadataColumn instance.    * @param name column name.    * @return instance of {@link MetadataColumn} or null if column name is absent    */
annotation|@
name|Nullable
specifier|static
name|MetadataColumn
name|forName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|NAMES_MAP
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_enum

end_unit

