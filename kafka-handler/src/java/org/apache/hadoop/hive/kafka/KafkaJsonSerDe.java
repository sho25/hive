begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|TimestampTZ
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|BytesRefWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampLocalTZWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TimestampLocalTZTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeFormatterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|format
operator|.
name|ISODateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Basic JsonSerDe to make use of such storage handler smooth and easy and testing basic primitive Json.  * For production please use Hive native JsonSerde.  */
end_comment

begin_class
specifier|public
class|class
name|KafkaJsonSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KafkaJsonSerDe
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|DateTimeFormatter
argument_list|>
name|TS_PARSER
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
name|KafkaJsonSerDe
operator|::
name|createAutoParser
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Function
argument_list|<
name|TypeInfo
argument_list|,
name|ObjectInspector
argument_list|>
name|typeInfoToObjectInspector
init|=
name|typeInfo
lambda|->
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
decl_stmt|;
specifier|private
name|ObjectInspector
name|inspector
decl_stmt|;
specifier|private
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
specifier|private
name|long
name|rowCount
init|=
literal|0L
decl_stmt|;
specifier|private
name|long
name|rawDataSize
init|=
literal|0L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
annotation|@
name|Nullable
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|inspectors
decl_stmt|;
comment|// Get column names and types
name|String
name|columnNameProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
name|String
name|columnTypeProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnNameDelimiter
init|=
name|tbl
operator|.
name|containsKey
argument_list|(
name|serdeConstants
operator|.
name|COLUMN_NAME_DELIMITER
argument_list|)
condition|?
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|COLUMN_NAME_DELIMITER
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|SerDeUtils
operator|.
name|COMMA
argument_list|)
decl_stmt|;
comment|// all table column names
if|if
condition|(
operator|!
name|columnNameProperty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|columnNames
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|columnNameProperty
operator|.
name|split
argument_list|(
name|columnNameDelimiter
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// all column types
if|if
condition|(
operator|!
name|columnTypeProperty
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|columnTypes
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|columnTypeProperty
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"columns: {}, {}"
argument_list|,
name|columnNameProperty
argument_list|,
name|columnNames
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"types: {}, {} "
argument_list|,
name|columnTypeProperty
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
block|}
name|inspectors
operator|=
name|columnTypes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|typeInfoToObjectInspector
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|inspectors
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|BytesRefWritable
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"unimplemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
name|SerDeStats
name|serDeStats
init|=
operator|new
name|SerDeStats
argument_list|()
decl_stmt|;
name|serDeStats
operator|.
name|setRawDataSize
argument_list|(
name|rawDataSize
argument_list|)
expr_stmt|;
name|serDeStats
operator|.
name|setRowCount
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
return|return
name|serDeStats
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
name|BytesWritable
name|record
init|=
operator|(
name|BytesWritable
operator|)
name|blob
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|payload
decl_stmt|;
try|try
block|{
name|payload
operator|=
name|parseAsJson
argument_list|(
name|record
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|rowCount
operator|+=
literal|1
expr_stmt|;
name|rawDataSize
operator|+=
name|record
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|output
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|columnNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
name|columnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|TypeInfo
name|typeInfo
init|=
name|columnTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|JsonNode
name|value
init|=
name|payload
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|output
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|columnTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|output
operator|.
name|add
argument_list|(
name|parseAsPrimitive
argument_list|(
name|value
argument_list|,
name|typeInfo
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
case|case
name|LIST
case|:
case|case
name|UNION
case|:
case|case
name|STRUCT
case|:
default|default:
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"not supported yet"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|output
return|;
block|}
specifier|private
name|Object
name|parseAsPrimitive
parameter_list|(
name|JsonNode
name|value
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
throws|throws
name|SerDeException
block|{
switch|switch
condition|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|TIMESTAMP
case|:
name|TimestampWritable
name|timestampWritable
init|=
operator|new
name|TimestampWritable
argument_list|()
decl_stmt|;
name|timestampWritable
operator|.
name|setTime
argument_list|(
name|TS_PARSER
operator|.
name|get
argument_list|()
operator|.
name|parseMillis
argument_list|(
name|value
operator|.
name|textValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|timestampWritable
return|;
case|case
name|TIMESTAMPLOCALTZ
case|:
specifier|final
name|long
name|numberOfMillis
init|=
name|TS_PARSER
operator|.
name|get
argument_list|()
operator|.
name|parseMillis
argument_list|(
name|value
operator|.
name|textValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimestampLocalTZWritable
argument_list|(
operator|new
name|TimestampTZ
argument_list|(
name|ZonedDateTime
operator|.
name|ofInstant
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|numberOfMillis
argument_list|)
argument_list|,
operator|(
operator|(
name|TimestampLocalTZTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|timeZone
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
operator|(
operator|new
name|ShortWritable
argument_list|(
name|value
operator|.
name|shortValue
argument_list|()
argument_list|)
operator|)
return|;
case|case
name|INT
case|:
return|return
operator|new
name|IntWritable
argument_list|(
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
operator|(
operator|new
name|LongWritable
argument_list|(
operator|(
name|value
operator|.
name|longValue
argument_list|()
operator|)
argument_list|)
operator|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|(
operator|new
name|FloatWritable
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
operator|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|(
operator|new
name|DoubleWritable
argument_list|(
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|)
return|;
case|case
name|DECIMAL
case|:
return|return
operator|(
operator|new
name|HiveDecimalWritable
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
operator|.
name|decimalValue
argument_list|()
argument_list|)
argument_list|)
operator|)
return|;
case|case
name|CHAR
case|:
return|return
operator|(
operator|new
name|HiveCharWritable
argument_list|(
operator|new
name|HiveChar
argument_list|(
name|value
operator|.
name|textValue
argument_list|()
argument_list|,
operator|(
operator|(
name|CharTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
operator|)
return|;
case|case
name|VARCHAR
case|:
return|return
operator|(
operator|new
name|HiveVarcharWritable
argument_list|(
operator|new
name|HiveVarchar
argument_list|(
name|value
operator|.
name|textValue
argument_list|()
argument_list|,
operator|(
operator|(
name|CharTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
operator|)
return|;
case|case
name|STRING
case|:
return|return
operator|(
operator|new
name|Text
argument_list|(
name|value
operator|.
name|textValue
argument_list|()
argument_list|)
operator|)
return|;
case|case
name|BOOLEAN
case|:
return|return
operator|(
operator|new
name|BooleanWritable
argument_list|(
name|value
operator|.
name|isBoolean
argument_list|()
condition|?
name|value
operator|.
name|booleanValue
argument_list|()
else|:
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|textValue
argument_list|()
argument_list|)
argument_list|)
operator|)
return|;
default|default:
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Unknown type: "
operator|+
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|parseAsJson
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|JsonNode
name|document
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|value
argument_list|,
name|JsonNode
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Hive Column names are case insensitive.
name|Map
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|documentMap
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
name|document
operator|.
name|fields
argument_list|()
operator|.
name|forEachRemaining
argument_list|(
name|field
lambda|->
name|documentMap
operator|.
name|put
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|documentMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|inspector
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"null inspector ??"
argument_list|)
throw|;
block|}
return|return
name|inspector
return|;
block|}
specifier|private
specifier|static
name|DateTimeFormatter
name|createAutoParser
parameter_list|()
block|{
specifier|final
name|DateTimeFormatter
name|offsetElement
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendTimeZoneOffset
argument_list|(
literal|"Z"
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
operator|.
name|toFormatter
argument_list|()
decl_stmt|;
name|DateTimeParser
name|timeOrOffset
init|=
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|null
argument_list|,
operator|new
name|DateTimeParser
index|[]
block|{
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|'T'
argument_list|)
operator|.
name|toParser
argument_list|()
block|,
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|appendLiteral
argument_list|(
literal|' '
argument_list|)
operator|.
name|toParser
argument_list|()
block|}
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|ISODateTimeFormat
operator|.
name|timeElementParser
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|offsetElement
operator|.
name|getParser
argument_list|()
argument_list|)
operator|.
name|toParser
argument_list|()
decl_stmt|;
return|return
operator|new
name|DateTimeFormatterBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|ISODateTimeFormat
operator|.
name|dateElementParser
argument_list|()
argument_list|)
operator|.
name|appendOptional
argument_list|(
name|timeOrOffset
argument_list|)
operator|.
name|toFormatter
argument_list|()
return|;
block|}
block|}
end_class

end_unit

