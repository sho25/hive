begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskAttemptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|CommonClientConfigs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|ConsumerRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|KafkaConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|TopicPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Kafka Records Reader implementation.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnstableApiUsage"
argument_list|)
specifier|public
class|class
name|KafkaPullerRecordReader
extends|extends
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|KafkaRecordWritable
argument_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|KafkaRecordWritable
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KafkaPullerRecordReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|KafkaConsumer
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|consumer
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|config
init|=
literal|null
decl_stmt|;
specifier|private
name|KafkaRecordWritable
name|currentWritableValue
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|recordsCursor
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|totalNumberRecords
init|=
literal|0L
decl_stmt|;
specifier|private
name|long
name|consumedRecords
init|=
literal|0L
decl_stmt|;
specifier|private
name|long
name|readBytes
init|=
literal|0L
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|started
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|startOffset
init|=
operator|-
literal|1L
decl_stmt|;
specifier|private
name|long
name|endOffset
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"WeakerAccess"
argument_list|)
specifier|public
name|KafkaPullerRecordReader
parameter_list|()
block|{   }
specifier|private
name|void
name|initConsumer
parameter_list|()
block|{
if|if
condition|(
name|consumer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing Kafka Consumer"
argument_list|)
expr_stmt|;
specifier|final
name|Properties
name|properties
init|=
name|KafkaStreamingUtils
operator|.
name|consumerProperties
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|String
name|brokerString
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|CommonClientConfigs
operator|.
name|BOOTSTRAP_SERVERS_CONFIG
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|brokerString
argument_list|,
literal|"broker end point can not be null"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Consumer with Kafka broker string [{}]"
argument_list|,
name|brokerString
argument_list|)
expr_stmt|;
name|consumer
operator|=
operator|new
name|KafkaConsumer
argument_list|<>
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"WeakerAccess"
argument_list|)
specifier|public
name|KafkaPullerRecordReader
parameter_list|(
name|KafkaPullerInputSplit
name|inputSplit
parameter_list|,
name|Configuration
name|jobConf
parameter_list|)
block|{
name|initialize
argument_list|(
name|inputSplit
argument_list|,
name|jobConf
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|initialize
parameter_list|(
name|KafkaPullerInputSplit
name|inputSplit
parameter_list|,
name|Configuration
name|jobConf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|started
condition|)
block|{
name|this
operator|.
name|config
operator|=
name|jobConf
expr_stmt|;
name|startOffset
operator|=
name|inputSplit
operator|.
name|getStartOffset
argument_list|()
expr_stmt|;
name|endOffset
operator|=
name|inputSplit
operator|.
name|getEndOffset
argument_list|()
expr_stmt|;
name|TopicPartition
name|topicPartition
init|=
operator|new
name|TopicPartition
argument_list|(
name|inputSplit
operator|.
name|getTopic
argument_list|()
argument_list|,
name|inputSplit
operator|.
name|getPartition
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|startOffset
operator|>=
literal|0
operator|&&
name|startOffset
operator|<=
name|endOffset
argument_list|,
literal|"Start [%s] has to be positive and less or equal than End [%s]"
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
name|totalNumberRecords
operator|+=
name|endOffset
operator|-
name|startOffset
expr_stmt|;
name|initConsumer
argument_list|()
expr_stmt|;
name|long
name|pollTimeout
init|=
name|config
operator|.
name|getLong
argument_list|(
name|KafkaStreamingUtils
operator|.
name|HIVE_KAFKA_POLL_TIMEOUT
argument_list|,
name|KafkaStreamingUtils
operator|.
name|DEFAULT_CONSUMER_POLL_TIMEOUT_MS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Consumer poll timeout [{}] ms"
argument_list|,
name|pollTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|recordsCursor
operator|=
name|startOffset
operator|==
name|endOffset
condition|?
operator|new
name|KafkaRecordIterator
operator|.
name|EmptyIterator
argument_list|()
else|:
operator|new
name|KafkaRecordIterator
argument_list|(
name|consumer
argument_list|,
name|topicPartition
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|pollTimeout
argument_list|)
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
name|inputSplit
parameter_list|,
name|TaskAttemptContext
name|context
parameter_list|)
block|{
name|initialize
argument_list|(
operator|(
name|KafkaPullerInputSplit
operator|)
name|inputSplit
argument_list|,
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|NullWritable
name|nullWritable
parameter_list|,
name|KafkaRecordWritable
name|bytesWritable
parameter_list|)
block|{
if|if
condition|(
name|started
operator|&&
name|recordsCursor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|record
init|=
name|recordsCursor
operator|.
name|next
argument_list|()
decl_stmt|;
name|bytesWritable
operator|.
name|set
argument_list|(
name|record
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
name|consumedRecords
operator|+=
literal|1
expr_stmt|;
name|readBytes
operator|+=
name|record
operator|.
name|serializedValueSize
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|NullWritable
name|createKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|KafkaRecordWritable
name|createValue
parameter_list|()
block|{
return|return
operator|new
name|KafkaRecordWritable
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|nextKeyValue
parameter_list|()
block|{
name|currentWritableValue
operator|=
operator|new
name|KafkaRecordWritable
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
argument_list|(
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|,
name|currentWritableValue
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|currentWritableValue
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|NullWritable
name|getCurrentKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|KafkaRecordWritable
name|getCurrentValue
parameter_list|()
block|{
return|return
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|currentWritableValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
if|if
condition|(
name|consumedRecords
operator|==
literal|0
condition|)
block|{
return|return
literal|0f
return|;
block|}
if|if
condition|(
name|consumedRecords
operator|>=
name|totalNumberRecords
condition|)
block|{
return|return
literal|1f
return|;
block|}
return|return
name|consumedRecords
operator|*
literal|1.0f
operator|/
name|totalNumberRecords
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"total read bytes [{}]"
argument_list|,
name|readBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
name|consumer
operator|.
name|wakeup
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

