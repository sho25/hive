begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericDatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|BinaryEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|Decoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DecoderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|EncoderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificDatumReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroGenericRecordWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroSerdeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|server
operator|.
name|UID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Generic Kafka Serde that allow user to delegate Serde to other class like Avro,  * Json or any class that supports {@link BytesWritable}.  * I the user which to implement their own serde all they need is to implement a serde that extend  * {@link org.apache.hadoop.hive.serde2.AbstractSerDe} and accept {@link BytesWritable} as value  */
end_comment

begin_class
annotation|@
name|SerDeSpec
argument_list|(
name|schemaProps
operator|=
block|{
name|serdeConstants
operator|.
name|LIST_COLUMNS
block|,
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
block|}
argument_list|)
specifier|public
class|class
name|KafkaSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KafkaSerDe
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Delegate SerDe used to Serialize and DeSerialize data form/to Kafka.    */
specifier|private
name|AbstractSerDe
name|delegateSerDe
decl_stmt|;
comment|/**    * Delegate Object Inspector used to Deserialize the row, this OI is constructed by the {@code delegateSerDe}.    */
specifier|private
name|StructObjectInspector
name|delegateDeserializerOI
decl_stmt|;
comment|/**    * Delegate Object Inspector used to Serialize the row as byte array.    */
specifier|private
name|StructObjectInspector
name|delegateSerializerOI
decl_stmt|;
comment|/**    * Object Inspector of original row plus metadata.    */
specifier|private
name|ObjectInspector
name|objectInspector
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|BytesConverter
name|bytesConverter
decl_stmt|;
specifier|private
name|int
name|metadataStartIndex
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
annotation|@
name|Nullable
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|//This method is called before {@link org.apache.hadoop.hive.kafka.KafkaStorageHandler.preCreateTable}
comment|//Thus we need to default to org.apache.hadoop.hive.kafka.KafkaUtils.DEFAULT_PROPERTIES if any property is needed
specifier|final
name|String
name|className
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|KafkaTableProperties
operator|.
name|SERDE_CLASS_NAME
operator|.
name|getName
argument_list|()
argument_list|,
name|KafkaTableProperties
operator|.
name|SERDE_CLASS_NAME
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
decl_stmt|;
name|delegateSerDe
operator|=
name|KafkaUtils
operator|.
name|createDelegate
argument_list|(
name|className
argument_list|)
expr_stmt|;
comment|//noinspection deprecation
name|delegateSerDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|delegateSerDe
operator|.
name|getObjectInspector
argument_list|()
operator|instanceof
name|StructObjectInspector
operator|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Was expecting Struct Object Inspector but have "
operator|+
name|delegateSerDe
operator|.
name|getObjectInspector
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|delegateDeserializerOI
operator|=
operator|(
name|StructObjectInspector
operator|)
name|delegateSerDe
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
comment|// Build column names Order matters here
name|columnNames
operator|.
name|addAll
argument_list|(
name|delegateDeserializerOI
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|StructField
operator|::
name|getFieldName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|addAll
argument_list|(
name|MetadataColumn
operator|.
name|KAFKA_METADATA_COLUMN_NAMES
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|inspectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|columnNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|inspectors
operator|.
name|addAll
argument_list|(
name|delegateDeserializerOI
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|StructField
operator|::
name|getFieldObjectInspector
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|inspectors
operator|.
name|addAll
argument_list|(
name|MetadataColumn
operator|.
name|KAFKA_METADATA_INSPECTORS
argument_list|)
expr_stmt|;
name|objectInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|inspectors
argument_list|)
expr_stmt|;
name|metadataStartIndex
operator|=
name|columnNames
operator|.
name|size
argument_list|()
operator|-
name|MetadataColumn
operator|.
name|values
argument_list|()
operator|.
name|length
expr_stmt|;
comment|// Setup Read and Write Path From/To Kafka
if|if
condition|(
name|delegateSerDe
operator|.
name|getSerializedClass
argument_list|()
operator|==
name|Text
operator|.
name|class
condition|)
block|{
name|bytesConverter
operator|=
operator|new
name|TextBytesConverter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delegateSerDe
operator|.
name|getSerializedClass
argument_list|()
operator|==
name|AvroGenericRecordWritable
operator|.
name|class
condition|)
block|{
name|String
name|schemaFromProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
operator|.
name|SCHEMA_LITERAL
operator|.
name|getPropName
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|schemaFromProperty
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Avro Schema is empty Can not go further"
argument_list|)
expr_stmt|;
name|Schema
name|schema
init|=
name|AvroSerdeUtils
operator|.
name|getSchemaFor
argument_list|(
name|schemaFromProperty
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building Avro Reader with schema {}"
argument_list|,
name|schemaFromProperty
argument_list|)
expr_stmt|;
name|bytesConverter
operator|=
name|getByteConverterForAvroDelegate
argument_list|(
name|schema
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytesConverter
operator|=
operator|new
name|BytesWritableConverter
argument_list|()
expr_stmt|;
block|}
block|}
enum|enum
name|BytesConverterType
block|{
name|SKIP
block|,
name|NONE
block|;
specifier|static
name|BytesConverterType
name|fromString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
try|try
block|{
return|return
name|BytesConverterType
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|NONE
return|;
block|}
block|}
block|}
name|BytesConverter
name|getByteConverterForAvroDelegate
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
name|String
name|avroBytesConverterPropertyName
init|=
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
operator|.
name|AVRO_SERDE_TYPE
operator|.
name|getPropName
argument_list|()
decl_stmt|;
name|String
name|avroBytesConverterProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|avroBytesConverterPropertyName
argument_list|,
name|BytesConverterType
operator|.
name|NONE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|BytesConverterType
name|avroByteConverterType
init|=
name|BytesConverterType
operator|.
name|fromString
argument_list|(
name|avroBytesConverterProperty
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|avroByteConverterType
condition|)
block|{
case|case
name|SKIP
case|:
name|String
name|avroSkipBytesPropertyName
init|=
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
operator|.
name|AVRO_SERDE_SKIP_BYTES
operator|.
name|getPropName
argument_list|()
decl_stmt|;
name|Integer
name|avroSkipBytes
init|=
literal|0
decl_stmt|;
try|try
block|{
name|avroSkipBytes
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tbl
operator|.
name|getProperty
argument_list|(
name|avroSkipBytesPropertyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Value of "
operator|+
name|avroSkipBytesPropertyName
operator|+
literal|" could not be parsed into an integer properly."
decl_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|AvroSkipBytesConverter
argument_list|(
name|schema
argument_list|,
name|avroSkipBytes
argument_list|)
return|;
case|case
name|NONE
case|:
return|return
operator|new
name|AvroBytesConverter
argument_list|(
name|schema
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Value of "
operator|+
name|avroBytesConverterPropertyName
operator|+
literal|" was invalid."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|delegateSerDe
operator|.
name|getSerializedClass
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
operator|!
operator|(
name|objInspector
operator|instanceof
name|StructObjectInspector
operator|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Object inspector has to be "
operator|+
name|StructObjectInspector
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" but got "
operator|+
name|objInspector
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|StructObjectInspector
name|structObjectInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|data
init|=
name|structObjectInspector
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|int
name|firstMetadataColumnIndex
init|=
name|data
operator|.
name|size
argument_list|()
operator|-
name|MetadataColumn
operator|.
name|values
argument_list|()
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|delegateSerializerOI
operator|==
literal|null
condition|)
block|{
comment|//@TODO check if i can cache this if it is the same.
name|delegateSerializerOI
operator|=
operator|new
name|SubStructObjectInspector
argument_list|(
name|structObjectInspector
argument_list|,
name|firstMetadataColumnIndex
argument_list|)
expr_stmt|;
block|}
comment|// We always append the metadata columns to the end of the row.
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|row
init|=
name|data
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|firstMetadataColumnIndex
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|data
operator|.
name|get
argument_list|(
name|firstMetadataColumnIndex
argument_list|)
decl_stmt|;
name|Object
name|partition
init|=
name|data
operator|.
name|get
argument_list|(
name|firstMetadataColumnIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Object
name|offset
init|=
name|data
operator|.
name|get
argument_list|(
name|firstMetadataColumnIndex
operator|+
literal|2
argument_list|)
decl_stmt|;
name|Object
name|timestamp
init|=
name|data
operator|.
name|get
argument_list|(
name|firstMetadataColumnIndex
operator|+
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|offset
argument_list|,
name|MetadataColumn
operator|.
name|OFFSET
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not insert values into `__offset` column, has to be [-1]"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Can not insert values into `__offset` column, has to be [-1]"
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|keyBytes
init|=
name|key
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
specifier|final
name|long
name|recordTs
init|=
name|timestamp
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|PrimitiveObjectInspectorUtils
operator|.
name|getLong
argument_list|(
name|timestamp
argument_list|,
name|MetadataColumn
operator|.
name|TIMESTAMP
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|recordPartition
init|=
name|partition
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|PrimitiveObjectInspectorUtils
operator|.
name|getInt
argument_list|(
name|partition
argument_list|,
name|MetadataColumn
operator|.
name|PARTITION
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
comment|//noinspection unchecked
return|return
operator|new
name|KafkaWritable
argument_list|(
name|recordPartition
argument_list|,
name|recordTs
argument_list|,
name|bytesConverter
operator|.
name|getBytes
argument_list|(
name|delegateSerDe
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|delegateSerializerOI
argument_list|)
argument_list|)
argument_list|,
name|keyBytes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
return|return
name|delegateSerDe
operator|.
name|getSerDeStats
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Object
index|[]
name|rowBoat
init|=
operator|new
name|Object
index|[
name|columnNames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|deserializeKWritable
argument_list|(
operator|(
name|KafkaWritable
operator|)
name|blob
argument_list|,
name|rowBoat
argument_list|)
expr_stmt|;
return|return
name|rowBoat
return|;
block|}
comment|/**    * @param kafkaWritable Kafka writable object containing the row plus kafka metadata    * @param rowBoat Boat sized to width of the kafka row plus metadata to carry the row to operator upstream.    *    * @throws SerDeException in case of any serde issue.    */
name|void
name|deserializeKWritable
parameter_list|(
name|KafkaWritable
name|kafkaWritable
parameter_list|,
name|Object
index|[]
name|rowBoat
parameter_list|)
throws|throws
name|SerDeException
block|{
specifier|final
name|Object
name|row
init|=
name|delegateSerDe
operator|.
name|deserialize
argument_list|(
name|bytesConverter
operator|.
name|getWritable
argument_list|(
name|kafkaWritable
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//first add the value payload elements
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadataStartIndex
condition|;
name|i
operator|++
control|)
block|{
name|rowBoat
index|[
name|i
index|]
operator|=
name|delegateDeserializerOI
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|delegateDeserializerOI
operator|.
name|getStructFieldRef
argument_list|(
name|columnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//add the metadata columns
for|for
control|(
name|int
name|i
init|=
name|metadataStartIndex
init|;
name|i
operator|<
name|columnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|MetadataColumn
name|metadataColumn
init|=
name|MetadataColumn
operator|.
name|forName
argument_list|(
name|columnNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|rowBoat
index|[
name|i
index|]
operator|=
operator|(
name|kafkaWritable
operator|.
name|getHiveWritable
argument_list|(
name|metadataColumn
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|objectInspector
return|;
block|}
comment|/**    * Returns a view of input object inspector list between:    *<tt>0</tt> inclusive and the specified<tt>toIndex</tt>, exclusive.    */
specifier|private
specifier|static
specifier|final
class|class
name|SubStructObjectInspector
extends|extends
name|StructObjectInspector
block|{
specifier|private
specifier|final
name|StructObjectInspector
name|baseOI
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|structFields
decl_stmt|;
comment|/**      * Returns a live view of the base Object inspector starting form 0 to {@code toIndex} exclusive.      *      * @param baseOI  base Object Inspector.      * @param toIndex toIndex.      */
specifier|private
name|SubStructObjectInspector
parameter_list|(
name|StructObjectInspector
name|baseOI
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|this
operator|.
name|baseOI
operator|=
name|baseOI
expr_stmt|;
name|structFields
operator|=
name|baseOI
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|toIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns all the fields.      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|getAllStructFieldRefs
parameter_list|()
block|{
return|return
name|structFields
return|;
block|}
comment|/**      * Look up a field.      *      * @param fieldName fieldName to be looked up.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"OptionalGetWithoutIsPresent"
argument_list|)
annotation|@
name|Override
specifier|public
name|StructField
name|getStructFieldRef
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|this
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|ref
lambda|->
name|ref
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * returns null for data = null.      *      * @param data     input.      * @param fieldRef field to extract.      */
annotation|@
name|Override
specifier|public
name|Object
name|getStructFieldData
parameter_list|(
name|Object
name|data
parameter_list|,
name|StructField
name|fieldRef
parameter_list|)
block|{
return|return
name|baseOI
operator|.
name|getStructFieldData
argument_list|(
name|data
argument_list|,
name|fieldRef
argument_list|)
return|;
block|}
comment|/**      * returns null for data = null.      *      * @param data input data.      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getStructFieldsDataAsList
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|size
init|=
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|res
operator|.
name|add
argument_list|(
name|baseOI
operator|.
name|getStructFieldData
argument_list|(
name|data
argument_list|,
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**      * Returns the name of the data type that is inspected by this      * ObjectInspector. This is used to display the type information to the user.      *<p>      * For primitive types, the type name is standardized. For other types, the      * type name can be something like "list&lt;int&gt;", "map&lt;int,string&gt;", java class      * names, or user-defined type names similar to typedef.      */
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|baseOI
operator|.
name|getTypeName
argument_list|()
return|;
block|}
comment|/**      * An ObjectInspector must inherit from one of the following interfaces if      * getCategory() returns: PRIMITIVE: PrimitiveObjectInspector LIST:      * ListObjectInspector MAP: MapObjectInspector STRUCT: StructObjectInspector.      */
annotation|@
name|Override
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|baseOI
operator|.
name|getCategory
argument_list|()
return|;
block|}
block|}
comment|/**    * Class that encapsulate the logic of serialize and deserialize bytes array to/from the delegate writable format.    *    * @param<K> delegate writable class.    */
specifier|private
interface|interface
name|BytesConverter
parameter_list|<
name|K
extends|extends
name|Writable
parameter_list|>
block|{
name|byte
index|[]
name|getBytes
parameter_list|(
name|K
name|writable
parameter_list|)
function_decl|;
name|K
name|getWritable
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
function_decl|;
block|}
specifier|static
class|class
name|AvroBytesConverter
implements|implements
name|BytesConverter
argument_list|<
name|AvroGenericRecordWritable
argument_list|>
block|{
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
specifier|private
specifier|final
name|DatumReader
argument_list|<
name|GenericRecord
argument_list|>
name|dataReader
decl_stmt|;
specifier|private
specifier|final
name|GenericDatumWriter
argument_list|<
name|GenericRecord
argument_list|>
name|gdw
init|=
operator|new
name|GenericDatumWriter
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AvroGenericRecordWritable
name|avroGenericRecordWritable
init|=
operator|new
name|AvroGenericRecordWritable
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|UID
name|uid
init|=
operator|new
name|UID
argument_list|()
decl_stmt|;
name|AvroBytesConverter
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|dataReader
operator|=
operator|new
name|SpecificDatumReader
argument_list|<>
argument_list|(
name|this
operator|.
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|AvroGenericRecordWritable
name|writable
parameter_list|)
block|{
name|GenericRecord
name|record
init|=
name|writable
operator|.
name|getRecord
argument_list|()
decl_stmt|;
name|byte
index|[]
name|valueBytes
init|=
literal|null
decl_stmt|;
try|try
init|(
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|BinaryEncoder
name|be
init|=
name|EncoderFactory
operator|.
name|get
argument_list|()
operator|.
name|directBinaryEncoder
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|gdw
operator|.
name|setSchema
argument_list|(
name|record
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|gdw
operator|.
name|write
argument_list|(
name|record
argument_list|,
name|be
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|valueBytes
operator|=
name|out
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagate
argument_list|(
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|valueBytes
return|;
block|}
name|Decoder
name|getDecoder
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|SerDeException
block|{
return|return
name|DecoderFactory
operator|.
name|get
argument_list|()
operator|.
name|binaryDecoder
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AvroGenericRecordWritable
name|getWritable
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|GenericRecord
name|avroRecord
init|=
literal|null
decl_stmt|;
try|try
block|{
name|avroRecord
operator|=
name|dataReader
operator|.
name|read
argument_list|(
literal|null
argument_list|,
name|getDecoder
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagate
argument_list|(
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|avroGenericRecordWritable
operator|.
name|setRecord
argument_list|(
name|avroRecord
argument_list|)
expr_stmt|;
name|avroGenericRecordWritable
operator|.
name|setRecordReaderID
argument_list|(
name|uid
argument_list|)
expr_stmt|;
name|avroGenericRecordWritable
operator|.
name|setFileSchema
argument_list|(
name|avroRecord
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|avroGenericRecordWritable
return|;
block|}
block|}
comment|/**      * Avro converter which skips the first @skipBytes of each message.      *      * This may be needed for various serializers, such as the Confluent Avro serializer, which uses the first five      * bytes to indicate a magic byte, as well as a four byte schema ID.      */
specifier|static
class|class
name|AvroSkipBytesConverter
extends|extends
name|AvroBytesConverter
block|{
specifier|private
specifier|final
name|int
name|skipBytes
decl_stmt|;
name|AvroSkipBytesConverter
parameter_list|(
name|Schema
name|schema
parameter_list|,
name|int
name|skipBytes
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|this
operator|.
name|skipBytes
operator|=
name|skipBytes
expr_stmt|;
block|}
annotation|@
name|Override
name|Decoder
name|getDecoder
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
return|return
name|DecoderFactory
operator|.
name|get
argument_list|()
operator|.
name|binaryDecoder
argument_list|(
name|value
argument_list|,
name|this
operator|.
name|skipBytes
argument_list|,
name|value
operator|.
name|length
operator|-
name|this
operator|.
name|skipBytes
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Skip bytes value is larger than the message length."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|BytesWritableConverter
implements|implements
name|BytesConverter
argument_list|<
name|BytesWritable
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|BytesWritable
name|writable
parameter_list|)
block|{
return|return
name|writable
operator|.
name|getBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesWritable
name|getWritable
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
return|return
operator|new
name|BytesWritable
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TextBytesConverter
implements|implements
name|BytesConverter
argument_list|<
name|Text
argument_list|>
block|{
specifier|final
specifier|private
name|Text
name|text
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|Text
name|writable
parameter_list|)
block|{
comment|//@TODO  There is no reason to decode then encode the string to bytes really
comment|//@FIXME this issue with CTRL-CHAR ^0 added by Text at the end of string and Json serd does not like that.
try|try
block|{
return|return
name|Text
operator|.
name|decode
argument_list|(
name|writable
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|writable
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Text
name|getWritable
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|text
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|text
return|;
block|}
block|}
block|}
end_class

end_unit

