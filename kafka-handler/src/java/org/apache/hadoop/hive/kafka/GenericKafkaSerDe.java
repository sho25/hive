begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DecoderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificDatumReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|JsonSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroGenericRecordWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroSerdeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|server
operator|.
name|UID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Generic Kafka Serde that allow user to delegate Serde to other class like Avro,  * Json or any class that supports {@link BytesWritable}.  */
end_comment

begin_class
specifier|public
class|class
name|GenericKafkaSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GenericKafkaSerDe
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// ORDER of fields and types matters here
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|String
argument_list|>
name|METADATA_COLUMN_NAMES
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|KafkaStreamingUtils
operator|.
name|PARTITION_COLUMN
argument_list|,
name|KafkaStreamingUtils
operator|.
name|OFFSET_COLUMN
argument_list|,
name|KafkaStreamingUtils
operator|.
name|TIMESTAMP_COLUMN
argument_list|,
name|KafkaStreamingUtils
operator|.
name|START_OFFSET_COLUMN
argument_list|,
name|KafkaStreamingUtils
operator|.
name|END_OFFSET_COLUMN
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ImmutableList
argument_list|<
name|PrimitiveTypeInfo
argument_list|>
name|METADATA_PRIMITIVE_TYPE_INFO
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
decl_stmt|;
specifier|private
name|AbstractSerDe
name|delegateSerDe
decl_stmt|;
specifier|private
name|ObjectInspector
name|objectInspector
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|StructObjectInspector
name|delegateObjectInspector
decl_stmt|;
specifier|private
specifier|final
name|UID
name|uid
init|=
operator|new
name|UID
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"Guava"
argument_list|)
specifier|private
name|Supplier
argument_list|<
name|DatumReader
argument_list|<
name|GenericRecord
argument_list|>
argument_list|>
name|gdrSupplier
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
annotation|@
name|Nullable
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
specifier|final
name|String
name|className
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|KafkaStreamingUtils
operator|.
name|SERDE_CLASS_NAME
argument_list|,
name|KafkaJsonSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|delegateSerDe
operator|=
name|KafkaStreamingUtils
operator|.
name|createDelegate
argument_list|(
name|className
argument_list|)
expr_stmt|;
comment|//noinspection deprecation
name|delegateSerDe
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using SerDe instance {}"
argument_list|,
name|delegateSerDe
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|delegateSerDe
operator|.
name|getObjectInspector
argument_list|()
operator|instanceof
name|StructObjectInspector
operator|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Was expecting StructObject Inspector but have "
operator|+
name|delegateSerDe
operator|.
name|getObjectInspector
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|delegateObjectInspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|delegateSerDe
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
comment|// Build column names Order matters here
name|columnNames
operator|.
name|addAll
argument_list|(
name|delegateObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|StructField
operator|::
name|getFieldName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|columnNames
operator|.
name|addAll
argument_list|(
name|METADATA_COLUMN_NAMES
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|inspectors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|columnNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|inspectors
operator|.
name|addAll
argument_list|(
name|delegateObjectInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|StructField
operator|::
name|getFieldObjectInspector
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|inspectors
operator|.
name|addAll
argument_list|(
name|METADATA_PRIMITIVE_TYPE_INFO
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|KafkaJsonSerDe
operator|.
name|typeInfoToObjectInspector
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|objectInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|inspectors
argument_list|)
expr_stmt|;
comment|// lazy supplier to read Avro Records if needed
name|gdrSupplier
operator|=
name|getReaderSupplier
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|delegateSerDe
operator|.
name|getSerializedClass
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
return|return
name|delegateSerDe
operator|.
name|serialize
argument_list|(
name|obj
argument_list|,
name|objInspector
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
return|return
name|delegateSerDe
operator|.
name|getSerDeStats
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
name|KafkaRecordWritable
name|record
init|=
operator|(
name|KafkaRecordWritable
operator|)
name|blob
decl_stmt|;
comment|// switch case the serde nature
specifier|final
name|Object
name|row
decl_stmt|;
if|if
condition|(
name|delegateSerDe
operator|instanceof
name|JsonSerDe
condition|)
block|{
comment|//@TODO Text constructor copies the data, this op is not needed
name|row
operator|=
name|delegateSerDe
operator|.
name|deserialize
argument_list|(
operator|new
name|Text
argument_list|(
name|record
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delegateSerDe
operator|instanceof
name|AvroSerDe
condition|)
block|{
name|AvroGenericRecordWritable
name|avroGenericRecordWritable
init|=
operator|new
name|AvroGenericRecordWritable
argument_list|()
decl_stmt|;
name|GenericRecord
name|avroRecord
decl_stmt|;
try|try
block|{
name|avroRecord
operator|=
name|gdrSupplier
operator|.
name|get
argument_list|()
operator|.
name|read
argument_list|(
literal|null
argument_list|,
name|DecoderFactory
operator|.
name|get
argument_list|()
operator|.
name|binaryDecoder
argument_list|(
name|record
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|avroGenericRecordWritable
operator|.
name|setRecord
argument_list|(
name|avroRecord
argument_list|)
expr_stmt|;
name|avroGenericRecordWritable
operator|.
name|setRecordReaderID
argument_list|(
name|uid
argument_list|)
expr_stmt|;
name|avroGenericRecordWritable
operator|.
name|setFileSchema
argument_list|(
name|avroRecord
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|row
operator|=
name|delegateSerDe
operator|.
name|deserialize
argument_list|(
name|avroGenericRecordWritable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// default assuming delegate Serde know how to deal with
name|row
operator|=
name|delegateSerDe
operator|.
name|deserialize
argument_list|(
operator|new
name|BytesWritable
argument_list|(
name|record
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|columnNames
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|name
lambda|->
block|{
switch|switch
condition|(
name|name
condition|)
block|{
case|case
name|KafkaStreamingUtils
operator|.
name|PARTITION_COLUMN
case|:
return|return
operator|new
name|IntWritable
argument_list|(
name|record
operator|.
name|getPartition
argument_list|()
argument_list|)
return|;
case|case
name|KafkaStreamingUtils
operator|.
name|OFFSET_COLUMN
case|:
return|return
operator|new
name|LongWritable
argument_list|(
name|record
operator|.
name|getOffset
argument_list|()
argument_list|)
return|;
case|case
name|KafkaStreamingUtils
operator|.
name|TIMESTAMP_COLUMN
case|:
return|return
operator|new
name|LongWritable
argument_list|(
name|record
operator|.
name|getTimestamp
argument_list|()
argument_list|)
return|;
case|case
name|KafkaStreamingUtils
operator|.
name|START_OFFSET_COLUMN
case|:
return|return
operator|new
name|LongWritable
argument_list|(
name|record
operator|.
name|getStartOffset
argument_list|()
argument_list|)
return|;
case|case
name|KafkaStreamingUtils
operator|.
name|END_OFFSET_COLUMN
case|:
return|return
operator|new
name|LongWritable
argument_list|(
name|record
operator|.
name|getEndOffset
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|delegateObjectInspector
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|delegateObjectInspector
operator|.
name|getStructFieldRef
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|objectInspector
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"Guava"
argument_list|)
specifier|private
name|Supplier
argument_list|<
name|DatumReader
argument_list|<
name|GenericRecord
argument_list|>
argument_list|>
name|getReaderSupplier
parameter_list|(
name|Properties
name|tbl
parameter_list|)
block|{
return|return
name|Suppliers
operator|.
name|memoize
argument_list|(
parameter_list|()
lambda|->
block|{
name|String
name|schemaFromProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|AvroSerdeUtils
operator|.
name|AvroTableProperties
operator|.
name|SCHEMA_LITERAL
operator|.
name|getPropName
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|schemaFromProperty
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Avro Schema is empty Can not go further"
argument_list|)
expr_stmt|;
name|Schema
name|schema
init|=
name|AvroSerdeUtils
operator|.
name|getSchemaFor
argument_list|(
name|schemaFromProperty
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Building Avro Reader with schema {}"
argument_list|,
name|schemaFromProperty
argument_list|)
expr_stmt|;
return|return
operator|new
name|SpecificDatumReader
argument_list|<>
argument_list|(
name|schema
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

