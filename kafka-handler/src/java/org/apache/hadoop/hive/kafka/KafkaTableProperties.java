begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|JsonSerDe
import|;
end_import

begin_comment
comment|/**  * Table properties used by Kafka Storage handler.  */
end_comment

begin_enum
enum|enum
name|KafkaTableProperties
block|{
comment|/**    * MANDATORY Table property indicating kafka topic backing the table.    */
name|HIVE_KAFKA_TOPIC
argument_list|(
literal|"kafka.topic"
argument_list|,
literal|null
argument_list|)
block|,
comment|/**    * MANDATORY Table property indicating kafka broker(s) connection string.    */
name|HIVE_KAFKA_BOOTSTRAP_SERVERS
argument_list|(
literal|"kafka.bootstrap.servers"
argument_list|,
literal|null
argument_list|)
block|,
comment|/**    * Table property indicating which delegate serde to be used.    */
name|SERDE_CLASS_NAME
argument_list|(
literal|"kafka.serde.class"
argument_list|,
name|JsonSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
block|,
comment|/**    * Table property indicating poll/fetch timeout period in millis.    * FYI this is independent from internal Kafka consumer timeouts.    */
name|KAFKA_POLL_TIMEOUT
argument_list|(
literal|"hive.kafka.poll.timeout.ms"
argument_list|,
literal|"5000"
argument_list|)
block|,
name|MAX_RETRIES
argument_list|(
literal|"hive.kafka.max.retries"
argument_list|,
literal|"6"
argument_list|)
block|,
name|KAFKA_FETCH_METADATA_TIMEOUT
argument_list|(
literal|"hive.kafka.metadata.poll.timeout.ms"
argument_list|,
literal|"30000"
argument_list|)
block|,
comment|/**    * Table property indicating the write semantic possible enum values are:    * {@link KafkaOutputFormat.WriteSemantic}.    */
name|WRITE_SEMANTIC_PROPERTY
argument_list|(
literal|"kafka.write.semantic"
argument_list|,
name|KafkaOutputFormat
operator|.
name|WriteSemantic
operator|.
name|AT_LEAST_ONCE
operator|.
name|name
argument_list|()
argument_list|)
block|,
comment|/**    * Table property that indicates if we should commit within the task or delay it to the Metadata Hook Commit call.    */
name|HIVE_KAFKA_OPTIMISTIC_COMMIT
argument_list|(
literal|"hive.kafka.optimistic.commit"
argument_list|,
literal|"false"
argument_list|)
block|;
comment|/**    * Kafka storage handler table properties constructor.    * @param name property name.    * @param defaultValue default value, set to NULL if the property is mandatory and need to be set by the user.    */
name|KafkaTableProperties
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
name|this
operator|.
name|mandatory
operator|=
name|defaultValue
operator|==
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getDefaultValue
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
specifier|public
name|boolean
name|isMandatory
parameter_list|()
block|{
return|return
name|mandatory
return|;
block|}
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|defaultValue
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|mandatory
decl_stmt|;
block|}
end_enum

end_unit

