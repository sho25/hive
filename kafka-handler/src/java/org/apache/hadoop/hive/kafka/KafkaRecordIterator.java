begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|ConsumerRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|ConsumerRecords
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|TopicPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|errors
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Iterator over Kafka Records to read records from a single topic partition inclusive start exclusive end.  *<p>  * If {@code startOffset} is not null will seek up to that offset  * Else If {@code startOffset} is null will seek to beginning see  * {@link org.apache.kafka.clients.consumer.Consumer#seekToBeginning(java.util.Collection)}  *<p>  * When provided with an end offset it will return records up to the record with offset == endOffset - 1,  * Else If end offsets is null it will read up to the current end see  * {@link org.apache.kafka.clients.consumer.Consumer#endOffsets(java.util.Collection)}  *<p>  * Current implementation of this Iterator will throw and exception if can not poll up to the endOffset - 1  */
end_comment

begin_class
specifier|public
class|class
name|KafkaRecordIterator
implements|implements
name|Iterator
argument_list|<
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KafkaRecordIterator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|consumer
decl_stmt|;
specifier|private
specifier|final
name|TopicPartition
name|topicPartition
decl_stmt|;
specifier|private
name|long
name|endOffset
decl_stmt|;
specifier|private
name|long
name|startOffset
decl_stmt|;
specifier|private
specifier|final
name|long
name|pollTimeoutMs
decl_stmt|;
specifier|private
specifier|final
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createUnstarted
argument_list|()
decl_stmt|;
specifier|private
name|ConsumerRecords
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|records
decl_stmt|;
specifier|private
name|long
name|currentOffset
decl_stmt|;
specifier|private
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|nextRecord
decl_stmt|;
specifier|private
name|boolean
name|hasMore
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|started
decl_stmt|;
comment|//Kafka consumer poll method return an iterator of records.
specifier|private
name|Iterator
argument_list|<
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|consumerRecordIterator
init|=
literal|null
decl_stmt|;
comment|/**    * @param consumer       functional kafka consumer    * @param topicPartition kafka topic partition    * @param startOffset    start position of stream.    * @param endOffset      requested end position. If null will read up to current last    * @param pollTimeoutMs  poll time out in ms    */
name|KafkaRecordIterator
parameter_list|(
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|consumer
parameter_list|,
name|TopicPartition
name|topicPartition
parameter_list|,
annotation|@
name|Nullable
name|Long
name|startOffset
parameter_list|,
annotation|@
name|Nullable
name|Long
name|endOffset
parameter_list|,
name|long
name|pollTimeoutMs
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|consumer
argument_list|,
literal|"Consumer can not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|topicPartition
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|topicPartition
argument_list|,
literal|"Topic partition can not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|pollTimeoutMs
operator|=
name|pollTimeoutMs
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|pollTimeoutMs
operator|>
literal|0
argument_list|,
literal|"poll timeout has to be positive number"
argument_list|)
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|startOffset
operator|==
literal|null
condition|?
operator|-
literal|1L
else|:
name|startOffset
expr_stmt|;
name|this
operator|.
name|endOffset
operator|=
name|endOffset
operator|==
literal|null
condition|?
operator|-
literal|1L
else|:
name|endOffset
expr_stmt|;
name|assignAndSeek
argument_list|()
expr_stmt|;
name|this
operator|.
name|started
operator|=
literal|true
expr_stmt|;
block|}
name|KafkaRecordIterator
parameter_list|(
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|consumer
parameter_list|,
name|TopicPartition
name|tp
parameter_list|,
name|long
name|pollTimeoutMs
parameter_list|)
block|{
name|this
argument_list|(
name|consumer
argument_list|,
name|tp
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pollTimeoutMs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assignAndSeek
parameter_list|()
block|{
comment|// assign topic partition to consumer
specifier|final
name|List
argument_list|<
name|TopicPartition
argument_list|>
name|topicPartitionList
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|topicPartition
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|stopwatch
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|consumer
operator|.
name|assign
argument_list|(
name|topicPartitionList
argument_list|)
expr_stmt|;
comment|// compute offsets and seek to start
if|if
condition|(
name|startOffset
operator|>
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Seeking to offset [{}] of topic partition [{}]"
argument_list|,
name|startOffset
argument_list|,
name|topicPartition
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|seek
argument_list|(
name|topicPartition
argument_list|,
name|startOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Seeking to beginning of topic partition [{}]"
argument_list|,
name|topicPartition
argument_list|)
expr_stmt|;
comment|// seekToBeginning is lazy thus need to call position() or poll(0)
name|this
operator|.
name|consumer
operator|.
name|seekToBeginning
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|topicPartition
argument_list|)
argument_list|)
expr_stmt|;
name|startOffset
operator|=
name|consumer
operator|.
name|position
argument_list|(
name|topicPartition
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endOffset
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|endOffset
operator|=
name|consumer
operator|.
name|endOffsets
argument_list|(
name|topicPartitionList
argument_list|)
operator|.
name|get
argument_list|(
name|topicPartition
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"EndOffset set to {}"
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
block|}
name|currentOffset
operator|=
name|consumer
operator|.
name|position
argument_list|(
name|topicPartition
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|endOffset
operator|>=
name|currentOffset
argument_list|,
literal|"End offset [%s] need to be greater than start offset [%s]"
argument_list|,
name|this
operator|.
name|endOffset
argument_list|,
name|currentOffset
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Kafka Iterator ready, assigned TopicPartition [{}]; startOffset [{}]; endOffset [{}]"
argument_list|,
name|topicPartition
argument_list|,
name|currentOffset
argument_list|,
name|this
operator|.
name|endOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|stopwatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Time to assign and seek [{}] ms"
argument_list|,
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
comment|/*     Poll more records from Kafka queue IF:     Initial poll case -> (records == null)       OR     Need to poll at least one more record (currentOffset + 1< endOffset) AND consumerRecordIterator is empty (!hasMore)     */
if|if
condition|(
operator|!
name|hasMore
operator|&&
name|currentOffset
operator|+
literal|1
operator|<
name|endOffset
operator|||
name|records
operator|==
literal|null
condition|)
block|{
name|pollRecords
argument_list|()
expr_stmt|;
name|findNext
argument_list|()
expr_stmt|;
block|}
return|return
name|hasMore
return|;
block|}
comment|/**    * Poll more records or Fail with {@link TimeoutException} if no records returned before reaching target end offset.    */
specifier|private
name|void
name|pollRecords
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|stopwatch
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|started
argument_list|)
expr_stmt|;
name|records
operator|=
name|consumer
operator|.
name|poll
argument_list|(
name|pollTimeoutMs
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|stopwatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Pulled [{}] records in [{}] ms"
argument_list|,
name|records
operator|.
name|count
argument_list|()
argument_list|,
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Fail if we can not poll within one lap of pollTimeoutMs.
if|if
condition|(
name|records
operator|.
name|isEmpty
argument_list|()
operator|&&
name|currentOffset
operator|<
name|endOffset
condition|)
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Current offset: [%s]-TopicPartition:[%s], target End offset:[%s]."
operator|+
literal|"Consumer returned 0 record due to exhausted poll timeout [%s]ms, try increasing[%s]"
argument_list|,
name|currentOffset
argument_list|,
name|topicPartition
operator|.
name|toString
argument_list|()
argument_list|,
name|endOffset
argument_list|,
name|pollTimeoutMs
argument_list|,
name|KafkaStreamingUtils
operator|.
name|HIVE_KAFKA_POLL_TIMEOUT
argument_list|)
argument_list|)
throw|;
block|}
name|consumerRecordIterator
operator|=
name|records
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|next
parameter_list|()
block|{
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|value
init|=
name|nextRecord
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|value
operator|.
name|offset
argument_list|()
operator|<
name|endOffset
argument_list|)
expr_stmt|;
name|findNext
argument_list|()
expr_stmt|;
return|return
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Find the next element in the batch of returned records by previous poll or set hasMore to false tp poll more next    * call to {@link KafkaRecordIterator#hasNext()}.    */
specifier|private
name|void
name|findNext
parameter_list|()
block|{
if|if
condition|(
name|consumerRecordIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextRecord
operator|=
name|consumerRecordIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|hasMore
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|nextRecord
operator|.
name|offset
argument_list|()
operator|<
name|endOffset
condition|)
block|{
name|currentOffset
operator|=
name|nextRecord
operator|.
name|offset
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|hasMore
operator|=
literal|false
expr_stmt|;
name|nextRecord
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Empty iterator for empty splits when startOffset == endOffset, this is added to avoid clumsy if condition.    */
specifier|protected
specifier|static
specifier|final
class|class
name|EmptyIterator
implements|implements
name|Iterator
argument_list|<
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|next
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this is an empty iterator"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

