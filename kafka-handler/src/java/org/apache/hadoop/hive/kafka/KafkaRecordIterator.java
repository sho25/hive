begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|ConsumerRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|ConsumerRecords
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|TopicPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|errors
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * This class implements an Iterator over a single Kafka topic partition.  *  * Notes:  * The user of this class has to provide a functional Kafka Consumer and then has to clean it afterward.  * The user of this class is responsible for thread safety if the provided consumer is shared across threads.  *  */
end_comment

begin_class
class|class
name|KafkaRecordIterator
implements|implements
name|Iterator
argument_list|<
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KafkaRecordIterator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|POLL_TIMEOUT_HINT
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Try increasing poll timeout using Hive Table property [%s]"
argument_list|,
name|KafkaTableProperties
operator|.
name|KAFKA_POLL_TIMEOUT
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_POLL_TIMEOUT_FORMAT
init|=
literal|"Consumer returned [0] record due to exhausted poll timeout [%s]ms from TopicPartition:[%s] "
operator|+
literal|"start Offset [%s], current consumer position [%s], target end offset [%s], "
operator|+
name|POLL_TIMEOUT_HINT
decl_stmt|;
specifier|private
specifier|final
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|consumer
decl_stmt|;
specifier|private
specifier|final
name|TopicPartition
name|topicPartition
decl_stmt|;
specifier|private
specifier|final
name|long
name|endOffset
decl_stmt|;
specifier|private
specifier|final
name|long
name|startOffset
decl_stmt|;
specifier|private
specifier|final
name|long
name|pollTimeoutMs
decl_stmt|;
specifier|private
specifier|final
name|Duration
name|pollTimeoutDurationMs
decl_stmt|;
specifier|private
specifier|final
name|Stopwatch
name|stopwatch
init|=
name|Stopwatch
operator|.
name|createUnstarted
argument_list|()
decl_stmt|;
specifier|private
name|ConsumerRecords
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|records
decl_stmt|;
comment|/**    * Holds the kafka consumer position after the last poll() call.    */
specifier|private
name|long
name|consumerPosition
decl_stmt|;
specifier|private
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|nextRecord
decl_stmt|;
specifier|private
name|boolean
name|hasMore
init|=
literal|true
decl_stmt|;
comment|/**    * On each Kafka Consumer poll() call we get a batch of records, this Iterator will be used to loop over it.    */
specifier|private
name|Iterator
argument_list|<
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|consumerRecordIterator
init|=
literal|null
decl_stmt|;
comment|/**    * Kafka record Iterator pulling from a single {@code topicPartition} an inclusive {@code requestedStartOffset},    * up to exclusive {@code requestedEndOffset}.    *    * This iterator can block on polling up to a designated timeout.    *    * If no record is returned by brokers after poll timeout duration such case will be considered as an exception.    * Although the timeout exception it is a retryable exception, therefore users of this class can retry if needed.    *    * @param consumer       Functional kafka consumer, user must initialize this and close it.    * @param topicPartition Target Kafka topic partition.    * @param requestedStartOffset    Requested start offset position, if NULL iterator will seek to beginning using:    *                                {@link Consumer#seekToBeginning(java.util.Collection)}.    *    * @param requestedEndOffset      Requested end position. If null will read up to last available offset,    *                                such position is given by:    *                                {@link Consumer#seekToEnd(java.util.Collection)}.    * @param pollTimeoutMs  positive number indicating poll time out in ms.    */
name|KafkaRecordIterator
parameter_list|(
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|consumer
parameter_list|,
name|TopicPartition
name|topicPartition
parameter_list|,
annotation|@
name|Nullable
name|Long
name|requestedStartOffset
parameter_list|,
annotation|@
name|Nullable
name|Long
name|requestedEndOffset
parameter_list|,
name|long
name|pollTimeoutMs
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|consumer
argument_list|,
literal|"Consumer can not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|topicPartition
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|topicPartition
argument_list|,
literal|"Topic partition can not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|pollTimeoutMs
operator|=
name|pollTimeoutMs
expr_stmt|;
name|this
operator|.
name|pollTimeoutDurationMs
operator|=
name|Duration
operator|.
name|ofMillis
argument_list|(
name|pollTimeoutMs
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|pollTimeoutMs
operator|>
literal|0
argument_list|,
literal|"Poll timeout has to be positive number"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|TopicPartition
argument_list|>
name|topicPartitionList
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|topicPartition
argument_list|)
decl_stmt|;
comment|// assign topic partition to consumer
name|consumer
operator|.
name|assign
argument_list|(
name|topicPartitionList
argument_list|)
expr_stmt|;
comment|// do to End Offset first in case of we have to seek to end to figure out the last available offset
if|if
condition|(
name|requestedEndOffset
operator|==
literal|null
condition|)
block|{
name|consumer
operator|.
name|seekToEnd
argument_list|(
name|topicPartitionList
argument_list|)
expr_stmt|;
name|this
operator|.
name|endOffset
operator|=
name|consumer
operator|.
name|position
argument_list|(
name|topicPartition
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"End Offset set to [{}]"
argument_list|,
name|this
operator|.
name|endOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|endOffset
operator|=
name|requestedEndOffset
expr_stmt|;
block|}
comment|// seek to start offsets
if|if
condition|(
name|requestedStartOffset
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Seeking to offset [{}] of topic partition [{}]"
argument_list|,
name|requestedStartOffset
argument_list|,
name|topicPartition
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|seek
argument_list|(
name|topicPartition
argument_list|,
name|requestedStartOffset
argument_list|)
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|consumer
operator|.
name|position
argument_list|(
name|topicPartition
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|startOffset
operator|!=
name|requestedStartOffset
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Current Start Offset [{}] is different form the requested start position [{}]"
argument_list|,
name|this
operator|.
name|startOffset
argument_list|,
name|requestedStartOffset
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// case seek to beginning of stream
name|consumer
operator|.
name|seekToBeginning
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|topicPartition
argument_list|)
argument_list|)
expr_stmt|;
comment|// seekToBeginning is lazy thus need to call position() or poll(0)
name|this
operator|.
name|startOffset
operator|=
name|consumer
operator|.
name|position
argument_list|(
name|topicPartition
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer at beginning of topic partition [{}], current start offset [{}]"
argument_list|,
name|topicPartition
argument_list|,
name|this
operator|.
name|startOffset
argument_list|)
expr_stmt|;
block|}
name|consumerPosition
operator|=
name|consumer
operator|.
name|position
argument_list|(
name|topicPartition
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|endOffset
operator|>=
name|consumerPosition
argument_list|,
literal|"End offset [%s] need to be greater or equal than start offset [%s]"
argument_list|,
name|this
operator|.
name|endOffset
argument_list|,
name|consumerPosition
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Kafka Iterator assigned to TopicPartition [{}]; start Offset [{}]; end Offset [{}]"
argument_list|,
name|topicPartition
argument_list|,
name|consumerPosition
argument_list|,
name|this
operator|.
name|endOffset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|KafkaRecordIterator
parameter_list|(
name|Consumer
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|consumer
parameter_list|,
name|TopicPartition
name|tp
parameter_list|,
name|long
name|pollTimeoutMs
parameter_list|)
block|{
name|this
argument_list|(
name|consumer
argument_list|,
name|tp
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|pollTimeoutMs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if there is more records to be consumed and pull more from the broker if current batch of record is empty.    * This method might block up to {@link this#pollTimeoutMs} to pull records from Kafka Broker.    *    * @throws PollTimeoutException if poll returns 0 record and consumer position did not reach requested endOffset.    * Such an exception is a retryable exception, and it can be a transient exception that if retried may succeed.    *    * @return true if has more records to be consumed.    */
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
comment|/*     Poll more records from Kafka queue IF:     Initial poll -> (records == null)       OR     Need to poll at least one more record (consumerPosition< endOffset) AND consumerRecordIterator is empty (!hasMore)     */
if|if
condition|(
operator|!
name|hasMore
operator|&&
name|consumerPosition
operator|<
name|endOffset
operator|||
name|records
operator|==
literal|null
condition|)
block|{
name|pollRecords
argument_list|()
expr_stmt|;
name|findNext
argument_list|()
expr_stmt|;
block|}
return|return
name|hasMore
return|;
block|}
comment|/**    * Poll more records from the Kafka Broker.    *    * @throws PollTimeoutException if poll returns 0 record  and consumer's position< requested endOffset.    */
specifier|private
name|void
name|pollRecords
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|stopwatch
operator|.
name|reset
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|records
operator|=
name|consumer
operator|.
name|poll
argument_list|(
name|pollTimeoutDurationMs
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|stopwatch
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Pulled [{}] records in [{}] ms"
argument_list|,
name|records
operator|.
name|count
argument_list|()
argument_list|,
name|stopwatch
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Fail if we can not poll within one lap of pollTimeoutMs.
if|if
condition|(
name|records
operator|.
name|isEmpty
argument_list|()
operator|&&
name|consumer
operator|.
name|position
argument_list|(
name|topicPartition
argument_list|)
operator|<
name|endOffset
condition|)
block|{
throw|throw
operator|new
name|PollTimeoutException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|ERROR_POLL_TIMEOUT_FORMAT
argument_list|,
name|pollTimeoutMs
argument_list|,
name|topicPartition
operator|.
name|toString
argument_list|()
argument_list|,
name|startOffset
argument_list|,
name|consumer
operator|.
name|position
argument_list|(
name|topicPartition
argument_list|)
argument_list|,
name|endOffset
argument_list|)
argument_list|)
throw|;
block|}
name|consumerRecordIterator
operator|=
name|records
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|consumerPosition
operator|=
name|consumer
operator|.
name|position
argument_list|(
name|topicPartition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|next
parameter_list|()
block|{
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|value
init|=
name|nextRecord
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|value
operator|.
name|offset
argument_list|()
operator|<
name|endOffset
argument_list|)
expr_stmt|;
name|findNext
argument_list|()
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**    * Find the next element in the current batch OR schedule {@link KafkaRecordIterator#pollRecords()} (hasMore = false).    */
specifier|private
name|void
name|findNext
parameter_list|()
block|{
if|if
condition|(
name|consumerRecordIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nextRecord
operator|=
name|consumerRecordIterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|hasMore
operator|=
name|nextRecord
operator|.
name|offset
argument_list|()
operator|<
name|endOffset
expr_stmt|;
block|}
else|else
block|{
name|hasMore
operator|=
literal|false
expr_stmt|;
name|nextRecord
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|static
specifier|final
class|class
name|PollTimeoutException
extends|extends
name|RetriableException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|PollTimeoutException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

