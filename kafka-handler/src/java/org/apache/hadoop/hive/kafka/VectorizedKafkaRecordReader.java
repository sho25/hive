begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorAssignRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatchCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|MapWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|ConsumerRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|KafkaConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|TopicPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Vectorized Kafka record reader.  */
end_comment

begin_class
class|class
name|VectorizedKafkaRecordReader
implements|implements
name|RecordReader
argument_list|<
name|NullWritable
argument_list|,
name|VectorizedRowBatch
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VectorizedKafkaRecordReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|KafkaConsumer
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|consumer
decl_stmt|;
specifier|private
specifier|final
name|Iterator
argument_list|<
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|recordsCursor
decl_stmt|;
specifier|private
name|long
name|totalNumberRecords
init|=
literal|0L
decl_stmt|;
specifier|private
name|long
name|consumedRecords
init|=
literal|0L
decl_stmt|;
specifier|private
name|long
name|readBytes
init|=
literal|0L
decl_stmt|;
specifier|private
specifier|final
name|VectorizedRowBatchCtx
name|rbCtx
decl_stmt|;
comment|/**    * actual projected columns needed by the query, this can be empty in case of query like: select count(*) from src;    */
specifier|private
specifier|final
name|int
index|[]
name|projectedColumns
decl_stmt|;
comment|/**    * underlying row deserializer.    */
specifier|private
specifier|final
name|KafkaSerDe
name|serDe
decl_stmt|;
specifier|private
specifier|final
name|VectorAssignRow
name|vectorAssignRow
init|=
operator|new
name|VectorAssignRow
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|KafkaWritable
name|kafkaWritable
init|=
operator|new
name|KafkaWritable
argument_list|()
decl_stmt|;
name|VectorizedKafkaRecordReader
parameter_list|(
name|KafkaInputSplit
name|inputSplit
parameter_list|,
name|Configuration
name|jobConf
parameter_list|)
block|{
comment|// VectorBatch Context initializing
name|this
operator|.
name|rbCtx
operator|=
name|Utilities
operator|.
name|getVectorizedRowBatchCtx
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
if|if
condition|(
name|rbCtx
operator|.
name|getDataColumnNums
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|projectedColumns
operator|=
name|rbCtx
operator|.
name|getDataColumnNums
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// case all the columns are selected
name|projectedColumns
operator|=
operator|new
name|int
index|[
name|rbCtx
operator|.
name|getRowColumnTypeInfos
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|projectedColumns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|projectedColumns
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
comment|// row parser and row assigner initializing
name|serDe
operator|=
name|createAndInitializeSerde
argument_list|(
name|jobConf
argument_list|)
expr_stmt|;
try|try
block|{
name|vectorAssignRow
operator|.
name|init
argument_list|(
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HiveException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Kafka iterator initializing
name|long
name|startOffset
init|=
name|inputSplit
operator|.
name|getStartOffset
argument_list|()
decl_stmt|;
name|long
name|endOffset
init|=
name|inputSplit
operator|.
name|getEndOffset
argument_list|()
decl_stmt|;
name|TopicPartition
name|topicPartition
init|=
operator|new
name|TopicPartition
argument_list|(
name|inputSplit
operator|.
name|getTopic
argument_list|()
argument_list|,
name|inputSplit
operator|.
name|getPartition
argument_list|()
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|startOffset
operator|>=
literal|0
operator|&&
name|startOffset
operator|<=
name|endOffset
argument_list|,
literal|"Start [%s] has to be positive and Less than or equal to End [%s]"
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
name|totalNumberRecords
operator|+=
name|endOffset
operator|-
name|startOffset
expr_stmt|;
specifier|final
name|Properties
name|properties
init|=
name|KafkaUtils
operator|.
name|consumerProperties
argument_list|(
name|jobConf
argument_list|)
decl_stmt|;
name|consumer
operator|=
operator|new
name|KafkaConsumer
argument_list|<>
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|long
name|pollTimeout
init|=
name|jobConf
operator|.
name|getLong
argument_list|(
name|KafkaTableProperties
operator|.
name|KAFKA_POLL_TIMEOUT
operator|.
name|getName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Consumer poll timeout [{}] ms"
argument_list|,
name|pollTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|recordsCursor
operator|=
name|startOffset
operator|==
name|endOffset
condition|?
operator|new
name|KafkaRecordReader
operator|.
name|EmptyIterator
argument_list|()
else|:
operator|new
name|KafkaRecordIterator
argument_list|(
name|consumer
argument_list|,
name|topicPartition
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|pollTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|NullWritable
name|nullWritable
parameter_list|,
name|VectorizedRowBatch
name|vectorizedRowBatch
parameter_list|)
throws|throws
name|IOException
block|{
name|vectorizedRowBatch
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|readNextBatch
argument_list|(
name|vectorizedRowBatch
argument_list|,
name|recordsCursor
argument_list|)
operator|>
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Serde exception"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NullWritable
name|createKey
parameter_list|()
block|{
return|return
name|NullWritable
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|VectorizedRowBatch
name|createValue
parameter_list|()
block|{
return|return
name|rbCtx
operator|.
name|createVectorizedRowBatch
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
if|if
condition|(
name|consumedRecords
operator|==
literal|0
condition|)
block|{
return|return
literal|0f
return|;
block|}
if|if
condition|(
name|consumedRecords
operator|>=
name|totalNumberRecords
condition|)
block|{
return|return
literal|1f
return|;
block|}
return|return
name|consumedRecords
operator|*
literal|1.0f
operator|/
name|totalNumberRecords
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"total read bytes [{}]"
argument_list|,
name|readBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
name|consumer
operator|.
name|wakeup
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|readNextBatch
parameter_list|(
name|VectorizedRowBatch
name|vectorizedRowBatch
parameter_list|,
name|Iterator
argument_list|<
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|recordIterator
parameter_list|)
throws|throws
name|SerDeException
block|{
name|int
name|rowsCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|recordIterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|rowsCount
operator|<
name|vectorizedRowBatch
operator|.
name|getMaxSize
argument_list|()
condition|)
block|{
name|ConsumerRecord
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|kRecord
init|=
name|recordIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|kafkaWritable
operator|.
name|set
argument_list|(
name|kRecord
argument_list|)
expr_stmt|;
name|readBytes
operator|+=
name|kRecord
operator|.
name|serializedKeySize
argument_list|()
operator|+
name|kRecord
operator|.
name|serializedValueSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|projectedColumns
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
name|serDe
operator|.
name|deserializeKWritable
argument_list|(
name|kafkaWritable
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|projectedColumns
control|)
block|{
name|vectorAssignRow
operator|.
name|assignRowColumn
argument_list|(
name|vectorizedRowBatch
argument_list|,
name|rowsCount
argument_list|,
name|i
argument_list|,
name|row
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|rowsCount
operator|++
expr_stmt|;
block|}
name|vectorizedRowBatch
operator|.
name|size
operator|=
name|rowsCount
expr_stmt|;
name|consumedRecords
operator|+=
name|rowsCount
expr_stmt|;
return|return
name|rowsCount
return|;
block|}
specifier|private
specifier|static
name|KafkaSerDe
name|createAndInitializeSerde
parameter_list|(
name|Configuration
name|jobConf
parameter_list|)
block|{
name|KafkaSerDe
name|serDe
init|=
operator|new
name|KafkaSerDe
argument_list|()
decl_stmt|;
name|MapWork
name|mapWork
init|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|Utilities
operator|.
name|getMapWork
argument_list|(
name|jobConf
argument_list|)
argument_list|,
literal|"Map work is null"
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|mapWork
operator|.
name|getPartitionDescs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|partitionDesc
lambda|->
name|partitionDesc
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|findAny
argument_list|()
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|RuntimeException
argument_list|(
literal|"Can not find table property at the map work"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|serDe
operator|.
name|initialize
argument_list|(
name|jobConf
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not initialized the serde"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|serDe
return|;
block|}
block|}
end_class

end_unit

