begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|DefaultHiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|hooks
operator|.
name|WriteEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|HiveStorageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|metadata
operator|.
name|StorageHandlerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|plan
operator|.
name|TableDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|DefaultHiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|security
operator|.
name|authorization
operator|.
name|HiveAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|CommonClientConfigs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|ConsumerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|producer
operator|.
name|ProducerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|errors
operator|.
name|ProducerFencedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|serialization
operator|.
name|ByteArrayDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|serialization
operator|.
name|ByteArraySerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * Hive Kafka storage handler to allow user to read and write from/to Kafka message bus.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"ALL"
argument_list|)
specifier|public
class|class
name|KafkaStorageHandler
extends|extends
name|DefaultHiveMetaHook
implements|implements
name|HiveStorageHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KafkaStorageHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KAFKA_STORAGE_HANDLER
init|=
literal|"org.apache.hadoop.hive.kafka.KafkaStorageHandler"
decl_stmt|;
specifier|private
name|Configuration
name|configuration
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|InputFormat
argument_list|>
name|getInputFormatClass
parameter_list|()
block|{
return|return
name|KafkaInputFormat
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|OutputFormat
argument_list|>
name|getOutputFormatClass
parameter_list|()
block|{
return|return
name|KafkaOutputFormat
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|AbstractSerDe
argument_list|>
name|getSerDeClass
parameter_list|()
block|{
return|return
name|KafkaSerDe
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|HiveMetaHook
name|getMetaHook
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|HiveAuthorizationProvider
name|getAuthorizationProvider
parameter_list|()
block|{
return|return
operator|new
name|DefaultHiveAuthorizationProvider
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureInputJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
block|{
name|configureCommonProperties
argument_list|(
name|tableDesc
argument_list|,
name|jobProperties
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureCommonProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
block|{
name|String
name|topic
init|=
name|tableDesc
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_TOPIC
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|topic
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Kafka topic missing set table property->"
operator|+
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_TOPIC
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|jobProperties
operator|.
name|put
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_TOPIC
operator|.
name|getName
argument_list|()
argument_list|,
name|topic
argument_list|)
expr_stmt|;
name|String
name|brokerString
init|=
name|tableDesc
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_BOOTSTRAP_SERVERS
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|brokerString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Broker address missing set table property->"
operator|+
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_BOOTSTRAP_SERVERS
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|jobProperties
operator|.
name|put
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_BOOTSTRAP_SERVERS
operator|.
name|getName
argument_list|()
argument_list|,
name|brokerString
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|stream
argument_list|(
name|KafkaTableProperties
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|tableProperty
lambda|->
operator|!
name|tableProperty
operator|.
name|isMandatory
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|tableProperty
lambda|->
name|jobProperties
operator|.
name|put
argument_list|(
name|tableProperty
operator|.
name|getName
argument_list|()
argument_list|,
name|tableDesc
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
name|tableProperty
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// If the user ask for EOS then set the read to only committed.
if|if
condition|(
name|jobProperties
operator|.
name|get
argument_list|(
name|KafkaTableProperties
operator|.
name|WRITE_SEMANTIC_PROPERTY
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|KafkaOutputFormat
operator|.
name|WriteSemantic
operator|.
name|EXACTLY_ONCE
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|jobProperties
operator|.
name|put
argument_list|(
literal|"kafka.consumer.isolation.level"
argument_list|,
literal|"read_committed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureInputJobCredentials
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|secrets
parameter_list|)
block|{    }
annotation|@
name|Override
specifier|public
name|void
name|configureOutputJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
block|{
name|configureCommonProperties
argument_list|(
name|tableDesc
argument_list|,
name|jobProperties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureTableJobProperties
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jobProperties
parameter_list|)
block|{
name|configureInputJobProperties
argument_list|(
name|tableDesc
argument_list|,
name|jobProperties
argument_list|)
expr_stmt|;
name|configureOutputJobProperties
argument_list|(
name|tableDesc
argument_list|,
name|jobProperties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configureJobConf
parameter_list|(
name|TableDesc
name|tableDesc
parameter_list|,
name|JobConf
name|jobConf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|configureInputJobProperties
argument_list|(
name|tableDesc
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|configureOutputJobProperties
argument_list|(
name|tableDesc
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|properties
operator|.
name|forEach
argument_list|(
name|jobConf
operator|::
name|set
argument_list|)
expr_stmt|;
try|try
block|{
name|KafkaUtils
operator|.
name|copyDependencyJars
argument_list|(
name|jobConf
argument_list|,
name|KafkaStorageHandler
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|KAFKA_STORAGE_HANDLER
return|;
block|}
annotation|@
name|Override
specifier|public
name|StorageHandlerInfo
name|getStorageHandlerInfo
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|topic
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_TOPIC
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|topic
operator|==
literal|null
operator|||
name|topic
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"topic is null or empty"
argument_list|)
throw|;
block|}
name|String
name|brokers
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_BOOTSTRAP_SERVERS
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|brokers
operator|==
literal|null
operator|||
name|brokers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"kafka brokers string is null or empty"
argument_list|)
throw|;
block|}
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|ConsumerConfig
operator|.
name|KEY_DESERIALIZER_CLASS_CONFIG
argument_list|,
name|ByteArrayDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|ConsumerConfig
operator|.
name|VALUE_DESERIALIZER_CLASS_CONFIG
argument_list|,
name|ByteArrayDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|CommonClientConfigs
operator|.
name|BOOTSTRAP_SERVERS_CONFIG
argument_list|,
name|brokers
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|CommonClientConfigs
operator|.
name|CLIENT_ID_CONFIG
argument_list|,
name|Utilities
operator|.
name|getTaskId
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|KafkaUtils
operator|.
name|addKerberosJaasConf
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|objectObjectEntry
lambda|->
name|objectObjectEntry
operator|.
name|getKey
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|KafkaUtils
operator|.
name|CONSUMER_CONFIGURATION_PREFIX
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
block|{
name|String
name|key
operator|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|KafkaUtils
operator|.
name|CONSUMER_CONFIGURATION_PREFIX
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|;           if
operator|(
name|KafkaUtils
operator|.
name|FORBIDDEN_PROPERTIES
operator|.
name|contains
argument_list|(
name|key
argument_list|)
operator|)
block|{
throw|throw
argument_list|new
name|IllegalArgumentException
argument_list|(
literal|"Not suppose to set Kafka Property "
operator|+
name|key
argument_list|)
block|;           }
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|;
block|}
block|)
class|;
end_class

begin_return
return|return
operator|new
name|KafkaStorageHandlerInfo
argument_list|(
name|topic
argument_list|,
name|properties
argument_list|)
return|;
end_return

begin_function
unit|}    private
name|Properties
name|buildProducerProperties
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|String
name|brokers
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_BOOTSTRAP_SERVERS
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|brokers
operator|==
literal|null
operator|||
name|brokers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"kafka brokers string is null or empty"
argument_list|)
throw|;
block|}
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|ProducerConfig
operator|.
name|KEY_SERIALIZER_CLASS_CONFIG
argument_list|,
name|ByteArraySerializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|ProducerConfig
operator|.
name|VALUE_SERIALIZER_CLASS_CONFIG
argument_list|,
name|ByteArraySerializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|CommonClientConfigs
operator|.
name|BOOTSTRAP_SERVERS_CONFIG
argument_list|,
name|brokers
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|KafkaUtils
operator|.
name|addKerberosJaasConf
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|objectObjectEntry
lambda|->
name|objectObjectEntry
operator|.
name|getKey
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|KafkaUtils
operator|.
name|PRODUCER_CONFIGURATION_PREFIX
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
block|{
name|String
name|key
operator|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|KafkaUtils
operator|.
name|PRODUCER_CONFIGURATION_PREFIX
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|;           if
operator|(
name|KafkaUtils
operator|.
name|FORBIDDEN_PROPERTIES
operator|.
name|contains
argument_list|(
name|key
argument_list|)
operator|)
block|{
throw|throw
argument_list|new
name|IllegalArgumentException
argument_list|(
literal|"Not suppose to set Kafka Property "
operator|+
name|key
argument_list|)
block|;           }
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|properties
return|;
end_return

begin_function
unit|}    @
name|Override
specifier|public
name|LockType
name|getLockType
parameter_list|(
name|WriteEntity
name|writeEntity
parameter_list|)
block|{
if|if
condition|(
name|writeEntity
operator|.
name|getWriteType
argument_list|()
operator|.
name|equals
argument_list|(
name|WriteEntity
operator|.
name|WriteType
operator|.
name|INSERT
argument_list|)
condition|)
block|{
return|return
name|LockType
operator|.
name|SHARED_READ
return|;
block|}
return|return
name|LockType
operator|.
name|SHARED_WRITE
return|;
block|}
end_function

begin_function
specifier|private
name|String
name|getQueryId
parameter_list|()
block|{
return|return
name|HiveConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVEQUERYID
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|commitInsertTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|isExactlyOnce
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|KafkaTableProperties
operator|.
name|WRITE_SEMANTIC_PROPERTY
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|KafkaOutputFormat
operator|.
name|WriteSemantic
operator|.
name|EXACTLY_ONCE
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|optimiticCommitVal
init|=
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|KafkaTableProperties
operator|.
name|HIVE_KAFKA_OPTIMISTIC_COMMIT
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isTwoPhaseCommit
init|=
operator|!
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|optimiticCommitVal
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isExactlyOnce
operator|||
operator|!
name|isTwoPhaseCommit
condition|)
block|{
comment|//Case it is not 2 phase commit no open transaction to handel.
return|return;
block|}
specifier|final
name|Path
name|queryWorkingDir
init|=
name|getQueryWorkingDir
argument_list|(
name|table
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|Short
argument_list|>
argument_list|>
name|transactionsMap
decl_stmt|;
specifier|final
name|int
name|maxTries
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|KafkaTableProperties
operator|.
name|MAX_RETRIES
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// We have 4 Stages ahead of us:
comment|// 1 Fetch Transactions state from HDFS.
comment|// 2 Build/inti all the Kafka producers and perform a pre commit call to check if we can go ahead with commit.
comment|// 3 Commit Transactions one by one.
comment|// 4 Clean workingDirectory.
comment|//First stage fetch the Transactions states
specifier|final
name|RetryUtils
operator|.
name|Task
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|Short
argument_list|>
argument_list|>
argument_list|>
name|fetchTransactionStates
init|=
operator|new
name|RetryUtils
operator|.
name|Task
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|Short
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|Short
argument_list|>
argument_list|>
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TransactionalKafkaWriter
operator|.
name|getTransactionsState
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|queryWorkingDir
argument_list|)
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|transactionsMap
operator|=
name|RetryUtils
operator|.
name|retry
argument_list|(
name|fetchTransactionStates
argument_list|,
parameter_list|(
name|error
parameter_list|)
lambda|->
operator|(
name|error
operator|instanceof
name|IOException
operator|)
argument_list|,
name|maxTries
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Can not go further
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not fetch Transaction states due [{}]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|//Second Stage Resume Producers and Pre commit
specifier|final
name|Properties
name|baseProducerPros
init|=
name|buildProducerProperties
argument_list|(
name|table
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HiveKafkaProducer
argument_list|>
name|producersMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RetryUtils
operator|.
name|Task
argument_list|<
name|Void
argument_list|>
name|buildProducersTask
init|=
operator|new
name|RetryUtils
operator|.
name|Task
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
assert|assert
name|producersMap
operator|.
name|size
argument_list|()
operator|==
literal|0
assert|;
name|transactionsMap
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
comment|// Base Producer propeties, missing the transaction Id.
name|baseProducerPros
operator|.
name|setProperty
argument_list|(
name|ProducerConfig
operator|.
name|TRANSACTIONAL_ID_CONFIG
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|HiveKafkaProducer
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|producer
init|=
operator|new
name|HiveKafkaProducer
argument_list|<>
argument_list|(
name|baseProducerPros
argument_list|)
decl_stmt|;
name|producer
operator|.
name|resumeTransaction
argument_list|(
name|value
operator|.
name|getLeft
argument_list|()
argument_list|,
name|value
operator|.
name|getRight
argument_list|()
argument_list|)
expr_stmt|;
comment|// This is a dummy RPC call to ensure that the producer still resumable and signal the Pre-commit as per :
comment|// https://cwiki.apache.org/confluence/display/KAFKA/Transactional+Messaging+in+Kafka#EndPhase
name|producer
operator|.
name|sendOffsetsToTransaction
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|()
argument_list|,
literal|"__dry_run"
argument_list|)
expr_stmt|;
name|producersMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|producer
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|RetryUtils
operator|.
name|CleanupAfterFailure
name|cleanUpTheMap
init|=
operator|new
name|RetryUtils
operator|.
name|CleanupAfterFailure
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|producersMap
operator|.
name|forEach
argument_list|(
parameter_list|(
name|s
parameter_list|,
name|producer
parameter_list|)
lambda|->
name|producer
operator|.
name|close
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|producersMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|Predicate
argument_list|<
name|Throwable
argument_list|>
name|isRetrayable
init|=
parameter_list|(
name|error
parameter_list|)
lambda|->
operator|!
name|KafkaUtils
operator|.
name|exceptionIsFatal
argument_list|(
name|error
argument_list|)
operator|&&
operator|!
operator|(
name|error
operator|instanceof
name|ProducerFencedException
operator|)
decl_stmt|;
try|try
block|{
name|RetryUtils
operator|.
name|retry
argument_list|(
name|buildProducersTask
argument_list|,
name|isRetrayable
argument_list|,
name|cleanUpTheMap
argument_list|,
name|maxTries
argument_list|,
literal|"Error while Builing Producers"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Can not go further
name|LOG
operator|.
name|error
argument_list|(
literal|"Can not fetch build produces due [{}]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|//Third Stage Commit Transactions, this part is the actual critical section.
comment|//The commit might be retried on error, but keep in mind in some cases, like open transaction can expire
comment|//after timeout duration of 15 mins it is not possible to go further.
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|committedTx
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|RetryUtils
operator|.
name|Task
argument_list|<
name|Void
argument_list|>
name|commitTask
init|=
operator|new
name|RetryUtils
operator|.
name|Task
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|producersMap
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|producer
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|committedTx
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|producer
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|committedTx
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Committed Transaction [{}]"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|RetryUtils
operator|.
name|retry
argument_list|(
name|commitTask
argument_list|,
name|isRetrayable
argument_list|,
name|maxTries
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// at this point we are in a funky state if one commit happend!! close and log it
name|producersMap
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|producer
parameter_list|)
lambda|->
name|producer
operator|.
name|close
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Commit transaction failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|committedTx
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Partial Data Got Commited Some actions need to be Done"
argument_list|)
expr_stmt|;
name|committedTx
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|key
lambda|->
name|LOG
operator|.
name|error
argument_list|(
literal|"Transaction [{}] is an orphen commit"
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
comment|//Stage four, clean the Query Directory
specifier|final
name|RetryUtils
operator|.
name|Task
argument_list|<
name|Void
argument_list|>
name|cleanQueryDirTask
init|=
operator|new
name|RetryUtils
operator|.
name|Task
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|perform
parameter_list|()
throws|throws
name|Exception
block|{
name|cleanWorkingDirectory
argument_list|(
name|queryWorkingDir
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|RetryUtils
operator|.
name|retry
argument_list|(
name|cleanQueryDirTask
argument_list|,
parameter_list|(
name|error
parameter_list|)
lambda|->
name|error
operator|instanceof
name|IOException
argument_list|,
name|maxTries
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//just log it
name|LOG
operator|.
name|error
argument_list|(
literal|"Faild to clean Query Working Directory [{}] due to [{}]"
argument_list|,
name|queryWorkingDir
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|preInsertTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Kafa Table does not support the overwite SQL Smentic"
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|rollbackInsertTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|MetaException
block|{    }
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|table
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|KAFKA_STORAGE_HANDLER
operator|+
literal|" supports only "
operator|+
name|TableType
operator|.
name|EXTERNAL_TABLE
argument_list|)
throw|;
block|}
name|Arrays
operator|.
name|stream
argument_list|(
name|KafkaTableProperties
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|KafkaTableProperties
operator|::
name|isMandatory
argument_list|)
operator|.
name|forEach
argument_list|(
name|key
lambda|->
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|"Set Table property "
operator|+
name|key
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Put all the default at the pre create.
name|Arrays
operator|.
name|stream
argument_list|(
name|KafkaTableProperties
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|table
operator|.
name|putToParameters
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|,
name|key
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|rollbackCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{    }
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|commitCreateTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
name|commitInsertTable
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|preDropTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{    }
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|rollbackDropTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{    }
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|commitDropTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|MetaException
block|{    }
end_function

begin_function
specifier|private
name|Path
name|getQueryWorkingDir
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|getQueryId
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|cleanWorkingDirectory
parameter_list|(
name|Path
name|queryWorkingDir
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|queryWorkingDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

