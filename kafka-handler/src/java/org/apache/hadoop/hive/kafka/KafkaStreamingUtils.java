begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|Utilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|AbstractSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|AbstractPrimitiveWritableObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|CommonClientConfigs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|clients
operator|.
name|consumer
operator|.
name|ConsumerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kafka
operator|.
name|common
operator|.
name|serialization
operator|.
name|ByteArrayDeserializer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Constant, Table properties, Utilities class.  */
end_comment

begin_class
specifier|final
class|class
name|KafkaStreamingUtils
block|{
comment|/**    * MANDATORY Table property indicating kafka topic backing the table.    */
specifier|static
specifier|final
name|String
name|HIVE_KAFKA_TOPIC
init|=
literal|"kafka.topic"
decl_stmt|;
comment|/**    * MANDATORY Table property indicating kafka broker(s) connection string.    */
specifier|static
specifier|final
name|String
name|HIVE_KAFKA_BOOTSTRAP_SERVERS
init|=
literal|"kafka.bootstrap.servers"
decl_stmt|;
comment|/**    * Table property indicating which delegate serde to be used, NOT MANDATORY defaults to {@link KafkaJsonSerDe}    */
specifier|static
specifier|final
name|String
name|SERDE_CLASS_NAME
init|=
literal|"kafka.serde.class"
decl_stmt|;
comment|/**    * Table property indicating poll/fetch timeout period in millis.    * FYI this is independent from internal Kafka consumer timeouts, defaults to {@DEFAULT_CONSUMER_POLL_TIMEOUT_MS}.    */
specifier|static
specifier|final
name|String
name|HIVE_KAFKA_POLL_TIMEOUT
init|=
literal|"hive.kafka.poll.timeout.ms"
decl_stmt|;
comment|/**    * Default poll timeout for fetching metadata and record batch.    */
specifier|static
specifier|final
name|long
name|DEFAULT_CONSUMER_POLL_TIMEOUT_MS
init|=
literal|5000L
decl_stmt|;
comment|// 5 seconds
comment|/**    * Table property prefix used to inject kafka consumer properties, e.g "kafka.consumer.max.poll.records" = "5000"    * this will lead to inject max.poll.records=5000 to the Kafka Consumer. NOT MANDATORY defaults to nothing    */
specifier|static
specifier|final
name|String
name|CONSUMER_CONFIGURATION_PREFIX
init|=
literal|"kafka.consumer"
decl_stmt|;
comment|/**    * Set of Kafka properties that the user can not set via DDLs.    */
specifier|static
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|FORBIDDEN_PROPERTIES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|ConsumerConfig
operator|.
name|ENABLE_AUTO_COMMIT_CONFIG
argument_list|,
name|ConsumerConfig
operator|.
name|AUTO_OFFSET_RESET_CONFIG
argument_list|,
name|ConsumerConfig
operator|.
name|KEY_DESERIALIZER_CLASS_CONFIG
argument_list|,
name|ConsumerConfig
operator|.
name|VALUE_DESERIALIZER_CLASS_CONFIG
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|KafkaStreamingUtils
parameter_list|()
block|{   }
comment|/**    * @param configuration Job configs    *    * @return default consumer properties    */
specifier|static
name|Properties
name|consumerProperties
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// we are managing the commit offset
name|props
operator|.
name|setProperty
argument_list|(
name|ConsumerConfig
operator|.
name|ENABLE_AUTO_COMMIT_CONFIG
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// we are seeking in the stream so no reset
name|props
operator|.
name|setProperty
argument_list|(
name|ConsumerConfig
operator|.
name|AUTO_OFFSET_RESET_CONFIG
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|String
name|brokerEndPoint
init|=
name|configuration
operator|.
name|get
argument_list|(
name|HIVE_KAFKA_BOOTSTRAP_SERVERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|brokerEndPoint
operator|==
literal|null
operator|||
name|brokerEndPoint
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Kafka Broker End Point is missing Please set Config "
operator|+
name|HIVE_KAFKA_BOOTSTRAP_SERVERS
argument_list|)
throw|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|CommonClientConfigs
operator|.
name|BOOTSTRAP_SERVERS_CONFIG
argument_list|,
name|brokerEndPoint
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|ConsumerConfig
operator|.
name|KEY_DESERIALIZER_CLASS_CONFIG
argument_list|,
name|ByteArrayDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|ConsumerConfig
operator|.
name|VALUE_DESERIALIZER_CLASS_CONFIG
argument_list|,
name|ByteArrayDeserializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// user can always override stuff
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kafkaProperties
init|=
name|configuration
operator|.
name|getValByRegex
argument_list|(
literal|"^"
operator|+
name|CONSUMER_CONFIGURATION_PREFIX
operator|+
literal|"\\..*"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|kafkaProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|CONSUMER_CONFIGURATION_PREFIX
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|FORBIDDEN_PROPERTIES
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not suppose to set Kafka Property "
operator|+
name|key
argument_list|)
throw|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
specifier|static
name|void
name|copyDependencyJars
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|classes
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|jars
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|jars
operator|.
name|addAll
argument_list|(
name|conf
operator|.
name|getStringCollection
argument_list|(
literal|"tmpjars"
argument_list|)
argument_list|)
expr_stmt|;
name|jars
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|classes
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|map
argument_list|(
name|clazz
lambda|->
block|{
name|String
name|path
init|=
name|Utilities
operator|.
name|jarFinderGetJar
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find jar for class "
operator|+
name|clazz
operator|+
literal|" in order to ship it to the cluster."
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|localFs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not validate jar file "
operator|+
name|path
operator|+
literal|" for class "
operator|+
name|clazz
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|path
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|jars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"tmpjars"
argument_list|,
name|StringUtils
operator|.
name|arrayToString
argument_list|(
name|jars
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|AbstractSerDe
name|createDelegate
parameter_list|(
name|String
name|className
parameter_list|)
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|AbstractSerDe
argument_list|>
name|clazz
decl_stmt|;
try|try
block|{
comment|//noinspection unchecked
name|clazz
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|AbstractSerDe
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// we are not setting conf thus null is okay
return|return
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Basic Enum class for all the metadata columns appended to the Kafka row by the deserializer.    */
enum|enum
name|MetadataColumn
block|{
comment|/**      * Record offset column name added as extra metadata column to row as long.      */
name|OFFSET
argument_list|(
literal|"__offset"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|,
comment|/**      * Record Kafka Partition column name added as extra meta column of type int.      */
name|PARTITION
argument_list|(
literal|"__partition"
argument_list|,
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
block|,
comment|/**      * Record Kafka key column name added as extra meta column of type binary blob.      */
name|KEY
argument_list|(
literal|"__key"
argument_list|,
name|TypeInfoFactory
operator|.
name|binaryTypeInfo
argument_list|)
block|,
comment|/**      * Record Timestamp column name, added as extra meta column of type long.      */
name|TIMESTAMP
argument_list|(
literal|"__timestamp"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|,
comment|/**      * Start offset given by the input split, this will reflect the actual start of TP or start given by split pruner.      */
name|START_OFFSET
argument_list|(
literal|"__start_offset"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|,
comment|/**      * End offset given by input split at run time.      */
name|END_OFFSET
argument_list|(
literal|"__end_offset"
argument_list|,
name|TypeInfoFactory
operator|.
name|longTypeInfo
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|TypeInfo
name|typeInfo
decl_stmt|;
name|MetadataColumn
parameter_list|(
name|String
name|name
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|typeInfo
operator|=
name|typeInfo
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|AbstractPrimitiveWritableObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|//Order at which column and types will be appended to the original row.
comment|/**    * Kafka metadata columns order list.    */
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|MetadataColumn
argument_list|>
name|KAFKA_METADATA_COLUMNS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|MetadataColumn
operator|.
name|KEY
argument_list|,
name|MetadataColumn
operator|.
name|PARTITION
argument_list|,
name|MetadataColumn
operator|.
name|OFFSET
argument_list|,
name|MetadataColumn
operator|.
name|TIMESTAMP
argument_list|,
name|MetadataColumn
operator|.
name|START_OFFSET
argument_list|,
name|MetadataColumn
operator|.
name|END_OFFSET
argument_list|)
decl_stmt|;
comment|/**    * Kafka metadata column names.    */
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|KAFKA_METADATA_COLUMN_NAMES
init|=
name|KAFKA_METADATA_COLUMNS
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MetadataColumn
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Kafka metadata column inspectors.    */
specifier|static
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|KAFKA_METADATA_INSPECTORS
init|=
name|KAFKA_METADATA_COLUMNS
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MetadataColumn
operator|::
name|getObjectInspector
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Reverse lookup map used to convert records from kafka Writable to hive Writable based on Kafka semantic.    */
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|KafkaRecordWritable
argument_list|,
name|Writable
argument_list|>
argument_list|>
name|recordWritableFnMap
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Function
argument_list|<
name|KafkaRecordWritable
argument_list|,
name|Writable
argument_list|>
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
name|MetadataColumn
operator|.
name|END_OFFSET
operator|.
name|getName
argument_list|()
argument_list|,
parameter_list|(
name|record
parameter_list|)
lambda|->
operator|new
name|LongWritable
argument_list|(
name|record
operator|.
name|getEndOffset
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|MetadataColumn
operator|.
name|KEY
operator|.
name|getName
argument_list|()
argument_list|,
name|record
lambda|->
name|record
operator|.
name|getRecordKey
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|BytesWritable
argument_list|(
name|record
operator|.
name|getRecordKey
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|MetadataColumn
operator|.
name|OFFSET
operator|.
name|getName
argument_list|()
argument_list|,
name|record
lambda|->
operator|new
name|LongWritable
argument_list|(
name|record
operator|.
name|getOffset
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|MetadataColumn
operator|.
name|PARTITION
operator|.
name|getName
argument_list|()
argument_list|,
name|record
lambda|->
operator|new
name|IntWritable
argument_list|(
name|record
operator|.
name|getPartition
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|MetadataColumn
operator|.
name|START_OFFSET
operator|.
name|getName
argument_list|()
argument_list|,
name|record
lambda|->
operator|new
name|LongWritable
argument_list|(
name|record
operator|.
name|getStartOffset
argument_list|()
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|MetadataColumn
operator|.
name|TIMESTAMP
operator|.
name|getName
argument_list|()
argument_list|,
name|record
lambda|->
operator|new
name|LongWritable
argument_list|(
name|record
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

