begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|kafka
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Kafka Hadoop Input Split Class.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"WeakerAccess"
argument_list|)
specifier|public
class|class
name|KafkaInputSplit
extends|extends
name|FileSplit
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InputSplit
block|{
specifier|private
name|String
name|topic
decl_stmt|;
specifier|private
name|long
name|startOffset
decl_stmt|;
specifier|private
name|int
name|partition
decl_stmt|;
specifier|private
name|long
name|endOffset
decl_stmt|;
specifier|public
name|KafkaInputSplit
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|KafkaInputSplit
parameter_list|(
name|String
name|topic
parameter_list|,
name|int
name|partition
parameter_list|,
name|long
name|startOffset
parameter_list|,
name|long
name|endOffset
parameter_list|,
name|Path
name|dummyPath
parameter_list|)
block|{
name|super
argument_list|(
name|dummyPath
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|topic
operator|=
name|topic
expr_stmt|;
name|this
operator|.
name|startOffset
operator|=
name|startOffset
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|this
operator|.
name|endOffset
operator|=
name|endOffset
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|startOffset
operator|>=
literal|0
operator|&&
name|startOffset
operator|<=
name|endOffset
argument_list|,
literal|"start [%s] has to be positive and>= end [%]"
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|dataOutput
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeUTF
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeInt
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeLong
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|dataOutput
operator|.
name|writeLong
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|dataInput
argument_list|)
expr_stmt|;
name|topic
operator|=
name|dataInput
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|partition
operator|=
name|dataInput
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|startOffset
operator|=
name|dataInput
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|endOffset
operator|=
name|dataInput
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|startOffset
operator|>=
literal|0
operator|&&
name|startOffset
operator|<=
name|endOffset
argument_list|,
literal|"start [%s] has to be positive and>= end [%]"
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getTopic
parameter_list|()
block|{
return|return
name|topic
return|;
block|}
specifier|public
name|int
name|getPartition
parameter_list|()
block|{
return|return
name|partition
return|;
block|}
specifier|public
name|long
name|getStartOffset
parameter_list|()
block|{
return|return
name|startOffset
return|;
block|}
specifier|public
name|long
name|getEndOffset
parameter_list|()
block|{
return|return
name|endOffset
return|;
block|}
comment|/**    * Compute the intersection of 2 splits. Splits must share the same topic and partition number.    *    * @param split1 left split    * @param split2 right split    *    * @return new split that represents range intersection or null if it is not overlapping    */
annotation|@
name|Nullable
specifier|public
specifier|static
name|KafkaInputSplit
name|intersectRange
parameter_list|(
name|KafkaInputSplit
name|split1
parameter_list|,
name|KafkaInputSplit
name|split2
parameter_list|)
block|{
assert|assert
operator|(
name|split1
operator|.
name|topic
operator|.
name|equals
argument_list|(
name|split2
operator|.
name|topic
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|split1
operator|.
name|partition
operator|==
name|split2
operator|.
name|partition
operator|)
assert|;
specifier|final
name|long
name|startOffset
init|=
name|Math
operator|.
name|max
argument_list|(
name|split1
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|split2
operator|.
name|getStartOffset
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|endOffset
init|=
name|Math
operator|.
name|min
argument_list|(
name|split1
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|split2
operator|.
name|getEndOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|startOffset
operator|>
name|endOffset
condition|)
block|{
comment|// there is no overlapping
return|return
literal|null
return|;
block|}
return|return
operator|new
name|KafkaInputSplit
argument_list|(
name|split1
operator|.
name|topic
argument_list|,
name|split1
operator|.
name|partition
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|split1
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Compute union of ranges between splits. Splits must share the same topic and partition    *    * @param split1 left split    * @param split2 right split    *    * @return new split with a range including both splits.    */
specifier|public
specifier|static
name|KafkaInputSplit
name|unionRange
parameter_list|(
name|KafkaInputSplit
name|split1
parameter_list|,
name|KafkaInputSplit
name|split2
parameter_list|)
block|{
assert|assert
operator|(
name|split1
operator|.
name|topic
operator|.
name|equals
argument_list|(
name|split2
operator|.
name|topic
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|split1
operator|.
name|partition
operator|==
name|split2
operator|.
name|partition
operator|)
assert|;
specifier|final
name|long
name|startOffset
init|=
name|Math
operator|.
name|min
argument_list|(
name|split1
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|split2
operator|.
name|getStartOffset
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|long
name|endOffset
init|=
name|Math
operator|.
name|max
argument_list|(
name|split1
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|split2
operator|.
name|getEndOffset
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|KafkaInputSplit
argument_list|(
name|split1
operator|.
name|topic
argument_list|,
name|split1
operator|.
name|partition
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|split1
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|KafkaInputSplit
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|KafkaInputSplit
name|that
init|=
operator|(
name|KafkaInputSplit
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|getTopic
argument_list|()
argument_list|,
name|that
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|getStartOffset
argument_list|()
argument_list|,
name|that
operator|.
name|getStartOffset
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|getPartition
argument_list|()
argument_list|,
name|that
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|getEndOffset
argument_list|()
argument_list|,
name|that
operator|.
name|getEndOffset
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hashCode
argument_list|(
name|getTopic
argument_list|()
argument_list|,
name|getStartOffset
argument_list|()
argument_list|,
name|getPartition
argument_list|()
argument_list|,
name|getEndOffset
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"KafkaInputSplit{"
operator|+
literal|"topic='"
operator|+
name|topic
operator|+
literal|'\''
operator|+
literal|", startOffset="
operator|+
name|startOffset
operator|+
literal|", partition="
operator|+
name|partition
operator|+
literal|", endOffset="
operator|+
name|endOffset
operator|+
literal|", path="
operator|+
name|super
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|'}'
return|;
block|}
specifier|public
specifier|static
name|KafkaInputSplit
name|copyOf
parameter_list|(
name|KafkaInputSplit
name|other
parameter_list|)
block|{
return|return
operator|new
name|KafkaInputSplit
argument_list|(
name|other
operator|.
name|getTopic
argument_list|()
argument_list|,
name|other
operator|.
name|getPartition
argument_list|()
argument_list|,
name|other
operator|.
name|getStartOffset
argument_list|()
argument_list|,
name|other
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|other
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|KafkaInputSplit
argument_list|>
name|slice
parameter_list|(
name|long
name|sliceSize
parameter_list|,
specifier|final
name|KafkaInputSplit
name|split
parameter_list|)
block|{
if|if
condition|(
name|split
operator|.
name|getEndOffset
argument_list|()
operator|-
name|split
operator|.
name|getStartOffset
argument_list|()
operator|>
name|sliceSize
condition|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|KafkaInputSplit
argument_list|>
name|builder
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|split
operator|.
name|getStartOffset
argument_list|()
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|split
operator|.
name|getEndOffset
argument_list|()
operator|-
name|sliceSize
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|KafkaInputSplit
argument_list|(
name|split
operator|.
name|topic
argument_list|,
name|split
operator|.
name|partition
argument_list|,
name|start
argument_list|,
name|start
operator|+
name|sliceSize
operator|+
literal|1
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|+=
name|sliceSize
operator|+
literal|1
expr_stmt|;
block|}
comment|// last split
if|if
condition|(
name|start
operator|<
name|split
operator|.
name|getEndOffset
argument_list|()
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|KafkaInputSplit
argument_list|(
name|split
operator|.
name|topic
argument_list|,
name|split
operator|.
name|partition
argument_list|,
name|start
argument_list|,
name|split
operator|.
name|getEndOffset
argument_list|()
argument_list|,
name|split
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|copyOf
argument_list|(
name|split
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

