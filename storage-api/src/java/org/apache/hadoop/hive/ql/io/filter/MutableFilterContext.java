begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * A representation of a Filter applied on the rows of a VectorizedRowBatch  * {@link org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch}.  *  * Each FilterContext consists of an array with the ids (int) of rows that are selected by the  * filter, an integer representing the number of selected rows, and a boolean showing if the filter  * actually selected any rows.  *  */
end_comment

begin_class
specifier|public
class|class
name|MutableFilterContext
extends|extends
name|FilterContext
block|{
comment|/**    * Set context with the given values by reference.    * @param isSelectedInUse if the filter is applied    * @param selected an array of the selected rows    * @param selectedSize the number of the selected rows    */
specifier|public
name|void
name|setFilterContext
parameter_list|(
name|boolean
name|isSelectedInUse
parameter_list|,
name|int
index|[]
name|selected
parameter_list|,
name|int
name|selectedSize
parameter_list|)
block|{
name|this
operator|.
name|currBatchIsSelectedInUse
operator|=
name|isSelectedInUse
expr_stmt|;
name|this
operator|.
name|currBatchSelected
operator|=
name|selected
expr_stmt|;
name|this
operator|.
name|currBatchSelectedSize
operator|=
name|selectedSize
expr_stmt|;
comment|// Avoid selected.length< selectedSize since we can borrow a larger array for selected
comment|// Debug loop for selected array: use without assert when needed (asserts only fail in testing)
assert|assert
name|isValidSelected
argument_list|()
operator|:
literal|"Selected array may not contain duplicates or unordered values"
assert|;
block|}
comment|/**    * Copy context variables from the a given FilterContext.    * Always does a deep copy of the data.    * @param other FilterContext to copy from    */
specifier|public
name|void
name|copyFilterContextFrom
parameter_list|(
name|MutableFilterContext
name|other
parameter_list|)
block|{
comment|// assert if copying into self (can fail only in testing)
assert|assert
name|this
operator|!=
name|other
operator|:
literal|"May not copy a FilterContext to itself"
assert|;
if|if
condition|(
name|this
operator|!=
name|other
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|currBatchSelected
operator|==
literal|null
operator|||
name|this
operator|.
name|currBatchSelected
operator|.
name|length
operator|<
name|other
operator|.
name|currBatchSelectedSize
condition|)
block|{
comment|// note: still allocating a full size buffer, for later use
name|this
operator|.
name|currBatchSelected
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|other
operator|.
name|currBatchSelected
argument_list|,
name|other
operator|.
name|currBatchSelected
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|other
operator|.
name|currBatchSelected
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|currBatchSelected
argument_list|,
literal|0
argument_list|,
name|other
operator|.
name|currBatchSelectedSize
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|currBatchSelectedSize
operator|=
name|other
operator|.
name|currBatchSelectedSize
expr_stmt|;
name|this
operator|.
name|currBatchIsSelectedInUse
operator|=
name|other
operator|.
name|currBatchIsSelectedInUse
expr_stmt|;
block|}
block|}
comment|/**    * Validate method checking if existing selected array contains accepted values.    * Values should be in order and without duplicates i.e [1,1,1] is illegal    * @return true if the selected array is valid    */
specifier|public
name|boolean
name|isValidSelected
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|this
operator|.
name|currBatchSelectedSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|this
operator|.
name|currBatchSelected
index|[
name|i
operator|-
literal|1
index|]
operator|>=
name|this
operator|.
name|currBatchSelected
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Borrow the current selected array to be modified if it satisfies minimum capacity.    * If it is too small or unset, allocates one.    * This method never returns null!    * @param minCapacity    * @return the current selected array to be modified    */
specifier|public
name|int
index|[]
name|borrowSelected
parameter_list|(
name|int
name|minCapacity
parameter_list|)
block|{
name|int
index|[]
name|existing
init|=
name|this
operator|.
name|currBatchSelected
decl_stmt|;
name|this
operator|.
name|currBatchSelected
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
operator|||
name|existing
operator|.
name|length
operator|<
name|minCapacity
condition|)
block|{
return|return
operator|new
name|int
index|[
name|minCapacity
index|]
return|;
block|}
return|return
name|existing
return|;
block|}
comment|/**    * Get the immutable version of the current FilterContext.    * @return immutable FilterContext instance    */
specifier|public
name|FilterContext
name|immutable
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/**    * Set the selectedInUse boolean showing if the filter is applied.    * @param selectedInUse    */
specifier|public
name|void
name|setSelectedInUse
parameter_list|(
name|boolean
name|selectedInUse
parameter_list|)
block|{
name|this
operator|.
name|currBatchIsSelectedInUse
operator|=
name|selectedInUse
expr_stmt|;
block|}
comment|/**    * Set the array of the rows that pass the filter by reference.    * @param selectedArray    */
specifier|public
name|void
name|setSelected
parameter_list|(
name|int
index|[]
name|selectedArray
parameter_list|)
block|{
name|this
operator|.
name|currBatchSelected
operator|=
name|selectedArray
expr_stmt|;
block|}
comment|/**    * Set the number of the rows that pass the filter.    * @param selectedSize    */
specifier|public
name|void
name|setSelectedSize
parameter_list|(
name|int
name|selectedSize
parameter_list|)
block|{
name|this
operator|.
name|currBatchSelectedSize
operator|=
name|selectedSize
expr_stmt|;
block|}
block|}
end_class

end_unit

