begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_class
specifier|public
class|class
name|DecimalColumnVector
extends|extends
name|ColumnVector
block|{
comment|/**    * A vector of HiveDecimalWritable objects.    *    * For high performance and easy access to this low-level structure,    * the fields are public by design (as they are in other ColumnVector    * types).    */
specifier|public
name|HiveDecimalWritable
index|[]
name|vector
decl_stmt|;
specifier|public
name|short
name|scale
decl_stmt|;
specifier|public
name|short
name|precision
decl_stmt|;
specifier|public
name|DecimalColumnVector
parameter_list|(
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|this
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DecimalColumnVector
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
operator|(
name|short
operator|)
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
operator|(
name|short
operator|)
name|scale
expr_stmt|;
name|vector
operator|=
operator|new
name|HiveDecimalWritable
index|[
name|size
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|vector
index|[
name|i
index|]
operator|=
operator|new
name|HiveDecimalWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Initially zero.
block|}
block|}
comment|// Fill the all the vector entries with provided value
specifier|public
name|void
name|fill
parameter_list|(
name|HiveDecimal
name|value
parameter_list|)
block|{
name|noNulls
operator|=
literal|true
expr_stmt|;
name|isRepeating
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|vector
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|vector
index|[
literal|0
index|]
operator|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vector
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|flatten
parameter_list|(
name|boolean
name|selectedInUse
parameter_list|,
name|int
index|[]
name|sel
parameter_list|,
name|int
name|size
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
name|void
name|setElement
parameter_list|(
name|int
name|outElementNum
parameter_list|,
name|int
name|inputElementNum
parameter_list|,
name|ColumnVector
name|inputVector
parameter_list|)
block|{
if|if
condition|(
name|inputVector
operator|.
name|isRepeating
condition|)
block|{
name|inputElementNum
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|inputVector
operator|.
name|noNulls
operator|||
operator|!
name|inputVector
operator|.
name|isNull
index|[
name|inputElementNum
index|]
condition|)
block|{
name|vector
index|[
name|outElementNum
index|]
operator|.
name|set
argument_list|(
operator|(
operator|(
name|DecimalColumnVector
operator|)
name|inputVector
operator|)
operator|.
name|vector
index|[
name|inputElementNum
index|]
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vector
index|[
name|outElementNum
index|]
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|isNull
index|[
name|outElementNum
index|]
operator|=
literal|true
expr_stmt|;
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|isNull
index|[
name|outElementNum
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|isNull
index|[
name|outElementNum
index|]
operator|=
literal|true
expr_stmt|;
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stringifyValue
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|noNulls
operator|||
operator|!
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|vector
index|[
name|row
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|set
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|HiveDecimalWritable
name|writeable
parameter_list|)
block|{
name|vector
index|[
name|elementNum
index|]
operator|.
name|set
argument_list|(
name|writeable
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vector
index|[
name|elementNum
index|]
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|noNulls
operator|=
literal|false
expr_stmt|;
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|set
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|HiveDecimal
name|hiveDec
parameter_list|)
block|{
name|vector
index|[
name|elementNum
index|]
operator|.
name|set
argument_list|(
name|hiveDec
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|vector
index|[
name|elementNum
index|]
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|noNulls
operator|=
literal|false
expr_stmt|;
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setNullDataValue
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
comment|// E.g. For scale 2 the minimum is "0.01"
name|vector
index|[
name|elementNum
index|]
operator|.
name|setFromLongAndScale
argument_list|(
literal|1L
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|ensureSize
parameter_list|(
name|int
name|size
parameter_list|,
name|boolean
name|preserveData
parameter_list|)
block|{
name|super
operator|.
name|ensureSize
argument_list|(
name|size
argument_list|,
name|preserveData
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|<=
name|vector
operator|.
name|length
condition|)
return|return;
comment|// We assume the existing vector is always valid.
name|HiveDecimalWritable
index|[]
name|oldArray
init|=
name|vector
decl_stmt|;
name|vector
operator|=
operator|new
name|HiveDecimalWritable
index|[
name|size
index|]
expr_stmt|;
name|int
name|initPos
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|preserveData
condition|)
block|{
comment|// we copy all of the values to avoid creating more objects
comment|// TODO: it might be cheaper to always preserve data or reset existing objects
name|initPos
operator|=
name|oldArray
operator|.
name|length
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oldArray
argument_list|,
literal|0
argument_list|,
name|vector
argument_list|,
literal|0
argument_list|,
name|oldArray
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|initPos
init|;
name|i
operator|<
name|vector
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|vector
index|[
name|i
index|]
operator|=
operator|new
name|HiveDecimalWritable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Initially zero.
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|shallowCopyTo
parameter_list|(
name|ColumnVector
name|otherCv
parameter_list|)
block|{
name|DecimalColumnVector
name|other
init|=
operator|(
name|DecimalColumnVector
operator|)
name|otherCv
decl_stmt|;
name|super
operator|.
name|shallowCopyTo
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|other
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
name|other
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|other
operator|.
name|vector
operator|=
name|vector
expr_stmt|;
block|}
block|}
end_class

end_unit

