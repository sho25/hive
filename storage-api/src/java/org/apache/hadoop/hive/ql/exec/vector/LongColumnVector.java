begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * This class represents a nullable int column vector.  * This class will be used for operations on all integer types (tinyint, smallint, int, bigint)  * and as such will use a 64-bit long value to hold the biggest possible value.  * During copy-in/copy-out, smaller int types will be converted as needed. This will  * reduce the amount of code that needs to be generated and also will run fast since the  * machine operates with 64-bit words.  *  * The vector[] field is public by design for high-performance access in the inner  * loop of query execution.  */
end_comment

begin_class
specifier|public
class|class
name|LongColumnVector
extends|extends
name|ColumnVector
block|{
specifier|public
name|long
index|[]
name|vector
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|NULL_VALUE
init|=
literal|1
decl_stmt|;
comment|/**    * Use this constructor by default. All column vectors    * should normally be the default size.    */
specifier|public
name|LongColumnVector
parameter_list|()
block|{
name|this
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Don't use this except for testing purposes.    *    * @param len the number of rows    */
specifier|public
name|LongColumnVector
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|super
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|vector
operator|=
operator|new
name|long
index|[
name|len
index|]
expr_stmt|;
block|}
comment|// Copy the current object contents into the output. Only copy selected entries,
comment|// as indicated by selectedInUse and the sel array.
annotation|@
name|Override
specifier|public
name|void
name|copySelected
parameter_list|(
name|boolean
name|selectedInUse
parameter_list|,
name|int
index|[]
name|sel
parameter_list|,
name|int
name|size
parameter_list|,
name|ColumnVector
name|outputColVector
parameter_list|)
block|{
name|LongColumnVector
name|output
init|=
operator|(
name|LongColumnVector
operator|)
name|outputColVector
decl_stmt|;
name|boolean
index|[]
name|outputIsNull
init|=
name|output
operator|.
name|isNull
decl_stmt|;
comment|// We do not need to do a column reset since we are carefully changing the output.
name|output
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// Handle repeating case
if|if
condition|(
name|isRepeating
condition|)
block|{
if|if
condition|(
name|noNulls
operator|||
operator|!
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outputIsNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|output
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|vector
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|outputIsNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|output
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
name|output
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
return|return;
block|}
comment|// Handle normal case
if|if
condition|(
name|noNulls
condition|)
block|{
if|if
condition|(
name|selectedInUse
condition|)
block|{
comment|// CONSIDER: For large n, fill n or all of isNull array and use the tighter ELSE loop.
if|if
condition|(
operator|!
name|outputColVector
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|size
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
comment|// Set isNull before call in case it changes it mind.
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|output
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|size
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|output
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|vector
index|[
name|i
index|]
expr_stmt|;
empty_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|outputColVector
operator|.
name|noNulls
condition|)
block|{
comment|// Assume it is almost always a performance win to fill all of isNull so we can
comment|// safely reset noNulls.
name|Arrays
operator|.
name|fill
argument_list|(
name|outputIsNull
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|outputColVector
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|vector
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|vector
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
else|else
comment|/* there are nulls in our column */
block|{
comment|// Carefully handle NULLs...
comment|/*        * For better performance on LONG/DOUBLE we don't want the conditional        * statements inside the for loop.        */
name|output
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|output
operator|.
name|isNull
index|[
name|i
index|]
operator|=
name|isNull
index|[
name|i
index|]
expr_stmt|;
name|output
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|isNull
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|isNull
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|vector
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|vector
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Copy the current object contents into the output. Only copy selected entries,
comment|// as indicated by selectedInUse and the sel array.
specifier|public
name|void
name|copySelected
parameter_list|(
name|boolean
name|selectedInUse
parameter_list|,
name|int
index|[]
name|sel
parameter_list|,
name|int
name|size
parameter_list|,
name|DoubleColumnVector
name|output
parameter_list|)
block|{
name|boolean
index|[]
name|outputIsNull
init|=
name|output
operator|.
name|isNull
decl_stmt|;
comment|// We do not need to do a column reset since we are carefully changing the output.
name|output
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// Handle repeating case
if|if
condition|(
name|isRepeating
condition|)
block|{
if|if
condition|(
name|noNulls
operator|||
operator|!
name|isNull
index|[
literal|0
index|]
condition|)
block|{
name|outputIsNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|output
operator|.
name|vector
index|[
literal|0
index|]
operator|=
name|vector
index|[
literal|0
index|]
expr_stmt|;
comment|// automatic conversion to double is done here
block|}
else|else
block|{
name|outputIsNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|output
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
name|output
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
return|return;
block|}
comment|// Handle normal case
if|if
condition|(
name|noNulls
condition|)
block|{
if|if
condition|(
name|selectedInUse
condition|)
block|{
comment|// CONSIDER: For large n, fill n or all of isNull array and use the tighter ELSE loop.
if|if
condition|(
operator|!
name|output
operator|.
name|noNulls
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|size
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
comment|// Set isNull before call in case it changes it mind.
name|outputIsNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|output
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|size
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|output
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|vector
index|[
name|i
index|]
expr_stmt|;
empty_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|output
operator|.
name|noNulls
condition|)
block|{
comment|// Assume it is almost always a performance win to fill all of isNull so we can
comment|// safely reset noNulls.
name|Arrays
operator|.
name|fill
argument_list|(
name|outputIsNull
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|output
operator|.
name|noNulls
operator|=
literal|true
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|vector
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|vector
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
else|else
comment|/* there are NULLs in our column */
block|{
comment|// Carefully handle NULLs...
comment|/*        * For better performance on LONG/DOUBLE we don't want the conditional        * statements inside the for loop.        */
name|output
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|output
operator|.
name|isNull
index|[
name|i
index|]
operator|=
name|isNull
index|[
name|i
index|]
expr_stmt|;
name|output
operator|.
name|vector
index|[
name|i
index|]
operator|=
name|vector
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|isNull
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|isNull
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|vector
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|vector
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Fill the column vector with the provided value
specifier|public
name|void
name|fill
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|isNull
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|vector
index|[
literal|0
index|]
operator|=
name|value
expr_stmt|;
block|}
comment|// Fill the column vector with nulls
specifier|public
name|LongColumnVector
name|fillWithNulls
parameter_list|()
block|{
name|noNulls
operator|=
literal|false
expr_stmt|;
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|vector
index|[
literal|0
index|]
operator|=
name|NULL_VALUE
expr_stmt|;
name|isNull
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// Simplify vector by brute-force flattening noNulls and isRepeating
comment|// This can be used to reduce combinatorial explosion of code paths in VectorExpressions
comment|// with many arguments.
specifier|public
name|void
name|flatten
parameter_list|(
name|boolean
name|selectedInUse
parameter_list|,
name|int
index|[]
name|sel
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|flattenPush
argument_list|()
expr_stmt|;
if|if
condition|(
name|isRepeating
condition|)
block|{
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|long
name|repeatVal
init|=
name|vector
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|vector
index|[
name|i
index|]
operator|=
name|repeatVal
expr_stmt|;
block|}
block|}
else|else
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|vector
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|repeatVal
argument_list|)
expr_stmt|;
block|}
name|flattenRepeatingNulls
argument_list|(
name|selectedInUse
argument_list|,
name|sel
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|flattenNoNulls
argument_list|(
name|selectedInUse
argument_list|,
name|sel
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the element in this column vector from the given input vector.    *    * Both the inputElementNum and outElementNum must have been adjusted to 0 in ADVANCE    * when the input / output has isRepeating set.    *    * IMPORTANT: if the output entry is marked as NULL, this method will do NOTHING.  This    * supports the caller to do output NULL processing in advance that may cause the output results    * operation to be ignored.  Thus, make sure the output isNull entry is set in ADVANCE.    *    * The inputColVector noNulls and isNull entry will be examined.  The output will only    * be set if the input is NOT NULL.  I.e. noNulls || !isNull[inputElementNum] where    * inputElementNum may have been adjusted to 0 for isRepeating.    *    * If the input entry is NULL or out-of-range, the output will be marked as NULL.    * I.e. set output noNull = false and isNull[outElementNum] = true.  An example of out-of-range    * is the DecimalColumnVector which can find the input decimal does not fit in the output    * precision/scale.    *    * (Since we return immediately if the output entry is NULL, we have no need and do not mark    * the output entry to NOT NULL).    *    */
annotation|@
name|Override
specifier|public
name|void
name|setElement
parameter_list|(
name|int
name|outputElementNum
parameter_list|,
name|int
name|inputElementNum
parameter_list|,
name|ColumnVector
name|inputColVector
parameter_list|)
block|{
comment|// Invariants.
if|if
condition|(
name|isRepeating
operator|&&
name|outputElementNum
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Output column number expected to be 0 when isRepeating"
argument_list|)
throw|;
block|}
if|if
condition|(
name|inputColVector
operator|.
name|isRepeating
condition|)
block|{
name|inputElementNum
operator|=
literal|0
expr_stmt|;
block|}
comment|// Do NOTHING if output is NULL.
if|if
condition|(
operator|!
name|noNulls
operator|&&
name|isNull
index|[
name|outputElementNum
index|]
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|inputColVector
operator|.
name|noNulls
operator|||
operator|!
name|inputColVector
operator|.
name|isNull
index|[
name|inputElementNum
index|]
condition|)
block|{
name|vector
index|[
name|outputElementNum
index|]
operator|=
operator|(
operator|(
name|LongColumnVector
operator|)
name|inputColVector
operator|)
operator|.
name|vector
index|[
name|inputElementNum
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// Only mark output NULL when input is NULL.
name|isNull
index|[
name|outputElementNum
index|]
operator|=
literal|true
expr_stmt|;
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stringifyValue
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|noNulls
operator|||
operator|!
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|vector
index|[
name|row
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|ensureSize
parameter_list|(
name|int
name|size
parameter_list|,
name|boolean
name|preserveData
parameter_list|)
block|{
name|super
operator|.
name|ensureSize
argument_list|(
name|size
argument_list|,
name|preserveData
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|>
name|vector
operator|.
name|length
condition|)
block|{
name|long
index|[]
name|oldArray
init|=
name|vector
decl_stmt|;
name|vector
operator|=
operator|new
name|long
index|[
name|size
index|]
expr_stmt|;
if|if
condition|(
name|preserveData
condition|)
block|{
if|if
condition|(
name|isRepeating
condition|)
block|{
name|vector
index|[
literal|0
index|]
operator|=
name|oldArray
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|oldArray
argument_list|,
literal|0
argument_list|,
name|vector
argument_list|,
literal|0
argument_list|,
name|oldArray
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|shallowCopyTo
parameter_list|(
name|ColumnVector
name|otherCv
parameter_list|)
block|{
name|LongColumnVector
name|other
init|=
operator|(
name|LongColumnVector
operator|)
name|otherCv
decl_stmt|;
name|super
operator|.
name|shallowCopyTo
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|other
operator|.
name|vector
operator|=
name|vector
expr_stmt|;
block|}
block|}
end_class

end_unit

