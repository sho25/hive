begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * The inner representation of the SearchArgument. Most users should not  * need this interface, it is only for file formats that need to translate  * the SearchArgument into an internal form.  */
end_comment

begin_class
specifier|public
class|class
name|ExpressionTree
block|{
specifier|public
enum|enum
name|Operator
block|{
name|OR
block|,
name|AND
block|,
name|NOT
block|,
name|LEAF
block|,
name|CONSTANT
block|}
specifier|private
specifier|final
name|Operator
name|operator
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|children
decl_stmt|;
specifier|private
name|int
name|leaf
decl_stmt|;
specifier|private
specifier|final
name|SearchArgument
operator|.
name|TruthValue
name|constant
decl_stmt|;
name|ExpressionTree
parameter_list|()
block|{
name|operator
operator|=
literal|null
expr_stmt|;
name|children
operator|=
literal|null
expr_stmt|;
name|leaf
operator|=
literal|0
expr_stmt|;
name|constant
operator|=
literal|null
expr_stmt|;
block|}
name|ExpressionTree
parameter_list|(
name|Operator
name|op
parameter_list|,
name|ExpressionTree
modifier|...
name|kids
parameter_list|)
block|{
name|operator
operator|=
name|op
expr_stmt|;
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|()
expr_stmt|;
name|leaf
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|constant
operator|=
literal|null
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|children
argument_list|,
name|kids
argument_list|)
expr_stmt|;
block|}
name|ExpressionTree
parameter_list|(
name|int
name|leaf
parameter_list|)
block|{
name|operator
operator|=
name|Operator
operator|.
name|LEAF
expr_stmt|;
name|children
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|leaf
operator|=
name|leaf
expr_stmt|;
name|this
operator|.
name|constant
operator|=
literal|null
expr_stmt|;
block|}
name|ExpressionTree
parameter_list|(
name|SearchArgument
operator|.
name|TruthValue
name|constant
parameter_list|)
block|{
name|operator
operator|=
name|Operator
operator|.
name|CONSTANT
expr_stmt|;
name|children
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|leaf
operator|=
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|constant
operator|=
name|constant
expr_stmt|;
block|}
name|ExpressionTree
parameter_list|(
name|ExpressionTree
name|other
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|other
operator|.
name|operator
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|children
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|children
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|child
range|:
name|other
operator|.
name|children
control|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|leaf
operator|=
name|other
operator|.
name|leaf
expr_stmt|;
name|this
operator|.
name|constant
operator|=
name|other
operator|.
name|constant
expr_stmt|;
block|}
specifier|public
name|SearchArgument
operator|.
name|TruthValue
name|evaluate
parameter_list|(
name|SearchArgument
operator|.
name|TruthValue
index|[]
name|leaves
parameter_list|)
block|{
name|SearchArgument
operator|.
name|TruthValue
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|OR
case|:
for|for
control|(
name|ExpressionTree
name|child
range|:
name|children
control|)
block|{
name|result
operator|=
name|child
operator|.
name|evaluate
argument_list|(
name|leaves
argument_list|)
operator|.
name|or
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
case|case
name|AND
case|:
for|for
control|(
name|ExpressionTree
name|child
range|:
name|children
control|)
block|{
name|result
operator|=
name|child
operator|.
name|evaluate
argument_list|(
name|leaves
argument_list|)
operator|.
name|and
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
case|case
name|NOT
case|:
return|return
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|evaluate
argument_list|(
name|leaves
argument_list|)
operator|.
name|not
argument_list|()
return|;
case|case
name|LEAF
case|:
return|return
name|leaves
index|[
name|leaf
index|]
return|;
case|case
name|CONSTANT
case|:
return|return
name|constant
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown operator: "
operator|+
name|operator
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|OR
case|:
name|buffer
operator|.
name|append
argument_list|(
literal|"(or"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|child
range|:
name|children
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
case|case
name|AND
case|:
name|buffer
operator|.
name|append
argument_list|(
literal|"(and"
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|child
range|:
name|children
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOT
case|:
name|buffer
operator|.
name|append
argument_list|(
literal|"(not "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEAF
case|:
name|buffer
operator|.
name|append
argument_list|(
literal|"leaf-"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|leaf
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONSTANT
case|:
name|buffer
operator|.
name|append
argument_list|(
name|constant
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Operator
name|getOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
specifier|public
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
specifier|public
name|SearchArgument
operator|.
name|TruthValue
name|getConstant
parameter_list|()
block|{
return|return
name|constant
return|;
block|}
specifier|public
name|int
name|getLeaf
parameter_list|()
block|{
return|return
name|leaf
return|;
block|}
specifier|public
name|void
name|setLeaf
parameter_list|(
name|int
name|leaf
parameter_list|)
block|{
name|this
operator|.
name|leaf
operator|=
name|leaf
expr_stmt|;
block|}
block|}
end_class

end_unit

