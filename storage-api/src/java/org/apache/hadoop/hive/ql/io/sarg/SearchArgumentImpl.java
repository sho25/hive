begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * The implementation of SearchArguments.  */
end_comment

begin_class
specifier|final
class|class
name|SearchArgumentImpl
implements|implements
name|SearchArgument
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SearchArgumentImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
class|class
name|PredicateLeafImpl
implements|implements
name|PredicateLeaf
block|{
specifier|private
specifier|final
name|Operator
name|operator
decl_stmt|;
specifier|private
specifier|final
name|Type
name|type
decl_stmt|;
specifier|private
specifier|final
name|String
name|columnName
decl_stmt|;
specifier|private
specifier|final
name|Object
name|literal
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|literalList
decl_stmt|;
comment|// Used by kryo
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|PredicateLeafImpl
parameter_list|()
block|{
name|operator
operator|=
literal|null
expr_stmt|;
name|type
operator|=
literal|null
expr_stmt|;
name|columnName
operator|=
literal|null
expr_stmt|;
name|literal
operator|=
literal|null
expr_stmt|;
name|literalList
operator|=
literal|null
expr_stmt|;
block|}
name|PredicateLeafImpl
parameter_list|(
name|Operator
name|operator
parameter_list|,
name|Type
name|type
parameter_list|,
name|String
name|columnName
parameter_list|,
name|Object
name|literal
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|literalList
parameter_list|)
block|{
name|this
operator|.
name|operator
operator|=
name|operator
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
name|this
operator|.
name|literal
operator|=
name|literal
expr_stmt|;
if|if
condition|(
name|literal
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|literal
operator|.
name|getClass
argument_list|()
operator|!=
name|type
operator|.
name|getValueClass
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wrong value class "
operator|+
name|literal
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|type
operator|+
literal|"."
operator|+
name|operator
operator|+
literal|" leaf"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|literalList
operator|=
name|literalList
expr_stmt|;
if|if
condition|(
name|literalList
operator|!=
literal|null
condition|)
block|{
name|Class
name|valueCls
init|=
name|type
operator|.
name|getValueClass
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|lit
range|:
name|literalList
control|)
block|{
if|if
condition|(
name|lit
operator|!=
literal|null
operator|&&
name|lit
operator|.
name|getClass
argument_list|()
operator|!=
name|valueCls
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wrong value class item "
operator|+
name|lit
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" for "
operator|+
name|type
operator|+
literal|"."
operator|+
name|operator
operator|+
literal|" leaf"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Operator
name|getOperator
parameter_list|()
block|{
return|return
name|operator
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|()
block|{
return|return
name|columnName
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getLiteral
parameter_list|()
block|{
comment|// To get around a kryo 2.22 bug while deserialize a Timestamp into Date
comment|// (https://github.com/EsotericSoftware/kryo/issues/88)
comment|// When we see a Date, convert back into Timestamp
if|if
condition|(
name|literal
operator|instanceof
name|java
operator|.
name|util
operator|.
name|Date
condition|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
operator|(
operator|(
name|java
operator|.
name|util
operator|.
name|Date
operator|)
name|literal
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
return|return
name|literal
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getLiteralList
parameter_list|()
block|{
return|return
name|literalList
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|operator
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
if|if
condition|(
name|literal
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|literal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|literalList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|lit
range|:
name|literalList
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|lit
operator|==
literal|null
condition|?
literal|"null"
else|:
name|lit
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isEqual
parameter_list|(
name|Object
name|left
parameter_list|,
name|Object
name|right
parameter_list|)
block|{
return|return
name|left
operator|==
name|right
operator|||
operator|(
name|left
operator|!=
literal|null
operator|&&
name|right
operator|!=
literal|null
operator|&&
name|left
operator|.
name|equals
argument_list|(
name|right
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|PredicateLeafImpl
name|o
init|=
operator|(
name|PredicateLeafImpl
operator|)
name|other
decl_stmt|;
return|return
name|operator
operator|==
name|o
operator|.
name|operator
operator|&&
name|type
operator|==
name|o
operator|.
name|type
operator|&&
name|columnName
operator|.
name|equals
argument_list|(
name|o
operator|.
name|columnName
argument_list|)
operator|&&
name|isEqual
argument_list|(
name|literal
argument_list|,
name|o
operator|.
name|literal
argument_list|)
operator|&&
name|isEqual
argument_list|(
name|literalList
argument_list|,
name|o
operator|.
name|literalList
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|operator
operator|.
name|hashCode
argument_list|()
operator|+
name|type
operator|.
name|hashCode
argument_list|()
operator|*
literal|17
operator|+
name|columnName
operator|.
name|hashCode
argument_list|()
operator|*
literal|3
operator|*
literal|17
operator|+
operator|(
name|literal
operator|==
literal|null
condition|?
literal|0
else|:
name|literal
operator|.
name|hashCode
argument_list|()
operator|)
operator|*
literal|101
operator|*
literal|3
operator|*
literal|17
operator|+
operator|(
name|literalList
operator|==
literal|null
condition|?
literal|0
else|:
name|literalList
operator|.
name|hashCode
argument_list|()
operator|)
operator|*
literal|103
operator|*
literal|101
operator|*
literal|3
operator|*
literal|17
return|;
block|}
block|}
specifier|private
specifier|final
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leaves
decl_stmt|;
specifier|private
specifier|final
name|ExpressionTree
name|expression
decl_stmt|;
name|SearchArgumentImpl
parameter_list|(
name|ExpressionTree
name|expression
parameter_list|,
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|leaves
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|leaves
operator|=
name|leaves
expr_stmt|;
block|}
comment|// Used by kyro
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|SearchArgumentImpl
parameter_list|()
block|{
name|leaves
operator|=
literal|null
expr_stmt|;
name|expression
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|PredicateLeaf
argument_list|>
name|getLeaves
parameter_list|()
block|{
return|return
name|leaves
return|;
block|}
annotation|@
name|Override
specifier|public
name|TruthValue
name|evaluate
parameter_list|(
name|TruthValue
index|[]
name|leaves
parameter_list|)
block|{
return|return
name|expression
operator|==
literal|null
condition|?
name|TruthValue
operator|.
name|YES
else|:
name|expression
operator|.
name|evaluate
argument_list|(
name|leaves
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExpressionTree
name|getExpression
parameter_list|()
block|{
return|return
name|expression
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leaves
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"leaf-"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"expr = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|expression
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|static
class|class
name|BuilderImpl
implements|implements
name|Builder
block|{
comment|// max threshold for CNF conversion. having>8 elements in andList will be
comment|// converted to maybe
specifier|private
specifier|static
specifier|final
name|int
name|CNF_COMBINATIONS_THRESHOLD
init|=
literal|256
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|ExpressionTree
argument_list|>
name|currentTree
init|=
operator|new
name|ArrayDeque
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|PredicateLeaf
argument_list|,
name|Integer
argument_list|>
name|leaves
init|=
operator|new
name|HashMap
argument_list|<
name|PredicateLeaf
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ExpressionTree
name|root
init|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
argument_list|)
decl_stmt|;
block|{
name|currentTree
operator|.
name|add
parameter_list|(
name|root
parameter_list|)
constructor_decl|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|startOr
parameter_list|()
block|{
name|ExpressionTree
name|node
init|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
argument_list|)
decl_stmt|;
name|currentTree
operator|.
name|getFirst
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|currentTree
operator|.
name|addFirst
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|startAnd
parameter_list|()
block|{
name|ExpressionTree
name|node
init|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
argument_list|)
decl_stmt|;
name|currentTree
operator|.
name|getFirst
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|currentTree
operator|.
name|addFirst
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|startNot
parameter_list|()
block|{
name|ExpressionTree
name|node
init|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
argument_list|)
decl_stmt|;
name|currentTree
operator|.
name|getFirst
argument_list|()
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|currentTree
operator|.
name|addFirst
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|end
parameter_list|()
block|{
name|ExpressionTree
name|current
init|=
name|currentTree
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't create expression "
operator|+
name|root
operator|+
literal|" with no children."
argument_list|)
throw|;
block|}
if|if
condition|(
name|current
operator|.
name|getOperator
argument_list|()
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
operator|&&
name|current
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't create not expression "
operator|+
name|current
operator|+
literal|" with more than 1 child."
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
specifier|private
name|int
name|addLeaf
parameter_list|(
name|PredicateLeaf
name|leaf
parameter_list|)
block|{
name|Integer
name|result
init|=
name|leaves
operator|.
name|get
argument_list|(
name|leaf
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|int
name|id
init|=
name|leaves
operator|.
name|size
argument_list|()
decl_stmt|;
name|leaves
operator|.
name|put
argument_list|(
name|leaf
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|lessThan
parameter_list|(
name|String
name|column
parameter_list|,
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|,
name|Object
name|literal
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|null
operator|||
name|literal
operator|==
literal|null
condition|)
block|{
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN
argument_list|,
name|type
argument_list|,
name|column
argument_list|,
name|literal
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|addLeaf
argument_list|(
name|leaf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|lessThanEquals
parameter_list|(
name|String
name|column
parameter_list|,
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|,
name|Object
name|literal
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|null
operator|||
name|literal
operator|==
literal|null
condition|)
block|{
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|LESS_THAN_EQUALS
argument_list|,
name|type
argument_list|,
name|column
argument_list|,
name|literal
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|addLeaf
argument_list|(
name|leaf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|equals
parameter_list|(
name|String
name|column
parameter_list|,
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|,
name|Object
name|literal
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|null
operator|||
name|literal
operator|==
literal|null
condition|)
block|{
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|EQUALS
argument_list|,
name|type
argument_list|,
name|column
argument_list|,
name|literal
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|addLeaf
argument_list|(
name|leaf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|nullSafeEquals
parameter_list|(
name|String
name|column
parameter_list|,
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|,
name|Object
name|literal
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|null
operator|||
name|literal
operator|==
literal|null
condition|)
block|{
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|NULL_SAFE_EQUALS
argument_list|,
name|type
argument_list|,
name|column
argument_list|,
name|literal
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|addLeaf
argument_list|(
name|leaf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|in
parameter_list|(
name|String
name|column
parameter_list|,
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|,
name|Object
modifier|...
name|literal
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|null
operator|||
name|literal
operator|==
literal|null
condition|)
block|{
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|literal
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't create in expression with "
operator|+
literal|"no arguments"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|argList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|literal
argument_list|)
argument_list|)
expr_stmt|;
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IN
argument_list|,
name|type
argument_list|,
name|column
argument_list|,
literal|null
argument_list|,
name|argList
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|addLeaf
argument_list|(
name|leaf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|isNull
parameter_list|(
name|String
name|column
parameter_list|,
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|null
condition|)
block|{
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|IS_NULL
argument_list|,
name|type
argument_list|,
name|column
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|addLeaf
argument_list|(
name|leaf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|between
parameter_list|(
name|String
name|column
parameter_list|,
name|PredicateLeaf
operator|.
name|Type
name|type
parameter_list|,
name|Object
name|lower
parameter_list|,
name|Object
name|upper
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|null
operator|||
name|lower
operator|==
literal|null
operator|||
name|upper
operator|==
literal|null
condition|)
block|{
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|lower
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|upper
argument_list|)
expr_stmt|;
name|PredicateLeaf
name|leaf
init|=
operator|new
name|PredicateLeafImpl
argument_list|(
name|PredicateLeaf
operator|.
name|Operator
operator|.
name|BETWEEN
argument_list|,
name|type
argument_list|,
name|column
argument_list|,
literal|null
argument_list|,
name|argList
argument_list|)
decl_stmt|;
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|addLeaf
argument_list|(
name|leaf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Builder
name|literal
parameter_list|(
name|TruthValue
name|truth
parameter_list|)
block|{
name|ExpressionTree
name|parent
init|=
name|currentTree
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|truth
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Recursively explore the tree to find the leaves that are still reachable      * after optimizations.      * @param tree the node to check next      * @param next the next available leaf id      * @param leafReorder      * @return the next available leaf id      */
specifier|static
name|int
name|compactLeaves
parameter_list|(
name|ExpressionTree
name|tree
parameter_list|,
name|int
name|next
parameter_list|,
name|int
index|[]
name|leafReorder
parameter_list|)
block|{
if|if
condition|(
name|tree
operator|.
name|getOperator
argument_list|()
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|LEAF
condition|)
block|{
name|int
name|oldLeaf
init|=
name|tree
operator|.
name|getLeaf
argument_list|()
decl_stmt|;
if|if
condition|(
name|leafReorder
index|[
name|oldLeaf
index|]
operator|==
operator|-
literal|1
condition|)
block|{
name|leafReorder
index|[
name|oldLeaf
index|]
operator|=
name|next
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tree
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExpressionTree
name|child
range|:
name|tree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|next
operator|=
name|compactLeaves
argument_list|(
name|child
argument_list|,
name|next
argument_list|,
name|leafReorder
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|next
return|;
block|}
comment|/**      * Rewrite expression tree to update the leaves.      * @param root the root of the tree to fix      * @param leafReorder a map from old leaf ids to new leaf ids      * @return the fixed root      */
specifier|static
name|ExpressionTree
name|rewriteLeaves
parameter_list|(
name|ExpressionTree
name|root
parameter_list|,
name|int
index|[]
name|leafReorder
parameter_list|)
block|{
if|if
condition|(
name|root
operator|.
name|getOperator
argument_list|()
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|LEAF
condition|)
block|{
return|return
operator|new
name|ExpressionTree
argument_list|(
name|leafReorder
index|[
name|root
operator|.
name|getLeaf
argument_list|()
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|root
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|children
init|=
name|root
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|children
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|rewriteLeaves
argument_list|(
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|leafReorder
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|root
return|;
block|}
annotation|@
name|Override
specifier|public
name|SearchArgument
name|build
parameter_list|()
block|{
if|if
condition|(
name|currentTree
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed to end "
operator|+
name|currentTree
operator|.
name|size
argument_list|()
operator|+
literal|" operations."
argument_list|)
throw|;
block|}
name|ExpressionTree
name|optimized
init|=
name|pushDownNot
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|optimized
operator|=
name|foldMaybe
argument_list|(
name|optimized
argument_list|)
expr_stmt|;
name|optimized
operator|=
name|flatten
argument_list|(
name|optimized
argument_list|)
expr_stmt|;
name|optimized
operator|=
name|convertToCNF
argument_list|(
name|optimized
argument_list|)
expr_stmt|;
name|optimized
operator|=
name|flatten
argument_list|(
name|optimized
argument_list|)
expr_stmt|;
name|int
name|leafReorder
index|[]
init|=
operator|new
name|int
index|[
name|leaves
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|leafReorder
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|newLeafCount
init|=
name|compactLeaves
argument_list|(
name|optimized
argument_list|,
literal|0
argument_list|,
name|leafReorder
argument_list|)
decl_stmt|;
name|optimized
operator|=
name|rewriteLeaves
argument_list|(
name|optimized
argument_list|,
name|leafReorder
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|PredicateLeaf
argument_list|>
name|leafList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|newLeafCount
argument_list|)
decl_stmt|;
comment|// expand list to correct size
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newLeafCount
condition|;
operator|++
name|i
control|)
block|{
name|leafList
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// build the new list
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|PredicateLeaf
argument_list|,
name|Integer
argument_list|>
name|elem
range|:
name|leaves
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|newLoc
init|=
name|leafReorder
index|[
name|elem
operator|.
name|getValue
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|newLoc
operator|!=
operator|-
literal|1
condition|)
block|{
name|leafList
operator|.
name|set
argument_list|(
name|newLoc
argument_list|,
name|elem
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SearchArgumentImpl
argument_list|(
name|optimized
argument_list|,
name|leafList
argument_list|)
return|;
block|}
comment|/**      * Push the negations all the way to just before the leaves. Also remove      * double negatives.      * @param root the expression to normalize      * @return the normalized expression, which may share some or all of the      * nodes of the original expression.      */
specifier|static
name|ExpressionTree
name|pushDownNot
parameter_list|(
name|ExpressionTree
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|.
name|getOperator
argument_list|()
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
condition|)
block|{
name|ExpressionTree
name|child
init|=
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|NOT
case|:
return|return
name|pushDownNot
argument_list|(
name|child
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|CONSTANT
case|:
return|return
operator|new
name|ExpressionTree
argument_list|(
name|child
operator|.
name|getConstant
argument_list|()
operator|.
name|not
argument_list|()
argument_list|)
return|;
case|case
name|AND
case|:
name|root
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|kid
range|:
name|child
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|pushDownNot
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
argument_list|,
name|kid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OR
case|:
name|root
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|kid
range|:
name|child
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|pushDownNot
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
argument_list|,
name|kid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
comment|// for leaf, we don't do anything
default|default:
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|root
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// iterate through children and push down not for each one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|pushDownNot
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|root
return|;
block|}
comment|/**      * Remove MAYBE values from the expression. If they are in an AND operator,      * they are dropped. If they are in an OR operator, they kill their parent.      * This assumes that pushDownNot has already been called.      * @param expr The expression to clean up      * @return The cleaned up expression      */
specifier|static
name|ExpressionTree
name|foldMaybe
parameter_list|(
name|ExpressionTree
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ExpressionTree
name|child
init|=
name|foldMaybe
argument_list|(
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getConstant
argument_list|()
operator|==
name|TruthValue
operator|.
name|YES_NO_NULL
condition|)
block|{
switch|switch
condition|(
name|expr
operator|.
name|getOperator
argument_list|()
condition|)
block|{
case|case
name|AND
case|:
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|i
operator|-=
literal|1
expr_stmt|;
break|break;
case|case
name|OR
case|:
comment|// a maybe will kill the or condition
return|return
name|child
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Got a maybe as child of "
operator|+
name|expr
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expr
operator|.
name|getChildren
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
return|;
block|}
block|}
return|return
name|expr
return|;
block|}
comment|/**      * Converts multi-level ands and ors into single level ones.      * @param root the expression to flatten      * @return the flattened expression, which will always be root with      *   potentially modified children.      */
specifier|static
name|ExpressionTree
name|flatten
parameter_list|(
name|ExpressionTree
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// iterate through the index, so that if we add more children,
comment|// they don't get re-visited
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ExpressionTree
name|child
init|=
name|flatten
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
comment|// do we need to flatten?
if|if
condition|(
name|child
operator|.
name|getOperator
argument_list|()
operator|==
name|root
operator|.
name|getOperator
argument_list|()
operator|&&
name|child
operator|.
name|getOperator
argument_list|()
operator|!=
name|ExpressionTree
operator|.
name|Operator
operator|.
name|NOT
condition|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExpressionTree
name|grandkid
range|:
name|child
operator|.
name|getChildren
argument_list|()
control|)
block|{
comment|// for the first grandkid replace the original parent
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|grandkid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|++
name|i
argument_list|,
name|grandkid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if we have a singleton AND or OR, just return the child
if|if
condition|(
operator|(
name|root
operator|.
name|getOperator
argument_list|()
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
operator|||
name|root
operator|.
name|getOperator
argument_list|()
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
operator|)
operator|&&
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
return|return
name|root
return|;
block|}
comment|/**      * Generate all combinations of items on the andList. For each item on the      * andList, it generates all combinations of one child from each and      * expression. Thus, (and a b) (and c d) will be expanded to: (or a c)      * (or a d) (or b c) (or b d). If there are items on the nonAndList, they      * are added to each or expression.      * @param result a list to put the results onto      * @param andList a list of and expressions      * @param nonAndList a list of non-and expressions      */
specifier|private
specifier|static
name|void
name|generateAllCombinations
parameter_list|(
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|result
parameter_list|,
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|andList
parameter_list|,
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|nonAndList
parameter_list|)
block|{
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|kids
init|=
name|andList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildren
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ExpressionTree
name|kid
range|:
name|kids
control|)
block|{
name|ExpressionTree
name|or
init|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|or
argument_list|)
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|node
range|:
name|nonAndList
control|)
block|{
name|or
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ExpressionTree
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|or
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|kid
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|work
init|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ExpressionTree
name|kid
range|:
name|kids
control|)
block|{
for|for
control|(
name|ExpressionTree
name|or
range|:
name|work
control|)
block|{
name|ExpressionTree
name|copy
init|=
operator|new
name|ExpressionTree
argument_list|(
name|or
argument_list|)
decl_stmt|;
name|copy
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|kid
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|andList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|generateAllCombinations
argument_list|(
name|result
argument_list|,
name|andList
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|andList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|nonAndList
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convert an expression so that the top level operator is AND with OR      * operators under it. This routine assumes that all of the NOT operators      * have been pushed to the leaves via pushdDownNot.      * @param root the expression      * @return the normalized expression      */
specifier|static
name|ExpressionTree
name|convertToCNF
parameter_list|(
name|ExpressionTree
name|root
parameter_list|)
block|{
if|if
condition|(
name|root
operator|.
name|getChildren
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// convert all of the children to CNF
name|int
name|size
init|=
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|convertToCNF
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|.
name|getOperator
argument_list|()
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
condition|)
block|{
comment|// a list of leaves that weren't under AND expressions
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|nonAndList
init|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|()
decl_stmt|;
comment|// a list of AND expressions that we need to distribute
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|andList
init|=
operator|new
name|ArrayList
argument_list|<
name|ExpressionTree
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExpressionTree
name|child
range|:
name|root
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getOperator
argument_list|()
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
condition|)
block|{
name|andList
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|.
name|getOperator
argument_list|()
operator|==
name|ExpressionTree
operator|.
name|Operator
operator|.
name|OR
condition|)
block|{
comment|// pull apart the kids of the OR expression
for|for
control|(
name|ExpressionTree
name|grandkid
range|:
name|child
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|nonAndList
operator|.
name|add
argument_list|(
name|grandkid
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|nonAndList
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|andList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|checkCombinationsThreshold
argument_list|(
name|andList
argument_list|)
condition|)
block|{
name|root
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|ExpressionTree
operator|.
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|generateAllCombinations
argument_list|(
name|root
operator|.
name|getChildren
argument_list|()
argument_list|,
name|andList
argument_list|,
name|nonAndList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|root
operator|=
operator|new
name|ExpressionTree
argument_list|(
name|TruthValue
operator|.
name|YES_NO_NULL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|root
return|;
block|}
specifier|private
specifier|static
name|boolean
name|checkCombinationsThreshold
parameter_list|(
name|List
argument_list|<
name|ExpressionTree
argument_list|>
name|andList
parameter_list|)
block|{
name|int
name|numComb
init|=
literal|1
decl_stmt|;
for|for
control|(
name|ExpressionTree
name|tree
range|:
name|andList
control|)
block|{
name|numComb
operator|*=
name|tree
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|numComb
operator|>
name|CNF_COMBINATIONS_THRESHOLD
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

