begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_comment
comment|/**   */
end_comment

begin_class
specifier|public
class|class
name|Decimal64ColumnVector
extends|extends
name|LongColumnVector
block|{
specifier|public
name|short
name|scale
decl_stmt|;
specifier|public
name|short
name|precision
decl_stmt|;
specifier|private
name|HiveDecimalWritable
name|scratchHiveDecWritable
decl_stmt|;
specifier|public
name|Decimal64ColumnVector
parameter_list|(
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|this
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Decimal64ColumnVector
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
operator|(
name|short
operator|)
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
operator|(
name|short
operator|)
name|scale
expr_stmt|;
name|scratchHiveDecWritable
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set a Decimal64 field from a HiveDecimalWritable.    *    * This is a FAST version that assumes the caller has checked to make sure the writable    * is not null and elementNum is correctly adjusted for isRepeating.  And, that the isNull entry    * has been set.    *    * We will check for precision/scale range, so the entry's NULL may get set.    * Otherwise, only the output entry fields will be set by this method.    *    * @param elementNum    * @param writable    */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|HiveDecimalWritable
name|writable
parameter_list|)
block|{
name|scratchHiveDecWritable
operator|.
name|set
argument_list|(
name|writable
argument_list|)
expr_stmt|;
name|scratchHiveDecWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scratchHiveDecWritable
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|noNulls
operator|=
literal|false
expr_stmt|;
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|vector
index|[
name|elementNum
index|]
operator|=
name|scratchHiveDecWritable
operator|.
name|serialize64
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set a Decimal64 field from a HiveDecimal.    *    * This is a FAST version that assumes the caller has checked to make sure the hiveDec    * is not null and elementNum is correctly adjusted for isRepeating.  And, that the isNull entry    * has been set.    *    * We will check for precision/scale range, so the entry's NULL may get set.    * Otherwise, only the output entry fields will be set by this method.    *    * @param elementNum    * @param hiveDec    */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|HiveDecimal
name|hiveDec
parameter_list|)
block|{
name|scratchHiveDecWritable
operator|.
name|set
argument_list|(
name|hiveDec
argument_list|)
expr_stmt|;
name|scratchHiveDecWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scratchHiveDecWritable
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|noNulls
operator|=
literal|false
expr_stmt|;
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|vector
index|[
name|elementNum
index|]
operator|=
name|scratchHiveDecWritable
operator|.
name|serialize64
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the element in this column vector from the given input vector.    *    * The inputElementNum will be adjusted to 0 if the input column has isRepeating set.    *    * On the other hand, the outElementNum must have been adjusted to 0 in ADVANCE when the output    * has isRepeating set.    *    * IMPORTANT: if the output entry is marked as NULL, this method will do NOTHING.  This    * supports the caller to do output NULL processing in advance that may cause the output results    * operation to be ignored.  Thus, make sure the output isNull entry is set in ADVANCE.    *    * The inputColVector noNulls and isNull entry will be examined.  The output will only    * be set if the input is NOT NULL.  I.e. noNulls || !isNull[inputElementNum] where    * inputElementNum may have been adjusted to 0 for isRepeating.    *    * If the input entry is NULL or out-of-range, the output will be marked as NULL.    * I.e. set output noNull = false and isNull[outElementNum] = true.  An example of out-of-range    * is the DecimalColumnVector which can find the input decimal does not fit in the output    * precision/scale.    *    * (Since we return immediately if the output entry is NULL, we have no need and do not mark    * the output entry to NOT NULL).    *    */
annotation|@
name|Override
specifier|public
name|void
name|setElement
parameter_list|(
name|int
name|outputElementNum
parameter_list|,
name|int
name|inputElementNum
parameter_list|,
name|ColumnVector
name|inputColVector
parameter_list|)
block|{
comment|// Invariants.
if|if
condition|(
name|isRepeating
operator|&&
name|outputElementNum
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Output column number expected to be 0 when isRepeating"
argument_list|)
throw|;
block|}
if|if
condition|(
name|inputColVector
operator|.
name|isRepeating
condition|)
block|{
name|inputElementNum
operator|=
literal|0
expr_stmt|;
block|}
comment|// Do NOTHING if output is NULL.
if|if
condition|(
operator|!
name|noNulls
operator|&&
name|isNull
index|[
name|outputElementNum
index|]
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|inputColVector
operator|.
name|noNulls
operator|||
operator|!
name|inputColVector
operator|.
name|isNull
index|[
name|inputElementNum
index|]
condition|)
block|{
name|Decimal64ColumnVector
name|decimal64ColVector
init|=
operator|(
name|Decimal64ColumnVector
operator|)
name|inputColVector
decl_stmt|;
name|scratchHiveDecWritable
operator|.
name|deserialize64
argument_list|(
name|decimal64ColVector
operator|.
name|vector
index|[
name|inputElementNum
index|]
argument_list|,
name|decimal64ColVector
operator|.
name|scale
argument_list|)
expr_stmt|;
name|scratchHiveDecWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
name|scratchHiveDecWritable
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|vector
index|[
name|inputElementNum
index|]
operator|=
name|scratchHiveDecWritable
operator|.
name|serialize64
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// In effect, the input is NULL because of out-of-range precision/scale.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|isNull
index|[
name|inputElementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Only mark output NULL when input is NULL.
name|isNull
index|[
name|outputElementNum
index|]
operator|=
literal|true
expr_stmt|;
name|noNulls
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Return a convenience writable object stored by this column vector.    * @return    */
specifier|public
name|HiveDecimalWritable
name|getScratchWritable
parameter_list|()
block|{
return|return
name|scratchHiveDecWritable
return|;
block|}
block|}
end_class

end_unit

