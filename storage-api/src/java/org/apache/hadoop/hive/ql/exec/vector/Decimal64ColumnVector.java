begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_comment
comment|/**   */
end_comment

begin_class
specifier|public
class|class
name|Decimal64ColumnVector
extends|extends
name|LongColumnVector
block|{
specifier|public
name|short
name|scale
decl_stmt|;
specifier|public
name|short
name|precision
decl_stmt|;
specifier|private
name|HiveDecimalWritable
name|tempHiveDecWritable
decl_stmt|;
specifier|public
name|Decimal64ColumnVector
parameter_list|(
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|this
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Decimal64ColumnVector
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
operator|(
name|short
operator|)
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
operator|(
name|short
operator|)
name|scale
expr_stmt|;
name|tempHiveDecWritable
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|HiveDecimalWritable
name|writable
parameter_list|)
block|{
name|tempHiveDecWritable
operator|.
name|set
argument_list|(
name|writable
argument_list|)
expr_stmt|;
name|tempHiveDecWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tempHiveDecWritable
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|noNulls
operator|=
literal|false
expr_stmt|;
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|false
expr_stmt|;
name|vector
index|[
name|elementNum
index|]
operator|=
name|tempHiveDecWritable
operator|.
name|serialize64
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|set
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|HiveDecimal
name|hiveDec
parameter_list|)
block|{
name|tempHiveDecWritable
operator|.
name|set
argument_list|(
name|hiveDec
argument_list|)
expr_stmt|;
name|tempHiveDecWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tempHiveDecWritable
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|noNulls
operator|=
literal|false
expr_stmt|;
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|false
expr_stmt|;
name|vector
index|[
name|elementNum
index|]
operator|=
name|tempHiveDecWritable
operator|.
name|serialize64
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

