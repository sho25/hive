begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * This class represents a nullable timestamp column vector capable of handing a wide range of  * timestamp values.  *  * We store the 2 (value) fields of a Timestamp class in primitive arrays.  *  * We do this to avoid an array of Java Timestamp objects which would have poor storage  * and memory access characteristics.  *  * Generally, the caller will fill in a scratch timestamp object with values from a row, work  * using the scratch timestamp, and then perhaps update the column vector row with a result.  */
end_comment

begin_class
specifier|public
class|class
name|TimestampColumnVector
extends|extends
name|ColumnVector
block|{
comment|/*    * The storage arrays for this column vector corresponds to the storage of a Timestamp:    */
specifier|public
name|long
index|[]
name|time
decl_stmt|;
comment|// The values from Timestamp.getTime().
specifier|public
name|int
index|[]
name|nanos
decl_stmt|;
comment|// The values from Timestamp.getNanos().
comment|/*    * Scratch objects.    */
specifier|private
specifier|final
name|Timestamp
name|scratchTimestamp
decl_stmt|;
specifier|private
name|Writable
name|scratchWritable
decl_stmt|;
comment|// Supports keeping a TimestampWritable object without having to import that definition...
comment|/**    * Use this constructor by default. All column vectors    * should normally be the default size.    */
specifier|public
name|TimestampColumnVector
parameter_list|()
block|{
name|this
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Don't use this except for testing purposes.    *    * @param len the number of rows    */
specifier|public
name|TimestampColumnVector
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|super
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|time
operator|=
operator|new
name|long
index|[
name|len
index|]
expr_stmt|;
name|nanos
operator|=
operator|new
name|int
index|[
name|len
index|]
expr_stmt|;
name|scratchTimestamp
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|scratchWritable
operator|=
literal|null
expr_stmt|;
comment|// Allocated by caller.
block|}
comment|/**    * Return the number of rows.    * @return    */
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|time
operator|.
name|length
return|;
block|}
comment|/**    * Return a row's Timestamp.getTime() value.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return    */
specifier|public
name|long
name|getTime
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
return|return
name|time
index|[
name|elementNum
index|]
return|;
block|}
comment|/**    * Return a row's Timestamp.getNanos() value.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return    */
specifier|public
name|int
name|getNanos
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
return|return
name|nanos
index|[
name|elementNum
index|]
return|;
block|}
comment|/**    * Set a Timestamp object from a row of the column.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param timestamp    * @param elementNum    */
specifier|public
name|void
name|timestampUpdate
parameter_list|(
name|Timestamp
name|timestamp
parameter_list|,
name|int
name|elementNum
parameter_list|)
block|{
name|timestamp
operator|.
name|setTime
argument_list|(
name|time
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
name|timestamp
operator|.
name|setNanos
argument_list|(
name|nanos
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the scratch Timestamp object set from a row.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return    */
specifier|public
name|Timestamp
name|asScratchTimestamp
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|scratchTimestamp
operator|.
name|setTime
argument_list|(
name|time
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
name|scratchTimestamp
operator|.
name|setNanos
argument_list|(
name|nanos
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
return|return
name|scratchTimestamp
return|;
block|}
comment|/**    * Return the scratch timestamp (contents undefined).    * @return    */
specifier|public
name|Timestamp
name|getScratchTimestamp
parameter_list|()
block|{
return|return
name|scratchTimestamp
return|;
block|}
comment|/**    * Return a long representation of a Timestamp.    * @param elementNum    * @return    */
specifier|public
name|long
name|getTimestampAsLong
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|scratchTimestamp
operator|.
name|setTime
argument_list|(
name|time
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
name|scratchTimestamp
operator|.
name|setNanos
argument_list|(
name|nanos
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
return|return
name|getTimestampAsLong
argument_list|(
name|scratchTimestamp
argument_list|)
return|;
block|}
comment|/**    * Return a long representation of a Timestamp.    * @param timestamp    * @return    */
specifier|public
specifier|static
name|long
name|getTimestampAsLong
parameter_list|(
name|Timestamp
name|timestamp
parameter_list|)
block|{
return|return
name|millisToSeconds
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
comment|// Copy of TimestampWritable.millisToSeconds
comment|/**    * Rounds the number of milliseconds relative to the epoch down to the nearest whole number of    * seconds. 500 would round to 0, -500 would round to -1.    */
specifier|private
specifier|static
name|long
name|millisToSeconds
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
if|if
condition|(
name|millis
operator|>=
literal|0
condition|)
block|{
return|return
name|millis
operator|/
literal|1000
return|;
block|}
else|else
block|{
return|return
operator|(
name|millis
operator|-
literal|999
operator|)
operator|/
literal|1000
return|;
block|}
block|}
comment|/**    * Return a double representation of a Timestamp.    * @param elementNum    * @return    */
specifier|public
name|double
name|getDouble
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|scratchTimestamp
operator|.
name|setTime
argument_list|(
name|time
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
name|scratchTimestamp
operator|.
name|setNanos
argument_list|(
name|nanos
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
return|return
name|getDouble
argument_list|(
name|scratchTimestamp
argument_list|)
return|;
block|}
comment|/**    * Return a double representation of a Timestamp.    * @param timestamp    * @return    */
specifier|public
specifier|static
name|double
name|getDouble
parameter_list|(
name|Timestamp
name|timestamp
parameter_list|)
block|{
comment|// Same algorithm as TimestampWritable (not currently import-able here).
name|double
name|seconds
decl_stmt|,
name|nanos
decl_stmt|;
name|seconds
operator|=
name|millisToSeconds
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|nanos
operator|=
name|timestamp
operator|.
name|getNanos
argument_list|()
expr_stmt|;
return|return
name|seconds
operator|+
name|nanos
operator|/
literal|1000000000
return|;
block|}
comment|/**    * Compare row to Timestamp.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @param timestamp    * @return -1, 0, 1 standard compareTo values.    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
block|{
return|return
name|asScratchTimestamp
argument_list|(
name|elementNum
argument_list|)
operator|.
name|compareTo
argument_list|(
name|timestamp
argument_list|)
return|;
block|}
comment|/**    * Compare Timestamp to row.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param timestamp    * @param elementNum    * @return -1, 0, 1 standard compareTo values.    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Timestamp
name|timestamp
parameter_list|,
name|int
name|elementNum
parameter_list|)
block|{
return|return
name|timestamp
operator|.
name|compareTo
argument_list|(
name|asScratchTimestamp
argument_list|(
name|elementNum
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Compare a row to another TimestampColumnVector's row.    * @param elementNum1    * @param timestampColVector2    * @param elementNum2    * @return    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|int
name|elementNum1
parameter_list|,
name|TimestampColumnVector
name|timestampColVector2
parameter_list|,
name|int
name|elementNum2
parameter_list|)
block|{
return|return
name|asScratchTimestamp
argument_list|(
name|elementNum1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|timestampColVector2
operator|.
name|asScratchTimestamp
argument_list|(
name|elementNum2
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Compare another TimestampColumnVector's row to a row.    * @param timestampColVector1    * @param elementNum1    * @param elementNum2    * @return    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|TimestampColumnVector
name|timestampColVector1
parameter_list|,
name|int
name|elementNum1
parameter_list|,
name|int
name|elementNum2
parameter_list|)
block|{
return|return
name|timestampColVector1
operator|.
name|asScratchTimestamp
argument_list|(
name|elementNum1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|asScratchTimestamp
argument_list|(
name|elementNum2
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setElement
parameter_list|(
name|int
name|outElementNum
parameter_list|,
name|int
name|inputElementNum
parameter_list|,
name|ColumnVector
name|inputVector
parameter_list|)
block|{
name|TimestampColumnVector
name|timestampColVector
init|=
operator|(
name|TimestampColumnVector
operator|)
name|inputVector
decl_stmt|;
name|time
index|[
name|outElementNum
index|]
operator|=
name|timestampColVector
operator|.
name|time
index|[
name|inputElementNum
index|]
expr_stmt|;
name|nanos
index|[
name|outElementNum
index|]
operator|=
name|timestampColVector
operator|.
name|nanos
index|[
name|inputElementNum
index|]
expr_stmt|;
block|}
comment|// Simplify vector by brute-force flattening noNulls and isRepeating
comment|// This can be used to reduce combinatorial explosion of code paths in VectorExpressions
comment|// with many arguments.
specifier|public
name|void
name|flatten
parameter_list|(
name|boolean
name|selectedInUse
parameter_list|,
name|int
index|[]
name|sel
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|flattenPush
argument_list|()
expr_stmt|;
if|if
condition|(
name|isRepeating
condition|)
block|{
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|long
name|repeatFastTime
init|=
name|time
index|[
literal|0
index|]
decl_stmt|;
name|int
name|repeatNanos
init|=
name|nanos
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|time
index|[
name|i
index|]
operator|=
name|repeatFastTime
expr_stmt|;
name|nanos
index|[
name|i
index|]
operator|=
name|repeatNanos
expr_stmt|;
block|}
block|}
else|else
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|time
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|repeatFastTime
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|nanos
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|repeatNanos
argument_list|)
expr_stmt|;
block|}
name|flattenRepeatingNulls
argument_list|(
name|selectedInUse
argument_list|,
name|sel
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|flattenNoNulls
argument_list|(
name|selectedInUse
argument_list|,
name|sel
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set a row from a timestamp.    * We assume the entry has already been isRepeated adjusted.    * @param elementNum    * @param timestamp    */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
block|{
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|noNulls
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|isNull
index|[
name|elementNum
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|time
index|[
name|elementNum
index|]
operator|=
name|timestamp
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|nanos
index|[
name|elementNum
index|]
operator|=
name|timestamp
operator|.
name|getNanos
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set a row from the current value in the scratch timestamp.    * @param elementNum    */
specifier|public
name|void
name|setFromScratchTimestamp
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|this
operator|.
name|time
index|[
name|elementNum
index|]
operator|=
name|scratchTimestamp
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|nanos
index|[
name|elementNum
index|]
operator|=
name|scratchTimestamp
operator|.
name|getNanos
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set row to standard null value(s).    * We assume the entry has already been isRepeated adjusted.    * @param elementNum    */
specifier|public
name|void
name|setNullValue
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|time
index|[
name|elementNum
index|]
operator|=
literal|0
expr_stmt|;
name|nanos
index|[
name|elementNum
index|]
operator|=
literal|1
expr_stmt|;
block|}
comment|// Copy the current object contents into the output. Only copy selected entries,
comment|// as indicated by selectedInUse and the sel array.
specifier|public
name|void
name|copySelected
parameter_list|(
name|boolean
name|selectedInUse
parameter_list|,
name|int
index|[]
name|sel
parameter_list|,
name|int
name|size
parameter_list|,
name|TimestampColumnVector
name|output
parameter_list|)
block|{
comment|// Output has nulls if and only if input has nulls.
name|output
operator|.
name|noNulls
operator|=
name|noNulls
expr_stmt|;
name|output
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// Handle repeating case
if|if
condition|(
name|isRepeating
condition|)
block|{
name|output
operator|.
name|time
index|[
literal|0
index|]
operator|=
name|time
index|[
literal|0
index|]
expr_stmt|;
name|output
operator|.
name|nanos
index|[
literal|0
index|]
operator|=
name|nanos
index|[
literal|0
index|]
expr_stmt|;
name|output
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|isNull
index|[
literal|0
index|]
expr_stmt|;
name|output
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
return|return;
block|}
comment|// Handle normal case
comment|// Copy data values over
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|output
operator|.
name|time
index|[
name|i
index|]
operator|=
name|time
index|[
name|i
index|]
expr_stmt|;
name|output
operator|.
name|nanos
index|[
name|i
index|]
operator|=
name|nanos
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|time
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|time
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nanos
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|nanos
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|// Copy nulls over if needed
if|if
condition|(
operator|!
name|noNulls
condition|)
block|{
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|output
operator|.
name|isNull
index|[
name|i
index|]
operator|=
name|isNull
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|isNull
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|isNull
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Fill all the vector entries with a timestamp.    * @param timestamp    */
specifier|public
name|void
name|fill
parameter_list|(
name|Timestamp
name|timestamp
parameter_list|)
block|{
name|noNulls
operator|=
literal|true
expr_stmt|;
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|time
index|[
literal|0
index|]
operator|=
name|timestamp
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|nanos
index|[
literal|0
index|]
operator|=
name|timestamp
operator|.
name|getNanos
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return a convenience writable object stored by this column vector.    * Supports keeping a TimestampWritable object without having to import that definition...    * @return    */
specifier|public
name|Writable
name|getScratchWritable
parameter_list|()
block|{
return|return
name|scratchWritable
return|;
block|}
comment|/**    * Set the convenience writable object stored by this column vector    * @param scratchWritable    */
specifier|public
name|void
name|setScratchWritable
parameter_list|(
name|Writable
name|scratchWritable
parameter_list|)
block|{
name|this
operator|.
name|scratchWritable
operator|=
name|scratchWritable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stringifyValue
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|noNulls
operator|||
operator|!
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|scratchTimestamp
operator|.
name|setTime
argument_list|(
name|time
index|[
name|row
index|]
argument_list|)
expr_stmt|;
name|scratchTimestamp
operator|.
name|setNanos
argument_list|(
name|nanos
index|[
name|row
index|]
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|scratchTimestamp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|ensureSize
parameter_list|(
name|int
name|size
parameter_list|,
name|boolean
name|preserveData
parameter_list|)
block|{
name|super
operator|.
name|ensureSize
argument_list|(
name|size
argument_list|,
name|preserveData
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|<=
name|time
operator|.
name|length
condition|)
return|return;
name|long
index|[]
name|oldTime
init|=
name|time
decl_stmt|;
name|int
index|[]
name|oldNanos
init|=
name|nanos
decl_stmt|;
name|time
operator|=
operator|new
name|long
index|[
name|size
index|]
expr_stmt|;
name|nanos
operator|=
operator|new
name|int
index|[
name|size
index|]
expr_stmt|;
if|if
condition|(
name|preserveData
condition|)
block|{
if|if
condition|(
name|isRepeating
condition|)
block|{
name|time
index|[
literal|0
index|]
operator|=
name|oldTime
index|[
literal|0
index|]
expr_stmt|;
name|nanos
index|[
literal|0
index|]
operator|=
name|oldNanos
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|oldTime
argument_list|,
literal|0
argument_list|,
name|time
argument_list|,
literal|0
argument_list|,
name|oldTime
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oldNanos
argument_list|,
literal|0
argument_list|,
name|nanos
argument_list|,
literal|0
argument_list|,
name|oldNanos
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

