begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|PisaTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|ColumnVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|VectorizedRowBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class represents a nullable timestamp column vector capable of handing a wide range of  * timestamp values.  *  * We use the PisaTimestamp which is designed to be mutable and avoid the heavy memory allocation  * and CPU data cache miss costs.  */
end_comment

begin_class
specifier|public
class|class
name|TimestampColumnVector
extends|extends
name|ColumnVector
block|{
comment|/*    * The storage arrays for this column vector corresponds to the storage of a PisaTimestamp:    */
specifier|private
name|long
index|[]
name|epochDay
decl_stmt|;
comment|// An array of the number of days since 1970-01-01 (similar to Java 8 LocalDate).
specifier|private
name|long
index|[]
name|nanoOfDay
decl_stmt|;
comment|// An array of the number of nanoseconds within the day, with the range of
comment|// 0 to 24 * 60 * 60 * 1,000,000,000 - 1 (similar to Java 8 LocalTime).
comment|/*    * Scratch objects.    */
specifier|private
name|PisaTimestamp
name|scratchPisaTimestamp
decl_stmt|;
comment|// Convenience scratch Pisa timestamp object.
specifier|private
name|Writable
name|scratchWritable
decl_stmt|;
comment|// Supports keeping a TimestampWritable object without having to import that definition...
comment|/**    * Use this constructor by default. All column vectors    * should normally be the default size.    */
specifier|public
name|TimestampColumnVector
parameter_list|()
block|{
name|this
argument_list|(
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Don't use this except for testing purposes.    *    * @param len the number of rows    */
specifier|public
name|TimestampColumnVector
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|super
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|epochDay
operator|=
operator|new
name|long
index|[
name|len
index|]
expr_stmt|;
name|nanoOfDay
operator|=
operator|new
name|long
index|[
name|len
index|]
expr_stmt|;
name|scratchPisaTimestamp
operator|=
operator|new
name|PisaTimestamp
argument_list|()
expr_stmt|;
name|scratchWritable
operator|=
literal|null
expr_stmt|;
comment|// Allocated by caller.
block|}
comment|/**    * Return the number of rows.    * @return    */
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|epochDay
operator|.
name|length
return|;
block|}
comment|/**    * Returnt a row's epoch day.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return    */
specifier|public
name|long
name|getEpochDay
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
return|return
name|epochDay
index|[
name|elementNum
index|]
return|;
block|}
comment|/**    * Return a row's nano of day.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return    */
specifier|public
name|long
name|getNanoOfDay
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
return|return
name|nanoOfDay
index|[
name|elementNum
index|]
return|;
block|}
comment|/**    * Get a scratch PisaTimestamp object from a row of the column.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return scratch    */
specifier|public
name|PisaTimestamp
name|asScratchPisaTimestamp
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|scratchPisaTimestamp
operator|.
name|update
argument_list|(
name|epochDay
index|[
name|elementNum
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
return|return
name|scratchPisaTimestamp
return|;
block|}
comment|/**    * Set a PisaTimestamp object from a row of the column.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param pisaTimestamp    * @param elementNum    */
specifier|public
name|void
name|pisaTimestampUpdate
parameter_list|(
name|PisaTimestamp
name|pisaTimestamp
parameter_list|,
name|int
name|elementNum
parameter_list|)
block|{
name|pisaTimestamp
operator|.
name|update
argument_list|(
name|epochDay
index|[
name|elementNum
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set a Timestamp object from a row of the column.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param timestamp    * @param elementNum    */
specifier|public
name|void
name|timestampUpdate
parameter_list|(
name|Timestamp
name|timestamp
parameter_list|,
name|int
name|elementNum
parameter_list|)
block|{
name|scratchPisaTimestamp
operator|.
name|update
argument_list|(
name|epochDay
index|[
name|elementNum
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
name|scratchPisaTimestamp
operator|.
name|timestampUpdate
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compare row to PisaTimestamp.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @param pisaTimestamp    * @return -1, 0, 1 standard compareTo values.    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|PisaTimestamp
name|pisaTimestamp
parameter_list|)
block|{
return|return
name|PisaTimestamp
operator|.
name|compareTo
argument_list|(
name|epochDay
index|[
name|elementNum
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|,
name|pisaTimestamp
argument_list|)
return|;
block|}
comment|/**    * Compare PisaTimestamp to row.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param pisaTimestamp    * @param elementNum    * @return -1, 0, 1 standard compareTo values.    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|PisaTimestamp
name|pisaTimestamp
parameter_list|,
name|int
name|elementNum
parameter_list|)
block|{
return|return
name|PisaTimestamp
operator|.
name|compareTo
argument_list|(
name|pisaTimestamp
argument_list|,
name|epochDay
index|[
name|elementNum
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|)
return|;
block|}
comment|/**    * Compare a row to another TimestampColumnVector's row.    * @param elementNum1    * @param timestampColVector2    * @param elementNum2    * @return    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|int
name|elementNum1
parameter_list|,
name|TimestampColumnVector
name|timestampColVector2
parameter_list|,
name|int
name|elementNum2
parameter_list|)
block|{
return|return
name|PisaTimestamp
operator|.
name|compareTo
argument_list|(
name|epochDay
index|[
name|elementNum1
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum1
index|]
argument_list|,
name|timestampColVector2
operator|.
name|epochDay
index|[
name|elementNum2
index|]
argument_list|,
name|timestampColVector2
operator|.
name|nanoOfDay
index|[
name|elementNum2
index|]
argument_list|)
return|;
block|}
comment|/**    * Compare another TimestampColumnVector's row to a row.    * @param timestampColVector1    * @param elementNum1    * @param elementNum2    * @return    */
specifier|public
name|int
name|compareTo
parameter_list|(
name|TimestampColumnVector
name|timestampColVector1
parameter_list|,
name|int
name|elementNum1
parameter_list|,
name|int
name|elementNum2
parameter_list|)
block|{
return|return
name|PisaTimestamp
operator|.
name|compareTo
argument_list|(
name|timestampColVector1
operator|.
name|epochDay
index|[
name|elementNum1
index|]
argument_list|,
name|timestampColVector1
operator|.
name|nanoOfDay
index|[
name|elementNum1
index|]
argument_list|,
name|epochDay
index|[
name|elementNum2
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum2
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|PisaTimestamp
name|timestamp1
parameter_list|,
name|PisaTimestamp
name|timestamp2
parameter_list|,
name|int
name|resultElementNum
parameter_list|)
block|{
name|PisaTimestamp
operator|.
name|add
argument_list|(
name|timestamp1
argument_list|,
name|timestamp2
argument_list|,
name|scratchPisaTimestamp
argument_list|)
expr_stmt|;
name|epochDay
index|[
name|resultElementNum
index|]
operator|=
name|scratchPisaTimestamp
operator|.
name|getEpochDay
argument_list|()
expr_stmt|;
name|nanoOfDay
index|[
name|resultElementNum
index|]
operator|=
name|scratchPisaTimestamp
operator|.
name|getNanoOfDay
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|subtract
parameter_list|(
name|PisaTimestamp
name|timestamp1
parameter_list|,
name|PisaTimestamp
name|timestamp2
parameter_list|,
name|int
name|resultElementNum
parameter_list|)
block|{
name|PisaTimestamp
operator|.
name|subtract
argument_list|(
name|timestamp1
argument_list|,
name|timestamp2
argument_list|,
name|scratchPisaTimestamp
argument_list|)
expr_stmt|;
name|epochDay
index|[
name|resultElementNum
index|]
operator|=
name|scratchPisaTimestamp
operator|.
name|getEpochDay
argument_list|()
expr_stmt|;
name|nanoOfDay
index|[
name|resultElementNum
index|]
operator|=
name|scratchPisaTimestamp
operator|.
name|getNanoOfDay
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return row as a double with the integer part as the seconds and the fractional part as    * the nanoseconds the way the Timestamp class does it.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return seconds.nanoseconds    */
specifier|public
name|double
name|getTimestampSecondsWithFractionalNanos
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|scratchPisaTimestamp
operator|.
name|update
argument_list|(
name|epochDay
index|[
name|elementNum
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
return|return
name|scratchPisaTimestamp
operator|.
name|getTimestampSecondsWithFractionalNanos
argument_list|()
return|;
block|}
comment|/**    * Return row as integer as the seconds the way the Timestamp class does it.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return seconds    */
specifier|public
name|long
name|getTimestampSeconds
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|scratchPisaTimestamp
operator|.
name|update
argument_list|(
name|epochDay
index|[
name|elementNum
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
return|return
name|scratchPisaTimestamp
operator|.
name|getTimestampSeconds
argument_list|()
return|;
block|}
comment|/**    * Return row as milliseconds the way the Timestamp class does it.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return    */
specifier|public
name|long
name|getTimestampMilliseconds
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|scratchPisaTimestamp
operator|.
name|update
argument_list|(
name|epochDay
index|[
name|elementNum
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
return|return
name|scratchPisaTimestamp
operator|.
name|getTimestampMilliseconds
argument_list|()
return|;
block|}
comment|/**    * Return row as epoch seconds.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return    */
specifier|public
name|long
name|getEpochSeconds
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
return|return
name|PisaTimestamp
operator|.
name|getEpochSecondsFromEpochDayAndNanoOfDay
argument_list|(
name|epochDay
index|[
name|elementNum
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|)
return|;
block|}
comment|/**    * Return row as epoch milliseconds.    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return    */
specifier|public
name|long
name|getEpochMilliseconds
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
return|return
name|PisaTimestamp
operator|.
name|getEpochMillisecondsFromEpochDayAndNanoOfDay
argument_list|(
name|epochDay
index|[
name|elementNum
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|)
return|;
block|}
comment|/**    * Return row as signed nanos (-999999999 to 999999999).    * NOTE: This is not the same as the Timestamp class nanos (which is always positive).    * We assume the entry has already been NULL checked and isRepeated adjusted.    * @param elementNum    * @return    */
specifier|public
name|int
name|getSignedNanos
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
return|return
name|PisaTimestamp
operator|.
name|getSignedNanos
argument_list|(
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|)
return|;
block|}
comment|/**    * Get scratch timestamp with value of a row.    * @param elementNum    * @return    */
specifier|public
name|Timestamp
name|asScratchTimestamp
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|scratchPisaTimestamp
operator|.
name|update
argument_list|(
name|epochDay
index|[
name|elementNum
index|]
argument_list|,
name|nanoOfDay
index|[
name|elementNum
index|]
argument_list|)
expr_stmt|;
return|return
name|scratchPisaTimestamp
operator|.
name|asScratchTimestamp
argument_list|()
return|;
block|}
comment|/**    * Get scratch Pisa timestamp for use by the caller.    * @return    */
specifier|public
name|PisaTimestamp
name|useScratchPisaTimestamp
parameter_list|()
block|{
return|return
name|scratchPisaTimestamp
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setElement
parameter_list|(
name|int
name|outElementNum
parameter_list|,
name|int
name|inputElementNum
parameter_list|,
name|ColumnVector
name|inputVector
parameter_list|)
block|{
name|TimestampColumnVector
name|timestampColVector
init|=
operator|(
name|TimestampColumnVector
operator|)
name|inputVector
decl_stmt|;
name|epochDay
index|[
name|outElementNum
index|]
operator|=
name|timestampColVector
operator|.
name|epochDay
index|[
name|inputElementNum
index|]
expr_stmt|;
name|nanoOfDay
index|[
name|outElementNum
index|]
operator|=
name|timestampColVector
operator|.
name|nanoOfDay
index|[
name|inputElementNum
index|]
expr_stmt|;
block|}
comment|// Simplify vector by brute-force flattening noNulls and isRepeating
comment|// This can be used to reduce combinatorial explosion of code paths in VectorExpressions
comment|// with many arguments.
specifier|public
name|void
name|flatten
parameter_list|(
name|boolean
name|selectedInUse
parameter_list|,
name|int
index|[]
name|sel
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|flattenPush
argument_list|()
expr_stmt|;
if|if
condition|(
name|isRepeating
condition|)
block|{
name|isRepeating
operator|=
literal|false
expr_stmt|;
name|long
name|repeatEpochDay
init|=
name|epochDay
index|[
literal|0
index|]
decl_stmt|;
name|long
name|repeatNanoOfDay
init|=
name|nanoOfDay
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|epochDay
index|[
name|i
index|]
operator|=
name|repeatEpochDay
expr_stmt|;
name|nanoOfDay
index|[
name|i
index|]
operator|=
name|repeatNanoOfDay
expr_stmt|;
block|}
block|}
else|else
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|epochDay
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|repeatEpochDay
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|nanoOfDay
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|repeatNanoOfDay
argument_list|)
expr_stmt|;
block|}
name|flattenRepeatingNulls
argument_list|(
name|selectedInUse
argument_list|,
name|sel
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|flattenNoNulls
argument_list|(
name|selectedInUse
argument_list|,
name|sel
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set a row from a PisaTimestamp.    * We assume the entry has already been isRepeated adjusted.    * @param elementNum    * @param pisaTimestamp    */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|PisaTimestamp
name|pisaTimestamp
parameter_list|)
block|{
name|this
operator|.
name|epochDay
index|[
name|elementNum
index|]
operator|=
name|pisaTimestamp
operator|.
name|getEpochDay
argument_list|()
expr_stmt|;
name|this
operator|.
name|nanoOfDay
index|[
name|elementNum
index|]
operator|=
name|pisaTimestamp
operator|.
name|getNanoOfDay
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set a row from a timestamp.    * We assume the entry has already been isRepeated adjusted.    * @param elementNum    * @param timestamp    */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|Timestamp
name|timestamp
parameter_list|)
block|{
name|scratchPisaTimestamp
operator|.
name|updateFromTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|this
operator|.
name|epochDay
index|[
name|elementNum
index|]
operator|=
name|scratchPisaTimestamp
operator|.
name|getEpochDay
argument_list|()
expr_stmt|;
name|this
operator|.
name|nanoOfDay
index|[
name|elementNum
index|]
operator|=
name|scratchPisaTimestamp
operator|.
name|getNanoOfDay
argument_list|()
expr_stmt|;
block|}
comment|/**    * Set a row from a epoch seconds and signed nanos (-999999999 to 999999999).    * @param elementNum    * @param epochSeconds    * @param signedNanos    */
specifier|public
name|void
name|setEpochSecondsAndSignedNanos
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|long
name|epochSeconds
parameter_list|,
name|int
name|signedNanos
parameter_list|)
block|{
name|scratchPisaTimestamp
operator|.
name|updateFromEpochSecondsAndSignedNanos
argument_list|(
name|epochSeconds
argument_list|,
name|signedNanos
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|elementNum
argument_list|,
name|scratchPisaTimestamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set a row from timestamp milliseconds.    * We assume the entry has already been isRepeated adjusted.    * @param elementNum    * @param timestampMilliseconds    */
specifier|public
name|void
name|setTimestampMilliseconds
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|long
name|timestampMilliseconds
parameter_list|)
block|{
name|scratchPisaTimestamp
operator|.
name|updateFromTimestampMilliseconds
argument_list|(
name|timestampMilliseconds
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|elementNum
argument_list|,
name|scratchPisaTimestamp
operator|.
name|useScratchTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set a row from timestamp seconds.    * We assume the entry has already been isRepeated adjusted.    * @param elementNum    * @param timestamp    */
specifier|public
name|void
name|setTimestampSeconds
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|long
name|timestampSeconds
parameter_list|)
block|{
name|scratchPisaTimestamp
operator|.
name|updateFromTimestampSeconds
argument_list|(
name|timestampSeconds
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|elementNum
argument_list|,
name|scratchPisaTimestamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set a row from a double timestamp seconds with fractional nanoseconds.    * We assume the entry has already been isRepeated adjusted.    * @param elementNum    * @param timestamp    */
specifier|public
name|void
name|setTimestampSecondsWithFractionalNanoseconds
parameter_list|(
name|int
name|elementNum
parameter_list|,
name|double
name|secondsWithFractionalNanoseconds
parameter_list|)
block|{
name|scratchPisaTimestamp
operator|.
name|updateFromTimestampSecondsWithFractionalNanoseconds
argument_list|(
name|secondsWithFractionalNanoseconds
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|elementNum
argument_list|,
name|scratchPisaTimestamp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set row to standard null value(s).    * We assume the entry has already been isRepeated adjusted.    * @param elementNum    */
specifier|public
name|void
name|setNullValue
parameter_list|(
name|int
name|elementNum
parameter_list|)
block|{
name|epochDay
index|[
name|elementNum
index|]
operator|=
literal|0
expr_stmt|;
name|nanoOfDay
index|[
name|elementNum
index|]
operator|=
literal|1
expr_stmt|;
block|}
comment|// Copy the current object contents into the output. Only copy selected entries,
comment|// as indicated by selectedInUse and the sel array.
specifier|public
name|void
name|copySelected
parameter_list|(
name|boolean
name|selectedInUse
parameter_list|,
name|int
index|[]
name|sel
parameter_list|,
name|int
name|size
parameter_list|,
name|TimestampColumnVector
name|output
parameter_list|)
block|{
comment|// Output has nulls if and only if input has nulls.
name|output
operator|.
name|noNulls
operator|=
name|noNulls
expr_stmt|;
name|output
operator|.
name|isRepeating
operator|=
literal|false
expr_stmt|;
comment|// Handle repeating case
if|if
condition|(
name|isRepeating
condition|)
block|{
name|output
operator|.
name|epochDay
index|[
literal|0
index|]
operator|=
name|epochDay
index|[
literal|0
index|]
expr_stmt|;
name|output
operator|.
name|nanoOfDay
index|[
literal|0
index|]
operator|=
name|nanoOfDay
index|[
literal|0
index|]
expr_stmt|;
name|output
operator|.
name|isNull
index|[
literal|0
index|]
operator|=
name|isNull
index|[
literal|0
index|]
expr_stmt|;
name|output
operator|.
name|isRepeating
operator|=
literal|true
expr_stmt|;
return|return;
block|}
comment|// Handle normal case
comment|// Copy data values over
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|output
operator|.
name|epochDay
index|[
name|i
index|]
operator|=
name|epochDay
index|[
name|i
index|]
expr_stmt|;
name|output
operator|.
name|nanoOfDay
index|[
name|i
index|]
operator|=
name|nanoOfDay
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|epochDay
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|epochDay
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nanoOfDay
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|nanoOfDay
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|// Copy nulls over if needed
if|if
condition|(
operator|!
name|noNulls
condition|)
block|{
if|if
condition|(
name|selectedInUse
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|size
condition|;
name|j
operator|++
control|)
block|{
name|int
name|i
init|=
name|sel
index|[
name|j
index|]
decl_stmt|;
name|output
operator|.
name|isNull
index|[
name|i
index|]
operator|=
name|isNull
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|isNull
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|isNull
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Fill all the vector entries with a PisaTimestamp.    * @param pisaTimestamp    */
specifier|public
name|void
name|fill
parameter_list|(
name|PisaTimestamp
name|pisaTimestamp
parameter_list|)
block|{
name|noNulls
operator|=
literal|true
expr_stmt|;
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|epochDay
index|[
literal|0
index|]
operator|=
name|pisaTimestamp
operator|.
name|getEpochDay
argument_list|()
expr_stmt|;
name|nanoOfDay
index|[
literal|0
index|]
operator|=
name|pisaTimestamp
operator|.
name|getNanoOfDay
argument_list|()
expr_stmt|;
block|}
comment|/**    * Fill all the vector entries with a timestamp.    * @param timestamp    */
specifier|public
name|void
name|fill
parameter_list|(
name|Timestamp
name|timestamp
parameter_list|)
block|{
name|noNulls
operator|=
literal|true
expr_stmt|;
name|isRepeating
operator|=
literal|true
expr_stmt|;
name|scratchPisaTimestamp
operator|.
name|updateFromTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
name|epochDay
index|[
literal|0
index|]
operator|=
name|scratchPisaTimestamp
operator|.
name|getEpochDay
argument_list|()
expr_stmt|;
name|nanoOfDay
index|[
literal|0
index|]
operator|=
name|scratchPisaTimestamp
operator|.
name|getNanoOfDay
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return a convenience writable object stored by this column vector.    * Supports keeping a TimestampWritable object without having to import that definition...    * @return    */
specifier|public
name|Writable
name|getScratchWritable
parameter_list|()
block|{
return|return
name|scratchWritable
return|;
block|}
comment|/**    * Set the convenience writable object stored by this column vector    * @param scratchWritable    */
specifier|public
name|void
name|setScratchWritable
parameter_list|(
name|Writable
name|scratchWritable
parameter_list|)
block|{
name|this
operator|.
name|scratchWritable
operator|=
name|scratchWritable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stringifyValue
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|isRepeating
condition|)
block|{
name|row
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|noNulls
operator|||
operator|!
name|isNull
index|[
name|row
index|]
condition|)
block|{
name|scratchPisaTimestamp
operator|.
name|update
argument_list|(
name|epochDay
index|[
name|row
index|]
argument_list|,
name|nanoOfDay
index|[
name|row
index|]
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|scratchPisaTimestamp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

