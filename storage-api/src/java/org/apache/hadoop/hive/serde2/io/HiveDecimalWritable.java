begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|FastHiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|FastHiveDecimalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimalVersionV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * A mutable decimal.  *<p>  * ------------------------------------- Version 2 ------------------------------------------------  *<p>  * This is the 2nd major version of HiveDecimalWritable called V2.  The previous version has been  * renamed to HiveDecimalWritableV1 and is kept as a test and behavior reference.  *<p>  * For good performance we do not represent the decimal using a byte array containing BigInteger  * bytes like the previous version V1 did.  Instead V2 HiveDecimalWritable is is a private subclass  * of the same fast decimal class also used by HiveDecimal.  So it stores the decimal value  * directly.  *<p>  * Many of the methods of HiveDecimal have been added to HiveDecimalWritable in V2 so code can  * modify the decimal instead of calling getHiveDecimal(), doing operations on HiveDecimal, and then  * setting HiveDecimalWritable back to the result.  *<p>  * Operations that modify have a prefix of "mutate" in their name.  For example mutateAdd is used  * instead of the immutable operation add in HiveDecimal that returns a new decimal object.  *<p>  * This should have much better performance.  *<p>  * The original V1 public methods and fields are annotated with @HiveDecimalWritableVersionV1; new  * public methods and fields are annotated with @HiveDecimalWritableVersionV2.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HiveDecimalWritable
extends|extends
name|FastHiveDecimal
implements|implements
name|WritableComparable
argument_list|<
name|HiveDecimalWritable
argument_list|>
block|{
comment|// Is the decimal value currently valid?
specifier|private
name|boolean
name|isSet
decl_stmt|;
comment|/*    * Scratch arrays used in fastBigIntegerBytes calls for better performance.    */
comment|// An optional long array of length FastHiveDecimal.FAST_SCRATCH_LONGS_LEN.
specifier|private
name|long
index|[]
name|internalScratchLongs
decl_stmt|;
comment|// An optional byte array of FastHiveDecimal.FAST_SCRATCH_BUFFER_LEN_BIG_INTEGER_BYTES.
specifier|private
name|byte
index|[]
name|internalScratchBuffer
decl_stmt|;
comment|/**    * Create a decimal writable with no current value (i.e. isSet() will return false).    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|HiveDecimalWritable
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|isSet
operator|=
literal|false
expr_stmt|;
name|internalScratchLongs
operator|=
literal|null
expr_stmt|;
name|internalScratchBuffer
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Create a decimal writable with an initial value from a String.    *<p>    * If the conversion from String to decimal is successful, isSet() will return true.    *    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|HiveDecimalWritable
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|isSet
operator|=
name|fastSetFromString
argument_list|(
name|string
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create a decimal writable with an initial value from BigInteger bytes and a specified scale.    *<p>    * If the conversion to decimal is successful, isSet() will return true.    *    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|HiveDecimalWritable
parameter_list|(
name|byte
index|[]
name|bigIntegerBytes
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setFromBigIntegerBytesAndScale
argument_list|(
name|bigIntegerBytes
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a decimal writable with an initial value from another decimal writable.    *<p>    * If the supplied writable has a value, isSet() will return true.    *    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|HiveDecimalWritable
parameter_list|(
name|HiveDecimalWritable
name|writable
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|set
argument_list|(
name|writable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a decimal writable with an initial value from a HiveDecimal.    *<p>    * Afterwards, the isSet() method will return true, unless value is null.    *    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|HiveDecimalWritable
parameter_list|(
name|HiveDecimal
name|value
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a decimal writable with an initial value from a long with scale 0.    *<p>    * Afterwards, the isSet() method will return true.    *    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|HiveDecimalWritable
parameter_list|(
name|long
name|longValue
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setFromLong
argument_list|(
name|longValue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the writable's current value to a HiveDecimal's value.    *<p>    * Afterwards, the isSet() method will return true, unless value is null.    *    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|void
name|set
parameter_list|(
name|HiveDecimal
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
name|isSet
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|fastSet
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|isSet
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Set the writable's current value to a HiveDecimal's value with a specified precision / scale    * enforced.    *<p>    * Afterwards, the isSet() method will return true, unless value is null or value didn't fit within    * maxPrecision / maxScale.    *    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|void
name|set
parameter_list|(
name|HiveDecimal
name|value
parameter_list|,
name|int
name|maxPrecision
parameter_list|,
name|int
name|maxScale
parameter_list|)
block|{
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSet
condition|)
block|{
name|isSet
operator|=
name|fastEnforcePrecisionScale
argument_list|(
name|maxPrecision
argument_list|,
name|maxScale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set the writable's current value to the value in a another decimal writable.    *<p>    * If the supplied writable has a value, isSet() will return true.    *    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|void
name|set
parameter_list|(
name|HiveDecimalWritable
name|writable
parameter_list|)
block|{
if|if
condition|(
name|writable
operator|==
literal|null
operator|||
operator|!
name|writable
operator|.
name|isSet
argument_list|()
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
name|isSet
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|fastSet
argument_list|(
name|writable
argument_list|)
expr_stmt|;
name|isSet
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**    * Set a decimal writable's value from BigInteger bytes and a specified scale.    *<p>    * If the conversion to decimal is successful, isSet() will return true.    *    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|bigIntegerBytes
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|setFromBigIntegerBytesAndScale
argument_list|(
name|bigIntegerBytes
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the writable's current value to a writable's value with a specified precision / scale    * enforced.    *<p>    * The isSet() method will return true, unless value is null or value didn't fit within    * maxPrecision / maxScale.    *    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|set
parameter_list|(
name|HiveDecimalWritable
name|writable
parameter_list|,
name|int
name|maxPrecision
parameter_list|,
name|int
name|maxScale
parameter_list|)
block|{
name|set
argument_list|(
name|writable
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSet
condition|)
block|{
name|isSet
operator|=
name|fastEnforcePrecisionScale
argument_list|(
name|maxPrecision
argument_list|,
name|maxScale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set a decimal writable's value to a long's value with scale 0.    *<p>    * Afterwards, the isSet() method will return true since all long values fit in a decimal.    *    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|setFromLong
parameter_list|(
name|long
name|longValue
parameter_list|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
name|fastSetFromLong
argument_list|(
name|longValue
argument_list|)
expr_stmt|;
name|isSet
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Set a decimal writable's value to a doubles value.    *<p>    * Afterwards, the isSet() method will return true if the double to decimal conversion was successful.    *    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|setFromDouble
parameter_list|(
name|double
name|doubleValue
parameter_list|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
name|isSet
operator|=
name|fastSetFromDouble
argument_list|(
name|doubleValue
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set the writable's current value to the decimal in a UTF-8 byte slice.    *<p>    * Afterwards, the isSet() method will return true, unless byte slice could not be converted.    *    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|setFromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
name|isSet
operator|=
name|fastSetFromBytes
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|setFromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|trimBlanks
parameter_list|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
name|isSet
operator|=
name|fastSetFromBytes
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|trimBlanks
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set the writable's current value to the decimal digits only in a UTF-8 byte slice, a sign    * flag, and a scale.    *<p>    * Afterwards, the isSet() method will return true, unless byte slice etc could not be converted.    *    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|setFromDigitsOnlyBytesWithScale
parameter_list|(
name|boolean
name|isNegative
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
name|isSet
operator|=
name|fastSetFromDigitsOnlyBytesAndScale
argument_list|(
name|isNegative
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set the writable's current value to the signed value from BigInteger bytes and a specified    * scale.    *<p>    * Afterwards, the isSet() method will return true, unless conversion failed.    *    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|setFromBigIntegerBytesAndScale
parameter_list|(
name|byte
index|[]
name|bigIntegerBytes
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
name|isSet
operator|=
name|fastSetFromBigIntegerBytesAndScale
argument_list|(
name|bigIntegerBytes
argument_list|,
literal|0
argument_list|,
name|bigIntegerBytes
operator|.
name|length
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|setFromBigIntegerBytesAndScale
parameter_list|(
name|byte
index|[]
name|bigIntegerBytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
name|isSet
operator|=
name|fastSetFromBigIntegerBytesAndScale
argument_list|(
name|bigIntegerBytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Set the writable's current value to the long's value at a specified    * scale.    *<p>    * Afterwards, the isSet() method will return true, unless conversion failed.    *    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|setFromLongAndScale
parameter_list|(
name|long
name|longValue
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
name|isSet
operator|=
name|fastSetFromLongAndScale
argument_list|(
name|longValue
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Does this writable have a current value?    *<p>    * A return of false means a current value wasn't set, or an operation like mutateAdd overflowed,    * or a set* method couldn't convert the input value, etc.    *    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|boolean
name|isSet
parameter_list|()
block|{
return|return
name|isSet
return|;
block|}
comment|/**    * Returns a HiveDecimal for the writable's current value.    *<p>    * Returns null if the writable isn't set.    *    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|HiveDecimal
name|getHiveDecimal
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HiveDecimal
name|result
init|=
name|HiveDecimal
operator|.
name|createFromFast
argument_list|(
name|this
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Get a HiveDecimal instance from the writable and constraint it with maximum precision/scale.    *<p>    * @param maxPrecision maximum precision    * @param maxScale maximum scale    * @return HiveDecimal instance    */
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|HiveDecimal
name|getHiveDecimal
parameter_list|(
name|int
name|maxPrecision
parameter_list|,
name|int
name|maxScale
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|createFromFast
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|HiveDecimal
name|result
init|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
name|maxPrecision
argument_list|,
name|maxScale
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Standard Writable method that deserialize the fields of this object from a DataInput.    *     */
annotation|@
name|HiveDecimalWritableVersionV1
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|scale
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|byteArrayLen
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|byteArrayLen
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|fastReset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|fastSetFromBigIntegerBytesAndScale
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|scale
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't convert decimal"
argument_list|)
throw|;
block|}
name|isSet
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Standard Writable method that serialize the fields of this object to a DataOutput.    *    */
annotation|@
name|HiveDecimalWritableVersionV1
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|internalScratchLongs
operator|==
literal|null
condition|)
block|{
name|internalScratchLongs
operator|=
operator|new
name|long
index|[
name|FastHiveDecimal
operator|.
name|FAST_SCRATCH_LONGS_LEN
index|]
expr_stmt|;
name|internalScratchBuffer
operator|=
operator|new
name|byte
index|[
name|FastHiveDecimal
operator|.
name|FAST_SCRATCH_BUFFER_LEN_BIG_INTEGER_BYTES
index|]
expr_stmt|;
block|}
name|write
argument_list|(
name|out
argument_list|,
name|internalScratchLongs
argument_list|,
name|internalScratchBuffer
argument_list|)
expr_stmt|;
block|}
comment|/**    * A variation of the standard Writable method that serialize the fields of this object to a    * DataOutput with scratch buffers for good performance.    *<p>    * Allocate scratchLongs with HiveDecimal.SCRATCH_LONGS_LEN longs.    * And, allocate scratch buffer with HiveDecimal.SCRATCH_BUFFER_LEN_BIG_INTEGER_BYTES bytes.    *    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|long
index|[]
name|scratchLongs
parameter_list|,
name|byte
index|[]
name|scratchBuffer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|fastScale
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|byteLength
init|=
name|fastBigIntegerBytes
argument_list|(
name|scratchLongs
argument_list|,
name|scratchBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|byteLength
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't convert decimal to binary"
argument_list|)
throw|;
block|}
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|byteLength
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|scratchBuffer
argument_list|,
literal|0
argument_list|,
name|byteLength
argument_list|)
expr_stmt|;
block|}
comment|/**    * See the comments for HiveDecimal.serializationUtilsRead.    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|boolean
name|serializationUtilsRead
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|int
name|scale
parameter_list|,
name|byte
index|[]
name|scratchBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|fastReset
argument_list|()
expr_stmt|;
name|isSet
operator|=
name|fastSerializationUtilsRead
argument_list|(
name|inputStream
argument_list|,
name|scale
argument_list|,
name|scratchBytes
argument_list|)
expr_stmt|;
return|return
name|isSet
return|;
block|}
comment|/**    * See the comments for HiveDecimal.serializationUtilsWrite.    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|boolean
name|serializationUtilsWrite
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|,
name|long
index|[]
name|scratchLongs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastSerializationUtilsWrite
argument_list|(
name|outputStream
argument_list|,
name|scratchLongs
argument_list|)
return|;
block|}
comment|/*    * Maximum number of decimal digits in a decimal64 long.    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
specifier|static
specifier|final
name|int
name|DECIMAL64_DECIMAL_DIGITS
init|=
name|FastHiveDecimalImpl
operator|.
name|DECIMAL64_DECIMAL_DIGITS
decl_stmt|;
comment|/*    * Test whether a precision will fit within a decimal64 (64-bit signed long with<= 18 decimal    * digits).    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
specifier|static
name|boolean
name|isPrecisionDecimal64
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
return|return
operator|(
name|precision
operator|<=
name|DECIMAL64_DECIMAL_DIGITS
operator|)
return|;
block|}
comment|/*    * Return the maximum absolute decimal64 value for a precision.    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
specifier|static
name|long
name|getDecimal64AbsMax
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|getDecimal64AbsMax
argument_list|(
name|precision
argument_list|)
return|;
block|}
comment|/*    * Deserializes 64-bit decimals up to the maximum 64-bit precision (18 decimal digits).    *    * NOTE: Major assumption: the input decimal64 has already been bounds checked and a least    * has a precision<= DECIMAL64_DECIMAL_DIGITS.  We do not bounds check here for better    * performance.  You can bounds check beforehand with:    *     Math.abs(decimal64Long)<= getDecimal64AbsMax(precision)    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|deserialize64
parameter_list|(
name|long
name|decimal64Long
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|fastDeserialize64
argument_list|(
name|decimal64Long
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|isSet
operator|=
literal|true
expr_stmt|;
block|}
comment|/*     * Serializes decimal64 up to the maximum 64-bit precision (18 decimal digits).     *     * NOTE: Major assumption: the fast decimal has already been bounds checked and a least     * has a precision<= DECIMAL64_DECIMAL_DIGITS.  We do not bounds check here for better     * performance.     */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|long
name|serialize64
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
return|return
name|fastSerialize64
argument_list|(
name|scale
argument_list|)
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|FastHiveDecimalImpl
operator|.
name|fastIsValid
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Returns the length of the decimal converted to bytes.    * Call bigIntegerBytesBuffer() to get a reference to the converted bytes.    *    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|bigIntegerBytesInternalScratch
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|internalScratchLongs
operator|==
literal|null
condition|)
block|{
name|internalScratchLongs
operator|=
operator|new
name|long
index|[
name|FastHiveDecimal
operator|.
name|FAST_SCRATCH_LONGS_LEN
index|]
expr_stmt|;
name|internalScratchBuffer
operator|=
operator|new
name|byte
index|[
name|FastHiveDecimal
operator|.
name|FAST_SCRATCH_BUFFER_LEN_BIG_INTEGER_BYTES
index|]
expr_stmt|;
block|}
name|int
name|byteLength
init|=
name|fastBigIntegerBytes
argument_list|(
name|internalScratchLongs
argument_list|,
name|internalScratchBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|byteLength
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't convert decimal to binary"
argument_list|)
throw|;
block|}
return|return
name|byteLength
return|;
block|}
comment|/**    * Returns the scratch array containing the result after a call to bigIntegerBytesInternalScratch.    *    */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|byte
index|[]
name|bigIntegerBytesInternalScratchBuffer
parameter_list|()
block|{
return|return
name|internalScratchBuffer
return|;
block|}
comment|/**   * Allocate scratchLongs with HiveDecimal.SCRATCH_LONGS_LEN longs.   * And, allocate scratch scratchBuffer with HiveDecimal.SCRATCH_BUFFER_LEN_BIG_INTEGER_BYTES bytes.   *   */
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|byte
index|[]
name|bigIntegerBytesCopy
parameter_list|(
name|long
index|[]
name|scratchLongs
parameter_list|,
name|byte
index|[]
name|scratchBuffer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
name|int
name|byteLength
init|=
name|fastBigIntegerBytes
argument_list|(
name|scratchLongs
argument_list|,
name|scratchBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|byteLength
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't convert decimal to binary"
argument_list|)
throw|;
block|}
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratchBuffer
argument_list|,
name|byteLength
argument_list|)
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|bigIntegerBytes
parameter_list|(
name|long
index|[]
name|scratchLongs
parameter_list|,
name|byte
index|[]
name|scratchBuffer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
name|int
name|byteLength
init|=
name|fastBigIntegerBytes
argument_list|(
name|scratchLongs
argument_list|,
name|scratchBuffer
argument_list|)
decl_stmt|;
return|return
name|byteLength
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|signum
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastSignum
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|precision
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastSqlPrecision
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|rawPrecision
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastRawPrecision
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|scale
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastScale
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|boolean
name|isByte
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastIsByte
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|byte
name|byteValue
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastByteValueClip
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|boolean
name|isShort
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastIsShort
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|short
name|shortValue
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastShortValueClip
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|boolean
name|isInt
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastIsInt
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|intValue
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastIntValueClip
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|boolean
name|isLong
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastIsLong
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|long
name|longValue
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastLongValueClip
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|float
name|floatValue
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastFloatValue
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|double
name|doubleValue
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastDoubleValue
argument_list|()
return|;
block|}
comment|//-----------------------------------------------------------------------------------------------
comment|// Mutate operations.
comment|//-----------------------------------------------------------------------------------------------
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateAbs
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return;
block|}
name|fastAbs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateNegate
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return;
block|}
name|fastNegate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateAdd
parameter_list|(
name|HiveDecimalWritable
name|decWritable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
operator|||
operator|!
name|decWritable
operator|.
name|isSet
condition|)
block|{
name|isSet
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|isSet
operator|=
name|fastAdd
argument_list|(
name|decWritable
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateAdd
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
if|if
condition|(
name|dec
operator|==
literal|null
condition|)
block|{
comment|// Can't add NULL.
name|isSet
operator|=
literal|false
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return;
block|}
name|isSet
operator|=
name|fastAdd
argument_list|(
name|dec
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateSubtract
parameter_list|(
name|HiveDecimalWritable
name|decWritable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
operator|||
operator|!
name|decWritable
operator|.
name|isSet
condition|)
block|{
name|isSet
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|isSet
operator|=
name|fastSubtract
argument_list|(
name|decWritable
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateSubtract
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
if|if
condition|(
name|dec
operator|==
literal|null
condition|)
block|{
comment|// Can't subtract NULL.
name|isSet
operator|=
literal|false
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return;
block|}
name|isSet
operator|=
name|fastSubtract
argument_list|(
name|dec
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateMultiply
parameter_list|(
name|HiveDecimalWritable
name|decWritable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
operator|||
operator|!
name|decWritable
operator|.
name|isSet
condition|)
block|{
name|isSet
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|isSet
operator|=
name|fastMultiply
argument_list|(
name|decWritable
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateMultiply
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
if|if
condition|(
name|dec
operator|==
literal|null
condition|)
block|{
comment|// Can't multiply NULL.
name|isSet
operator|=
literal|false
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return;
block|}
name|isSet
operator|=
name|fastMultiply
argument_list|(
name|dec
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateDivide
parameter_list|(
name|HiveDecimalWritable
name|decWritable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
operator|||
operator|!
name|decWritable
operator|.
name|isSet
condition|)
block|{
name|isSet
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|isSet
operator|=
name|fastDivide
argument_list|(
name|decWritable
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateDivide
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
if|if
condition|(
name|dec
operator|==
literal|null
condition|)
block|{
comment|// Can't divide NULL.
name|isSet
operator|=
literal|false
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return;
block|}
name|isSet
operator|=
name|fastDivide
argument_list|(
name|dec
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateRemainder
parameter_list|(
name|HiveDecimalWritable
name|decWritable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
operator|||
operator|!
name|decWritable
operator|.
name|isSet
condition|)
block|{
name|isSet
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|isSet
operator|=
name|fastRemainder
argument_list|(
name|decWritable
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateRemainder
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
if|if
condition|(
name|dec
operator|==
literal|null
condition|)
block|{
comment|// Can't do remainder on NULL.
name|isSet
operator|=
literal|false
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return;
block|}
name|isSet
operator|=
name|fastRemainder
argument_list|(
name|dec
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateScaleByPowerOfTen
parameter_list|(
name|int
name|power
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return;
block|}
name|isSet
operator|=
name|fastScaleByPowerOfTen
argument_list|(
name|power
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateFractionPortion
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return;
block|}
name|fastFractionPortion
argument_list|()
expr_stmt|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateIntegerPortion
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return;
block|}
name|fastIntegerPortion
argument_list|()
expr_stmt|;
block|}
comment|//-----------------------------------------------------------------------------------------------
comment|// Standard overrides methods.
comment|//-----------------------------------------------------------------------------------------------
annotation|@
name|HiveDecimalWritableVersionV1
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|HiveDecimalWritable
name|writable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
operator|||
name|writable
operator|==
literal|null
operator|||
operator|!
name|writable
operator|.
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid comparision operand(s)"
argument_list|)
throw|;
block|}
return|return
name|fastCompareTo
argument_list|(
name|writable
argument_list|)
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|compareTo
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
operator|||
name|dec
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid comparision operand(s)"
argument_list|)
throw|;
block|}
return|return
name|fastCompareTo
argument_list|(
name|dec
argument_list|)
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
specifier|static
name|int
name|compareTo
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|,
name|HiveDecimalWritable
name|writable
parameter_list|)
block|{
if|if
condition|(
name|dec
operator|==
literal|null
operator|||
operator|!
name|writable
operator|.
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid comparision operand(s)"
argument_list|)
throw|;
block|}
return|return
name|FastHiveDecimal
operator|.
name|fastCompareTo
argument_list|(
name|dec
argument_list|,
name|writable
argument_list|)
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|toBytes
parameter_list|(
name|byte
index|[]
name|scratchBuffer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastToBytes
argument_list|(
name|scratchBuffer
argument_list|)
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV1
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastToString
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|scratchBuffer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fastSerializationScale
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Use the serialization scale and format the string with trailing zeroes (or
comment|// round the decimal) if necessary.
return|return
name|fastToFormatString
argument_list|(
name|fastSerializationScale
argument_list|()
argument_list|,
name|scratchBuffer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|fastToString
argument_list|(
name|scratchBuffer
argument_list|)
return|;
block|}
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|String
name|toFormatString
parameter_list|(
name|int
name|formatScale
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastToFormatString
argument_list|(
name|formatScale
argument_list|)
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|toFormatBytes
parameter_list|(
name|int
name|formatScale
parameter_list|,
name|byte
index|[]
name|scratchBuffer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastToFormatBytes
argument_list|(
name|formatScale
argument_list|,
name|scratchBuffer
argument_list|)
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|toDigitsOnlyBytes
parameter_list|(
name|byte
index|[]
name|scratchBuffer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastToDigitsOnlyBytes
argument_list|(
name|scratchBuffer
argument_list|)
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV1
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|other
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|HiveDecimalWritable
name|otherHiveDecWritable
init|=
operator|(
name|HiveDecimalWritable
operator|)
name|other
decl_stmt|;
if|if
condition|(
operator|!
name|otherHiveDecWritable
operator|.
name|isSet
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|fastEquals
argument_list|(
operator|(
name|FastHiveDecimal
operator|)
name|otherHiveDecWritable
argument_list|)
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|int
name|newFasterHashCode
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastNewFasterHashCode
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV1
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastHashCode
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_ARRAY
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|byte
index|[]
name|getInternalStorage
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
comment|// don't break old callers that are trying to reuse storages
return|return
name|EMPTY_ARRAY
return|;
block|}
if|if
condition|(
name|internalScratchLongs
operator|==
literal|null
condition|)
block|{
name|internalScratchLongs
operator|=
operator|new
name|long
index|[
name|FastHiveDecimal
operator|.
name|FAST_SCRATCH_LONGS_LEN
index|]
expr_stmt|;
name|internalScratchBuffer
operator|=
operator|new
name|byte
index|[
name|FastHiveDecimal
operator|.
name|FAST_SCRATCH_BUFFER_LEN_BIG_INTEGER_BYTES
index|]
expr_stmt|;
block|}
return|return
name|bigIntegerBytesCopy
argument_list|(
name|internalScratchLongs
argument_list|,
name|internalScratchBuffer
argument_list|)
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
name|int
name|getScale
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no value set"
argument_list|)
throw|;
block|}
return|return
name|fastScale
argument_list|()
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|void
name|mutateSetScale
parameter_list|(
name|int
name|roundingPoint
parameter_list|,
name|int
name|roundingMode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return;
block|}
name|isSet
operator|=
name|fastRound
argument_list|(
name|roundingPoint
argument_list|,
name|roundingMode
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|HiveDecimalWritableVersionV2
specifier|public
name|boolean
name|mutateEnforcePrecisionScale
parameter_list|(
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
return|return
literal|false
return|;
block|}
name|isSet
operator|=
name|fastEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSet
condition|)
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
return|return
name|isSet
return|;
block|}
annotation|@
name|HiveDecimalWritableVersionV1
specifier|public
specifier|static
name|HiveDecimalWritable
name|enforcePrecisionScale
parameter_list|(
name|HiveDecimalWritable
name|writable
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
if|if
condition|(
operator|!
name|writable
operator|.
name|isSet
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HiveDecimalWritable
name|result
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|writable
argument_list|)
decl_stmt|;
name|result
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isSet
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

