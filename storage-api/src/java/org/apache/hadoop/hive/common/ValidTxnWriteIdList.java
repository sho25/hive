begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * An implementation to store and manage list of ValidWriteIds for each tables read by current  * transaction.  */
end_comment

begin_class
specifier|public
class|class
name|ValidTxnWriteIdList
block|{
comment|/**    * Key used to store valid write id list for all the operated tables in a    * {@link org.apache.hadoop.conf.Configuration} object.    */
specifier|public
specifier|static
specifier|final
name|String
name|VALID_TABLES_WRITEIDS_KEY
init|=
literal|"hive.txn.tables.valid.writeids"
decl_stmt|;
comment|// Transaction for which the list of tables valid write Ids are populated
specifier|private
name|Long
name|txnId
decl_stmt|;
comment|// Map of valid write ids list for all the tables read by the current txn
comment|// Key is full table name string of format<db_name>.<table_name>
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ValidWriteIdList
argument_list|>
name|tablesValidWriteIdList
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|ValidTxnWriteIdList
parameter_list|(
name|Long
name|txnId
parameter_list|)
block|{
name|this
operator|.
name|txnId
operator|=
name|txnId
expr_stmt|;
block|}
specifier|public
name|ValidTxnWriteIdList
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|readFromString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|writeToString
argument_list|()
return|;
block|}
specifier|public
name|void
name|addTableValidWriteIdList
parameter_list|(
name|ValidWriteIdList
name|validWriteIds
parameter_list|)
block|{
name|tablesValidWriteIdList
operator|.
name|put
argument_list|(
name|validWriteIds
operator|.
name|getTableName
argument_list|()
argument_list|,
name|validWriteIds
argument_list|)
expr_stmt|;
block|}
comment|// Input fullTableName is of format<db_name>.<table_name>
specifier|public
name|ValidWriteIdList
name|getTableValidWriteIdList
parameter_list|(
name|String
name|fullTableName
parameter_list|)
block|{
if|if
condition|(
name|tablesValidWriteIdList
operator|.
name|containsKey
argument_list|(
name|fullTableName
argument_list|)
condition|)
block|{
return|return
name|tablesValidWriteIdList
operator|.
name|get
argument_list|(
name|fullTableName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|tablesValidWriteIdList
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|// Each ValidWriteIdList is separated with "$" and each one maps to one table
comment|// Format<txnId>$<table_name>:<hwm>:<minOpenWriteId>:<open_writeids>:<abort_writeids>$<table_name>...
specifier|private
name|void
name|readFromString
parameter_list|(
name|String
name|src
parameter_list|)
block|{
if|if
condition|(
operator|(
name|src
operator|==
literal|null
operator|)
operator|||
operator|(
name|src
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|tblWriteIdStrList
init|=
name|src
operator|.
name|split
argument_list|(
literal|"\\$"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tblWriteIdStrList
operator|.
name|length
operator|>=
literal|1
operator|)
assert|;
comment|// First $ separated substring would be txnId and the rest are ValidReaderWriteIdList
name|this
operator|.
name|txnId
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|tblWriteIdStrList
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|1
init|;
name|index
operator|<
name|tblWriteIdStrList
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|String
name|tableStr
init|=
name|tblWriteIdStrList
index|[
name|index
index|]
decl_stmt|;
name|ValidWriteIdList
name|validWriteIdList
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
name|tableStr
argument_list|)
decl_stmt|;
name|addTableValidWriteIdList
argument_list|(
name|validWriteIdList
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Each ValidWriteIdList is separated with "$" and each one maps to one table
comment|// Format<txnId>$<table_name>:<hwm>:<minOpenWriteId>:<open_writeids>:<abort_writeids>$<table_name>...
specifier|private
name|String
name|writeToString
parameter_list|()
block|{
comment|// First $ separated substring will be txnId and the rest are ValidReaderWriteIdList
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|txnId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HashMap
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ValidWriteIdList
argument_list|>
name|entry
range|:
name|tablesValidWriteIdList
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|index
operator|<
name|tablesValidWriteIdList
operator|.
name|size
argument_list|()
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'$'
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|writeToString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Separator for multiple tables' ValidWriteIdList. Also, skip it for last entry.
name|index
operator|++
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

