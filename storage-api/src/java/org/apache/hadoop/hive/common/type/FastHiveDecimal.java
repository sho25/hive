begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_comment
comment|/**  *    FastHiveDecimal is a mutable fast decimal object.  It is the base class for both the  *    HiveDecimal and HiveDecimalWritable classes.  All fast* methods are protected so they  *    cannot be accessed by clients of HiveDecimal and HiveDecimalWritable.  HiveDecimal ensures  *    it creates new objects when the value changes since it provides immutable semantics;  *    HiveDecimalWritable does not create new objects since it provides mutable semantics.  *  *    The methods in this class are shells that pickup the member variables from FastHiveDecimal  *    parameters and pass them as individual parameters to static methods in the FastHiveDecimalImpl  *    class that do the real work.  *  *    NOTE: The rationale for fast decimal is in FastHiveDecimalImpl.  */
end_comment

begin_class
specifier|public
class|class
name|FastHiveDecimal
block|{
comment|/*    * We use protected for the fields so the FastHiveDecimalImpl class can access them.  Other    * classes including HiveDecimal should not access these fields directly.    */
comment|// See FastHiveDecimalImpl for more details on these fields.
comment|// -1 when negative; 0 when decimal is zero; 1 when positive.
specifier|protected
name|int
name|fastSignum
decl_stmt|;
comment|// Decimal longwords.
specifier|protected
name|long
name|fast2
decl_stmt|;
specifier|protected
name|long
name|fast1
decl_stmt|;
specifier|protected
name|long
name|fast0
decl_stmt|;
comment|// The number of integer digits in the decimal.  When the integer portion is zero, this is 0.
specifier|protected
name|int
name|fastIntegerDigitCount
decl_stmt|;
comment|// The scale of the decimal.
specifier|protected
name|int
name|fastScale
decl_stmt|;
comment|// Used for legacy HiveDecimalV1 setScale compatibility for binary / display serialization of
comment|// trailing zeroes (or rounding).
specifier|protected
name|int
name|fastSerializationScale
decl_stmt|;
specifier|protected
name|FastHiveDecimal
parameter_list|()
block|{
name|fastReset
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|FastHiveDecimal
parameter_list|(
name|FastHiveDecimal
name|fastDec
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|fastSignum
operator|=
name|fastDec
operator|.
name|fastSignum
expr_stmt|;
name|fast0
operator|=
name|fastDec
operator|.
name|fast0
expr_stmt|;
name|fast1
operator|=
name|fastDec
operator|.
name|fast1
expr_stmt|;
name|fast2
operator|=
name|fastDec
operator|.
name|fast2
expr_stmt|;
name|fastIntegerDigitCount
operator|=
name|fastDec
operator|.
name|fastIntegerDigitCount
expr_stmt|;
name|fastScale
operator|=
name|fastDec
operator|.
name|fastScale
expr_stmt|;
comment|// Not propagated.
name|fastSerializationScale
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|protected
name|FastHiveDecimal
parameter_list|(
name|int
name|fastSignum
parameter_list|,
name|FastHiveDecimal
name|fastDec
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|fastSignum
operator|=
name|fastSignum
expr_stmt|;
name|fast0
operator|=
name|fastDec
operator|.
name|fast0
expr_stmt|;
name|fast1
operator|=
name|fastDec
operator|.
name|fast1
expr_stmt|;
name|fast2
operator|=
name|fastDec
operator|.
name|fast2
expr_stmt|;
name|fastIntegerDigitCount
operator|=
name|fastDec
operator|.
name|fastIntegerDigitCount
expr_stmt|;
name|fastScale
operator|=
name|fastDec
operator|.
name|fastScale
expr_stmt|;
comment|// Not propagated.
name|fastSerializationScale
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|protected
name|FastHiveDecimal
parameter_list|(
name|int
name|fastSignum
parameter_list|,
name|long
name|fast0
parameter_list|,
name|long
name|fast1
parameter_list|,
name|long
name|fast2
parameter_list|,
name|int
name|fastIntegerDigitCount
parameter_list|,
name|int
name|fastScale
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|fastSignum
operator|=
name|fastSignum
expr_stmt|;
name|this
operator|.
name|fast0
operator|=
name|fast0
expr_stmt|;
name|this
operator|.
name|fast1
operator|=
name|fast1
expr_stmt|;
name|this
operator|.
name|fast2
operator|=
name|fast2
expr_stmt|;
name|this
operator|.
name|fastIntegerDigitCount
operator|=
name|fastIntegerDigitCount
expr_stmt|;
name|this
operator|.
name|fastScale
operator|=
name|fastScale
expr_stmt|;
name|fastSerializationScale
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|protected
name|FastHiveDecimal
parameter_list|(
name|long
name|longValue
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|FastHiveDecimalImpl
operator|.
name|fastSetFromLong
argument_list|(
name|longValue
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|FastHiveDecimal
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|FastHiveDecimalImpl
operator|.
name|fastSetFromString
argument_list|(
name|string
argument_list|,
literal|false
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fastReset
parameter_list|()
block|{
name|fastSignum
operator|=
literal|0
expr_stmt|;
name|fast0
operator|=
literal|0
expr_stmt|;
name|fast1
operator|=
literal|0
expr_stmt|;
name|fast2
operator|=
literal|0
expr_stmt|;
name|fastIntegerDigitCount
operator|=
literal|0
expr_stmt|;
name|fastScale
operator|=
literal|0
expr_stmt|;
name|fastSerializationScale
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|protected
name|void
name|fastSet
parameter_list|(
name|FastHiveDecimal
name|fastDec
parameter_list|)
block|{
name|fastSignum
operator|=
name|fastDec
operator|.
name|fastSignum
expr_stmt|;
name|fast0
operator|=
name|fastDec
operator|.
name|fast0
expr_stmt|;
name|fast1
operator|=
name|fastDec
operator|.
name|fast1
expr_stmt|;
name|fast2
operator|=
name|fastDec
operator|.
name|fast2
expr_stmt|;
name|fastIntegerDigitCount
operator|=
name|fastDec
operator|.
name|fastIntegerDigitCount
expr_stmt|;
name|fastScale
operator|=
name|fastDec
operator|.
name|fastScale
expr_stmt|;
name|fastSerializationScale
operator|=
name|fastDec
operator|.
name|fastSerializationScale
expr_stmt|;
block|}
specifier|protected
name|void
name|fastSet
parameter_list|(
name|int
name|fastSignum
parameter_list|,
name|long
name|fast0
parameter_list|,
name|long
name|fast1
parameter_list|,
name|long
name|fast2
parameter_list|,
name|int
name|fastIntegerDigitCount
parameter_list|,
name|int
name|fastScale
parameter_list|)
block|{
name|this
operator|.
name|fastSignum
operator|=
name|fastSignum
expr_stmt|;
name|this
operator|.
name|fast0
operator|=
name|fast0
expr_stmt|;
name|this
operator|.
name|fast1
operator|=
name|fast1
expr_stmt|;
name|this
operator|.
name|fast2
operator|=
name|fast2
expr_stmt|;
name|this
operator|.
name|fastIntegerDigitCount
operator|=
name|fastIntegerDigitCount
expr_stmt|;
name|this
operator|.
name|fastScale
operator|=
name|fastScale
expr_stmt|;
comment|// Not specified.
name|fastSerializationScale
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|protected
name|void
name|fastSetSerializationScale
parameter_list|(
name|int
name|fastSerializationScale
parameter_list|)
block|{
name|this
operator|.
name|fastSerializationScale
operator|=
name|fastSerializationScale
expr_stmt|;
block|}
specifier|protected
name|int
name|fastSerializationScale
parameter_list|()
block|{
return|return
name|fastSerializationScale
return|;
block|}
specifier|protected
specifier|static
specifier|final
name|String
name|STRING_ENFORCE_PRECISION_OUT_OF_RANGE
init|=
literal|"Decimal precision out of allowed range [1,"
operator|+
name|HiveDecimal
operator|.
name|MAX_PRECISION
operator|+
literal|"]"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|STRING_ENFORCE_SCALE_OUT_OF_RANGE
init|=
literal|"Decimal scale out of allowed range [0,"
operator|+
name|HiveDecimal
operator|.
name|MAX_SCALE
operator|+
literal|"]"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|STRING_ENFORCE_SCALE_LESS_THAN_EQUAL_PRECISION
init|=
literal|"Decimal scale must be less than or equal to precision"
decl_stmt|;
specifier|protected
name|boolean
name|fastSetFromBigDecimal
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|,
name|boolean
name|allowRounding
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSetFromBigDecimal
argument_list|(
name|bigDecimal
argument_list|,
name|allowRounding
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastSetFromBigInteger
parameter_list|(
name|BigInteger
name|bigInteger
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSetFromBigInteger
argument_list|(
name|bigInteger
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastSetFromBigIntegerAndScale
parameter_list|(
name|BigInteger
name|bigInteger
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSetFromBigInteger
argument_list|(
name|bigInteger
argument_list|,
name|scale
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastSetFromString
parameter_list|(
name|String
name|string
parameter_list|,
name|boolean
name|trimBlanks
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|string
operator|.
name|getBytes
argument_list|()
decl_stmt|;
return|return
name|fastSetFromBytes
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|trimBlanks
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastSetFromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|trimBlanks
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSetFromBytes
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|trimBlanks
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastSetFromDigitsOnlyBytesAndScale
parameter_list|(
name|boolean
name|isNegative
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSetFromDigitsOnlyBytesAndScale
argument_list|(
name|isNegative
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|scale
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
name|void
name|fastSetFromInt
parameter_list|(
name|int
name|intValue
parameter_list|)
block|{
name|FastHiveDecimalImpl
operator|.
name|fastSetFromInt
argument_list|(
name|intValue
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fastSetFromLong
parameter_list|(
name|long
name|longValue
parameter_list|)
block|{
name|FastHiveDecimalImpl
operator|.
name|fastSetFromLong
argument_list|(
name|longValue
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|fastSetFromLongAndScale
parameter_list|(
name|long
name|longValue
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSetFromLongAndScale
argument_list|(
name|longValue
argument_list|,
name|scale
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastSetFromFloat
parameter_list|(
name|float
name|floatValue
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSetFromFloat
argument_list|(
name|floatValue
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastSetFromDouble
parameter_list|(
name|double
name|doubleValue
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSetFromDouble
argument_list|(
name|doubleValue
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
name|void
name|fastFractionPortion
parameter_list|()
block|{
name|FastHiveDecimalImpl
operator|.
name|fastFractionPortion
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastScale
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fastIntegerPortion
parameter_list|()
block|{
name|FastHiveDecimalImpl
operator|.
name|fastIntegerPortion
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
specifier|final
name|int
name|FAST_SCRATCH_BUFFER_LEN_SERIALIZATION_UTILS_READ
init|=
literal|8
operator|*
literal|3
decl_stmt|;
specifier|protected
name|boolean
name|fastSerializationUtilsRead
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|int
name|scale
parameter_list|,
name|byte
index|[]
name|scratchBytes
parameter_list|)
throws|throws
name|IOException
throws|,
name|EOFException
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSerializationUtilsRead
argument_list|(
name|inputStream
argument_list|,
name|scale
argument_list|,
name|scratchBytes
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastSetFromBigIntegerBytesAndScale
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSetFromBigIntegerBytesAndScale
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|scale
argument_list|,
name|this
argument_list|)
return|;
block|}
specifier|protected
specifier|static
specifier|final
name|int
name|SCRATCH_LONGS_LEN_FAST_SERIALIZATION_UTILS_WRITE
init|=
literal|6
decl_stmt|;
specifier|protected
name|boolean
name|fastSerializationUtilsWrite
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|,
name|long
index|[]
name|scratchLongs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSerializationUtilsWrite
argument_list|(
name|outputStream
argument_list|,
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|scratchLongs
argument_list|)
return|;
block|}
comment|/*    * Deserializes 64-bit decimals up to the maximum 64-bit precision (18 decimal digits).    */
specifier|protected
name|void
name|fastDeserialize64
parameter_list|(
name|long
name|decimalLong
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|FastHiveDecimalImpl
operator|.
name|fastDeserialize64
argument_list|(
name|decimalLong
argument_list|,
name|scale
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/*    * Serializes decimal64 up to the maximum 64-bit precision (18 decimal digits).    */
specifier|protected
name|long
name|fastSerialize64
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSerialize64
argument_list|(
name|scale
argument_list|,
name|fastSignum
argument_list|,
name|fast1
argument_list|,
name|fast0
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
comment|// The fastBigIntegerBytes method returns 3 56 bit (7 byte) words and a possible sign byte.
comment|// However, the fastBigIntegerBytes can take on trailing zeroes -- so make it larger.
specifier|protected
specifier|static
specifier|final
name|int
name|FAST_SCRATCH_BUFFER_LEN_BIG_INTEGER_BYTES
init|=
literal|1
operator|+
literal|48
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|FAST_SCRATCH_LONGS_LEN
init|=
literal|6
decl_stmt|;
specifier|protected
name|int
name|fastBigIntegerBytes
parameter_list|(
name|long
index|[]
name|scratchLongs
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastBigIntegerBytes
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|fastSerializationScale
argument_list|,
name|scratchLongs
argument_list|,
name|buffer
argument_list|)
return|;
block|}
specifier|protected
name|int
name|fastBigIntegerBytesScaled
parameter_list|(
name|int
name|serializationScale
parameter_list|,
name|long
index|[]
name|scratchLongs
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastBigIntegerBytesScaled
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|serializationScale
argument_list|,
name|scratchLongs
argument_list|,
name|buffer
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastIsByte
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastIsByte
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|byte
name|fastByteValueClip
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastByteValueClip
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastIsShort
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastIsShort
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|short
name|fastShortValueClip
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastShortValueClip
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastIsInt
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastIsInt
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|int
name|fastIntValueClip
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastIntValueClip
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastIsLong
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastIsLong
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|long
name|fastLongValueClip
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastLongValueClip
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|float
name|fastFloatValue
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastFloatValue
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|double
name|fastDoubleValue
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastDoubleValue
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|BigInteger
name|fastBigIntegerValue
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastBigIntegerValue
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|fastSerializationScale
argument_list|)
return|;
block|}
specifier|protected
name|BigDecimal
name|fastBigDecimalValue
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastBigDecimalValue
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|int
name|fastScale
parameter_list|()
block|{
return|return
name|fastScale
return|;
block|}
specifier|protected
name|int
name|fastSignum
parameter_list|()
block|{
return|return
name|fastSignum
return|;
block|}
specifier|protected
name|int
name|fastCompareTo
parameter_list|(
name|FastHiveDecimal
name|right
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastCompareTo
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastScale
argument_list|,
name|right
operator|.
name|fastSignum
argument_list|,
name|right
operator|.
name|fast0
argument_list|,
name|right
operator|.
name|fast1
argument_list|,
name|right
operator|.
name|fast2
argument_list|,
name|right
operator|.
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|int
name|fastCompareTo
parameter_list|(
name|FastHiveDecimal
name|left
parameter_list|,
name|FastHiveDecimal
name|right
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastCompareTo
argument_list|(
name|left
operator|.
name|fastSignum
argument_list|,
name|left
operator|.
name|fast0
argument_list|,
name|left
operator|.
name|fast1
argument_list|,
name|left
operator|.
name|fast2
argument_list|,
name|left
operator|.
name|fastScale
argument_list|,
name|right
operator|.
name|fastSignum
argument_list|,
name|right
operator|.
name|fast0
argument_list|,
name|right
operator|.
name|fast1
argument_list|,
name|right
operator|.
name|fast2
argument_list|,
name|right
operator|.
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastEquals
parameter_list|(
name|FastHiveDecimal
name|that
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastEquals
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastScale
argument_list|,
name|that
operator|.
name|fastSignum
argument_list|,
name|that
operator|.
name|fast0
argument_list|,
name|that
operator|.
name|fast1
argument_list|,
name|that
operator|.
name|fast2
argument_list|,
name|that
operator|.
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|void
name|fastAbs
parameter_list|()
block|{
name|fastSignum
operator|=
literal|1
expr_stmt|;
block|}
specifier|protected
name|void
name|fastNegate
parameter_list|()
block|{
if|if
condition|(
name|fastSignum
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|fastSignum
operator|=
operator|(
name|fastSignum
operator|==
literal|1
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
expr_stmt|;
block|}
specifier|protected
name|int
name|fastNewFasterHashCode
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastNewFasterHashCode
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|int
name|fastHashCode
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastHashCode
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|int
name|fastIntegerDigitCount
parameter_list|()
block|{
return|return
name|fastIntegerDigitCount
return|;
block|}
specifier|protected
name|int
name|fastSqlPrecision
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSqlPrecision
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|)
return|;
block|}
specifier|protected
name|int
name|fastRawPrecision
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastRawPrecision
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastScaleByPowerOfTen
parameter_list|(
name|int
name|n
parameter_list|,
name|FastHiveDecimal
name|fastResult
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastScaleByPowerOfTen
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|n
argument_list|,
name|fastResult
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|fastRoundingModeToString
parameter_list|(
name|int
name|roundingMode
parameter_list|)
block|{
name|String
name|roundingModeString
decl_stmt|;
switch|switch
condition|(
name|roundingMode
condition|)
block|{
case|case
name|BigDecimal
operator|.
name|ROUND_DOWN
case|:
name|roundingModeString
operator|=
literal|"ROUND_DOWN"
expr_stmt|;
break|break;
case|case
name|BigDecimal
operator|.
name|ROUND_UP
case|:
name|roundingModeString
operator|=
literal|"ROUND_UP"
expr_stmt|;
break|break;
case|case
name|BigDecimal
operator|.
name|ROUND_FLOOR
case|:
name|roundingModeString
operator|=
literal|"ROUND_FLOOR"
expr_stmt|;
break|break;
case|case
name|BigDecimal
operator|.
name|ROUND_CEILING
case|:
name|roundingModeString
operator|=
literal|"ROUND_CEILING"
expr_stmt|;
break|break;
case|case
name|BigDecimal
operator|.
name|ROUND_HALF_UP
case|:
name|roundingModeString
operator|=
literal|"ROUND_HALF_UP"
expr_stmt|;
break|break;
case|case
name|BigDecimal
operator|.
name|ROUND_HALF_EVEN
case|:
name|roundingModeString
operator|=
literal|"ROUND_HALF_EVEN"
expr_stmt|;
break|break;
default|default:
name|roundingModeString
operator|=
literal|"Unknown"
expr_stmt|;
block|}
return|return
name|roundingModeString
operator|+
literal|" ("
operator|+
name|roundingMode
operator|+
literal|")"
return|;
block|}
specifier|protected
name|boolean
name|fastRound
parameter_list|(
name|int
name|newScale
parameter_list|,
name|int
name|roundingMode
parameter_list|,
name|FastHiveDecimal
name|fastResult
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastRound
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|newScale
argument_list|,
name|roundingMode
argument_list|,
name|fastResult
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isAllZeroesBelow
parameter_list|(
name|int
name|power
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|isAllZeroesBelow
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|power
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastEnforcePrecisionScale
parameter_list|(
name|int
name|maxPrecision
parameter_list|,
name|int
name|maxScale
parameter_list|)
block|{
if|if
condition|(
name|maxPrecision
operator|<=
literal|0
operator|||
name|maxPrecision
operator|>
name|HiveDecimal
operator|.
name|MAX_PRECISION
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|maxScale
argument_list|<
literal|0
operator|||
name|maxScale
argument_list|>
name|HiveDecimal
operator|.
name|MAX_SCALE
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|/*     if (!fastIsValid()) {       fastRaiseInvalidException();     }     */
name|FastCheckPrecisionScaleStatus
name|status
init|=
name|FastHiveDecimalImpl
operator|.
name|fastCheckPrecisionScale
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|maxPrecision
argument_list|,
name|maxScale
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|NO_CHANGE
case|:
return|return
literal|true
return|;
case|case
name|OVERFLOW
case|:
return|return
literal|false
return|;
case|case
name|UPDATE_SCALE_DOWN
case|:
block|{
if|if
condition|(
operator|!
name|FastHiveDecimalImpl
operator|.
name|fastUpdatePrecisionScale
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|maxPrecision
argument_list|,
name|maxScale
argument_list|,
name|status
argument_list|,
name|this
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|/*         if (!fastIsValid()) {           fastRaiseInvalidException();         }         */
return|return
literal|true
return|;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown fast decimal check precision and scale status "
operator|+
name|status
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|FastCheckPrecisionScaleStatus
name|fastCheckPrecisionScale
parameter_list|(
name|int
name|maxPrecision
parameter_list|,
name|int
name|maxScale
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastCheckPrecisionScale
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|maxPrecision
argument_list|,
name|maxScale
argument_list|)
return|;
block|}
specifier|protected
specifier|static
enum|enum
name|FastCheckPrecisionScaleStatus
block|{
name|NO_CHANGE
block|,
name|OVERFLOW
block|,
name|UPDATE_SCALE_DOWN
block|;   }
specifier|protected
name|boolean
name|fastUpdatePrecisionScale
parameter_list|(
name|int
name|maxPrecision
parameter_list|,
name|int
name|maxScale
parameter_list|,
name|FastCheckPrecisionScaleStatus
name|status
parameter_list|,
name|FastHiveDecimal
name|fastResult
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastUpdatePrecisionScale
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|maxPrecision
argument_list|,
name|maxScale
argument_list|,
name|status
argument_list|,
name|fastResult
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastAdd
parameter_list|(
name|FastHiveDecimal
name|fastRight
parameter_list|,
name|FastHiveDecimal
name|fastResult
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastAdd
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|fastRight
operator|.
name|fastSignum
argument_list|,
name|fastRight
operator|.
name|fast0
argument_list|,
name|fastRight
operator|.
name|fast1
argument_list|,
name|fastRight
operator|.
name|fast2
argument_list|,
name|fastRight
operator|.
name|fastIntegerDigitCount
argument_list|,
name|fastRight
operator|.
name|fastScale
argument_list|,
name|fastResult
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastSubtract
parameter_list|(
name|FastHiveDecimal
name|fastRight
parameter_list|,
name|FastHiveDecimal
name|fastResult
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastSubtract
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|fastRight
operator|.
name|fastSignum
argument_list|,
name|fastRight
operator|.
name|fast0
argument_list|,
name|fastRight
operator|.
name|fast1
argument_list|,
name|fastRight
operator|.
name|fast2
argument_list|,
name|fastRight
operator|.
name|fastIntegerDigitCount
argument_list|,
name|fastRight
operator|.
name|fastScale
argument_list|,
name|fastResult
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastMultiply
parameter_list|(
name|FastHiveDecimal
name|fastRight
parameter_list|,
name|FastHiveDecimal
name|fastResult
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastMultiply
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|fastRight
operator|.
name|fastSignum
argument_list|,
name|fastRight
operator|.
name|fast0
argument_list|,
name|fastRight
operator|.
name|fast1
argument_list|,
name|fastRight
operator|.
name|fast2
argument_list|,
name|fastRight
operator|.
name|fastIntegerDigitCount
argument_list|,
name|fastRight
operator|.
name|fastScale
argument_list|,
name|fastResult
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastRemainder
parameter_list|(
name|FastHiveDecimal
name|fastRight
parameter_list|,
name|FastHiveDecimal
name|fastResult
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastRemainder
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|fastRight
operator|.
name|fastSignum
argument_list|,
name|fastRight
operator|.
name|fast0
argument_list|,
name|fastRight
operator|.
name|fast1
argument_list|,
name|fastRight
operator|.
name|fast2
argument_list|,
name|fastRight
operator|.
name|fastIntegerDigitCount
argument_list|,
name|fastRight
operator|.
name|fastScale
argument_list|,
name|fastResult
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastDivide
parameter_list|(
name|FastHiveDecimal
name|fastRight
parameter_list|,
name|FastHiveDecimal
name|fastResult
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastDivide
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|fastRight
operator|.
name|fastSignum
argument_list|,
name|fastRight
operator|.
name|fast0
argument_list|,
name|fastRight
operator|.
name|fast1
argument_list|,
name|fastRight
operator|.
name|fast2
argument_list|,
name|fastRight
operator|.
name|fastIntegerDigitCount
argument_list|,
name|fastRight
operator|.
name|fastScale
argument_list|,
name|fastResult
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastPow
parameter_list|(
name|int
name|exponent
parameter_list|,
name|FastHiveDecimal
name|fastResult
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastPow
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|exponent
argument_list|,
name|fastResult
argument_list|)
return|;
block|}
specifier|protected
name|String
name|fastToString
parameter_list|(
name|byte
index|[]
name|scratchBuffer
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastToString
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
operator|-
literal|1
argument_list|,
name|scratchBuffer
argument_list|)
return|;
block|}
specifier|protected
name|String
name|fastToString
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastToString
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|protected
name|String
name|fastToFormatString
parameter_list|(
name|int
name|formatScale
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastToFormatString
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|formatScale
argument_list|)
return|;
block|}
specifier|protected
name|String
name|fastToFormatString
parameter_list|(
name|int
name|formatScale
parameter_list|,
name|byte
index|[]
name|scratchBuffer
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastToFormatString
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|formatScale
argument_list|,
name|scratchBuffer
argument_list|)
return|;
block|}
specifier|protected
name|String
name|fastToDigitsOnlyString
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastToDigitsOnlyString
argument_list|(
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|)
return|;
block|}
comment|// Sign, zero, dot, 2 * digits (to support toFormatString which can add a lot of trailing zeroes).
specifier|protected
specifier|final
specifier|static
name|int
name|FAST_SCRATCH_BUFFER_LEN_TO_BYTES
init|=
literal|1
operator|+
literal|1
operator|+
literal|1
operator|+
literal|2
operator|*
name|FastHiveDecimalImpl
operator|.
name|MAX_DECIMAL_DIGITS
decl_stmt|;
specifier|protected
name|int
name|fastToBytes
parameter_list|(
name|byte
index|[]
name|scratchBuffer
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastToBytes
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
operator|-
literal|1
argument_list|,
name|scratchBuffer
argument_list|)
return|;
block|}
specifier|protected
name|int
name|fastToFormatBytes
parameter_list|(
name|int
name|formatScale
parameter_list|,
name|byte
index|[]
name|scratchBuffer
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastToFormatBytes
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
name|formatScale
argument_list|,
name|scratchBuffer
argument_list|)
return|;
block|}
specifier|protected
name|int
name|fastToDigitsOnlyBytes
parameter_list|(
name|byte
index|[]
name|scratchBuffer
parameter_list|)
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastToDigitsOnlyBytes
argument_list|(
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|scratchBuffer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastToString
argument_list|(
name|fastSignum
argument_list|,
name|fast0
argument_list|,
name|fast1
argument_list|,
name|fast2
argument_list|,
name|fastIntegerDigitCount
argument_list|,
name|fastScale
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|fastIsValid
parameter_list|()
block|{
return|return
name|FastHiveDecimalImpl
operator|.
name|fastIsValid
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|protected
name|void
name|fastRaiseInvalidException
parameter_list|()
block|{
name|FastHiveDecimalImpl
operator|.
name|fastRaiseInvalidException
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fastRaiseInvalidException
parameter_list|(
name|String
name|parameters
parameter_list|)
block|{
name|FastHiveDecimalImpl
operator|.
name|fastRaiseInvalidException
argument_list|(
name|this
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

