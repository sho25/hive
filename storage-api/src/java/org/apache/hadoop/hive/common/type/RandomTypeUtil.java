begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
specifier|public
class|class
name|RandomTypeUtil
block|{
specifier|public
specifier|static
specifier|final
name|long
name|NANOSECONDS_PER_SECOND
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toNanos
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|MILLISECONDS_PER_SECOND
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|NANOSECONDS_PER_MILLISSECOND
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|DateFormat
argument_list|>
name|DATE_FORMAT
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DateFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|DateFormat
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// We've switched to Joda/Java Calendar which has a more limited time range....
specifier|public
specifier|static
name|int
name|MIN_YEAR
init|=
literal|1900
decl_stmt|;
specifier|public
specifier|static
name|int
name|MAX_YEAR
init|=
literal|3000
decl_stmt|;
specifier|private
specifier|static
name|long
name|MIN_FOUR_DIGIT_YEAR_MILLIS
init|=
name|parseToMillis
argument_list|(
literal|"1900-01-01 00:00:00"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
name|MAX_FOUR_DIGIT_YEAR_MILLIS
init|=
name|parseToMillis
argument_list|(
literal|"3000-01-01 00:00:00"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
name|parseToMillis
parameter_list|(
name|String
name|s
parameter_list|)
block|{
try|try
block|{
return|return
name|DATE_FORMAT
operator|.
name|get
argument_list|()
operator|.
name|parse
argument_list|(
name|s
argument_list|)
operator|.
name|getTime
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Timestamp
name|getRandTimestamp
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
return|return
name|getRandTimestamp
argument_list|(
name|r
argument_list|,
name|MIN_YEAR
argument_list|,
name|MAX_YEAR
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|getRandTimestamp
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|minYear
parameter_list|,
name|int
name|maxYear
parameter_list|)
block|{
name|String
name|optionalNanos
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|0
case|:
comment|// No nanos.
break|break;
case|case
literal|1
case|:
name|optionalNanos
operator|=
name|String
operator|.
name|format
argument_list|(
literal|".%09d"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|NANOSECONDS_PER_SECOND
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// Limit to milliseconds only...
name|optionalNanos
operator|=
name|String
operator|.
name|format
argument_list|(
literal|".%09d"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|MILLISECONDS_PER_SECOND
argument_list|)
argument_list|)
operator|*
name|NANOSECONDS_PER_MILLISSECOND
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// Limit to below milliseconds only...
name|optionalNanos
operator|=
name|String
operator|.
name|format
argument_list|(
literal|".%09d"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|NANOSECONDS_PER_MILLISSECOND
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|String
name|timestampStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%04d-%02d-%02d %02d:%02d:%02d%s"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|minYear
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|maxYear
operator|-
name|minYear
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
comment|// year
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
argument_list|)
argument_list|,
comment|// month
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|28
argument_list|)
argument_list|)
argument_list|,
comment|// day
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|24
argument_list|)
argument_list|)
argument_list|,
comment|// hour
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|,
comment|// minute
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|,
comment|// second
name|optionalNanos
argument_list|)
decl_stmt|;
name|Timestamp
name|timestampVal
decl_stmt|;
try|try
block|{
name|timestampVal
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|timestampStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Timestamp string "
operator|+
name|timestampStr
operator|+
literal|" did not parse"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|timestampVal
return|;
block|}
specifier|public
specifier|static
name|long
name|randomMillis
parameter_list|(
name|long
name|minMillis
parameter_list|,
name|long
name|maxMillis
parameter_list|,
name|Random
name|rand
parameter_list|)
block|{
return|return
name|minMillis
operator|+
call|(
name|long
call|)
argument_list|(
operator|(
name|maxMillis
operator|-
name|minMillis
operator|)
operator|*
name|rand
operator|.
name|nextDouble
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|randomMillis
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
return|return
name|randomMillis
argument_list|(
name|MIN_FOUR_DIGIT_YEAR_MILLIS
argument_list|,
name|MAX_FOUR_DIGIT_YEAR_MILLIS
argument_list|,
name|rand
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|randomNanos
parameter_list|(
name|Random
name|rand
parameter_list|,
name|int
name|decimalDigits
parameter_list|)
block|{
comment|// Only keep the most significant decimalDigits digits.
name|int
name|nanos
init|=
name|rand
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|NANOSECONDS_PER_SECOND
argument_list|)
decl_stmt|;
return|return
name|nanos
operator|-
name|nanos
operator|%
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
literal|9
operator|-
name|decimalDigits
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|randomNanos
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
return|return
name|randomNanos
argument_list|(
name|rand
argument_list|,
literal|9
argument_list|)
return|;
block|}
block|}
end_class

end_unit

