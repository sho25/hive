begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Pisa project is named after the famous Leonardo of Pisa, or better known as Fibanacci.  *  * A Pisa timestamp is a timestamp without a time-zone (i.e. local) in the ISO-8601 calendar system,  * such as 2007-12-03 10:15:30.0123456789, with accuracy to the nanosecond (1 billionth of a  * second).  *  * Pisa timestamps use the same starting point as a java.sql.Timestamp -- the number of nanoseconds  * since the epoch (1970-01-01, or the day Unix roared awake) where negative numbers represent  * earlier days.  *  * However, we use the PisaTimestamp class which has different design requirements than  * java.sql.Timestamp.  It is designed to be mutable and NOT thread-safe to avoid high memory  * allocation / garbage collection costs.  And, provides for ease of use by our vectorization  * code to avoid the high CPU data cache miss cost for small objects, too.  We do this by allowing  * the epoch day and nano of day to be stored externally (i.e. vector arrays).  *  * And, importantly, PisaTimestamp is a light-weight class similar to the epochDay/NanoOfDay of  * the newer Java 8 LocalDateTime class, except the timestamp is *indifferent* to timezone.  *  * A common usage would be to treat it as UTC.  *  * You can work with days, seconds, milliseconds, nanoseconds, etc.  But to work with months you  * will need to convert to an external timestamp object and use calendars, etc.  * *  * The storage for a PisaTimestamp is:  *  *        long epochDay  *            // The number of days since 1970-01-01 (==> similar to Java 8 LocalDate).  *        long nanoOfDay  *            // The number of nanoseconds within the day, with the range of  *            //  0 to 24 * 60 * 60 * 1,000,000,000 - 1 (==> similar to Java 8 LocalTime).  *  * Both epochDay and nanoOfDay are signed.  *  * We when both epochDay and nanoOfDay are non-zero, we will maintain them so they have the  * same sign.  *  */
end_comment

begin_class
specifier|public
class|class
name|PisaTimestamp
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|long
name|epochDay
decl_stmt|;
specifier|private
name|long
name|nanoOfDay
decl_stmt|;
specifier|private
name|Timestamp
name|scratchTimestamp
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|NANOSECONDS_PER_SECOND
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toNanos
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|NANOSECONDS_PER_MILLISECOND
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|NANOSECONDS_PER_DAY
init|=
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toNanos
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|MILLISECONDS_PER_SECOND
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|MILLISECONDS_PER_DAY
init|=
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|SECONDS_PER_DAY
init|=
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toSeconds
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|MIN_NANO_OF_DAY
init|=
operator|-
name|NANOSECONDS_PER_DAY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|MAX_NANO_OF_DAY
init|=
name|NANOSECONDS_PER_DAY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|BigDecimal
name|BIG_NANOSECONDS_PER_SECOND
init|=
operator|new
name|BigDecimal
argument_list|(
name|NANOSECONDS_PER_SECOND
argument_list|)
decl_stmt|;
specifier|public
name|long
name|getEpochDay
parameter_list|()
block|{
return|return
name|epochDay
return|;
block|}
specifier|public
name|long
name|getNanoOfDay
parameter_list|()
block|{
return|return
name|nanoOfDay
return|;
block|}
specifier|public
name|PisaTimestamp
parameter_list|()
block|{
name|epochDay
operator|=
literal|0
expr_stmt|;
name|nanoOfDay
operator|=
literal|0
expr_stmt|;
name|scratchTimestamp
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PisaTimestamp
parameter_list|(
name|long
name|epochDay
parameter_list|,
name|long
name|nanoOfDay
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|validateIntegrity
argument_list|(
name|epochDay
argument_list|,
name|nanoOfDay
argument_list|)
argument_list|,
literal|"epochDay "
operator|+
name|epochDay
operator|+
literal|", nanoOfDay "
operator|+
name|nanoOfDay
operator|+
literal|" not valid"
argument_list|)
expr_stmt|;
name|this
operator|.
name|epochDay
operator|=
name|epochDay
expr_stmt|;
name|this
operator|.
name|nanoOfDay
operator|=
name|nanoOfDay
expr_stmt|;
name|scratchTimestamp
operator|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PisaTimestamp
parameter_list|(
name|Timestamp
name|timestamp
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|updateFromTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|epochDay
operator|=
literal|0
expr_stmt|;
name|nanoOfDay
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * NOTE: This method validates the integrity rules between epoch day and nano of day,    * but not overflow/underflow of epoch day.  Since epoch day overflow/underflow can result    * from to client data input, that must be checked manually with<undone> as this    * class do not throw data range exceptions as a rule.  It leaves that choice to the caller.    * @param epochDay    * @param nanoOfDay    * @return true if epoch day and nano of day have integrity.    */
specifier|public
specifier|static
name|boolean
name|validateIntegrity
parameter_list|(
name|long
name|epochDay
parameter_list|,
name|long
name|nanoOfDay
parameter_list|)
block|{
comment|// Range check nano per day as invariant.
if|if
condition|(
name|nanoOfDay
operator|>=
name|NANOSECONDS_PER_DAY
operator|||
name|nanoOfDay
operator|<=
operator|-
name|NANOSECONDS_PER_DAY
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Signs of epoch day and nano of day must match.
if|if
condition|(
operator|!
operator|(
name|epochDay
operator|>=
literal|0
operator|&&
name|nanoOfDay
operator|>=
literal|0
operator|||
name|epochDay
operator|<=
literal|0
operator|&&
name|nanoOfDay
operator|<=
literal|0
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Set this PisaTimestamp from another PisaTimestamp.    * @param source    * @return this    */
specifier|public
name|PisaTimestamp
name|update
parameter_list|(
name|PisaTimestamp
name|source
parameter_list|)
block|{
name|this
operator|.
name|epochDay
operator|=
name|source
operator|.
name|epochDay
expr_stmt|;
name|this
operator|.
name|nanoOfDay
operator|=
name|source
operator|.
name|nanoOfDay
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set this PisaTimestamp from a epoch day and nano of day.    * @param epochDay    * @param nanoOfDay    * @return this    */
specifier|public
name|PisaTimestamp
name|update
parameter_list|(
name|long
name|epochDay
parameter_list|,
name|long
name|nanoOfDay
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|validateIntegrity
argument_list|(
name|epochDay
argument_list|,
name|nanoOfDay
argument_list|)
argument_list|,
literal|"epochDay "
operator|+
name|epochDay
operator|+
literal|", nanoOfDay "
operator|+
name|nanoOfDay
operator|+
literal|" not valid"
argument_list|)
expr_stmt|;
name|this
operator|.
name|epochDay
operator|=
name|epochDay
expr_stmt|;
name|this
operator|.
name|nanoOfDay
operator|=
name|nanoOfDay
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set the PisaTimestamp from a Timestamp object.    * @param timestamp    * @return this    */
specifier|public
name|PisaTimestamp
name|updateFromTimestamp
parameter_list|(
name|Timestamp
name|timestamp
parameter_list|)
block|{
name|long
name|timestampTime
init|=
name|timestamp
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|nanos
init|=
name|timestamp
operator|.
name|getNanos
argument_list|()
decl_stmt|;
comment|/**      * Since the Timestamp class always stores nanos as a positive quantity (0 .. 999,999,999),      * we have to adjust back the time (subtract) by 1,000,000,000 to get right quantity for      * our calculations below.  One thing it ensures is nanoOfDay will be negative.      */
if|if
condition|(
name|timestampTime
argument_list|<
literal|0
operator|&&
name|nanos
argument_list|>
literal|0
condition|)
block|{
name|timestampTime
operator|-=
name|MILLISECONDS_PER_SECOND
expr_stmt|;
block|}
comment|// The Timestamp class does not use the milliseconds part (always 0).  It is covered by nanos.
name|long
name|epochSeconds
init|=
name|timestampTime
operator|/
name|MILLISECONDS_PER_SECOND
decl_stmt|;
name|nanoOfDay
operator|=
operator|(
name|epochSeconds
operator|%
name|SECONDS_PER_DAY
operator|)
operator|*
name|NANOSECONDS_PER_SECOND
operator|+
name|nanos
expr_stmt|;
name|epochDay
operator|=
name|epochSeconds
operator|/
name|SECONDS_PER_DAY
operator|+
operator|(
name|nanoOfDay
operator|/
name|NANOSECONDS_PER_DAY
operator|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|validateIntegrity
argument_list|(
name|epochDay
argument_list|,
name|nanoOfDay
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set this PisaTimestamp from a timestamp milliseconds.    * @param epochMilliseconds    * @return this    */
specifier|public
name|PisaTimestamp
name|updateFromTimestampMilliseconds
parameter_list|(
name|long
name|timestampMilliseconds
parameter_list|)
block|{
comment|/**      * The Timestamp class setTime sets both the time (seconds stored as milliseconds) and      * the nanos.      */
name|scratchTimestamp
operator|.
name|setTime
argument_list|(
name|timestampMilliseconds
argument_list|)
expr_stmt|;
name|updateFromTimestamp
argument_list|(
name|scratchTimestamp
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set this PisaTimestamp from a timestamp seconds.    * @param epochMilliseconds    * @return this    */
specifier|public
name|PisaTimestamp
name|updateFromTimestampSeconds
parameter_list|(
name|long
name|timestampSeconds
parameter_list|)
block|{
return|return
name|updateFromTimestampMilliseconds
argument_list|(
name|timestampSeconds
operator|*
name|MILLISECONDS_PER_SECOND
argument_list|)
return|;
block|}
comment|/**    * Set this PisaTimestamp from a timestamp seconds.    * @param epochMilliseconds    * @return this    */
specifier|public
name|PisaTimestamp
name|updateFromTimestampSecondsWithFractionalNanoseconds
parameter_list|(
name|double
name|timestampSecondsWithFractionalNanoseconds
parameter_list|)
block|{
comment|// Otherwise, BigDecimal throws an exception.  (Support vector operations that sometimes
comment|// do work on double Not-a-Number NaN values).
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|timestampSecondsWithFractionalNanoseconds
argument_list|)
condition|)
block|{
name|timestampSecondsWithFractionalNanoseconds
operator|=
literal|0
expr_stmt|;
block|}
comment|// Algorithm used by TimestampWritable.doubleToTimestamp method.
comment|// Allocates a BigDecimal object!
name|long
name|seconds
init|=
operator|(
name|long
operator|)
name|timestampSecondsWithFractionalNanoseconds
decl_stmt|;
comment|// We must ensure the exactness of the double's fractional portion.
comment|// 0.6 as the fraction part will be converted to 0.59999... and
comment|// significantly reduce the savings from binary serialization.
name|BigDecimal
name|bd
decl_stmt|;
name|bd
operator|=
operator|new
name|BigDecimal
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|timestampSecondsWithFractionalNanoseconds
argument_list|)
argument_list|)
expr_stmt|;
name|bd
operator|=
name|bd
operator|.
name|subtract
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|seconds
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the nanos fraction.
name|bd
operator|=
name|bd
operator|.
name|multiply
argument_list|(
name|BIG_NANOSECONDS_PER_SECOND
argument_list|)
expr_stmt|;
comment|// Make nanos an integer.
name|int
name|nanos
init|=
name|bd
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|// Convert to millis
name|long
name|millis
init|=
name|seconds
operator|*
literal|1000
decl_stmt|;
if|if
condition|(
name|nanos
operator|<
literal|0
condition|)
block|{
name|millis
operator|-=
literal|1000
expr_stmt|;
name|nanos
operator|+=
literal|1000000000
expr_stmt|;
block|}
name|scratchTimestamp
operator|.
name|setTime
argument_list|(
name|millis
argument_list|)
expr_stmt|;
name|scratchTimestamp
operator|.
name|setNanos
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
name|updateFromTimestamp
argument_list|(
name|scratchTimestamp
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set this PisaTimestamp from a epoch seconds and signed nanos (-999999999 to 999999999).    * @param epochSeconds    * @param signedNanos    * @return this    */
specifier|public
name|PisaTimestamp
name|updateFromEpochSecondsAndSignedNanos
parameter_list|(
name|long
name|epochSeconds
parameter_list|,
name|int
name|signedNanos
parameter_list|)
block|{
name|long
name|nanoOfDay
init|=
operator|(
name|epochSeconds
operator|%
name|SECONDS_PER_DAY
operator|)
operator|*
name|NANOSECONDS_PER_SECOND
operator|+
name|signedNanos
decl_stmt|;
name|long
name|epochDay
init|=
name|epochSeconds
operator|/
name|SECONDS_PER_DAY
operator|+
name|nanoOfDay
operator|/
name|NANOSECONDS_PER_DAY
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|validateIntegrity
argument_list|(
name|epochDay
argument_list|,
name|nanoOfDay
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|epochDay
operator|=
name|epochDay
expr_stmt|;
name|this
operator|.
name|nanoOfDay
operator|=
name|nanoOfDay
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Set a scratch PisaTimestamp with this PisaTimestamp's values and return the scratch object.    * @param epochDay    * @param nanoOfDay    */
specifier|public
name|PisaTimestamp
name|scratchCopy
parameter_list|(
name|PisaTimestamp
name|scratch
parameter_list|)
block|{
name|scratch
operator|.
name|epochDay
operator|=
name|epochDay
expr_stmt|;
name|scratch
operator|.
name|nanoOfDay
operator|=
name|nanoOfDay
expr_stmt|;
return|return
name|scratch
return|;
block|}
comment|/**    * Set a Timestamp object from this PisaTimestamp.    * @param timestamp    */
specifier|public
name|void
name|timestampUpdate
parameter_list|(
name|Timestamp
name|timestamp
parameter_list|)
block|{
comment|/*      * java.sql.Timestamp consists of a long variable to store milliseconds and an integer variable for nanoseconds.      * The long variable is used to store only the full seconds converted to millis. For example for 1234 milliseconds,      * 1000 is stored in the long variable, and 234000000 (234 converted to nanoseconds) is stored as nanoseconds.      * The negative timestamps are also supported, but nanoseconds must be positive therefore millisecond part is      * reduced by one second.      */
name|long
name|epochSeconds
init|=
name|epochDay
operator|*
name|SECONDS_PER_DAY
operator|+
name|nanoOfDay
operator|/
name|NANOSECONDS_PER_SECOND
decl_stmt|;
name|long
name|integralSecInMillis
decl_stmt|;
name|int
name|nanos
init|=
call|(
name|int
call|)
argument_list|(
name|nanoOfDay
operator|%
name|NANOSECONDS_PER_SECOND
argument_list|)
decl_stmt|;
comment|// The nanoseconds.
if|if
condition|(
name|nanos
operator|<
literal|0
condition|)
block|{
name|nanos
operator|=
operator|(
name|int
operator|)
name|NANOSECONDS_PER_SECOND
operator|+
name|nanos
expr_stmt|;
comment|// The positive nano-part that will be added to milliseconds.
name|integralSecInMillis
operator|=
operator|(
name|epochSeconds
operator|-
literal|1
operator|)
operator|*
name|MILLISECONDS_PER_SECOND
expr_stmt|;
comment|// Reduce by one second.
block|}
else|else
block|{
name|integralSecInMillis
operator|=
name|epochSeconds
operator|*
name|MILLISECONDS_PER_SECOND
expr_stmt|;
comment|// Full seconds converted to millis.
block|}
name|timestamp
operator|.
name|setTime
argument_list|(
name|integralSecInMillis
argument_list|)
expr_stmt|;
name|timestamp
operator|.
name|setNanos
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the scratch timestamp with values from Pisa timestamp.    * @return    */
specifier|public
name|Timestamp
name|asScratchTimestamp
parameter_list|()
block|{
name|timestampUpdate
argument_list|(
name|scratchTimestamp
argument_list|)
expr_stmt|;
return|return
name|scratchTimestamp
return|;
block|}
comment|/**    * Return the scratch timestamp for use by the caller.    * @return    */
specifier|public
name|Timestamp
name|useScratchTimestamp
parameter_list|()
block|{
return|return
name|scratchTimestamp
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|PisaTimestamp
name|another
parameter_list|)
block|{
if|if
condition|(
name|epochDay
operator|==
name|another
operator|.
name|epochDay
condition|)
block|{
if|if
condition|(
name|nanoOfDay
operator|==
name|another
operator|.
name|nanoOfDay
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|(
name|nanoOfDay
operator|<
name|another
operator|.
name|nanoOfDay
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|(
name|epochDay
operator|<
name|another
operator|.
name|epochDay
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
name|int
name|compareTo
parameter_list|(
name|long
name|epochDay1
parameter_list|,
name|long
name|nanoOfDay1
parameter_list|,
name|PisaTimestamp
name|another
parameter_list|)
block|{
if|if
condition|(
name|epochDay1
operator|==
name|another
operator|.
name|epochDay
condition|)
block|{
if|if
condition|(
name|nanoOfDay1
operator|==
name|another
operator|.
name|nanoOfDay
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|(
name|nanoOfDay1
operator|<
name|another
operator|.
name|nanoOfDay
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|(
name|epochDay1
operator|<
name|another
operator|.
name|epochDay
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
name|int
name|compareTo
parameter_list|(
name|PisaTimestamp
name|pisaTimestamp1
parameter_list|,
name|long
name|epochDay2
parameter_list|,
name|long
name|nanoOfDay2
parameter_list|)
block|{
if|if
condition|(
name|pisaTimestamp1
operator|.
name|epochDay
operator|==
name|epochDay2
condition|)
block|{
if|if
condition|(
name|pisaTimestamp1
operator|.
name|nanoOfDay
operator|==
name|nanoOfDay2
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|(
name|pisaTimestamp1
operator|.
name|nanoOfDay
operator|<
name|nanoOfDay2
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|(
name|pisaTimestamp1
operator|.
name|epochDay
operator|<
name|epochDay2
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
name|int
name|compareTo
parameter_list|(
name|long
name|epochDay1
parameter_list|,
name|long
name|nanoOfDay1
parameter_list|,
name|long
name|epochDay2
parameter_list|,
name|long
name|nanoOfDay2
parameter_list|)
block|{
if|if
condition|(
name|epochDay1
operator|==
name|epochDay2
condition|)
block|{
if|if
condition|(
name|nanoOfDay1
operator|==
name|nanoOfDay2
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|(
name|nanoOfDay1
operator|<
name|nanoOfDay2
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
else|else
block|{
return|return
operator|(
name|epochDay1
operator|<
name|epochDay2
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
comment|/**    * Standard equals method override.    */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|equals
argument_list|(
operator|(
name|PisaTimestamp
operator|)
name|obj
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|PisaTimestamp
name|other
parameter_list|)
block|{
if|if
condition|(
name|epochDay
operator|==
name|other
operator|.
name|epochDay
condition|)
block|{
if|if
condition|(
name|nanoOfDay
operator|==
name|other
operator|.
name|nanoOfDay
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|add
parameter_list|(
name|PisaTimestamp
name|pisaTimestamp1
parameter_list|,
name|PisaTimestamp
name|pisaTimestamp2
parameter_list|,
name|PisaTimestamp
name|result
parameter_list|)
block|{
name|add
argument_list|(
name|pisaTimestamp1
operator|.
name|epochDay
argument_list|,
name|pisaTimestamp1
operator|.
name|nanoOfDay
argument_list|,
name|pisaTimestamp2
operator|.
name|epochDay
argument_list|,
name|pisaTimestamp2
operator|.
name|nanoOfDay
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|add
parameter_list|(
name|long
name|epochDay1
parameter_list|,
name|long
name|nanoOfDay1
parameter_list|,
name|long
name|epochDay2
parameter_list|,
name|long
name|nanoOfDay2
parameter_list|,
name|PisaTimestamp
name|result
parameter_list|)
block|{
comment|// Validate integrity rules between epoch day and nano of day.
name|Preconditions
operator|.
name|checkState
argument_list|(
name|PisaTimestamp
operator|.
name|validateIntegrity
argument_list|(
name|epochDay1
argument_list|,
name|nanoOfDay1
argument_list|)
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|PisaTimestamp
operator|.
name|validateIntegrity
argument_list|(
name|epochDay2
argument_list|,
name|nanoOfDay2
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|intermediateEpochDay
init|=
name|epochDay1
operator|+
name|epochDay2
decl_stmt|;
name|long
name|intermediateNanoOfDay
init|=
name|nanoOfDay1
operator|+
name|nanoOfDay2
decl_stmt|;
comment|// Normalize so both are positive or both are negative.
name|long
name|normalizedEpochDay
decl_stmt|;
name|long
name|normalizedNanoOfDay
decl_stmt|;
if|if
condition|(
name|intermediateEpochDay
operator|>
literal|0
operator|&&
name|intermediateNanoOfDay
operator|<
literal|0
condition|)
block|{
name|normalizedEpochDay
operator|=
name|intermediateEpochDay
operator|-
literal|1
expr_stmt|;
name|normalizedNanoOfDay
operator|=
name|intermediateNanoOfDay
operator|+
name|NANOSECONDS_PER_DAY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|intermediateEpochDay
argument_list|<
literal|0
operator|&&
name|intermediateNanoOfDay
argument_list|>
literal|0
condition|)
block|{
name|normalizedEpochDay
operator|=
name|intermediateEpochDay
operator|+
literal|1
expr_stmt|;
name|normalizedNanoOfDay
operator|=
name|intermediateNanoOfDay
operator|-
name|NANOSECONDS_PER_DAY
expr_stmt|;
block|}
else|else
block|{
name|normalizedEpochDay
operator|=
name|intermediateEpochDay
expr_stmt|;
name|normalizedNanoOfDay
operator|=
name|intermediateNanoOfDay
expr_stmt|;
block|}
name|long
name|resultEpochDay
decl_stmt|;
name|long
name|resultNanoOfDay
decl_stmt|;
if|if
condition|(
name|normalizedNanoOfDay
operator|>=
name|NANOSECONDS_PER_DAY
operator|||
name|normalizedNanoOfDay
operator|<=
operator|-
name|NANOSECONDS_PER_DAY
condition|)
block|{
comment|// Adjust for carry or overflow...
name|resultEpochDay
operator|=
name|normalizedEpochDay
operator|+
name|normalizedNanoOfDay
operator|/
name|NANOSECONDS_PER_DAY
expr_stmt|;
name|resultNanoOfDay
operator|=
name|normalizedNanoOfDay
operator|%
name|NANOSECONDS_PER_DAY
expr_stmt|;
block|}
else|else
block|{
name|resultEpochDay
operator|=
name|normalizedEpochDay
expr_stmt|;
name|resultNanoOfDay
operator|=
name|normalizedNanoOfDay
expr_stmt|;
block|}
comment|// The update method will validate integrity rules between epoch day and nano of day,
comment|// but not overflow/underflow of epoch day.
name|result
operator|.
name|update
argument_list|(
name|resultEpochDay
argument_list|,
name|resultNanoOfDay
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|addSeconds
parameter_list|(
name|PisaTimestamp
name|timestamp1
parameter_list|,
name|long
name|epochSeconds
parameter_list|,
name|PisaTimestamp
name|result
parameter_list|)
block|{
name|long
name|epochDay
init|=
name|epochSeconds
operator|/
name|SECONDS_PER_DAY
decl_stmt|;
name|long
name|nanoOfDay
init|=
operator|(
name|epochSeconds
operator|%
name|SECONDS_PER_DAY
operator|)
operator|*
name|NANOSECONDS_PER_SECOND
decl_stmt|;
name|add
argument_list|(
name|timestamp1
operator|.
name|epochDay
argument_list|,
name|timestamp1
operator|.
name|nanoOfDay
argument_list|,
name|epochDay
argument_list|,
name|nanoOfDay
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|subtract
parameter_list|(
name|PisaTimestamp
name|timestamp1
parameter_list|,
name|PisaTimestamp
name|timestamp2
parameter_list|,
name|PisaTimestamp
name|result
parameter_list|)
block|{
name|add
argument_list|(
name|timestamp1
operator|.
name|epochDay
argument_list|,
name|timestamp1
operator|.
name|nanoOfDay
argument_list|,
operator|-
name|timestamp2
operator|.
name|epochDay
argument_list|,
operator|-
name|timestamp2
operator|.
name|nanoOfDay
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|subtract
parameter_list|(
name|long
name|epochDay1
parameter_list|,
name|long
name|nanoOfDay1
parameter_list|,
name|long
name|epochDay2
parameter_list|,
name|long
name|nanoOfDay2
parameter_list|,
name|PisaTimestamp
name|result
parameter_list|)
block|{
name|add
argument_list|(
name|epochDay1
argument_list|,
name|nanoOfDay1
argument_list|,
operator|-
name|epochDay2
argument_list|,
operator|-
name|nanoOfDay2
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|subtractSeconds
parameter_list|(
name|PisaTimestamp
name|timestamp1
parameter_list|,
name|long
name|epochSeconds
parameter_list|,
name|PisaTimestamp
name|result
parameter_list|)
block|{
name|long
name|epochDay
init|=
name|epochSeconds
operator|/
name|SECONDS_PER_DAY
decl_stmt|;
name|long
name|nanoOfDay
init|=
operator|(
name|epochSeconds
operator|%
name|SECONDS_PER_DAY
operator|)
operator|*
name|NANOSECONDS_PER_SECOND
decl_stmt|;
name|add
argument_list|(
name|timestamp1
operator|.
name|epochDay
argument_list|,
name|timestamp1
operator|.
name|nanoOfDay
argument_list|,
operator|-
name|epochDay
argument_list|,
operator|-
name|nanoOfDay
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Rounds the number of milliseconds relative to the epoch down to the nearest whole number of    * seconds. 500 would round to 0, -500 would round to -1.    */
specifier|public
specifier|static
name|long
name|timestampMillisToSeconds
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
if|if
condition|(
name|millis
operator|>=
literal|0
condition|)
block|{
return|return
name|millis
operator|/
literal|1000
return|;
block|}
else|else
block|{
return|return
operator|(
name|millis
operator|-
literal|999
operator|)
operator|/
literal|1000
return|;
block|}
block|}
comment|/**    * Return a double with the integer part as the seconds and the fractional part as    * the nanoseconds the way the Timestamp class does it.    * @return seconds.nanoseconds    */
specifier|public
name|double
name|getTimestampSecondsWithFractionalNanos
parameter_list|()
block|{
comment|// Algorithm must be the same as TimestampWritable.getDouble method.
name|timestampUpdate
argument_list|(
name|scratchTimestamp
argument_list|)
expr_stmt|;
name|double
name|seconds
init|=
name|timestampMillisToSeconds
argument_list|(
name|scratchTimestamp
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|nanos
init|=
name|scratchTimestamp
operator|.
name|getNanos
argument_list|()
decl_stmt|;
name|BigDecimal
name|bigSeconds
init|=
operator|new
name|BigDecimal
argument_list|(
name|seconds
argument_list|)
decl_stmt|;
name|BigDecimal
name|bigNanos
init|=
operator|new
name|BigDecimal
argument_list|(
name|nanos
argument_list|)
operator|.
name|divide
argument_list|(
name|BIG_NANOSECONDS_PER_SECOND
argument_list|)
decl_stmt|;
return|return
name|bigSeconds
operator|.
name|add
argument_list|(
name|bigNanos
argument_list|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
comment|/**    * Return an integer as the seconds the way the Timestamp class does it.    * @return seconds.nanoseconds    */
specifier|public
name|long
name|getTimestampSeconds
parameter_list|()
block|{
comment|// Algorithm must be the same as TimestampWritable.getSeconds method.
name|timestampUpdate
argument_list|(
name|scratchTimestamp
argument_list|)
expr_stmt|;
return|return
name|timestampMillisToSeconds
argument_list|(
name|scratchTimestamp
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return an integer as the milliseconds the way the Timestamp class does it.    * @return seconds.nanoseconds    */
specifier|public
name|long
name|getTimestampMilliseconds
parameter_list|()
block|{
name|timestampUpdate
argument_list|(
name|scratchTimestamp
argument_list|)
expr_stmt|;
return|return
name|scratchTimestamp
operator|.
name|getTime
argument_list|()
return|;
block|}
comment|/**    * Return the epoch seconds.    * @return    */
specifier|public
name|long
name|getEpochSeconds
parameter_list|()
block|{
return|return
name|epochDay
operator|*
name|SECONDS_PER_DAY
operator|+
name|nanoOfDay
operator|/
name|NANOSECONDS_PER_SECOND
return|;
block|}
comment|/**    * Return the epoch seconds, given the epoch day and nano of day.    * @param epochDay    * @param nanoOfDay    * @return    */
specifier|public
specifier|static
name|long
name|getEpochSecondsFromEpochDayAndNanoOfDay
parameter_list|(
name|long
name|epochDay
parameter_list|,
name|long
name|nanoOfDay
parameter_list|)
block|{
return|return
name|epochDay
operator|*
name|SECONDS_PER_DAY
operator|+
name|nanoOfDay
operator|/
name|NANOSECONDS_PER_SECOND
return|;
block|}
comment|/**    * Return the signed nanos (-999999999 to 999999999).    * NOTE: Not the same as Timestamp class nanos (which are always positive).    */
specifier|public
name|int
name|getSignedNanos
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|nanoOfDay
operator|%
name|NANOSECONDS_PER_SECOND
argument_list|)
return|;
block|}
comment|/**    * Return the signed nanos (-999999999 to 999999999).    * NOTE: Not the same as Timestamp class nanos (which are always positive).    */
specifier|public
specifier|static
name|int
name|getSignedNanos
parameter_list|(
name|long
name|nanoOfDay
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|nanoOfDay
operator|%
name|NANOSECONDS_PER_SECOND
argument_list|)
return|;
block|}
comment|/**    * Return the epoch milliseconds.    * @return    */
specifier|public
name|long
name|getEpochMilliseconds
parameter_list|()
block|{
return|return
name|epochDay
operator|*
name|MILLISECONDS_PER_DAY
operator|+
name|nanoOfDay
operator|/
name|NANOSECONDS_PER_MILLISECOND
return|;
block|}
comment|/**    * Return the epoch seconds, given the epoch day and nano of day.    * @param epochDay    * @param nanoOfDay    * @return    */
specifier|public
specifier|static
name|long
name|getEpochMillisecondsFromEpochDayAndNanoOfDay
parameter_list|(
name|long
name|epochDay
parameter_list|,
name|long
name|nanoOfDay
parameter_list|)
block|{
return|return
name|epochDay
operator|*
name|MILLISECONDS_PER_DAY
operator|+
name|nanoOfDay
operator|/
name|NANOSECONDS_PER_MILLISECOND
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// UNDONE: We don't want to box the longs just to get the hash codes...
return|return
operator|new
name|Long
argument_list|(
name|epochDay
argument_list|)
operator|.
name|hashCode
argument_list|()
operator|^
operator|new
name|Long
argument_list|(
name|nanoOfDay
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|timestampUpdate
argument_list|(
name|scratchTimestamp
argument_list|)
expr_stmt|;
return|return
name|scratchTimestamp
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

