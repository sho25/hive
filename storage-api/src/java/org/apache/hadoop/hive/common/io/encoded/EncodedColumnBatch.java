begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A block of data for a given section of a file, similar to VRB but in encoded form.  * Stores a set of buffers for each encoded stream that is a part of each column.  */
end_comment

begin_class
specifier|public
class|class
name|EncodedColumnBatch
parameter_list|<
name|BatchKey
parameter_list|>
block|{
comment|/**    * Slice of the data for a stream for some column, stored inside MemoryBuffer's.    * ColumnStreamData can be reused for many EncodedColumnBatch-es (e.g. dictionary stream), so    * it tracks the number of such users via a refcount.    */
specifier|public
specifier|static
class|class
name|ColumnStreamData
block|{
specifier|private
name|List
argument_list|<
name|MemoryBuffer
argument_list|>
name|cacheBuffers
decl_stmt|;
comment|/** Base offset from the beginning of the indexable unit; for example, for ORC,      * offset from the CB in a compressed file, from the stream in uncompressed file. */
specifier|private
name|int
name|indexBaseOffset
init|=
literal|0
decl_stmt|;
comment|/** Reference count. */
specifier|private
name|AtomicInteger
name|refCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|cacheBuffers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|refCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|indexBaseOffset
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|incRef
parameter_list|()
block|{
name|refCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|decRef
parameter_list|()
block|{
name|int
name|i
init|=
name|refCount
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
assert|assert
name|i
operator|>=
literal|0
assert|;
return|return
name|i
return|;
block|}
specifier|public
name|List
argument_list|<
name|MemoryBuffer
argument_list|>
name|getCacheBuffers
parameter_list|()
block|{
return|return
name|cacheBuffers
return|;
block|}
specifier|public
name|void
name|setCacheBuffers
parameter_list|(
name|List
argument_list|<
name|MemoryBuffer
argument_list|>
name|cacheBuffers
parameter_list|)
block|{
name|this
operator|.
name|cacheBuffers
operator|=
name|cacheBuffers
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexBaseOffset
parameter_list|()
block|{
return|return
name|indexBaseOffset
return|;
block|}
specifier|public
name|void
name|setIndexBaseOffset
parameter_list|(
name|int
name|indexBaseOffset
parameter_list|)
block|{
name|this
operator|.
name|indexBaseOffset
operator|=
name|indexBaseOffset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|bufStr
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|cacheBuffers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MemoryBuffer
name|mb
range|:
name|cacheBuffers
control|)
block|{
name|bufStr
operator|+=
name|mb
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" with "
operator|+
name|mb
operator|.
name|getByteBufferRaw
argument_list|()
operator|.
name|remaining
argument_list|()
operator|+
literal|" bytes, "
expr_stmt|;
block|}
block|}
return|return
literal|"ColumnStreamData [cacheBuffers=["
operator|+
name|bufStr
operator|+
literal|"], indexBaseOffset="
operator|+
name|indexBaseOffset
operator|+
literal|"]"
return|;
block|}
block|}
comment|/** The key that is used to map this batch to source location. */
specifier|protected
name|BatchKey
name|batchKey
decl_stmt|;
comment|/**    * Stream data for each column that has true in the corresponding hasData position.    * For each column, streams are indexed by kind (for ORC), with missing elements being null.    */
specifier|protected
name|ColumnStreamData
index|[]
index|[]
name|columnData
decl_stmt|;
comment|/** Indicates which columns have data. Correspond to columnData elements. */
specifier|protected
name|boolean
index|[]
name|hasData
decl_stmt|;
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|hasData
operator|!=
literal|null
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|hasData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnData
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnData
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|columnData
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columnData
index|[
name|i
index|]
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|columnData
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|initColumn
parameter_list|(
name|int
name|colIx
parameter_list|,
name|int
name|streamCount
parameter_list|)
block|{
name|hasData
index|[
name|colIx
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|columnData
index|[
name|colIx
index|]
operator|==
literal|null
operator|||
name|columnData
index|[
name|colIx
index|]
operator|.
name|length
operator|!=
name|streamCount
condition|)
block|{
name|columnData
index|[
name|colIx
index|]
operator|=
operator|new
name|ColumnStreamData
index|[
name|streamCount
index|]
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EncodedColumnBatch
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|void
name|setStreamData
parameter_list|(
name|int
name|colIx
parameter_list|,
name|int
name|streamIx
parameter_list|,
name|ColumnStreamData
name|csd
parameter_list|)
block|{
assert|assert
name|hasData
index|[
name|colIx
index|]
assert|;
name|columnData
index|[
name|colIx
index|]
index|[
name|streamIx
index|]
operator|=
name|csd
expr_stmt|;
block|}
specifier|public
name|BatchKey
name|getBatchKey
parameter_list|()
block|{
return|return
name|batchKey
return|;
block|}
specifier|public
name|ColumnStreamData
index|[]
name|getColumnData
parameter_list|(
name|int
name|colIx
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasData
index|[
name|colIx
index|]
condition|)
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"No data for column "
operator|+
name|colIx
argument_list|)
throw|;
return|return
name|columnData
index|[
name|colIx
index|]
return|;
block|}
specifier|public
name|int
name|getTotalColCount
parameter_list|()
block|{
return|return
name|columnData
operator|.
name|length
return|;
comment|// Includes the columns that have no data
block|}
specifier|protected
name|void
name|resetColumnArrays
parameter_list|(
name|int
name|columnCount
parameter_list|)
block|{
if|if
condition|(
name|hasData
operator|!=
literal|null
operator|&&
name|columnCount
operator|==
name|hasData
operator|.
name|length
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|hasData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|hasData
operator|=
operator|new
name|boolean
index|[
name|columnCount
index|]
expr_stmt|;
name|ColumnStreamData
index|[]
index|[]
name|columnData
init|=
operator|new
name|ColumnStreamData
index|[
name|columnCount
index|]
index|[]
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|columnData
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|columnData
operator|.
name|length
argument_list|,
name|this
operator|.
name|columnData
operator|.
name|length
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|columnData
index|[
name|i
index|]
operator|=
name|this
operator|.
name|columnData
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|this
operator|.
name|columnData
operator|=
name|columnData
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasData
parameter_list|(
name|int
name|colIx
parameter_list|)
block|{
return|return
name|hasData
index|[
name|colIx
index|]
return|;
block|}
block|}
end_class

end_unit

