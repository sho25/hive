begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * A block of data for a given section of a file, similar to VRB but in encoded form.  * Stores a set of buffers for each encoded stream that is a part of each column.  */
end_comment

begin_class
specifier|public
class|class
name|EncodedColumnBatch
parameter_list|<
name|BatchKey
parameter_list|>
block|{
comment|/**    * Slice of the data for a stream for some column, stored inside MemoryBuffer's.    * ColumnStreamData can be reused for many EncodedColumnBatch-es (e.g. dictionary stream), so    * it tracks the number of such users via a refcount.    */
specifier|public
specifier|static
class|class
name|ColumnStreamData
block|{
specifier|private
name|List
argument_list|<
name|MemoryBuffer
argument_list|>
name|cacheBuffers
decl_stmt|;
comment|/** Base offset from the beginning of the indexable unit; for example, for ORC,      * offset from the CB in a compressed file, from the stream in uncompressed file. */
specifier|private
name|int
name|indexBaseOffset
init|=
literal|0
decl_stmt|;
comment|/** Reference count. */
specifier|private
name|AtomicInteger
name|refCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|cacheBuffers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|refCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|indexBaseOffset
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|incRef
parameter_list|()
block|{
name|refCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|decRef
parameter_list|()
block|{
name|int
name|i
init|=
name|refCount
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
assert|assert
name|i
operator|>=
literal|0
assert|;
return|return
name|i
return|;
block|}
specifier|public
name|List
argument_list|<
name|MemoryBuffer
argument_list|>
name|getCacheBuffers
parameter_list|()
block|{
return|return
name|cacheBuffers
return|;
block|}
specifier|public
name|void
name|setCacheBuffers
parameter_list|(
name|List
argument_list|<
name|MemoryBuffer
argument_list|>
name|cacheBuffers
parameter_list|)
block|{
name|this
operator|.
name|cacheBuffers
operator|=
name|cacheBuffers
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexBaseOffset
parameter_list|()
block|{
return|return
name|indexBaseOffset
return|;
block|}
specifier|public
name|void
name|setIndexBaseOffset
parameter_list|(
name|int
name|indexBaseOffset
parameter_list|)
block|{
name|this
operator|.
name|indexBaseOffset
operator|=
name|indexBaseOffset
expr_stmt|;
block|}
block|}
comment|/** The key that is used to map this batch to source location. */
specifier|protected
name|BatchKey
name|batchKey
decl_stmt|;
comment|/**    * Stream data for each stream, for each included column.    * For each column, streams are indexed by kind, with missing elements being null.    */
specifier|protected
name|ColumnStreamData
index|[]
index|[]
name|columnData
decl_stmt|;
comment|/** Column indexes included in the batch. Correspond to columnData elements. */
specifier|protected
name|int
index|[]
name|columnIxs
decl_stmt|;
comment|// TODO: Maybe remove when solving the pooling issue.
comment|/** Generation version necessary to sync pooling reuse with the fact that two separate threads    * operate on batches - the one that decodes them, and potential separate thread w/a "stop" call    * that cleans them up. We don't want the decode thread to use the ECB that was thrown out and    * reused, so it remembers the version and checks it after making sure no cleanup thread can ever    * get to this ECB anymore. All this sync is ONLY needed because of high level cache code. */
specifier|public
name|int
name|version
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|columnData
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnData
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|columnData
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columnData
index|[
name|i
index|]
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|columnData
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|initColumn
parameter_list|(
name|int
name|colIxMod
parameter_list|,
name|int
name|colIx
parameter_list|,
name|int
name|streamCount
parameter_list|)
block|{
name|columnIxs
index|[
name|colIxMod
index|]
operator|=
name|colIx
expr_stmt|;
if|if
condition|(
name|columnData
index|[
name|colIxMod
index|]
operator|==
literal|null
operator|||
name|columnData
index|[
name|colIxMod
index|]
operator|.
name|length
operator|!=
name|streamCount
condition|)
block|{
name|columnData
index|[
name|colIxMod
index|]
operator|=
operator|new
name|ColumnStreamData
index|[
name|streamCount
index|]
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setStreamData
parameter_list|(
name|int
name|colIxMod
parameter_list|,
name|int
name|streamKind
parameter_list|,
name|ColumnStreamData
name|csd
parameter_list|)
block|{
name|columnData
index|[
name|colIxMod
index|]
index|[
name|streamKind
index|]
operator|=
name|csd
expr_stmt|;
block|}
specifier|public
name|void
name|setAllStreamsData
parameter_list|(
name|int
name|colIxMod
parameter_list|,
name|int
name|colIx
parameter_list|,
name|ColumnStreamData
index|[]
name|sbs
parameter_list|)
block|{
name|columnIxs
index|[
name|colIxMod
index|]
operator|=
name|colIx
expr_stmt|;
name|columnData
index|[
name|colIxMod
index|]
operator|=
name|sbs
expr_stmt|;
block|}
specifier|public
name|BatchKey
name|getBatchKey
parameter_list|()
block|{
return|return
name|batchKey
return|;
block|}
specifier|public
name|ColumnStreamData
index|[]
index|[]
name|getColumnData
parameter_list|()
block|{
return|return
name|columnData
return|;
block|}
specifier|public
name|int
index|[]
name|getColumnIxs
parameter_list|()
block|{
return|return
name|columnIxs
return|;
block|}
specifier|protected
name|void
name|resetColumnArrays
parameter_list|(
name|int
name|columnCount
parameter_list|)
block|{
if|if
condition|(
name|columnIxs
operator|!=
literal|null
operator|&&
name|columnCount
operator|==
name|columnIxs
operator|.
name|length
condition|)
return|return;
name|columnIxs
operator|=
operator|new
name|int
index|[
name|columnCount
index|]
expr_stmt|;
name|ColumnStreamData
index|[]
index|[]
name|columnData
init|=
operator|new
name|ColumnStreamData
index|[
name|columnCount
index|]
index|[]
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|columnData
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|columnData
operator|.
name|length
argument_list|,
name|this
operator|.
name|columnData
operator|.
name|length
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|columnData
index|[
name|i
index|]
operator|=
name|this
operator|.
name|columnData
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|this
operator|.
name|columnData
operator|=
name|columnData
expr_stmt|;
block|}
block|}
end_class

end_unit

