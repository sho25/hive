begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link ValidWriteIdList} for use by the compactor.  *  * Compaction should only include txns up to smallest open txn (exclussive).  * There may be aborted write ids in the snapshot represented by this ValidCompactorWriteIdList.  * Thus {@link #isWriteIdRangeValid(long, long)} returns NONE for any range that includes any unresolved  * write ids.  Any write id above {@code highWatermark} is unresolved.  * These produce the logic we need to assure that the compactor only sees records less than the lowest  * open write ids when choosing which files to compact, but that it still ignores aborted  * records when compacting.  *  * See org.apache.hadoop.hive.metastore.txn.TxnUtils#createValidCompactTxnList() for proper  * way to construct this.  */
end_comment

begin_class
specifier|public
class|class
name|ValidCompactorWriteIdList
extends|extends
name|ValidReaderWriteIdList
block|{
specifier|public
name|ValidCompactorWriteIdList
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ValidCompactorWriteIdList
parameter_list|(
name|String
name|tableName
parameter_list|,
name|long
index|[]
name|abortedWriteIdList
parameter_list|,
name|BitSet
name|abortedBits
parameter_list|,
name|long
name|highWatermark
parameter_list|)
block|{
name|this
argument_list|(
name|tableName
argument_list|,
name|abortedWriteIdList
argument_list|,
name|abortedBits
argument_list|,
name|highWatermark
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param tableName table which is under compaction. Full name of format<db_name>.<table_name>    * @param abortedWriteIdList list of all aborted write ids    * @param abortedBits bitset marking whether the corresponding write id is aborted    * @param highWatermark highest committed write id to be considered for compaction,    *                      equivalently (lowest_open_write_id - 1).    * @param minOpenWriteId minimum write ID which maps to a open transaction    */
specifier|public
name|ValidCompactorWriteIdList
parameter_list|(
name|String
name|tableName
parameter_list|,
name|long
index|[]
name|abortedWriteIdList
parameter_list|,
name|BitSet
name|abortedBits
parameter_list|,
name|long
name|highWatermark
parameter_list|,
name|long
name|minOpenWriteId
parameter_list|)
block|{
comment|// abortedBits should be all true as everything in exceptions are aborted txns
name|super
argument_list|(
name|tableName
argument_list|,
name|abortedWriteIdList
argument_list|,
name|abortedBits
argument_list|,
name|highWatermark
argument_list|,
name|minOpenWriteId
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|exceptions
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return;
block|}
comment|//now that exceptions (aka abortedTxnList) is sorted
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|this
operator|.
name|exceptions
argument_list|,
name|highWatermark
argument_list|)
decl_stmt|;
name|int
name|lastElementPos
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|int
name|insertionPoint
init|=
operator|-
name|idx
operator|-
literal|1
decl_stmt|;
comment|//see Arrays.binarySearch() JavaDoc
name|lastElementPos
operator|=
name|insertionPoint
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|lastElementPos
operator|=
name|idx
expr_stmt|;
block|}
comment|/*      * ensure that we throw out any exceptions above highWatermark to make      * {@link #isWriteIdValid(long)} faster      */
name|this
operator|.
name|exceptions
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|this
operator|.
name|exceptions
argument_list|,
name|lastElementPos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ValidCompactorWriteIdList
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns org.apache.hadoop.hive.common.ValidWriteIdList.RangeResponse.ALL if all write ids in    * the range are resolved and RangeResponse.NONE otherwise    */
annotation|@
name|Override
specifier|public
name|RangeResponse
name|isWriteIdRangeValid
parameter_list|(
name|long
name|minWriteId
parameter_list|,
name|long
name|maxWriteId
parameter_list|)
block|{
return|return
name|highWatermark
operator|>=
name|maxWriteId
condition|?
name|RangeResponse
operator|.
name|ALL
else|:
name|RangeResponse
operator|.
name|NONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWriteIdAborted
parameter_list|(
name|long
name|writeId
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|exceptions
argument_list|,
name|writeId
argument_list|)
operator|>=
literal|0
return|;
block|}
block|}
end_class

end_unit

