begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Used for identifying the related object of the buffer stored in cache.  * Comes in 3 flavours to optimize for minimal memory overhead:  * - TableCacheTag for tables without partitions: DB/table level  * - SinglePartitionCacheTag for tables with 1 partition level: DB/table/1st_partition  * - MultiPartitionCacheTag for tables with>1 partition levels:  *     DB/table/1st_partition/.../nth_partition .  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CacheTag
implements|implements
name|Comparable
argument_list|<
name|CacheTag
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
comment|/**    * Prepended by DB name and '.' .    */
specifier|protected
specifier|final
name|String
name|tableName
decl_stmt|;
specifier|private
name|CacheTag
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
operator|.
name|intern
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|CacheTag
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|tableName
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|CacheTag
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|compareTo
argument_list|(
operator|(
name|CacheTag
operator|)
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|res
init|=
name|tableName
operator|.
name|hashCode
argument_list|()
decl_stmt|;
return|return
name|res
return|;
block|}
specifier|public
specifier|static
specifier|final
name|CacheTag
name|build
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
return|return
operator|new
name|TableCacheTag
argument_list|(
name|tableName
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
name|CacheTag
name|build
parameter_list|(
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partDescMap
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|tableName
argument_list|)
operator|||
name|partDescMap
operator|==
literal|null
operator|||
name|partDescMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|String
index|[]
name|partDescs
init|=
operator|new
name|String
index|[
name|partDescMap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|partDescMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|partDescs
index|[
name|i
operator|++
index|]
operator|=
name|encodePartDesc
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partDescs
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|SinglePartitionCacheTag
argument_list|(
name|tableName
argument_list|,
name|partDescs
index|[
literal|0
index|]
argument_list|)
return|;
block|}
else|else
block|{
comment|// In this case it must be>1
return|return
operator|new
name|MultiPartitionCacheTag
argument_list|(
name|tableName
argument_list|,
name|partDescs
argument_list|)
return|;
block|}
block|}
comment|/**    * Constructs a (fake) parent CacheTag instance by walking back in the hierarchy i.e. stepping    * from inner to outer partition levels, then producing a CacheTag for the table and finally    * the DB.    */
specifier|public
specifier|static
specifier|final
name|CacheTag
name|createParentCacheTag
parameter_list|(
name|CacheTag
name|tag
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
if|if
condition|(
name|tag
operator|instanceof
name|MultiPartitionCacheTag
condition|)
block|{
name|MultiPartitionCacheTag
name|multiPartitionCacheTag
init|=
operator|(
name|MultiPartitionCacheTag
operator|)
name|tag
decl_stmt|;
if|if
condition|(
name|multiPartitionCacheTag
operator|.
name|partitionDesc
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|String
index|[]
name|subList
init|=
operator|new
name|String
index|[
name|multiPartitionCacheTag
operator|.
name|partitionDesc
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subList
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|subList
index|[
name|i
index|]
operator|=
name|multiPartitionCacheTag
operator|.
name|partitionDesc
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
operator|new
name|MultiPartitionCacheTag
argument_list|(
name|multiPartitionCacheTag
operator|.
name|tableName
argument_list|,
name|subList
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|SinglePartitionCacheTag
argument_list|(
name|multiPartitionCacheTag
operator|.
name|tableName
argument_list|,
name|multiPartitionCacheTag
operator|.
name|partitionDesc
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|tag
operator|instanceof
name|SinglePartitionCacheTag
condition|)
block|{
return|return
operator|new
name|TableCacheTag
argument_list|(
name|tag
operator|.
name|tableName
argument_list|)
return|;
block|}
else|else
block|{
comment|// DB level
name|int
name|ix
init|=
name|tag
operator|.
name|tableName
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|ix
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|TableCacheTag
argument_list|(
name|tag
operator|.
name|tableName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ix
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * CacheTag for tables without partitions.    */
specifier|public
specifier|static
specifier|final
class|class
name|TableCacheTag
extends|extends
name|CacheTag
block|{
specifier|private
name|TableCacheTag
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|CacheTag
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|SinglePartitionCacheTag
operator|||
name|o
operator|instanceof
name|MultiPartitionCacheTag
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * CacheTag for tables with partitions.    */
specifier|public
specifier|abstract
specifier|static
class|class
name|PartitionCacheTag
extends|extends
name|CacheTag
block|{
specifier|private
name|PartitionCacheTag
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a pretty printed String version of the partitionDesc in the format of p1=v1/p2=v2...      * @return the pretty printed String      */
specifier|public
specifier|abstract
name|String
name|partitionDescToString
parameter_list|()
function_decl|;
comment|/**      * Returns a map of partition keys and values built from the information of this CacheTag.      * @return the map      */
specifier|public
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartitionDescMap
parameter_list|()
function_decl|;
block|}
comment|/**    * CacheTag for tables with exactly one partition level.    */
specifier|public
specifier|static
specifier|final
class|class
name|SinglePartitionCacheTag
extends|extends
name|PartitionCacheTag
block|{
specifier|private
specifier|final
name|String
name|partitionDesc
decl_stmt|;
specifier|private
name|SinglePartitionCacheTag
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|partitionDesc
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|partitionDesc
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|this
operator|.
name|partitionDesc
operator|=
name|partitionDesc
operator|.
name|intern
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|partitionDescToString
parameter_list|()
block|{
return|return
name|String
operator|.
name|join
argument_list|(
literal|"="
argument_list|,
name|CacheTag
operator|.
name|decodePartDesc
argument_list|(
name|partitionDesc
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartitionDescMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|partition
init|=
name|CacheTag
operator|.
name|decodePartDesc
argument_list|(
name|partitionDesc
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|partition
index|[
literal|0
index|]
argument_list|,
name|partition
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|CacheTag
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|TableCacheTag
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|MultiPartitionCacheTag
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|SinglePartitionCacheTag
name|other
init|=
operator|(
name|SinglePartitionCacheTag
operator|)
name|o
decl_stmt|;
name|int
name|tableNameDiff
init|=
name|super
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableNameDiff
operator|!=
literal|0
condition|)
block|{
return|return
name|tableNameDiff
return|;
block|}
else|else
block|{
return|return
name|partitionDesc
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|partitionDesc
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|partitionDesc
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|/**    * CacheTag for tables with more than one partition level.    */
specifier|public
specifier|static
specifier|final
class|class
name|MultiPartitionCacheTag
extends|extends
name|PartitionCacheTag
block|{
specifier|private
specifier|final
name|String
index|[]
name|partitionDesc
decl_stmt|;
specifier|private
name|MultiPartitionCacheTag
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
index|[]
name|partitionDesc
parameter_list|)
block|{
name|super
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitionDesc
operator|!=
literal|null
operator|&&
name|partitionDesc
operator|.
name|length
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionDesc
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|partitionDesc
index|[
name|i
index|]
operator|=
name|partitionDesc
index|[
name|i
index|]
operator|.
name|intern
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|partitionDesc
operator|=
name|partitionDesc
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|CacheTag
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|TableCacheTag
operator|||
name|o
operator|instanceof
name|SinglePartitionCacheTag
condition|)
block|{
return|return
literal|1
return|;
block|}
name|MultiPartitionCacheTag
name|other
init|=
operator|(
name|MultiPartitionCacheTag
operator|)
name|o
decl_stmt|;
name|int
name|tableNameDiff
init|=
name|super
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableNameDiff
operator|!=
literal|0
condition|)
block|{
return|return
name|tableNameDiff
return|;
block|}
else|else
block|{
name|int
name|sizeDiff
init|=
name|partitionDesc
operator|.
name|length
operator|-
name|other
operator|.
name|partitionDesc
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|sizeDiff
operator|!=
literal|0
condition|)
block|{
return|return
name|sizeDiff
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionDesc
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|int
name|partDiff
init|=
name|partitionDesc
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|partitionDesc
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|partDiff
operator|!=
literal|0
condition|)
block|{
return|return
name|partDiff
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|res
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|partitionDesc
control|)
block|{
name|res
operator|+=
name|p
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|partitionDescToString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partDesc
range|:
name|partitionDesc
control|)
block|{
name|String
index|[]
name|partition
init|=
name|CacheTag
operator|.
name|decodePartDesc
argument_list|(
name|partDesc
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|partition
index|[
literal|0
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|partition
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPartitionDescMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partDesc
range|:
name|partitionDesc
control|)
block|{
name|String
index|[]
name|partition
init|=
name|CacheTag
operator|.
name|decodePartDesc
argument_list|(
name|partDesc
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|partition
index|[
literal|0
index|]
argument_list|,
name|partition
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/**    * Combines partition key and value Strings into one by encoding each and concating with '=' .    * @param partKey    * @param partVal    * @return    */
specifier|private
specifier|static
name|String
name|encodePartDesc
parameter_list|(
name|String
name|partKey
parameter_list|,
name|String
name|partVal
parameter_list|)
block|{
try|try
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|partKey
argument_list|,
name|ENCODING
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|partVal
argument_list|,
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Splits and decodes an a partition desc String encoded by encodePartDesc().    * @param partDesc    * @return    */
specifier|private
specifier|static
name|String
index|[]
name|decodePartDesc
parameter_list|(
name|String
name|partDesc
parameter_list|)
block|{
try|try
block|{
name|String
index|[]
name|encodedPartDesc
init|=
name|partDesc
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
assert|assert
name|encodedPartDesc
operator|.
name|length
operator|==
literal|2
assert|;
return|return
operator|new
name|String
index|[]
block|{
name|URLDecoder
operator|.
name|decode
argument_list|(
name|encodedPartDesc
index|[
literal|0
index|]
argument_list|,
name|ENCODING
argument_list|)
block|,
name|URLDecoder
operator|.
name|decode
argument_list|(
name|encodedPartDesc
index|[
literal|1
index|]
argument_list|,
name|ENCODING
argument_list|)
block|}
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

