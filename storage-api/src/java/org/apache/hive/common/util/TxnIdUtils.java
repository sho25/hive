begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TxnIdUtils
block|{
comment|/**    * Check if 2 ValidWriteIdLists are at an equivalent commit point.    */
specifier|public
specifier|static
name|boolean
name|checkEquivalentWriteIds
parameter_list|(
name|ValidWriteIdList
name|a
parameter_list|,
name|ValidWriteIdList
name|b
parameter_list|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|getTableName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|b
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ValidWriteIdList
name|newer
init|=
name|a
decl_stmt|;
name|ValidWriteIdList
name|older
init|=
name|b
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getHighWatermark
argument_list|()
operator|<
name|b
operator|.
name|getHighWatermark
argument_list|()
condition|)
block|{
name|newer
operator|=
name|b
expr_stmt|;
name|older
operator|=
name|a
expr_stmt|;
block|}
return|return
name|checkEquivalentCommittedIds
argument_list|(
name|older
operator|.
name|getHighWatermark
argument_list|()
argument_list|,
name|older
operator|.
name|getInvalidWriteIds
argument_list|()
argument_list|,
name|newer
operator|.
name|getHighWatermark
argument_list|()
argument_list|,
name|newer
operator|.
name|getInvalidWriteIds
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Check the min open ID/highwater mark/exceptions list to see if 2 ID lists are at the same commit point.    * This can also be used for ValidTxnList as well as ValidWriteIdList.    */
specifier|private
specifier|static
name|boolean
name|checkEquivalentCommittedIds
parameter_list|(
name|long
name|oldHWM
parameter_list|,
name|long
index|[]
name|oldInvalidIds
parameter_list|,
name|long
name|newHWM
parameter_list|,
name|long
index|[]
name|newInvalidIds
parameter_list|)
block|{
comment|// There should be no valid txns in newer list that are not also in older.
comment|// - All values in oldInvalidIds should also be in newInvalidIds.
comment|// - if oldHWM< newHWM, then all IDs between oldHWM .. newHWM should exist in newInvalidTxns.
comment|//   A Gap in the sequence means a committed txn in newer list (lists are not equivalent)
if|if
condition|(
name|newInvalidIds
operator|.
name|length
operator|<
name|oldInvalidIds
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check that the values in the older list are also in newer. Lists should already be sorted.
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|oldInvalidIds
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
if|if
condition|(
name|oldInvalidIds
index|[
name|idx
index|]
operator|!=
name|newInvalidIds
index|[
name|idx
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// If older committed state is equivalent to newer state, then there should be no committed IDs
comment|// between oldHWM and newHWM, and newInvalidIds should have exactly (newHWM - oldHWM)
comment|// more entries than oldInvalidIds.
name|long
name|oldNewListSizeDifference
init|=
name|newInvalidIds
operator|.
name|length
operator|-
name|oldInvalidIds
operator|.
name|length
decl_stmt|;
name|long
name|oldNewHWMDifference
init|=
name|newHWM
operator|-
name|oldHWM
decl_stmt|;
if|if
condition|(
name|oldNewHWMDifference
operator|!=
name|oldNewListSizeDifference
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

