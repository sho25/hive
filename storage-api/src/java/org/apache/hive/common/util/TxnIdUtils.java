begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidWriteIdList
import|;
end_import

begin_class
specifier|public
class|class
name|TxnIdUtils
block|{
comment|/**    * Check if 2 ValidWriteIdLists are at an equivalent commit point.    */
specifier|public
specifier|static
name|boolean
name|checkEquivalentWriteIds
parameter_list|(
name|ValidWriteIdList
name|a
parameter_list|,
name|ValidWriteIdList
name|b
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|==
literal|0
return|;
block|}
comment|/*** Compare the freshness of two ValidWriteIdList    * @param a    * @param b    * @return 0, if a and b are equivalent    * 1, if a is more recent    * -1, if b is more recent    ***/
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|ValidWriteIdList
name|a
parameter_list|,
name|ValidWriteIdList
name|b
parameter_list|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|getTableName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|b
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|a
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
return|;
block|}
comment|// The algorithm assumes invalidWriteIds are sorted and values are less or equal than hwm, here is how
comment|// the algorithm works:
comment|// 1. Compare two invalidWriteIds until one the list ends, difference means the mismatch writeid is
comment|//    committed in one ValidWriteIdList but not the other, the comparison end
comment|// 2. Every writeid from the last writeid in the short invalidWriteIds till its hwm should be committed
comment|//    in the other ValidWriteIdList, otherwise the comparison end
comment|// 3. Every writeid from lower hwm to higher hwm should be invalid, otherwise, the comparison end
name|int
name|minLen
init|=
name|Math
operator|.
name|min
argument_list|(
name|a
operator|.
name|getInvalidWriteIds
argument_list|()
operator|.
name|length
argument_list|,
name|b
operator|.
name|getInvalidWriteIds
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minLen
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getInvalidWriteIds
argument_list|()
index|[
name|i
index|]
operator|==
name|b
operator|.
name|getInvalidWriteIds
argument_list|()
index|[
name|i
index|]
condition|)
block|{
continue|continue;
block|}
return|return
name|a
operator|.
name|getInvalidWriteIds
argument_list|()
index|[
name|i
index|]
operator|>
name|b
operator|.
name|getInvalidWriteIds
argument_list|()
index|[
name|i
index|]
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|a
operator|.
name|getInvalidWriteIds
argument_list|()
operator|.
name|length
operator|==
name|b
operator|.
name|getInvalidWriteIds
argument_list|()
operator|.
name|length
condition|)
block|{
return|return
name|Long
operator|.
name|signum
argument_list|(
name|a
operator|.
name|getHighWatermark
argument_list|()
operator|-
name|b
operator|.
name|getHighWatermark
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|a
operator|.
name|getInvalidWriteIds
argument_list|()
operator|.
name|length
operator|==
name|minLen
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|getHighWatermark
argument_list|()
operator|!=
name|b
operator|.
name|getInvalidWriteIds
argument_list|()
index|[
name|minLen
index|]
operator|-
literal|1
condition|)
block|{
return|return
name|Long
operator|.
name|signum
argument_list|(
name|a
operator|.
name|getHighWatermark
argument_list|()
operator|-
operator|(
name|b
operator|.
name|getInvalidWriteIds
argument_list|()
index|[
name|minLen
index|]
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
if|if
condition|(
name|allInvalidFrom
argument_list|(
name|b
operator|.
name|getInvalidWriteIds
argument_list|()
argument_list|,
name|minLen
argument_list|,
name|b
operator|.
name|getHighWatermark
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|b
operator|.
name|getHighWatermark
argument_list|()
operator|!=
name|a
operator|.
name|getInvalidWriteIds
argument_list|()
index|[
name|minLen
index|]
operator|-
literal|1
condition|)
block|{
return|return
name|Long
operator|.
name|signum
argument_list|(
name|b
operator|.
name|getHighWatermark
argument_list|()
operator|-
operator|(
name|a
operator|.
name|getInvalidWriteIds
argument_list|()
index|[
name|minLen
index|]
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
if|if
condition|(
name|allInvalidFrom
argument_list|(
name|a
operator|.
name|getInvalidWriteIds
argument_list|()
argument_list|,
name|minLen
argument_list|,
name|a
operator|.
name|getHighWatermark
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|allInvalidFrom
parameter_list|(
name|long
index|[]
name|invalidIds
parameter_list|,
name|int
name|start
parameter_list|,
name|long
name|hwm
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
operator|+
literal|1
init|;
name|i
operator|<
name|invalidIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|invalidIds
index|[
name|i
index|]
operator|!=
operator|(
name|invalidIds
index|[
name|i
operator|-
literal|1
index|]
operator|+
literal|1
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|invalidIds
index|[
name|invalidIds
operator|.
name|length
operator|-
literal|1
index|]
operator|==
name|hwm
return|;
block|}
block|}
end_class

end_unit

