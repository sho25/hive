begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * BloomFilter is a probabilistic data structure for set membership check. BloomFilters are  * highly space efficient when compared to using a HashSet. Because of the probabilistic nature of  * bloom filter false positive (element not present in bloom filter but test() says true) are  * possible but false negatives are not possible (if element is present then test() will never  * say false). The false positive probability is configurable (default: 5%) depending on which  * storage requirement may increase or decrease. Lower the false positive probability greater  * is the space requirement.  * Bloom filters are sensitive to number of elements that will be inserted in the bloom filter.  * During the creation of bloom filter expected number of entries must be specified. If the number  * of insertions exceed the specified initial number of entries then false positive probability will  * increase accordingly.  *  * Internally, this implementation of bloom filter uses Murmur3 fast non-cryptographic hash  * algorithm. Although Murmur2 is slightly faster than Murmur3 in Java, it suffers from hash  * collisions for specific sequence of repeating bytes. Check the following link for more info  * https://code.google.com/p/smhasher/wiki/MurmurHash2Flaw  */
end_comment

begin_class
specifier|public
class|class
name|BloomFilter
block|{
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_FPP
init|=
literal|0.05
decl_stmt|;
specifier|protected
name|BitSet
name|bitSet
decl_stmt|;
specifier|protected
name|int
name|numBits
decl_stmt|;
specifier|protected
name|int
name|numHashFunctions
decl_stmt|;
specifier|public
name|BloomFilter
parameter_list|()
block|{   }
specifier|public
name|BloomFilter
parameter_list|(
name|long
name|expectedEntries
parameter_list|)
block|{
name|this
argument_list|(
name|expectedEntries
argument_list|,
name|DEFAULT_FPP
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|checkArgument
parameter_list|(
name|boolean
name|expression
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expression
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
specifier|public
name|BloomFilter
parameter_list|(
name|long
name|expectedEntries
parameter_list|,
name|double
name|fpp
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|expectedEntries
operator|>
literal|0
argument_list|,
literal|"expectedEntries should be> 0"
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|fpp
operator|>
literal|0.0
operator|&&
name|fpp
operator|<
literal|1.0
argument_list|,
literal|"False positive probability should be> 0.0&< 1.0"
argument_list|)
expr_stmt|;
name|int
name|nb
init|=
name|optimalNumOfBits
argument_list|(
name|expectedEntries
argument_list|,
name|fpp
argument_list|)
decl_stmt|;
comment|// make 'm' multiple of 64
name|this
operator|.
name|numBits
operator|=
name|nb
operator|+
operator|(
name|Long
operator|.
name|SIZE
operator|-
operator|(
name|nb
operator|%
name|Long
operator|.
name|SIZE
operator|)
operator|)
expr_stmt|;
name|this
operator|.
name|numHashFunctions
operator|=
name|optimalNumOfHashFunctions
argument_list|(
name|expectedEntries
argument_list|,
name|numBits
argument_list|)
expr_stmt|;
name|this
operator|.
name|bitSet
operator|=
operator|new
name|BitSet
argument_list|(
name|numBits
argument_list|)
expr_stmt|;
block|}
comment|/**    * A constructor to support rebuilding the BloomFilter from a serialized representation.    * @param bits    * @param numBits    * @param numFuncs    */
specifier|public
name|BloomFilter
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|bits
parameter_list|,
name|int
name|numBits
parameter_list|,
name|int
name|numFuncs
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|long
index|[]
name|copied
init|=
operator|new
name|long
index|[
name|bits
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|copied
index|[
name|i
index|]
operator|=
name|bits
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|bitSet
operator|=
operator|new
name|BitSet
argument_list|(
name|copied
argument_list|)
expr_stmt|;
name|this
operator|.
name|numBits
operator|=
name|numBits
expr_stmt|;
name|numHashFunctions
operator|=
name|numFuncs
expr_stmt|;
block|}
specifier|static
name|int
name|optimalNumOfHashFunctions
parameter_list|(
name|long
name|n
parameter_list|,
name|long
name|m
parameter_list|)
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|m
operator|/
name|n
operator|*
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|int
name|optimalNumOfBits
parameter_list|(
name|long
name|n
parameter_list|,
name|double
name|p
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
operator|-
name|n
operator|*
name|Math
operator|.
name|log
argument_list|(
name|p
argument_list|)
operator|/
operator|(
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
operator|*
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
operator|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|byte
index|[]
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|addBytes
argument_list|(
name|val
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addBytes
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
name|val
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addBytes
parameter_list|(
name|byte
index|[]
name|val
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// We use the trick mentioned in "Less Hashing, Same Performance: Building a Better Bloom Filter"
comment|// by Kirsch et.al. From abstract 'only two hash functions are necessary to effectively
comment|// implement a Bloom filter without any loss in the asymptotic false positive probability'
comment|// Lets split up 64-bit hashcode into two 32-bit hash codes and employ the technique mentioned
comment|// in the above paper
name|long
name|hash64
init|=
name|val
operator|==
literal|null
condition|?
name|Murmur3
operator|.
name|NULL_HASHCODE
else|:
name|Murmur3
operator|.
name|hash64
argument_list|(
name|val
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|addHash
argument_list|(
name|hash64
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addHash
parameter_list|(
name|long
name|hash64
parameter_list|)
block|{
name|int
name|hash1
init|=
operator|(
name|int
operator|)
name|hash64
decl_stmt|;
name|int
name|hash2
init|=
call|(
name|int
call|)
argument_list|(
name|hash64
operator|>>>
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numHashFunctions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|combinedHash
init|=
name|hash1
operator|+
operator|(
name|i
operator|*
name|hash2
operator|)
decl_stmt|;
comment|// hashcode should be positive, flip all the bits if it's negative
if|if
condition|(
name|combinedHash
operator|<
literal|0
condition|)
block|{
name|combinedHash
operator|=
operator|~
name|combinedHash
expr_stmt|;
block|}
name|int
name|pos
init|=
name|combinedHash
operator|%
name|numBits
decl_stmt|;
name|bitSet
operator|.
name|set
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addString
parameter_list|(
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|add
argument_list|(
name|val
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addLong
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|addHash
argument_list|(
name|getLongHash
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDouble
parameter_list|(
name|double
name|val
parameter_list|)
block|{
name|addLong
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|test
parameter_list|(
name|byte
index|[]
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
name|testBytes
argument_list|(
name|val
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
name|testBytes
argument_list|(
name|val
argument_list|,
literal|0
argument_list|,
name|val
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|testBytes
parameter_list|(
name|byte
index|[]
name|val
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|long
name|hash64
init|=
name|val
operator|==
literal|null
condition|?
name|Murmur3
operator|.
name|NULL_HASHCODE
else|:
name|Murmur3
operator|.
name|hash64
argument_list|(
name|val
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
name|testHash
argument_list|(
name|hash64
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|testHash
parameter_list|(
name|long
name|hash64
parameter_list|)
block|{
name|int
name|hash1
init|=
operator|(
name|int
operator|)
name|hash64
decl_stmt|;
name|int
name|hash2
init|=
call|(
name|int
call|)
argument_list|(
name|hash64
operator|>>>
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numHashFunctions
condition|;
name|i
operator|++
control|)
block|{
name|int
name|combinedHash
init|=
name|hash1
operator|+
operator|(
name|i
operator|*
name|hash2
operator|)
decl_stmt|;
comment|// hashcode should be positive, flip all the bits if it's negative
if|if
condition|(
name|combinedHash
operator|<
literal|0
condition|)
block|{
name|combinedHash
operator|=
operator|~
name|combinedHash
expr_stmt|;
block|}
name|int
name|pos
init|=
name|combinedHash
operator|%
name|numBits
decl_stmt|;
if|if
condition|(
operator|!
name|bitSet
operator|.
name|get
argument_list|(
name|pos
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|testString
parameter_list|(
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
return|return
name|test
argument_list|(
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|test
argument_list|(
name|val
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|testLong
parameter_list|(
name|long
name|val
parameter_list|)
block|{
return|return
name|testHash
argument_list|(
name|getLongHash
argument_list|(
name|val
argument_list|)
argument_list|)
return|;
block|}
comment|// Thomas Wang's integer hash function
comment|// http://web.archive.org/web/20071223173210/http://www.concentric.net/~Ttwang/tech/inthash.htm
specifier|private
name|long
name|getLongHash
parameter_list|(
name|long
name|key
parameter_list|)
block|{
name|key
operator|=
operator|(
operator|~
name|key
operator|)
operator|+
operator|(
name|key
operator|<<
literal|21
operator|)
expr_stmt|;
comment|// key = (key<< 21) - key - 1;
name|key
operator|=
name|key
operator|^
operator|(
name|key
operator|>>
literal|24
operator|)
expr_stmt|;
name|key
operator|=
operator|(
name|key
operator|+
operator|(
name|key
operator|<<
literal|3
operator|)
operator|)
operator|+
operator|(
name|key
operator|<<
literal|8
operator|)
expr_stmt|;
comment|// key * 265
name|key
operator|=
name|key
operator|^
operator|(
name|key
operator|>>
literal|14
operator|)
expr_stmt|;
name|key
operator|=
operator|(
name|key
operator|+
operator|(
name|key
operator|<<
literal|2
operator|)
operator|)
operator|+
operator|(
name|key
operator|<<
literal|4
operator|)
expr_stmt|;
comment|// key * 21
name|key
operator|=
name|key
operator|^
operator|(
name|key
operator|>>
literal|28
operator|)
expr_stmt|;
name|key
operator|=
name|key
operator|+
operator|(
name|key
operator|<<
literal|31
operator|)
expr_stmt|;
return|return
name|key
return|;
block|}
specifier|public
name|boolean
name|testDouble
parameter_list|(
name|double
name|val
parameter_list|)
block|{
return|return
name|testLong
argument_list|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|val
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|long
name|sizeInBytes
parameter_list|()
block|{
return|return
name|getBitSize
argument_list|()
operator|/
literal|8
return|;
block|}
specifier|public
name|int
name|getBitSize
parameter_list|()
block|{
return|return
name|bitSet
operator|.
name|getData
argument_list|()
operator|.
name|length
operator|*
name|Long
operator|.
name|SIZE
return|;
block|}
specifier|public
name|int
name|getNumHashFunctions
parameter_list|()
block|{
return|return
name|numHashFunctions
return|;
block|}
specifier|public
name|long
index|[]
name|getBitSet
parameter_list|()
block|{
return|return
name|bitSet
operator|.
name|getData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"m: "
operator|+
name|numBits
operator|+
literal|" k: "
operator|+
name|numHashFunctions
return|;
block|}
comment|/**    * Merge the specified bloom filter with current bloom filter.    *    * @param that - bloom filter to merge    */
specifier|public
name|void
name|merge
parameter_list|(
name|BloomFilter
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|!=
name|that
operator|&&
name|this
operator|.
name|numBits
operator|==
name|that
operator|.
name|numBits
operator|&&
name|this
operator|.
name|numHashFunctions
operator|==
name|that
operator|.
name|numHashFunctions
condition|)
block|{
name|this
operator|.
name|bitSet
operator|.
name|putAll
argument_list|(
name|that
operator|.
name|bitSet
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"BloomFilters are not compatible for merging."
operator|+
literal|" this - "
operator|+
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|" that - "
operator|+
name|that
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|bitSet
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**    * Bare metal bit set implementation. For performance reasons, this implementation does not check    * for index bounds nor expand the bit set size if the specified index is greater than the size.    */
specifier|public
class|class
name|BitSet
block|{
specifier|private
specifier|final
name|long
index|[]
name|data
decl_stmt|;
specifier|public
name|BitSet
parameter_list|(
name|long
name|bits
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|long
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|bits
operator|/
operator|(
name|double
operator|)
name|Long
operator|.
name|SIZE
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deserialize long array as bit set.      *      * @param data - bit array      */
specifier|public
name|BitSet
parameter_list|(
name|long
index|[]
name|data
parameter_list|)
block|{
assert|assert
name|data
operator|.
name|length
operator|>
literal|0
operator|:
literal|"data length is zero!"
assert|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
comment|/**      * Sets the bit at specified index.      *      * @param index - position      */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|data
index|[
name|index
operator|>>>
literal|6
index|]
operator||=
operator|(
literal|1L
operator|<<
name|index
operator|)
expr_stmt|;
block|}
comment|/**      * Returns true if the bit is set in the specified index.      *      * @param index - position      * @return - value at the bit position      */
specifier|public
name|boolean
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|data
index|[
name|index
operator|>>>
literal|6
index|]
operator|&
operator|(
literal|1L
operator|<<
name|index
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/**      * Number of bits      */
specifier|public
name|long
name|bitSize
parameter_list|()
block|{
return|return
operator|(
name|long
operator|)
name|data
operator|.
name|length
operator|*
name|Long
operator|.
name|SIZE
return|;
block|}
specifier|public
name|long
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
comment|/**      * Combines the two BitArrays using bitwise OR.      */
specifier|public
name|void
name|putAll
parameter_list|(
name|BitSet
name|array
parameter_list|)
block|{
assert|assert
name|data
operator|.
name|length
operator|==
name|array
operator|.
name|data
operator|.
name|length
operator|:
literal|"BitArrays must be of equal length ("
operator|+
name|data
operator|.
name|length
operator|+
literal|"!= "
operator|+
name|array
operator|.
name|data
operator|.
name|length
operator|+
literal|")"
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator||=
name|array
operator|.
name|data
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
comment|/**      * Clear the bit set.      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

