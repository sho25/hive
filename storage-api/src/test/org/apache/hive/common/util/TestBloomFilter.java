begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|TestBloomFilter
block|{
specifier|private
specifier|static
specifier|final
name|int
name|COUNT
init|=
literal|100
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|123
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBloomIllegalArg1
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBloomIllegalArg2
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|0
argument_list|,
literal|0.1
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBloomIllegalArg3
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|1
argument_list|,
literal|0.0
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBloomIllegalArg4
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|1
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBloomIllegalArg5
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomNumBits
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|1
argument_list|,
literal|0.03
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|72
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|10
argument_list|,
literal|0.03
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|729
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|100
argument_list|,
literal|0.03
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7298
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|1000
argument_list|,
literal|0.03
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|72984
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|10000
argument_list|,
literal|0.03
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|729844
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|100000
argument_list|,
literal|0.03
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7298440
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|1000000
argument_list|,
literal|0.03
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6235224
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|1000000
argument_list|,
literal|0.05
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1870567268
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|300000000
argument_list|,
literal|0.05
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1437758756
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|300000000
argument_list|,
literal|0.1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|432808512
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|300000000
argument_list|,
literal|0.5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1393332198
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|3000000000L
argument_list|,
literal|0.8
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|657882327
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|3000000000L
argument_list|,
literal|0.9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfBits
argument_list|(
literal|3000000000L
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomNumHashFunctions
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
literal|1000
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
literal|10000
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
literal|100000
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|BloomFilter
operator|.
name|optimalNumOfHashFunctions
argument_list|(
literal|1000000
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomFilterBytes
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|byte
index|[]
name|val1
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
decl_stmt|;
name|byte
index|[]
name|val2
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
decl_stmt|;
name|byte
index|[]
name|val3
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|val1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|val2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|val3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|randVal
init|=
operator|new
name|byte
index|[
name|COUNT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|rand
operator|.
name|nextBytes
argument_list|(
name|randVal
argument_list|)
expr_stmt|;
name|bf
operator|.
name|add
argument_list|(
name|randVal
argument_list|)
expr_stmt|;
block|}
comment|// last value should be present
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|randVal
argument_list|)
argument_list|)
expr_stmt|;
comment|// most likely this value should not exist
name|randVal
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|randVal
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|randVal
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|randVal
index|[
literal|3
index|]
operator|=
literal|0
expr_stmt|;
name|randVal
index|[
literal|4
index|]
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|test
argument_list|(
name|randVal
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7800
argument_list|,
name|bf
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomFilterByte
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|byte
name|val
init|=
name|Byte
operator|.
name|MIN_VALUE
decl_stmt|;
name|byte
name|val1
init|=
literal|1
decl_stmt|;
name|byte
name|val2
init|=
literal|2
decl_stmt|;
name|byte
name|val3
init|=
name|Byte
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|byte
name|randVal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|randVal
operator|=
operator|(
name|byte
operator|)
name|rand
operator|.
name|nextInt
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|randVal
argument_list|)
expr_stmt|;
block|}
comment|// last value should be present
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|randVal
argument_list|)
argument_list|)
expr_stmt|;
comment|// most likely this value should not exist
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|120
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7800
argument_list|,
name|bf
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomFilterInt
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
name|int
name|val1
init|=
literal|1
decl_stmt|;
name|int
name|val2
init|=
literal|2
decl_stmt|;
name|int
name|val3
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|randVal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|randVal
operator|=
name|rand
operator|.
name|nextInt
argument_list|()
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|randVal
argument_list|)
expr_stmt|;
block|}
comment|// last value should be present
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|randVal
argument_list|)
argument_list|)
expr_stmt|;
comment|// most likely this value should not exist
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
operator|-
literal|120
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7800
argument_list|,
name|bf
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomFilterLong
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|long
name|val1
init|=
literal|1
decl_stmt|;
name|long
name|val2
init|=
literal|2
decl_stmt|;
name|long
name|val3
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|val3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|randVal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|randVal
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
name|bf
operator|.
name|addLong
argument_list|(
name|randVal
argument_list|)
expr_stmt|;
block|}
comment|// last value should be present
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
name|randVal
argument_list|)
argument_list|)
expr_stmt|;
comment|// most likely this value should not exist
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testLong
argument_list|(
operator|-
literal|120
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7800
argument_list|,
name|bf
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomFilterFloat
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|float
name|val
init|=
name|Float
operator|.
name|MIN_VALUE
decl_stmt|;
name|float
name|val1
init|=
literal|1.1f
decl_stmt|;
name|float
name|val2
init|=
literal|2.2f
decl_stmt|;
name|float
name|val3
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addDouble
argument_list|(
name|val1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addDouble
argument_list|(
name|val2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addDouble
argument_list|(
name|val3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|randVal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|randVal
operator|=
name|rand
operator|.
name|nextFloat
argument_list|()
expr_stmt|;
name|bf
operator|.
name|addDouble
argument_list|(
name|randVal
argument_list|)
expr_stmt|;
block|}
comment|// last value should be present
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|randVal
argument_list|)
argument_list|)
expr_stmt|;
comment|// most likely this value should not exist
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
operator|-
literal|120.2f
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7800
argument_list|,
name|bf
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomFilterDouble
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|double
name|val
init|=
name|Double
operator|.
name|MIN_VALUE
decl_stmt|;
name|double
name|val1
init|=
literal|1.1d
decl_stmt|;
name|double
name|val2
init|=
literal|2.2d
decl_stmt|;
name|double
name|val3
init|=
name|Double
operator|.
name|MAX_VALUE
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addDouble
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addDouble
argument_list|(
name|val1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addDouble
argument_list|(
name|val2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addDouble
argument_list|(
name|val3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|randVal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|randVal
operator|=
name|rand
operator|.
name|nextDouble
argument_list|()
expr_stmt|;
name|bf
operator|.
name|addDouble
argument_list|(
name|randVal
argument_list|)
expr_stmt|;
block|}
comment|// last value should be present
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
name|randVal
argument_list|)
argument_list|)
expr_stmt|;
comment|// most likely this value should not exist
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testDouble
argument_list|(
operator|-
literal|120.2d
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7800
argument_list|,
name|bf
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomFilterString
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
name|String
name|val
init|=
literal|"bloo"
decl_stmt|;
name|String
name|val1
init|=
literal|"bloom fil"
decl_stmt|;
name|String
name|val2
init|=
literal|"bloom filter"
decl_stmt|;
name|String
name|val3
init|=
literal|"cuckoo filter"
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addString
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addString
argument_list|(
name|val1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addString
argument_list|(
name|val2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addString
argument_list|(
name|val3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|randVal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|randVal
operator|=
name|rand
operator|.
name|nextLong
argument_list|()
expr_stmt|;
name|bf
operator|.
name|addString
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|randVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// last value should be present
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|randVal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// most likely this value should not exist
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
operator|-
literal|120
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|77944
argument_list|,
name|bf
operator|.
name|sizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMerge
parameter_list|()
block|{
name|BloomFilter
name|bf
init|=
operator|new
name|BloomFilter
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|String
name|val
init|=
literal|"bloo"
decl_stmt|;
name|String
name|val1
init|=
literal|"bloom fil"
decl_stmt|;
name|String
name|val2
init|=
literal|"bloom filter"
decl_stmt|;
name|String
name|val3
init|=
literal|"cuckoo filter"
decl_stmt|;
name|bf
operator|.
name|addString
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addString
argument_list|(
name|val1
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addString
argument_list|(
name|val2
argument_list|)
expr_stmt|;
name|bf
operator|.
name|addString
argument_list|(
name|val3
argument_list|)
expr_stmt|;
name|BloomFilter
name|bf2
init|=
operator|new
name|BloomFilter
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|String
name|v
init|=
literal|"2_bloo"
decl_stmt|;
name|String
name|v1
init|=
literal|"2_bloom fil"
decl_stmt|;
name|String
name|v2
init|=
literal|"2_bloom filter"
decl_stmt|;
name|String
name|v3
init|=
literal|"2_cuckoo filter"
decl_stmt|;
name|bf2
operator|.
name|addString
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|bf2
operator|.
name|addString
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|bf2
operator|.
name|addString
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|bf2
operator|.
name|addString
argument_list|(
name|v3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|v3
argument_list|)
argument_list|)
expr_stmt|;
name|bf
operator|.
name|merge
argument_list|(
name|bf2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|val3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|v1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|bf
operator|.
name|testString
argument_list|(
name|v3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|BloomFilter
name|bf1
init|=
operator|new
name|BloomFilter
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|String
index|[]
name|inputs
init|=
block|{
literal|"bloo"
block|,
literal|"bloom fil"
block|,
literal|"bloom filter"
block|,
literal|"cuckoo filter"
block|,     }
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|inputs
control|)
block|{
name|bf1
operator|.
name|addString
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Serialize/deserialize
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|BloomFilter
operator|.
name|serialize
argument_list|(
name|bytesOut
argument_list|,
name|bf1
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bytesIn
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytesOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|BloomFilter
name|bf2
init|=
name|BloomFilter
operator|.
name|deserialize
argument_list|(
name|bytesIn
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|inputs
control|)
block|{
name|assertEquals
argument_list|(
literal|"Testing bf1 with "
operator|+
name|val
argument_list|,
literal|true
argument_list|,
name|bf1
operator|.
name|testString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Testing bf2 with "
operator|+
name|val
argument_list|,
literal|true
argument_list|,
name|bf2
operator|.
name|testString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeBloomFilterBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|BloomFilter
name|bf1
init|=
operator|new
name|BloomFilter
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|BloomFilter
name|bf2
init|=
operator|new
name|BloomFilter
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|String
index|[]
name|inputs1
init|=
block|{
literal|"bloo"
block|,
literal|"bloom fil"
block|,
literal|"bloom filter"
block|,
literal|"cuckoo filter"
block|,     }
decl_stmt|;
name|String
index|[]
name|inputs2
init|=
block|{
literal|"2_bloo"
block|,
literal|"2_bloom fil"
block|,
literal|"2_bloom filter"
block|,
literal|"2_cuckoo filter"
block|,     }
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|inputs1
control|)
block|{
name|bf1
operator|.
name|addString
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|val
range|:
name|inputs2
control|)
block|{
name|bf2
operator|.
name|addString
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|BloomFilter
operator|.
name|serialize
argument_list|(
name|bytesOut
argument_list|,
name|bf1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bf1Bytes
init|=
name|bytesOut
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|bytesOut
operator|.
name|reset
argument_list|()
expr_stmt|;
name|BloomFilter
operator|.
name|serialize
argument_list|(
name|bytesOut
argument_list|,
name|bf1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bf2Bytes
init|=
name|bytesOut
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// Merge bytes
name|BloomFilter
operator|.
name|mergeBloomFilterBytes
argument_list|(
name|bf1Bytes
argument_list|,
literal|0
argument_list|,
name|bf1Bytes
operator|.
name|length
argument_list|,
name|bf2Bytes
argument_list|,
literal|0
argument_list|,
name|bf2Bytes
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Deserialize and test
name|ByteArrayInputStream
name|bytesIn
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bf1Bytes
argument_list|,
literal|0
argument_list|,
name|bf1Bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|BloomFilter
name|bfMerged
init|=
name|BloomFilter
operator|.
name|deserialize
argument_list|(
name|bytesIn
argument_list|)
decl_stmt|;
comment|// All values should pass test
for|for
control|(
name|String
name|val
range|:
name|inputs1
control|)
block|{
name|bfMerged
operator|.
name|addString
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|val
range|:
name|inputs2
control|)
block|{
name|bfMerged
operator|.
name|addString
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeBloomFilterBytesFailureCases
parameter_list|()
throws|throws
name|Exception
block|{
name|BloomFilter
name|bf1
init|=
operator|new
name|BloomFilter
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|BloomFilter
name|bf2
init|=
operator|new
name|BloomFilter
argument_list|(
literal|200
argument_list|)
decl_stmt|;
comment|// Create bloom filter with same number of bits, but different # hash functions
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|bits
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|bf1
operator|.
name|getBitSet
argument_list|()
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|bits
operator|.
name|add
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
name|BloomFilter
name|bf3
init|=
operator|new
name|BloomFilter
argument_list|(
name|bits
argument_list|,
name|bf1
operator|.
name|getBitSize
argument_list|()
argument_list|,
name|bf1
operator|.
name|getNumHashFunctions
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Serialize to bytes
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|BloomFilter
operator|.
name|serialize
argument_list|(
name|bytesOut
argument_list|,
name|bf1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bf1Bytes
init|=
name|bytesOut
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|bytesOut
operator|.
name|reset
argument_list|()
expr_stmt|;
name|BloomFilter
operator|.
name|serialize
argument_list|(
name|bytesOut
argument_list|,
name|bf2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bf2Bytes
init|=
name|bytesOut
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|bytesOut
operator|.
name|reset
argument_list|()
expr_stmt|;
name|BloomFilter
operator|.
name|serialize
argument_list|(
name|bytesOut
argument_list|,
name|bf3
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bf3Bytes
init|=
name|bytesOut
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
comment|// this should fail
name|BloomFilter
operator|.
name|mergeBloomFilterBytes
argument_list|(
name|bf1Bytes
argument_list|,
literal|0
argument_list|,
name|bf1Bytes
operator|.
name|length
argument_list|,
name|bf2Bytes
argument_list|,
literal|0
argument_list|,
name|bf2Bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception not encountered"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|err
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
comment|// this should fail
name|BloomFilter
operator|.
name|mergeBloomFilterBytes
argument_list|(
name|bf1Bytes
argument_list|,
literal|0
argument_list|,
name|bf1Bytes
operator|.
name|length
argument_list|,
name|bf3Bytes
argument_list|,
literal|0
argument_list|,
name|bf3Bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception not encountered"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|err
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

