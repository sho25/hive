begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidReaderWriteIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestTxnIdUtils
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCheckEquivalentWriteIds
parameter_list|()
throws|throws
name|Exception
block|{
name|ValidReaderWriteIdList
name|id1
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id1
argument_list|)
argument_list|)
expr_stmt|;
comment|// write ID with additional uncommitted IDs. Should match.
name|ValidReaderWriteIdList
name|id2
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id2
argument_list|,
name|id1
argument_list|)
argument_list|)
expr_stmt|;
comment|// ID 1 has been committed, all others open
name|ValidReaderWriteIdList
name|id3
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id3
argument_list|,
name|id2
argument_list|)
argument_list|)
expr_stmt|;
comment|// ID 5 has been committed, all others open
name|ValidReaderWriteIdList
name|id4
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id4
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id4
argument_list|,
name|id2
argument_list|)
argument_list|)
expr_stmt|;
comment|// ID 8 was committed, all others open
name|ValidReaderWriteIdList
name|id5
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|,
literal|7
block|}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id5
argument_list|,
name|id2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Different table name
name|ValidReaderWriteIdList
name|id6
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.tab2"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id6
argument_list|)
argument_list|)
expr_stmt|;
comment|// WriteID for table1, way in the future
name|ValidReaderWriteIdList
name|id7
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|100
block|,
literal|101
block|,
literal|105
block|}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|105
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id7
argument_list|)
argument_list|)
expr_stmt|;
comment|// Before any activity on the table, no open IDs
name|ValidReaderWriteIdList
name|id8
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id8
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id8
argument_list|,
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id8
argument_list|,
name|id3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id8
argument_list|,
name|id7
argument_list|)
argument_list|)
expr_stmt|;
comment|// ID 5 committed, no open IDs
name|ValidReaderWriteIdList
name|id9
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ValidReaderWriteIdList
name|id10
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id9
argument_list|,
name|id10
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id8
argument_list|,
name|id9
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id9
argument_list|,
name|id8
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id9
argument_list|,
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id9
argument_list|,
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id9
argument_list|,
name|id7
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckEquivalentWriteIds2
parameter_list|()
throws|throws
name|Exception
block|{
name|ValidReaderWriteIdList
name|id1
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ValidReaderWriteIdList
name|id2
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|6
block|}
argument_list|,
name|BitSet
operator|.
name|valueOf
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|)
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|ValidReaderWriteIdList
name|id3
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|6
block|,
literal|7
block|}
argument_list|,
name|BitSet
operator|.
name|valueOf
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|ValidReaderWriteIdList
name|id4
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{
literal|6
block|,
literal|7
block|,
literal|8
block|}
argument_list|,
name|BitSet
operator|.
name|valueOf
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id2
argument_list|,
name|id3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id2
argument_list|,
name|id4
argument_list|)
argument_list|)
expr_stmt|;
comment|// If IDs 6,7,8 were all aborted and the metadata cleaned up, we would lose the record
comment|// of the aborted IDs. In this case we are not able to determine the new WriteIDList has
comment|// an equivalent commit state compared to the previous WriteIDLists.
name|ValidReaderWriteIdList
name|id5
init|=
operator|new
name|ValidReaderWriteIdList
argument_list|(
literal|"default.table1"
argument_list|,
operator|new
name|long
index|[]
block|{}
argument_list|,
operator|new
name|BitSet
argument_list|()
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id1
argument_list|,
name|id5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id2
argument_list|,
name|id5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id3
argument_list|,
name|id5
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|TxnIdUtils
operator|.
name|checkEquivalentWriteIds
argument_list|(
name|id4
argument_list|,
name|id5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

