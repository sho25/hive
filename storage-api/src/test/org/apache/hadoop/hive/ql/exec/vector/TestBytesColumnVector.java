begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestBytesColumnVector
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSmallBufferReuse
parameter_list|()
block|{
name|BytesColumnVector
name|col
init|=
operator|new
name|BytesColumnVector
argument_list|()
decl_stmt|;
name|int
name|smallWriteSize
init|=
literal|1024
decl_stmt|;
name|int
name|largeWriteSize
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|2
decl_stmt|;
name|int
name|rowIdx
init|=
literal|0
decl_stmt|;
name|int
name|bytesWrittenToBytes1
init|=
literal|0
decl_stmt|;
name|col
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Initial write (small value)
name|byte
index|[]
name|bytes1
init|=
name|writeToBytesColumnVector
argument_list|(
name|rowIdx
argument_list|,
name|col
argument_list|,
name|smallWriteSize
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
decl_stmt|;
name|bytesWrittenToBytes1
operator|+=
name|smallWriteSize
expr_stmt|;
comment|// Write a large value. This should use a different byte buffer
name|rowIdx
operator|++
expr_stmt|;
name|byte
index|[]
name|bytes2
init|=
name|writeToBytesColumnVector
argument_list|(
name|rowIdx
argument_list|,
name|col
argument_list|,
name|largeWriteSize
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bytes1
operator|==
name|bytes2
argument_list|)
expr_stmt|;
comment|// Another small write. smallBuffer should be re-used for this write
name|rowIdx
operator|++
expr_stmt|;
name|byte
index|[]
name|bytes3
init|=
name|writeToBytesColumnVector
argument_list|(
name|rowIdx
argument_list|,
name|col
argument_list|,
name|smallWriteSize
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
decl_stmt|;
name|bytesWrittenToBytes1
operator|+=
name|smallWriteSize
expr_stmt|;
name|assertTrue
argument_list|(
name|bytes1
operator|==
name|bytes3
argument_list|)
expr_stmt|;
comment|// Write another large value. This should use a different byte buffer
name|rowIdx
operator|++
expr_stmt|;
name|byte
index|[]
name|bytes4
init|=
name|writeToBytesColumnVector
argument_list|(
name|rowIdx
argument_list|,
name|col
argument_list|,
name|largeWriteSize
argument_list|,
operator|(
name|byte
operator|)
literal|3
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bytes1
operator|==
name|bytes4
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bytes2
operator|==
name|bytes4
argument_list|)
expr_stmt|;
comment|// Eventually enough small writes should result in another buffer getting created
name|boolean
name|gotNewBuffer
init|=
literal|false
decl_stmt|;
comment|// Test is dependent on getting a new buffer within 1MB.
comment|// This may need to change as the implementation changes.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
operator|++
name|i
control|)
block|{
name|rowIdx
operator|++
expr_stmt|;
name|byte
index|[]
name|currBytes
init|=
name|writeToBytesColumnVector
argument_list|(
name|rowIdx
argument_list|,
name|col
argument_list|,
name|smallWriteSize
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|currBytes
operator|==
name|bytes1
condition|)
block|{
name|bytesWrittenToBytes1
operator|+=
name|smallWriteSize
expr_stmt|;
block|}
else|else
block|{
name|gotNewBuffer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|gotNewBuffer
argument_list|)
expr_stmt|;
comment|// All small writes to the first buffer should be in contiguous memory
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytesWrittenToBytes1
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|bytes1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Write a value to the column vector, and return back the byte buffer used.
specifier|private
specifier|static
name|byte
index|[]
name|writeToBytesColumnVector
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|BytesColumnVector
name|col
parameter_list|,
name|int
name|writeSize
parameter_list|,
name|byte
name|val
parameter_list|)
block|{
name|col
operator|.
name|ensureValPreallocated
argument_list|(
name|writeSize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|col
operator|.
name|getValPreallocatedBytes
argument_list|()
decl_stmt|;
name|int
name|startIdx
init|=
name|col
operator|.
name|getValPreallocatedStart
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|bytes
argument_list|,
name|startIdx
argument_list|,
name|startIdx
operator|+
name|writeSize
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|col
operator|.
name|setValPreallocated
argument_list|(
name|rowIdx
argument_list|,
name|writeSize
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
block|}
end_class

end_unit

