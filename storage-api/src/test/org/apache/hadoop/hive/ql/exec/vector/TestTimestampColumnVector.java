begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|RandomTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for ListColumnVector  */
end_comment

begin_class
specifier|public
class|class
name|TestTimestampColumnVector
block|{
specifier|private
specifier|static
specifier|final
name|GregorianCalendar
name|PROLEPTIC_GREGORIAN_CALENDAR_UTC
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GregorianCalendar
name|GREGORIAN_CALENDAR_UTC
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|PROLEPTIC_GREGORIAN_TIMESTAMP_FORMATTER_UTC
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|GREGORIAN_TIMESTAMP_FORMATTER_UTC
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
static|static
block|{
name|PROLEPTIC_GREGORIAN_CALENDAR_UTC
operator|.
name|setGregorianChange
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|PROLEPTIC_GREGORIAN_TIMESTAMP_FORMATTER_UTC
operator|.
name|setCalendar
argument_list|(
name|PROLEPTIC_GREGORIAN_CALENDAR_UTC
argument_list|)
expr_stmt|;
name|GREGORIAN_TIMESTAMP_FORMATTER_UTC
operator|.
name|setCalendar
argument_list|(
name|GREGORIAN_CALENDAR_UTC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSaveAndRetrieve
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|TimestampColumnVector
name|timestampColVector
init|=
operator|new
name|TimestampColumnVector
argument_list|()
decl_stmt|;
name|Timestamp
index|[]
name|randTimestamps
init|=
operator|new
name|Timestamp
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Timestamp
name|randTimestamp
init|=
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|randTimestamps
index|[
name|i
index|]
operator|=
name|randTimestamp
expr_stmt|;
name|timestampColVector
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|randTimestamp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Timestamp
name|retrievedTimestamp
init|=
name|timestampColVector
operator|.
name|asScratchTimestamp
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Timestamp
name|randTimestamp
init|=
name|randTimestamps
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|retrievedTimestamp
operator|.
name|equals
argument_list|(
name|randTimestamp
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampCompare
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|TimestampColumnVector
name|timestampColVector
init|=
operator|new
name|TimestampColumnVector
argument_list|()
decl_stmt|;
name|Timestamp
index|[]
name|randTimestamps
init|=
operator|new
name|Timestamp
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
name|Timestamp
index|[]
name|candTimestamps
init|=
operator|new
name|Timestamp
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
name|int
index|[]
name|compareToLeftRights
init|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
name|int
index|[]
name|compareToRightLefts
init|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Timestamp
name|randTimestamp
init|=
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|randTimestamps
index|[
name|i
index|]
operator|=
name|randTimestamp
expr_stmt|;
name|timestampColVector
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|randTimestamp
argument_list|)
expr_stmt|;
name|Timestamp
name|candTimestamp
init|=
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|candTimestamps
index|[
name|i
index|]
operator|=
name|candTimestamp
expr_stmt|;
name|compareToLeftRights
index|[
name|i
index|]
operator|=
name|candTimestamp
operator|.
name|compareTo
argument_list|(
name|randTimestamp
argument_list|)
expr_stmt|;
name|compareToRightLefts
index|[
name|i
index|]
operator|=
name|randTimestamp
operator|.
name|compareTo
argument_list|(
name|candTimestamp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Timestamp
name|retrievedTimestamp
init|=
name|timestampColVector
operator|.
name|asScratchTimestamp
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Timestamp
name|randTimestamp
init|=
name|randTimestamps
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|retrievedTimestamp
operator|.
name|equals
argument_list|(
name|randTimestamp
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Timestamp
name|candTimestamp
init|=
name|candTimestamps
index|[
name|i
index|]
decl_stmt|;
name|int
name|compareToLeftRight
init|=
name|timestampColVector
operator|.
name|compareTo
argument_list|(
name|candTimestamp
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareToLeftRight
operator|!=
name|compareToLeftRights
index|[
name|i
index|]
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|int
name|compareToRightLeft
init|=
name|timestampColVector
operator|.
name|compareTo
argument_list|(
name|i
argument_list|,
name|candTimestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareToRightLeft
operator|!=
name|compareToRightLefts
index|[
name|i
index|]
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test case for TimestampColumnVector's changeCalendar    *   16768: hybrid: 2015-11-29 proleptic: 2015-11-29    * -141418: hybrid: 1582-10-24 proleptic: 1582-10-24    * -141427: hybrid: 1582-10-15 proleptic: 1582-10-15    * -141428: hybrid: 1582-10-04 proleptic: 1582-10-14    * -141430: hybrid: 1582-10-02 proleptic: 1582-10-12    * -141437: hybrid: 1582-09-25 proleptic: 1582-10-05    * -141438: hybrid: 1582-09-24 proleptic: 1582-10-04    * -499952: hybrid: 0601-03-04 proleptic: 0601-03-07    * -499955: hybrid: 0601-03-01 proleptic: 0601-03-04    */
annotation|@
name|Test
specifier|public
name|void
name|testProlepticCalendar
parameter_list|()
block|{
name|int
name|randomMillis
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// from hybrid internal representation to proleptic
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
literal|16768
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"2015-11-29"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|141418
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"1582-10-24"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|141427
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"1582-10-15"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|141428
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"1582-10-04"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|141430
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"1582-10-02"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|141437
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"1582-09-25"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|499952
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"0601-03-04"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|499955
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"0601-03-01"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// from proleptic internal representation to hybrid
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
literal|16768
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"2015-11-29"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|141418
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"1582-10-24"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|141427
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"1582-10-15"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|141428
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"1582-10-24"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|141430
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"1582-10-22"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|141437
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"1582-10-15"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|499952
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"0601-03-07"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setAndVerifyProlepticUpdate
argument_list|(
name|getMillisForDayPlusMillis
argument_list|(
operator|-
literal|499955
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
name|appendTime
argument_list|(
literal|"0601-03-04"
argument_list|,
name|randomMillis
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|getMillisForDayPlusMillis
parameter_list|(
name|int
name|days
parameter_list|,
name|int
name|millis
parameter_list|)
block|{
return|return
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
name|days
argument_list|)
operator|+
name|millis
return|;
block|}
specifier|private
name|String
name|appendTime
parameter_list|(
name|String
name|datePart
parameter_list|,
name|int
name|millis
parameter_list|)
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm:ss.SSS"
argument_list|)
decl_stmt|;
name|sdf
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|datePart
operator|+
literal|" "
operator|+
name|sdf
operator|.
name|format
argument_list|(
name|millis
argument_list|)
return|;
block|}
specifier|private
name|void
name|setAndVerifyProlepticUpdate
parameter_list|(
name|long
name|epochMilli
parameter_list|,
name|String
name|expected
parameter_list|,
name|boolean
name|originalUseProleptic
parameter_list|,
name|boolean
name|newUseProleptic
parameter_list|)
block|{
name|DateFormat
name|testFormatter
init|=
name|getTestFormatter
argument_list|(
name|newUseProleptic
argument_list|)
decl_stmt|;
name|Instant
name|instant
init|=
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|epochMilli
argument_list|)
decl_stmt|;
comment|// instant is always a moment in UTC
name|int
name|nanos
init|=
name|instant
operator|.
name|getNano
argument_list|()
operator|+
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|999999
argument_list|)
operator|+
literal|0
decl_stmt|;
name|TimestampColumnVector
name|timestampColVector
init|=
operator|new
name|TimestampColumnVector
argument_list|()
operator|.
name|setUsingProlepticCalendar
argument_list|(
name|originalUseProleptic
argument_list|)
decl_stmt|;
name|timestampColVector
operator|.
name|time
index|[
literal|0
index|]
operator|=
name|instant
operator|.
name|toEpochMilli
argument_list|()
expr_stmt|;
name|timestampColVector
operator|.
name|nanos
index|[
literal|0
index|]
operator|=
name|nanos
expr_stmt|;
name|timestampColVector
operator|.
name|changeCalendar
argument_list|(
name|newUseProleptic
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|testFormatter
operator|.
name|format
argument_list|(
name|Timestamp
operator|.
name|from
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|timestampColVector
operator|.
name|time
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nanos
argument_list|,
name|timestampColVector
operator|.
name|nanos
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// preserving nanos
block|}
specifier|private
name|DateFormat
name|getTestFormatter
parameter_list|(
name|boolean
name|useProleptic
parameter_list|)
block|{
name|DateFormat
name|testFormatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss.SSS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useProleptic
condition|)
block|{
name|testFormatter
operator|.
name|setCalendar
argument_list|(
name|PROLEPTIC_GREGORIAN_CALENDAR_UTC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testFormatter
operator|.
name|setCalendar
argument_list|(
name|GREGORIAN_CALENDAR_UTC
argument_list|)
expr_stmt|;
block|}
name|testFormatter
operator|.
name|setLenient
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|testFormatter
return|;
block|}
block|}
end_class

end_unit

