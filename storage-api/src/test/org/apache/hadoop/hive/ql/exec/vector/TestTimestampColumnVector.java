begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|RandomTypeUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test for ListColumnVector  */
end_comment

begin_class
specifier|public
class|class
name|TestTimestampColumnVector
block|{
specifier|private
specifier|static
name|int
name|TEST_COUNT
init|=
literal|5000
decl_stmt|;
specifier|private
specifier|static
name|int
name|fake
init|=
literal|0
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSaveAndRetrieve
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|TimestampColumnVector
name|timestampColVector
init|=
operator|new
name|TimestampColumnVector
argument_list|()
decl_stmt|;
name|Timestamp
index|[]
name|randTimestamps
init|=
operator|new
name|Timestamp
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Timestamp
name|randTimestamp
init|=
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|randTimestamps
index|[
name|i
index|]
operator|=
name|randTimestamp
expr_stmt|;
name|timestampColVector
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|randTimestamp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Timestamp
name|retrievedTimestamp
init|=
name|timestampColVector
operator|.
name|asScratchTimestamp
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Timestamp
name|randTimestamp
init|=
name|randTimestamps
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|retrievedTimestamp
operator|.
name|equals
argument_list|(
name|randTimestamp
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampCompare
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|TimestampColumnVector
name|timestampColVector
init|=
operator|new
name|TimestampColumnVector
argument_list|()
decl_stmt|;
name|Timestamp
index|[]
name|randTimestamps
init|=
operator|new
name|Timestamp
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
name|Timestamp
index|[]
name|candTimestamps
init|=
operator|new
name|Timestamp
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
name|int
index|[]
name|compareToLeftRights
init|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
name|int
index|[]
name|compareToRightLefts
init|=
operator|new
name|int
index|[
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Timestamp
name|randTimestamp
init|=
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|randTimestamps
index|[
name|i
index|]
operator|=
name|randTimestamp
expr_stmt|;
name|timestampColVector
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|randTimestamp
argument_list|)
expr_stmt|;
name|Timestamp
name|candTimestamp
init|=
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|candTimestamps
index|[
name|i
index|]
operator|=
name|candTimestamp
expr_stmt|;
name|compareToLeftRights
index|[
name|i
index|]
operator|=
name|candTimestamp
operator|.
name|compareTo
argument_list|(
name|randTimestamp
argument_list|)
expr_stmt|;
name|compareToRightLefts
index|[
name|i
index|]
operator|=
name|randTimestamp
operator|.
name|compareTo
argument_list|(
name|candTimestamp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|VectorizedRowBatch
operator|.
name|DEFAULT_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|Timestamp
name|retrievedTimestamp
init|=
name|timestampColVector
operator|.
name|asScratchTimestamp
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Timestamp
name|randTimestamp
init|=
name|randTimestamps
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|retrievedTimestamp
operator|.
name|equals
argument_list|(
name|randTimestamp
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Timestamp
name|candTimestamp
init|=
name|candTimestamps
index|[
name|i
index|]
decl_stmt|;
name|int
name|compareToLeftRight
init|=
name|timestampColVector
operator|.
name|compareTo
argument_list|(
name|candTimestamp
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareToLeftRight
operator|!=
name|compareToLeftRights
index|[
name|i
index|]
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|int
name|compareToRightLeft
init|=
name|timestampColVector
operator|.
name|compareTo
argument_list|(
name|i
argument_list|,
name|candTimestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|compareToRightLeft
operator|!=
name|compareToRightLefts
index|[
name|i
index|]
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*   @Test   public void testGenerate() throws Exception {     PrintWriter writer = new PrintWriter("/Users/you/timestamps.txt");     Random r = new Random(18485);     for (int i = 0; i< 25; i++) {       Timestamp randTimestamp = RandomTypeUtil.getRandTimestamp(r);       writer.println(randTimestamp.toString());     }     for (int i = 0; i< 25; i++) {       Timestamp randTimestamp = RandomTypeUtil.getRandTimestamp(r, 1965, 2025);       writer.println(randTimestamp.toString());     }     writer.close();   }   */
block|}
end_class

end_unit

