begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritableV1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|RandomTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
operator|.
name|vector
operator|.
name|expressions
operator|.
name|StringExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|TimestampUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveDecimal
extends|extends
name|HiveDecimalTestBase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testInvalidStringInput
parameter_list|()
block|{
name|HiveDecimalV1
name|oldDec
decl_stmt|;
name|HiveDecimalV1
name|resultOldDec
decl_stmt|;
name|HiveDecimal
name|dec
decl_stmt|;
name|HiveDecimal
name|resultDec
decl_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Naked dot.
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"-."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"+."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"+."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Naked E/e.
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"E"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"E"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|".E"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|".E"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"-E"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-E"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"+E"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"+E"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|".e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|".e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"+e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"+e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"0x0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0x0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"0e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"7e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"7e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"233e-"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"233e-"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"32e+"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"32e+"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|".0e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|".0e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|".4e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|".4e"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVariousCases
parameter_list|()
block|{
name|HiveDecimalV1
name|oldDec
decl_stmt|;
name|HiveDecimalV1
name|resultOldDec
decl_stmt|;
name|HiveDecimal
name|dec
decl_stmt|;
name|HiveDecimal
name|resultDec
decl_stmt|;
name|BigDecimal
name|bigDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
literal|"-99999999999999999999999999999999999999.99999999999999999"
argument_list|)
decl_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"-100000000000000000000000000000000000000"
argument_list|,
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// One less integer digit...
name|bigDecimal
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"-9999999999999999999999999999999999999.99999999999999999"
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"-10000000000000000000000000000000000000"
argument_list|,
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"-10000000000000000000000000000000000000"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"101"
argument_list|)
expr_stmt|;
name|resultOldDec
operator|=
name|HiveDecimalV1
operator|.
name|enforcePrecisionScale
argument_list|(
name|oldDec
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"101"
argument_list|,
name|resultOldDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"101"
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"101"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|resultOldDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
operator|-
literal|99
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|resultOldDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
operator|-
literal|99
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromBigIntegerRounding
parameter_list|()
block|{
name|BigInteger
name|bigInt
decl_stmt|;
name|HiveDecimalV1
name|oldDec
decl_stmt|;
name|HiveDecimal
name|dec
decl_stmt|;
comment|// 1786135888657847525803324040144343378.09799306448796128931113691624
name|bigInt
operator|=
operator|new
name|BigInteger
argument_list|(
literal|"178613588865784752580332404014434337809799306448796128931113691624"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"178613588865784752580332404014434337809799306448796128931113691624"
argument_list|,
name|bigInt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//                   12345678901234567890123456789012345678
comment|//                            1         2         3
comment|//                                                        12345678901234567890123456789
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigInt
argument_list|,
literal|29
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1786135888657847525803324040144343378.1"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// 8.090000000000000000000000000000000000000123456
name|bigInt
operator|=
operator|new
name|BigInteger
argument_list|(
literal|"8090000000000000000000000000000000000000123456"
argument_list|)
expr_stmt|;
comment|//                   123456789012345678901234567890123456789012345
comment|//                             1         2         3         4
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"8090000000000000000000000000000000000000123456"
argument_list|,
name|bigInt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigInt
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"8.09"
argument_list|,
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigInt
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"8.09"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// 99999999.99999999999999999999999999999949999
comment|// MAX_DECIMAL 9's WITH NO ROUND (longer than 38 digits)
name|bigInt
operator|=
operator|new
name|BigInteger
argument_list|(
literal|"9999999999999999999999999999999999999949999"
argument_list|)
expr_stmt|;
comment|//                   12345678901234567890123456789012345678
comment|//                             1         2         3
comment|//                   99999999.99999999999999999999999999999949999
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"9999999999999999999999999999999999999949999"
argument_list|,
name|bigInt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigInt
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"99999999.999999999999999999999999999999"
argument_list|,
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
comment|// Without the round, this conversion fails.
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigInt
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"99999999.999999999999999999999999999999"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// MAX_DECIMAL 9's WITH ROUND.
name|bigInt
operator|=
operator|new
name|BigInteger
argument_list|(
literal|"9999999999999999999999999999999999999979999"
argument_list|)
expr_stmt|;
comment|//                   12346678.901234667890123466789012346678
comment|//                             1         2         3
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"9999999999999999999999999999999999999979999"
argument_list|,
name|bigInt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigInt
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"100000000"
argument_list|,
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigInt
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"100000000"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromBigDecimal
parameter_list|()
block|{
name|BigDecimal
name|bigDec
decl_stmt|;
name|HiveDecimalV1
name|oldDec
decl_stmt|;
name|HiveDecimal
name|dec
decl_stmt|;
name|bigDec
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|bigDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bigDec
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|bigDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bigDec
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"0.999"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.999"
argument_list|,
name|bigDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.999"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// HiveDecimal suppresses trailing zeroes.
name|bigDec
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"0.9990"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.9990"
argument_list|,
name|bigDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.999"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromBigDecimalRounding
parameter_list|()
block|{
name|BigDecimal
name|bigDec
decl_stmt|;
name|HiveDecimalV1
name|oldDec
decl_stmt|;
name|HiveDecimal
name|dec
decl_stmt|;
name|bigDec
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"1786135888657847525803324040144343378.09799306448796128931113691624"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1786135888657847525803324040144343378.09799306448796128931113691624"
argument_list|,
name|bigDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//                   1234567890123456789012345678901234567.8
comment|//                            1         2         3
comment|// Without the round, this conversion fails.
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1786135888657847525803324040144343378.1"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bigDec
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"8.090000000000000000000000000000000000000123456"
argument_list|)
expr_stmt|;
comment|//                   1.23456789012345678901234567890123456789012345
comment|//                             1         2         3         4
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"8.090000000000000000000000000000000000000123456"
argument_list|,
name|bigDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|HiveDecimalV1
name|oldDec4
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec4
operator|==
literal|null
argument_list|)
expr_stmt|;
name|oldDec4
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"8.09"
argument_list|,
name|oldDec4
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
comment|// Without the round, this conversion fails.
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"8.09"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// MAX_DECIMAL 9's WITH NO ROUND (longer than 38 digits)
name|bigDec
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"99999999.99999999999999999999999999999949999"
argument_list|)
expr_stmt|;
comment|//                   12345678.901234567890123456789012345678
comment|//                             1         2         3
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"99999999.99999999999999999999999999999949999"
argument_list|,
name|bigDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|HiveDecimalV1
name|oldDec5
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec5
operator|==
literal|null
argument_list|)
expr_stmt|;
name|oldDec5
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"99999999.999999999999999999999999999999"
argument_list|,
name|oldDec5
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"99999999.999999999999999999999999999999"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// MAX_DECIMAL 9's WITH ROUND.
name|bigDec
operator|=
operator|new
name|BigDecimal
argument_list|(
literal|"99999999.99999999999999999999999999999979999"
argument_list|)
expr_stmt|;
comment|//                   12346678.901234667890123466789012346678
comment|//                             1         2         3
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"99999999.99999999999999999999999999999979999"
argument_list|,
name|bigDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|HiveDecimalV1
name|oldDec6
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDec6
operator|==
literal|null
argument_list|)
expr_stmt|;
name|oldDec6
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"100000000"
argument_list|,
name|oldDec6
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"100000000"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrecisionScaleEnforcement
parameter_list|()
block|{
name|HiveDecimalV1
name|oldDec
decl_stmt|;
name|HiveDecimalV1
name|oldResultDec
decl_stmt|;
name|HiveDecimal
name|dec
decl_stmt|;
name|HiveDecimal
name|resultDec
decl_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"0.02538461538461538461538461538461538462"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.02538461538461538461538"
argument_list|,
name|HiveDecimalV1
operator|.
name|enforcePrecisionScale
argument_list|(
name|oldDec
argument_list|,
literal|38
argument_list|,
literal|23
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.02538461538461538461538461538461538462"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.02538461538461538461538"
argument_list|,
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
literal|38
argument_list|,
literal|23
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"005.34000"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|precision
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// 1 integer digit; 2 fraction digits.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|scale
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Trailing zeroes are suppressed.
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"005.34000"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dec
operator|.
name|precision
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// 1 integer digit; 2 fraction digits.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dec
operator|.
name|scale
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Trailing zeroes are suppressed.
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"178613588865784752580332404014434337809799306448796128931113691624"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec
argument_list|)
expr_stmt|;
comment|// Rounding numbers that increase int digits
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"9.5"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|HiveDecimalV1
operator|.
name|enforcePrecisionScale
argument_list|(
name|oldDec
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|HiveDecimalV1
operator|.
name|enforcePrecisionScale
argument_list|(
name|oldDec
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"9.4"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"9"
argument_list|,
name|HiveDecimalV1
operator|.
name|enforcePrecisionScale
argument_list|(
name|oldDec
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9.5"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9.4"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"9"
argument_list|,
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrecisionScaleEnforcementEdgeCond
parameter_list|()
block|{
comment|// Since HiveDecimal now uses FastHiveDecimal which stores 16 decimal digits per long,
comment|// lets test edge conditions here.
name|HiveDecimal
name|fifteenFractionalNinesDec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.999999999999999"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|fifteenFractionalNinesDec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.999999999999999"
argument_list|,
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|fifteenFractionalNinesDec
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HiveDecimal
name|sixteenFractionalNines
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.9999999999999999"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sixteenFractionalNines
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.9999999999999999"
argument_list|,
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|sixteenFractionalNines
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HiveDecimal
name|seventeenFractionalNines
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.99999999999999999"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|seventeenFractionalNines
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.99999999999999999"
argument_list|,
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|seventeenFractionalNines
argument_list|,
literal|17
argument_list|,
literal|17
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTrailingZeroRemovalAfterEnforcement
parameter_list|()
block|{
name|String
name|decStr
init|=
literal|"8.090000000000000000000000000000000000000123456"
decl_stmt|;
comment|//                 123456789012345678901234567890123456789012345
comment|//                          1         2         3         4
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"8.09"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiply
parameter_list|()
block|{
comment|// This multiply produces more than 38 digits --> overflow.
comment|//---------------------------------------------------
name|HiveDecimalV1
name|oldDec1
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"0.00001786135888657847525803"
argument_list|)
decl_stmt|;
name|HiveDecimalV1
name|oldDec2
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"3.0000123456789"
argument_list|)
decl_stmt|;
name|HiveDecimalV1
name|oldResult
init|=
name|oldDec1
operator|.
name|multiply
argument_list|(
name|oldDec2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldResult
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|HiveDecimal
name|dec1
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00001786135888657847525803"
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.0000123456789"
argument_list|)
decl_stmt|;
name|HiveDecimal
name|result
init|=
name|dec1
operator|.
name|multiply
argument_list|(
name|dec2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|==
literal|null
argument_list|)
expr_stmt|;
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"178613588865784752580323232232323444.4"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"178613588865784752580302323232.3"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec1
operator|.
name|multiply
argument_list|(
name|dec2
argument_list|)
argument_list|)
expr_stmt|;
comment|// i.e. Overflow.
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"47.324"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9232.309"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"436909.791116"
argument_list|,
name|dec1
operator|.
name|multiply
argument_list|(
name|dec2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.140"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.00"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3.14"
argument_list|,
name|dec1
operator|.
name|multiply
argument_list|(
name|dec2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"43.010"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"86.02"
argument_list|,
name|dec1
operator|.
name|multiply
argument_list|(
name|dec2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiply2
parameter_list|()
block|{
comment|// 0.09765625BD * 0.09765625BD * 0.0125BD * 578992BD
name|HiveDecimal
name|dec1
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.09765625"
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.09765625"
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec3
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.0125"
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec4
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"578992"
argument_list|)
decl_stmt|;
name|HiveDecimal
name|result1
init|=
name|dec1
operator|.
name|multiply
argument_list|(
name|dec2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result1
argument_list|)
expr_stmt|;
name|HiveDecimal
name|result2
init|=
name|result1
operator|.
name|multiply
argument_list|(
name|dec3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result2
argument_list|)
expr_stmt|;
name|HiveDecimal
name|result
init|=
name|result2
operator|.
name|multiply
argument_list|(
name|dec4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"69.0212249755859375"
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPow
parameter_list|()
block|{
name|HiveDecimal
name|dec
decl_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.00001415926"
argument_list|)
expr_stmt|;
name|HiveDecimal
name|decPow2
init|=
name|dec
operator|.
name|pow
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|HiveDecimal
name|decMultiplyTwice
init|=
name|dec
operator|.
name|multiply
argument_list|(
name|dec
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decPow2
argument_list|,
name|decMultiplyTwice
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.000017861358882"
argument_list|)
expr_stmt|;
name|dec
operator|=
name|dec
operator|.
name|pow
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.140"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"9.8596"
argument_list|,
name|dec
operator|.
name|pow
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScaleByPowerOfTen
parameter_list|()
block|{
name|HiveDecimalV1
name|oldDec
decl_stmt|;
name|HiveDecimal
name|dec
decl_stmt|;
name|HiveDecimalV1
name|oldResultDec
decl_stmt|;
name|HiveDecimal
name|resultDec
decl_stmt|;
comment|//**********************************************************************************************
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"100"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
comment|// resultDec = dec.scaleByPowerOfTen(2);
comment|// Assert.assertEquals(
comment|//     "100", resultDec.toString());
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"0.00000000000000000000000000000000000001"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|oldDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.000000000000000000000000000000000001"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00000000000000000000000000000000000001"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|dec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.000000000000000000000000000000000001"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"0.00000000000000000000000000000000000001"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|oldDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|38
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00000000000000000000000000000000000001"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|dec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|38
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"0.00000000000000000000000000000000000001"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|oldDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|2
operator|*
literal|38
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"10000000000000000000000000000000000000"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldResultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00000000000000000000000000000000000001"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|dec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|2
operator|*
literal|38
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"10000000000000000000000000000000000000"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"0.00000000000000000000000000000000000001"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|oldDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|2
operator|*
literal|38
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldResultDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00000000000000000000000000000000000001"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|dec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|2
operator|*
literal|38
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"0.00000000000000000000000000000000000022"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|oldDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|38
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"22"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldResultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00000000000000000000000000000000000022"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|dec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|38
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"22"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"3.00001415926"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|oldDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300.001415926"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|oldResultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300001.415926"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|oldResultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|18
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3000014159260000000"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldResultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300001415926000000000000000000000000"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldResultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"30000141592600000000000000000000000000"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldResultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.00001415926"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|dec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300.001415926"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|resultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300001.415926"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|resultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|18
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3000014159260000000"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300001415926000000000000000000000000"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|36
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"30000141592600000000000000000000000000"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleWordDivision
parameter_list|()
block|{
name|HiveDecimalV1
name|oldDec1
decl_stmt|;
name|HiveDecimalV1
name|oldDec2
decl_stmt|;
name|HiveDecimalV1
name|oldResultDec
decl_stmt|;
name|HiveDecimal
name|dec1
decl_stmt|;
name|HiveDecimal
name|dec2
decl_stmt|;
name|HiveDecimal
name|resultDec
decl_stmt|;
comment|//---------------------------------------------------
name|oldDec1
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"839293"
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"8"
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec1
operator|.
name|divide
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"104911.625"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"839293"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"8"
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec1
operator|.
name|divide
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"104911.625"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNDONE
comment|//---------------------------------------------------
name|oldDec1
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec1
operator|.
name|divide
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.33333333333333333333333333333333333333"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec1
operator|.
name|divide
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.33333333333333333333333333333333333333"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNDONE
comment|//---------------------------------------------------
name|oldDec1
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"9"
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec1
operator|.
name|divide
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.11111111111111111111111111111111111111"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9"
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec1
operator|.
name|divide
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.11111111111111111111111111111111111111"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNDONE
comment|//---------------------------------------------------
name|oldDec1
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"22"
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"7"
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec1
operator|.
name|divide
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3.1428571428571428571428571428571428571"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"22"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"7"
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec1
operator|.
name|divide
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3.1428571428571428571428571428571428571"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNDONE
comment|//---------------------------------------------------
name|oldDec1
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"81"
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec1
operator|.
name|divide
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.01234567901234567901234567901234567901"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"81"
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec1
operator|.
name|divide
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.01234567901234567901234567901234567901"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNDONE
comment|//---------------------------------------------------
name|oldDec1
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"425"
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"1000000000000000"
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec1
operator|.
name|divide
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.000000000000425"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"425"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1000000000000000"
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec1
operator|.
name|divide
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.000000000000425"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNDONE
comment|//---------------------------------------------------
name|oldDec1
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"0.000000000088"
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"1000000000000000"
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec1
operator|.
name|divide
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.000000000000000000000000088"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|27
argument_list|,
name|oldResultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.000000000088"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1000000000000000"
argument_list|)
expr_stmt|;
name|resultDec
operator|=
name|dec1
operator|.
name|divide
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"0.000000000000000000000000088"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNDONE
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|27
argument_list|,
name|resultDec
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDivide
parameter_list|()
block|{
name|HiveDecimal
name|dec1
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.14"
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dec1
operator|.
name|divide
argument_list|(
name|dec2
argument_list|)
argument_list|)
expr_stmt|;
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"15"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"5"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|dec1
operator|.
name|divide
argument_list|(
name|dec2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.140"
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.00"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3.14"
argument_list|,
name|dec1
operator|.
name|divide
argument_list|(
name|dec2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPlus
parameter_list|()
block|{
name|HiveDecimalV1
name|oldDec
decl_stmt|;
name|HiveDecimalV1
name|oldDec2
decl_stmt|;
name|HiveDecimalV1
name|oldResultDec
decl_stmt|;
name|HiveDecimal
name|dec
decl_stmt|;
name|HiveDecimal
name|dec1
decl_stmt|;
name|HiveDecimal
name|dec2
decl_stmt|;
name|HiveDecimal
name|resultDec
decl_stmt|;
name|String
name|decStr
decl_stmt|;
name|String
name|decStr2
decl_stmt|;
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.140"
argument_list|)
expr_stmt|;
name|dec1
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.00"
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec1
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4.14"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|decStr
operator|=
literal|"3.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4.14"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4.14"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|decStr
operator|=
literal|"3.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00000008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4.14000008733"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4.14000008733"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|decStr
operator|=
literal|"3.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00000000000000000008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4.14000000000000000008733"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4.14000000000000000008733"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|decStr
operator|=
literal|"30000000000.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00000000000000000008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"30000000001.14000000000000000008733"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"30000000001.14000000000000000008733"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
name|decStr
operator|=
literal|"300000000000000.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00000000000000000008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000000001.14000000000000000008733"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000000001.14000000000000000008733"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
comment|// Edge case?
name|decStr
operator|=
literal|"3000000000000000.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00000000000000000008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3000000000000001.1400000000000000000873"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3000000000000001.1400000000000000000873"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
name|decStr
operator|=
literal|"300000000000000000000000.14"
expr_stmt|;
name|decStr2
operator|=
literal|"0.0000055555555550008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000000000000000000.14000555555556"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000000000000000000.14000555555556"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
name|decStr
operator|=
literal|"300000000000000000000000.14"
expr_stmt|;
name|decStr2
operator|=
literal|"0.000005555555555000873355"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000000000000000000.14000555555556"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000000000000000000.14000555555556"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
comment|// Example from HiveDecimal.add header comments.
name|decStr
operator|=
literal|"598575157855521918987423259.94094"
expr_stmt|;
name|decStr2
operator|=
literal|"0.0000000000006711991169422033"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"598575157855521918987423259.94094"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"598575157855521918987423259.94094"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|27
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|decStr
operator|=
literal|"598575157855521918987423259.94094"
expr_stmt|;
name|decStr2
operator|=
literal|"0.5555555555556711991169422033"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"598575157855521918987423260.49649555556"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"598575157855521918987423260.49649555556"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|27
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|decStr
operator|=
literal|"199999999.99995"
expr_stmt|;
name|decStr2
operator|=
literal|"100000000.00005"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"99999999999999999999999999999999999999"
argument_list|)
expr_stmt|;
name|dec1
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|dec1
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec1
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdd
parameter_list|()
block|{
name|HiveDecimalV1
name|oldDec
decl_stmt|;
name|HiveDecimalV1
name|oldDec2
decl_stmt|;
name|HiveDecimalV1
name|oldResultDec
decl_stmt|;
name|HiveDecimal
name|dec
decl_stmt|;
name|HiveDecimal
name|dec2
decl_stmt|;
name|HiveDecimal
name|resultDec
decl_stmt|;
comment|// Use the example from HIVE-13423 where the integer digits of the result exceed the
comment|// enforced precision/scale.
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"98765432109876543210.12345"
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"197530864219753086420.2469"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|HiveDecimalV1
operator|.
name|enforcePrecisionScale
argument_list|(
name|oldResultDec
argument_list|,
literal|38
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldResultDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"98765432109876543210.12345"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"197530864219753086420.2469"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(21, resultDec.integerDigitCount());
name|resultDec
operator|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|resultDec
argument_list|,
literal|38
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultDec
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Make sure zero trimming doesn't extend into the integer digits.
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"199999999.99995"
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|"100000000.00005"
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"199999999.99995"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"100000000.00005"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|resultDec
operator|.
name|integerDigitCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinus
parameter_list|()
block|{
name|HiveDecimalV1
name|oldDec
decl_stmt|;
name|HiveDecimalV1
name|oldDec2
decl_stmt|;
name|HiveDecimalV1
name|oldResultDec
decl_stmt|;
name|HiveDecimal
name|dec
decl_stmt|;
name|HiveDecimal
name|dec1
decl_stmt|;
name|HiveDecimal
name|dec2
decl_stmt|;
name|HiveDecimal
name|resultDec
decl_stmt|;
name|String
name|decStr
decl_stmt|;
name|String
name|decStr2
decl_stmt|;
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.140"
argument_list|)
expr_stmt|;
name|dec1
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.00"
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec1
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"4.14"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|decStr
operator|=
literal|"3.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2.14"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2.14"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
name|decStr
operator|=
literal|"3.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00000008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2.13999991267"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2.13999991267"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
name|decStr
operator|=
literal|"3.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00000000000000000008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2.13999999999999999991267"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2.13999999999999999991267"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
name|decStr
operator|=
literal|"30000000000.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00000000000000000008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"29999999999.13999999999999999991267"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"29999999999.13999999999999999991267"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
name|decStr
operator|=
literal|"300000000000000.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00000000000000000008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"299999999999999.13999999999999999991267"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"299999999999999.13999999999999999991267"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
comment|// Edge case?
name|decStr
operator|=
literal|"3000000000000000.140"
expr_stmt|;
name|decStr2
operator|=
literal|"1.00000000000000000008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2999999999999999.1399999999999999999127"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2999999999999999.1399999999999999999127"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
name|decStr
operator|=
literal|"300000000000000000000000.14"
expr_stmt|;
name|decStr2
operator|=
literal|"0.0000055555555550008733"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000000000000000000.13999444444444"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000000000000000000.13999444444444"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
name|decStr
operator|=
literal|"300000000000000000000000.14"
expr_stmt|;
name|decStr2
operator|=
literal|"0.000005555555555000873355"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000000000000000000.13999444444444"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"300000000000000000000000.13999444444444"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
comment|// Example from HiveDecimal.subtract header comments.
name|decStr
operator|=
literal|"598575157855521918987423259.94094"
expr_stmt|;
name|decStr2
operator|=
literal|"0.0000000000006711991169422033"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"598575157855521918987423259.94094"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"598575157855521918987423259.94094"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
name|decStr
operator|=
literal|"598575157855521918987423259.94094"
expr_stmt|;
name|decStr2
operator|=
literal|"0.5555555555556711991169422033"
expr_stmt|;
comment|//---------------------------------------------------
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|oldDec2
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|oldResultDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"598575157855521918987423259.38538444444"
argument_list|,
name|oldResultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//---------------------------------------------------
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decStr2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|resultDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resultDec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|resultDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"598575157855521918987423259.38538444444"
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert.assertEquals(1, resultDec.integerDigitCount());
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubtract
parameter_list|()
block|{
name|HiveDecimal
name|dec1
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.140"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dec1
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec1
operator|.
name|validate
argument_list|()
expr_stmt|;
name|HiveDecimal
name|dec2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.00"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|HiveDecimal
name|result
init|=
name|dec1
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|result
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2.14"
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dec1
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00001786135888657847525803"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec1
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec1
operator|.
name|validate
argument_list|()
expr_stmt|;
name|dec2
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.0000123456789"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|result
operator|=
name|dec1
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|result
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"-2.99999448432001342152474197"
argument_list|,
name|result
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPosMod
parameter_list|()
block|{
name|HiveDecimal
name|hd1
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-100.91"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hd1
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|hd1
operator|.
name|validate
argument_list|()
expr_stmt|;
name|HiveDecimal
name|hd2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9.8"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hd2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|hd2
operator|.
name|validate
argument_list|()
expr_stmt|;
name|HiveDecimal
name|dec
init|=
name|hd1
operator|.
name|remainder
argument_list|(
name|hd2
argument_list|)
operator|.
name|add
argument_list|(
name|hd2
argument_list|)
operator|.
name|remainder
argument_list|(
name|hd2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"6.89"
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9"
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"9.00"
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00"
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testException
parameter_list|()
block|{
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.1415.926"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec
argument_list|)
expr_stmt|;
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3abc43"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|dec
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBinaryConversion
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|2399
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|decString
range|:
name|specialDecimalStrings
control|)
block|{
name|doTestBinaryConversion
argument_list|(
name|decString
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestBinaryConversion
parameter_list|(
name|String
name|num
parameter_list|,
name|Random
name|r
parameter_list|)
block|{
name|int
name|scale
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|HiveDecimal
operator|.
name|MAX_SCALE
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|num
argument_list|)
decl_stmt|;
if|if
condition|(
name|dec
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|byte
index|[]
name|d
init|=
name|dec
operator|.
name|setScale
argument_list|(
name|scale
argument_list|)
operator|.
name|unscaledValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|HiveDecimal
name|roundedDec
init|=
name|dec
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_HALF_UP
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|roundedDec
argument_list|,
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|d
argument_list|)
argument_list|,
name|scale
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testDecimalsWithOneOne
parameter_list|()
block|{
name|doTestDecimalsWithPrecisionScale
argument_list|(
name|decimal_1_1_txt
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimalsWithKv7Keys
parameter_list|()
block|{
name|doTestDecimalsWithPrecisionScale
argument_list|(
name|kv7_txt_keys
argument_list|,
literal|38
argument_list|,
literal|18
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestDecimalsWithPrecisionScale
parameter_list|(
name|String
index|[]
name|decStrings
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|HiveDecimalV1
name|oldSum
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|sum
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|string
init|=
name|decStrings
index|[
name|i
index|]
decl_stmt|;
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|HiveDecimalV1
name|resultOldDec
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|resultOldDec
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|resultOldDec
operator|=
name|HiveDecimalV1
operator|.
name|enforcePrecisionScale
argument_list|(
name|oldDec
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|HiveDecimal
name|resultDec
init|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|dec
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultOldDec
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resultDec
operator|==
literal|null
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultOldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|resultDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultOldDec
operator|.
name|toFormatString
argument_list|(
name|scale
argument_list|)
argument_list|,
name|resultDec
operator|.
name|toFormatString
argument_list|(
name|scale
argument_list|)
argument_list|)
expr_stmt|;
name|oldSum
operator|=
name|oldSum
operator|.
name|add
argument_list|(
name|resultOldDec
argument_list|)
expr_stmt|;
name|sum
operator|.
name|mutateAdd
argument_list|(
name|resultDec
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldSum
operator|.
name|toString
argument_list|()
argument_list|,
name|sum
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testDecimalsWithOneOneWritable
parameter_list|()
block|{
name|doTestDecimalsWithPrecisionScaleWritable
argument_list|(
name|decimal_1_1_txt
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimalsWithKv7KeysWritable
parameter_list|()
block|{
name|doTestDecimalsWithPrecisionScaleWritable
argument_list|(
name|kv7_txt_keys
argument_list|,
literal|38
argument_list|,
literal|18
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestDecimalsWithPrecisionScaleWritable
parameter_list|(
name|String
index|[]
name|decStrings
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|HiveDecimalV1
name|oldSum
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|sum
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|string
init|=
name|decStrings
index|[
name|i
index|]
decl_stmt|;
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|HiveDecimalV1
name|resultOldDec
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|resultOldDec
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|resultOldDec
operator|=
name|HiveDecimalV1
operator|.
name|enforcePrecisionScale
argument_list|(
name|oldDec
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
name|HiveDecimalWritable
name|decWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|decWritable
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|decWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
empty_stmt|;
if|if
condition|(
name|resultOldDec
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|decWritable
operator|.
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultOldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|decWritable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resultOldDec
operator|.
name|toFormatString
argument_list|(
name|scale
argument_list|)
argument_list|,
name|decWritable
operator|.
name|toFormatString
argument_list|(
name|scale
argument_list|)
argument_list|)
expr_stmt|;
name|oldSum
operator|=
name|oldSum
operator|.
name|add
argument_list|(
name|resultOldDec
argument_list|)
expr_stmt|;
name|sum
operator|.
name|mutateAdd
argument_list|(
name|decWritable
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldSum
operator|.
name|toString
argument_list|()
argument_list|,
name|sum
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testSort
parameter_list|()
block|{
name|doTestSort
argument_list|(
name|decimal_1_1_txt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortSpecial
parameter_list|()
block|{
name|doTestSort
argument_list|(
name|specialDecimalStrings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortRandom
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|14434
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestSortRandom
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestSortRandom
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|doTestSortRandom
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
name|String
index|[]
name|randomStrings
init|=
operator|new
name|String
index|[
name|POUND_FACTOR
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|randomStrings
index|[
name|i
index|]
operator|=
name|bigDecimal
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|doTestSort
argument_list|(
name|randomStrings
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestSort
parameter_list|(
name|String
index|[]
name|decStrings
parameter_list|)
block|{
name|HiveDecimalV1
index|[]
name|oldDecSortArray
init|=
operator|new
name|HiveDecimalV1
index|[
name|decStrings
operator|.
name|length
index|]
decl_stmt|;
name|HiveDecimal
index|[]
name|decSortArray
init|=
operator|new
name|HiveDecimal
index|[
name|decStrings
operator|.
name|length
index|]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|string
init|=
name|decStrings
index|[
name|i
index|]
decl_stmt|;
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|oldDecSortArray
index|[
name|count
index|]
operator|=
name|oldDec
expr_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
name|dec
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|decSortArray
index|[
name|count
index|]
operator|=
name|dec
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|oldDecSortArray
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|oldDecSortArray
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|decSortArray
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|decSortArray
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|oldDecSortArray
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|decSortArray
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|oldDecString
init|=
name|oldDecSortArray
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|decString
init|=
name|decSortArray
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldDecString
operator|.
name|equals
argument_list|(
name|decString
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomCreateFromBigDecimal
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|14434
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomCreateFromBigDecimal
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomCreateFromBigDecimal
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomCreateFromBigDecimal
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestCreateFromBigDecimal
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromBigDecimalSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestCreateFromBigDecimal
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestCreateFromBigDecimal
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomCreateFromBigDecimalNoRound
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|14434
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomCreateFromBigDecimalNoRound
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomCreateFromBigDecimalNoRound
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomCreateFromBigDecimalNoRound
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestCreateFromBigDecimalNoRound
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromBigDecimalNoRoundSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestCreateFromBigDecimalNoRound
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestCreateFromBigDecimalNoRound
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|,
comment|/* allowRounding */
literal|false
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|,
comment|/* allowRounding */
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|dec
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromBigDecimalNegativeScaleSpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|223965
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|int
name|negativeScale
init|=
operator|-
operator|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|38
operator|+
literal|1
argument_list|)
operator|)
decl_stmt|;
name|bigDecimal
operator|=
name|bigDecimal
operator|.
name|setScale
argument_list|(
name|negativeScale
argument_list|,
name|BigDecimal
operator|.
name|ROUND_HALF_UP
argument_list|)
expr_stmt|;
name|doTestCreateFromBigDecimalNegativeScale
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestCreateFromBigDecimalNegativeScale
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomCreateFromBigInteger
parameter_list|()
block|{
name|doTestRandomCreateFromBigInteger
argument_list|(
name|standardAlphabet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomCreateFromBigIntegerSparse
parameter_list|()
block|{
for|for
control|(
name|String
name|digitAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomCreateFromBigInteger
argument_list|(
name|digitAlphabet
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestRandomCreateFromBigInteger
parameter_list|(
name|String
name|digitAlphabet
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|11241
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigInteger
name|bigInteger
init|=
name|randHiveBigInteger
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|)
decl_stmt|;
name|doTestCreateFromBigInteger
argument_list|(
name|bigInteger
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromBigIntegerSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestCreateFromBigInteger
argument_list|(
name|bigDecimal
operator|.
name|unscaledValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestCreateFromBigInteger
parameter_list|(
name|BigInteger
name|bigInteger
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigInteger
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigInteger
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomCreateFromBigIntegerScale
parameter_list|()
block|{
name|doTestRandomCreateFromBigIntegerScale
argument_list|(
name|standardAlphabet
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomCreateFromBigIntegerScaleFractionsOnly
parameter_list|()
block|{
name|doTestRandomCreateFromBigIntegerScale
argument_list|(
name|standardAlphabet
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomCreateFromBigIntegerScaleSparse
parameter_list|()
block|{
for|for
control|(
name|String
name|digitAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomCreateFromBigIntegerScale
argument_list|(
name|digitAlphabet
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestRandomCreateFromBigIntegerScale
parameter_list|(
name|String
name|digitAlphabet
parameter_list|,
name|boolean
name|fractionsOnly
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|4448
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigInteger
name|bigInteger
init|=
name|randHiveBigInteger
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|)
decl_stmt|;
name|int
name|scale
decl_stmt|;
if|if
condition|(
name|fractionsOnly
condition|)
block|{
name|scale
operator|=
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|38
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scale
operator|=
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|38
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|doTestCreateFromBigIntegerScale
argument_list|(
name|bigInteger
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromBigIntegerScaleSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestCreateFromBigIntegerScale
argument_list|(
name|bigDecimal
operator|.
name|unscaledValue
argument_list|()
argument_list|,
name|bigDecimal
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestCreateFromBigIntegerScale
parameter_list|(
name|BigInteger
name|bigInteger
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigInteger
argument_list|,
name|scale
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigInteger
argument_list|,
name|scale
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomSetFromDouble
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|14434
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomSetFromDouble
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomSetFromDouble
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomSetFromDouble
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestSetFromDouble
argument_list|(
name|bigDecimal
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestRandomSetFromDouble
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|94762
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|double
name|randomDouble
init|=
name|r
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|doTestSetFromDouble
argument_list|(
name|randomDouble
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetFromDoubleSpecial
parameter_list|()
block|{
for|for
control|(
name|String
name|specialString
range|:
name|specialDecimalStrings
control|)
block|{
name|double
name|specialDouble
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|specialString
argument_list|)
decl_stmt|;
name|doTestSetFromDouble
argument_list|(
name|specialDouble
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestSetFromDouble
parameter_list|(
name|double
name|doubleValue
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|doubleValue
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|doubleValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|dec
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|oldDec
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|BigDecimal
name|bigDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|16
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|trial
init|=
name|bigDecimal
operator|.
name|setScale
argument_list|(
name|i
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_HALF_UP
argument_list|)
decl_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomCreateFromString
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1221
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomCreateFromString
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomCreateFromString
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomCreateFromString
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestCreateFromString
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromStringSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestCreateFromString
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestCreateFromString
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|String
name|decString
init|=
name|bigDecimal
operator|.
name|toPlainString
argument_list|()
decl_stmt|;
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decString
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decString
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomCreateFromStringPadded
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|9774
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomCreateFromStringPadded
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomCreateFromStringPadded
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomCreateFromStringPadded
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestCreateFromStringPadded
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromStringPaddedSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestCreateFromStringPadded
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestCreateFromStringPadded
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|String
name|decString
init|=
name|bigDecimal
operator|.
name|toPlainString
argument_list|()
decl_stmt|;
name|String
name|decString1
init|=
literal|" "
operator|+
name|decString
decl_stmt|;
name|String
name|decString2
init|=
name|decString
operator|+
literal|" "
decl_stmt|;
name|String
name|decString3
init|=
literal|" "
operator|+
name|decString
operator|+
literal|" "
decl_stmt|;
name|String
name|decString4
init|=
literal|"  "
operator|+
name|decString
decl_stmt|;
name|String
name|decString5
init|=
name|decString
operator|+
literal|"  "
decl_stmt|;
name|String
name|decString6
init|=
literal|"  "
operator|+
name|decString
operator|+
literal|"  "
decl_stmt|;
name|HiveDecimalV1
name|oldDec
decl_stmt|;
name|HiveDecimal
name|dec
decl_stmt|;
name|oldDec
operator|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decString
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decString1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decString2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decString3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decString4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decString5
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decString6
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomCreateFromStringExponent
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|297111
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomCreateFromStringPadded
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomCreateFromStringPadded
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomCreateFromStringExponent
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestCreateFromStringExponent
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromStringExponentSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestCreateFromStringExponent
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestCreateFromStringExponent
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
comment|// Use toString which will have exponents instead of toPlainString.
name|String
name|decString
init|=
name|bigDecimal
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|decString
argument_list|)
decl_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decString
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomLongValue
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|73293
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomLongValue
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomLongValue
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomLongValue
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestLongValue
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongValueSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestLongValue
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestLongValue
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|BigDecimal
name|bigDecimalOldDec
init|=
name|oldDec
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|BigDecimal
name|bigDecimalDec
init|=
name|dec
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bigDecimalOldDec
argument_list|,
name|bigDecimalDec
argument_list|)
expr_stmt|;
name|BigDecimal
name|bigDecimalFloor
init|=
name|bigDecimalDec
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|BigDecimal
operator|.
name|ROUND_DOWN
argument_list|)
decl_stmt|;
name|long
name|longValueBigDecimalFloor
init|=
name|bigDecimalFloor
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|boolean
name|isLongExpected
init|=
name|bigDecimalFloor
operator|.
name|equals
argument_list|(
name|bigDecimalDec
operator|.
name|valueOf
argument_list|(
name|longValueBigDecimalFloor
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|decIsLong
init|=
name|dec
operator|.
name|isLong
argument_list|()
decl_stmt|;
name|long
name|oldDecLong
init|=
name|oldDec
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|decLong
init|=
name|dec
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLongExpected
operator|!=
name|decIsLong
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|decIsLong
condition|)
block|{
if|if
condition|(
name|oldDecLong
operator|!=
name|decLong
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomIntValue
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|98333
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomIntValue
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomIntValue
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomIntValue
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestIntValue
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntValueSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestIntValue
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestIntValue
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|BigDecimal
name|bigDecimalOldDec
init|=
name|oldDec
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|BigDecimal
name|bigDecimalDec
init|=
name|dec
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bigDecimalOldDec
argument_list|,
name|bigDecimalDec
argument_list|)
expr_stmt|;
name|BigDecimal
name|bigDecimalFloor
init|=
name|bigDecimalDec
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|BigDecimal
operator|.
name|ROUND_DOWN
argument_list|)
decl_stmt|;
name|int
name|intValueBigDecimalFloor
init|=
name|bigDecimalFloor
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|boolean
name|isIntExpected
init|=
name|bigDecimalFloor
operator|.
name|equals
argument_list|(
name|bigDecimalDec
operator|.
name|valueOf
argument_list|(
name|intValueBigDecimalFloor
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|decIsInt
init|=
name|dec
operator|.
name|isInt
argument_list|()
decl_stmt|;
name|int
name|oldDecInt
init|=
name|oldDec
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|decInt
init|=
name|dec
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isIntExpected
operator|!=
name|decIsInt
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|decIsInt
condition|)
block|{
if|if
condition|(
name|oldDecInt
operator|!=
name|decInt
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomShortValue
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|15
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomShortValue
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomShortValue
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomShortValue
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestShortValue
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShortValueSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestShortValue
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestShortValue
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|BigDecimal
name|bigDecimalOldDec
init|=
name|oldDec
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|BigDecimal
name|bigDecimalDec
init|=
name|dec
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bigDecimalOldDec
argument_list|,
name|bigDecimalDec
argument_list|)
expr_stmt|;
name|BigDecimal
name|bigDecimalFloor
init|=
name|bigDecimalDec
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|BigDecimal
operator|.
name|ROUND_DOWN
argument_list|)
decl_stmt|;
name|short
name|shortValueBigDecimalFloor
init|=
name|bigDecimalFloor
operator|.
name|shortValue
argument_list|()
decl_stmt|;
name|boolean
name|isShortExpected
init|=
name|bigDecimalFloor
operator|.
name|equals
argument_list|(
name|bigDecimalDec
operator|.
name|valueOf
argument_list|(
name|shortValueBigDecimalFloor
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|decIsShort
init|=
name|dec
operator|.
name|isShort
argument_list|()
decl_stmt|;
name|short
name|oldDecShort
init|=
name|oldDec
operator|.
name|shortValue
argument_list|()
decl_stmt|;
name|short
name|decShort
init|=
name|dec
operator|.
name|shortValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isShortExpected
operator|!=
name|decIsShort
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|decIsShort
condition|)
block|{
if|if
condition|(
name|oldDecShort
operator|!=
name|decShort
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomByteValue
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|9292
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomByteValue
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomByteValue
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomByteValue
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestByteValue
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteValueSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestByteValue
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestByteValue
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|BigDecimal
name|bigDecimalOldDec
init|=
name|oldDec
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|BigDecimal
name|bigDecimalDec
init|=
name|dec
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bigDecimalOldDec
argument_list|,
name|bigDecimalDec
argument_list|)
expr_stmt|;
name|BigDecimal
name|bigDecimalFloor
init|=
name|bigDecimalDec
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|BigDecimal
operator|.
name|ROUND_DOWN
argument_list|)
decl_stmt|;
name|byte
name|byteValueBigDecimalFloor
init|=
name|bigDecimalFloor
operator|.
name|byteValue
argument_list|()
decl_stmt|;
name|boolean
name|isByteExpected
init|=
name|bigDecimalFloor
operator|.
name|equals
argument_list|(
name|bigDecimalDec
operator|.
name|valueOf
argument_list|(
name|byteValueBigDecimalFloor
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|decIsByte
init|=
name|dec
operator|.
name|isByte
argument_list|()
decl_stmt|;
name|byte
name|oldDecByte
init|=
name|oldDec
operator|.
name|byteValue
argument_list|()
decl_stmt|;
name|byte
name|decByte
init|=
name|dec
operator|.
name|byteValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isByteExpected
operator|!=
name|decIsByte
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|decIsByte
condition|)
block|{
if|if
condition|(
name|oldDecByte
operator|!=
name|decByte
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomTimestamp
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|5476
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomTimestamp
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomTimestamp
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomTimestamp
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestTimestamp
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimestampSpecial
parameter_list|()
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestTimestamp
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestTimestamp
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|Timestamp
name|timestampOldDec
init|=
name|TimestampUtils
operator|.
name|decimalToTimestamp
argument_list|(
name|oldDec
argument_list|)
decl_stmt|;
name|Timestamp
name|timestampDec
init|=
name|TimestampUtils
operator|.
name|decimalToTimestamp
argument_list|(
name|dec
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestampOldDec
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|timestampDec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|timestampDec
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|timestampOldDec
argument_list|,
name|timestampDec
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomBigIntegerBytes
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomBigIntegerBytes
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomBigIntegerBytes
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomBigIntegerBytes
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestBigIntegerBytes
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigIntegerBytesSpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|int
name|negativeScale
init|=
operator|-
operator|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|38
operator|+
literal|1
argument_list|)
operator|)
decl_stmt|;
name|bigDecimal
operator|=
name|bigDecimal
operator|.
name|setScale
argument_list|(
name|negativeScale
argument_list|,
name|BigDecimal
operator|.
name|ROUND_HALF_UP
argument_list|)
expr_stmt|;
name|doTestBigIntegerBytes
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestBigIntegerBytes
parameter_list|(
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|//---------------------------------------------------
name|BigInteger
name|oldBigInteger
init|=
name|oldDec
operator|.
name|unscaledValue
argument_list|()
decl_stmt|;
name|int
name|oldScale
init|=
name|oldDec
operator|.
name|scale
argument_list|()
decl_stmt|;
comment|//---------------------------------------------------
name|BigInteger
name|bigInteger
init|=
name|dec
operator|.
name|unscaledValue
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|dec
operator|.
name|scale
argument_list|()
decl_stmt|;
name|long
index|[]
name|scratchLongs
init|=
operator|new
name|long
index|[
name|HiveDecimal
operator|.
name|SCRATCH_LONGS_LEN
index|]
decl_stmt|;
name|byte
index|[]
name|scratchBuffer
init|=
operator|new
name|byte
index|[
name|HiveDecimal
operator|.
name|SCRATCH_BUFFER_LEN_BIG_INTEGER_BYTES
index|]
decl_stmt|;
name|int
name|which
init|=
literal|0
decl_stmt|;
try|try
block|{
name|which
operator|=
literal|1
expr_stmt|;
name|int
name|byteLength
init|=
name|dec
operator|.
name|bigIntegerBytes
argument_list|(
name|scratchLongs
argument_list|,
name|scratchBuffer
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|byteLength
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bytes
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|scratchBuffer
argument_list|,
name|byteLength
argument_list|)
expr_stmt|;
block|}
name|which
operator|=
literal|2
expr_stmt|;
name|byte
index|[]
name|bytesExpected
init|=
name|bigInteger
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|bytesExpectedString
init|=
name|displayBytes
argument_list|(
name|bytesExpected
argument_list|,
literal|0
argument_list|,
name|bytesExpected
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringExpr
operator|.
name|equal
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|bytesExpected
argument_list|,
literal|0
argument_list|,
name|bytesExpected
operator|.
name|length
argument_list|)
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
name|which
operator|=
literal|3
expr_stmt|;
name|HiveDecimal
name|createFromBigIntegerBytesDec
init|=
name|HiveDecimal
operator|.
name|createFromBigIntegerBytesAndScale
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|scale
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|createFromBigIntegerBytesDec
operator|.
name|equals
argument_list|(
name|dec
argument_list|)
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomToFormatString
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1051
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomToFormatString
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomToFormatString
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomToFormatString
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestToFormatString
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToFormatStringSpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestToFormatString
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestToFormatString
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
if|if
condition|(
name|dec
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
name|dec
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
expr_stmt|;
if|if
condition|(
name|dec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// UNDONE: Does this random range need to go as high as 38?
name|int
name|formatScale
init|=
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|38
argument_list|)
decl_stmt|;
name|String
name|oldDecFormatString
init|=
name|oldDec
operator|.
name|toFormatString
argument_list|(
name|formatScale
argument_list|)
decl_stmt|;
name|String
name|decFormatString
decl_stmt|;
if|if
condition|(
name|oldDecFormatString
operator|==
literal|null
condition|)
block|{
name|decFormatString
operator|=
name|dec
operator|.
name|toFormatString
argument_list|(
name|formatScale
argument_list|)
expr_stmt|;
if|if
condition|(
name|decFormatString
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
name|decFormatString
operator|=
name|dec
operator|.
name|toFormatString
argument_list|(
name|formatScale
argument_list|)
expr_stmt|;
if|if
condition|(
name|decFormatString
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isTenPowerBug
argument_list|(
name|oldDecFormatString
argument_list|)
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|oldDecFormatString
operator|.
name|equals
argument_list|(
name|decFormatString
argument_list|)
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomScaleByPowerOfTen
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1052
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomScaleByPowerOfTen
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomScaleByPowerOfTen
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomScaleByPowerOfTen
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestScaleByPowerOfTen
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScaleByPowerOfTenSpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestScaleByPowerOfTen
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestScaleByPowerOfTen
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigDecimal
name|bigDecimal
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|HiveDecimalV1
name|oldPowerDec
decl_stmt|;
name|HiveDecimal
name|powerDec
decl_stmt|;
for|for
control|(
name|int
name|power
init|=
operator|-
operator|(
literal|2
operator|*
name|HiveDecimal
operator|.
name|MAX_SCALE
operator|+
literal|1
operator|)
init|;
name|power
operator|<=
literal|2
operator|*
name|HiveDecimal
operator|.
name|MAX_SCALE
operator|+
literal|1
condition|;
name|power
operator|++
control|)
block|{
name|oldPowerDec
operator|=
name|oldDec
operator|.
name|scaleByPowerOfTen
argument_list|(
name|power
argument_list|)
expr_stmt|;
name|boolean
name|isEqual
decl_stmt|;
if|if
condition|(
name|oldPowerDec
operator|==
literal|null
condition|)
block|{
name|powerDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
name|power
argument_list|)
expr_stmt|;
if|if
condition|(
name|powerDec
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
name|String
name|oldPowerDecString
init|=
name|oldPowerDec
operator|.
name|toString
argument_list|()
decl_stmt|;
name|powerDec
operator|=
name|dec
operator|.
name|scaleByPowerOfTen
argument_list|(
name|power
argument_list|)
expr_stmt|;
if|if
condition|(
name|powerDec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isTenPowerBug
argument_list|(
name|oldPowerDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|powerDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|String
name|powerDecString
init|=
name|powerDec
operator|.
name|toString
argument_list|()
decl_stmt|;
name|isEqual
operator|=
name|oldPowerDecString
operator|.
name|equals
argument_list|(
name|powerDecString
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isEqual
condition|)
block|{
if|if
condition|(
name|oldPowerDecString
operator|.
name|equals
argument_list|(
literal|"0.00000000000000000000000000000000000001"
argument_list|)
operator|||
name|oldPowerDecString
operator|.
name|equals
argument_list|(
literal|"-0.00000000000000000000000000000000000001"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomWriteReadFields
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1052
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomWriteReadFields
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomWriteReadFields
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomWriteReadFields
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestWriteReadFields
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteReadFieldsSpecial
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestWriteReadFields
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestWriteReadFields
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigDecimal
name|bigDecimal
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|decimalWritableOut
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|dec
argument_list|)
decl_stmt|;
name|decimalWritableOut
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|byte
index|[]
name|valueBytes
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|valueBytes
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|decimalWritableIn
init|=
operator|new
name|HiveDecimalWritable
argument_list|()
decl_stmt|;
name|decimalWritableIn
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dec
argument_list|,
name|decimalWritableIn
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomBigIntegerBytesScaled
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1052
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomBigIntegerBytesScaled
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomBigIntegerBytesScaled
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomBigIntegerBytesScaled
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestBigIntegerBytesScaled
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBigIntegerBytesScaledSpecial
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestBigIntegerBytesScaled
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestBigIntegerBytesScaled
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigDecimal
name|bigDecimal
parameter_list|)
throws|throws
name|IOException
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|int
name|scale
init|=
name|oldDec
operator|.
name|scale
argument_list|()
decl_stmt|;
name|int
name|newScale
decl_stmt|;
if|if
condition|(
name|scale
operator|==
name|HiveDecimal
operator|.
name|MAX_SCALE
condition|)
block|{
name|newScale
operator|=
name|scale
expr_stmt|;
block|}
else|else
block|{
name|newScale
operator|=
name|scale
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|HiveDecimal
operator|.
name|MAX_SCALE
operator|-
name|scale
argument_list|)
expr_stmt|;
block|}
name|HiveDecimalV1
name|oldDecScaled
init|=
name|oldDec
operator|.
name|setScale
argument_list|(
name|newScale
argument_list|)
decl_stmt|;
name|HiveDecimalWritableV1
name|oldDecScaledWritable
init|=
operator|new
name|HiveDecimalWritableV1
argument_list|(
name|oldDecScaled
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytesExpected
init|=
name|oldDecScaledWritable
operator|.
name|getInternalStorage
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|dec
operator|.
name|bigIntegerBytesScaled
argument_list|(
name|newScale
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringExpr
operator|.
name|equal
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|bytesExpected
argument_list|,
literal|0
argument_list|,
name|bytesExpected
operator|.
name|length
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|HiveDecimalWritableV1
name|oldDecWritableRetrieve
init|=
operator|new
name|HiveDecimalWritableV1
argument_list|(
name|bytesExpected
argument_list|,
name|newScale
argument_list|)
decl_stmt|;
name|HiveDecimalV1
name|oldDecRetrieve
init|=
name|oldDecWritableRetrieve
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|oldDecRetrieve
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|HiveDecimal
name|decRetrieve
init|=
name|HiveDecimal
operator|.
name|createFromBigIntegerBytesAndScale
argument_list|(
name|bytes
argument_list|,
name|newScale
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|decRetrieve
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDecRetrieve
operator|.
name|toString
argument_list|()
argument_list|,
name|decRetrieve
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomRoundFloor
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1052
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomRound
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_FLOOR
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomRound
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_FLOOR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomRound
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|,
name|int
name|roundingMode
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestRound
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|,
name|roundingMode
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRoundFloorSpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestRound
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_FLOOR
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Used by all flavors.
specifier|private
name|void
name|doTestRound
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigDecimal
name|bigDecimal
parameter_list|,
name|int
name|roundingMode
parameter_list|)
block|{
comment|// Temporarily....
name|bigDecimal
operator|=
name|bigDecimal
operator|.
name|abs
argument_list|()
expr_stmt|;
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|HiveDecimalV1
name|oldScaledDec
decl_stmt|;
name|HiveDecimal
name|scaledDec
decl_stmt|;
for|for
control|(
name|int
name|newScale
init|=
operator|-
operator|(
literal|2
operator|*
name|HiveDecimal
operator|.
name|MAX_SCALE
operator|+
literal|1
operator|)
init|;
name|newScale
operator|<=
literal|2
operator|*
name|HiveDecimal
operator|.
name|MAX_SCALE
operator|+
literal|1
condition|;
name|newScale
operator|++
control|)
block|{
name|oldScaledDec
operator|=
name|oldDec
operator|.
name|setScale
argument_list|(
name|newScale
argument_list|,
name|roundingMode
argument_list|)
expr_stmt|;
name|boolean
name|isEqual
decl_stmt|;
if|if
condition|(
name|oldScaledDec
operator|==
literal|null
condition|)
block|{
name|scaledDec
operator|=
name|dec
operator|.
name|setScale
argument_list|(
name|newScale
argument_list|,
name|roundingMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|scaledDec
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
name|scaledDec
operator|=
name|dec
operator|.
name|setScale
argument_list|(
name|newScale
argument_list|,
name|roundingMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|scaledDec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isTenPowerBug
argument_list|(
name|oldScaledDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|scaledDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|isEqual
operator|=
name|oldScaledDec
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|scaledDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isEqual
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomRoundCeiling
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1053
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomRound
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_CEILING
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomRound
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_CEILING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRoundCeilingSpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestRound
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_CEILING
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomRoundHalfUp
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1053
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomRound
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_HALF_UP
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomRound
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_HALF_UP
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRoundHalfUpSpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestRound
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_HALF_UP
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomRoundHalfEven
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1053
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomRound
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_HALF_EVEN
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomRound
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_HALF_EVEN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRoundHalfEvenSpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|doTestRound
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|,
name|HiveDecimal
operator|.
name|ROUND_HALF_EVEN
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomCompareTo
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1054
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomCompareTo
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomCompareTo
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomCompareTo
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|BigDecimalPairFlavor
name|bigDecimalPairFlavor
range|:
name|BigDecimalPairFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
index|[]
name|pair
init|=
name|randHiveBigDecimalPair
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|bigDecimalPairFlavor
argument_list|)
decl_stmt|;
name|doTestCompareTo
argument_list|(
name|r
argument_list|,
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareToSpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal2
range|:
name|specialBigDecimals
control|)
block|{
name|doTestCompareTo
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|,
name|bigDecimal2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestCompareTo
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigDecimal
name|bigDecimal
parameter_list|,
name|BigDecimal
name|bigDecimal2
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|HiveDecimalV1
name|oldDec2
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal2
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec2
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec2
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal2
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec2
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec2
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// Verify.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec2
operator|.
name|toString
argument_list|()
argument_list|,
name|dec2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|oldCompareTo
decl_stmt|;
name|int
name|compareTo
decl_stmt|;
comment|// Same object.
name|oldCompareTo
operator|=
name|oldDec
operator|.
name|compareTo
argument_list|(
name|oldDec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldCompareTo
argument_list|)
expr_stmt|;
name|compareTo
operator|=
name|dec
operator|.
name|compareTo
argument_list|(
name|dec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|compareTo
argument_list|)
expr_stmt|;
comment|// Two objects.
name|oldCompareTo
operator|=
name|oldDec
operator|.
name|compareTo
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
name|compareTo
operator|=
name|dec
operator|.
name|compareTo
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldCompareTo
argument_list|,
name|compareTo
argument_list|)
expr_stmt|;
name|int
name|oldCompareToReverse
init|=
name|oldDec2
operator|.
name|compareTo
argument_list|(
name|oldDec
argument_list|)
decl_stmt|;
name|int
name|compareToReverse
init|=
name|dec2
operator|.
name|compareTo
argument_list|(
name|dec
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldCompareToReverse
argument_list|,
name|compareToReverse
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomAdd
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1055
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomAdd
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomAdd
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomAdd
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|BigDecimalPairFlavor
name|bigDecimalPairFlavor
range|:
name|BigDecimalPairFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
index|[]
name|pair
init|=
name|randHiveBigDecimalPair
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|bigDecimalPairFlavor
argument_list|)
decl_stmt|;
name|doTestAdd
argument_list|(
name|r
argument_list|,
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddSpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal2
range|:
name|specialBigDecimals
control|)
block|{
name|doTestAdd
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|,
name|bigDecimal2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestAdd
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigDecimal
name|bigDecimal
parameter_list|,
name|BigDecimal
name|bigDecimal2
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|HiveDecimalV1
name|oldDec2
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal2
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec2
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec2
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal2
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec2
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec2
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// Verify.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec2
operator|.
name|toString
argument_list|()
argument_list|,
name|dec2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add to self.
name|HiveDecimalV1
name|oldAddDec
decl_stmt|;
name|HiveDecimal
name|addDec
decl_stmt|;
name|oldAddDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec
argument_list|)
expr_stmt|;
name|boolean
name|isEqual
decl_stmt|;
if|if
condition|(
name|oldAddDec
operator|==
literal|null
condition|)
block|{
name|addDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addDec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|addDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec
argument_list|)
expr_stmt|;
if|if
condition|(
name|addDec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isTenPowerBug
argument_list|(
name|oldAddDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|addDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|isEqual
operator|=
name|oldAddDec
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|addDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isEqual
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Add two decimals.
name|oldAddDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldAddDec
operator|==
literal|null
condition|)
block|{
name|addDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addDec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|addDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
if|if
condition|(
name|addDec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isTenPowerBug
argument_list|(
name|oldAddDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|addDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|isEqual
operator|=
name|oldAddDec
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|addDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isEqual
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Add negative self.
name|oldAddDec
operator|=
name|oldDec
operator|.
name|add
argument_list|(
name|oldDec
operator|.
name|negate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldAddDec
operator|==
literal|null
condition|)
block|{
name|addDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec
operator|.
name|negate
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addDec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|addDec
operator|=
name|dec
operator|.
name|add
argument_list|(
name|dec
operator|.
name|negate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|addDec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isTenPowerBug
argument_list|(
name|oldAddDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|addDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|isEqual
operator|=
name|oldAddDec
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|addDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isEqual
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomSubtract
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1055
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomSubtract
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomSubtract
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomSubtract
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|BigDecimalPairFlavor
name|bigDecimalPairFlavor
range|:
name|BigDecimalPairFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
index|[]
name|pair
init|=
name|randHiveBigDecimalPair
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|bigDecimalPairFlavor
argument_list|)
decl_stmt|;
name|doTestSubtract
argument_list|(
name|r
argument_list|,
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubtractSpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal2
range|:
name|specialBigDecimals
control|)
block|{
name|doTestSubtract
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|,
name|bigDecimal2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestSubtract
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigDecimal
name|bigDecimal
parameter_list|,
name|BigDecimal
name|bigDecimal2
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|HiveDecimalV1
name|oldDec2
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal2
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec2
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec2
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal2
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec2
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec2
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// Verify.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec2
operator|.
name|toString
argument_list|()
argument_list|,
name|dec2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Subtract from self.
name|HiveDecimalV1
name|oldSubtractDec
decl_stmt|;
name|HiveDecimal
name|subtractDec
decl_stmt|;
name|oldSubtractDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldSubtractDec
operator|.
name|signum
argument_list|()
argument_list|)
expr_stmt|;
name|subtractDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|subtractDec
operator|.
name|signum
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isEqual
decl_stmt|;
name|oldSubtractDec
operator|=
name|oldDec
operator|.
name|subtract
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldSubtractDec
operator|==
literal|null
condition|)
block|{
name|subtractDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subtractDec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|subtractDec
operator|=
name|dec
operator|.
name|subtract
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
if|if
condition|(
name|subtractDec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isTenPowerBug
argument_list|(
name|oldSubtractDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|subtractDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|isEqual
operator|=
name|oldSubtractDec
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|subtractDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isEqual
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomMultiply
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1056
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomMultiply
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomMultiply
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomMultiply
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|BigDecimalPairFlavor
name|bigDecimalPairFlavor
range|:
name|BigDecimalPairFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
index|[]
name|pair
init|=
name|randHiveBigDecimalPair
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|,
name|bigDecimalPairFlavor
argument_list|)
decl_stmt|;
name|doTestMultiply
argument_list|(
name|r
argument_list|,
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiplySpecial
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1050
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
for|for
control|(
name|BigDecimal
name|bigDecimal2
range|:
name|specialBigDecimals
control|)
block|{
name|doTestMultiply
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|,
name|bigDecimal2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestMultiply
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigDecimal
name|bigDecimal
parameter_list|,
name|BigDecimal
name|bigDecimal2
parameter_list|)
block|{
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|HiveDecimalV1
name|oldDec2
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|bigDecimal2
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec2
operator|!=
literal|null
operator|&&
name|isTenPowerBug
argument_list|(
name|oldDec2
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|HiveDecimal
name|dec2
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal2
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDec2
operator|==
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|dec2
operator|==
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertTrue
argument_list|(
name|dec2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// Verify.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|toString
argument_list|()
argument_list|,
name|dec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDec2
operator|.
name|toString
argument_list|()
argument_list|,
name|dec2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Multiply by self.
name|BigDecimal
name|bigDecimalMultiply
init|=
name|bigDecimal
operator|.
name|multiply
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
name|BigDecimal
name|bigDecimalMultiplyAbs
init|=
name|bigDecimalMultiply
operator|.
name|abs
argument_list|()
decl_stmt|;
name|String
name|bigDecimalMultiplyAbsString
init|=
name|bigDecimalMultiplyAbs
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|digits
init|=
name|bigDecimalMultiplyAbsString
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|!=
operator|-
literal|1
condition|?
name|bigDecimalMultiplyAbsString
operator|.
name|length
argument_list|()
operator|-
literal|1
else|:
name|bigDecimalMultiplyAbsString
operator|.
name|length
argument_list|()
decl_stmt|;
name|HiveDecimalV1
name|oldMultiplyDec
decl_stmt|;
name|HiveDecimal
name|multiplyDec
decl_stmt|;
name|oldMultiplyDec
operator|=
name|oldDec
operator|.
name|multiply
argument_list|(
name|oldDec
argument_list|)
expr_stmt|;
name|boolean
name|isEqual
decl_stmt|;
if|if
condition|(
name|oldMultiplyDec
operator|==
literal|null
condition|)
block|{
name|multiplyDec
operator|=
name|dec
operator|.
name|multiply
argument_list|(
name|dec
argument_list|)
expr_stmt|;
if|if
condition|(
name|multiplyDec
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
name|multiplyDec
operator|=
name|dec
operator|.
name|multiply
argument_list|(
name|dec
argument_list|)
expr_stmt|;
if|if
condition|(
name|multiplyDec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isTenPowerBug
argument_list|(
name|oldMultiplyDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|multiplyDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|isEqual
operator|=
name|oldMultiplyDec
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|multiplyDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isEqual
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
name|bigDecimalMultiply
operator|=
name|bigDecimal
operator|.
name|multiply
argument_list|(
name|bigDecimal2
argument_list|)
expr_stmt|;
name|bigDecimalMultiplyAbs
operator|=
name|bigDecimalMultiply
operator|.
name|abs
argument_list|()
expr_stmt|;
name|bigDecimalMultiplyAbsString
operator|=
name|bigDecimalMultiplyAbs
operator|.
name|toString
argument_list|()
expr_stmt|;
name|digits
operator|=
name|bigDecimalMultiplyAbsString
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|!=
operator|-
literal|1
condition|?
name|bigDecimalMultiplyAbsString
operator|.
name|length
argument_list|()
operator|-
literal|1
else|:
name|bigDecimalMultiplyAbsString
operator|.
name|length
argument_list|()
expr_stmt|;
name|oldMultiplyDec
operator|=
name|oldDec
operator|.
name|multiply
argument_list|(
name|oldDec2
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldMultiplyDec
operator|==
literal|null
condition|)
block|{
name|multiplyDec
operator|=
name|dec
operator|.
name|multiply
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
if|if
condition|(
name|multiplyDec
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
name|multiplyDec
operator|=
name|dec
operator|.
name|multiply
argument_list|(
name|dec2
argument_list|)
expr_stmt|;
if|if
condition|(
name|multiplyDec
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isTenPowerBug
argument_list|(
name|oldMultiplyDec
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|multiplyDec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|isEqual
operator|=
name|oldMultiplyDec
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|multiplyDec
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isEqual
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
annotation|@
name|Test
specifier|public
name|void
name|testRandomDecimal64
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|2497
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
name|doTestRandomDecimal64
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BigDecimalFlavor
name|bigDecimalFlavor
range|:
name|BigDecimalFlavor
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|sparseAlphabet
range|:
name|sparseAlphabets
control|)
block|{
name|doTestRandomDecimal64
argument_list|(
name|r
argument_list|,
name|sparseAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doTestRandomDecimal64
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|digitAlphabet
parameter_list|,
name|BigDecimalFlavor
name|bigDecimalFlavor
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|POUND_FACTOR
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|randHiveBigDecimal
argument_list|(
name|r
argument_list|,
name|digitAlphabet
argument_list|,
name|bigDecimalFlavor
argument_list|)
decl_stmt|;
name|doTestDecimal64
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecimal64Special
parameter_list|()
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|198
argument_list|)
decl_stmt|;
for|for
control|(
name|BigDecimal
name|bigDecimal
range|:
name|specialBigDecimals
control|)
block|{
name|int
name|precision
init|=
name|Math
operator|.
name|min
argument_list|(
name|bigDecimal
operator|.
name|precision
argument_list|()
argument_list|,
name|HiveDecimalWritable
operator|.
name|DECIMAL64_DECIMAL_DIGITS
argument_list|)
decl_stmt|;
name|int
name|scale
init|=
name|Math
operator|.
name|min
argument_list|(
name|bigDecimal
operator|.
name|scale
argument_list|()
argument_list|,
name|precision
argument_list|)
decl_stmt|;
name|doTestDecimal64
argument_list|(
name|r
argument_list|,
name|bigDecimal
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestDecimal64
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigDecimal
name|inputBigDecimal
parameter_list|)
block|{
specifier|final
name|int
name|precision
init|=
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|HiveDecimalWritable
operator|.
name|DECIMAL64_DECIMAL_DIGITS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|HiveDecimalWritable
operator|.
name|isPrecisionDecimal64
argument_list|(
name|precision
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|scale
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|precision
operator|+
literal|1
argument_list|)
decl_stmt|;
name|doTestDecimal64
argument_list|(
name|r
argument_list|,
name|inputBigDecimal
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestDecimal64
parameter_list|(
name|Random
name|r
parameter_list|,
name|BigDecimal
name|inputBigDecimal
parameter_list|,
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|BigDecimal
name|bigDecimal
init|=
name|inputBigDecimal
decl_stmt|;
if|if
condition|(
operator|!
name|bigDecimal
operator|.
name|equals
argument_list|(
name|BigDecimal
operator|.
name|ZERO
argument_list|)
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|bigDecimal
operator|=
name|bigDecimal
operator|.
name|remainder
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
operator|.
name|pow
argument_list|(
name|precision
operator|-
name|scale
argument_list|)
argument_list|)
expr_stmt|;
name|bigDecimal
operator|=
name|bigDecimal
operator|.
name|setScale
argument_list|(
name|scale
argument_list|,
name|BigDecimal
operator|.
name|ROUND_DOWN
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bigDecimal
operator|.
name|unscaledValue
argument_list|()
operator|.
name|equals
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
condition|)
block|{
break|break;
block|}
name|bigDecimal
operator|=
name|randHiveBigDecimalNormalRange
argument_list|(
name|r
argument_list|,
name|standardAlphabet
argument_list|)
expr_stmt|;
block|}
block|}
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bigDecimal
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|dec
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|dec
operator|.
name|validate
argument_list|()
expr_stmt|;
name|HiveDecimalWritable
name|decWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
name|dec
argument_list|)
decl_stmt|;
specifier|final
name|long
name|decimal64Long
init|=
name|decWritable
operator|.
name|serialize64
argument_list|(
name|scale
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|decimal64Long
operator|<=
name|HiveDecimalWritable
operator|.
name|getDecimal64AbsMax
argument_list|(
name|precision
argument_list|)
argument_list|)
expr_stmt|;
name|HiveDecimalWritable
name|resultWritable
init|=
operator|new
name|HiveDecimalWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|resultWritable
operator|.
name|deserialize64
argument_list|(
name|decimal64Long
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dec
argument_list|,
name|resultWritable
operator|.
name|getHiveDecimal
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
specifier|public
specifier|static
name|String
name|displayBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\\%03d"
argument_list|,
call|(
name|int
call|)
argument_list|(
name|bytes
index|[
name|i
index|]
operator|&
literal|0xff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

