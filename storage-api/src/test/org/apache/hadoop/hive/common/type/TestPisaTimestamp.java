begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|RoundingMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|RandomTypeUtil
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test for ListColumnVector  */
end_comment

begin_class
specifier|public
class|class
name|TestPisaTimestamp
block|{
specifier|private
specifier|static
name|int
name|TEST_COUNT
init|=
literal|5000
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPisaTimestampCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Timestamp
name|randTimestamp
init|=
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|PisaTimestamp
name|pisaTimestamp
init|=
operator|new
name|PisaTimestamp
argument_list|(
name|randTimestamp
argument_list|)
decl_stmt|;
name|Timestamp
name|reconstructedTimestamp
init|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|pisaTimestamp
operator|.
name|timestampUpdate
argument_list|(
name|reconstructedTimestamp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|randTimestamp
operator|.
name|equals
argument_list|(
name|reconstructedTimestamp
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|BigDecimal
name|BIG_MAX_LONG
init|=
operator|new
name|BigDecimal
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|static
name|BigDecimal
name|BIG_MIN_LONG
init|=
operator|new
name|BigDecimal
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
specifier|static
name|BigDecimal
name|BIG_NANOSECONDS_PER_DAY
init|=
operator|new
name|BigDecimal
argument_list|(
name|PisaTimestamp
operator|.
name|NANOSECONDS_PER_DAY
argument_list|)
decl_stmt|;
specifier|static
name|boolean
name|beyondLongRange
init|=
literal|false
decl_stmt|;
specifier|private
name|BigDecimal
index|[]
name|randomEpochDayAndNanoOfDay
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|double
name|randDouble
init|=
operator|(
name|r
operator|.
name|nextDouble
argument_list|()
operator|-
literal|0.5D
operator|)
operator|*
literal|2.0D
decl_stmt|;
name|randDouble
operator|*=
name|PisaTimestamp
operator|.
name|NANOSECONDS_PER_DAY
expr_stmt|;
name|randDouble
operator|*=
literal|365
operator|*
literal|10000
expr_stmt|;
name|BigDecimal
name|bigDecimal
init|=
operator|new
name|BigDecimal
argument_list|(
name|randDouble
argument_list|)
decl_stmt|;
name|bigDecimal
operator|=
name|bigDecimal
operator|.
name|setScale
argument_list|(
literal|0
argument_list|,
name|RoundingMode
operator|.
name|HALF_UP
argument_list|)
expr_stmt|;
if|if
condition|(
name|bigDecimal
operator|.
name|compareTo
argument_list|(
name|BIG_MAX_LONG
argument_list|)
operator|>
literal|0
operator|||
name|bigDecimal
operator|.
name|compareTo
argument_list|(
name|BIG_MIN_LONG
argument_list|)
operator|<
literal|0
condition|)
block|{
name|beyondLongRange
operator|=
literal|true
expr_stmt|;
block|}
name|BigDecimal
index|[]
name|divideAndRemainder
init|=
name|bigDecimal
operator|.
name|divideAndRemainder
argument_list|(
name|BIG_NANOSECONDS_PER_DAY
argument_list|)
decl_stmt|;
return|return
operator|new
name|BigDecimal
index|[]
block|{
name|divideAndRemainder
index|[
literal|0
index|]
block|,
name|divideAndRemainder
index|[
literal|1
index|]
block|,
name|bigDecimal
block|}
return|;
block|}
specifier|private
name|BigDecimal
name|pisaTimestampToBig
parameter_list|(
name|PisaTimestamp
name|pisaTimestamp
parameter_list|)
block|{
name|BigDecimal
name|bigNanoOfDay
init|=
operator|new
name|BigDecimal
argument_list|(
name|pisaTimestamp
operator|.
name|getNanoOfDay
argument_list|()
argument_list|)
decl_stmt|;
name|BigDecimal
name|bigEpochDay
init|=
operator|new
name|BigDecimal
argument_list|(
name|pisaTimestamp
operator|.
name|getEpochDay
argument_list|()
argument_list|)
decl_stmt|;
name|BigDecimal
name|result
init|=
name|bigEpochDay
operator|.
name|multiply
argument_list|(
name|BIG_NANOSECONDS_PER_DAY
argument_list|)
decl_stmt|;
name|result
operator|=
name|result
operator|.
name|add
argument_list|(
name|bigNanoOfDay
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPisaTimestampArithmetic
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|BigDecimal
index|[]
name|random1
init|=
name|randomEpochDayAndNanoOfDay
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|long
name|epochDay1
init|=
name|random1
index|[
literal|0
index|]
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|nanoOfDay1
init|=
name|random1
index|[
literal|1
index|]
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|PisaTimestamp
name|pisa1
init|=
operator|new
name|PisaTimestamp
argument_list|(
name|epochDay1
argument_list|,
name|nanoOfDay1
argument_list|)
decl_stmt|;
name|BigDecimal
name|big1
init|=
name|random1
index|[
literal|2
index|]
decl_stmt|;
name|BigDecimal
index|[]
name|random2
init|=
name|randomEpochDayAndNanoOfDay
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|long
name|epochDay2
init|=
name|random2
index|[
literal|0
index|]
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|nanoOfDay2
init|=
name|random2
index|[
literal|1
index|]
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|PisaTimestamp
name|pisa2
init|=
operator|new
name|PisaTimestamp
argument_list|(
name|epochDay2
argument_list|,
name|nanoOfDay2
argument_list|)
decl_stmt|;
name|BigDecimal
name|big2
init|=
name|random2
index|[
literal|2
index|]
decl_stmt|;
name|BigDecimal
name|expectedBig
decl_stmt|;
name|PisaTimestamp
name|pisaResult
init|=
operator|new
name|PisaTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|expectedBig
operator|=
name|big1
operator|.
name|add
argument_list|(
name|big2
argument_list|)
expr_stmt|;
name|PisaTimestamp
operator|.
name|add
argument_list|(
name|pisa1
argument_list|,
name|pisa2
argument_list|,
name|pisaResult
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectedBig
operator|=
name|big1
operator|.
name|add
argument_list|(
name|big2
operator|.
name|negate
argument_list|()
argument_list|)
expr_stmt|;
name|PisaTimestamp
operator|.
name|subtract
argument_list|(
name|pisa1
argument_list|,
name|pisa2
argument_list|,
name|pisaResult
argument_list|)
expr_stmt|;
block|}
name|BigDecimal
name|resultBig
init|=
name|pisaTimestampToBig
argument_list|(
name|pisaResult
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedBig
argument_list|,
name|resultBig
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

