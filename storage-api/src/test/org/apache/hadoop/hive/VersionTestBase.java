begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|VersionTestBase
block|{
specifier|public
name|String
name|getParameterTypeName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|,
name|String
argument_list|>
name|versionedClassToNameMap
parameter_list|)
block|{
if|if
condition|(
name|versionedClassToNameMap
operator|.
name|containsKey
argument_list|(
name|parameterType
argument_list|)
condition|)
block|{
return|return
name|versionedClassToNameMap
operator|.
name|get
argument_list|(
name|parameterType
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|parameterType
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|getMethodKey
parameter_list|(
name|Method
name|method
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|,
name|String
argument_list|>
name|versionedClassToNameMap
parameter_list|)
block|{
comment|//-------------------------------------------------
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|modifiers
init|=
name|method
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|modifiers
operator|&
name|Modifier
operator|.
name|STATIC
operator|)
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"static"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"non-static"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
init|=
name|method
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getParameterTypeName
argument_list|(
name|returnType
argument_list|,
name|versionedClassToNameMap
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
range|:
name|parameterTypes
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|getParameterTypeName
argument_list|(
name|parameterType
argument_list|,
name|versionedClassToNameMap
argument_list|)
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|exceptionsThrown
init|=
name|method
operator|.
name|getExceptionTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|exceptionsThrown
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" throws "
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionThrown
range|:
name|exceptionsThrown
control|)
block|{
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|exceptionThrown
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
comment|//-------------------------------------------------
block|}
specifier|public
name|String
name|getFieldKey
parameter_list|(
name|Field
name|field
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|,
name|String
argument_list|>
name|versionedClassToNameMap
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
comment|//-------------------------------------------------
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|modifiers
init|=
name|field
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|modifiers
operator|&
name|Modifier
operator|.
name|STATIC
operator|)
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"static"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"non-static"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|fieldType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getParameterTypeName
argument_list|(
name|fieldType
argument_list|,
name|versionedClassToNameMap
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|modifiers
operator|&
name|Modifier
operator|.
name|STATIC
operator|)
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
comment|//-------------------------------------------------
block|}
specifier|public
name|Method
index|[]
name|onlyPublicMethods
parameter_list|(
name|Method
index|[]
name|methods
parameter_list|)
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
operator|(
name|method
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|PUBLIC
operator|)
operator|!=
literal|0
condition|)
block|{
name|resultList
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resultList
operator|.
name|toArray
argument_list|(
operator|new
name|Method
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
name|Field
index|[]
name|onlyPublicFields
parameter_list|(
name|Field
index|[]
name|fields
parameter_list|)
block|{
name|List
argument_list|<
name|Field
argument_list|>
name|resultList
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|(
name|field
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|PUBLIC
operator|)
operator|!=
literal|0
condition|)
block|{
name|resultList
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resultList
operator|.
name|toArray
argument_list|(
operator|new
name|Field
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|String
argument_list|>
name|getMethodKeySetForAnnotation
parameter_list|(
name|Method
index|[]
name|methods
parameter_list|,
name|Class
name|annotationClass
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|,
name|String
argument_list|>
name|versionedClassToNameMap
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|Annotation
index|[]
name|declaredAnnotations
init|=
name|method
operator|.
name|getDeclaredAnnotations
argument_list|()
decl_stmt|;
name|boolean
name|isFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Annotation
name|declaredAnnotation
range|:
name|declaredAnnotations
control|)
block|{
if|if
condition|(
name|declaredAnnotation
operator|.
name|annotationType
argument_list|()
operator|.
name|equals
argument_list|(
name|annotationClass
argument_list|)
condition|)
block|{
name|isFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isFound
condition|)
block|{
continue|continue;
block|}
name|result
operator|.
name|add
argument_list|(
name|getMethodKey
argument_list|(
name|method
argument_list|,
name|versionedClassToNameMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|String
argument_list|>
name|getMethodKeySetExcludingAnnotations
parameter_list|(
name|Method
index|[]
name|methods
parameter_list|,
name|List
argument_list|<
name|Class
argument_list|>
name|versionAnnotations
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|,
name|String
argument_list|>
name|versionedClassToNameMap
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
name|Annotation
index|[]
name|declaredAnnotations
init|=
name|method
operator|.
name|getDeclaredAnnotations
argument_list|()
decl_stmt|;
name|boolean
name|isFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Annotation
name|declaredAnnotation
range|:
name|declaredAnnotations
control|)
block|{
for|for
control|(
name|Class
name|versionAnnotation
range|:
name|versionAnnotations
control|)
block|{
if|if
condition|(
name|declaredAnnotation
operator|.
name|annotationType
argument_list|()
operator|.
name|equals
argument_list|(
name|versionAnnotation
argument_list|)
condition|)
block|{
name|isFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|isFound
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|isFound
condition|)
block|{
continue|continue;
block|}
name|String
name|methodKey
init|=
name|getMethodKey
argument_list|(
name|method
argument_list|,
name|versionedClassToNameMap
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|methodKey
operator|.
name|equals
argument_list|(
literal|"non-static int compareTo(Object)"
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|methodKey
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|String
argument_list|>
name|getFieldKeySetForAnnotation
parameter_list|(
name|Field
index|[]
name|fields
parameter_list|,
name|Class
name|annotationClass
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|,
name|String
argument_list|>
name|versionedClassToNameMap
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|Annotation
index|[]
name|declaredAnnotations
init|=
name|field
operator|.
name|getDeclaredAnnotations
argument_list|()
decl_stmt|;
name|boolean
name|isFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Annotation
name|declaredAnnotation
range|:
name|declaredAnnotations
control|)
block|{
if|if
condition|(
name|declaredAnnotation
operator|.
name|annotationType
argument_list|()
operator|.
name|equals
argument_list|(
name|annotationClass
argument_list|)
condition|)
block|{
name|isFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isFound
condition|)
block|{
continue|continue;
block|}
name|result
operator|.
name|add
argument_list|(
name|getFieldKey
argument_list|(
name|field
argument_list|,
name|versionedClassToNameMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|String
argument_list|>
name|getFieldKeySetExcludingAnnotations
parameter_list|(
name|Field
index|[]
name|fields
parameter_list|,
name|List
argument_list|<
name|Class
argument_list|>
name|versionAnnotations
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|,
name|String
argument_list|>
name|versionedClassToNameMap
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|Annotation
index|[]
name|declaredAnnotations
init|=
name|field
operator|.
name|getDeclaredAnnotations
argument_list|()
decl_stmt|;
name|boolean
name|isFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Annotation
name|declaredAnnotation
range|:
name|declaredAnnotations
control|)
block|{
for|for
control|(
name|Class
name|versionAnnotation
range|:
name|versionAnnotations
control|)
block|{
if|if
condition|(
name|declaredAnnotation
operator|.
name|annotationType
argument_list|()
operator|.
name|equals
argument_list|(
name|versionAnnotation
argument_list|)
condition|)
block|{
name|isFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|isFound
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|isFound
condition|)
block|{
continue|continue;
block|}
name|result
operator|.
name|add
argument_list|(
name|getFieldKey
argument_list|(
name|field
argument_list|,
name|versionedClassToNameMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// For now, olderClass has 1 version and newerClass 2 versions...
specifier|public
name|void
name|doVerifyVersions
parameter_list|(
name|Class
name|olderClass
parameter_list|,
name|Class
name|olderVersionClass
parameter_list|,
name|Class
name|newerClass
parameter_list|,
name|Class
name|newerVersionClass
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|,
name|String
argument_list|>
name|versionedClassToNameMap
parameter_list|)
throws|throws
name|IllegalAccessException
block|{
name|List
argument_list|<
name|Class
argument_list|>
name|olderVersionClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|>
argument_list|()
decl_stmt|;
name|olderVersionClasses
operator|.
name|add
argument_list|(
name|olderVersionClass
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Class
argument_list|>
name|newerVersionClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|>
argument_list|()
decl_stmt|;
name|newerVersionClasses
operator|.
name|add
argument_list|(
name|olderVersionClass
argument_list|)
expr_stmt|;
name|newerVersionClasses
operator|.
name|add
argument_list|(
name|newerVersionClass
argument_list|)
expr_stmt|;
comment|//----------------------------------------------------------------------------------------------
name|Method
index|[]
name|olderMethods
init|=
name|onlyPublicMethods
argument_list|(
name|olderClass
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|olderMethodSet
init|=
name|getMethodKeySetForAnnotation
argument_list|(
name|olderMethods
argument_list|,
name|olderVersionClass
argument_list|,
name|versionedClassToNameMap
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|olderNoMethodAnnotationsSet
init|=
name|getMethodKeySetExcludingAnnotations
argument_list|(
name|olderMethods
argument_list|,
name|olderVersionClasses
argument_list|,
name|versionedClassToNameMap
argument_list|)
decl_stmt|;
name|Field
index|[]
name|olderFields
init|=
name|onlyPublicFields
argument_list|(
name|olderClass
operator|.
name|getFields
argument_list|()
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|olderFieldSet
init|=
name|getFieldKeySetForAnnotation
argument_list|(
name|olderFields
argument_list|,
name|olderVersionClass
argument_list|,
name|versionedClassToNameMap
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|olderNoFieldAnnotationsSet
init|=
name|getFieldKeySetExcludingAnnotations
argument_list|(
name|olderFields
argument_list|,
name|olderVersionClasses
argument_list|,
name|versionedClassToNameMap
argument_list|)
decl_stmt|;
comment|//----------------------------------------------------------------------------------------------
name|Method
index|[]
name|newerMethods
init|=
name|onlyPublicMethods
argument_list|(
name|newerClass
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|newerMethodSetV1
init|=
name|getMethodKeySetForAnnotation
argument_list|(
name|newerMethods
argument_list|,
name|olderVersionClass
argument_list|,
name|versionedClassToNameMap
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|newerMethodSetV2
init|=
name|getMethodKeySetForAnnotation
argument_list|(
name|newerMethods
argument_list|,
name|newerVersionClass
argument_list|,
name|versionedClassToNameMap
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|newerNoMethodAnnotationsSetV1andV2
init|=
name|getMethodKeySetExcludingAnnotations
argument_list|(
name|newerMethods
argument_list|,
name|newerVersionClasses
argument_list|,
name|versionedClassToNameMap
argument_list|)
decl_stmt|;
name|Field
index|[]
name|newerFields
init|=
name|onlyPublicFields
argument_list|(
name|newerClass
operator|.
name|getFields
argument_list|()
argument_list|)
decl_stmt|;
comment|// doDisplayFields(newerFields, newerClass);
name|TreeSet
argument_list|<
name|String
argument_list|>
name|newerFieldSetV1
init|=
name|getFieldKeySetForAnnotation
argument_list|(
name|newerFields
argument_list|,
name|olderVersionClass
argument_list|,
name|versionedClassToNameMap
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|newerFieldSetV2
init|=
name|getFieldKeySetForAnnotation
argument_list|(
name|newerFields
argument_list|,
name|newerVersionClass
argument_list|,
name|versionedClassToNameMap
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|newerNoFieldAnnotationsSetV1andV2
init|=
name|getFieldKeySetExcludingAnnotations
argument_list|(
name|newerFields
argument_list|,
name|newerVersionClasses
argument_list|,
name|versionedClassToNameMap
argument_list|)
decl_stmt|;
comment|//----------------------------------------------------------------------------------------------
comment|// VALIDATION
comment|//----------------------------------------------------------------------------------------------
comment|// No version annotation?
if|if
condition|(
name|olderNoMethodAnnotationsSet
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Class "
operator|+
name|olderClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" has 1 or more public methods without a version V1 annotation "
operator|+
name|olderNoMethodAnnotationsSet
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|olderNoFieldAnnotationsSet
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Class "
operator|+
name|olderClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" has 1 or more public fields without a version V1 annotation "
operator|+
name|olderNoFieldAnnotationsSet
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newerNoMethodAnnotationsSetV1andV2
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Class "
operator|+
name|newerClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" has 1 or more public methods without a version V1 or V2 annotation "
operator|+
name|newerNoMethodAnnotationsSetV1andV2
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newerNoFieldAnnotationsSetV1andV2
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Class "
operator|+
name|newerClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" has 1 or more public methods without a version V1 or V2 annotation "
operator|+
name|newerNoFieldAnnotationsSetV1andV2
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Do the V1 methods of older and newer match?
if|if
condition|(
operator|!
name|olderMethodSet
operator|.
name|equals
argument_list|(
name|newerMethodSetV1
argument_list|)
condition|)
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|leftCopy
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|olderMethodSet
argument_list|)
decl_stmt|;
name|leftCopy
operator|.
name|removeAll
argument_list|(
name|newerMethodSetV1
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|rightCopy
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|newerMethodSetV1
argument_list|)
decl_stmt|;
name|rightCopy
operator|.
name|removeAll
argument_list|(
name|olderMethodSet
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Class "
operator|+
name|olderClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" and class "
operator|+
name|newerClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" methods are different for V1 "
operator|+
name|leftCopy
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|rightCopy
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Do the V1 fields of older and newer match?
if|if
condition|(
operator|!
name|olderFieldSet
operator|.
name|equals
argument_list|(
name|newerFieldSetV1
argument_list|)
condition|)
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|leftCopy
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|olderFieldSet
argument_list|)
decl_stmt|;
name|leftCopy
operator|.
name|removeAll
argument_list|(
name|newerFieldSetV1
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|rightCopy
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|newerFieldSetV1
argument_list|)
decl_stmt|;
name|rightCopy
operator|.
name|removeAll
argument_list|(
name|olderFieldSet
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Class "
operator|+
name|olderClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" and class "
operator|+
name|newerClass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" fields are different for V1 "
operator|+
name|leftCopy
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|rightCopy
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

