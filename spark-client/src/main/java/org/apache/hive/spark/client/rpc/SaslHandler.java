begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|SimpleChannelInboundHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Abstract SASL handler. Abstracts the auth protocol handling and encryption, if it's enabled.  * Needs subclasses to provide access to the actual underlying SASL implementation (client or  * server).  */
end_comment

begin_class
specifier|abstract
class|class
name|SaslHandler
extends|extends
name|SimpleChannelInboundHandler
argument_list|<
name|Rpc
operator|.
name|SaslMessage
argument_list|>
implements|implements
name|KryoMessageCodec
operator|.
name|EncryptionHandler
block|{
comment|// LOG is not static to make debugging easier (being able to identify which sub-class
comment|// generated the log message).
specifier|private
specifier|final
name|Logger
name|LOG
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|requiresEncryption
decl_stmt|;
specifier|private
name|KryoMessageCodec
name|kryo
decl_stmt|;
specifier|private
name|boolean
name|hasAuthResponse
init|=
literal|false
decl_stmt|;
specifier|protected
name|SaslHandler
parameter_list|(
name|RpcConfiguration
name|config
parameter_list|)
block|{
name|this
operator|.
name|requiresEncryption
operator|=
name|Rpc
operator|.
name|SASL_AUTH_CONF
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getSaslOptions
argument_list|()
operator|.
name|get
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|LOG
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Use a separate method to make it easier to create a SaslHandler without having to
comment|// plumb the KryoMessageCodec instance through the constructors.
name|void
name|setKryoMessageCodec
parameter_list|(
name|KryoMessageCodec
name|kryo
parameter_list|)
block|{
name|this
operator|.
name|kryo
operator|=
name|kryo
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
specifier|final
name|void
name|channelRead0
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Rpc
operator|.
name|SaslMessage
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Handling SASL challenge message..."
argument_list|)
expr_stmt|;
name|Rpc
operator|.
name|SaslMessage
name|response
init|=
name|update
argument_list|(
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending SASL challenge response..."
argument_list|)
expr_stmt|;
name|hasAuthResponse
operator|=
literal|true
expr_stmt|;
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|writeAndFlush
argument_list|(
name|response
argument_list|)
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isComplete
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// If negotiation is complete, remove this handler from the pipeline, and register it with
comment|// the Kryo instance to handle encryption if needed.
name|ctx
operator|.
name|channel
argument_list|()
operator|.
name|pipeline
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|String
name|qop
init|=
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL negotiation finished with QOP {}."
argument_list|,
name|qop
argument_list|)
expr_stmt|;
if|if
condition|(
name|Rpc
operator|.
name|SASL_AUTH_CONF
operator|.
name|equals
argument_list|(
name|qop
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SASL confidentiality enabled."
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|setEncryptionHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|requiresEncryption
condition|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Encryption required, but SASL negotiation did not set it up."
argument_list|)
throw|;
block|}
name|dispose
argument_list|()
expr_stmt|;
block|}
name|onComplete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelInactive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|dispose
argument_list|()
expr_stmt|;
name|super
operator|.
name|channelInactive
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isComplete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in SASL negotiation."
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|onError
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|ctx
operator|.
name|fireExceptionCaught
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|isComplete
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getNegotiatedProperty
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|Rpc
operator|.
name|SaslMessage
name|update
parameter_list|(
name|Rpc
operator|.
name|SaslMessage
name|challenge
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|onComplete
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|protected
specifier|abstract
name|void
name|onError
parameter_list|(
name|Throwable
name|t
parameter_list|)
function_decl|;
block|}
end_class

end_unit

