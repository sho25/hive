begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|counter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|Accumulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|AccumulatorParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaSparkContext
import|;
end_import

begin_class
specifier|public
class|class
name|SparkCounter
implements|implements
name|Serializable
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|displayName
decl_stmt|;
specifier|private
name|Accumulator
argument_list|<
name|Long
argument_list|>
name|accumulator
decl_stmt|;
comment|// Values of accumulators can only be read on the SparkContext side. This field is used when
comment|// creating a snapshot to be sent to the RSC client.
specifier|private
name|long
name|accumValue
decl_stmt|;
specifier|public
name|SparkCounter
parameter_list|()
block|{
comment|// For serialization.
block|}
specifier|private
name|SparkCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
name|this
operator|.
name|accumValue
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|SparkCounter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|String
name|groupName
parameter_list|,
name|long
name|initValue
parameter_list|,
name|JavaSparkContext
name|sparkContext
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
name|LongAccumulatorParam
name|longParam
init|=
operator|new
name|LongAccumulatorParam
argument_list|()
decl_stmt|;
name|String
name|accumulatorName
init|=
name|groupName
operator|+
literal|"_"
operator|+
name|name
decl_stmt|;
name|this
operator|.
name|accumulator
operator|=
name|sparkContext
operator|.
name|accumulator
argument_list|(
name|initValue
argument_list|,
name|accumulatorName
argument_list|,
name|longParam
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|accumulator
operator|!=
literal|null
condition|)
block|{
return|return
name|accumulator
operator|.
name|value
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|accumValue
return|;
block|}
block|}
specifier|public
name|void
name|increment
parameter_list|(
name|long
name|incr
parameter_list|)
block|{
name|accumulator
operator|.
name|add
argument_list|(
name|incr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
return|return
name|displayName
return|;
block|}
specifier|public
name|void
name|setDisplayName
parameter_list|(
name|String
name|displayName
parameter_list|)
block|{
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
block|}
name|SparkCounter
name|snapshot
parameter_list|()
block|{
return|return
operator|new
name|SparkCounter
argument_list|(
name|name
argument_list|,
name|displayName
argument_list|,
name|accumulator
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
class|class
name|LongAccumulatorParam
implements|implements
name|AccumulatorParam
argument_list|<
name|Long
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Long
name|addAccumulator
parameter_list|(
name|Long
name|t1
parameter_list|,
name|Long
name|t2
parameter_list|)
block|{
return|return
name|t1
operator|+
name|t2
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|addInPlace
parameter_list|(
name|Long
name|r1
parameter_list|,
name|Long
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|+
name|r2
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|zero
parameter_list|(
name|Long
name|initialValue
parameter_list|)
block|{
return|return
literal|0L
return|;
block|}
block|}
block|}
end_class

end_unit

