begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ServerBootstrap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOption
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioServerSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|GenericFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Promise
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * An RPC server. The server matches remote clients based on a secret that is generated on  * the server - the secret needs to be given to the client through some other mechanism for  * this to work.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RpcServer
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RpcServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SecureRandom
name|RND
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|address
decl_stmt|;
specifier|private
specifier|final
name|Channel
name|channel
decl_stmt|;
specifier|private
specifier|final
name|EventLoopGroup
name|group
decl_stmt|;
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|ClientInfo
argument_list|>
name|pendingClients
decl_stmt|;
specifier|private
specifier|final
name|RpcConfiguration
name|config
decl_stmt|;
specifier|public
name|RpcServer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|config
operator|=
operator|new
name|RpcConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|group
operator|=
operator|new
name|NioEventLoopGroup
argument_list|(
name|this
operator|.
name|config
operator|.
name|getRpcThreadCount
argument_list|()
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"RPC-Handler-%d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|channel
operator|=
operator|new
name|ServerBootstrap
argument_list|()
operator|.
name|group
argument_list|(
name|group
argument_list|)
operator|.
name|channel
argument_list|(
name|NioServerSocketChannel
operator|.
name|class
argument_list|)
operator|.
name|childHandler
argument_list|(
operator|new
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|HelloDispatcher
name|dispatcher
init|=
operator|new
name|HelloDispatcher
argument_list|()
decl_stmt|;
specifier|final
name|Rpc
name|newRpc
init|=
name|Rpc
operator|.
name|createRpc
argument_list|(
name|RpcServer
operator|.
name|this
operator|.
name|config
argument_list|,
name|ch
argument_list|,
name|dispatcher
argument_list|,
name|group
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|rpc
operator|=
name|newRpc
expr_stmt|;
name|Runnable
name|cancelTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Timed out waiting for hello from client."
argument_list|)
expr_stmt|;
name|newRpc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|dispatcher
operator|.
name|cancelTask
operator|=
name|group
operator|.
name|schedule
argument_list|(
name|cancelTask
argument_list|,
name|RpcServer
operator|.
name|this
operator|.
name|config
operator|.
name|getServerConnectTimeoutMs
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_BACKLOG
argument_list|,
literal|1
argument_list|)
operator|.
name|option
argument_list|(
name|ChannelOption
operator|.
name|SO_REUSEADDR
argument_list|,
literal|true
argument_list|)
operator|.
name|childOption
argument_list|(
name|ChannelOption
operator|.
name|SO_KEEPALIVE
argument_list|,
literal|true
argument_list|)
operator|.
name|bind
argument_list|(
literal|0
argument_list|)
operator|.
name|sync
argument_list|()
operator|.
name|channel
argument_list|()
expr_stmt|;
name|this
operator|.
name|port
operator|=
operator|(
operator|(
name|InetSocketAddress
operator|)
name|channel
operator|.
name|localAddress
argument_list|()
operator|)
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|pendingClients
operator|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|ClientInfo
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|this
operator|.
name|config
operator|.
name|getServerAddress
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tells the RPC server to expect a connection from a new client.    *    * @param secret The secret the client will send to the server to identify itself.    * @param serverDispatcher The dispatcher to use when setting up the RPC instance.    * @return A future that can be used to wait for the client connection, which also provides the    *         secret needed for the client to connect.    */
specifier|public
name|Future
argument_list|<
name|Rpc
argument_list|>
name|registerClient
parameter_list|(
name|String
name|secret
parameter_list|,
name|RpcDispatcher
name|serverDispatcher
parameter_list|)
block|{
specifier|final
name|Promise
argument_list|<
name|Rpc
argument_list|>
name|promise
init|=
name|group
operator|.
name|next
argument_list|()
operator|.
name|newPromise
argument_list|()
decl_stmt|;
name|Runnable
name|timeout
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|promise
operator|.
name|setFailure
argument_list|(
operator|new
name|TimeoutException
argument_list|(
literal|"Timed out waiting for client connection."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|timeoutFuture
init|=
name|group
operator|.
name|schedule
argument_list|(
name|timeout
argument_list|,
name|config
operator|.
name|getServerConnectTimeoutMs
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
specifier|final
name|ClientInfo
name|client
init|=
operator|new
name|ClientInfo
argument_list|(
name|promise
argument_list|,
name|secret
argument_list|,
name|serverDispatcher
argument_list|,
name|timeoutFuture
argument_list|)
decl_stmt|;
name|pendingClients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|promise
operator|.
name|addListener
argument_list|(
operator|new
name|GenericFutureListener
argument_list|<
name|Promise
argument_list|<
name|Rpc
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|Promise
argument_list|<
name|Rpc
argument_list|>
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|pendingClients
operator|.
name|remove
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|promise
return|;
block|}
comment|/**    * Creates a secret for identifying a client connection.    */
specifier|public
name|String
name|createSecret
parameter_list|()
block|{
name|byte
index|[]
name|secret
init|=
operator|new
name|byte
index|[
name|config
operator|.
name|getSecretBits
argument_list|()
operator|/
literal|8
index|]
decl_stmt|;
name|RND
operator|.
name|nextBytes
argument_list|(
name|secret
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|secret
control|)
block|{
if|if
condition|(
name|b
operator|<
literal|10
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ClientInfo
argument_list|>
name|clients
init|=
name|pendingClients
operator|.
name|iterator
argument_list|()
init|;
name|clients
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClientInfo
name|client
init|=
name|clients
operator|.
name|next
argument_list|()
decl_stmt|;
name|clients
operator|.
name|remove
argument_list|()
expr_stmt|;
name|client
operator|.
name|promise
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|group
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|HelloDispatcher
extends|extends
name|RpcDispatcher
block|{
specifier|private
name|Rpc
name|rpc
decl_stmt|;
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|cancelTask
decl_stmt|;
specifier|protected
name|void
name|handle
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Rpc
operator|.
name|Hello
name|msg
parameter_list|)
block|{
name|cancelTask
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ClientInfo
argument_list|>
name|clients
init|=
name|pendingClients
operator|.
name|iterator
argument_list|()
init|;
name|clients
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClientInfo
name|client
init|=
name|clients
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|client
operator|.
name|secret
operator|.
name|equals
argument_list|(
name|msg
operator|.
name|secret
argument_list|)
condition|)
block|{
name|rpc
operator|.
name|replaceDispatcher
argument_list|(
name|client
operator|.
name|dispatcher
argument_list|)
expr_stmt|;
name|client
operator|.
name|timeoutFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|promise
operator|.
name|setSuccess
argument_list|(
name|rpc
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing channel because secret '{}' does not match any pending client."
argument_list|,
name|msg
operator|.
name|secret
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ClientInfo
block|{
specifier|final
name|Promise
argument_list|<
name|Rpc
argument_list|>
name|promise
decl_stmt|;
specifier|final
name|String
name|secret
decl_stmt|;
specifier|final
name|RpcDispatcher
name|dispatcher
decl_stmt|;
specifier|final
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|timeoutFuture
decl_stmt|;
specifier|private
name|ClientInfo
parameter_list|(
name|Promise
argument_list|<
name|Rpc
argument_list|>
name|promise
parameter_list|,
name|String
name|secret
parameter_list|,
name|RpcDispatcher
name|dispatcher
parameter_list|,
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|timeoutFuture
parameter_list|)
block|{
name|this
operator|.
name|promise
operator|=
name|promise
expr_stmt|;
name|this
operator|.
name|secret
operator|=
name|secret
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
name|dispatcher
expr_stmt|;
name|this
operator|.
name|timeoutFuture
operator|=
name|timeoutFuture
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

