begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|metrics
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|rpc
operator|.
name|Rpc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|rpc
operator|.
name|RpcConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|counter
operator|.
name|SparkCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|SparkConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaFutureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|api
operator|.
name|java
operator|.
name|JavaSparkContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerApplicationEnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerApplicationStart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerBlockManagerAdded
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerBlockManagerRemoved
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerEnvironmentUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerExecutorMetricsUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerJobEnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerJobStart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerStageCompleted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerStageSubmitted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerTaskEnd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerTaskGettingResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerTaskStart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|SparkListenerUnpersistRDD
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|scala
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_comment
comment|/**  * Driver code for the Spark client library.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|RemoteDriver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RemoteDriver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|JobWrapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|activeJobs
decl_stmt|;
specifier|private
specifier|final
name|Object
name|shutdownLock
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|final
name|JobContextImpl
name|jc
decl_stmt|;
specifier|private
specifier|final
name|NioEventLoopGroup
name|egroup
decl_stmt|;
specifier|private
specifier|final
name|Rpc
name|clientRpc
decl_stmt|;
specifier|private
specifier|final
name|DriverProtocol
name|protocol
decl_stmt|;
comment|// Used to queue up requests while the SparkContext is being created.
specifier|private
specifier|final
name|List
argument_list|<
name|JobWrapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|jobQueue
init|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|running
decl_stmt|;
specifier|private
name|RemoteDriver
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|activeJobs
operator|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|shutdownLock
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
name|SparkConf
name|conf
init|=
operator|new
name|SparkConf
argument_list|()
decl_stmt|;
name|String
name|serverAddress
init|=
literal|null
decl_stmt|;
name|int
name|serverPort
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|args
operator|.
name|length
condition|;
name|idx
operator|+=
literal|2
control|)
block|{
name|String
name|key
init|=
name|args
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"--remote-host"
argument_list|)
condition|)
block|{
name|serverAddress
operator|=
name|getArg
argument_list|(
name|args
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"--remote-port"
argument_list|)
condition|)
block|{
name|serverPort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|getArg
argument_list|(
name|args
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"--secret"
argument_list|)
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|SparkClientFactory
operator|.
name|CONF_KEY_SECRET
argument_list|,
name|getArg
argument_list|(
name|args
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"--conf"
argument_list|)
condition|)
block|{
name|String
index|[]
name|val
init|=
name|getArg
argument_list|(
name|args
argument_list|,
name|idx
argument_list|)
operator|.
name|split
argument_list|(
literal|"[=]"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|val
index|[
literal|0
index|]
argument_list|,
name|val
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid command line: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|args
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|executor
operator|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to: {}:{}"
argument_list|,
name|serverAddress
argument_list|,
name|serverPort
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapConf
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple2
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|conf
operator|.
name|getAll
argument_list|()
control|)
block|{
name|mapConf
operator|.
name|put
argument_list|(
name|e
operator|.
name|_1
argument_list|()
argument_list|,
name|e
operator|.
name|_2
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|secret
init|=
name|mapConf
operator|.
name|get
argument_list|(
name|SparkClientFactory
operator|.
name|CONF_KEY_SECRET
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|secret
operator|!=
literal|null
argument_list|,
literal|"No secret provided."
argument_list|)
expr_stmt|;
name|int
name|threadCount
init|=
operator|new
name|RpcConfiguration
argument_list|(
name|mapConf
argument_list|)
operator|.
name|getRpcThreadCount
argument_list|()
decl_stmt|;
name|this
operator|.
name|egroup
operator|=
operator|new
name|NioEventLoopGroup
argument_list|(
name|threadCount
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"Driver-RPC-Handler-%d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|protocol
operator|=
operator|new
name|DriverProtocol
argument_list|()
expr_stmt|;
comment|// The RPC library takes care of timing out this.
name|this
operator|.
name|clientRpc
operator|=
name|Rpc
operator|.
name|createClient
argument_list|(
name|mapConf
argument_list|,
name|egroup
argument_list|,
name|serverAddress
argument_list|,
name|serverPort
argument_list|,
name|secret
argument_list|,
name|protocol
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|this
operator|.
name|running
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|clientRpc
operator|.
name|addListener
argument_list|(
operator|new
name|Rpc
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|rpcClosed
parameter_list|(
name|Rpc
name|rpc
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Shutting down driver because RPC channel was closed."
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|JavaSparkContext
name|sc
init|=
operator|new
name|JavaSparkContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|sc
operator|.
name|sc
argument_list|()
operator|.
name|addSparkListener
argument_list|(
operator|new
name|ClientListener
argument_list|()
argument_list|)
expr_stmt|;
name|jc
operator|=
operator|new
name|JobContextImpl
argument_list|(
name|sc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start SparkContext."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
synchronized|synchronized
init|(
name|jobQueue
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|JobWrapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|it
init|=
name|jobQueue
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|it
operator|.
name|next
argument_list|()
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|run
parameter_list|()
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|shutdownLock
init|)
block|{
while|while
condition|(
name|running
condition|)
block|{
name|shutdownLock
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|submit
parameter_list|(
name|JobWrapper
argument_list|<
name|?
argument_list|>
name|job
parameter_list|)
block|{
synchronized|synchronized
init|(
name|jobQueue
init|)
block|{
if|if
condition|(
name|jc
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|submit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SparkContext not yet up, queueing job request."
argument_list|)
expr_stmt|;
name|jobQueue
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|shutdown
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|running
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down remote driver."
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|JobWrapper
argument_list|<
name|?
argument_list|>
name|job
range|:
name|activeJobs
operator|.
name|values
argument_list|()
control|)
block|{
name|cancelJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|protocol
operator|.
name|sendError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jc
operator|!=
literal|null
condition|)
block|{
name|jc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|clientRpc
operator|.
name|close
argument_list|()
expr_stmt|;
name|egroup
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|shutdownLock
init|)
block|{
name|shutdownLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|cancelJob
parameter_list|(
name|JobWrapper
argument_list|<
name|?
argument_list|>
name|job
parameter_list|)
block|{
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JavaFutureAction
argument_list|<
name|?
argument_list|>
name|action
range|:
name|job
operator|.
name|jobs
control|)
block|{
name|cancelled
operator||=
name|action
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|cancelled
operator||
operator|(
name|job
operator|.
name|future
operator|!=
literal|null
operator|&&
name|job
operator|.
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
operator|)
return|;
block|}
specifier|private
name|String
name|getArg
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|keyIdx
parameter_list|)
block|{
name|int
name|valIdx
init|=
name|keyIdx
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<=
name|valIdx
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid command line: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|" "
argument_list|)
operator|.
name|join
argument_list|(
name|args
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|args
index|[
name|valIdx
index|]
return|;
block|}
specifier|private
class|class
name|DriverProtocol
extends|extends
name|BaseProtocol
block|{
name|void
name|sendError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Send error to Client: {}"
argument_list|,
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
name|clientRpc
operator|.
name|call
argument_list|(
operator|new
name|Error
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
name|void
name|jobFinished
parameter_list|(
name|String
name|jobId
parameter_list|,
name|T
name|result
parameter_list|,
name|Throwable
name|error
parameter_list|,
name|SparkCounters
name|counters
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Send job({}) result to Client."
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
name|clientRpc
operator|.
name|call
argument_list|(
operator|new
name|JobResult
argument_list|(
name|jobId
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|counters
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|jobSubmitted
parameter_list|(
name|String
name|jobId
parameter_list|,
name|int
name|sparkJobId
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Send job({}/{}) submitted to Client."
argument_list|,
name|jobId
argument_list|,
name|sparkJobId
argument_list|)
expr_stmt|;
name|clientRpc
operator|.
name|call
argument_list|(
operator|new
name|JobSubmitted
argument_list|(
name|jobId
argument_list|,
name|sparkJobId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|sendMetrics
parameter_list|(
name|String
name|jobId
parameter_list|,
name|int
name|sparkJobId
parameter_list|,
name|int
name|stageId
parameter_list|,
name|long
name|taskId
parameter_list|,
name|Metrics
name|metrics
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Send task({}/{}/{}/{}) metric to Client."
argument_list|,
name|jobId
argument_list|,
name|sparkJobId
argument_list|,
name|stageId
argument_list|,
name|taskId
argument_list|)
expr_stmt|;
name|clientRpc
operator|.
name|call
argument_list|(
operator|new
name|JobMetrics
argument_list|(
name|jobId
argument_list|,
name|sparkJobId
argument_list|,
name|stageId
argument_list|,
name|taskId
argument_list|,
name|metrics
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handle
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|CancelJob
name|msg
parameter_list|)
block|{
name|JobWrapper
argument_list|<
name|?
argument_list|>
name|job
init|=
name|activeJobs
operator|.
name|get
argument_list|(
name|msg
operator|.
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|job
operator|==
literal|null
operator|||
operator|!
name|cancelJob
argument_list|(
name|job
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Requested to cancel an already finished job."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handle
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|EndSession
name|msg
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shutting down due to EndSession request."
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handle
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|JobRequest
name|msg
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received job request {}"
argument_list|,
name|msg
operator|.
name|id
argument_list|)
expr_stmt|;
name|JobWrapper
argument_list|<
name|?
argument_list|>
name|wrapper
init|=
operator|new
name|JobWrapper
argument_list|<
name|Serializable
argument_list|>
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|activeJobs
operator|.
name|put
argument_list|(
name|msg
operator|.
name|id
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
name|submit
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|JobWrapper
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|BaseProtocol
operator|.
name|JobRequest
argument_list|<
name|T
argument_list|>
name|req
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|JavaFutureAction
argument_list|<
name|?
argument_list|>
argument_list|>
name|jobs
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|completed
decl_stmt|;
specifier|private
name|SparkCounters
name|sparkCounters
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|cachedRDDIds
decl_stmt|;
specifier|private
name|Future
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
name|JobWrapper
parameter_list|(
name|BaseProtocol
operator|.
name|JobRequest
argument_list|<
name|T
argument_list|>
name|req
parameter_list|)
block|{
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|this
operator|.
name|jobs
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|completed
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|this
operator|.
name|sparkCounters
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|cachedRDDIds
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|jc
operator|.
name|setMonitorCb
argument_list|(
operator|new
name|MonitorCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|call
parameter_list|(
name|JavaFutureAction
argument_list|<
name|?
argument_list|>
name|future
parameter_list|,
name|SparkCounters
name|sparkCounters
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|cachedRDDIds
parameter_list|)
block|{
name|monitorJob
argument_list|(
name|future
argument_list|,
name|sparkCounters
argument_list|,
name|cachedRDDIds
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|T
name|result
init|=
name|req
operator|.
name|job
operator|.
name|call
argument_list|(
name|jc
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|completed
init|)
block|{
while|while
condition|(
name|completed
operator|.
name|get
argument_list|()
operator|<
name|jobs
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Client job {} finished, {} of {} Spark jobs finished."
argument_list|,
name|req
operator|.
name|id
argument_list|,
name|completed
operator|.
name|get
argument_list|()
argument_list|,
name|jobs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|completed
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
name|SparkCounters
name|counters
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sparkCounters
operator|!=
literal|null
condition|)
block|{
name|counters
operator|=
name|sparkCounters
operator|.
name|snapshot
argument_list|()
expr_stmt|;
block|}
name|protocol
operator|.
name|jobFinished
argument_list|(
name|req
operator|.
name|id
argument_list|,
name|result
argument_list|,
literal|null
argument_list|,
name|counters
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Catch throwables in a best-effort to report job status back to the client. It's
comment|// re-thrown so that the executor can destroy the affected thread (or the JVM can
comment|// die or whatever would happen if the throwable bubbled up).
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to run job "
operator|+
name|req
operator|.
name|id
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|protocol
operator|.
name|jobFinished
argument_list|(
name|req
operator|.
name|id
argument_list|,
literal|null
argument_list|,
name|t
argument_list|,
name|sparkCounters
operator|!=
literal|null
condition|?
name|sparkCounters
operator|.
name|snapshot
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
name|jc
operator|.
name|setMonitorCb
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|activeJobs
operator|.
name|remove
argument_list|(
name|req
operator|.
name|id
argument_list|)
expr_stmt|;
name|releaseCache
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|void
name|submit
parameter_list|()
block|{
name|this
operator|.
name|future
operator|=
name|executor
operator|.
name|submit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|void
name|jobDone
parameter_list|()
block|{
synchronized|synchronized
init|(
name|completed
init|)
block|{
name|completed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|completed
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Release cached RDDs as soon as the job is done.      * This is different from local Spark client so as      * to save a RPC call/trip, avoid passing cached RDD      * id information around. Otherwise, we can follow      * the local Spark client way to be consistent.      */
name|void
name|releaseCache
parameter_list|()
block|{
if|if
condition|(
name|cachedRDDIds
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Integer
name|cachedRDDId
range|:
name|cachedRDDIds
control|)
block|{
name|jc
operator|.
name|sc
argument_list|()
operator|.
name|sc
argument_list|()
operator|.
name|unpersistRDD
argument_list|(
name|cachedRDDId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|monitorJob
parameter_list|(
name|JavaFutureAction
argument_list|<
name|?
argument_list|>
name|job
parameter_list|,
name|SparkCounters
name|sparkCounters
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|cachedRDDIds
parameter_list|)
block|{
name|jobs
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|jc
operator|.
name|getMonitoredJobs
argument_list|()
operator|.
name|containsKey
argument_list|(
name|req
operator|.
name|id
argument_list|)
condition|)
block|{
name|jc
operator|.
name|getMonitoredJobs
argument_list|()
operator|.
name|put
argument_list|(
name|req
operator|.
name|id
argument_list|,
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|JavaFutureAction
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jc
operator|.
name|getMonitoredJobs
argument_list|()
operator|.
name|get
argument_list|(
name|req
operator|.
name|id
argument_list|)
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|this
operator|.
name|sparkCounters
operator|=
name|sparkCounters
expr_stmt|;
name|this
operator|.
name|cachedRDDIds
operator|=
name|cachedRDDIds
expr_stmt|;
name|protocol
operator|.
name|jobSubmitted
argument_list|(
name|req
operator|.
name|id
argument_list|,
name|job
operator|.
name|jobIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ClientListener
implements|implements
name|SparkListener
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|stageToJobId
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onJobStart
parameter_list|(
name|SparkListenerJobStart
name|jobStart
parameter_list|)
block|{
synchronized|synchronized
init|(
name|stageToJobId
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jobStart
operator|.
name|stageIds
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|stageToJobId
operator|.
name|put
argument_list|(
operator|(
name|Integer
operator|)
name|jobStart
operator|.
name|stageIds
argument_list|()
operator|.
name|apply
argument_list|(
name|i
argument_list|)
argument_list|,
name|jobStart
operator|.
name|jobId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onJobEnd
parameter_list|(
name|SparkListenerJobEnd
name|jobEnd
parameter_list|)
block|{
synchronized|synchronized
init|(
name|stageToJobId
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|it
init|=
name|stageToJobId
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
name|jobEnd
operator|.
name|jobId
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|String
name|clientId
init|=
name|getClientId
argument_list|(
name|jobEnd
operator|.
name|jobId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
condition|)
block|{
name|activeJobs
operator|.
name|get
argument_list|(
name|clientId
argument_list|)
operator|.
name|jobDone
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onTaskEnd
parameter_list|(
name|SparkListenerTaskEnd
name|taskEnd
parameter_list|)
block|{
if|if
condition|(
name|taskEnd
operator|.
name|reason
argument_list|()
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|Success$
operator|&&
operator|!
name|taskEnd
operator|.
name|taskInfo
argument_list|()
operator|.
name|speculative
argument_list|()
condition|)
block|{
name|Metrics
name|metrics
init|=
operator|new
name|Metrics
argument_list|(
name|taskEnd
operator|.
name|taskMetrics
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|jobId
decl_stmt|;
synchronized|synchronized
init|(
name|stageToJobId
init|)
block|{
name|jobId
operator|=
name|stageToJobId
operator|.
name|get
argument_list|(
name|taskEnd
operator|.
name|stageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: implement implicit AsyncRDDActions conversion instead of jc.monitor()?
comment|// TODO: how to handle stage failures?
name|String
name|clientId
init|=
name|getClientId
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
condition|)
block|{
name|protocol
operator|.
name|sendMetrics
argument_list|(
name|clientId
argument_list|,
name|jobId
argument_list|,
name|taskEnd
operator|.
name|stageId
argument_list|()
argument_list|,
name|taskEnd
operator|.
name|taskInfo
argument_list|()
operator|.
name|taskId
argument_list|()
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onStageCompleted
parameter_list|(
name|SparkListenerStageCompleted
name|stageCompleted
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|onStageSubmitted
parameter_list|(
name|SparkListenerStageSubmitted
name|stageSubmitted
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|onTaskStart
parameter_list|(
name|SparkListenerTaskStart
name|taskStart
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|onTaskGettingResult
parameter_list|(
name|SparkListenerTaskGettingResult
name|taskGettingResult
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|onEnvironmentUpdate
parameter_list|(
name|SparkListenerEnvironmentUpdate
name|environmentUpdate
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|onBlockManagerAdded
parameter_list|(
name|SparkListenerBlockManagerAdded
name|blockManagerAdded
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|onBlockManagerRemoved
parameter_list|(
name|SparkListenerBlockManagerRemoved
name|blockManagerRemoved
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|onUnpersistRDD
parameter_list|(
name|SparkListenerUnpersistRDD
name|unpersistRDD
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|onApplicationStart
parameter_list|(
name|SparkListenerApplicationStart
name|applicationStart
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|onApplicationEnd
parameter_list|(
name|SparkListenerApplicationEnd
name|applicationEnd
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|onExecutorMetricsUpdate
parameter_list|(
name|SparkListenerExecutorMetricsUpdate
name|executorMetricsUpdate
parameter_list|)
block|{ }
comment|/**      * Returns the client job ID for the given Spark job ID.      *      * This will only work for jobs monitored via JobContext#monitor(). Other jobs won't be      * matched, and this method will return `None`.      */
specifier|private
name|String
name|getClientId
parameter_list|(
name|Integer
name|jobId
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JobWrapper
argument_list|<
name|?
argument_list|>
argument_list|>
name|e
range|:
name|activeJobs
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|JavaFutureAction
argument_list|<
name|?
argument_list|>
name|future
range|:
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|jobs
control|)
block|{
if|if
condition|(
name|future
operator|.
name|jobIds
argument_list|()
operator|.
name|contains
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|RemoteDriver
argument_list|(
name|args
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

