begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|executor
operator|.
name|TaskMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|scheduler
operator|.
name|TaskInfo
import|;
end_import

begin_comment
comment|/**  * Metrics tracked during the execution of a job.  *  * Depending on how the metrics object is obtained (by calling methods in the `MetricsCollection`  * class), metrics will refer to one or more tasks.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|Metrics
implements|implements
name|Serializable
block|{
comment|/** Time taken on the executor to deserialize tasks. */
specifier|public
specifier|final
name|long
name|executorDeserializeTime
decl_stmt|;
comment|/** Time the executor spends actually running the task (including fetching shuffle data). */
specifier|public
specifier|final
name|long
name|executorRunTime
decl_stmt|;
comment|/** The number of bytes sent back to the driver by tasks. */
specifier|public
specifier|final
name|long
name|resultSize
decl_stmt|;
comment|/** Amount of time the JVM spent in garbage collection while executing tasks. */
specifier|public
specifier|final
name|long
name|jvmGCTime
decl_stmt|;
comment|/** Amount of time spent serializing task results. */
specifier|public
specifier|final
name|long
name|resultSerializationTime
decl_stmt|;
comment|/** The number of in-memory bytes spilled by tasks. */
specifier|public
specifier|final
name|long
name|memoryBytesSpilled
decl_stmt|;
comment|/** The number of on-disk bytes spilled by tasks. */
specifier|public
specifier|final
name|long
name|diskBytesSpilled
decl_stmt|;
comment|/** Amount of time spent executing tasks. */
specifier|public
specifier|final
name|long
name|taskDurationTime
decl_stmt|;
comment|/** If tasks read from a HadoopRDD or from persisted data, metrics on how much data was read. */
specifier|public
specifier|final
name|InputMetrics
name|inputMetrics
decl_stmt|;
comment|/**    * If tasks read from shuffle output, metrics on getting shuffle data. This includes read metrics    * aggregated over all the tasks' shuffle dependencies.    */
specifier|public
specifier|final
name|ShuffleReadMetrics
name|shuffleReadMetrics
decl_stmt|;
comment|/** If tasks wrote to shuffle output, metrics on the written shuffle data. */
specifier|public
specifier|final
name|ShuffleWriteMetrics
name|shuffleWriteMetrics
decl_stmt|;
specifier|private
name|Metrics
parameter_list|()
block|{
comment|// For Serialization only.
name|this
argument_list|(
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|0L
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Metrics
parameter_list|(
name|long
name|executorDeserializeTime
parameter_list|,
name|long
name|executorRunTime
parameter_list|,
name|long
name|resultSize
parameter_list|,
name|long
name|jvmGCTime
parameter_list|,
name|long
name|resultSerializationTime
parameter_list|,
name|long
name|memoryBytesSpilled
parameter_list|,
name|long
name|diskBytesSpilled
parameter_list|,
name|long
name|taskDurationTime
parameter_list|,
name|InputMetrics
name|inputMetrics
parameter_list|,
name|ShuffleReadMetrics
name|shuffleReadMetrics
parameter_list|,
name|ShuffleWriteMetrics
name|shuffleWriteMetrics
parameter_list|)
block|{
name|this
operator|.
name|executorDeserializeTime
operator|=
name|executorDeserializeTime
expr_stmt|;
name|this
operator|.
name|executorRunTime
operator|=
name|executorRunTime
expr_stmt|;
name|this
operator|.
name|resultSize
operator|=
name|resultSize
expr_stmt|;
name|this
operator|.
name|jvmGCTime
operator|=
name|jvmGCTime
expr_stmt|;
name|this
operator|.
name|resultSerializationTime
operator|=
name|resultSerializationTime
expr_stmt|;
name|this
operator|.
name|memoryBytesSpilled
operator|=
name|memoryBytesSpilled
expr_stmt|;
name|this
operator|.
name|diskBytesSpilled
operator|=
name|diskBytesSpilled
expr_stmt|;
name|this
operator|.
name|taskDurationTime
operator|=
name|taskDurationTime
expr_stmt|;
name|this
operator|.
name|inputMetrics
operator|=
name|inputMetrics
expr_stmt|;
name|this
operator|.
name|shuffleReadMetrics
operator|=
name|shuffleReadMetrics
expr_stmt|;
name|this
operator|.
name|shuffleWriteMetrics
operator|=
name|shuffleWriteMetrics
expr_stmt|;
block|}
specifier|public
name|Metrics
parameter_list|(
name|TaskMetrics
name|metrics
parameter_list|,
name|TaskInfo
name|taskInfo
parameter_list|)
block|{
name|this
argument_list|(
name|metrics
operator|.
name|executorDeserializeTime
argument_list|()
argument_list|,
name|metrics
operator|.
name|executorRunTime
argument_list|()
argument_list|,
name|metrics
operator|.
name|resultSize
argument_list|()
argument_list|,
name|metrics
operator|.
name|jvmGCTime
argument_list|()
argument_list|,
name|metrics
operator|.
name|resultSerializationTime
argument_list|()
argument_list|,
name|metrics
operator|.
name|memoryBytesSpilled
argument_list|()
argument_list|,
name|metrics
operator|.
name|diskBytesSpilled
argument_list|()
argument_list|,
name|taskInfo
operator|.
name|duration
argument_list|()
argument_list|,
name|optionalInputMetric
argument_list|(
name|metrics
argument_list|)
argument_list|,
name|optionalShuffleReadMetric
argument_list|(
name|metrics
argument_list|)
argument_list|,
name|optionalShuffleWriteMetrics
argument_list|(
name|metrics
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|InputMetrics
name|optionalInputMetric
parameter_list|(
name|TaskMetrics
name|metrics
parameter_list|)
block|{
return|return
operator|(
name|metrics
operator|.
name|inputMetrics
argument_list|()
operator|!=
literal|null
operator|)
condition|?
operator|new
name|InputMetrics
argument_list|(
name|metrics
argument_list|)
else|:
literal|null
return|;
block|}
specifier|private
specifier|static
name|ShuffleReadMetrics
name|optionalShuffleReadMetric
parameter_list|(
name|TaskMetrics
name|metrics
parameter_list|)
block|{
return|return
operator|(
name|metrics
operator|.
name|shuffleReadMetrics
argument_list|()
operator|!=
literal|null
operator|)
condition|?
operator|new
name|ShuffleReadMetrics
argument_list|(
name|metrics
argument_list|)
else|:
literal|null
return|;
block|}
specifier|private
specifier|static
name|ShuffleWriteMetrics
name|optionalShuffleWriteMetrics
parameter_list|(
name|TaskMetrics
name|metrics
parameter_list|)
block|{
return|return
operator|(
name|metrics
operator|.
name|shuffleWriteMetrics
argument_list|()
operator|!=
literal|null
operator|)
condition|?
operator|new
name|ShuffleWriteMetrics
argument_list|(
name|metrics
argument_list|)
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

