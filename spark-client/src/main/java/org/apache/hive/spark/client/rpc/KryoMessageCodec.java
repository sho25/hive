begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|BaseProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|JobResultSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objenesis
operator|.
name|strategy
operator|.
name|StdInstantiatorStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Kryo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|ByteBufferInputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|ByteToMessageCodec
import|;
end_import

begin_comment
comment|/**  * Codec that serializes / deserializes objects using Kryo. Objects are encoded with a 4-byte  * header with the length of the serialized data.  */
end_comment

begin_class
class|class
name|KryoMessageCodec
extends|extends
name|ByteToMessageCodec
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KryoMessageCodec
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Kryo docs say 0-8 are taken. Strange things happen if you don't set an ID when registering
comment|// classes.
specifier|private
specifier|static
specifier|final
name|int
name|REG_ID_BASE
init|=
literal|16
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxMessageSize
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|messages
decl_stmt|;
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|Kryo
argument_list|>
name|kryos
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Kryo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Kryo
name|initialValue
parameter_list|()
block|{
name|Kryo
name|kryo
init|=
operator|new
name|Kryo
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|klass
range|:
name|messages
control|)
block|{
name|kryo
operator|.
name|register
argument_list|(
name|klass
argument_list|,
name|REG_ID_BASE
operator|+
name|count
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|kryo
operator|.
name|register
argument_list|(
name|BaseProtocol
operator|.
name|JobResult
operator|.
name|class
argument_list|,
operator|new
name|JobResultSerializer
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|kryo
operator|.
name|setInstantiatorStrategy
argument_list|(
operator|new
name|Kryo
operator|.
name|DefaultInstantiatorStrategy
argument_list|(
operator|new
name|StdInstantiatorStrategy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|kryo
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|volatile
name|EncryptionHandler
name|encryptionHandler
decl_stmt|;
specifier|public
name|KryoMessageCodec
parameter_list|(
name|int
name|maxMessageSize
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|messages
parameter_list|)
block|{
name|this
operator|.
name|maxMessageSize
operator|=
name|maxMessageSize
expr_stmt|;
name|this
operator|.
name|messages
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|messages
argument_list|)
expr_stmt|;
name|this
operator|.
name|encryptionHandler
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|in
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|in
operator|.
name|readableBytes
argument_list|()
operator|<
literal|4
condition|)
block|{
return|return;
block|}
name|in
operator|.
name|markReaderIndex
argument_list|()
expr_stmt|;
name|int
name|msgSize
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|checkSize
argument_list|(
name|msgSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|readableBytes
argument_list|()
operator|<
name|msgSize
condition|)
block|{
comment|// Incomplete message in buffer.
name|in
operator|.
name|resetReaderIndex
argument_list|()
expr_stmt|;
return|return;
block|}
try|try
block|{
name|ByteBuffer
name|nioBuffer
init|=
name|maybeDecrypt
argument_list|(
name|in
operator|.
name|nioBuffer
argument_list|(
name|in
operator|.
name|readerIndex
argument_list|()
argument_list|,
name|msgSize
argument_list|)
argument_list|)
decl_stmt|;
name|Input
name|kryoIn
init|=
operator|new
name|Input
argument_list|(
operator|new
name|ByteBufferInputStream
argument_list|(
name|nioBuffer
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|msg
init|=
name|kryos
operator|.
name|get
argument_list|()
operator|.
name|readClassAndObject
argument_list|(
name|kryoIn
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Decoded message of type {} ({} bytes)"
argument_list|,
name|msg
operator|!=
literal|null
condition|?
name|msg
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
else|:
name|msg
argument_list|,
name|msgSize
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|skipBytes
argument_list|(
name|msgSize
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|encode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|,
name|ByteBuf
name|buf
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Output
name|kryoOut
init|=
operator|new
name|Output
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|kryos
operator|.
name|get
argument_list|()
operator|.
name|writeClassAndObject
argument_list|(
name|kryoOut
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|kryoOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|byte
index|[]
name|msgData
init|=
name|maybeEncrypt
argument_list|(
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Encoded message of type {} ({} bytes)"
argument_list|,
name|msg
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|msgData
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkSize
argument_list|(
name|msgData
operator|.
name|length
argument_list|)
expr_stmt|;
name|buf
operator|.
name|ensureWritable
argument_list|(
name|msgData
operator|.
name|length
operator|+
literal|4
argument_list|)
expr_stmt|;
name|buf
operator|.
name|writeInt
argument_list|(
name|msgData
operator|.
name|length
argument_list|)
expr_stmt|;
name|buf
operator|.
name|writeBytes
argument_list|(
name|msgData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelInactive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|encryptionHandler
operator|!=
literal|null
condition|)
block|{
name|encryptionHandler
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|channelInactive
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkSize
parameter_list|(
name|int
name|msgSize
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|msgSize
operator|>
literal|0
argument_list|,
literal|"Message size (%s bytes) must be positive."
argument_list|,
name|msgSize
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|maxMessageSize
operator|<=
literal|0
operator|||
name|msgSize
operator|<=
name|maxMessageSize
argument_list|,
literal|"Message (%s bytes) exceeds maximum allowed size (%s bytes)."
argument_list|,
name|msgSize
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|maybeEncrypt
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
name|encryptionHandler
operator|!=
literal|null
operator|)
condition|?
name|encryptionHandler
operator|.
name|wrap
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
else|:
name|data
return|;
block|}
specifier|private
name|ByteBuffer
name|maybeDecrypt
parameter_list|(
name|ByteBuffer
name|data
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|encryptionHandler
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|encrypted
decl_stmt|;
name|int
name|len
init|=
name|data
operator|.
name|limit
argument_list|()
operator|-
name|data
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|offset
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|hasArray
argument_list|()
condition|)
block|{
name|encrypted
operator|=
name|data
operator|.
name|array
argument_list|()
expr_stmt|;
name|offset
operator|=
name|data
operator|.
name|position
argument_list|()
operator|+
name|data
operator|.
name|arrayOffset
argument_list|()
expr_stmt|;
name|data
operator|.
name|position
argument_list|(
name|data
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encrypted
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|get
argument_list|(
name|encrypted
argument_list|)
expr_stmt|;
block|}
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|encryptionHandler
operator|.
name|unwrap
argument_list|(
name|encrypted
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|data
return|;
block|}
block|}
name|void
name|setEncryptionHandler
parameter_list|(
name|EncryptionHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|encryptionHandler
operator|=
name|handler
expr_stmt|;
block|}
interface|interface
name|EncryptionHandler
block|{
name|byte
index|[]
name|wrap
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|byte
index|[]
name|unwrap
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|dispose
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class

end_unit

