begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Kryo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|KryoException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A custom {@link Serializer} for serializing / deserializing {@link BaseProtocol.JobResult}  * objects. This class uses Java serialization to write / read the JobResult objects. This has  * the nice property that it is able to successfully serialize Java {@link Throwable}s. Whereas  * the Kryo serializer cannot (because certain objects in a Throwable don't have public zero-arg  * constructors.  *  *<p>  *   Given that any developer can write a custom exception that contains non-serializable objects  *   (e.g. objects that don't implement {@link java.io.Serializable}), this class needs to handle  *   the case where the given Throwable cannot be serialized by Java. In this case, the  *   serializer will recursively go through the {@link Throwable} and wrap all objects with a  *   {@link RuntimeException} which is guaranteed to be serializable.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|JobResultSerializer
extends|extends
name|Serializer
argument_list|<
name|BaseProtocol
operator|.
name|JobResult
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JobResultSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BaseProtocol
operator|.
name|JobResult
argument_list|<
name|?
argument_list|>
name|read
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Input
name|input
parameter_list|,
name|Class
name|type
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|BaseProtocol
operator|.
name|JobResult
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|ObjectInputStream
argument_list|(
name|input
argument_list|)
operator|.
name|readObject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|KryoException
argument_list|(
literal|"Error during Java deserialization."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Kryo
name|kryo
parameter_list|,
name|Output
name|output
parameter_list|,
name|BaseProtocol
operator|.
name|JobResult
argument_list|<
name|?
argument_list|>
name|object
parameter_list|)
block|{
try|try
block|{
name|safeWriteToOutput
argument_list|(
name|output
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to serialize JobResult object "
operator|+
name|object
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|BaseProtocol
operator|.
name|JobResult
argument_list|<
name|?
argument_list|>
name|serializableJobResult
init|=
operator|new
name|BaseProtocol
operator|.
name|JobResult
argument_list|<>
argument_list|(
name|object
operator|.
name|id
argument_list|,
name|object
operator|.
name|result
argument_list|,
name|convertToSerializableSparkException
argument_list|(
name|object
operator|.
name|error
argument_list|)
argument_list|,
name|object
operator|.
name|sparkCounters
argument_list|)
decl_stmt|;
try|try
block|{
name|safeWriteToOutput
argument_list|(
name|output
argument_list|,
name|serializableJobResult
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|KryoException
argument_list|(
literal|"Error during Java serialization."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|safeWriteToOutput
parameter_list|(
name|Output
name|output
parameter_list|,
name|BaseProtocol
operator|.
name|JobResult
argument_list|<
name|?
argument_list|>
name|jobResult
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|boas
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|boas
argument_list|)
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|jobResult
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|boas
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|RuntimeException
name|convertToSerializableSparkException
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|RuntimeException
name|serializableThrowable
init|=
operator|new
name|RuntimeException
argument_list|(
name|error
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|Objects
operator|.
name|toString
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|,
name|error
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|convertToSerializableSparkException
argument_list|(
name|error
operator|.
name|getCause
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|serializableThrowable
operator|.
name|setStackTrace
argument_list|(
name|error
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|stream
argument_list|(
name|error
operator|.
name|getSuppressed
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|JobResultSerializer
operator|::
name|convertToSerializableSparkException
argument_list|)
operator|.
name|forEach
argument_list|(
name|serializableThrowable
operator|::
name|addSuppressed
argument_list|)
expr_stmt|;
return|return
name|serializableThrowable
return|;
block|}
block|}
end_class

end_unit

