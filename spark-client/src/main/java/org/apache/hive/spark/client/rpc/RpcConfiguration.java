begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet4Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Definitions of configuration keys and default values for the RPC layer.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|RpcConfiguration
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RpcConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** Connection timeout for RPC clients. */
specifier|public
specifier|static
specifier|final
name|String
name|CONNECT_TIMEOUT_MS_KEY
init|=
literal|"hive.spark.client.connect.timeout.ms"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CONNECT_TIMEOUT_MS_DEFAULT
init|=
literal|1000
decl_stmt|;
comment|/**    * How long the server should wait for clients to connect back after they're    * registered. Also used to time out the client waiting for the server to    * reply to its "hello" message.    */
specifier|public
specifier|static
specifier|final
name|String
name|SERVER_CONNECT_TIMEOUT_MS_KEY
init|=
literal|"hive.spark.client.server.connect.timeout.ms"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SERVER_CONNECT_TIMEOUT_MS_DEFAULT
init|=
literal|10000L
decl_stmt|;
comment|/**    * Number of bits of randomness in the generated client secrets. Rounded down    * to the nearest multiple of 8.    */
specifier|public
specifier|static
specifier|final
name|String
name|SECRET_RANDOM_BITS_KEY
init|=
literal|"hive.spark.client.secret.bits"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SECRET_RANDOM_BITS_DEFAULT
init|=
literal|256
decl_stmt|;
comment|/** Hostname or IP address to advertise for the server. */
specifier|public
specifier|static
specifier|final
name|String
name|SERVER_LISTEN_ADDRESS_KEY
init|=
literal|"hive.spark.client.server.address"
decl_stmt|;
comment|/** Maximum number of threads to use for the RPC event loop. */
specifier|public
specifier|static
specifier|final
name|String
name|RPC_MAX_THREADS_KEY
init|=
literal|"hive.spark.client.rpc.threads"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|RPC_MAX_THREADS_DEFAULT
init|=
literal|8
decl_stmt|;
comment|/** Maximum message size. Default = 10MB. */
specifier|public
specifier|static
specifier|final
name|String
name|RPC_MAX_MESSAGE_SIZE_KEY
init|=
literal|"hive.spark.client.rpc.max.size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|RPC_MAX_MESSAGE_SIZE_DEFAULT
init|=
literal|50
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|/** Channel logging level. */
specifier|public
specifier|static
specifier|final
name|String
name|RPC_CHANNEL_LOG_LEVEL_KEY
init|=
literal|"hive.spark.client.channel.log.level"
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
decl_stmt|;
specifier|public
name|RpcConfiguration
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
name|int
name|getConnectTimeoutMs
parameter_list|()
block|{
name|String
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|CONNECT_TIMEOUT_MS_KEY
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
else|:
name|CONNECT_TIMEOUT_MS_DEFAULT
return|;
block|}
name|int
name|getMaxMessageSize
parameter_list|()
block|{
name|String
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|RPC_MAX_MESSAGE_SIZE_KEY
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
else|:
name|RPC_MAX_MESSAGE_SIZE_DEFAULT
return|;
block|}
name|long
name|getServerConnectTimeoutMs
parameter_list|()
block|{
name|String
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|SERVER_CONNECT_TIMEOUT_MS_KEY
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
else|:
name|SERVER_CONNECT_TIMEOUT_MS_DEFAULT
return|;
block|}
name|int
name|getSecretBits
parameter_list|()
block|{
name|String
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|SECRET_RANDOM_BITS_KEY
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
else|:
name|SECRET_RANDOM_BITS_DEFAULT
return|;
block|}
name|String
name|getServerAddress
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|SERVER_LISTEN_ADDRESS_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
name|InetAddress
name|address
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|isLoopbackAddress
argument_list|()
condition|)
block|{
comment|// Address resolves to something like 127.0.1.1, which happens on Debian;
comment|// try to find
comment|// a better address using the local network interfaces
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|ifaces
init|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
decl_stmt|;
while|while
condition|(
name|ifaces
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NetworkInterface
name|ni
init|=
name|ifaces
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|InetAddress
argument_list|>
name|addrs
init|=
name|ni
operator|.
name|getInetAddresses
argument_list|()
decl_stmt|;
while|while
condition|(
name|addrs
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|InetAddress
name|addr
init|=
name|addrs
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|addr
operator|.
name|isLinkLocalAddress
argument_list|()
operator|&&
operator|!
name|addr
operator|.
name|isLoopbackAddress
argument_list|()
operator|&&
name|addr
operator|instanceof
name|Inet4Address
condition|)
block|{
comment|// We've found an address that looks reasonable!
name|LOG
operator|.
name|warn
argument_list|(
literal|"Your hostname, {}, resolves to a loopback address; using {} "
operator|+
literal|" instead (on interface {})"
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|ni
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Set '{}' if you need to bind to another address."
argument_list|,
name|SERVER_LISTEN_ADDRESS_KEY
argument_list|)
expr_stmt|;
return|return
name|addr
operator|.
name|getHostAddress
argument_list|()
return|;
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Your hostname, {}, resolves to a loopback address, but we couldn't find "
operator|+
literal|" any external IP address!"
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Set {} if you need to bind to another address."
argument_list|,
name|SERVER_LISTEN_ADDRESS_KEY
argument_list|)
expr_stmt|;
return|return
name|address
operator|.
name|getHostName
argument_list|()
return|;
block|}
name|String
name|getRpcChannelLogLevel
parameter_list|()
block|{
return|return
name|config
operator|.
name|get
argument_list|(
name|RPC_CHANNEL_LOG_LEVEL_KEY
argument_list|)
return|;
block|}
specifier|public
name|int
name|getRpcThreadCount
parameter_list|()
block|{
name|String
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|RPC_MAX_THREADS_KEY
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
else|:
name|RPC_MAX_THREADS_DEFAULT
return|;
block|}
block|}
end_class

end_unit

