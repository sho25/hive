begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet4Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|akka
operator|.
name|actor
operator|.
name|ActorSystem
import|;
end_import

begin_import
import|import
name|akka
operator|.
name|actor
operator|.
name|ExtendedActorSystem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|typesafe
operator|.
name|config
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|com
operator|.
name|typesafe
operator|.
name|config
operator|.
name|ConfigFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|final
class|class
name|ClientUtils
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClientUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|CONF_KEY_SECRET
init|=
literal|"spark.client.authentication.secret"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CONF_KEY_IN_PROCESS
init|=
literal|"spark.client.do_not_use_this.run_driver_in_process"
decl_stmt|;
specifier|static
specifier|final
name|String
name|CONF_KEY_SERIALIZER
init|=
literal|"spark-remote.akka.serializer"
decl_stmt|;
comment|/**    * Create a new ActorSystem based on the given configuration.    *    * The akka configs are the same used to configure Akka in Spark.    *    * @param conf Configuration.    * @return 2-tuple (actor system, akka root url)    */
specifier|static
name|ActorSystemInfo
name|createActorSystem
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|akkaThreads
init|=
name|toInt
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"spark.akka.threads"
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|int
name|akkaBatchSize
init|=
name|toInt
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"spark.akka.batchSize"
argument_list|)
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|int
name|akkaTimeout
init|=
name|toInt
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"spark.akka.timeout"
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|akkaFrameSize
init|=
name|toInt
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"spark.akka.frameSize"
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|String
name|lifecycleEvents
init|=
name|toBoolean
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"spark.akka.logLifecycleEvents"
argument_list|)
argument_list|)
condition|?
literal|"on"
else|:
literal|"off"
decl_stmt|;
name|String
name|logAkkaConfig
init|=
name|toBoolean
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"spark.akka.logAkkaConfig"
argument_list|)
argument_list|)
condition|?
literal|"on"
else|:
literal|"off"
decl_stmt|;
name|int
name|akkaHeartBeatPauses
init|=
name|toInt
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"spark.akka.heartbeat.pauses"
argument_list|)
argument_list|,
literal|600
argument_list|)
decl_stmt|;
name|double
name|akkaFailureDetector
init|=
name|toDouble
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"spark.akka.failure-detector.threshold"
argument_list|)
argument_list|,
literal|300.0
argument_list|)
decl_stmt|;
name|int
name|akkaHeartBeatInterval
init|=
name|toInt
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"spark.akka.heartbeat.interval"
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// Disabled due to chill-akka depending on kryo 2.21, which is incompatible with 2.22
comment|// due to packaging changes (relocated org.objenesis classes).
comment|// String akkaSerializer = Optional.fromNullable(conf.get(CONF_KEY_SERIALIZER)).or("java");
name|String
name|akkaSerializer
init|=
literal|"java"
decl_stmt|;
name|String
name|host
init|=
name|findLocalIpAddress
argument_list|()
decl_stmt|;
name|String
name|secret
init|=
name|conf
operator|.
name|get
argument_list|(
name|CONF_KEY_SECRET
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|secret
operator|!=
literal|null
argument_list|,
literal|"%s not set."
argument_list|,
name|CONF_KEY_SECRET
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sparkConf
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|sparkConf
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"akka."
argument_list|)
condition|)
block|{
name|sparkConf
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Config
name|fallback
init|=
name|ConfigFactory
operator|.
name|parseString
argument_list|(
literal|""
operator|+
literal|"akka.daemonic = on\n"
operator|+
literal|"akka.loggers = [ \"akka.event.slf4j.Slf4jLogger\" ]\n"
operator|+
literal|"akka.stdout-loglevel = \"ERROR\"\n"
operator|+
literal|"akka.jvm-exit-on-fatal-error = off\n"
operator|+
literal|"akka.actor.default-dispatcher.throughput = "
operator|+
name|akkaBatchSize
operator|+
literal|"\n"
operator|+
literal|"akka.actor.serializers.java = \"akka.serialization.JavaSerializer\"\n"
comment|/* Disabled due to chill-akka depending on kryo 2.21, which is incompatible with 2.22            due to packaging changes (relocated org.objenesis classes).         + "akka.actor.serializers.kryo = \"com.twitter.chill.akka.AkkaSerializer\"\n"         */
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"akka.actor.serialization-bindings = { \"java.io.Serializable\" = \"%s\" }\n"
argument_list|,
name|akkaSerializer
argument_list|)
operator|+
literal|"akka.log-config-on-start = "
operator|+
name|logAkkaConfig
operator|+
literal|"\n"
operator|+
literal|"akka.log-dead-letters = "
operator|+
name|lifecycleEvents
operator|+
literal|"\n"
operator|+
literal|"akka.log-dead-letters-during-shutdown = "
operator|+
name|lifecycleEvents
operator|+
literal|"\n"
operator|+
literal|"akka.actor.provider = \"akka.remote.RemoteActorRefProvider\"\n"
operator|+
literal|"akka.remote.log-remote-lifecycle-events = "
operator|+
name|lifecycleEvents
operator|+
literal|"\n"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"akka.remote.netty.tcp.connection-timeout = %d s\n"
argument_list|,
name|akkaTimeout
argument_list|)
operator|+
literal|"akka.remote.netty.tcp.execution-pool-size = "
operator|+
name|akkaThreads
operator|+
literal|"\n"
operator|+
literal|"akka.remote.netty.tcp.hostname = \""
operator|+
name|host
operator|+
literal|"\"\n"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"akka.remote.netty.tcp.maximum-frame-size = %d B\n"
argument_list|,
name|akkaFrameSize
argument_list|)
operator|+
literal|"akka.remote.netty.tcp.port = 0\n"
operator|+
literal|"akka.remote.netty.tcp.tcp-nodelay = on\n"
operator|+
literal|"akka.remote.netty.tcp.transport-class = \"akka.remote.transport.netty.NettyTransport\"\n"
operator|+
literal|"akka.remote.require-cookie = on\n"
operator|+
literal|"akka.remote.secure-cookie = \""
operator|+
name|secret
operator|+
literal|"\"\n"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"akka.remote.transport-failure-detector.acceptable-heartbeat-pause = %d s\n"
argument_list|,
name|akkaHeartBeatPauses
argument_list|)
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"akka.remote.transport-failure-detector.heartbeat-interval = %d s\n"
argument_list|,
name|akkaHeartBeatInterval
argument_list|)
operator|+
literal|"akka.remote.transport-failure-detector.threshold = "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|akkaFailureDetector
argument_list|)
operator|+
literal|"\n"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|randomName
argument_list|()
decl_stmt|;
name|Config
name|akkaConf
init|=
name|ConfigFactory
operator|.
name|parseMap
argument_list|(
name|sparkConf
argument_list|)
operator|.
name|withFallback
argument_list|(
name|fallback
argument_list|)
decl_stmt|;
name|ActorSystem
name|actorSystem
init|=
name|ActorSystem
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|akkaConf
argument_list|)
decl_stmt|;
name|ExtendedActorSystem
name|extActorSystem
init|=
operator|(
name|ExtendedActorSystem
operator|)
name|actorSystem
decl_stmt|;
name|int
name|boundPort
init|=
operator|(
operator|(
name|Integer
operator|)
name|extActorSystem
operator|.
name|provider
argument_list|()
operator|.
name|getDefaultAddress
argument_list|()
operator|.
name|port
argument_list|()
operator|.
name|get
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
return|return
operator|new
name|ActorSystemInfo
argument_list|(
name|actorSystem
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"akka.tcp://%s@%s:%d/user"
argument_list|,
name|name
argument_list|,
name|host
argument_list|,
name|boundPort
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|String
name|randomName
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|toBoolean
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|Optional
operator|.
name|fromNullable
argument_list|(
name|value
argument_list|)
operator|.
name|or
argument_list|(
literal|"false"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|double
name|toDouble
parameter_list|(
name|String
name|value
parameter_list|,
name|double
name|defaultValue
parameter_list|)
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|Optional
operator|.
name|fromNullable
argument_list|(
name|value
argument_list|)
operator|.
name|or
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|toInt
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|Optional
operator|.
name|fromNullable
argument_list|(
name|value
argument_list|)
operator|.
name|or
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|// Copied from Utils.scala.
specifier|private
specifier|static
name|String
name|findLocalIpAddress
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|ip
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"SPARK_LOCAL_IP"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ip
operator|==
literal|null
condition|)
block|{
name|InetAddress
name|address
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|isLoopbackAddress
argument_list|()
condition|)
block|{
comment|// Address resolves to something like 127.0.1.1, which happens on Debian; try to find
comment|// a better address using the local network interfaces
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|ifaces
init|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
decl_stmt|;
while|while
condition|(
name|ifaces
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NetworkInterface
name|ni
init|=
name|ifaces
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|InetAddress
argument_list|>
name|addrs
init|=
name|ni
operator|.
name|getInetAddresses
argument_list|()
decl_stmt|;
while|while
condition|(
name|addrs
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|InetAddress
name|addr
init|=
name|addrs
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|addr
operator|.
name|isLinkLocalAddress
argument_list|()
operator|&&
operator|!
name|addr
operator|.
name|isLoopbackAddress
argument_list|()
operator|&&
name|addr
operator|instanceof
name|Inet4Address
condition|)
block|{
comment|// We've found an address that looks reasonable!
name|LOG
operator|.
name|warn
argument_list|(
literal|"Your hostname, {}, resolves to a loopback address; using {} "
operator|+
literal|" instead (on interface {})"
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|addr
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|ni
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Set SPARK_LOCAL_IP if you need to bind to another address"
argument_list|)
expr_stmt|;
return|return
name|addr
operator|.
name|getHostAddress
argument_list|()
return|;
block|}
block|}
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Your hostname, {}, resolves to, but we couldn't find any external IP address!"
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Set SPARK_LOCAL_IP if you need to bind to another address"
argument_list|)
expr_stmt|;
block|}
return|return
name|address
operator|.
name|getHostAddress
argument_list|()
return|;
block|}
return|return
name|ip
return|;
block|}
specifier|static
class|class
name|ActorSystemInfo
block|{
specifier|final
name|ActorSystem
name|system
decl_stmt|;
specifier|final
name|String
name|url
decl_stmt|;
specifier|private
name|ActorSystemInfo
parameter_list|(
name|ActorSystem
name|system
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|system
operator|=
name|system
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

