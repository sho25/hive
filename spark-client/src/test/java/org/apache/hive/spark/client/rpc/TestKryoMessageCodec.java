begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|UnpooledByteBufAllocator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|embedded
operator|.
name|EmbeddedChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|logging
operator|.
name|LoggingHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestKryoMessageCodec
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE
init|=
literal|"Hello World!"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testKryoCodec
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
name|encodeAndDecode
argument_list|(
name|MESSAGE
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MESSAGE
argument_list|,
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFragmentation
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteBuf
name|buf
init|=
name|newBuffer
argument_list|()
decl_stmt|;
name|Object
index|[]
name|messages
init|=
block|{
literal|"msg1"
block|,
literal|"msg2"
block|}
decl_stmt|;
name|int
index|[]
name|indices
init|=
operator|new
name|int
index|[
name|messages
operator|.
name|length
index|]
decl_stmt|;
name|KryoMessageCodec
name|codec
init|=
operator|new
name|KryoMessageCodec
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|codec
operator|.
name|encode
argument_list|(
literal|null
argument_list|,
name|messages
index|[
name|i
index|]
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|indices
index|[
name|i
index|]
operator|=
name|buf
operator|.
name|writerIndex
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
comment|// Don't read enough data for the first message to be decoded.
name|codec
operator|.
name|decode
argument_list|(
literal|null
argument_list|,
name|buf
operator|.
name|slice
argument_list|(
literal|0
argument_list|,
name|indices
index|[
literal|0
index|]
operator|-
literal|1
argument_list|)
argument_list|,
name|objects
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read enough data for just the first message to be decoded.
name|codec
operator|.
name|decode
argument_list|(
literal|null
argument_list|,
name|buf
operator|.
name|slice
argument_list|(
literal|0
argument_list|,
name|indices
index|[
literal|0
index|]
operator|+
literal|1
argument_list|)
argument_list|,
name|objects
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmbeddedChannel
parameter_list|()
throws|throws
name|Exception
block|{
name|EmbeddedChannel
name|c
init|=
operator|new
name|EmbeddedChannel
argument_list|(
operator|new
name|LoggingHandler
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|KryoMessageCodec
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|c
operator|.
name|writeAndFlush
argument_list|(
name|MESSAGE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|outboundMessages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MESSAGE
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|outboundMessages
argument_list|()
operator|.
name|peek
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|writeInbound
argument_list|(
name|c
operator|.
name|readOutbound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|c
operator|.
name|inboundMessages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MESSAGE
argument_list|,
name|c
operator|.
name|readInbound
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAutoRegistration
parameter_list|()
throws|throws
name|Exception
block|{
name|KryoMessageCodec
name|codec
init|=
operator|new
name|KryoMessageCodec
argument_list|(
literal|0
argument_list|,
name|TestMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|ByteBuf
name|buf
init|=
name|newBuffer
argument_list|()
decl_stmt|;
name|codec
operator|.
name|encode
argument_list|(
literal|null
argument_list|,
operator|new
name|TestMessage
argument_list|()
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|out
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|codec
operator|.
name|decode
argument_list|(
literal|null
argument_list|,
name|buf
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|TestMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
name|KryoMessageCodec
name|codec
init|=
operator|new
name|KryoMessageCodec
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|ByteBuf
name|buf
init|=
name|newBuffer
argument_list|()
decl_stmt|;
name|codec
operator|.
name|encode
argument_list|(
literal|null
argument_list|,
operator|new
name|TestMessage
argument_list|(
operator|new
name|byte
index|[
literal|512
index|]
argument_list|)
argument_list|,
name|buf
argument_list|)
expr_stmt|;
try|try
block|{
name|codec
operator|.
name|encode
argument_list|(
literal|null
argument_list|,
operator|new
name|TestMessage
argument_list|(
operator|new
name|byte
index|[
literal|1025
index|]
argument_list|)
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to encode large message."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"maximum allowed size"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|KryoMessageCodec
name|unlimited
init|=
operator|new
name|KryoMessageCodec
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|buf
operator|=
name|newBuffer
argument_list|()
expr_stmt|;
name|unlimited
operator|.
name|encode
argument_list|(
literal|null
argument_list|,
operator|new
name|TestMessage
argument_list|(
operator|new
name|byte
index|[
literal|1025
index|]
argument_list|)
argument_list|,
name|buf
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|out
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|codec
operator|.
name|decode
argument_list|(
literal|null
argument_list|,
name|buf
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to decode large message."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"maximum allowed size"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNegativeMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
name|KryoMessageCodec
name|codec
init|=
operator|new
name|KryoMessageCodec
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|ByteBuf
name|buf
init|=
name|newBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|out
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|codec
operator|.
name|decode
argument_list|(
literal|null
argument_list|,
name|buf
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to decode message with negative size."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"must be positive"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptionOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
name|Collections
operator|.
expr|<
name|Object
operator|>
name|emptyList
argument_list|()
decl_stmt|;
try|try
block|{
name|objects
operator|=
name|encodeAndDecode
argument_list|(
name|MESSAGE
argument_list|,
operator|new
name|TestEncryptionHandler
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Pass.
block|}
comment|// Do this check in case the ciphertext actually makes sense in some way.
for|for
control|(
name|Object
name|msg
range|:
name|objects
control|)
block|{
name|assertFalse
argument_list|(
name|MESSAGE
operator|.
name|equals
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecryptionOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
name|Collections
operator|.
expr|<
name|Object
operator|>
name|emptyList
argument_list|()
decl_stmt|;
try|try
block|{
name|objects
operator|=
name|encodeAndDecode
argument_list|(
name|MESSAGE
argument_list|,
operator|new
name|TestEncryptionHandler
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Pass.
block|}
comment|// Do this check in case the decrypted plaintext actually makes sense in some way.
for|for
control|(
name|Object
name|msg
range|:
name|objects
control|)
block|{
name|assertFalse
argument_list|(
name|MESSAGE
operator|.
name|equals
argument_list|(
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptDecrypt
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
name|encodeAndDecode
argument_list|(
name|MESSAGE
argument_list|,
operator|new
name|TestEncryptionHandler
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|objects
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MESSAGE
argument_list|,
name|objects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|encodeAndDecode
parameter_list|(
name|Object
name|message
parameter_list|,
name|KryoMessageCodec
operator|.
name|EncryptionHandler
name|eh
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteBuf
name|buf
init|=
name|newBuffer
argument_list|()
decl_stmt|;
name|KryoMessageCodec
name|codec
init|=
operator|new
name|KryoMessageCodec
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|codec
operator|.
name|setEncryptionHandler
argument_list|(
name|eh
argument_list|)
expr_stmt|;
name|codec
operator|.
name|encode
argument_list|(
literal|null
argument_list|,
name|message
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|codec
operator|.
name|decode
argument_list|(
literal|null
argument_list|,
name|buf
argument_list|,
name|objects
argument_list|)
expr_stmt|;
return|return
name|objects
return|;
block|}
specifier|private
name|ByteBuf
name|newBuffer
parameter_list|()
block|{
return|return
name|UnpooledByteBufAllocator
operator|.
name|DEFAULT
operator|.
name|buffer
argument_list|(
literal|1024
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|TestMessage
block|{
name|byte
index|[]
name|data
decl_stmt|;
name|TestMessage
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|TestMessage
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestEncryptionHandler
implements|implements
name|KryoMessageCodec
operator|.
name|EncryptionHandler
block|{
specifier|private
specifier|static
specifier|final
name|byte
name|KEY
init|=
literal|0x42
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|encrypt
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|decrypt
decl_stmt|;
name|TestEncryptionHandler
parameter_list|(
name|boolean
name|encrypt
parameter_list|,
name|boolean
name|decrypt
parameter_list|)
block|{
name|this
operator|.
name|encrypt
operator|=
name|encrypt
expr_stmt|;
name|this
operator|.
name|decrypt
operator|=
name|decrypt
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|wrap
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|encrypt
condition|?
name|transform
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
else|:
name|data
return|;
block|}
specifier|public
name|byte
index|[]
name|unwrap
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|decrypt
condition|?
name|transform
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
else|:
name|data
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
throws|throws
name|IOException
block|{      }
specifier|private
name|byte
index|[]
name|transform
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|byte
index|[]
name|dest
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|dest
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|data
index|[
name|offset
operator|+
name|i
index|]
operator|^
name|KEY
argument_list|)
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
block|}
block|}
end_class

end_unit

