begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|rpc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|launcher
operator|.
name|SparkAppHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|TestSparkLauncherSparkClient
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSparkLauncherFutureGet
parameter_list|()
block|{
name|testChainOfStates
argument_list|(
name|SparkAppHandle
operator|.
name|State
operator|.
name|CONNECTED
argument_list|,
name|SparkAppHandle
operator|.
name|State
operator|.
name|SUBMITTED
argument_list|,
name|SparkAppHandle
operator|.
name|State
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|testChainOfStates
argument_list|(
name|SparkAppHandle
operator|.
name|State
operator|.
name|CONNECTED
argument_list|,
name|SparkAppHandle
operator|.
name|State
operator|.
name|SUBMITTED
argument_list|,
name|SparkAppHandle
operator|.
name|State
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|testChainOfStates
argument_list|(
name|SparkAppHandle
operator|.
name|State
operator|.
name|CONNECTED
argument_list|,
name|SparkAppHandle
operator|.
name|State
operator|.
name|SUBMITTED
argument_list|,
name|SparkAppHandle
operator|.
name|State
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|testChainOfStates
argument_list|(
name|SparkAppHandle
operator|.
name|State
operator|.
name|CONNECTED
argument_list|,
name|SparkAppHandle
operator|.
name|State
operator|.
name|SUBMITTED
argument_list|,
name|SparkAppHandle
operator|.
name|State
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|testChainOfStates
argument_list|(
name|SparkAppHandle
operator|.
name|State
operator|.
name|LOST
argument_list|)
expr_stmt|;
name|testChainOfStates
argument_list|(
name|SparkAppHandle
operator|.
name|State
operator|.
name|CONNECTED
argument_list|,
name|SparkAppHandle
operator|.
name|State
operator|.
name|LOST
argument_list|)
expr_stmt|;
name|testChainOfStates
argument_list|(
name|SparkAppHandle
operator|.
name|State
operator|.
name|CONNECTED
argument_list|,
name|SparkAppHandle
operator|.
name|State
operator|.
name|SUBMITTED
argument_list|,
name|SparkAppHandle
operator|.
name|State
operator|.
name|LOST
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testChainOfStates
parameter_list|(
name|SparkAppHandle
operator|.
name|State
modifier|...
name|states
parameter_list|)
block|{
name|SparkAppHandle
name|sparkAppHandle
init|=
name|mock
argument_list|(
name|SparkAppHandle
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcServer
name|rpcServer
init|=
name|mock
argument_list|(
name|RpcServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|clientId
init|=
literal|""
decl_stmt|;
name|CountDownLatch
name|shutdownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SparkLauncherSparkClient
operator|.
name|SparkAppListener
name|sparkAppListener
init|=
operator|new
name|SparkLauncherSparkClient
operator|.
name|SparkAppListener
argument_list|(
name|shutdownLatch
argument_list|,
name|rpcServer
argument_list|,
name|clientId
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Void
argument_list|>
name|sparkLauncherFuture
init|=
name|SparkLauncherSparkClient
operator|.
name|createSparkLauncherFuture
argument_list|(
name|shutdownLatch
argument_list|,
name|sparkAppHandle
argument_list|,
name|rpcServer
argument_list|,
name|clientId
argument_list|)
decl_stmt|;
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|future
init|=
name|CompletableFuture
operator|.
name|runAsync
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|sparkLauncherFuture
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|states
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|when
argument_list|(
name|sparkAppHandle
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|states
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|sparkAppListener
operator|.
name|stateChanged
argument_list|(
name|sparkAppHandle
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|sparkAppHandle
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|states
index|[
name|states
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|sparkAppListener
operator|.
name|stateChanged
argument_list|(
name|sparkAppHandle
argument_list|)
expr_stmt|;
try|try
block|{
name|future
operator|.
name|get
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
decl||
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"SparkLauncherFuture failed to complete after transitioning to "
operator|+
literal|"state "
operator|+
name|states
index|[
name|states
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|future
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|shutdownLatch
operator|.
name|getCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sparkAppHandle
argument_list|)
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

