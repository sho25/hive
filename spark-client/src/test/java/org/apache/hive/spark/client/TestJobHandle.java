begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Promise
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestJobHandle
block|{
annotation|@
name|Mock
specifier|private
name|SparkClientImpl
name|client
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Promise
argument_list|<
name|Serializable
argument_list|>
name|promise
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|JobHandle
operator|.
name|Listener
argument_list|<
name|Serializable
argument_list|>
name|listener
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|JobHandle
operator|.
name|Listener
argument_list|<
name|Serializable
argument_list|>
name|listener2
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testStateChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|JobHandleImpl
argument_list|<
name|Serializable
argument_list|>
name|handle
init|=
operator|new
name|JobHandleImpl
argument_list|<
name|Serializable
argument_list|>
argument_list|(
name|client
argument_list|,
name|promise
argument_list|,
literal|"job"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|handle
operator|.
name|changeState
argument_list|(
name|JobHandle
operator|.
name|State
operator|.
name|QUEUED
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onJobQueued
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handle
operator|.
name|changeState
argument_list|(
name|JobHandle
operator|.
name|State
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onJobStarted
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|handle
operator|.
name|addSparkJobId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onSparkJobStarted
argument_list|(
name|same
argument_list|(
name|handle
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handle
operator|.
name|changeState
argument_list|(
name|JobHandle
operator|.
name|State
operator|.
name|CANCELLED
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onJobCancelled
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handle
operator|.
name|changeState
argument_list|(
name|JobHandle
operator|.
name|State
operator|.
name|STARTED
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handle
operator|.
name|changeState
argument_list|(
name|JobHandle
operator|.
name|State
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|handle
operator|.
name|changeState
argument_list|(
name|JobHandle
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailedJob
parameter_list|()
throws|throws
name|Exception
block|{
name|JobHandleImpl
argument_list|<
name|Serializable
argument_list|>
name|handle
init|=
operator|new
name|JobHandleImpl
argument_list|<
name|Serializable
argument_list|>
argument_list|(
name|client
argument_list|,
name|promise
argument_list|,
literal|"job"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|Throwable
name|cause
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|promise
operator|.
name|cause
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handle
operator|.
name|changeState
argument_list|(
name|JobHandle
operator|.
name|State
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|promise
argument_list|)
operator|.
name|cause
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onJobFailed
argument_list|(
name|handle
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSucceededJob
parameter_list|()
throws|throws
name|Exception
block|{
name|JobHandleImpl
argument_list|<
name|Serializable
argument_list|>
name|handle
init|=
operator|new
name|JobHandleImpl
argument_list|<
name|Serializable
argument_list|>
argument_list|(
name|client
argument_list|,
name|promise
argument_list|,
literal|"job"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|Serializable
name|result
init|=
operator|new
name|Exception
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|promise
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handle
operator|.
name|changeState
argument_list|(
name|JobHandle
operator|.
name|State
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|promise
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onJobSucceeded
argument_list|(
name|handle
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImmediateCallback
parameter_list|()
throws|throws
name|Exception
block|{
name|JobHandleImpl
argument_list|<
name|Serializable
argument_list|>
name|handle
init|=
operator|new
name|JobHandleImpl
argument_list|<
name|Serializable
argument_list|>
argument_list|(
name|client
argument_list|,
name|promise
argument_list|,
literal|"job"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|listener
argument_list|,
name|listener2
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|handle
operator|.
name|changeState
argument_list|(
name|JobHandle
operator|.
name|State
operator|.
name|QUEUED
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onJobQueued
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|handle
operator|.
name|changeState
argument_list|(
name|JobHandle
operator|.
name|State
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|handle
operator|.
name|addSparkJobId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|handle
operator|.
name|changeState
argument_list|(
name|JobHandle
operator|.
name|State
operator|.
name|CANCELLED
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|listener2
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|listener2
argument_list|)
operator|.
name|onSparkJobStarted
argument_list|(
name|same
argument_list|(
name|handle
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|listener2
argument_list|)
operator|.
name|onJobCancelled
argument_list|(
name|same
argument_list|(
name|handle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

