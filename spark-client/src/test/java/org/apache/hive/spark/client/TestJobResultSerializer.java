begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|Kryo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|com
operator|.
name|esotericsoftware
operator|.
name|kryo
operator|.
name|io
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|counter
operator|.
name|SparkCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|TestJobResultSerializer
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSerializablableExceptionSingleBlankException
parameter_list|()
block|{
name|RuntimeException
name|blankRuntimeException
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|RuntimeException
name|serializableException
init|=
name|JobResultSerializer
operator|.
name|convertToSerializableSparkException
argument_list|(
name|blankRuntimeException
argument_list|)
decl_stmt|;
name|assertException
argument_list|(
name|serializableException
argument_list|,
name|blankRuntimeException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializablableExceptionSingleException
parameter_list|()
block|{
name|RuntimeException
name|blankRuntimeException
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|RuntimeException
name|serializableException
init|=
name|JobResultSerializer
operator|.
name|convertToSerializableSparkException
argument_list|(
name|blankRuntimeException
argument_list|)
decl_stmt|;
name|assertException
argument_list|(
name|serializableException
argument_list|,
name|blankRuntimeException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializablableExceptionNestedBlankException
parameter_list|()
block|{
name|RuntimeException
name|nestedBlankRuntimeException
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|RuntimeException
name|blankRuntimeException
init|=
operator|new
name|RuntimeException
argument_list|(
name|nestedBlankRuntimeException
argument_list|)
decl_stmt|;
name|RuntimeException
name|serializableException
init|=
name|JobResultSerializer
operator|.
name|convertToSerializableSparkException
argument_list|(
name|blankRuntimeException
argument_list|)
decl_stmt|;
name|assertNestedException
argument_list|(
name|serializableException
argument_list|,
name|blankRuntimeException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializablableExceptionNestedException
parameter_list|()
block|{
name|RuntimeException
name|nestedRuntimeException
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|RuntimeException
name|blankRuntimeException
init|=
operator|new
name|RuntimeException
argument_list|(
name|nestedRuntimeException
argument_list|)
decl_stmt|;
name|RuntimeException
name|serializableException
init|=
name|JobResultSerializer
operator|.
name|convertToSerializableSparkException
argument_list|(
name|blankRuntimeException
argument_list|)
decl_stmt|;
name|assertNestedException
argument_list|(
name|serializableException
argument_list|,
name|blankRuntimeException
argument_list|)
expr_stmt|;
name|nestedRuntimeException
operator|=
operator|new
name|RuntimeException
argument_list|()
expr_stmt|;
name|blankRuntimeException
operator|=
operator|new
name|RuntimeException
argument_list|(
literal|"hello"
argument_list|,
name|nestedRuntimeException
argument_list|)
expr_stmt|;
name|serializableException
operator|=
name|JobResultSerializer
operator|.
name|convertToSerializableSparkException
argument_list|(
name|blankRuntimeException
argument_list|)
expr_stmt|;
name|assertNestedException
argument_list|(
name|serializableException
argument_list|,
name|blankRuntimeException
argument_list|)
expr_stmt|;
name|nestedRuntimeException
operator|=
operator|new
name|RuntimeException
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|blankRuntimeException
operator|=
operator|new
name|RuntimeException
argument_list|(
literal|"hello"
argument_list|,
name|nestedRuntimeException
argument_list|)
expr_stmt|;
name|serializableException
operator|=
name|JobResultSerializer
operator|.
name|convertToSerializableSparkException
argument_list|(
name|blankRuntimeException
argument_list|)
expr_stmt|;
name|assertNestedException
argument_list|(
name|serializableException
argument_list|,
name|blankRuntimeException
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertException
parameter_list|(
name|Throwable
name|serializedException
parameter_list|,
name|Throwable
name|originalException
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|originalException
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|Strings
operator|.
name|nullToEmpty
argument_list|(
name|originalException
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|serializedException
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|originalException
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|serializedException
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNestedException
parameter_list|(
name|Throwable
name|serializedException
parameter_list|,
name|Throwable
name|originalException
parameter_list|)
block|{
name|assertException
argument_list|(
name|serializedException
argument_list|,
name|originalException
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
name|serializedException
operator|.
name|getCause
argument_list|()
argument_list|,
name|originalException
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializeNonSerializableObject
parameter_list|()
block|{
name|Kryo
name|kryo
init|=
operator|new
name|Kryo
argument_list|()
decl_stmt|;
name|kryo
operator|.
name|addDefaultSerializer
argument_list|(
name|BaseProtocol
operator|.
name|JobResult
operator|.
name|class
argument_list|,
operator|new
name|JobResultSerializer
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|boas
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Output
name|output
init|=
operator|new
name|Output
argument_list|(
name|boas
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|"1"
decl_stmt|;
name|String
name|result
init|=
literal|"result"
decl_stmt|;
name|SparkCounters
name|counters
init|=
operator|new
name|SparkCounters
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|BaseProtocol
operator|.
name|JobResult
argument_list|<
name|String
argument_list|>
name|jobResult
init|=
operator|new
name|BaseProtocol
operator|.
name|JobResult
argument_list|<>
argument_list|(
name|id
argument_list|,
name|result
argument_list|,
operator|new
name|NonSerializableException
argument_list|(
literal|"content"
argument_list|)
argument_list|,
name|counters
argument_list|)
decl_stmt|;
name|kryo
operator|.
name|writeClassAndObject
argument_list|(
name|output
argument_list|,
name|jobResult
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Input
name|kryoIn
init|=
operator|new
name|Input
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|boas
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|deserializedObject
init|=
name|kryo
operator|.
name|readClassAndObject
argument_list|(
name|kryoIn
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|deserializedObject
operator|instanceof
name|BaseProtocol
operator|.
name|JobResult
argument_list|)
expr_stmt|;
name|BaseProtocol
operator|.
name|JobResult
argument_list|<
name|String
argument_list|>
name|deserializedJobResult
init|=
operator|(
name|BaseProtocol
operator|.
name|JobResult
argument_list|<
name|String
argument_list|>
operator|)
name|deserializedObject
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|id
argument_list|,
name|deserializedJobResult
operator|.
name|id
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
argument_list|,
name|deserializedJobResult
operator|.
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|counters
operator|.
name|toString
argument_list|()
argument_list|,
name|deserializedJobResult
operator|.
name|sparkCounters
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|deserializedJobResult
operator|.
name|error
operator|instanceof
name|RuntimeException
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|NonSerializableException
extends|extends
name|Exception
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2548414562750016219L
decl_stmt|;
specifier|private
specifier|final
name|NonSerializableObject
name|nonSerializableObject
decl_stmt|;
specifier|private
name|NonSerializableException
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|this
operator|.
name|nonSerializableObject
operator|=
operator|new
name|NonSerializableObject
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|NonSerializableObject
block|{
specifier|private
name|String
name|content
decl_stmt|;
specifier|private
name|NonSerializableObject
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

