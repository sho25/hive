begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|spark
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|embedded
operator|.
name|EmbeddedChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestRpc
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRpc
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Closeable
argument_list|>
name|closeables
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|emptyConfig
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_RPC_CHANNEL_LOG_LEVEL
operator|.
name|varname
argument_list|,
literal|"DEBUG"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|closeables
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Closeable
name|c
range|:
name|closeables
control|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Closeable
parameter_list|>
name|T
name|autoClose
parameter_list|(
name|T
name|closeable
parameter_list|)
block|{
name|closeables
operator|.
name|add
argument_list|(
name|closeable
argument_list|)
expr_stmt|;
return|return
name|closeable
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRpcDispatcher
parameter_list|()
throws|throws
name|Exception
block|{
name|Rpc
name|serverRpc
init|=
name|autoClose
argument_list|(
name|Rpc
operator|.
name|createEmbedded
argument_list|(
operator|new
name|TestDispatcher
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Rpc
name|clientRpc
init|=
name|autoClose
argument_list|(
name|Rpc
operator|.
name|createEmbedded
argument_list|(
operator|new
name|TestDispatcher
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestMessage
name|outbound
init|=
operator|new
name|TestMessage
argument_list|(
literal|"Hello World!"
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|TestMessage
argument_list|>
name|call
init|=
name|clientRpc
operator|.
name|call
argument_list|(
name|outbound
argument_list|,
name|TestMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Transferring messages..."
argument_list|)
expr_stmt|;
name|transfer
argument_list|(
name|serverRpc
argument_list|,
name|clientRpc
argument_list|)
expr_stmt|;
name|TestMessage
name|reply
init|=
name|call
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|outbound
operator|.
name|message
argument_list|,
name|reply
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientServer
parameter_list|()
throws|throws
name|Exception
block|{
name|RpcServer
name|server
init|=
name|autoClose
argument_list|(
operator|new
name|RpcServer
argument_list|(
name|emptyConfig
argument_list|)
argument_list|)
decl_stmt|;
name|Rpc
index|[]
name|rpcs
init|=
name|createRpcConnection
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|Rpc
name|serverRpc
init|=
name|rpcs
index|[
literal|0
index|]
decl_stmt|;
name|Rpc
name|client
init|=
name|rpcs
index|[
literal|1
index|]
decl_stmt|;
name|TestMessage
name|outbound
init|=
operator|new
name|TestMessage
argument_list|(
literal|"Hello World!"
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|TestMessage
argument_list|>
name|call
init|=
name|client
operator|.
name|call
argument_list|(
name|outbound
argument_list|,
name|TestMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestMessage
name|reply
init|=
name|call
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|outbound
operator|.
name|message
argument_list|,
name|reply
operator|.
name|message
argument_list|)
expr_stmt|;
name|TestMessage
name|another
init|=
operator|new
name|TestMessage
argument_list|(
literal|"Hello again!"
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|TestMessage
argument_list|>
name|anotherCall
init|=
name|client
operator|.
name|call
argument_list|(
name|another
argument_list|,
name|TestMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestMessage
name|anotherReply
init|=
name|anotherCall
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|another
operator|.
name|message
argument_list|,
name|anotherReply
operator|.
name|message
argument_list|)
expr_stmt|;
name|String
name|errorMsg
init|=
literal|"This is an error."
decl_stmt|;
try|try
block|{
name|client
operator|.
name|call
argument_list|(
operator|new
name|ErrorCall
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ee
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RpcException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ee
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
name|errorMsg
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Test from server to client too.
name|TestMessage
name|serverMsg
init|=
operator|new
name|TestMessage
argument_list|(
literal|"Hello from the server!"
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|TestMessage
argument_list|>
name|serverCall
init|=
name|serverRpc
operator|.
name|call
argument_list|(
name|serverMsg
argument_list|,
name|TestMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestMessage
name|serverReply
init|=
name|serverCall
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|serverMsg
operator|.
name|message
argument_list|,
name|serverReply
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|hostAddress
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Test if rpc_server_address is configured
name|config
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_RPC_SERVER_ADDRESS
operator|.
name|varname
argument_list|,
name|hostAddress
argument_list|)
expr_stmt|;
name|RpcServer
name|server1
init|=
name|autoClose
argument_list|(
operator|new
name|RpcServer
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Host address should match the expected one"
argument_list|,
name|server1
operator|.
name|getAddress
argument_list|()
operator|==
name|hostAddress
argument_list|)
expr_stmt|;
comment|// Test if rpc_server_address is not configured but HS2 server host is configured
name|config
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_RPC_SERVER_ADDRESS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_BIND_HOST
operator|.
name|varname
argument_list|,
name|hostAddress
argument_list|)
expr_stmt|;
name|RpcServer
name|server2
init|=
name|autoClose
argument_list|(
operator|new
name|RpcServer
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Host address should match the expected one"
argument_list|,
name|server2
operator|.
name|getAddress
argument_list|()
operator|==
name|hostAddress
argument_list|)
expr_stmt|;
comment|// Test if both are not configured
name|config
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_RPC_SERVER_ADDRESS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SERVER2_THRIFT_BIND_HOST
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|RpcServer
name|server3
init|=
name|autoClose
argument_list|(
operator|new
name|RpcServer
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Host address should match the expected one"
argument_list|,
name|server3
operator|.
name|getAddress
argument_list|()
operator|==
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadHello
parameter_list|()
throws|throws
name|Exception
block|{
name|RpcServer
name|server
init|=
name|autoClose
argument_list|(
operator|new
name|RpcServer
argument_list|(
name|emptyConfig
argument_list|)
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Rpc
argument_list|>
name|serverRpcFuture
init|=
name|server
operator|.
name|registerClient
argument_list|(
literal|"client"
argument_list|,
literal|"newClient"
argument_list|,
operator|new
name|TestDispatcher
argument_list|()
argument_list|)
decl_stmt|;
name|NioEventLoopGroup
name|eloop
init|=
operator|new
name|NioEventLoopGroup
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Rpc
argument_list|>
name|clientRpcFuture
init|=
name|Rpc
operator|.
name|createClient
argument_list|(
name|emptyConfig
argument_list|,
name|eloop
argument_list|,
literal|"localhost"
argument_list|,
name|server
operator|.
name|getPort
argument_list|()
argument_list|,
literal|"client"
argument_list|,
literal|"wrongClient"
argument_list|,
operator|new
name|TestDispatcher
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|autoClose
argument_list|(
name|clientRpcFuture
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to create client with wrong secret."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
comment|// On failure, the SASL handler will throw an exception indicating that the SASL
comment|// negotiation failed.
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|ee
operator|.
name|getCause
argument_list|()
argument_list|,
name|ee
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SaslException
argument_list|)
expr_stmt|;
block|}
name|serverRpcFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerPort
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|RpcServer
name|server0
init|=
operator|new
name|RpcServer
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Empty port range should return a random valid port: "
operator|+
name|server0
operator|.
name|getPort
argument_list|()
argument_list|,
name|server0
operator|.
name|getPort
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|server0
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_RPC_SERVER_PORT
operator|.
name|varname
argument_list|,
literal|"49152-49222,49223,49224-49333"
argument_list|)
expr_stmt|;
name|RpcServer
name|server1
init|=
operator|new
name|RpcServer
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Port should be within configured port range:"
operator|+
name|server1
operator|.
name|getPort
argument_list|()
argument_list|,
name|server1
operator|.
name|getPort
argument_list|()
operator|>=
literal|49152
operator|&&
name|server1
operator|.
name|getPort
argument_list|()
operator|<=
literal|49333
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|server1
argument_list|)
expr_stmt|;
name|int
name|expectedPort
init|=
literal|65535
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_RPC_SERVER_PORT
operator|.
name|varname
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|expectedPort
argument_list|)
argument_list|)
expr_stmt|;
name|RpcServer
name|server2
init|=
operator|new
name|RpcServer
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Port should match configured one: "
operator|+
name|server2
operator|.
name|getPort
argument_list|()
argument_list|,
name|server2
operator|.
name|getPort
argument_list|()
operator|==
name|expectedPort
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|server2
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_RPC_SERVER_PORT
operator|.
name|varname
argument_list|,
literal|"49552-49222,49223,49224-49333"
argument_list|)
expr_stmt|;
try|try
block|{
name|autoClose
argument_list|(
operator|new
name|RpcServer
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid port range should throw an exception"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Should not reach here
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Incorrect RPC server port configuration for HiveServer2"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Retry logic
name|expectedPort
operator|=
literal|65535
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|SPARK_RPC_SERVER_PORT
operator|.
name|varname
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|expectedPort
argument_list|)
operator|+
literal|",21-23"
argument_list|)
expr_stmt|;
name|RpcServer
name|server3
init|=
operator|new
name|RpcServer
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Port should match configured one:"
operator|+
name|server3
operator|.
name|getPort
argument_list|()
argument_list|,
name|server3
operator|.
name|getPort
argument_list|()
operator|==
name|expectedPort
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|server3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseListener
parameter_list|()
throws|throws
name|Exception
block|{
name|RpcServer
name|server
init|=
name|autoClose
argument_list|(
operator|new
name|RpcServer
argument_list|(
name|emptyConfig
argument_list|)
argument_list|)
decl_stmt|;
name|Rpc
index|[]
name|rpcs
init|=
name|createRpcConnection
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|Rpc
name|client
init|=
name|rpcs
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|AtomicInteger
name|closeCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|client
operator|.
name|addListener
argument_list|(
operator|new
name|Rpc
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|rpcClosed
parameter_list|(
name|Rpc
name|rpc
parameter_list|)
block|{
name|closeCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|closeCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotDeserializableRpc
parameter_list|()
throws|throws
name|Exception
block|{
name|RpcServer
name|server
init|=
name|autoClose
argument_list|(
operator|new
name|RpcServer
argument_list|(
name|emptyConfig
argument_list|)
argument_list|)
decl_stmt|;
name|Rpc
index|[]
name|rpcs
init|=
name|createRpcConnection
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|Rpc
name|client
init|=
name|rpcs
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
name|client
operator|.
name|call
argument_list|(
operator|new
name|NotDeserializable
argument_list|(
literal|42
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ee
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RpcException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ee
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"KryoException"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryption
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|eConf
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|putAll
argument_list|(
name|emptyConfig
argument_list|)
decl|.
name|put
argument_list|(
name|RpcConfiguration
operator|.
name|RPC_SASL_OPT_PREFIX
operator|+
literal|"qop"
argument_list|,
name|Rpc
operator|.
name|SASL_AUTH_CONF
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|RpcServer
name|server
init|=
name|autoClose
argument_list|(
operator|new
name|RpcServer
argument_list|(
name|eConf
argument_list|)
argument_list|)
decl_stmt|;
name|Rpc
index|[]
name|rpcs
init|=
name|createRpcConnection
argument_list|(
name|server
argument_list|,
name|eConf
argument_list|)
decl_stmt|;
name|Rpc
name|client
init|=
name|rpcs
index|[
literal|1
index|]
decl_stmt|;
name|TestMessage
name|outbound
init|=
operator|new
name|TestMessage
argument_list|(
literal|"Hello World!"
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|TestMessage
argument_list|>
name|call
init|=
name|client
operator|.
name|call
argument_list|(
name|outbound
argument_list|,
name|TestMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestMessage
name|reply
init|=
name|call
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|outbound
operator|.
name|message
argument_list|,
name|reply
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|String
decl|>
name|builder
argument_list|()
decl|.
name|putAll
argument_list|(
name|emptyConfig
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
name|RpcServer
name|server
init|=
name|autoClose
argument_list|(
operator|new
name|RpcServer
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|secret
init|=
name|server
operator|.
name|createSecret
argument_list|()
decl_stmt|;
try|try
block|{
name|autoClose
argument_list|(
name|server
operator|.
name|registerClient
argument_list|(
literal|"client"
argument_list|,
name|secret
argument_list|,
operator|new
name|TestDispatcher
argument_list|()
argument_list|,
literal|1L
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Server should have timed out client."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ee
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TimeoutException
argument_list|)
expr_stmt|;
block|}
name|NioEventLoopGroup
name|eloop
init|=
operator|new
name|NioEventLoopGroup
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Rpc
argument_list|>
name|clientRpcFuture
init|=
name|Rpc
operator|.
name|createClient
argument_list|(
name|conf
argument_list|,
name|eloop
argument_list|,
literal|"localhost"
argument_list|,
name|server
operator|.
name|getPort
argument_list|()
argument_list|,
literal|"client"
argument_list|,
name|secret
argument_list|,
operator|new
name|TestDispatcher
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|autoClose
argument_list|(
name|clientRpcFuture
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Client should have failed to connect to server."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
comment|// Error should not be a timeout.
name|assertFalse
argument_list|(
name|ee
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TimeoutException
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|transfer
parameter_list|(
name|Rpc
name|serverRpc
parameter_list|,
name|Rpc
name|clientRpc
parameter_list|)
block|{
name|EmbeddedChannel
name|client
init|=
operator|(
name|EmbeddedChannel
operator|)
name|clientRpc
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|EmbeddedChannel
name|server
init|=
operator|(
name|EmbeddedChannel
operator|)
name|serverRpc
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|server
operator|.
name|runPendingTasks
argument_list|()
expr_stmt|;
name|client
operator|.
name|runPendingTasks
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|client
operator|.
name|outboundMessages
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|server
operator|.
name|writeInbound
argument_list|(
name|client
operator|.
name|readOutbound
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|server
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Transferred {} outbound client messages."
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|!
name|server
operator|.
name|outboundMessages
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|client
operator|.
name|writeInbound
argument_list|(
name|server
operator|.
name|readOutbound
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|client
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Transferred {} outbound server messages."
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a client connection between the server and a client.    *    * @return two-tuple (server rpc, client rpc)    */
specifier|private
name|Rpc
index|[]
name|createRpcConnection
parameter_list|(
name|RpcServer
name|server
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createRpcConnection
argument_list|(
name|server
argument_list|,
name|emptyConfig
argument_list|)
return|;
block|}
specifier|private
name|Rpc
index|[]
name|createRpcConnection
parameter_list|(
name|RpcServer
name|server
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|clientConf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|secret
init|=
name|server
operator|.
name|createSecret
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Rpc
argument_list|>
name|serverRpcFuture
init|=
name|server
operator|.
name|registerClient
argument_list|(
literal|"client"
argument_list|,
name|secret
argument_list|,
operator|new
name|TestDispatcher
argument_list|()
argument_list|)
decl_stmt|;
name|NioEventLoopGroup
name|eloop
init|=
operator|new
name|NioEventLoopGroup
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Rpc
argument_list|>
name|clientRpcFuture
init|=
name|Rpc
operator|.
name|createClient
argument_list|(
name|clientConf
argument_list|,
name|eloop
argument_list|,
literal|"localhost"
argument_list|,
name|server
operator|.
name|getPort
argument_list|()
argument_list|,
literal|"client"
argument_list|,
name|secret
argument_list|,
operator|new
name|TestDispatcher
argument_list|()
argument_list|)
decl_stmt|;
name|Rpc
name|serverRpc
init|=
name|autoClose
argument_list|(
name|serverRpcFuture
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
decl_stmt|;
name|Rpc
name|clientRpc
init|=
name|autoClose
argument_list|(
name|clientRpcFuture
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Rpc
index|[]
block|{
name|serverRpc
block|,
name|clientRpc
block|}
return|;
block|}
specifier|private
specifier|static
class|class
name|TestMessage
block|{
specifier|final
name|String
name|message
decl_stmt|;
specifier|public
name|TestMessage
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ErrorCall
block|{
specifier|final
name|String
name|error
decl_stmt|;
specifier|public
name|ErrorCall
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ErrorCall
parameter_list|(
name|String
name|error
parameter_list|)
block|{
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NotDeserializable
block|{
name|NotDeserializable
parameter_list|(
name|int
name|unused
parameter_list|)
block|{      }
block|}
specifier|private
specifier|static
class|class
name|TestDispatcher
extends|extends
name|RpcDispatcher
block|{
specifier|protected
name|TestMessage
name|handle
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|TestMessage
name|msg
parameter_list|)
block|{
return|return
name|msg
return|;
block|}
specifier|protected
name|void
name|handle
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ErrorCall
name|msg
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
operator|.
name|error
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|handle
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|NotDeserializable
name|msg
parameter_list|)
block|{
comment|// No op. Shouldn't actually be called, if it is, the test will fail.
block|}
block|}
block|}
end_class

end_unit

