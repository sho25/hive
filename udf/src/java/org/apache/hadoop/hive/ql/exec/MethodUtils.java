begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|exec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveGrouping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MethodUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * This method is shared between UDFRegistry and UDAFRegistry. methodName will    * be "evaluate" for UDFRegistry, and "aggregate"/"evaluate"/"evaluatePartial"    * for UDAFRegistry.    * @throws UDFArgumentException    */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Method
name|getMethodInternal
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|udfClass
parameter_list|,
name|String
name|methodName
parameter_list|,
name|boolean
name|exact
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentClasses
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
name|List
argument_list|<
name|Method
argument_list|>
name|mlist
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|udfClass
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
name|mlist
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getMethodInternal
argument_list|(
name|udfClass
argument_list|,
name|mlist
argument_list|,
name|exact
argument_list|,
name|argumentClasses
argument_list|)
return|;
block|}
comment|/**    * Gets the closest matching method corresponding to the argument list from a    * list of methods.    *    * @param mlist    *          The list of methods to inspect.    * @param exact    *          Boolean to indicate whether this is an exact match or not.    * @param argumentsPassed    *          The classes for the argument.    * @return The matching method.    */
specifier|public
specifier|static
name|Method
name|getMethodInternal
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|udfClass
parameter_list|,
name|List
argument_list|<
name|Method
argument_list|>
name|mlist
parameter_list|,
name|boolean
name|exact
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsPassed
parameter_list|)
throws|throws
name|UDFArgumentException
block|{
comment|// result
name|List
argument_list|<
name|Method
argument_list|>
name|udfMethods
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
comment|// The cost of the result
name|int
name|leastConversionCost
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|mlist
control|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsAccepted
init|=
name|TypeInfoUtils
operator|.
name|getParameterTypeInfos
argument_list|(
name|m
argument_list|,
name|argumentsPassed
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|argumentsAccepted
operator|==
literal|null
condition|)
block|{
comment|// null means the method does not accept number of arguments passed.
continue|continue;
block|}
name|boolean
name|match
init|=
operator|(
name|argumentsAccepted
operator|.
name|size
argument_list|()
operator|==
name|argumentsPassed
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|int
name|conversionCost
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argumentsPassed
operator|.
name|size
argument_list|()
operator|&&
name|match
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cost
init|=
name|matchCost
argument_list|(
name|argumentsPassed
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|argumentsAccepted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|exact
argument_list|)
decl_stmt|;
if|if
condition|(
name|cost
operator|==
operator|-
literal|1
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|conversionCost
operator|+=
name|cost
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Method "
operator|+
operator|(
name|match
condition|?
literal|"did"
else|:
literal|"didn't"
operator|)
operator|+
literal|" match: passed = "
operator|+
name|argumentsPassed
operator|+
literal|" accepted = "
operator|+
name|argumentsAccepted
operator|+
literal|" method = "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
block|{
comment|// Always choose the function with least implicit conversions.
if|if
condition|(
name|conversionCost
operator|<
name|leastConversionCost
condition|)
block|{
name|udfMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
name|udfMethods
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|leastConversionCost
operator|=
name|conversionCost
expr_stmt|;
comment|// Found an exact match
if|if
condition|(
name|leastConversionCost
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|conversionCost
operator|==
name|leastConversionCost
condition|)
block|{
comment|// Ambiguous call: two methods with the same number of implicit
comment|// conversions
name|udfMethods
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|// Don't break! We might find a better match later.
block|}
else|else
block|{
comment|// do nothing if implicitConversions> leastImplicitConversions
block|}
block|}
block|}
if|if
condition|(
name|udfMethods
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// No matching methods found
throw|throw
operator|new
name|NoMatchingMethodException
argument_list|(
name|udfClass
argument_list|,
name|argumentsPassed
argument_list|,
name|mlist
argument_list|)
throw|;
block|}
if|if
condition|(
name|udfMethods
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// First try selecting methods based on the type affinity of the arguments passed
comment|// to the candidate method arguments.
name|filterMethodsByTypeAffinity
argument_list|(
name|udfMethods
argument_list|,
name|argumentsPassed
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|udfMethods
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// if the only difference is numeric types, pick the method
comment|// with the smallest overall numeric type.
name|int
name|lowestNumericType
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|boolean
name|multiple
init|=
literal|true
decl_stmt|;
name|Method
name|candidate
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|referenceArguments
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|udfMethods
control|)
block|{
name|int
name|maxNumericType
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsAccepted
init|=
name|TypeInfoUtils
operator|.
name|getParameterTypeInfos
argument_list|(
name|m
argument_list|,
name|argumentsPassed
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|referenceArguments
operator|==
literal|null
condition|)
block|{
comment|// keep the arguments for reference - we want all the non-numeric
comment|// arguments to be the same
name|referenceArguments
operator|=
name|argumentsAccepted
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|TypeInfo
argument_list|>
name|referenceIterator
init|=
name|referenceArguments
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|TypeInfo
name|accepted
range|:
name|argumentsAccepted
control|)
block|{
name|TypeInfo
name|reference
init|=
name|referenceIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|acceptedIsPrimitive
init|=
literal|false
decl_stmt|;
name|PrimitiveCategory
name|acceptedPrimCat
init|=
name|PrimitiveCategory
operator|.
name|UNKNOWN
decl_stmt|;
if|if
condition|(
name|accepted
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|acceptedIsPrimitive
operator|=
literal|true
expr_stmt|;
name|acceptedPrimCat
operator|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|accepted
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|acceptedIsPrimitive
operator|&&
name|TypeInfoUtils
operator|.
name|numericTypes
operator|.
name|containsKey
argument_list|(
name|acceptedPrimCat
argument_list|)
condition|)
block|{
comment|// We're looking for the udf with the smallest maximum numeric type.
name|int
name|typeValue
init|=
name|TypeInfoUtils
operator|.
name|numericTypes
operator|.
name|get
argument_list|(
name|acceptedPrimCat
argument_list|)
decl_stmt|;
name|maxNumericType
operator|=
name|typeValue
operator|>
name|maxNumericType
condition|?
name|typeValue
else|:
name|maxNumericType
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|accepted
operator|.
name|equals
argument_list|(
name|reference
argument_list|)
condition|)
block|{
comment|// There are non-numeric arguments that don't match from one UDF to
comment|// another. We give up at this point.
throw|throw
operator|new
name|AmbiguousMethodException
argument_list|(
name|udfClass
argument_list|,
name|argumentsPassed
argument_list|,
name|mlist
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|lowestNumericType
operator|>
name|maxNumericType
condition|)
block|{
name|multiple
operator|=
literal|false
expr_stmt|;
name|lowestNumericType
operator|=
name|maxNumericType
expr_stmt|;
name|candidate
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maxNumericType
operator|==
name|lowestNumericType
condition|)
block|{
comment|// multiple udfs with the same max type. Unless we find a lower one
comment|// we'll give up.
name|multiple
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|multiple
condition|)
block|{
return|return
name|candidate
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AmbiguousMethodException
argument_list|(
name|udfClass
argument_list|,
name|argumentsPassed
argument_list|,
name|mlist
argument_list|)
throw|;
block|}
block|}
return|return
name|udfMethods
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Given a set of candidate methods and list of argument types, try to    * select the best candidate based on how close the passed argument types are    * to the candidate argument types.    * For a varchar argument, we would prefer evaluate(string) over evaluate(double).    * @param udfMethods  list of candidate methods    * @param argumentsPassed list of argument types to match to the candidate methods    */
specifier|static
name|void
name|filterMethodsByTypeAffinity
parameter_list|(
name|List
argument_list|<
name|Method
argument_list|>
name|udfMethods
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsPassed
parameter_list|)
block|{
if|if
condition|(
name|udfMethods
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Prefer methods with a closer signature based on the primitive grouping of each argument.
comment|// Score each method based on its similarity to the passed argument types.
name|int
name|currentScore
init|=
literal|0
decl_stmt|;
name|int
name|bestMatchScore
init|=
literal|0
decl_stmt|;
name|Method
name|bestMatch
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|udfMethods
control|)
block|{
name|currentScore
operator|=
literal|0
expr_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|argumentsAccepted
init|=
name|TypeInfoUtils
operator|.
name|getParameterTypeInfos
argument_list|(
name|m
argument_list|,
name|argumentsPassed
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|TypeInfo
argument_list|>
name|argsPassedIter
init|=
name|argumentsPassed
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|TypeInfo
name|acceptedType
range|:
name|argumentsAccepted
control|)
block|{
comment|// Check the affinity of the argument passed in with the accepted argument,
comment|// based on the PrimitiveGrouping
name|TypeInfo
name|passedType
init|=
name|argsPassedIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|acceptedType
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
operator|&&
name|passedType
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|PrimitiveGrouping
name|acceptedPg
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|acceptedType
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
decl_stmt|;
name|PrimitiveGrouping
name|passedPg
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getPrimitiveGrouping
argument_list|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|passedType
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acceptedPg
operator|==
name|passedPg
condition|)
block|{
comment|// The passed argument matches somewhat closely with an accepted argument
operator|++
name|currentScore
expr_stmt|;
block|}
block|}
block|}
comment|// Check if the score for this method is any better relative to others
if|if
condition|(
name|currentScore
operator|>
name|bestMatchScore
condition|)
block|{
name|bestMatchScore
operator|=
name|currentScore
expr_stmt|;
name|bestMatch
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentScore
operator|==
name|bestMatchScore
condition|)
block|{
name|bestMatch
operator|=
literal|null
expr_stmt|;
comment|// no longer a best match if more than one.
block|}
block|}
if|if
condition|(
name|bestMatch
operator|!=
literal|null
condition|)
block|{
comment|// Found a best match during this processing, use it.
name|udfMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
name|udfMethods
operator|.
name|add
argument_list|(
name|bestMatch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns -1 if passed does not match accepted. Otherwise return the cost    * (usually 0 for no conversion and 1 for conversion).    */
specifier|public
specifier|static
name|int
name|matchCost
parameter_list|(
name|TypeInfo
name|argumentPassed
parameter_list|,
name|TypeInfo
name|argumentAccepted
parameter_list|,
name|boolean
name|exact
parameter_list|)
block|{
if|if
condition|(
name|argumentAccepted
operator|.
name|equals
argument_list|(
name|argumentPassed
argument_list|)
operator|||
name|TypeInfoUtils
operator|.
name|doPrimitiveCategoriesMatch
argument_list|(
name|argumentPassed
argument_list|,
name|argumentAccepted
argument_list|)
condition|)
block|{
comment|// matches
return|return
literal|0
return|;
block|}
if|if
condition|(
name|argumentPassed
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|voidTypeInfo
argument_list|)
condition|)
block|{
comment|// passing null matches everything
return|return
literal|0
return|;
block|}
if|if
condition|(
name|argumentPassed
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|)
operator|&&
name|argumentAccepted
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|)
condition|)
block|{
comment|// lists are compatible if and only-if the elements are compatible
name|TypeInfo
name|argumentPassedElement
init|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|argumentPassed
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentAcceptedElement
init|=
operator|(
operator|(
name|ListTypeInfo
operator|)
name|argumentAccepted
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
return|return
name|matchCost
argument_list|(
name|argumentPassedElement
argument_list|,
name|argumentAcceptedElement
argument_list|,
name|exact
argument_list|)
return|;
block|}
if|if
condition|(
name|argumentPassed
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|MAP
argument_list|)
operator|&&
name|argumentAccepted
operator|.
name|getCategory
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|MAP
argument_list|)
condition|)
block|{
comment|// lists are compatible if and only-if the elements are compatible
name|TypeInfo
name|argumentPassedKey
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentPassed
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentAcceptedKey
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentAccepted
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentPassedValue
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentPassed
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|argumentAcceptedValue
init|=
operator|(
operator|(
name|MapTypeInfo
operator|)
name|argumentAccepted
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
name|int
name|cost1
init|=
name|matchCost
argument_list|(
name|argumentPassedKey
argument_list|,
name|argumentAcceptedKey
argument_list|,
name|exact
argument_list|)
decl_stmt|;
name|int
name|cost2
init|=
name|matchCost
argument_list|(
name|argumentPassedValue
argument_list|,
name|argumentAcceptedValue
argument_list|,
name|exact
argument_list|)
decl_stmt|;
if|if
condition|(
name|cost1
operator|<
literal|0
operator|||
name|cost2
operator|<
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
name|cost1
argument_list|,
name|cost2
argument_list|)
return|;
block|}
if|if
condition|(
name|argumentAccepted
operator|.
name|equals
argument_list|(
name|TypeInfoFactory
operator|.
name|unknownTypeInfo
argument_list|)
condition|)
block|{
comment|// accepting Object means accepting everything,
comment|// but there is a conversion cost.
return|return
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|exact
operator|&&
name|TypeInfoUtils
operator|.
name|implicitConvertible
argument_list|(
name|argumentPassed
argument_list|,
name|argumentAccepted
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

