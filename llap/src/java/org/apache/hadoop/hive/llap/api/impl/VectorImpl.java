begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|Llap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|BufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|BufferPool
operator|.
name|WeakBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|chunk
operator|.
name|ChunkReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|loader
operator|.
name|ChunkPool
operator|.
name|Chunk
import|;
end_import

begin_comment
comment|/**  * Implementation of Vector. Handles mapping of Vector API to chunks.  */
end_comment

begin_comment
comment|// TODO: write unit tests if this class becomes less primitive.
end_comment

begin_class
specifier|public
class|class
name|VectorImpl
implements|implements
name|Vector
block|{
specifier|private
name|Collection
argument_list|<
name|BufferPool
operator|.
name|WeakBuffer
argument_list|>
name|buffers
decl_stmt|;
comment|// TODO: we store columns by plain index, with nulls for the unneeded ones.
comment|//       Better representation may be added.
specifier|private
specifier|final
name|Chunk
index|[]
name|chunksPerCol
decl_stmt|;
specifier|private
specifier|final
name|Type
index|[]
name|types
decl_stmt|;
specifier|private
specifier|final
name|ChunkReader
index|[]
name|readers
decl_stmt|;
specifier|private
specifier|transient
name|int
name|cachedNumRows
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|numColumnsSet
init|=
literal|0
decl_stmt|;
specifier|public
name|VectorImpl
parameter_list|(
name|Collection
argument_list|<
name|WeakBuffer
argument_list|>
name|buffers
parameter_list|,
name|int
name|colCount
parameter_list|)
block|{
name|chunksPerCol
operator|=
operator|new
name|Chunk
index|[
name|colCount
index|]
expr_stmt|;
name|types
operator|=
operator|new
name|Type
index|[
name|colCount
index|]
expr_stmt|;
name|readers
operator|=
operator|new
name|ChunkReader
index|[
name|colCount
index|]
expr_stmt|;
name|this
operator|.
name|buffers
operator|=
name|buffers
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|BufferPool
operator|.
name|WeakBuffer
argument_list|>
name|getCacheBuffers
parameter_list|()
block|{
return|return
name|buffers
return|;
block|}
comment|/**    * Adds chunk for a column to vector. Can only be called once per column;    * caller has to take care of chaining if there are multiple chunks.    */
specifier|public
name|void
name|addChunk
parameter_list|(
name|int
name|colIx
parameter_list|,
name|Chunk
name|colChunk
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
assert|assert
name|chunksPerCol
index|[
name|colIx
index|]
operator|==
literal|null
assert|;
name|chunksPerCol
index|[
name|colIx
index|]
operator|=
name|colChunk
expr_stmt|;
name|types
index|[
name|colIx
index|]
operator|=
name|type
expr_stmt|;
comment|// not necessary, but helps simplify reading (see prepare).
operator|++
name|numColumnsSet
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfColumns
parameter_list|()
block|{
return|return
name|numColumnsSet
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumberOfRows
parameter_list|()
block|{
if|if
condition|(
name|cachedNumRows
operator|<
literal|0
condition|)
block|{
comment|// We assume every chunk has the same number of rows.
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|chunksPerCol
index|[
operator|++
name|i
index|]
operator|==
literal|null
condition|)
empty_stmt|;
name|cachedNumRows
operator|=
operator|(
operator|new
name|ChunkReader
argument_list|(
name|types
index|[
name|i
index|]
argument_list|,
name|chunksPerCol
index|[
name|i
index|]
argument_list|)
operator|)
operator|.
name|getNumRowsRemaining
argument_list|()
expr_stmt|;
block|}
return|return
name|cachedNumRows
return|;
block|}
annotation|@
name|Override
specifier|public
name|Vector
operator|.
name|ColumnReader
name|next
parameter_list|(
name|int
name|colIx
parameter_list|,
name|int
name|rowCount
parameter_list|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Llap
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Next called for column "
operator|+
name|colIx
operator|+
literal|", asking for "
operator|+
name|rowCount
argument_list|)
expr_stmt|;
block|}
name|ChunkReader
name|reader
init|=
name|readers
index|[
name|colIx
index|]
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
name|reader
operator|=
name|readers
index|[
name|colIx
index|]
operator|=
operator|new
name|ChunkReader
argument_list|(
name|types
index|[
name|colIx
index|]
argument_list|,
name|chunksPerCol
index|[
name|colIx
index|]
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|next
argument_list|(
name|rowCount
argument_list|)
expr_stmt|;
return|return
name|reader
return|;
block|}
block|}
end_class

end_unit

